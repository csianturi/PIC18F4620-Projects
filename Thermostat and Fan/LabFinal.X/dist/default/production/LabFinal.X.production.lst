

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Dec 01 16:18:26 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	text76,global,reloc=2,class=CODE,delta=1
    95                           	psect	text77,global,reloc=2,class=CODE,delta=1
    96                           	psect	text78,global,reloc=2,class=CODE,delta=1
    97                           	psect	text79,global,reloc=2,class=CODE,delta=1
    98                           	psect	text80,global,reloc=2,class=CODE,delta=1
    99                           	psect	text81,global,reloc=2,class=CODE,delta=1
   100                           	psect	text82,global,reloc=2,class=CODE,delta=1
   101                           	psect	text83,global,reloc=2,class=CODE,delta=1
   102                           	psect	text84,global,reloc=2,class=CODE,delta=1
   103                           	psect	text85,global,reloc=2,class=CODE,delta=1
   104                           	psect	text86,global,reloc=2,class=CODE,delta=1
   105                           	psect	text87,global,reloc=2,class=CODE,delta=1
   106                           	psect	text88,global,reloc=2,class=CODE,delta=1
   107                           	psect	text89,global,reloc=2,class=CODE,delta=1
   108                           	psect	text90,global,reloc=2,class=CODE,delta=1
   109                           	psect	text91,global,reloc=2,class=CODE,delta=1
   110                           	psect	text92,global,reloc=2,class=CODE,delta=1
   111                           	psect	text93,global,reloc=2,class=CODE,delta=1
   112                           	psect	text94,global,reloc=2,class=CODE,delta=1
   113                           	psect	text95,global,reloc=2,class=CODE,delta=1
   114                           	psect	text96,global,reloc=2,class=CODE,delta=1
   115                           	psect	text97,global,reloc=2,class=CODE,delta=1
   116                           	psect	text98,global,reloc=2,class=CODE,delta=1
   117                           	psect	text99,global,reloc=2,class=CODE,delta=1
   118                           	psect	text100,global,reloc=2,class=CODE,delta=1
   119                           	psect	text101,global,reloc=2,class=CODE,delta=1
   120                           	psect	text102,global,reloc=2,class=CODE,delta=1
   121                           	psect	text103,global,reloc=2,class=CODE,delta=1
   122                           	psect	text104,global,reloc=2,class=CODE,delta=1
   123                           	psect	text105,global,reloc=2,class=CODE,delta=1
   124                           	psect	text106,global,reloc=2,class=CODE,delta=1
   125                           	psect	text107,global,reloc=2,class=CODE,delta=1
   126                           	psect	text108,global,reloc=2,class=CODE,delta=1
   127                           	psect	text109,global,reloc=2,class=CODE,delta=1
   128                           	psect	text110,global,reloc=2,class=CODE,delta=1
   129                           	psect	text111,global,reloc=2,class=CODE,delta=1
   130                           	psect	text112,global,reloc=2,class=CODE,delta=1
   131                           	psect	text113,global,reloc=2,class=CODE,delta=1
   132                           	psect	text114,global,reloc=2,class=CODE,delta=1
   133                           	psect	text115,global,reloc=2,class=CODE,delta=1
   134                           	psect	text116,global,reloc=2,class=CODE,delta=1
   135                           	psect	text117,global,reloc=2,class=CODE,delta=1
   136                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   137                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   138                           	psect	text119,global,reloc=2,class=CODE,delta=1
   139                           	psect	text120,global,reloc=2,class=CODE,delta=1
   140                           	psect	text121,global,reloc=2,class=CODE,delta=1
   141                           	psect	text122,global,reloc=2,class=CODE,delta=1
   142                           	psect	text123,global,reloc=2,class=CODE,delta=1
   143                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   144                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   145  0000                     
   146                           	psect	idataCOMRAM
   147  003E74                     __pidataCOMRAM:
   148                           	opt stack 0
   149                           
   150                           ;initializer for _heater_set_temp
   151  003E74  4B                 	db	75
   152                           
   153                           	psect	idataBANK0
   154  003348                     __pidataBANK0:
   155                           	opt stack 0
   156                           
   157                           ;initializer for _tempSecond
   158  003348  FF                 	db	255
   159                           
   160                           ;initializer for _wrap
   161  003349  01                 	db	1
   162                           
   163                           ;initializer for _alarm_time
   164  00334A  30                 	db	48
   165  00334B  30                 	db	48
   166  00334C  3A                 	db	58
   167  00334D  30                 	db	48
   168  00334E  30                 	db	48
   169  00334F  3A                 	db	58
   170  003350  30                 	db	48
   171  003351  30                 	db	48
   172  003352  00                 	db	0
   173                           
   174                           ;initializer for _date
   175  003353  30                 	db	48
   176  003354  30                 	db	48
   177  003355  2F                 	db	47
   178  003356  30                 	db	48
   179  003357  30                 	db	48
   180  003358  2F                 	db	47
   181  003359  30                 	db	48
   182  00335A  30                 	db	48
   183  00335B  00                 	db	0
   184                           
   185                           ;initializer for _setup_alarm_time
   186  00335C  30                 	db	48
   187  00335D  30                 	db	48
   188  00335E  3A                 	db	58
   189  00335F  30                 	db	48
   190  003360  30                 	db	48
   191  003361  3A                 	db	58
   192  003362  30                 	db	48
   193  003363  30                 	db	48
   194  003364  00                 	db	0
   195                           
   196                           ;initializer for _setup_date
   197  003365  30                 	db	48
   198  003366  31                 	db	49
   199  003367  2F                 	db	47
   200  003368  30                 	db	48
   201  003369  31                 	db	49
   202  00336A  2F                 	db	47
   203  00336B  30                 	db	48
   204  00336C  30                 	db	48
   205  00336D  00                 	db	0
   206                           
   207                           ;initializer for _setup_time
   208  00336E  30                 	db	48
   209  00336F  30                 	db	48
   210  003370  3A                 	db	58
   211  003371  30                 	db	48
   212  003372  30                 	db	48
   213  003373  3A                 	db	58
   214  003374  30                 	db	48
   215  003375  30                 	db	48
   216  003376  00                 	db	0
   217                           
   218                           ;initializer for _time
   219  003377  30                 	db	48
   220  003378  30                 	db	48
   221  003379  3A                 	db	58
   222  00337A  30                 	db	48
   223  00337B  30                 	db	48
   224  00337C  3A                 	db	58
   225  00337D  30                 	db	48
   226  00337E  30                 	db	48
   227  00337F  00                 	db	0
   228                           
   229                           ;initializer for _Volt_Txt
   230  003380  30                 	db	48
   231  003381  2E                 	db	46
   232  003382  30                 	db	48
   233  003383  30                 	db	48
   234  003384  56                 	db	86
   235  003385  00                 	db	0
   236                           
   237                           ;initializer for _Heater_Set_Temp_Txt
   238  003386  30                 	db	48
   239  003387  37                 	db	55
   240  003388  35                 	db	53
   241  003389  46                 	db	70
   242  00338A  00                 	db	0
   243                           
   244                           ;initializer for _RPM_Txt
   245  00338B  30                 	db	48
   246  00338C  30                 	db	48
   247  00338D  30                 	db	48
   248  00338E  30                 	db	48
   249  00338F  00                 	db	0
   250                           
   251                           ;initializer for _setup_heater_set_text
   252  003390  30                 	db	48
   253  003391  37                 	db	55
   254  003392  35                 	db	53
   255  003393  46                 	db	70
   256  003394  00                 	db	0
   257                           
   258                           ;initializer for _Alarm_SW_Txt
   259  003395  4F                 	db	79
   260  003396  46                 	db	70
   261  003397  46                 	db	70
   262  003398  00                 	db	0
   263                           
   264                           ;initializer for _DC_Txt
   265  003399  30                 	db	48
   266  00339A  30                 	db	48
   267  00339B  30                 	db	48
   268  00339C  00                 	db	0
   269                           
   270                           ;initializer for _Heater_SW_Txt
   271  00339D  4F                 	db	79
   272  00339E  46                 	db	70
   273  00339F  46                 	db	70
   274  0033A0  00                 	db	0
   275                           
   276                           ;initializer for _tempC
   277  0033A1  2B                 	db	43
   278  0033A2  32                 	db	50
   279  0033A3  35                 	db	53
   280  0033A4  00                 	db	0
   281                           
   282                           ;initializer for _tempF
   283  0033A5  2B                 	db	43
   284  0033A6  37                 	db	55
   285  0033A7  37                 	db	55
   286  0033A8  00                 	db	0
   287                           
   288                           ;initializer for _RTC_ALARM_Txt
   289  0033A9  30                 	db	48
   290  0033AA  00                 	db	0
   291                           
   292                           	psect	idataBANK1
   293  003932                     __pidataBANK1:
   294                           	opt stack 0
   295                           
   296                           ;initializer for _buffer
   297  003932  20                 	db	32
   298  003933  45                 	db	69
   299  003934  43                 	db	67
   300  003935  45                 	db	69
   301  003936  33                 	db	51
   302  003937  33                 	db	51
   303  003938  30                 	db	48
   304  003939  31                 	db	49
   305  00393A  4C                 	db	76
   306  00393B  20                 	db	32
   307  00393C  46                 	db	70
   308  00393D  6C                 	db	108
   309  00393E  27                 	db	39
   310  00393F  32                 	db	50
   311  003940  32                 	db	50
   312  003941  20                 	db	32
   313  003942  53                 	db	83
   314  003943  33                 	db	51
   315  003944  20                 	db	32
   316  003945  00                 	db	0
   317  003946  00                 	db	0
   318  003947  00                 	db	0
   319  003948  00                 	db	0
   320  003949  00                 	db	0
   321  00394A  00                 	db	0
   322  00394B  00                 	db	0
   323  00394C  00                 	db	0
   324  00394D  00                 	db	0
   325  00394E  00                 	db	0
   326  00394F  00                 	db	0
   327  003950  00                 	db	0
   328                           
   329                           ;initializer for _array1
   330  003951  A2                 	db	162
   331  003952  62                 	db	98
   332  003953  E2                 	db	226
   333  003954  22                 	db	34
   334  003955  02                 	db	2
   335  003956  C2                 	db	194
   336  003957  E0                 	db	224
   337  003958  A8                 	db	168
   338  003959  90                 	db	144
   339  00395A  68                 	db	104
   340  00395B  98                 	db	152
   341  00395C  B0                 	db	176
   342  00395D  30                 	db	48
   343  00395E  18                 	db	24
   344  00395F  7A                 	db	122
   345  003960  10                 	db	16
   346  003961  38                 	db	56
   347  003962  5A                 	db	90
   348  003963  42                 	db	66
   349  003964  4A                 	db	74
   350  003965  52                 	db	82
   351                           
   352                           	psect	mediumconst
   353  00FCCA                     __pmediumconst:
   354                           	opt stack 0
   355  00FCCA  00                 	db	0
   356  00FCCB                     _font:
   357                           	opt stack 0
   358  00FCCB  00                 	db	0
   359  00FCCC  00                 	db	0
   360  00FCCD  00                 	db	0
   361  00FCCE  00                 	db	0
   362  00FCCF  00                 	db	0
   363  00FCD0  00                 	db	0
   364  00FCD1  00                 	db	0
   365  00FCD2  5F                 	db	95
   366  00FCD3  00                 	db	0
   367  00FCD4  00                 	db	0
   368  00FCD5  00                 	db	0
   369  00FCD6  07                 	db	7
   370  00FCD7  00                 	db	0
   371  00FCD8  07                 	db	7
   372  00FCD9  00                 	db	0
   373  00FCDA  14                 	db	20
   374  00FCDB  7F                 	db	127
   375  00FCDC  14                 	db	20
   376  00FCDD  7F                 	db	127
   377  00FCDE  14                 	db	20
   378  00FCDF  24                 	db	36
   379  00FCE0  2A                 	db	42
   380  00FCE1  7F                 	db	127
   381  00FCE2  2A                 	db	42
   382  00FCE3  12                 	db	18
   383  00FCE4  23                 	db	35
   384  00FCE5  13                 	db	19
   385  00FCE6  08                 	db	8
   386  00FCE7  64                 	db	100
   387  00FCE8  62                 	db	98
   388  00FCE9  36                 	db	54
   389  00FCEA  49                 	db	73
   390  00FCEB  56                 	db	86
   391  00FCEC  20                 	db	32
   392  00FCED  50                 	db	80
   393  00FCEE  00                 	db	0
   394  00FCEF  08                 	db	8
   395  00FCF0  07                 	db	7
   396  00FCF1  03                 	db	3
   397  00FCF2  00                 	db	0
   398  00FCF3  00                 	db	0
   399  00FCF4  1C                 	db	28
   400  00FCF5  22                 	db	34
   401  00FCF6  41                 	db	65
   402  00FCF7  00                 	db	0
   403  00FCF8  00                 	db	0
   404  00FCF9  41                 	db	65
   405  00FCFA  22                 	db	34
   406  00FCFB  1C                 	db	28
   407  00FCFC  00                 	db	0
   408  00FCFD  2A                 	db	42
   409  00FCFE  1C                 	db	28
   410  00FCFF  7F                 	db	127
   411  00FD00  1C                 	db	28
   412  00FD01  2A                 	db	42
   413  00FD02  08                 	db	8
   414  00FD03  08                 	db	8
   415  00FD04  3E                 	db	62
   416  00FD05  08                 	db	8
   417  00FD06  08                 	db	8
   418  00FD07  00                 	db	0
   419  00FD08  80                 	db	128
   420  00FD09  70                 	db	112
   421  00FD0A  30                 	db	48
   422  00FD0B  00                 	db	0
   423  00FD0C  08                 	db	8
   424  00FD0D  08                 	db	8
   425  00FD0E  08                 	db	8
   426  00FD0F  08                 	db	8
   427  00FD10  08                 	db	8
   428  00FD11  00                 	db	0
   429  00FD12  00                 	db	0
   430  00FD13  60                 	db	96
   431  00FD14  60                 	db	96
   432  00FD15  00                 	db	0
   433  00FD16  20                 	db	32
   434  00FD17  10                 	db	16
   435  00FD18  08                 	db	8
   436  00FD19  04                 	db	4
   437  00FD1A  02                 	db	2
   438  00FD1B  3E                 	db	62
   439  00FD1C  51                 	db	81
   440  00FD1D  49                 	db	73
   441  00FD1E  45                 	db	69
   442  00FD1F  3E                 	db	62
   443  00FD20  00                 	db	0
   444  00FD21  42                 	db	66
   445  00FD22  7F                 	db	127
   446  00FD23  40                 	db	64
   447  00FD24  00                 	db	0
   448  00FD25  72                 	db	114
   449  00FD26  49                 	db	73
   450  00FD27  49                 	db	73
   451  00FD28  49                 	db	73
   452  00FD29  46                 	db	70
   453  00FD2A  21                 	db	33
   454  00FD2B  41                 	db	65
   455  00FD2C  49                 	db	73
   456  00FD2D  4D                 	db	77
   457  00FD2E  33                 	db	51
   458  00FD2F  18                 	db	24
   459  00FD30  14                 	db	20
   460  00FD31  12                 	db	18
   461  00FD32  7F                 	db	127
   462  00FD33  10                 	db	16
   463  00FD34  27                 	db	39
   464  00FD35  45                 	db	69
   465  00FD36  45                 	db	69
   466  00FD37  45                 	db	69
   467  00FD38  39                 	db	57
   468  00FD39  3C                 	db	60
   469  00FD3A  4A                 	db	74
   470  00FD3B  49                 	db	73
   471  00FD3C  49                 	db	73
   472  00FD3D  31                 	db	49
   473  00FD3E  41                 	db	65
   474  00FD3F  21                 	db	33
   475  00FD40  11                 	db	17
   476  00FD41  09                 	db	9
   477  00FD42  07                 	db	7
   478  00FD43  36                 	db	54
   479  00FD44  49                 	db	73
   480  00FD45  49                 	db	73
   481  00FD46  49                 	db	73
   482  00FD47  36                 	db	54
   483  00FD48  46                 	db	70
   484  00FD49  49                 	db	73
   485  00FD4A  49                 	db	73
   486  00FD4B  29                 	db	41
   487  00FD4C  1E                 	db	30
   488  00FD4D  00                 	db	0
   489  00FD4E  00                 	db	0
   490  00FD4F  14                 	db	20
   491  00FD50  00                 	db	0
   492  00FD51  00                 	db	0
   493  00FD52  00                 	db	0
   494  00FD53  40                 	db	64
   495  00FD54  34                 	db	52
   496  00FD55  00                 	db	0
   497  00FD56  00                 	db	0
   498  00FD57  00                 	db	0
   499  00FD58  08                 	db	8
   500  00FD59  14                 	db	20
   501  00FD5A  22                 	db	34
   502  00FD5B  41                 	db	65
   503  00FD5C  14                 	db	20
   504  00FD5D  14                 	db	20
   505  00FD5E  14                 	db	20
   506  00FD5F  14                 	db	20
   507  00FD60  14                 	db	20
   508  00FD61  00                 	db	0
   509  00FD62  41                 	db	65
   510  00FD63  22                 	db	34
   511  00FD64  14                 	db	20
   512  00FD65  08                 	db	8
   513  00FD66  02                 	db	2
   514  00FD67  01                 	db	1
   515  00FD68  59                 	db	89
   516  00FD69  09                 	db	9
   517  00FD6A  06                 	db	6
   518  00FD6B  3E                 	db	62
   519  00FD6C  41                 	db	65
   520  00FD6D  5D                 	db	93
   521  00FD6E  59                 	db	89
   522  00FD6F  4E                 	db	78
   523  00FD70  7C                 	db	124
   524  00FD71  12                 	db	18
   525  00FD72  11                 	db	17
   526  00FD73  12                 	db	18
   527  00FD74  7C                 	db	124
   528  00FD75  7F                 	db	127
   529  00FD76  49                 	db	73
   530  00FD77  49                 	db	73
   531  00FD78  49                 	db	73
   532  00FD79  36                 	db	54
   533  00FD7A  3E                 	db	62
   534  00FD7B  41                 	db	65
   535  00FD7C  41                 	db	65
   536  00FD7D  41                 	db	65
   537  00FD7E  22                 	db	34
   538  00FD7F  7F                 	db	127
   539  00FD80  41                 	db	65
   540  00FD81  41                 	db	65
   541  00FD82  41                 	db	65
   542  00FD83  3E                 	db	62
   543  00FD84  7F                 	db	127
   544  00FD85  49                 	db	73
   545  00FD86  49                 	db	73
   546  00FD87  49                 	db	73
   547  00FD88  41                 	db	65
   548  00FD89  7F                 	db	127
   549  00FD8A  09                 	db	9
   550  00FD8B  09                 	db	9
   551  00FD8C  09                 	db	9
   552  00FD8D  01                 	db	1
   553  00FD8E  3E                 	db	62
   554  00FD8F  41                 	db	65
   555  00FD90  41                 	db	65
   556  00FD91  51                 	db	81
   557  00FD92  73                 	db	115
   558  00FD93  7F                 	db	127
   559  00FD94  08                 	db	8
   560  00FD95  08                 	db	8
   561  00FD96  08                 	db	8
   562  00FD97  7F                 	db	127
   563  00FD98  00                 	db	0
   564  00FD99  41                 	db	65
   565  00FD9A  7F                 	db	127
   566  00FD9B  41                 	db	65
   567  00FD9C  00                 	db	0
   568  00FD9D  20                 	db	32
   569  00FD9E  40                 	db	64
   570  00FD9F  41                 	db	65
   571  00FDA0  3F                 	db	63
   572  00FDA1  01                 	db	1
   573  00FDA2  7F                 	db	127
   574  00FDA3  08                 	db	8
   575  00FDA4  14                 	db	20
   576  00FDA5  22                 	db	34
   577  00FDA6  41                 	db	65
   578  00FDA7  7F                 	db	127
   579  00FDA8  40                 	db	64
   580  00FDA9  40                 	db	64
   581  00FDAA  40                 	db	64
   582  00FDAB  40                 	db	64
   583  00FDAC  7F                 	db	127
   584  00FDAD  02                 	db	2
   585  00FDAE  1C                 	db	28
   586  00FDAF  02                 	db	2
   587  00FDB0  7F                 	db	127
   588  00FDB1  7F                 	db	127
   589  00FDB2  04                 	db	4
   590  00FDB3  08                 	db	8
   591  00FDB4  10                 	db	16
   592  00FDB5  7F                 	db	127
   593  00FDB6  3E                 	db	62
   594  00FDB7  41                 	db	65
   595  00FDB8  41                 	db	65
   596  00FDB9  41                 	db	65
   597  00FDBA  3E                 	db	62
   598  00FDBB  7F                 	db	127
   599  00FDBC  09                 	db	9
   600  00FDBD  09                 	db	9
   601  00FDBE  09                 	db	9
   602  00FDBF  06                 	db	6
   603  00FDC0  3E                 	db	62
   604  00FDC1  41                 	db	65
   605  00FDC2  51                 	db	81
   606  00FDC3  21                 	db	33
   607  00FDC4  5E                 	db	94
   608  00FDC5  7F                 	db	127
   609  00FDC6  09                 	db	9
   610  00FDC7  19                 	db	25
   611  00FDC8  29                 	db	41
   612  00FDC9  46                 	db	70
   613  00FDCA                     __end_of_font:
   614                           	opt stack 0
   615  00FDCA                     _font2:
   616                           	opt stack 0
   617  00FDCA  26                 	db	38
   618  00FDCB  49                 	db	73
   619  00FDCC  49                 	db	73
   620  00FDCD  49                 	db	73
   621  00FDCE  32                 	db	50
   622  00FDCF  03                 	db	3
   623  00FDD0  01                 	db	1
   624  00FDD1  7F                 	db	127
   625  00FDD2  01                 	db	1
   626  00FDD3  03                 	db	3
   627  00FDD4  3F                 	db	63
   628  00FDD5  40                 	db	64
   629  00FDD6  40                 	db	64
   630  00FDD7  40                 	db	64
   631  00FDD8  3F                 	db	63
   632  00FDD9  1F                 	db	31
   633  00FDDA  20                 	db	32
   634  00FDDB  40                 	db	64
   635  00FDDC  20                 	db	32
   636  00FDDD  1F                 	db	31
   637  00FDDE  3F                 	db	63
   638  00FDDF  40                 	db	64
   639  00FDE0  38                 	db	56
   640  00FDE1  40                 	db	64
   641  00FDE2  3F                 	db	63
   642  00FDE3  63                 	db	99
   643  00FDE4  14                 	db	20
   644  00FDE5  08                 	db	8
   645  00FDE6  14                 	db	20
   646  00FDE7  63                 	db	99
   647  00FDE8  03                 	db	3
   648  00FDE9  04                 	db	4
   649  00FDEA  78                 	db	120
   650  00FDEB  04                 	db	4
   651  00FDEC  03                 	db	3
   652  00FDED  61                 	db	97
   653  00FDEE  59                 	db	89
   654  00FDEF  49                 	db	73
   655  00FDF0  4D                 	db	77
   656  00FDF1  43                 	db	67
   657  00FDF2  00                 	db	0
   658  00FDF3  7F                 	db	127
   659  00FDF4  41                 	db	65
   660  00FDF5  41                 	db	65
   661  00FDF6  41                 	db	65
   662  00FDF7  02                 	db	2
   663  00FDF8  04                 	db	4
   664  00FDF9  08                 	db	8
   665  00FDFA  10                 	db	16
   666  00FDFB  20                 	db	32
   667  00FDFC  00                 	db	0
   668  00FDFD  41                 	db	65
   669  00FDFE  41                 	db	65
   670  00FDFF  41                 	db	65
   671  00FE00  7F                 	db	127
   672  00FE01  04                 	db	4
   673  00FE02  02                 	db	2
   674  00FE03  01                 	db	1
   675  00FE04  02                 	db	2
   676  00FE05  04                 	db	4
   677  00FE06  40                 	db	64
   678  00FE07  40                 	db	64
   679  00FE08  40                 	db	64
   680  00FE09  40                 	db	64
   681  00FE0A  40                 	db	64
   682  00FE0B  00                 	db	0
   683  00FE0C  03                 	db	3
   684  00FE0D  07                 	db	7
   685  00FE0E  08                 	db	8
   686  00FE0F  00                 	db	0
   687  00FE10  20                 	db	32
   688  00FE11  54                 	db	84
   689  00FE12  54                 	db	84
   690  00FE13  78                 	db	120
   691  00FE14  40                 	db	64
   692  00FE15  7F                 	db	127
   693  00FE16  28                 	db	40
   694  00FE17  44                 	db	68
   695  00FE18  44                 	db	68
   696  00FE19  38                 	db	56
   697  00FE1A  38                 	db	56
   698  00FE1B  44                 	db	68
   699  00FE1C  44                 	db	68
   700  00FE1D  44                 	db	68
   701  00FE1E  28                 	db	40
   702  00FE1F  38                 	db	56
   703  00FE20  44                 	db	68
   704  00FE21  44                 	db	68
   705  00FE22  28                 	db	40
   706  00FE23  7F                 	db	127
   707  00FE24  38                 	db	56
   708  00FE25  54                 	db	84
   709  00FE26  54                 	db	84
   710  00FE27  54                 	db	84
   711  00FE28  18                 	db	24
   712  00FE29  00                 	db	0
   713  00FE2A  08                 	db	8
   714  00FE2B  7E                 	db	126
   715  00FE2C  09                 	db	9
   716  00FE2D  02                 	db	2
   717  00FE2E  18                 	db	24
   718  00FE2F  A4                 	db	164
   719  00FE30  A4                 	db	164
   720  00FE31  9C                 	db	156
   721  00FE32  78                 	db	120
   722  00FE33  7F                 	db	127
   723  00FE34  08                 	db	8
   724  00FE35  04                 	db	4
   725  00FE36  04                 	db	4
   726  00FE37  78                 	db	120
   727  00FE38  00                 	db	0
   728  00FE39  44                 	db	68
   729  00FE3A  7D                 	db	125
   730  00FE3B  40                 	db	64
   731  00FE3C  00                 	db	0
   732  00FE3D  20                 	db	32
   733  00FE3E  40                 	db	64
   734  00FE3F  40                 	db	64
   735  00FE40  3D                 	db	61
   736  00FE41  00                 	db	0
   737  00FE42  7F                 	db	127
   738  00FE43  10                 	db	16
   739  00FE44  28                 	db	40
   740  00FE45  44                 	db	68
   741  00FE46  00                 	db	0
   742  00FE47  00                 	db	0
   743  00FE48  41                 	db	65
   744  00FE49  7F                 	db	127
   745  00FE4A  40                 	db	64
   746  00FE4B  00                 	db	0
   747  00FE4C  7C                 	db	124
   748  00FE4D  04                 	db	4
   749  00FE4E  78                 	db	120
   750  00FE4F  04                 	db	4
   751  00FE50  78                 	db	120
   752  00FE51  7C                 	db	124
   753  00FE52  08                 	db	8
   754  00FE53  04                 	db	4
   755  00FE54  04                 	db	4
   756  00FE55  78                 	db	120
   757  00FE56  38                 	db	56
   758  00FE57  44                 	db	68
   759  00FE58  44                 	db	68
   760  00FE59  44                 	db	68
   761  00FE5A  38                 	db	56
   762  00FE5B  FC                 	db	252
   763  00FE5C  18                 	db	24
   764  00FE5D  24                 	db	36
   765  00FE5E  24                 	db	36
   766  00FE5F  18                 	db	24
   767  00FE60  18                 	db	24
   768  00FE61  24                 	db	36
   769  00FE62  24                 	db	36
   770  00FE63  18                 	db	24
   771  00FE64  FC                 	db	252
   772  00FE65  7C                 	db	124
   773  00FE66  08                 	db	8
   774  00FE67  04                 	db	4
   775  00FE68  04                 	db	4
   776  00FE69  08                 	db	8
   777  00FE6A  48                 	db	72
   778  00FE6B  54                 	db	84
   779  00FE6C  54                 	db	84
   780  00FE6D  54                 	db	84
   781  00FE6E  24                 	db	36
   782  00FE6F  04                 	db	4
   783  00FE70  04                 	db	4
   784  00FE71  3F                 	db	63
   785  00FE72  44                 	db	68
   786  00FE73  24                 	db	36
   787  00FE74  3C                 	db	60
   788  00FE75  40                 	db	64
   789  00FE76  40                 	db	64
   790  00FE77  20                 	db	32
   791  00FE78  7C                 	db	124
   792  00FE79  1C                 	db	28
   793  00FE7A  20                 	db	32
   794  00FE7B  40                 	db	64
   795  00FE7C  20                 	db	32
   796  00FE7D  1C                 	db	28
   797  00FE7E  3C                 	db	60
   798  00FE7F  40                 	db	64
   799  00FE80  30                 	db	48
   800  00FE81  40                 	db	64
   801  00FE82  3C                 	db	60
   802  00FE83  44                 	db	68
   803  00FE84  28                 	db	40
   804  00FE85  10                 	db	16
   805  00FE86  28                 	db	40
   806  00FE87  44                 	db	68
   807  00FE88  4C                 	db	76
   808  00FE89  90                 	db	144
   809  00FE8A  90                 	db	144
   810  00FE8B  90                 	db	144
   811  00FE8C  7C                 	db	124
   812  00FE8D  44                 	db	68
   813  00FE8E  64                 	db	100
   814  00FE8F  54                 	db	84
   815  00FE90  4C                 	db	76
   816  00FE91  44                 	db	68
   817  00FE92  00                 	db	0
   818  00FE93  08                 	db	8
   819  00FE94  36                 	db	54
   820  00FE95  41                 	db	65
   821  00FE96  00                 	db	0
   822  00FE97  00                 	db	0
   823  00FE98  00                 	db	0
   824  00FE99  77                 	db	119
   825  00FE9A  00                 	db	0
   826  00FE9B  00                 	db	0
   827  00FE9C  00                 	db	0
   828  00FE9D  41                 	db	65
   829  00FE9E  36                 	db	54
   830  00FE9F  08                 	db	8
   831  00FEA0  00                 	db	0
   832  00FEA1  02                 	db	2
   833  00FEA2  01                 	db	1
   834  00FEA3  02                 	db	2
   835  00FEA4  04                 	db	4
   836  00FEA5  02                 	db	2
   837  00FEA6                     __end_of_font2:
   838                           	opt stack 0
   839  00FEA6                     _dpowers:
   840                           	opt stack 0
   841  00FEA6  0001               	dw	1
   842  00FEA8  000A               	dw	10
   843  00FEAA  0064               	dw	100
   844  00FEAC  03E8               	dw	1000
   845  00FEAE  2710               	dw	10000
   846  00FEB0                     __end_of_dpowers:
   847                           	opt stack 0
   848  00FEB0                     _hexpowers:
   849                           	opt stack 0
   850  00FEB0  0001               	dw	1
   851  00FEB2  0010               	dw	16
   852  00FEB4  0100               	dw	256
   853  00FEB6  1000               	dw	4096
   854  00FEB8                     __end_of_hexpowers:
   855                           	opt stack 0
   856  0000                     _ADCON0	set	4034
   857  0000                     _ADCON0bits	set	4034
   858  0000                     _ADCON1	set	4033
   859  0000                     _ADCON2	set	4032
   860  0000                     _ADRESH	set	4036
   861  0000                     _ADRESL	set	4035
   862  0000                     _CCP1CON	set	4029
   863  0000                     _CCP2CON	set	4026
   864  0000                     _CCPR1L	set	4030
   865  0000                     _CCPR2L	set	4027
   866  0000                     _INTCON2bits	set	4081
   867  0000                     _INTCON3bits	set	4080
   868  0000                     _INTCONbits	set	4082
   869  0000                     _OSCCON	set	4051
   870  0000                     _PIE1bits	set	3997
   871  0000                     _PIR1bits	set	3998
   872  0000                     _PORTAbits	set	3968
   873  0000                     _PORTBbits	set	3969
   874  0000                     _PORTCbits	set	3970
   875  0000                     _PORTD	set	3971
   876  0000                     _PORTE	set	3972
   877  0000                     _PR2	set	4043
   878  0000                     _RCSTA	set	4011
   879  0000                     _RCSTAbits	set	4011
   880  0000                     _SPBRG	set	4015
   881  0000                     _SPBRGH	set	4016
   882  0000                     _SSPBUF	set	4041
   883  0000                     _SSPCON1	set	4038
   884  0000                     _SSPSTAT	set	4039
   885  0000                     _SSPSTATbits	set	4039
   886  0000                     _T0CON	set	4053
   887  0000                     _T0CONbits	set	4053
   888  0000                     _T1CON	set	4045
   889  0000                     _T1CONbits	set	4045
   890  0000                     _T2CON	set	4042
   891  0000                     _T3CON	set	4017
   892  0000                     _TMR0H	set	4055
   893  0000                     _TMR0L	set	4054
   894  0000                     _TMR1H	set	4047
   895  0000                     _TMR1L	set	4046
   896  0000                     _TMR3L	set	4018
   897  0000                     _TRISA	set	3986
   898  0000                     _TRISAbits	set	3986
   899  0000                     _TRISB	set	3987
   900  0000                     _TRISC	set	3988
   901  0000                     _TRISCbits	set	3988
   902  0000                     _TRISD	set	3989
   903  0000                     _TRISE	set	3990
   904  0000                     _TXREG	set	4013
   905  0000                     _TXSTA	set	4012
   906  0000                     _TXSTAbits	set	4012
   907  0000                     _RBPU	set	32655
   908  0000                     _TRMT	set	32097
   909  00FEB8                     STR_1:
   910  00FEB8  25                 	db	37
   911  00FEB9  30                 	db	48	;'0'
   912  00FEBA  32                 	db	50	;'2'
   913  00FEBB  78                 	db	120	;'x'
   914  00FEBC  3A                 	db	58	;':'
   915  00FEBD  25                 	db	37
   916  00FEBE  30                 	db	48	;'0'
   917  00FEBF  32                 	db	50	;'2'
   918  00FEC0  78                 	db	120	;'x'
   919  00FEC1  3A                 	db	58	;':'
   920  00FEC2  25                 	db	37
   921  00FEC3  30                 	db	48	;'0'
   922  00FEC4  32                 	db	50	;'2'
   923  00FEC5  78                 	db	120	;'x'
   924  00FEC6  20                 	db	32
   925  00FEC7  25                 	db	37
   926  00FEC8  30                 	db	48	;'0'
   927  00FEC9  32                 	db	50	;'2'
   928  00FECA  78                 	db	120	;'x'
   929  00FECB  2F                 	db	47
   930  00FECC  25                 	db	37
   931  00FECD  30                 	db	48	;'0'
   932  00FECE  32                 	db	50	;'2'
   933  00FECF  78                 	db	120	;'x'
   934  00FED0  2F                 	db	47
   935  00FED1  25                 	db	37
   936  00FED2  30                 	db	48	;'0'
   937  00FED3  32                 	db	50	;'2'
   938  00FED4  78                 	db	120	;'x'
   939  00FED5  00                 	db	0
   940  00FED6                     STR_35:
   941  00FED6  43                 	db	67	;'C'
   942  00FED7  61                 	db	97	;'a'
   943  00FED8  6E                 	db	110	;'n'
   944  00FED9  6E                 	db	110	;'n'
   945  00FEDA  6F                 	db	111	;'o'
   946  00FEDB  74                 	db	116	;'t'
   947  00FEDC  20                 	db	32
   948  00FEDD  66                 	db	102	;'f'
   949  00FEDE  69                 	db	105	;'i'
   950  00FEDF  6E                 	db	110	;'n'
   951  00FEE0  64                 	db	100	;'d'
   952  00FEE1  20                 	db	32
   953  00FEE2  62                 	db	98	;'b'
   954  00FEE3  75                 	db	117	;'u'
   955  00FEE4  74                 	db	116	;'t'
   956  00FEE5  74                 	db	116	;'t'
   957  00FEE6  6F                 	db	111	;'o'
   958  00FEE7  6E                 	db	110	;'n'
   959  00FEE8  20                 	db	32
   960  00FEE9  0D                 	db	13
   961  00FEEA  0A                 	db	10
   962  00FEEB  00                 	db	0
   963  00FEEC                     STR_2:
   964  00FEEC  20                 	db	32
   965  00FEED  54                 	db	84	;'T'
   966  00FEEE  65                 	db	101	;'e'
   967  00FEEF  6D                 	db	109	;'m'
   968  00FEF0  70                 	db	112	;'p'
   969  00FEF1  20                 	db	32
   970  00FEF2  3D                 	db	61	;'='
   971  00FEF3  20                 	db	32
   972  00FEF4  25                 	db	37
   973  00FEF5  64                 	db	100	;'d'
   974  00FEF6  20                 	db	32
   975  00FEF7  43                 	db	67	;'C'
   976  00FEF8  20                 	db	32
   977  00FEF9  3D                 	db	61	;'='
   978  00FEFA  20                 	db	32
   979  00FEFB  25                 	db	37
   980  00FEFC  64                 	db	100	;'d'
   981  00FEFD  20                 	db	32
   982  00FEFE  46                 	db	70	;'F'
   983  00FEFF  20                 	db	32
   984  00FF00  00                 	db	0
   985  00FF01                     STR_3:
   986  00FF01  52                 	db	82	;'R'
   987  00FF02  50                 	db	80	;'P'
   988  00FF03  4D                 	db	77	;'M'
   989  00FF04  20                 	db	32
   990  00FF05  3D                 	db	61	;'='
   991  00FF06  20                 	db	32
   992  00FF07  25                 	db	37
   993  00FF08  64                 	db	100	;'d'
   994  00FF09  20                 	db	32
   995  00FF0A  20                 	db	32
   996  00FF0B  64                 	db	100	;'d'
   997  00FF0C  63                 	db	99	;'c'
   998  00FF0D  20                 	db	32
   999  00FF0E  3D                 	db	61	;'='
  1000  00FF0F  20                 	db	32
  1001  00FF10  25                 	db	37
  1002  00FF11  64                 	db	100	;'d'
  1003  00FF12  0D                 	db	13
  1004  00FF13  0A                 	db	10
  1005  00FF14  00                 	db	0
  1006  00FF15                     STR_27:
  1007  00FF15  45                 	db	69	;'E'
  1008  00FF16  43                 	db	67	;'C'
  1009  00FF17  45                 	db	69	;'E'
  1010  00FF18  33                 	db	51	;'3'
  1011  00FF19  33                 	db	51	;'3'
  1012  00FF1A  30                 	db	48	;'0'
  1013  00FF1B  31                 	db	49	;'1'
  1014  00FF1C  4C                 	db	76	;'L'
  1015  00FF1D  20                 	db	32
  1016  00FF1E  53                 	db	83	;'S'
  1017  00FF1F  70                 	db	112	;'p'
  1018  00FF20  27                 	db	39
  1019  00FF21  32                 	db	50	;'2'
  1020  00FF22  32                 	db	50	;'2'
  1021  00FF23  20                 	db	32
  1022  00FF24  53                 	db	83	;'S'
  1023  00FF25  78                 	db	120	;'x'
  1024  00FF26  00                 	db	0
  1025  00FF27  00                 	db	0
  1026  00FF28                     STR_4:
  1027  00FF28  20                 	db	32
  1028  00FF29  45                 	db	69	;'E'
  1029  00FF2A  43                 	db	67	;'C'
  1030  00FF2B  45                 	db	69	;'E'
  1031  00FF2C  33                 	db	51	;'3'
  1032  00FF2D  33                 	db	51	;'3'
  1033  00FF2E  30                 	db	48	;'0'
  1034  00FF2F  31                 	db	49	;'1'
  1035  00FF30  4C                 	db	76	;'L'
  1036  00FF31  20                 	db	32
  1037  00FF32  46                 	db	70	;'F'
  1038  00FF33  27                 	db	39
  1039  00FF34  32                 	db	50	;'2'
  1040  00FF35  32                 	db	50	;'2'
  1041  00FF36  20                 	db	32
  1042  00FF37  53                 	db	83	;'S'
  1043  00FF38  33                 	db	51	;'3'
  1044  00FF39  00                 	db	0
  1045  00FF3A  00                 	db	0
  1046  00FF3B                     STR_22:
  1047  00FF3B  45                 	db	69	;'E'
  1048  00FF3C  43                 	db	67	;'C'
  1049  00FF3D  45                 	db	69	;'E'
  1050  00FF3E  33                 	db	51	;'3'
  1051  00FF3F  33                 	db	51	;'3'
  1052  00FF40  30                 	db	48	;'0'
  1053  00FF41  31                 	db	49	;'1'
  1054  00FF42  4C                 	db	76	;'L'
  1055  00FF43  20                 	db	32
  1056  00FF44  53                 	db	83	;'S'
  1057  00FF45  70                 	db	112	;'p'
  1058  00FF46  27                 	db	39
  1059  00FF47  32                 	db	50	;'2'
  1060  00FF48  32                 	db	50	;'2'
  1061  00FF49  20                 	db	32
  1062  00FF4A  53                 	db	83	;'S'
  1063  00FF4B  78                 	db	120	;'x'
  1064  00FF4C  00                 	db	0
  1065  00FF4D                     STR_36:
  1066  00FF4D  30                 	db	48	;'0'
  1067  00FF4E  31                 	db	49	;'1'
  1068  00FF4F  32                 	db	50	;'2'
  1069  00FF50  33                 	db	51	;'3'
  1070  00FF51  34                 	db	52	;'4'
  1071  00FF52  35                 	db	53	;'5'
  1072  00FF53  36                 	db	54	;'6'
  1073  00FF54  37                 	db	55	;'7'
  1074  00FF55  38                 	db	56	;'8'
  1075  00FF56  39                 	db	57	;'9'
  1076  00FF57  61                 	db	97	;'a'
  1077  00FF58  62                 	db	98	;'b'
  1078  00FF59  63                 	db	99	;'c'
  1079  00FF5A  64                 	db	100	;'d'
  1080  00FF5B  65                 	db	101	;'e'
  1081  00FF5C  66                 	db	102	;'f'
  1082  00FF5D  00                 	db	0
  1083  00FF5E                     STR_30:
  1084  00FF5E  53                 	db	83	;'S'
  1085  00FF5F  65                 	db	101	;'e'
  1086  00FF60  74                 	db	116	;'t'
  1087  00FF61  20                 	db	32
  1088  00FF62  48                 	db	72	;'H'
  1089  00FF63  65                 	db	101	;'e'
  1090  00FF64  61                 	db	97	;'a'
  1091  00FF65  74                 	db	116	;'t'
  1092  00FF66  65                 	db	101	;'e'
  1093  00FF67  72                 	db	114	;'r'
  1094  00FF68  20                 	db	32
  1095  00FF69  54                 	db	84	;'T'
  1096  00FF6A  65                 	db	101	;'e'
  1097  00FF6B  6D                 	db	109	;'m'
  1098  00FF6C  70                 	db	112	;'p'
  1099  00FF6D  00                 	db	0
  1100  00FF6E                     STR_5:
  1101  00FF6E  54                 	db	84	;'T'
  1102  00FF6F  65                 	db	101	;'e'
  1103  00FF70  6D                 	db	109	;'m'
  1104  00FF71  70                 	db	112	;'p'
  1105  00FF72  65                 	db	101	;'e'
  1106  00FF73  72                 	db	114	;'r'
  1107  00FF74  61                 	db	97	;'a'
  1108  00FF75  74                 	db	116	;'t'
  1109  00FF76  75                 	db	117	;'u'
  1110  00FF77  72                 	db	114	;'r'
  1111  00FF78  65                 	db	101	;'e'
  1112  00FF79  3A                 	db	58	;':'
  1113  00FF7A  00                 	db	0
  1114  00FF7B                     STR_12:
  1115  00FF7B  48                 	db	72	;'H'
  1116  00FF7C  54                 	db	84	;'T'
  1117  00FF7D  52                 	db	82	;'R'
  1118  00FF7E  20                 	db	32
  1119  00FF7F  53                 	db	83	;'S'
  1120  00FF80  65                 	db	101	;'e'
  1121  00FF81  74                 	db	116	;'t'
  1122  00FF82  20                 	db	32
  1123  00FF83  54                 	db	84	;'T'
  1124  00FF84  65                 	db	101	;'e'
  1125  00FF85  6D                 	db	109	;'m'
  1126  00FF86  70                 	db	112	;'p'
  1127  00FF87  00                 	db	0
  1128  00FF88                     STR_32:
  1129  00FF88  54                 	db	84	;'T'
  1130  00FF89  69                 	db	105	;'i'
  1131  00FF8A  6D                 	db	109	;'m'
  1132  00FF8B  65                 	db	101	;'e'
  1133  00FF8C  20                 	db	32
  1134  00FF8D  53                 	db	83	;'S'
  1135  00FF8E  65                 	db	101	;'e'
  1136  00FF8F  74                 	db	116	;'t'
  1137  00FF90  75                 	db	117	;'u'
  1138  00FF91  70                 	db	112	;'p'
  1139  00FF92  00                 	db	0
  1140  00FF93  00                 	db	0
  1141  00FF94                     STR_28:
  1142  00FF94  20                 	db	32
  1143  00FF95  20                 	db	32
  1144  00FF96  48                 	db	72	;'H'
  1145  00FF97  65                 	db	101	;'e'
  1146  00FF98  61                 	db	97	;'a'
  1147  00FF99  74                 	db	116	;'t'
  1148  00FF9A  65                 	db	101	;'e'
  1149  00FF9B  72                 	db	114	;'r'
  1150  00FF9C  00                 	db	0
  1151  00FF9D  20                 	db	32
  1152  00FF9E  00                 	db	0
  1153  00FF9F                     STR_26:
  1154  00FF9F  25                 	db	37
  1155  00FFA0  78                 	db	120	;'x'
  1156  00FFA1  3A                 	db	58	;':'
  1157  00FFA2  25                 	db	37
  1158  00FFA3  78                 	db	120	;'x'
  1159  00FFA4  3A                 	db	58	;':'
  1160  00FFA5  25                 	db	37
  1161  00FFA6  78                 	db	120	;'x'
  1162  00FFA7  0D                 	db	13
  1163  00FFA8  0A                 	db	10
  1164  00FFA9  00                 	db	0
  1165  00FFAA                     STR_10:
  1166  00FFAA  41                 	db	65	;'A'
  1167  00FFAB  6C                 	db	108	;'l'
  1168  00FFAC  61                 	db	97	;'a'
  1169  00FFAD  72                 	db	114	;'r'
  1170  00FFAE  6D                 	db	109	;'m'
  1171  00FFAF  20                 	db	32
  1172  00FFB0  54                 	db	84	;'T'
  1173  00FFB1  69                 	db	105	;'i'
  1174  00FFB2  6D                 	db	109	;'m'
  1175  00FFB3  65                 	db	101	;'e'
  1176  00FFB4  00                 	db	0
  1177  00FFB5                     STR_29:
  1178  00FFB5  20                 	db	32
  1179  00FFB6  20                 	db	32
  1180  00FFB7  53                 	db	83	;'S'
  1181  00FFB8  65                 	db	101	;'e'
  1182  00FFB9  74                 	db	116	;'t'
  1183  00FFBA  75                 	db	117	;'u'
  1184  00FFBB  70                 	db	112	;'p'
  1185  00FFBC  00                 	db	0
  1186  00FFBD  20                 	db	32
  1187  00FFBE  00                 	db	0
  1188  00FFBF                     STR_11:
  1189  00FFBF  41                 	db	65	;'A'
  1190  00FFC0  6C                 	db	108	;'l'
  1191  00FFC1  61                 	db	97	;'a'
  1192  00FFC2  72                 	db	114	;'r'
  1193  00FFC3  6D                 	db	109	;'m'
  1194  00FFC4  20                 	db	32
  1195  00FFC5  53                 	db	83	;'S'
  1196  00FFC6  57                 	db	87	;'W'
  1197  00FFC7  00                 	db	0
  1198  00FFC8                     STR_23:
  1199  00FFC8  20                 	db	32
  1200  00FFC9  20                 	db	32
  1201  00FFCA  41                 	db	65	;'A'
  1202  00FFCB  6C                 	db	108	;'l'
  1203  00FFCC  61                 	db	97	;'a'
  1204  00FFCD  72                 	db	114	;'r'
  1205  00FFCE  6D                 	db	109	;'m'
  1206  00FFCF  00                 	db	0
  1207  00FFD0                     STR_24:
  1208  00FFD0  20                 	db	32
  1209  00FFD1  20                 	db	32
  1210  00FFD2  53                 	db	83	;'S'
  1211  00FFD3  65                 	db	101	;'e'
  1212  00FFD4  74                 	db	116	;'t'
  1213  00FFD5  75                 	db	117	;'u'
  1214  00FFD6  70                 	db	112	;'p'
  1215  00FFD7  00                 	db	0
  1216  00FFD8                     STR_13:
  1217  00FFD8  48                 	db	72	;'H'
  1218  00FFD9  54                 	db	84	;'T'
  1219  00FFDA  52                 	db	82	;'R'
  1220  00FFDB  20                 	db	32
  1221  00FFDC  53                 	db	83	;'S'
  1222  00FFDD  57                 	db	87	;'W'
  1223  00FFDE  00                 	db	0
  1224  00FFDF                     STR_9:
  1225  00FFDF  44                 	db	68	;'D'
  1226  00FFE0  61                 	db	97	;'a'
  1227  00FFE1  74                 	db	116	;'t'
  1228  00FFE2  65                 	db	101	;'e'
  1229  00FFE3  00                 	db	0
  1230  00FFE4                     STR_16:
  1231  00FFE4  56                 	db	86	;'V'
  1232  00FFE5  6F                 	db	111	;'o'
  1233  00FFE6  6C                 	db	108	;'l'
  1234  00FFE7  74                 	db	116	;'t'
  1235  00FFE8  00                 	db	0
  1236  00FFE9                     STR_18:
  1237  00FFE9  4F                 	db	79	;'O'
  1238  00FFEA  4E                 	db	78	;'N'
  1239  00FFEB  20                 	db	32
  1240  00FFEC  00                 	db	0
  1241  00FFED                     STR_19:
  1242  00FFED  4F                 	db	79	;'O'
  1243  00FFEE  46                 	db	70	;'F'
  1244  00FFEF  46                 	db	70	;'F'
  1245  00FFF0  00                 	db	0
  1246  00FFF1                     STR_17:
  1247  00FFF1  52                 	db	82	;'R'
  1248  00FFF2  50                 	db	80	;'P'
  1249  00FFF3  4D                 	db	77	;'M'
  1250  00FFF4  00                 	db	0
  1251  00FFF5                     STR_6:
  1252  00FFF5  43                 	db	67	;'C'
  1253  00FFF6  2F                 	db	47
  1254  00FFF7  00                 	db	0
  1255  00FFF8                     STR_14:
  1256  00FFF8  44                 	db	68	;'D'
  1257  00FFF9  43                 	db	67	;'C'
  1258  00FFFA  00                 	db	0
  1259  00FFFB                     STR_15:
  1260  00FFFB  52                 	db	82	;'R'
  1261  00FFFC  4D                 	db	77	;'M'
  1262  00FFFD  00                 	db	0
  1263  0000                     
  1264                           ; #config settings
  1265  00FFFE  00                 	db	0	; dummy byte at the end
  1266  0000                     
  1267                           	psect	cinit
  1268  003132                     __pcinit:
  1269                           	opt stack 0
  1270  003132                     start_initialization:
  1271                           	opt stack 0
  1272  003132                     __initialization:
  1273                           	opt stack 0
  1274                           
  1275                           ; Clear objects allocated to BANK0 (26 bytes)
  1276  003132  EE00  F0E3         	lfsr	0,__pbssBANK0
  1277  003136  0E1A               	movlw	26
  1278  003138                     clear_0:
  1279  003138  6AEE               	clrf	postinc0,c
  1280  00313A  06E8               	decf	wreg,f,c
  1281  00313C  E1FD               	bnz	clear_0
  1282                           
  1283                           ; Clear objects allocated to COMRAM (43 bytes)
  1284  00313E  EE00  F044         	lfsr	0,__pbssCOMRAM
  1285  003142  0E2B               	movlw	43
  1286  003144                     clear_1:
  1287  003144  6AEE               	clrf	postinc0,c
  1288  003146  06E8               	decf	wreg,f,c
  1289  003148  E1FD               	bnz	clear_1
  1290                           
  1291                           ; Initialize objects allocated to BANK1 (52 bytes)
  1292                           ; load TBLPTR registers with __pidataBANK1
  1293  00314A  0E32               	movlw	low __pidataBANK1
  1294  00314C  6EF6               	movwf	tblptrl,c
  1295  00314E  0E39               	movlw	high __pidataBANK1
  1296  003150  6EF7               	movwf	tblptrh,c
  1297  003152  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1298  003154  6EF8               	movwf	tblptru,c
  1299  003156  EE01  F000         	lfsr	0,__pdataBANK1
  1300  00315A  EE10 F034          	lfsr	1,52
  1301  00315E                     copy_data0:
  1302  00315E  0009               	tblrd		*+
  1303  003160  CFF5 FFEE          	movff	tablat,postinc0
  1304  003164  50E5               	movf	postdec1,w,c
  1305  003166  50E1               	movf	fsr1l,w,c
  1306  003168  E1FA               	bnz	copy_data0
  1307                           
  1308                           ; Initialize objects allocated to BANK0 (99 bytes)
  1309                           ; load TBLPTR registers with __pidataBANK0
  1310  00316A  0E48               	movlw	low __pidataBANK0
  1311  00316C  6EF6               	movwf	tblptrl,c
  1312  00316E  0E33               	movlw	high __pidataBANK0
  1313  003170  6EF7               	movwf	tblptrh,c
  1314  003172  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1315  003174  6EF8               	movwf	tblptru,c
  1316  003176  EE00  F080         	lfsr	0,__pdataBANK0
  1317  00317A  EE10 F063          	lfsr	1,99
  1318  00317E                     copy_data1:
  1319  00317E  0009               	tblrd		*+
  1320  003180  CFF5 FFEE          	movff	tablat,postinc0
  1321  003184  50E5               	movf	postdec1,w,c
  1322  003186  50E1               	movf	fsr1l,w,c
  1323  003188  E1FA               	bnz	copy_data1
  1324                           
  1325                           ; Initialize objects allocated to COMRAM (1 bytes)
  1326                           ; load TBLPTR registers with __pidataCOMRAM
  1327  00318A  0E74               	movlw	low __pidataCOMRAM
  1328  00318C  6EF6               	movwf	tblptrl,c
  1329  00318E  0E3E               	movlw	high __pidataCOMRAM
  1330  003190  6EF7               	movwf	tblptrh,c
  1331  003192  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1332  003194  6EF8               	movwf	tblptru,c
  1333  003196  0009               	tblrd		*+	;fetch initializer
  1334  003198  CFF5 F06F          	movff	tablat,__pdataCOMRAM
  1335  00319C                     end_of_initialization:
  1336                           	opt stack 0
  1337  00319C                     __end_of__initialization:
  1338                           	opt stack 0
  1339  00319C  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1340  00319E  6EF8               	movwf	tblptru,c
  1341  0031A0  0100               	movlb	0
  1342  0031A2  EFA4  F006         	goto	_main	;jump to C main() function
  1343                           tblptru	equ	0xFF8
  1344                           tblptrh	equ	0xFF7
  1345                           tblptrl	equ	0xFF6
  1346                           tablat	equ	0xFF5
  1347                           postinc0	equ	0xFEE
  1348                           wreg	equ	0xFE8
  1349                           postdec1	equ	0xFE5
  1350                           fsr1l	equ	0xFE1
  1351                           
  1352                           	psect	bssCOMRAM
  1353  000044                     __pbssCOMRAM:
  1354                           	opt stack 0
  1355  000044                     _ALARMEN:
  1356                           	opt stack 0
  1357  000044                     	ds	2
  1358  000046                     _DS1621_tempC:
  1359                           	opt stack 0
  1360  000046                     	ds	2
  1361  000048                     _DS1621_tempF:
  1362                           	opt stack 0
  1363  000048                     	ds	2
  1364  00004A                     _Time_Elapsed:
  1365                           	opt stack 0
  1366  00004A                     	ds	2
  1367  00004C                     _rpm:
  1368                           	opt stack 0
  1369  00004C                     	ds	2
  1370  00004E                     _txt:
  1371                           	opt stack 0
  1372  00004E                     	ds	2
  1373  000050                     _HEATER:
  1374                           	opt stack 0
  1375  000050                     	ds	1
  1376  000051                     _Nec_state:
  1377                           	opt stack 0
  1378  000051                     	ds	1
  1379  000052                     _Select_Alarm_Field:
  1380                           	opt stack 0
  1381  000052                     	ds	1
  1382  000053                     _Select_Field:
  1383                           	opt stack 0
  1384  000053                     	ds	1
  1385  000054                     __tft_type:
  1386                           	opt stack 0
  1387  000054                     	ds	1
  1388  000055                     _alarm_date:
  1389                           	opt stack 0
  1390  000055                     	ds	1
  1391  000056                     _alarm_hour:
  1392                           	opt stack 0
  1393  000056                     	ds	1
  1394  000057                     _alarm_minute:
  1395                           	opt stack 0
  1396  000057                     	ds	1
  1397  000058                     _alarm_second:
  1398                           	opt stack 0
  1399  000058                     	ds	1
  1400  000059                     _bit_count:
  1401                           	opt stack 0
  1402  000059                     	ds	1
  1403  00005A                     _colstart:
  1404                           	opt stack 0
  1405  00005A                     	ds	1
  1406  00005B                     _day:
  1407                           	opt stack 0
  1408  00005B                     	ds	1
  1409  00005C                     _dow:
  1410                           	opt stack 0
  1411  00005C                     	ds	1
  1412  00005D                     _duty_cycle:
  1413                           	opt stack 0
  1414  00005D                     	ds	1
  1415  00005E                     _found:
  1416                           	opt stack 0
  1417  00005E                     	ds	1
  1418  00005F                     _hour:
  1419                           	opt stack 0
  1420  00005F                     	ds	1
  1421  000060                     _minute:
  1422                           	opt stack 0
  1423  000060                     	ds	1
  1424  000061                     _month:
  1425                           	opt stack 0
  1426  000061                     	ds	1
  1427  000062                     _rowstart:
  1428                           	opt stack 0
  1429  000062                     	ds	1
  1430  000063                     _second:
  1431                           	opt stack 0
  1432  000063                     	ds	1
  1433  000064                     _setup_alarm_hour:
  1434                           	opt stack 0
  1435  000064                     	ds	1
  1436  000065                     _setup_alarm_minute:
  1437                           	opt stack 0
  1438  000065                     	ds	1
  1439  000066                     _setup_alarm_second:
  1440                           	opt stack 0
  1441  000066                     	ds	1
  1442  000067                     _setup_day:
  1443                           	opt stack 0
  1444  000067                     	ds	1
  1445  000068                     _setup_heater_set_temp:
  1446                           	opt stack 0
  1447  000068                     	ds	1
  1448  000069                     _setup_hour:
  1449                           	opt stack 0
  1450  000069                     	ds	1
  1451  00006A                     _setup_minute:
  1452                           	opt stack 0
  1453  00006A                     	ds	1
  1454  00006B                     _setup_month:
  1455                           	opt stack 0
  1456  00006B                     	ds	1
  1457  00006C                     _setup_second:
  1458                           	opt stack 0
  1459  00006C                     	ds	1
  1460  00006D                     _setup_year:
  1461                           	opt stack 0
  1462  00006D                     	ds	1
  1463  00006E                     _year:
  1464                           	opt stack 0
  1465  00006E                     	ds	1
  1466                           tblptru	equ	0xFF8
  1467                           tblptrh	equ	0xFF7
  1468                           tblptrl	equ	0xFF6
  1469                           tablat	equ	0xFF5
  1470                           postinc0	equ	0xFEE
  1471                           wreg	equ	0xFE8
  1472                           postdec1	equ	0xFE5
  1473                           fsr1l	equ	0xFE1
  1474                           
  1475                           	psect	dataCOMRAM
  1476  00006F                     __pdataCOMRAM:
  1477                           	opt stack 0
  1478  00006F                     _heater_set_temp:
  1479                           	opt stack 0
  1480  00006F                     	ds	1
  1481                           tblptru	equ	0xFF8
  1482                           tblptrh	equ	0xFF7
  1483                           tblptrl	equ	0xFF6
  1484                           tablat	equ	0xFF5
  1485                           postinc0	equ	0xFEE
  1486                           wreg	equ	0xFE8
  1487                           postdec1	equ	0xFE5
  1488                           fsr1l	equ	0xFE1
  1489                           
  1490                           	psect	bssBANK0
  1491  0000E3                     __pbssBANK0:
  1492                           	opt stack 0
  1493  0000E3                     _Nec_code:
  1494                           	opt stack 0
  1495  0000E3                     	ds	4
  1496  0000E7                     _volt:
  1497                           	opt stack 0
  1498  0000E7                     	ds	3
  1499  0000EA                     _MATCHED:
  1500                           	opt stack 0
  1501  0000EA                     	ds	2
  1502  0000EC                     _alarm_mode:
  1503                           	opt stack 0
  1504  0000EC                     	ds	2
  1505  0000EE                     _color:
  1506                           	opt stack 0
  1507  0000EE                     	ds	2
  1508  0000F0                     _nbr:
  1509                           	opt stack 0
  1510  0000F0                     	ds	2
  1511  0000F2                     _nec_ok:
  1512                           	opt stack 0
  1513  0000F2                     	ds	2
  1514  0000F4                     _rps:
  1515                           	opt stack 0
  1516  0000F4                     	ds	2
  1517  0000F6                     _INT1_flag:
  1518                           	opt stack 0
  1519  0000F6                     	ds	1
  1520  0000F7                     _INT2_flag:
  1521                           	opt stack 0
  1522  0000F7                     	ds	1
  1523  0000F8                     _In_Alarm_Time_Setup:
  1524                           	opt stack 0
  1525  0000F8                     	ds	1
  1526  0000F9                     _In_Heater_Temp_Setup:
  1527                           	opt stack 0
  1528  0000F9                     	ds	1
  1529  0000FA                     _In_Time_Setup:
  1530                           	opt stack 0
  1531  0000FA                     	ds	1
  1532  0000FB                     _Nec_code1:
  1533                           	opt stack 0
  1534  0000FB                     	ds	1
  1535  0000FC                     _Select_Heater_Temp_Field:
  1536                           	opt stack 0
  1537  0000FC                     	ds	1
  1538                           tblptru	equ	0xFF8
  1539                           tblptrh	equ	0xFF7
  1540                           tblptrl	equ	0xFF6
  1541                           tablat	equ	0xFF5
  1542                           postinc0	equ	0xFEE
  1543                           wreg	equ	0xFE8
  1544                           postdec1	equ	0xFE5
  1545                           fsr1l	equ	0xFE1
  1546                           
  1547                           	psect	dataBANK0
  1548  000080                     __pdataBANK0:
  1549                           	opt stack 0
  1550  000080                     _tempSecond:
  1551                           	opt stack 0
  1552  000080                     	ds	1
  1553  000081                     _wrap:
  1554                           	opt stack 0
  1555  000081                     	ds	1
  1556  000082                     _alarm_time:
  1557                           	opt stack 0
  1558  000082                     	ds	9
  1559  00008B                     _date:
  1560                           	opt stack 0
  1561  00008B                     	ds	9
  1562  000094                     _setup_alarm_time:
  1563                           	opt stack 0
  1564  000094                     	ds	9
  1565  00009D                     _setup_date:
  1566                           	opt stack 0
  1567  00009D                     	ds	9
  1568  0000A6                     _setup_time:
  1569                           	opt stack 0
  1570  0000A6                     	ds	9
  1571  0000AF                     _time:
  1572                           	opt stack 0
  1573  0000AF                     	ds	9
  1574  0000B8                     _Volt_Txt:
  1575                           	opt stack 0
  1576  0000B8                     	ds	6
  1577  0000BE                     _Heater_Set_Temp_Txt:
  1578                           	opt stack 0
  1579  0000BE                     	ds	5
  1580  0000C3                     _RPM_Txt:
  1581                           	opt stack 0
  1582  0000C3                     	ds	5
  1583  0000C8                     _setup_heater_set_text:
  1584                           	opt stack 0
  1585  0000C8                     	ds	5
  1586  0000CD                     _Alarm_SW_Txt:
  1587                           	opt stack 0
  1588  0000CD                     	ds	4
  1589  0000D1                     _DC_Txt:
  1590                           	opt stack 0
  1591  0000D1                     	ds	4
  1592  0000D5                     _Heater_SW_Txt:
  1593                           	opt stack 0
  1594  0000D5                     	ds	4
  1595  0000D9                     _tempC:
  1596                           	opt stack 0
  1597  0000D9                     	ds	4
  1598  0000DD                     _tempF:
  1599                           	opt stack 0
  1600  0000DD                     	ds	4
  1601  0000E1                     _RTC_ALARM_Txt:
  1602                           	opt stack 0
  1603  0000E1                     	ds	2
  1604                           tblptru	equ	0xFF8
  1605                           tblptrh	equ	0xFF7
  1606                           tblptrl	equ	0xFF6
  1607                           tablat	equ	0xFF5
  1608                           postinc0	equ	0xFEE
  1609                           wreg	equ	0xFE8
  1610                           postdec1	equ	0xFE5
  1611                           fsr1l	equ	0xFE1
  1612                           
  1613                           	psect	dataBANK1
  1614  000100                     __pdataBANK1:
  1615                           	opt stack 0
  1616  000100                     _buffer:
  1617                           	opt stack 0
  1618  000100                     	ds	31
  1619  00011F                     _array1:
  1620                           	opt stack 0
  1621  00011F                     	ds	21
  1622                           tblptru	equ	0xFF8
  1623                           tblptrh	equ	0xFF7
  1624                           tblptrl	equ	0xFF6
  1625                           tablat	equ	0xFF5
  1626                           postinc0	equ	0xFEE
  1627                           wreg	equ	0xFE8
  1628                           postdec1	equ	0xFE5
  1629                           fsr1l	equ	0xFE1
  1630                           
  1631                           	psect	cstackBANK1
  1632  000134                     __pcstackBANK1:
  1633                           	opt stack 0
  1634  000134                     ?___awdiv:
  1635                           	opt stack 0
  1636  000134                     drawtext@x:
  1637                           	opt stack 0
  1638  000134                     ___awdiv@dividend:
  1639                           	opt stack 0
  1640                           
  1641                           ; 2 bytes @ 0x0
  1642  000134                     	ds	1
  1643  000135                     drawtext@textsize:
  1644                           	opt stack 0
  1645                           
  1646                           ; 2 bytes @ 0x1
  1647  000135                     	ds	1
  1648  000136                     ___awdiv@divisor:
  1649                           	opt stack 0
  1650                           
  1651                           ; 2 bytes @ 0x2
  1652  000136                     	ds	1
  1653  000137                     drawtext@i:
  1654                           	opt stack 0
  1655                           
  1656                           ; 2 bytes @ 0x3
  1657  000137                     	ds	1
  1658  000138                     ___awdiv@counter:
  1659                           	opt stack 0
  1660                           
  1661                           ; 1 bytes @ 0x4
  1662  000138                     	ds	1
  1663  000139                     drawtext@cursor_y:
  1664                           	opt stack 0
  1665  000139                     ___awdiv@sign:
  1666                           	opt stack 0
  1667                           
  1668                           ; 1 bytes @ 0x5
  1669  000139                     	ds	1
  1670  00013A                     drawtext@cursor_x:
  1671                           	opt stack 0
  1672  00013A                     ___awdiv@quotient:
  1673                           	opt stack 0
  1674                           
  1675                           ; 2 bytes @ 0x6
  1676  00013A                     	ds	2
  1677  00013C                     ??_Do_Setup_Heater_Temp:
  1678  00013C                     Set_DC_RGB@output:
  1679                           	opt stack 0
  1680  00013C                     Set_RPM_RGB@output:
  1681                           	opt stack 0
  1682  00013C                     Update_Screen@neg_tempF:
  1683                           	opt stack 0
  1684  00013C                     dec_2_bcd@bcd:
  1685                           	opt stack 0
  1686                           
  1687                           ; 2 bytes @ 0x8
  1688  00013C                     	ds	2
  1689  00013E                     Update_Screen@neg_DS1621_tempC:
  1690                           	opt stack 0
  1691  00013E                     dec_2_bcd@dec:
  1692                           	opt stack 0
  1693  00013E                     Set_DC_RGB@temp:
  1694                           	opt stack 0
  1695  00013E                     Set_RPM_RGB@temp:
  1696                           	opt stack 0
  1697                           
  1698                           ; 2 bytes @ 0xA
  1699  00013E                     	ds	1
  1700  00013F                     DS3231_Write_Time@Device:
  1701                           	opt stack 0
  1702  00013F                     DS3231_Write_Alarm_Time@Device:
  1703                           	opt stack 0
  1704                           
  1705                           ; 1 bytes @ 0xB
  1706  00013F                     	ds	1
  1707  000140                     DS3231_Write_Time@Address:
  1708                           	opt stack 0
  1709  000140                     DS3231_Write_Alarm_Time@Address:
  1710                           	opt stack 0
  1711                           
  1712                           ; 1 bytes @ 0xC
  1713  000140                     	ds	1
  1714  000141                     ??_main:
  1715                           
  1716                           ; 0 bytes @ 0xD
  1717  000141                     	ds	2
  1718                           tblptru	equ	0xFF8
  1719                           tblptrh	equ	0xFF7
  1720                           tblptrl	equ	0xFF6
  1721                           tablat	equ	0xFF5
  1722                           postinc0	equ	0xFEE
  1723                           wreg	equ	0xFE8
  1724                           postdec1	equ	0xFE5
  1725                           fsr1l	equ	0xFE1
  1726                           
  1727                           	psect	cstackBANK0
  1728  0000FD                     __pcstackBANK0:
  1729                           	opt stack 0
  1730  0000FD                     ??_Monitor_Heater:
  1731  0000FD                     ??_Update_Screen:
  1732  0000FD                     ??_dec_2_bcd:
  1733  0000FD                     Update_Setup_Heater_Screen@dc_char1:
  1734                           	opt stack 0
  1735  0000FD                     get_RPM@RPS:
  1736                           	opt stack 0
  1737                           
  1738                           ; 2 bytes @ 0x0
  1739  0000FD                     	ds	1
  1740  0000FE                     Update_Setup_Heater_Screen@dc_char2:
  1741                           	opt stack 0
  1742                           
  1743                           ; 1 bytes @ 0x1
  1744  0000FE                     	ds	1
  1745  0000FF                     Update_Setup_Heater_Screen@dc_char3:
  1746                           	opt stack 0
  1747                           
  1748                           ; 1 bytes @ 0x2
  1749  0000FF                     	ds	1
  1750                           tblptru	equ	0xFF8
  1751                           tblptrh	equ	0xFF7
  1752                           tblptrl	equ	0xFF6
  1753                           tablat	equ	0xFF5
  1754                           postinc0	equ	0xFEE
  1755                           wreg	equ	0xFE8
  1756                           postdec1	equ	0xFE5
  1757                           fsr1l	equ	0xFE1
  1758                           
  1759                           	psect	cstackCOMRAM
  1760  000001                     __pcstackCOMRAM:
  1761                           	opt stack 0
  1762  000001                     ??_INT0_isr:
  1763  000001                     
  1764                           ; 2 bytes @ 0x0
  1765  000001                     	ds	2
  1766  000003                     ??_chkisr:
  1767                           
  1768                           ; 0 bytes @ 0x2
  1769  000003                     	ds	14
  1770  000011                     ??_bcd_2_dec:
  1771  000011                     ??_isdigit:
  1772  000011                     ?_strlen:
  1773                           	opt stack 0
  1774  000011                     ?_get_full_ADC:
  1775                           	opt stack 0
  1776  000011                     ?_get_duty_cycle:
  1777                           	opt stack 0
  1778  000011                     ?___wmul:
  1779                           	opt stack 0
  1780  000011                     ?___lwdiv:
  1781                           	opt stack 0
  1782  000011                     ?___ftpack:
  1783                           	opt stack 0
  1784  000011                     putch@c:
  1785                           	opt stack 0
  1786  000011                     I2C_Read@ack:
  1787                           	opt stack 0
  1788  000011                     I2C_Write@outByte:
  1789                           	opt stack 0
  1790  000011                     spiwrite@x:
  1791                           	opt stack 0
  1792  000011                     Set_RGB_Color@color:
  1793                           	opt stack 0
  1794  000011                     get_duty_cycle@temp:
  1795                           	opt stack 0
  1796  000011                     Wait_One_Sec@k:
  1797                           	opt stack 0
  1798  000011                     OpenUSART@spbrg:
  1799                           	opt stack 0
  1800  000011                     ___wmul@multiplier:
  1801                           	opt stack 0
  1802  000011                     ___lwdiv@dividend:
  1803                           	opt stack 0
  1804  000011                     strcpy@to:
  1805                           	opt stack 0
  1806  000011                     strlen@s:
  1807                           	opt stack 0
  1808  000011                     ___ftpack@arg:
  1809                           	opt stack 0
  1810  000011                     ___ftge@ff1:
  1811                           	opt stack 0
  1812  000011                     I2C_Init@c:
  1813                           	opt stack 0
  1814                           
  1815                           ; 4 bytes @ 0x10
  1816  000011                     	ds	1
  1817  000012                     I2C_Read@n:
  1818                           	opt stack 0
  1819  000012                     I2C_Write@n:
  1820                           	opt stack 0
  1821  000012                     spiwrite@spidata:
  1822                           	opt stack 0
  1823  000012                     _isdigit$2773:
  1824                           	opt stack 0
  1825                           
  1826                           ; 1 bytes @ 0x11
  1827  000012                     	ds	1
  1828  000013                     ??_strlen:
  1829  000013                     ??_get_full_ADC:
  1830  000013                     I2C_Read@inByte:
  1831                           	opt stack 0
  1832  000013                     I2C_Write_Address_Write_One_Byte@Address:
  1833                           	opt stack 0
  1834  000013                     I2C_Write_Cmd_Only@Cmd:
  1835                           	opt stack 0
  1836  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1837                           	opt stack 0
  1838  000013                     write_command@cmd_:
  1839                           	opt stack 0
  1840  000013                     write_data@data_:
  1841                           	opt stack 0
  1842  000013                     OpenUSART@config:
  1843                           	opt stack 0
  1844  000013                     isdigit@c:
  1845                           	opt stack 0
  1846  000013                     get_duty_cycle@set_temp:
  1847                           	opt stack 0
  1848  000013                     bcd_2_dec@dec:
  1849                           	opt stack 0
  1850  000013                     ___wmul@multiplicand:
  1851                           	opt stack 0
  1852  000013                     ___lwdiv@divisor:
  1853                           	opt stack 0
  1854  000013                     strcpy@from:
  1855                           	opt stack 0
  1856                           
  1857                           ; 2 bytes @ 0x12
  1858  000013                     	ds	1
  1859  000014                     ?_DS1621_Read_Temp:
  1860                           	opt stack 0
  1861  000014                     I2C_Write_Address_Read_One_Byte@Address:
  1862                           	opt stack 0
  1863  000014                     I2C_Write_Address_Write_One_Byte@Data_Out:
  1864                           	opt stack 0
  1865  000014                     I2C_Write_Cmd_Only@Device:
  1866                           	opt stack 0
  1867  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1868                           	opt stack 0
  1869  000014                     DS3231_Read_Time@Address:
  1870                           	opt stack 0
  1871  000014                     DS3231_Read_Alarm_Time@Address:
  1872                           	opt stack 0
  1873  000014                     setAddrWindow@y0:
  1874                           	opt stack 0
  1875  000014                     ___ftpack@exp:
  1876                           	opt stack 0
  1877  000014                     ___ftge@ff2:
  1878                           	opt stack 0
  1879                           
  1880                           ; 3 bytes @ 0x13
  1881  000014                     	ds	1
  1882  000015                     ??_get_duty_cycle:
  1883  000015                     I2C_Write_Address_Read_One_Byte@Data_Ret:
  1884                           	opt stack 0
  1885  000015                     I2C_Write_Address_Write_One_Byte@Device:
  1886                           	opt stack 0
  1887  000015                     I2C_Write_Cmd_Write_Data@Device:
  1888                           	opt stack 0
  1889  000015                     DS3231_Read_Time@Device:
  1890                           	opt stack 0
  1891  000015                     DS3231_Read_Alarm_Time@Device:
  1892                           	opt stack 0
  1893  000015                     setAddrWindow@x1:
  1894                           	opt stack 0
  1895  000015                     bcd_2_dec@bcd:
  1896                           	opt stack 0
  1897  000015                     ___ftpack@sign:
  1898                           	opt stack 0
  1899  000015                     get_full_ADC@result:
  1900                           	opt stack 0
  1901  000015                     ___wmul@product:
  1902                           	opt stack 0
  1903  000015                     ___lwdiv@quotient:
  1904                           	opt stack 0
  1905  000015                     strcpy@cp:
  1906                           	opt stack 0
  1907  000015                     strlen@cp:
  1908                           	opt stack 0
  1909                           
  1910                           ; 2 bytes @ 0x14
  1911  000015                     	ds	1
  1912  000016                     ??___ftpack:
  1913  000016                     I2C_Write_Address_Read_One_Byte@Device:
  1914                           	opt stack 0
  1915  000016                     DS1621_Init@Device:
  1916                           	opt stack 0
  1917  000016                     DS1621_Read_Temp@Cmd:
  1918                           	opt stack 0
  1919  000016                     setAddrWindow@y1:
  1920                           	opt stack 0
  1921                           
  1922                           ; 1 bytes @ 0x15
  1923  000016                     	ds	1
  1924  000017                     ??___ftge:
  1925  000017                     DS1621_Read_Temp@Data_Ret:
  1926                           	opt stack 0
  1927  000017                     DS3231_Init@Address_7:
  1928                           	opt stack 0
  1929  000017                     setAddrWindow@x0:
  1930                           	opt stack 0
  1931  000017                     ___lwdiv@counter:
  1932                           	opt stack 0
  1933  000017                     get_duty_cycle@diff:
  1934                           	opt stack 0
  1935  000017                     delay_ms@ms:
  1936                           	opt stack 0
  1937                           
  1938                           ; 2 bytes @ 0x16
  1939  000017                     	ds	1
  1940  000018                     ?___lwmod:
  1941                           	opt stack 0
  1942  000018                     DS1621_Read_Temp@Device:
  1943                           	opt stack 0
  1944  000018                     DS3231_Init@Address_E:
  1945                           	opt stack 0
  1946  000018                     drawPixel@y:
  1947                           	opt stack 0
  1948  000018                     drawFastVLine@y:
  1949                           	opt stack 0
  1950  000018                     fillRectangle@y:
  1951                           	opt stack 0
  1952  000018                     ___lwmod@dividend:
  1953                           	opt stack 0
  1954                           
  1955                           ; 2 bytes @ 0x17
  1956  000018                     	ds	1
  1957  000019                     ??_delay_ms:
  1958  000019                     ?___awtoft:
  1959                           	opt stack 0
  1960  000019                     ?___lbtoft:
  1961                           	opt stack 0
  1962  000019                     DS3231_Init@control_E:
  1963                           	opt stack 0
  1964  000019                     drawFastVLine@h:
  1965                           	opt stack 0
  1966  000019                     fillRectangle@w:
  1967                           	opt stack 0
  1968  000019                     drawPixel@color:
  1969                           	opt stack 0
  1970  000019                     ___awtoft@c:
  1971                           	opt stack 0
  1972                           
  1973                           ; 2 bytes @ 0x18
  1974  000019                     	ds	1
  1975  00001A                     DS3231_Init@Device:
  1976                           	opt stack 0
  1977  00001A                     fillRectangle@h:
  1978                           	opt stack 0
  1979  00001A                     drawFastVLine@color:
  1980                           	opt stack 0
  1981  00001A                     ___lwmod@divisor:
  1982                           	opt stack 0
  1983                           
  1984                           ; 2 bytes @ 0x19
  1985  00001A                     	ds	1
  1986  00001B                     DS3231_Turn_Off_Alarm@Address_E:
  1987                           	opt stack 0
  1988  00001B                     DS3231_Turn_On_Alarm@Address_E:
  1989                           	opt stack 0
  1990  00001B                     drawPixel@x:
  1991                           	opt stack 0
  1992  00001B                     delay_ms@count:
  1993                           	opt stack 0
  1994  00001B                     fillRectangle@color:
  1995                           	opt stack 0
  1996                           
  1997                           ; 2 bytes @ 0x1A
  1998  00001B                     	ds	1
  1999  00001C                     ??_drawFastVLine:
  2000  00001C                     DS3231_Turn_Off_Alarm@Address_F:
  2001                           	opt stack 0
  2002  00001C                     DS3231_Turn_On_Alarm@Address_F:
  2003                           	opt stack 0
  2004  00001C                     ___awtoft@sign:
  2005                           	opt stack 0
  2006  00001C                     ___lbtoft@c:
  2007                           	opt stack 0
  2008  00001C                     ___lwmod@counter:
  2009                           	opt stack 0
  2010  00001C                     drawCircle@x0:
  2011                           	opt stack 0
  2012                           
  2013                           ; 2 bytes @ 0x1B
  2014  00001C                     	ds	1
  2015  00001D                     ??_fillRectangle:
  2016  00001D                     ?_printf:
  2017                           	opt stack 0
  2018  00001D                     ?___ftmul:
  2019                           	opt stack 0
  2020  00001D                     DS3231_Turn_Off_Alarm@control_E:
  2021                           	opt stack 0
  2022  00001D                     DS3231_Turn_On_Alarm@control_E:
  2023                           	opt stack 0
  2024  00001D                     printf@f:
  2025                           	opt stack 0
  2026  00001D                     ___ftmul@f1:
  2027                           	opt stack 0
  2028                           
  2029                           ; 3 bytes @ 0x1C
  2030  00001D                     	ds	1
  2031  00001E                     DS3231_Turn_Off_Alarm@control_F:
  2032                           	opt stack 0
  2033  00001E                     DS3231_Turn_On_Alarm@control_F:
  2034                           	opt stack 0
  2035  00001E                     drawCircle@y0:
  2036                           	opt stack 0
  2037                           
  2038                           ; 2 bytes @ 0x1D
  2039  00001E                     	ds	1
  2040  00001F                     DS3231_Turn_Off_Alarm@Device:
  2041                           	opt stack 0
  2042  00001F                     DS3231_Turn_On_Alarm@Device:
  2043                           	opt stack 0
  2044                           
  2045                           ; 1 bytes @ 0x1E
  2046  00001F                     	ds	1
  2047  000020                     drawFastVLine@hi:
  2048                           	opt stack 0
  2049  000020                     drawCircle@r:
  2050                           	opt stack 0
  2051  000020                     ___ftmul@f2:
  2052                           	opt stack 0
  2053                           
  2054                           ; 3 bytes @ 0x1F
  2055  000020                     	ds	1
  2056  000021                     drawFastVLine@lo:
  2057                           	opt stack 0
  2058  000021                     fillRectangle@hi:
  2059                           	opt stack 0
  2060                           
  2061                           ; 1 bytes @ 0x20
  2062  000021                     	ds	1
  2063  000022                     drawFastVLine@x:
  2064                           	opt stack 0
  2065  000022                     fillRectangle@lo:
  2066                           	opt stack 0
  2067  000022                     drawCircle@color:
  2068                           	opt stack 0
  2069                           
  2070                           ; 2 bytes @ 0x21
  2071  000022                     	ds	1
  2072  000023                     ??___ftmul:
  2073  000023                     fillRect@y:
  2074                           	opt stack 0
  2075  000023                     fillRectangle@x:
  2076                           	opt stack 0
  2077                           
  2078                           ; 1 bytes @ 0x22
  2079  000023                     	ds	1
  2080  000024                     ??_drawCircle:
  2081  000024                     fillRect@w:
  2082                           	opt stack 0
  2083  000024                     fillScreen@color:
  2084                           	opt stack 0
  2085                           
  2086                           ; 2 bytes @ 0x23
  2087  000024                     	ds	1
  2088  000025                     fillRect@h:
  2089                           	opt stack 0
  2090                           
  2091                           ; 1 bytes @ 0x24
  2092  000025                     	ds	1
  2093  000026                     ___ftmul@exp:
  2094                           	opt stack 0
  2095  000026                     fillRect@color:
  2096                           	opt stack 0
  2097  000026                     drawCircle@ddF_x:
  2098                           	opt stack 0
  2099                           
  2100                           ; 2 bytes @ 0x25
  2101  000026                     	ds	1
  2102  000027                     ___ftmul@f3_as_product:
  2103                           	opt stack 0
  2104                           
  2105                           ; 3 bytes @ 0x26
  2106  000027                     	ds	1
  2107  000028                     ??_fillRect:
  2108  000028                     drawCircle@ddF_y:
  2109                           	opt stack 0
  2110                           
  2111                           ; 2 bytes @ 0x27
  2112  000028                     	ds	2
  2113  00002A                     ___ftmul@cntr:
  2114                           	opt stack 0
  2115  00002A                     drawCircle@f:
  2116                           	opt stack 0
  2117                           
  2118                           ; 2 bytes @ 0x29
  2119  00002A                     	ds	1
  2120  00002B                     ??_printf:
  2121  00002B                     fillRect@x:
  2122                           	opt stack 0
  2123  00002B                     ___ftmul@sign:
  2124                           	opt stack 0
  2125                           
  2126                           ; 1 bytes @ 0x2A
  2127  00002B                     	ds	1
  2128  00002C                     ?_read_volt:
  2129                           	opt stack 0
  2130  00002C                     ?___ftdiv:
  2131                           	opt stack 0
  2132  00002C                     ?___fttol:
  2133                           	opt stack 0
  2134  00002C                     fillRect@i:
  2135                           	opt stack 0
  2136  00002C                     drawCircle@x:
  2137                           	opt stack 0
  2138  00002C                     ___ftdiv@f1:
  2139                           	opt stack 0
  2140  00002C                     ___fttol@f1:
  2141                           	opt stack 0
  2142                           
  2143                           ; 3 bytes @ 0x2B
  2144  00002C                     	ds	2
  2145  00002E                     Update_Setup_Screen_Cursor_Forward@field:
  2146                           	opt stack 0
  2147  00002E                     Update_Setup_Screen_Cursor_Backward@field:
  2148                           	opt stack 0
  2149  00002E                     drawChar@y:
  2150                           	opt stack 0
  2151  00002E                     drawCircle@y:
  2152                           	opt stack 0
  2153                           
  2154                           ; 2 bytes @ 0x2D
  2155  00002E                     	ds	1
  2156  00002F                     Update_Setup_Screen_Cursor_Forward@yinc:
  2157                           	opt stack 0
  2158  00002F                     Update_Setup_Screen_Cursor_Backward@yinc:
  2159                           	opt stack 0
  2160  00002F                     drawChar@c:
  2161                           	opt stack 0
  2162  00002F                     printf@idx:
  2163                           	opt stack 0
  2164  00002F                     read_volt@voltage_t:
  2165                           	opt stack 0
  2166  00002F                     ___ftdiv@f2:
  2167                           	opt stack 0
  2168                           
  2169                           ; 3 bytes @ 0x2E
  2170  00002F                     	ds	1
  2171  000030                     ??___fttol:
  2172  000030                     Update_Setup_Screen_Cursor_Forward@xinc:
  2173                           	opt stack 0
  2174  000030                     Update_Setup_Screen_Cursor_Backward@xinc:
  2175                           	opt stack 0
  2176  000030                     drawChar@color:
  2177                           	opt stack 0
  2178  000030                     printf@ap:
  2179                           	opt stack 0
  2180                           
  2181                           ; 2 bytes @ 0x2F
  2182  000030                     	ds	1
  2183  000031                     
  2184                           ; 0 bytes @ 0x30
  2185  000031                     	ds	1
  2186  000032                     ??___ftdiv:
  2187  000032                     printf@prec:
  2188                           	opt stack 0
  2189  000032                     drawChar@bg:
  2190                           	opt stack 0
  2191  000032                     read_volt@num_step:
  2192                           	opt stack 0
  2193                           
  2194                           ; 2 bytes @ 0x31
  2195  000032                     	ds	1
  2196  000033                     printf@val:
  2197                           	opt stack 0
  2198                           
  2199                           ; 2 bytes @ 0x32
  2200  000033                     	ds	1
  2201  000034                     drawChar@size:
  2202                           	opt stack 0
  2203                           
  2204                           ; 1 bytes @ 0x33
  2205  000034                     	ds	1
  2206  000035                     drawChar@line:
  2207                           	opt stack 0
  2208  000035                     printf@flag:
  2209                           	opt stack 0
  2210  000035                     ___ftdiv@cntr:
  2211                           	opt stack 0
  2212  000035                     ___fttol@sign1:
  2213                           	opt stack 0
  2214                           
  2215                           ; 1 bytes @ 0x34
  2216  000035                     	ds	1
  2217  000036                     drawChar@x:
  2218                           	opt stack 0
  2219  000036                     printf@width:
  2220                           	opt stack 0
  2221  000036                     ___ftdiv@f3:
  2222                           	opt stack 0
  2223  000036                     ___fttol@lval:
  2224                           	opt stack 0
  2225                           
  2226                           ; 4 bytes @ 0x35
  2227  000036                     	ds	1
  2228  000037                     drawChar@j:
  2229                           	opt stack 0
  2230                           
  2231                           ; 1 bytes @ 0x36
  2232  000037                     	ds	1
  2233  000038                     drawChar@i:
  2234                           	opt stack 0
  2235  000038                     printf@c:
  2236                           	opt stack 0
  2237                           
  2238                           ; 1 bytes @ 0x37
  2239  000038                     	ds	1
  2240  000039                     drawtext@y:
  2241                           	opt stack 0
  2242  000039                     ___ftdiv@exp:
  2243                           	opt stack 0
  2244                           
  2245                           ; 1 bytes @ 0x38
  2246  000039                     	ds	1
  2247  00003A                     ___ftdiv@sign:
  2248                           	opt stack 0
  2249  00003A                     ___fttol@exp1:
  2250                           	opt stack 0
  2251  00003A                     drawtext@_text:
  2252                           	opt stack 0
  2253  00003A                     check_for_button_input@j:
  2254                           	opt stack 0
  2255                           
  2256                           ; 2 bytes @ 0x39
  2257  00003A                     	ds	1
  2258  00003B                     ??_do_update_pwm:
  2259  00003B                     ?___awmod:
  2260                           	opt stack 0
  2261  00003B                     ___awmod@dividend:
  2262                           	opt stack 0
  2263                           
  2264                           ; 2 bytes @ 0x3A
  2265  00003B                     	ds	1
  2266  00003C                     drawtext@color:
  2267                           	opt stack 0
  2268                           
  2269                           ; 2 bytes @ 0x3B
  2270  00003C                     	ds	1
  2271  00003D                     ___awmod@divisor:
  2272                           	opt stack 0
  2273                           
  2274                           ; 2 bytes @ 0x3C
  2275  00003D                     	ds	1
  2276  00003E                     drawtext@bg:
  2277                           	opt stack 0
  2278  00003E                     do_update_pwm@dc_f:
  2279                           	opt stack 0
  2280                           
  2281                           ; 3 bytes @ 0x3D
  2282  00003E                     	ds	1
  2283  00003F                     ___awmod@counter:
  2284                           	opt stack 0
  2285                           
  2286                           ; 1 bytes @ 0x3E
  2287  00003F                     	ds	1
  2288  000040                     drawtext@size:
  2289                           	opt stack 0
  2290  000040                     ___awmod@sign:
  2291                           	opt stack 0
  2292                           
  2293                           ; 1 bytes @ 0x3F
  2294  000040                     	ds	1
  2295  000041                     ??_drawtext:
  2296  000041                     ?_get_RPM:
  2297                           	opt stack 0
  2298  000041                     ?_dec_2_bcd:
  2299                           	opt stack 0
  2300  000041                     do_update_pwm@duty_cycle:
  2301                           	opt stack 0
  2302  000041                     Set_DC_RGB@duty_cycle:
  2303                           	opt stack 0
  2304  000041                     Set_RPM_RGB@rpm:
  2305                           	opt stack 0
  2306                           
  2307                           ; 2 bytes @ 0x40
  2308  000041                     	ds	1
  2309  000042                     do_update_pwm@dc_I:
  2310                           	opt stack 0
  2311                           
  2312                           ; 2 bytes @ 0x41
  2313  000042                     	ds	1
  2314  000043                     
  2315                           ; 0 bytes @ 0x42
  2316  000043                     	ds	1
  2317  000044                     tblptru	equ	0xFF8
  2318                           tblptrh	equ	0xFF7
  2319                           tblptrl	equ	0xFF6
  2320                           tablat	equ	0xFF5
  2321                           postinc0	equ	0xFEE
  2322                           wreg	equ	0xFE8
  2323                           postdec1	equ	0xFE5
  2324                           fsr1l	equ	0xFE1
  2325                           
  2326                           ; 0 bytes @ 0x43
  2327 ;;
  2328 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2329 ;;
  2330 ;; *************** function _main *****************
  2331 ;; Defined at:
  2332 ;;		line 120 in file "LabFinal.c"
  2333 ;; Parameters:    Size  Location     Type
  2334 ;;		None
  2335 ;; Auto vars:     Size  Location     Type
  2336 ;;		None
  2337 ;; Return value:  Size  Location     Type
  2338 ;;		None               void
  2339 ;; Registers used:
  2340 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2341 ;; Tracked objects:
  2342 ;;		On entry : 0/0
  2343 ;;		On exit  : 0/0
  2344 ;;		Unchanged: 0/0
  2345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2348 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2349 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2350 ;;Total ram usage:        2 bytes
  2351 ;; Hardware stack levels required when called:   13
  2352 ;; This function calls:
  2353 ;;		_DS1621_Read_Temp
  2354 ;;		_DS3231_Read_Alarm_Time
  2355 ;;		_DS3231_Read_Time
  2356 ;;		_DS3231_Turn_Off_Alarm
  2357 ;;		_Do_Beep_Bad
  2358 ;;		_Do_Beep_Good
  2359 ;;		_Do_Init
  2360 ;;		_Do_Setup_Alarm_Time
  2361 ;;		_Do_Setup_Heater_Temp
  2362 ;;		_Do_Setup_Time
  2363 ;;		_Initialize_Screen
  2364 ;;		_Monitor_Heater
  2365 ;;		_Set_DC_RGB
  2366 ;;		_Set_RPM_RGB
  2367 ;;		_Test_Alarm
  2368 ;;		_Toggle_Heater
  2369 ;;		_Update_Screen
  2370 ;;		___awdiv
  2371 ;;		___wmul
  2372 ;;		_check_for_button_input
  2373 ;;		_get_RPM
  2374 ;;		_printf
  2375 ;;		_read_volt
  2376 ;; This function is called by:
  2377 ;;		Startup code after reset
  2378 ;; This function uses a non-reentrant model
  2379 ;;
  2380                           
  2381                           	psect	text0
  2382  000D48                     __ptext0:
  2383                           	opt stack 0
  2384  000D48                     _main:
  2385                           	opt stack 18
  2386                           
  2387                           ;LabFinal.c: 122: Do_Init();
  2388                           
  2389                           ;incstack = 0
  2390  000D48  EC04  F01A         	call	_Do_Init	;wreg free
  2391                           
  2392                           ;LabFinal.c: 123: Initialize_Screen();
  2393  000D4C  EC37  F003         	call	_Initialize_Screen	;wreg free
  2394                           
  2395                           ;LabFinal.c: 124: DS3231_Turn_Off_Alarm();
  2396  000D50  EC5B  F01A         	call	_DS3231_Turn_Off_Alarm	;wreg free
  2397                           
  2398                           ;LabFinal.c: 125: DS3231_Read_Alarm_Time();
  2399  000D54  EC4A  F01B         	call	_DS3231_Read_Alarm_Time	;wreg free
  2400                           
  2401                           ;LabFinal.c: 127: tempSecond = 0xff;
  2402  000D58  0100               	movlb	0	; () banked
  2403  000D5A  6980               	setf	_tempSecond& (0+255),b
  2404  000D5C  D000               	goto	l9995
  2405  000D5E                     l9995:
  2406                           
  2407                           ; BSR set to: 0
  2408                           ;LabFinal.c: 129: {
  2409                           ;LabFinal.c: 130: DS3231_Read_Time();
  2410  000D5E  EC72  F019         	call	_DS3231_Read_Time	;wreg free
  2411                           
  2412                           ;LabFinal.c: 132: if(tempSecond != second)
  2413  000D62  5063               	movf	_second,w,c
  2414  000D64  0100               	movlb	0	; () banked
  2415  000D66  1980               	xorwf	_tempSecond& (0+255),w,b
  2416  000D68  B4D8               	btfsc	status,2,c
  2417  000D6A  D097               	goto	l10029
  2418                           
  2419                           ; BSR set to: 0
  2420                           ;LabFinal.c: 133: {
  2421                           ;LabFinal.c: 134: tempSecond = second;
  2422  000D6C  C063  F080         	movff	_second,_tempSecond
  2423                           
  2424                           ; BSR set to: 0
  2425                           ;LabFinal.c: 135: rpm = get_RPM();
  2426  000D70  ECDF  F01B         	call	_get_RPM	;wreg free
  2427  000D74  C041  F04C         	movff	?_get_RPM,_rpm
  2428  000D78  C042  F04D         	movff	?_get_RPM+1,_rpm+1
  2429                           
  2430                           ;LabFinal.c: 136: volt = read_volt();
  2431  000D7C  ECAD  F01A         	call	_read_volt	;wreg free
  2432  000D80  C02C  F0E7         	movff	?_read_volt,_volt
  2433  000D84  C02D  F0E8         	movff	?_read_volt+1,_volt+1
  2434  000D88  C02E  F0E9         	movff	?_read_volt+2,_volt+2
  2435                           
  2436                           ;LabFinal.c: 137: DS1621_tempC = DS1621_Read_Temp();
  2437  000D8C  EC7B  F01C         	call	_DS1621_Read_Temp	;wreg free
  2438  000D90  C014  F046         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  2439  000D94  C015  F047         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  2440                           
  2441                           ;LabFinal.c: 138: if ((DS1621_tempC & 0x80) == 0x80) DS1621_tempC = - (0x80 - DS1621_tem
      +                          pC & 0x7f);
  2442  000D98  AE46               	btfss	_DS1621_tempC,7,c
  2443  000D9A  D01D               	goto	l10011
  2444  000D9C  C046  F141         	movff	_DS1621_tempC,??_main
  2445  000DA0  C047  F142         	movff	_DS1621_tempC+1,??_main+1
  2446  000DA4  0101               	movlb	1	; () banked
  2447  000DA6  1F41               	comf	??_main& (0+255),f,b
  2448  000DA8  1F42               	comf	(??_main+1)& (0+255),f,b
  2449  000DAA  4B41               	infsnz	??_main& (0+255),f,b
  2450  000DAC  2B42               	incf	(??_main+1)& (0+255),f,b
  2451  000DAE  0E80               	movlw	128
  2452  000DB0  0101               	movlb	1	; () banked
  2453  000DB2  2741               	addwf	??_main& (0+255),f,b
  2454  000DB4  0E00               	movlw	0
  2455  000DB6  2342               	addwfc	(??_main+1)& (0+255),f,b
  2456  000DB8  0E7F               	movlw	127
  2457  000DBA  0101               	movlb	1	; () banked
  2458  000DBC  1741               	andwf	??_main& (0+255),f,b
  2459  000DBE  0E00               	movlw	0
  2460  000DC0  1742               	andwf	(??_main+1)& (0+255),f,b
  2461  000DC2  0101               	movlb	1	; () banked
  2462  000DC4  1F41               	comf	??_main& (0+255),f,b
  2463  000DC6  1F42               	comf	(??_main+1)& (0+255),f,b
  2464  000DC8  4B41               	infsnz	??_main& (0+255),f,b
  2465  000DCA  2B42               	incf	(??_main+1)& (0+255),f,b
  2466  000DCC  C141  F046         	movff	??_main,_DS1621_tempC
  2467  000DD0  C142  F047         	movff	??_main+1,_DS1621_tempC+1
  2468  000DD4  D000               	goto	l10011
  2469  000DD6                     l10011:
  2470                           
  2471                           ;LabFinal.c: 139: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  2472  000DD6  C046  F011         	movff	_DS1621_tempC,___wmul@multiplier
  2473  000DDA  C047  F012         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  2474  000DDE  0E00               	movlw	0
  2475  000DE0  6E14               	movwf	___wmul@multiplicand+1,c
  2476  000DE2  0E09               	movlw	9
  2477  000DE4  6E13               	movwf	___wmul@multiplicand,c
  2478  000DE6  EC27  F01D         	call	___wmul	;wreg free
  2479  000DEA  C011  F134         	movff	?___wmul,___awdiv@dividend
  2480  000DEE  C012  F135         	movff	?___wmul+1,___awdiv@dividend+1
  2481  000DF2  0E00               	movlw	0
  2482  000DF4  0101               	movlb	1	; () banked
  2483  000DF6  6F37               	movwf	(___awdiv@divisor+1)& (0+255),b
  2484  000DF8  0E05               	movlw	5
  2485  000DFA  6F36               	movwf	___awdiv@divisor& (0+255),b
  2486  000DFC  EC3A  F012         	call	___awdiv	;wreg free
  2487  000E00  0E20               	movlw	32
  2488  000E02  0101               	movlb	1	; () banked
  2489  000E04  2534               	addwf	?___awdiv& (0+255),w,b
  2490  000E06  6E48               	movwf	_DS1621_tempF,c
  2491  000E08  0E00               	movlw	0
  2492  000E0A  0101               	movlb	1	; () banked
  2493  000E0C  2135               	addwfc	(?___awdiv+1)& (0+255),w,b
  2494  000E0E  6E49               	movwf	_DS1621_tempF+1,c
  2495                           
  2496                           ; BSR set to: 1
  2497                           ;LabFinal.c: 141: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,y
      +                          ear);
  2498  000E10  0EB8               	movlw	low STR_1
  2499  000E12  6E1D               	movwf	printf@f,c
  2500  000E14  0EFE               	movlw	high STR_1
  2501  000E16  6E1E               	movwf	printf@f+1,c
  2502  000E18  C05F  F01F         	movff	_hour,?_printf+2
  2503  000E1C  6A20               	clrf	?_printf+3,c
  2504  000E1E  C060  F021         	movff	_minute,?_printf+4
  2505  000E22  6A22               	clrf	?_printf+5,c
  2506  000E24  C063  F023         	movff	_second,?_printf+6
  2507  000E28  6A24               	clrf	?_printf+7,c
  2508  000E2A  C061  F025         	movff	_month,?_printf+8
  2509  000E2E  6A26               	clrf	?_printf+9,c
  2510  000E30  C05B  F027         	movff	_day,?_printf+10
  2511  000E34  6A28               	clrf	?_printf+11,c
  2512  000E36  C06E  F029         	movff	_year,?_printf+12
  2513  000E3A  6A2A               	clrf	?_printf+13,c
  2514  000E3C  ECF7  F004         	call	_printf	;wreg free
  2515                           
  2516                           ;LabFinal.c: 142: printf (" Temp = %d C = %d F ", DS1621_tempC, DS1621_tempF);
  2517  000E40  0EEC               	movlw	low STR_2
  2518  000E42  6E1D               	movwf	printf@f,c
  2519  000E44  0EFE               	movlw	high STR_2
  2520  000E46  6E1E               	movwf	printf@f+1,c
  2521  000E48  C046  F01F         	movff	_DS1621_tempC,?_printf+2
  2522  000E4C  C047  F020         	movff	_DS1621_tempC+1,?_printf+3
  2523  000E50  C048  F021         	movff	_DS1621_tempF,?_printf+4
  2524  000E54  C049  F022         	movff	_DS1621_tempF+1,?_printf+5
  2525  000E58  ECF7  F004         	call	_printf	;wreg free
  2526                           
  2527                           ;LabFinal.c: 144: printf ("RPM = %d  dc = %d\r\n", rpm, duty_cycle);
  2528  000E5C  0E01               	movlw	low STR_3
  2529  000E5E  6E1D               	movwf	printf@f,c
  2530  000E60  0EFF               	movlw	high STR_3
  2531  000E62  6E1E               	movwf	printf@f+1,c
  2532  000E64  C04C  F01F         	movff	_rpm,?_printf+2
  2533  000E68  C04D  F020         	movff	_rpm+1,?_printf+3
  2534  000E6C  C05D  F021         	movff	_duty_cycle,?_printf+4
  2535  000E70  6A22               	clrf	?_printf+5,c
  2536  000E72  ECF7  F004         	call	_printf	;wreg free
  2537                           
  2538                           ;LabFinal.c: 146: Set_RPM_RGB(rpm);
  2539  000E76  C04C  F041         	movff	_rpm,Set_RPM_RGB@rpm
  2540  000E7A  C04D  F042         	movff	_rpm+1,Set_RPM_RGB@rpm+1
  2541  000E7E  ECE6  F014         	call	_Set_RPM_RGB	;wreg free
  2542                           
  2543                           ;LabFinal.c: 147: Set_DC_RGB(duty_cycle);
  2544  000E82  C05D  F041         	movff	_duty_cycle,Set_DC_RGB@duty_cycle
  2545  000E86  6A42               	clrf	Set_DC_RGB@duty_cycle+1,c
  2546  000E88  ECE0  F015         	call	_Set_DC_RGB	;wreg free
  2547                           
  2548                           ;LabFinal.c: 148: Monitor_Heater();
  2549  000E8C  EC3F  F019         	call	_Monitor_Heater	;wreg free
  2550                           
  2551                           ;LabFinal.c: 149: Test_Alarm();
  2552  000E90  EC7D  F00E         	call	_Test_Alarm	;wreg free
  2553                           
  2554                           ;LabFinal.c: 150: Update_Screen();
  2555  000E94  EC0E  F000         	call	_Update_Screen	;wreg free
  2556  000E98  D000               	goto	l10029
  2557  000E9A                     l10029:
  2558                           
  2559                           ;LabFinal.c: 151: }
  2560                           ;LabFinal.c: 153: if (check_for_button_input() == 1)
  2561  000E9A  EC1A  F018         	call	_check_for_button_input	;wreg free
  2562  000E9E  06E8               	decf	wreg,f,c
  2563  000EA0  A4D8               	btfss	status,2,c
  2564  000EA2  D02C               	goto	l10055
  2565                           
  2566                           ;LabFinal.c: 154: {
  2567                           ;LabFinal.c: 156: nec_ok = 0;
  2568  000EA4  0E00               	movlw	0
  2569  000EA6  0100               	movlb	0	; () banked
  2570  000EA8  6FF3               	movwf	(_nec_ok+1)& (0+255),b
  2571  000EAA  0E00               	movlw	0
  2572  000EAC  6FF2               	movwf	_nec_ok& (0+255),b
  2573                           
  2574                           ;LabFinal.c: 157: switch (found)
  2575  000EAE  D017               	goto	l10053
  2576  000EB0                     l10033:
  2577                           
  2578                           ;LabFinal.c: 160: Do_Beep_Good();
  2579  000EB0  EC4F  F01E         	call	_Do_Beep_Good	;wreg free
  2580                           
  2581                           ;LabFinal.c: 161: Do_Setup_Time();
  2582  000EB4  EC08  F013         	call	_Do_Setup_Time	;wreg free
  2583                           
  2584                           ;LabFinal.c: 162: break;
  2585  000EB8  D021               	goto	l10055
  2586  000EBA                     l10037:
  2587                           
  2588                           ;LabFinal.c: 165: Do_Beep_Good();
  2589  000EBA  EC4F  F01E         	call	_Do_Beep_Good	;wreg free
  2590                           
  2591                           ;LabFinal.c: 166: Do_Setup_Alarm_Time();
  2592  000EBE  ECD0  F013         	call	_Do_Setup_Alarm_Time	;wreg free
  2593                           
  2594                           ;LabFinal.c: 167: break;
  2595  000EC2  D01C               	goto	l10055
  2596  000EC4                     l10041:
  2597                           
  2598                           ;LabFinal.c: 170: Do_Beep_Good();
  2599  000EC4  EC4F  F01E         	call	_Do_Beep_Good	;wreg free
  2600                           
  2601                           ;LabFinal.c: 171: Do_Setup_Heater_Temp();
  2602  000EC8  EC2A  F016         	call	_Do_Setup_Heater_Temp	;wreg free
  2603                           
  2604                           ;LabFinal.c: 172: break;
  2605  000ECC  D017               	goto	l10055
  2606  000ECE                     l10045:
  2607                           
  2608                           ;LabFinal.c: 175: Do_Beep_Good();
  2609  000ECE  EC4F  F01E         	call	_Do_Beep_Good	;wreg free
  2610                           
  2611                           ;LabFinal.c: 176: Toggle_Heater();
  2612  000ED2  ECB6  F01E         	call	_Toggle_Heater	;wreg free
  2613                           
  2614                           ;LabFinal.c: 177: break;
  2615  000ED6  D012               	goto	l10055
  2616  000ED8                     l10049:
  2617                           
  2618                           ;LabFinal.c: 180: Do_Beep_Bad();
  2619  000ED8  EC59  F01E         	call	_Do_Beep_Bad	;wreg free
  2620                           
  2621                           ;LabFinal.c: 182: }
  2622                           
  2623                           ;LabFinal.c: 181: break;
  2624  000EDC  D00F               	goto	l10055
  2625  000EDE                     l10053:
  2626  000EDE  505E               	movf	_found,w,c
  2627                           
  2628                           ; Switch size 1, requested type "space"
  2629                           ; Number of cases is 4, Range of values is 0 to 5
  2630                           ; switch strategies available:
  2631                           ; Name         Instructions Cycles
  2632                           ; simple_byte           13     7 (average)
  2633                           ;	Chosen strategy is simple_byte
  2634  000EE0  0A00               	xorlw	0	; case 0
  2635  000EE2  B4D8               	btfsc	status,2,c
  2636  000EE4  D7E5               	goto	l10033
  2637  000EE6  0A01               	xorlw	1	; case 1
  2638  000EE8  B4D8               	btfsc	status,2,c
  2639  000EEA  D7E7               	goto	l10037
  2640  000EEC  0A03               	xorlw	3	; case 2
  2641  000EEE  B4D8               	btfsc	status,2,c
  2642  000EF0  D7E9               	goto	l10041
  2643  000EF2  0A07               	xorlw	7	; case 5
  2644  000EF4  B4D8               	btfsc	status,2,c
  2645  000EF6  D7EB               	goto	l10045
  2646  000EF8  D7EF               	goto	l10049
  2647  000EFA  D000               	goto	l10055
  2648  000EFC                     l10055:
  2649                           
  2650                           ;LabFinal.c: 183: }
  2651                           ;LabFinal.c: 187: if (INT1_flag == 1)
  2652  000EFC  0100               	movlb	0	; () banked
  2653  000EFE  05F6               	decf	_INT1_flag& (0+255),w,b
  2654  000F00  A4D8               	btfss	status,2,c
  2655  000F02  D72D               	goto	l9995
  2656                           
  2657                           ; BSR set to: 0
  2658                           ;LabFinal.c: 188: {
  2659                           ;LabFinal.c: 189: INT1_flag = 0;
  2660  000F04  0E00               	movlw	0
  2661  000F06  0100               	movlb	0	; () banked
  2662  000F08  6FF6               	movwf	_INT1_flag& (0+255),b
  2663                           
  2664                           ; BSR set to: 0
  2665                           ;LabFinal.c: 190: ALARMEN = (!ALARMEN);
  2666  000F0A  5044               	movf	_ALARMEN,w,c
  2667  000F0C  1045               	iorwf	_ALARMEN+1,w,c
  2668  000F0E  A4D8               	btfss	status,2,c
  2669  000F10  D002               	goto	u7550
  2670  000F12  0E01               	movlw	1
  2671  000F14  D001               	goto	u7560
  2672  000F16                     u7550:
  2673  000F16  0E00               	movlw	0
  2674  000F18                     u7560:
  2675  000F18  6E44               	movwf	_ALARMEN,c
  2676  000F1A  6A45               	clrf	_ALARMEN+1,c
  2677                           
  2678                           ; BSR set to: 0
  2679                           
  2680                           ; BSR set to: 0
  2681  000F1C  D720               	goto	l9995
  2682                           
  2683                           ; BSR set to: 0
  2684                           
  2685                           ; BSR set to: 0
  2686  000F1E  EF0C  F000         	goto	start
  2687  000F22                     __end_of_main:
  2688                           	opt stack 0
  2689                           tblptru	equ	0xFF8
  2690                           tblptrh	equ	0xFF7
  2691                           tblptrl	equ	0xFF6
  2692                           tablat	equ	0xFF5
  2693                           postinc0	equ	0xFEE
  2694                           wreg	equ	0xFE8
  2695                           postdec1	equ	0xFE5
  2696                           fsr1l	equ	0xFE1
  2697                           status	equ	0xFD8
  2698                           
  2699 ;; *************** function _read_volt *****************
  2700 ;; Defined at:
  2701 ;;		line 148 in file "utils.c"
  2702 ;; Parameters:    Size  Location     Type
  2703 ;;		None
  2704 ;; Auto vars:     Size  Location     Type
  2705 ;;  voltage_t       3   46[COMRAM] float 
  2706 ;;  num_step        2   49[COMRAM] int 
  2707 ;; Return value:  Size  Location     Type
  2708 ;;                  3   43[COMRAM] float 
  2709 ;; Registers used:
  2710 ;;		wreg, status,2, status,0, cstack
  2711 ;; Tracked objects:
  2712 ;;		On entry : 0/0
  2713 ;;		On exit  : 0/0
  2714 ;;		Unchanged: 0/0
  2715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2716 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2717 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2719 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2720 ;;Total ram usage:        8 bytes
  2721 ;; Hardware stack levels used:    1
  2722 ;; Hardware stack levels required when called:    5
  2723 ;; This function calls:
  2724 ;;		___awtoft
  2725 ;;		___ftmul
  2726 ;;		_get_full_ADC
  2727 ;; This function is called by:
  2728 ;;		_main
  2729 ;; This function uses a non-reentrant model
  2730 ;;
  2731                           
  2732                           	psect	text1
  2733  00355A                     __ptext1:
  2734                           	opt stack 0
  2735  00355A                     _read_volt:
  2736                           	opt stack 25
  2737                           
  2738                           ;utils.c: 150: int num_step = get_full_ADC();
  2739                           
  2740                           ; BSR set to: 0
  2741                           ;incstack = 0
  2742  00355A  EC3B  F01D         	call	_get_full_ADC	;wreg free
  2743  00355E  C011  F032         	movff	?_get_full_ADC,read_volt@num_step
  2744  003562  C012  F033         	movff	?_get_full_ADC+1,read_volt@num_step+1
  2745                           
  2746                           ;utils.c: 151: float voltage_t = num_step*0.004;
  2747  003566  C032  F019         	movff	read_volt@num_step,___awtoft@c
  2748  00356A  C033  F01A         	movff	read_volt@num_step+1,___awtoft@c+1
  2749  00356E  EC5D  F01C         	call	___awtoft	;wreg free
  2750  003572  C019  F01D         	movff	?___awtoft,___ftmul@f1
  2751  003576  C01A  F01E         	movff	?___awtoft+1,___ftmul@f1+1
  2752  00357A  C01B  F01F         	movff	?___awtoft+2,___ftmul@f1+2
  2753  00357E  0E12               	movlw	18
  2754  003580  6E20               	movwf	___ftmul@f2,c
  2755  003582  0E83               	movlw	131
  2756  003584  6E21               	movwf	___ftmul@f2+1,c
  2757  003586  0E3B               	movlw	59
  2758  003588  6E22               	movwf	___ftmul@f2+2,c
  2759  00358A  EC01  F00F         	call	___ftmul	;wreg free
  2760  00358E  C01D  F02F         	movff	?___ftmul,read_volt@voltage_t
  2761  003592  C01E  F030         	movff	?___ftmul+1,read_volt@voltage_t+1
  2762  003596  C01F  F031         	movff	?___ftmul+2,read_volt@voltage_t+2
  2763                           
  2764                           ;utils.c: 152: return voltage_t;
  2765  00359A  C02F  F02C         	movff	read_volt@voltage_t,?_read_volt
  2766  00359E  C030  F02D         	movff	read_volt@voltage_t+1,?_read_volt+1
  2767  0035A2  C031  F02E         	movff	read_volt@voltage_t+2,?_read_volt+2
  2768  0035A6  D000               	goto	l1375
  2769  0035A8                     l1375:
  2770  0035A8  0012               	return		;funcret
  2771  0035AA                     __end_of_read_volt:
  2772                           	opt stack 0
  2773                           tblptru	equ	0xFF8
  2774                           tblptrh	equ	0xFF7
  2775                           tblptrl	equ	0xFF6
  2776                           tablat	equ	0xFF5
  2777                           postinc0	equ	0xFEE
  2778                           wreg	equ	0xFE8
  2779                           postdec1	equ	0xFE5
  2780                           fsr1l	equ	0xFE1
  2781                           status	equ	0xFD8
  2782                           
  2783 ;; *************** function _get_full_ADC *****************
  2784 ;; Defined at:
  2785 ;;		line 155 in file "utils.c"
  2786 ;; Parameters:    Size  Location     Type
  2787 ;;		None
  2788 ;; Auto vars:     Size  Location     Type
  2789 ;;  result          2   20[COMRAM] int 
  2790 ;; Return value:  Size  Location     Type
  2791 ;;                  2   16[COMRAM] unsigned int 
  2792 ;; Registers used:
  2793 ;;		wreg, status,2, status,0
  2794 ;; Tracked objects:
  2795 ;;		On entry : 0/0
  2796 ;;		On exit  : 0/0
  2797 ;;		Unchanged: 0/0
  2798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2799 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2800 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2801 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2802 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2803 ;;Total ram usage:        6 bytes
  2804 ;; Hardware stack levels used:    1
  2805 ;; Hardware stack levels required when called:    3
  2806 ;; This function calls:
  2807 ;;		Nothing
  2808 ;; This function is called by:
  2809 ;;		_read_volt
  2810 ;; This function uses a non-reentrant model
  2811 ;;
  2812                           
  2813                           	psect	text2
  2814  003A76                     __ptext2:
  2815                           	opt stack 0
  2816  003A76                     _get_full_ADC:
  2817                           	opt stack 26
  2818                           
  2819                           ;utils.c: 157: int result;
  2820                           ;utils.c: 158: ADCON0bits.GO=1;
  2821                           
  2822                           ;incstack = 0
  2823  003A76  82C2               	bsf	4034,1,c	;volatile
  2824                           
  2825                           ;utils.c: 159: while(ADCON0bits.DONE==1);
  2826  003A78  D000               	goto	l1378
  2827  003A7A                     l1378:
  2828  003A7A  B2C2               	btfsc	4034,1,c	;volatile
  2829  003A7C  D7FE               	goto	l1378
  2830                           
  2831                           ;utils.c: 160: result = (ADRESH * 0x100) + ADRESL;
  2832  003A7E  50C4               	movf	4036,w,c	;volatile
  2833  003A80  6E14               	movwf	(??_get_full_ADC+1)& (0+255),c
  2834  003A82  6A13               	clrf	??_get_full_ADC& (0+255),c
  2835  003A84  50C3               	movf	4035,w,c	;volatile
  2836  003A86  2413               	addwf	??_get_full_ADC,w,c
  2837  003A88  6E15               	movwf	get_full_ADC@result,c
  2838  003A8A  0E00               	movlw	0
  2839  003A8C  2014               	addwfc	??_get_full_ADC+1,w,c
  2840  003A8E  6E16               	movwf	get_full_ADC@result+1,c
  2841                           
  2842                           ;utils.c: 162: return result;
  2843  003A90  C015  F011         	movff	get_full_ADC@result,?_get_full_ADC
  2844  003A94  C016  F012         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  2845  003A98  D000               	goto	l1381
  2846  003A9A                     l1381:
  2847  003A9A  0012               	return		;funcret
  2848  003A9C                     __end_of_get_full_ADC:
  2849                           	opt stack 0
  2850                           tblptru	equ	0xFF8
  2851                           tblptrh	equ	0xFF7
  2852                           tblptrl	equ	0xFF6
  2853                           tablat	equ	0xFF5
  2854                           postinc0	equ	0xFEE
  2855                           wreg	equ	0xFE8
  2856                           postdec1	equ	0xFE5
  2857                           fsr1l	equ	0xFE1
  2858                           status	equ	0xFD8
  2859                           
  2860 ;; *************** function ___awtoft *****************
  2861 ;; Defined at:
  2862 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  2863 ;; Parameters:    Size  Location     Type
  2864 ;;  c               2   24[COMRAM] int 
  2865 ;; Auto vars:     Size  Location     Type
  2866 ;;  sign            1   27[COMRAM] unsigned char 
  2867 ;; Return value:  Size  Location     Type
  2868 ;;                  3   24[COMRAM] float 
  2869 ;; Registers used:
  2870 ;;		wreg, status,2, status,0, cstack
  2871 ;; Tracked objects:
  2872 ;;		On entry : 0/0
  2873 ;;		On exit  : 0/0
  2874 ;;		Unchanged: 0/0
  2875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2876 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2877 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2879 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2880 ;;Total ram usage:        4 bytes
  2881 ;; Hardware stack levels used:    1
  2882 ;; Hardware stack levels required when called:    4
  2883 ;; This function calls:
  2884 ;;		___ftpack
  2885 ;; This function is called by:
  2886 ;;		_read_volt
  2887 ;; This function uses a non-reentrant model
  2888 ;;
  2889                           
  2890                           	psect	text3
  2891  0038BA                     __ptext3:
  2892                           	opt stack 0
  2893  0038BA                     ___awtoft:
  2894                           	opt stack 25
  2895                           
  2896                           ;incstack = 0
  2897  0038BA  0E00               	movlw	0
  2898  0038BC  6E1C               	movwf	___awtoft@sign,c
  2899  0038BE  AE1A               	btfss	___awtoft@c+1,7,c
  2900  0038C0  D007               	goto	l9451
  2901  0038C2  6C19               	negf	___awtoft@c,c
  2902  0038C4  1E1A               	comf	___awtoft@c+1,f,c
  2903  0038C6  B0D8               	btfsc	status,0,c
  2904  0038C8  2A1A               	incf	___awtoft@c+1,f,c
  2905  0038CA  0E01               	movlw	1
  2906  0038CC  6E1C               	movwf	___awtoft@sign,c
  2907  0038CE  D000               	goto	l9451
  2908  0038D0                     l9451:
  2909  0038D0  C019  F011         	movff	___awtoft@c,___ftpack@arg
  2910  0038D4  C01A  F012         	movff	___awtoft@c+1,___ftpack@arg+1
  2911  0038D8  6A13               	clrf	___ftpack@arg+2,c
  2912  0038DA  0E8E               	movlw	142
  2913  0038DC  6E14               	movwf	___ftpack@exp,c
  2914  0038DE  C01C  F015         	movff	___awtoft@sign,___ftpack@sign
  2915  0038E2  EC6D  F013         	call	___ftpack	;wreg free
  2916  0038E6  C011  F019         	movff	?___ftpack,?___awtoft
  2917  0038EA  C012  F01A         	movff	?___ftpack+1,?___awtoft+1
  2918  0038EE  C013  F01B         	movff	?___ftpack+2,?___awtoft+2
  2919  0038F2  D000               	goto	l1707
  2920  0038F4                     l1707:
  2921  0038F4  0012               	return		;funcret
  2922  0038F6                     __end_of___awtoft:
  2923                           	opt stack 0
  2924                           tblptru	equ	0xFF8
  2925                           tblptrh	equ	0xFF7
  2926                           tblptrl	equ	0xFF6
  2927                           tablat	equ	0xFF5
  2928                           postinc0	equ	0xFEE
  2929                           wreg	equ	0xFE8
  2930                           postdec1	equ	0xFE5
  2931                           fsr1l	equ	0xFE1
  2932                           status	equ	0xFD8
  2933                           
  2934 ;; *************** function _get_RPM *****************
  2935 ;; Defined at:
  2936 ;;		line 59 in file "Fan_Support.c"
  2937 ;; Parameters:    Size  Location     Type
  2938 ;;		None
  2939 ;; Auto vars:     Size  Location     Type
  2940 ;;  RPS             2    0[BANK0 ] int 
  2941 ;; Return value:  Size  Location     Type
  2942 ;;                  2   64[COMRAM] int 
  2943 ;; Registers used:
  2944 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2945 ;; Tracked objects:
  2946 ;;		On entry : 0/0
  2947 ;;		On exit  : 0/0
  2948 ;;		Unchanged: 0/0
  2949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2950 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2951 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2953 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2954 ;;Total ram usage:        4 bytes
  2955 ;; Hardware stack levels used:    1
  2956 ;; Hardware stack levels required when called:    4
  2957 ;; This function calls:
  2958 ;;		___awdiv
  2959 ;;		___wmul
  2960 ;; This function is called by:
  2961 ;;		_main
  2962 ;; This function uses a non-reentrant model
  2963 ;;
  2964                           
  2965                           	psect	text4
  2966  0037BE                     __ptext4:
  2967                           	opt stack 0
  2968  0037BE                     _get_RPM:
  2969                           	opt stack 26
  2970                           
  2971                           ;Fan_Support.c: 61: int RPS = TMR3L / 2;
  2972                           
  2973                           ;incstack = 0
  2974  0037BE  CFB2 F134          	movff	4018,___awdiv@dividend	;volatile
  2975  0037C2  0101               	movlb	1	; () banked
  2976  0037C4  6B35               	clrf	(___awdiv@dividend+1)& (0+255),b
  2977  0037C6  0E00               	movlw	0
  2978  0037C8  0101               	movlb	1	; () banked
  2979  0037CA  6F37               	movwf	(___awdiv@divisor+1)& (0+255),b
  2980  0037CC  0E02               	movlw	2
  2981  0037CE  6F36               	movwf	___awdiv@divisor& (0+255),b
  2982  0037D0  EC3A  F012         	call	___awdiv	;wreg free
  2983  0037D4  C134  F0FD         	movff	?___awdiv,get_RPM@RPS
  2984  0037D8  C135  F0FE         	movff	?___awdiv+1,get_RPM@RPS+1
  2985                           
  2986                           ;Fan_Support.c: 63: TMR3L = 0;
  2987  0037DC  0E00               	movlw	0
  2988  0037DE  6EB2               	movwf	4018,c	;volatile
  2989                           
  2990                           ;Fan_Support.c: 64: return (RPS * 60);
  2991  0037E0  C0FD  F011         	movff	get_RPM@RPS,___wmul@multiplier
  2992  0037E4  C0FE  F012         	movff	get_RPM@RPS+1,___wmul@multiplier+1
  2993  0037E8  0E00               	movlw	0
  2994  0037EA  6E14               	movwf	___wmul@multiplicand+1,c
  2995  0037EC  0E3C               	movlw	60
  2996  0037EE  6E13               	movwf	___wmul@multiplicand,c
  2997  0037F0  EC27  F01D         	call	___wmul	;wreg free
  2998  0037F4  C011  F041         	movff	?___wmul,?_get_RPM
  2999  0037F8  C012  F042         	movff	?___wmul+1,?_get_RPM+1
  3000  0037FC  D000               	goto	l296
  3001  0037FE                     l296:
  3002  0037FE  0012               	return		;funcret
  3003  003800                     __end_of_get_RPM:
  3004                           	opt stack 0
  3005                           tblptru	equ	0xFF8
  3006                           tblptrh	equ	0xFF7
  3007                           tblptrl	equ	0xFF6
  3008                           tablat	equ	0xFF5
  3009                           postinc0	equ	0xFEE
  3010                           wreg	equ	0xFE8
  3011                           postdec1	equ	0xFE5
  3012                           fsr1l	equ	0xFE1
  3013                           status	equ	0xFD8
  3014                           
  3015 ;; *************** function _Update_Screen *****************
  3016 ;; Defined at:
  3017 ;;		line 77 in file "Main_Screen.c"
  3018 ;; Parameters:    Size  Location     Type
  3019 ;;		None
  3020 ;; Auto vars:     Size  Location     Type
  3021 ;;  neg_tempF       2    8[BANK1 ] int 
  3022 ;;  neg_DS1621_t    1   10[BANK1 ] unsigned char 
  3023 ;; Return value:  Size  Location     Type
  3024 ;;                  2   64[None  ] int 
  3025 ;; Registers used:
  3026 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3027 ;; Tracked objects:
  3028 ;;		On entry : 0/0
  3029 ;;		On exit  : 0/0
  3030 ;;		Unchanged: 0/0
  3031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3033 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3034 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3035 ;;      Totals:         0       2       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3036 ;;Total ram usage:        5 bytes
  3037 ;; Hardware stack levels used:    1
  3038 ;; Hardware stack levels required when called:   10
  3039 ;; This function calls:
  3040 ;;		___awdiv
  3041 ;;		___awmod
  3042 ;;		___ftmul
  3043 ;;		___fttol
  3044 ;;		_drawtext
  3045 ;;		_strcpy
  3046 ;; This function is called by:
  3047 ;;		_main
  3048 ;; This function uses a non-reentrant model
  3049 ;;
  3050                           
  3051                           	psect	text5
  3052  00001C                     __ptext5:
  3053                           	opt stack 0
  3054  00001C                     _Update_Screen:
  3055                           	opt stack 20
  3056                           
  3057                           ;Main_Screen.c: 79: if ((DS1621_tempC & 0x80) == 0x80)
  3058                           
  3059                           ;incstack = 0
  3060  00001C  AE46               	btfss	_DS1621_tempC,7,c
  3061  00001E  D023               	goto	l9645
  3062                           
  3063                           ;Main_Screen.c: 80: {
  3064                           ;Main_Screen.c: 81: tempC[0] = '-';
  3065  000020  0E2D               	movlw	45
  3066  000022  0100               	movlb	0	; () banked
  3067  000024  6FD9               	movwf	_tempC& (0+255),b
  3068                           
  3069                           ; BSR set to: 0
  3070                           ;Main_Screen.c: 82: char neg_DS1621_tempC = 0x80 - (DS1621_tempC & 0x7f);
  3071  000026  5046               	movf	_DS1621_tempC,w,c
  3072  000028  0B7F               	andlw	127
  3073  00002A  0800               	sublw	0
  3074  00002C  0F80               	addlw	128
  3075  00002E  0101               	movlb	1	; () banked
  3076  000030  6F3E               	movwf	Update_Screen@neg_DS1621_tempC& (0+255),b
  3077                           
  3078                           ; BSR set to: 1
  3079                           ;Main_Screen.c: 83: tempC[1] = (neg_DS1621_tempC)/10 + '0';
  3080  000032  C13E  F134         	movff	Update_Screen@neg_DS1621_tempC,___awdiv@dividend
  3081  000036  0101               	movlb	1	; () banked
  3082  000038  6B35               	clrf	(___awdiv@dividend+1)& (0+255),b
  3083  00003A  0E00               	movlw	0
  3084  00003C  0101               	movlb	1	; () banked
  3085  00003E  6F37               	movwf	(___awdiv@divisor+1)& (0+255),b
  3086  000040  0E0A               	movlw	10
  3087  000042  6F36               	movwf	___awdiv@divisor& (0+255),b
  3088  000044  EC3A  F012         	call	___awdiv	;wreg free
  3089  000048  0101               	movlb	1	; () banked
  3090  00004A  5134               	movf	?___awdiv& (0+255),w,b
  3091  00004C  0F30               	addlw	48
  3092  00004E  0100               	movlb	0	; () banked
  3093  000050  6FDA               	movwf	(_tempC+1)& (0+255),b
  3094                           
  3095                           ; BSR set to: 0
  3096                           ;Main_Screen.c: 84: tempC[2] = (neg_DS1621_tempC)%10 + '0';
  3097  000052  C13E  F03B         	movff	Update_Screen@neg_DS1621_tempC,___awmod@dividend
  3098  000056  6A3C               	clrf	___awmod@dividend+1,c
  3099  000058  0E00               	movlw	0
  3100  00005A  6E3E               	movwf	___awmod@divisor+1,c
  3101  00005C  0E0A               	movlw	10
  3102  00005E  6E3D               	movwf	___awmod@divisor,c
  3103  000060  ECD9  F017         	call	___awmod	;wreg free
  3104  000064  D01D               	goto	L1
  3105  000066                     l9645:
  3106                           
  3107                           ;Main_Screen.c: 86: else
  3108                           ;Main_Screen.c: 87: {
  3109                           ;Main_Screen.c: 88: tempC[0] = '+';
  3110  000066  0E2B               	movlw	43
  3111  000068  0100               	movlb	0	; () banked
  3112  00006A  6FD9               	movwf	_tempC& (0+255),b
  3113                           
  3114                           ; BSR set to: 0
  3115                           ;Main_Screen.c: 89: tempC[1] = DS1621_tempC/10 + '0';
  3116  00006C  C046  F134         	movff	_DS1621_tempC,___awdiv@dividend
  3117  000070  C047  F135         	movff	_DS1621_tempC+1,___awdiv@dividend+1
  3118  000074  0E00               	movlw	0
  3119  000076  0101               	movlb	1	; () banked
  3120  000078  6F37               	movwf	(___awdiv@divisor+1)& (0+255),b
  3121  00007A  0E0A               	movlw	10
  3122  00007C  6F36               	movwf	___awdiv@divisor& (0+255),b
  3123  00007E  EC3A  F012         	call	___awdiv	;wreg free
  3124  000082  0101               	movlb	1	; () banked
  3125  000084  5134               	movf	?___awdiv& (0+255),w,b
  3126  000086  0F30               	addlw	48
  3127  000088  0100               	movlb	0	; () banked
  3128  00008A  6FDA               	movwf	(_tempC+1)& (0+255),b
  3129                           
  3130                           ; BSR set to: 0
  3131                           ;Main_Screen.c: 90: tempC[2] = DS1621_tempC%10 + '0';
  3132  00008C  C046  F03B         	movff	_DS1621_tempC,___awmod@dividend
  3133  000090  C047  F03C         	movff	_DS1621_tempC+1,___awmod@dividend+1
  3134  000094  0E00               	movlw	0
  3135  000096  6E3E               	movwf	___awmod@divisor+1,c
  3136  000098  0E0A               	movlw	10
  3137  00009A  6E3D               	movwf	___awmod@divisor,c
  3138  00009C  ECD9  F017         	call	___awmod	;wreg free
  3139  0000A0                     L1:
  3140  0000A0  503B               	movf	?___awmod,w,c
  3141  0000A2  0F30               	addlw	48
  3142  0000A4  0100               	movlb	0	; () banked
  3143  0000A6  6FDB               	movwf	(_tempC+2)& (0+255),b
  3144  0000A8  D000               	goto	l9651
  3145  0000AA                     l9651:
  3146                           
  3147                           ; BSR set to: 0
  3148                           ;Main_Screen.c: 91: }
  3149                           ;Main_Screen.c: 93: if (DS1621_tempF < 0)
  3150  0000AA  AE49               	btfss	_DS1621_tempF+1,7,c
  3151  0000AC  D035               	goto	l9661
  3152                           
  3153                           ; BSR set to: 0
  3154                           ;Main_Screen.c: 94: {
  3155                           ;Main_Screen.c: 95: tempF[0] = '-';
  3156  0000AE  0E2D               	movlw	45
  3157  0000B0  0100               	movlb	0	; () banked
  3158  0000B2  6FDD               	movwf	_tempF& (0+255),b
  3159                           
  3160                           ; BSR set to: 0
  3161                           ;Main_Screen.c: 96: int neg_tempF = 0x80 - (DS1621_tempF & 0x7f);
  3162  0000B4  0E7F               	movlw	127
  3163  0000B6  1448               	andwf	_DS1621_tempF,w,c
  3164  0000B8  0100               	movlb	0	; () banked
  3165  0000BA  6FFD               	movwf	??_Update_Screen& (0+255),b
  3166  0000BC  0E00               	movlw	0
  3167  0000BE  1449               	andwf	_DS1621_tempF+1,w,c
  3168  0000C0  0100               	movlb	0	; () banked
  3169  0000C2  6FFE               	movwf	(??_Update_Screen+1)& (0+255),b
  3170  0000C4  0100               	movlb	0	; () banked
  3171  0000C6  1FFD               	comf	??_Update_Screen& (0+255),f,b
  3172  0000C8  1FFE               	comf	(??_Update_Screen+1)& (0+255),f,b
  3173  0000CA  4BFD               	infsnz	??_Update_Screen& (0+255),f,b
  3174  0000CC  2BFE               	incf	(??_Update_Screen+1)& (0+255),f,b
  3175  0000CE  0E80               	movlw	128
  3176  0000D0  0100               	movlb	0	; () banked
  3177  0000D2  25FD               	addwf	??_Update_Screen& (0+255),w,b
  3178  0000D4  0101               	movlb	1	; () banked
  3179  0000D6  6F3C               	movwf	Update_Screen@neg_tempF& (0+255),b
  3180  0000D8  0E00               	movlw	0
  3181  0000DA  0100               	movlb	0	; () banked
  3182  0000DC  21FE               	addwfc	(??_Update_Screen+1)& (0+255),w,b
  3183  0000DE  0101               	movlb	1	; () banked
  3184  0000E0  6F3D               	movwf	(Update_Screen@neg_tempF+1)& (0+255),b
  3185                           
  3186                           ; BSR set to: 1
  3187                           ;Main_Screen.c: 97: tempF[1] = neg_tempF/10 + '0';
  3188  0000E2  C13C  F134         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  3189  0000E6  C13D  F135         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  3190  0000EA  0E00               	movlw	0
  3191  0000EC  0101               	movlb	1	; () banked
  3192  0000EE  6F37               	movwf	(___awdiv@divisor+1)& (0+255),b
  3193  0000F0  0E0A               	movlw	10
  3194  0000F2  6F36               	movwf	___awdiv@divisor& (0+255),b
  3195  0000F4  EC3A  F012         	call	___awdiv	;wreg free
  3196  0000F8  0101               	movlb	1	; () banked
  3197  0000FA  5134               	movf	?___awdiv& (0+255),w,b
  3198  0000FC  0F30               	addlw	48
  3199  0000FE  0100               	movlb	0	; () banked
  3200  000100  6FDE               	movwf	(_tempF+1)& (0+255),b
  3201                           
  3202                           ; BSR set to: 0
  3203                           ;Main_Screen.c: 98: tempF[2] = neg_tempF%10 + '0';
  3204  000102  C13C  F03B         	movff	Update_Screen@neg_tempF,___awmod@dividend
  3205  000106  C13D  F03C         	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  3206  00010A  0E00               	movlw	0
  3207  00010C  6E3E               	movwf	___awmod@divisor+1,c
  3208  00010E  0E0A               	movlw	10
  3209  000110  6E3D               	movwf	___awmod@divisor,c
  3210  000112  ECD9  F017         	call	___awmod	;wreg free
  3211  000116  D01D               	goto	L2
  3212  000118                     l9661:
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;Main_Screen.c: 100: else
  3216                           ;Main_Screen.c: 101: {
  3217                           ;Main_Screen.c: 102: tempF[0] = '+';
  3218  000118  0E2B               	movlw	43
  3219  00011A  0100               	movlb	0	; () banked
  3220  00011C  6FDD               	movwf	_tempF& (0+255),b
  3221                           
  3222                           ; BSR set to: 0
  3223                           ;Main_Screen.c: 103: tempF[1] = DS1621_tempF/10 + '0';
  3224  00011E  C048  F134         	movff	_DS1621_tempF,___awdiv@dividend
  3225  000122  C049  F135         	movff	_DS1621_tempF+1,___awdiv@dividend+1
  3226  000126  0E00               	movlw	0
  3227  000128  0101               	movlb	1	; () banked
  3228  00012A  6F37               	movwf	(___awdiv@divisor+1)& (0+255),b
  3229  00012C  0E0A               	movlw	10
  3230  00012E  6F36               	movwf	___awdiv@divisor& (0+255),b
  3231  000130  EC3A  F012         	call	___awdiv	;wreg free
  3232  000134  0101               	movlb	1	; () banked
  3233  000136  5134               	movf	?___awdiv& (0+255),w,b
  3234  000138  0F30               	addlw	48
  3235  00013A  0100               	movlb	0	; () banked
  3236  00013C  6FDE               	movwf	(_tempF+1)& (0+255),b
  3237                           
  3238                           ; BSR set to: 0
  3239                           ;Main_Screen.c: 104: tempF[2] = DS1621_tempF%10 + '0';
  3240  00013E  C048  F03B         	movff	_DS1621_tempF,___awmod@dividend
  3241  000142  C049  F03C         	movff	_DS1621_tempF+1,___awmod@dividend+1
  3242  000146  0E00               	movlw	0
  3243  000148  6E3E               	movwf	___awmod@divisor+1,c
  3244  00014A  0E0A               	movlw	10
  3245  00014C  6E3D               	movwf	___awmod@divisor,c
  3246  00014E  ECD9  F017         	call	___awmod	;wreg free
  3247  000152                     L2:
  3248  000152  503B               	movf	?___awmod,w,c
  3249  000154  0F30               	addlw	48
  3250  000156  0100               	movlb	0	; () banked
  3251  000158  6FDF               	movwf	(_tempF+2)& (0+255),b
  3252  00015A  D000               	goto	l9667
  3253  00015C                     l9667:
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;Main_Screen.c: 105: }
  3257                           ;Main_Screen.c: 107: time[0] = (hour>>4) + '0';
  3258  00015C  385F               	swapf	_hour,w,c
  3259  00015E  0B0F               	andlw	15
  3260  000160  0F30               	addlw	48
  3261  000162  0100               	movlb	0	; () banked
  3262  000164  6FAF               	movwf	_time& (0+255),b
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;Main_Screen.c: 108: time[1] = (hour & 0x0f)+ '0';
  3266  000166  505F               	movf	_hour,w,c
  3267  000168  0B0F               	andlw	15
  3268  00016A  0F30               	addlw	48
  3269  00016C  0100               	movlb	0	; () banked
  3270  00016E  6FB0               	movwf	(_time+1)& (0+255),b
  3271                           
  3272                           ; BSR set to: 0
  3273                           ;Main_Screen.c: 111: time[3] = (minute >> 4) + '0';
  3274  000170  3860               	swapf	_minute,w,c
  3275  000172  0B0F               	andlw	15
  3276  000174  0F30               	addlw	48
  3277  000176  0100               	movlb	0	; () banked
  3278  000178  6FB2               	movwf	(_time+3)& (0+255),b
  3279                           
  3280                           ; BSR set to: 0
  3281                           ;Main_Screen.c: 112: time[4] = (minute & 0x0f) + '0';
  3282  00017A  5060               	movf	_minute,w,c
  3283  00017C  0B0F               	andlw	15
  3284  00017E  0F30               	addlw	48
  3285  000180  0100               	movlb	0	; () banked
  3286  000182  6FB3               	movwf	(_time+4)& (0+255),b
  3287                           
  3288                           ; BSR set to: 0
  3289                           ;Main_Screen.c: 114: time[6] = (second >> 4) + '0';
  3290  000184  3863               	swapf	_second,w,c
  3291  000186  0B0F               	andlw	15
  3292  000188  0F30               	addlw	48
  3293  00018A  0100               	movlb	0	; () banked
  3294  00018C  6FB5               	movwf	(_time+6)& (0+255),b
  3295                           
  3296                           ; BSR set to: 0
  3297                           ;Main_Screen.c: 115: time[7] = (second & 0x0f) + '0';
  3298  00018E  5063               	movf	_second,w,c
  3299  000190  0B0F               	andlw	15
  3300  000192  0F30               	addlw	48
  3301  000194  0100               	movlb	0	; () banked
  3302  000196  6FB6               	movwf	(_time+7)& (0+255),b
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;Main_Screen.c: 117: date[0] = (month >> 4) + '0';
  3306  000198  3861               	swapf	_month,w,c
  3307  00019A  0B0F               	andlw	15
  3308  00019C  0F30               	addlw	48
  3309  00019E  0100               	movlb	0	; () banked
  3310  0001A0  6F8B               	movwf	_date& (0+255),b
  3311                           
  3312                           ; BSR set to: 0
  3313                           ;Main_Screen.c: 118: date[1] = (month & 0x0f) + '0';
  3314  0001A2  5061               	movf	_month,w,c
  3315  0001A4  0B0F               	andlw	15
  3316  0001A6  0F30               	addlw	48
  3317  0001A8  0100               	movlb	0	; () banked
  3318  0001AA  6F8C               	movwf	(_date+1)& (0+255),b
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;Main_Screen.c: 119: date[3] = (day >> 4) + '0';
  3322  0001AC  385B               	swapf	_day,w,c
  3323  0001AE  0B0F               	andlw	15
  3324  0001B0  0F30               	addlw	48
  3325  0001B2  0100               	movlb	0	; () banked
  3326  0001B4  6F8E               	movwf	(_date+3)& (0+255),b
  3327                           
  3328                           ; BSR set to: 0
  3329                           ;Main_Screen.c: 120: date[4] = (day & 0x0f) + '0';
  3330  0001B6  505B               	movf	_day,w,c
  3331  0001B8  0B0F               	andlw	15
  3332  0001BA  0F30               	addlw	48
  3333  0001BC  0100               	movlb	0	; () banked
  3334  0001BE  6F8F               	movwf	(_date+4)& (0+255),b
  3335                           
  3336                           ; BSR set to: 0
  3337                           ;Main_Screen.c: 121: date[6] = (year >> 4) + '0';
  3338  0001C0  386E               	swapf	_year,w,c
  3339  0001C2  0B0F               	andlw	15
  3340  0001C4  0F30               	addlw	48
  3341  0001C6  0100               	movlb	0	; () banked
  3342  0001C8  6F91               	movwf	(_date+6)& (0+255),b
  3343                           
  3344                           ; BSR set to: 0
  3345                           ;Main_Screen.c: 122: date[7] = (year & 0x0f) + '0';
  3346  0001CA  506E               	movf	_year,w,c
  3347  0001CC  0B0F               	andlw	15
  3348  0001CE  0F30               	addlw	48
  3349  0001D0  0100               	movlb	0	; () banked
  3350  0001D2  6F92               	movwf	(_date+7)& (0+255),b
  3351                           
  3352                           ; BSR set to: 0
  3353                           ;Main_Screen.c: 123: alarm_time[0] = (alarm_hour>>4) + '0';
  3354  0001D4  3856               	swapf	_alarm_hour,w,c
  3355  0001D6  0B0F               	andlw	15
  3356  0001D8  0F30               	addlw	48
  3357  0001DA  0100               	movlb	0	; () banked
  3358  0001DC  6F82               	movwf	_alarm_time& (0+255),b
  3359                           
  3360                           ; BSR set to: 0
  3361                           ;Main_Screen.c: 124: alarm_time[1] = (alarm_hour & 0x0f)+ '0';
  3362  0001DE  5056               	movf	_alarm_hour,w,c
  3363  0001E0  0B0F               	andlw	15
  3364  0001E2  0F30               	addlw	48
  3365  0001E4  0100               	movlb	0	; () banked
  3366  0001E6  6F83               	movwf	(_alarm_time+1)& (0+255),b
  3367                           
  3368                           ; BSR set to: 0
  3369                           ;Main_Screen.c: 125: alarm_time[3] = (alarm_minute>>4) + '0';;
  3370  0001E8  3857               	swapf	_alarm_minute,w,c
  3371  0001EA  0B0F               	andlw	15
  3372  0001EC  0F30               	addlw	48
  3373  0001EE  0100               	movlb	0	; () banked
  3374  0001F0  6F85               	movwf	(_alarm_time+3)& (0+255),b
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;Main_Screen.c: 126: alarm_time[4] = (alarm_minute & 0x0f)+ '0';;
  3378  0001F2  5057               	movf	_alarm_minute,w,c
  3379  0001F4  0B0F               	andlw	15
  3380  0001F6  0F30               	addlw	48
  3381  0001F8  0100               	movlb	0	; () banked
  3382  0001FA  6F86               	movwf	(_alarm_time+4)& (0+255),b
  3383                           
  3384                           ; BSR set to: 0
  3385                           ;Main_Screen.c: 127: alarm_time[6] = (alarm_second>>4) + '0';;
  3386  0001FC  3858               	swapf	_alarm_second,w,c
  3387  0001FE  0B0F               	andlw	15
  3388  000200  0F30               	addlw	48
  3389  000202  0100               	movlb	0	; () banked
  3390  000204  6F88               	movwf	(_alarm_time+6)& (0+255),b
  3391                           
  3392                           ; BSR set to: 0
  3393                           ;Main_Screen.c: 128: alarm_time[7] = (alarm_second & 0x0f)+ '0';;
  3394  000206  5058               	movf	_alarm_second,w,c
  3395  000208  0B0F               	andlw	15
  3396  00020A  0F30               	addlw	48
  3397  00020C  0100               	movlb	0	; () banked
  3398  00020E  6F89               	movwf	(_alarm_time+7)& (0+255),b
  3399                           
  3400                           ; BSR set to: 0
  3401                           ;Main_Screen.c: 130: if (ALARMEN == 1)
  3402  000210  0444               	decf	_ALARMEN,w,c
  3403  000212  1045               	iorwf	_ALARMEN+1,w,c
  3404  000214  A4D8               	btfss	status,2,c
  3405  000216  D00B               	goto	l9707
  3406                           
  3407                           ; BSR set to: 0
  3408                           ;Main_Screen.c: 131: {
  3409                           ;Main_Screen.c: 132: strcpy(Alarm_SW_Txt, "ON ");
  3410  000218  0ECD               	movlw	low _Alarm_SW_Txt
  3411  00021A  6E11               	movwf	strcpy@to,c
  3412  00021C  0E00               	movlw	high _Alarm_SW_Txt
  3413  00021E  6E12               	movwf	strcpy@to+1,c
  3414  000220  0EE9               	movlw	low STR_18
  3415  000222  6E13               	movwf	strcpy@from,c
  3416  000224  0EFF               	movlw	high STR_18
  3417  000226  6E14               	movwf	strcpy@from+1,c
  3418  000228  ECCC  F01C         	call	_strcpy	;wreg free
  3419                           
  3420                           ;Main_Screen.c: 133: }
  3421  00022C  D00B               	goto	l9709
  3422  00022E                     l9707:
  3423                           
  3424                           ;Main_Screen.c: 134: else
  3425                           ;Main_Screen.c: 135: {
  3426                           ;Main_Screen.c: 136: strcpy(Alarm_SW_Txt, "OFF");
  3427  00022E  0ECD               	movlw	low _Alarm_SW_Txt
  3428  000230  6E11               	movwf	strcpy@to,c
  3429  000232  0E00               	movlw	high _Alarm_SW_Txt
  3430  000234  6E12               	movwf	strcpy@to+1,c
  3431  000236  0EED               	movlw	low STR_19
  3432  000238  6E13               	movwf	strcpy@from,c
  3433  00023A  0EFF               	movlw	high STR_19
  3434  00023C  6E14               	movwf	strcpy@from+1,c
  3435  00023E  ECCC  F01C         	call	_strcpy	;wreg free
  3436  000242  D000               	goto	l9709
  3437  000244                     l9709:
  3438                           
  3439                           ;Main_Screen.c: 137: }
  3440                           ;Main_Screen.c: 139: Heater_Set_Temp_Txt[0] = heater_set_temp/100 + '0';
  3441  000244  C06F  F134         	movff	_heater_set_temp,___awdiv@dividend
  3442  000248  0101               	movlb	1	; () banked
  3443  00024A  6B35               	clrf	(___awdiv@dividend+1)& (0+255),b
  3444  00024C  0E00               	movlw	0
  3445  00024E  0101               	movlb	1	; () banked
  3446  000250  6F37               	movwf	(___awdiv@divisor+1)& (0+255),b
  3447  000252  0E64               	movlw	100
  3448  000254  6F36               	movwf	___awdiv@divisor& (0+255),b
  3449  000256  EC3A  F012         	call	___awdiv	;wreg free
  3450  00025A  0101               	movlb	1	; () banked
  3451  00025C  5134               	movf	?___awdiv& (0+255),w,b
  3452  00025E  0F30               	addlw	48
  3453  000260  0100               	movlb	0	; () banked
  3454  000262  6FBE               	movwf	_Heater_Set_Temp_Txt& (0+255),b
  3455                           
  3456                           ; BSR set to: 0
  3457                           ;Main_Screen.c: 140: Heater_Set_Temp_Txt[1] = (heater_set_temp%100)/10 + '0';
  3458  000264  0E00               	movlw	0
  3459  000266  6E3E               	movwf	___awmod@divisor+1,c
  3460  000268  0E64               	movlw	100
  3461  00026A  6E3D               	movwf	___awmod@divisor,c
  3462  00026C  C06F  F03B         	movff	_heater_set_temp,___awmod@dividend
  3463  000270  6A3C               	clrf	___awmod@dividend+1,c
  3464  000272  ECD9  F017         	call	___awmod	;wreg free
  3465  000276  C03B  F134         	movff	?___awmod,___awdiv@dividend
  3466  00027A  C03C  F135         	movff	?___awmod+1,___awdiv@dividend+1
  3467  00027E  0E00               	movlw	0
  3468  000280  0101               	movlb	1	; () banked
  3469  000282  6F37               	movwf	(___awdiv@divisor+1)& (0+255),b
  3470  000284  0E0A               	movlw	10
  3471  000286  6F36               	movwf	___awdiv@divisor& (0+255),b
  3472  000288  EC3A  F012         	call	___awdiv	;wreg free
  3473  00028C  0101               	movlb	1	; () banked
  3474  00028E  5134               	movf	?___awdiv& (0+255),w,b
  3475  000290  0F30               	addlw	48
  3476  000292  0100               	movlb	0	; () banked
  3477  000294  6FBF               	movwf	(_Heater_Set_Temp_Txt+1)& (0+255),b
  3478                           
  3479                           ; BSR set to: 0
  3480                           ;Main_Screen.c: 141: Heater_Set_Temp_Txt[2] = heater_set_temp%10 + '0';
  3481  000296  C06F  F03B         	movff	_heater_set_temp,___awmod@dividend
  3482  00029A  6A3C               	clrf	___awmod@dividend+1,c
  3483  00029C  0E00               	movlw	0
  3484  00029E  6E3E               	movwf	___awmod@divisor+1,c
  3485  0002A0  0E0A               	movlw	10
  3486  0002A2  6E3D               	movwf	___awmod@divisor,c
  3487  0002A4  ECD9  F017         	call	___awmod	;wreg free
  3488  0002A8  503B               	movf	?___awmod,w,c
  3489  0002AA  0F30               	addlw	48
  3490  0002AC  0100               	movlb	0	; () banked
  3491  0002AE  6FC0               	movwf	(_Heater_Set_Temp_Txt+2)& (0+255),b
  3492                           
  3493                           ; BSR set to: 0
  3494                           ;Main_Screen.c: 143: if (HEATER == 1)
  3495  0002B0  0450               	decf	_HEATER,w,c
  3496  0002B2  A4D8               	btfss	status,2,c
  3497  0002B4  D00B               	goto	l9719
  3498                           
  3499                           ; BSR set to: 0
  3500                           ;Main_Screen.c: 144: {
  3501                           ;Main_Screen.c: 145: strcpy(Heater_SW_Txt, "ON ");
  3502  0002B6  0ED5               	movlw	low _Heater_SW_Txt
  3503  0002B8  6E11               	movwf	strcpy@to,c
  3504  0002BA  0E00               	movlw	high _Heater_SW_Txt
  3505  0002BC  6E12               	movwf	strcpy@to+1,c
  3506  0002BE  0EE9               	movlw	low STR_18
  3507  0002C0  6E13               	movwf	strcpy@from,c
  3508  0002C2  0EFF               	movlw	high STR_18
  3509  0002C4  6E14               	movwf	strcpy@from+1,c
  3510  0002C6  ECCC  F01C         	call	_strcpy	;wreg free
  3511                           
  3512                           ;Main_Screen.c: 146: }
  3513  0002CA  D00B               	goto	l9721
  3514  0002CC                     l9719:
  3515                           
  3516                           ;Main_Screen.c: 147: else
  3517                           ;Main_Screen.c: 148: {
  3518                           ;Main_Screen.c: 149: strcpy(Heater_SW_Txt, "OFF");
  3519  0002CC  0ED5               	movlw	low _Heater_SW_Txt
  3520  0002CE  6E11               	movwf	strcpy@to,c
  3521  0002D0  0E00               	movlw	high _Heater_SW_Txt
  3522  0002D2  6E12               	movwf	strcpy@to+1,c
  3523  0002D4  0EED               	movlw	low STR_19
  3524  0002D6  6E13               	movwf	strcpy@from,c
  3525  0002D8  0EFF               	movlw	high STR_19
  3526  0002DA  6E14               	movwf	strcpy@from+1,c
  3527  0002DC  ECCC  F01C         	call	_strcpy	;wreg free
  3528  0002E0  D000               	goto	l9721
  3529  0002E2                     l9721:
  3530                           
  3531                           ;Main_Screen.c: 150: }
  3532                           ;Main_Screen.c: 152: if (PORTBbits.RB2 == 0) RTC_ALARM_Txt[0] = '1';
  3533  0002E2  B481               	btfsc	3969,2,c	;volatile
  3534  0002E4  D002               	goto	l9725
  3535  0002E6  0E31               	movlw	49
  3536  0002E8  D001               	goto	L3
  3537  0002EA                     l9725:
  3538                           
  3539                           ;Main_Screen.c: 153: else RTC_ALARM_Txt[0] = '0';
  3540  0002EA  0E30               	movlw	48
  3541  0002EC                     L3:
  3542  0002EC  0100               	movlb	0	; () banked
  3543  0002EE  6FE1               	movwf	_RTC_ALARM_Txt& (0+255),b
  3544  0002F0  D000               	goto	l9727
  3545  0002F2                     l9727:
  3546                           
  3547                           ; BSR set to: 0
  3548                           ;Main_Screen.c: 156: DC_Txt[0] = duty_cycle/100 + '0';
  3549  0002F2  C05D  F134         	movff	_duty_cycle,___awdiv@dividend
  3550  0002F6  0101               	movlb	1	; () banked
  3551  0002F8  6B35               	clrf	(___awdiv@dividend+1)& (0+255),b
  3552  0002FA  0E00               	movlw	0
  3553  0002FC  0101               	movlb	1	; () banked
  3554  0002FE  6F37               	movwf	(___awdiv@divisor+1)& (0+255),b
  3555  000300  0E64               	movlw	100
  3556  000302  6F36               	movwf	___awdiv@divisor& (0+255),b
  3557  000304  EC3A  F012         	call	___awdiv	;wreg free
  3558  000308  0101               	movlb	1	; () banked
  3559  00030A  5134               	movf	?___awdiv& (0+255),w,b
  3560  00030C  0F30               	addlw	48
  3561  00030E  0100               	movlb	0	; () banked
  3562  000310  6FD1               	movwf	_DC_Txt& (0+255),b
  3563                           
  3564                           ; BSR set to: 0
  3565                           ;Main_Screen.c: 157: DC_Txt[1] = (duty_cycle%100)/10 + '0';
  3566  000312  0E00               	movlw	0
  3567  000314  6E3E               	movwf	___awmod@divisor+1,c
  3568  000316  0E64               	movlw	100
  3569  000318  6E3D               	movwf	___awmod@divisor,c
  3570  00031A  C05D  F03B         	movff	_duty_cycle,___awmod@dividend
  3571  00031E  6A3C               	clrf	___awmod@dividend+1,c
  3572  000320  ECD9  F017         	call	___awmod	;wreg free
  3573  000324  C03B  F134         	movff	?___awmod,___awdiv@dividend
  3574  000328  C03C  F135         	movff	?___awmod+1,___awdiv@dividend+1
  3575  00032C  0E00               	movlw	0
  3576  00032E  0101               	movlb	1	; () banked
  3577  000330  6F37               	movwf	(___awdiv@divisor+1)& (0+255),b
  3578  000332  0E0A               	movlw	10
  3579  000334  6F36               	movwf	___awdiv@divisor& (0+255),b
  3580  000336  EC3A  F012         	call	___awdiv	;wreg free
  3581  00033A  0101               	movlb	1	; () banked
  3582  00033C  5134               	movf	?___awdiv& (0+255),w,b
  3583  00033E  0F30               	addlw	48
  3584  000340  0100               	movlb	0	; () banked
  3585  000342  6FD2               	movwf	(_DC_Txt+1)& (0+255),b
  3586                           
  3587                           ; BSR set to: 0
  3588                           ;Main_Screen.c: 158: DC_Txt[2] = duty_cycle%10 + '0';
  3589  000344  C05D  F03B         	movff	_duty_cycle,___awmod@dividend
  3590  000348  6A3C               	clrf	___awmod@dividend+1,c
  3591  00034A  0E00               	movlw	0
  3592  00034C  6E3E               	movwf	___awmod@divisor+1,c
  3593  00034E  0E0A               	movlw	10
  3594  000350  6E3D               	movwf	___awmod@divisor,c
  3595  000352  ECD9  F017         	call	___awmod	;wreg free
  3596  000356  503B               	movf	?___awmod,w,c
  3597  000358  0F30               	addlw	48
  3598  00035A  0100               	movlb	0	; () banked
  3599  00035C  6FD3               	movwf	(_DC_Txt+2)& (0+255),b
  3600                           
  3601                           ; BSR set to: 0
  3602                           ;Main_Screen.c: 160: Volt_Txt[0] = ((int) volt) + '0';
  3603  00035E  C0E7  F02C         	movff	_volt,___fttol@f1
  3604  000362  C0E8  F02D         	movff	_volt+1,___fttol@f1+1
  3605  000366  C0E9  F02E         	movff	_volt+2,___fttol@f1+2
  3606  00036A  ECE8  F010         	call	___fttol	;wreg free
  3607  00036E  502C               	movf	?___fttol,w,c
  3608  000370  0F30               	addlw	48
  3609  000372  0100               	movlb	0	; () banked
  3610  000374  6FB8               	movwf	_Volt_Txt& (0+255),b
  3611                           
  3612                           ; BSR set to: 0
  3613                           ;Main_Screen.c: 161: Volt_Txt[2] = ((int) (volt*10)%10) + '0';
  3614  000376  0E00               	movlw	0
  3615  000378  6E20               	movwf	___ftmul@f2,c
  3616  00037A  0E20               	movlw	32
  3617  00037C  6E21               	movwf	___ftmul@f2+1,c
  3618  00037E  0E41               	movlw	65
  3619  000380  6E22               	movwf	___ftmul@f2+2,c
  3620  000382  C0E7  F01D         	movff	_volt,___ftmul@f1
  3621  000386  C0E8  F01E         	movff	_volt+1,___ftmul@f1+1
  3622  00038A  C0E9  F01F         	movff	_volt+2,___ftmul@f1+2
  3623  00038E  EC01  F00F         	call	___ftmul	;wreg free
  3624  000392  C01D  F02C         	movff	?___ftmul,___fttol@f1
  3625  000396  C01E  F02D         	movff	?___ftmul+1,___fttol@f1+1
  3626  00039A  C01F  F02E         	movff	?___ftmul+2,___fttol@f1+2
  3627  00039E  ECE8  F010         	call	___fttol	;wreg free
  3628  0003A2  C02C  F03B         	movff	?___fttol,___awmod@dividend
  3629  0003A6  C02D  F03C         	movff	?___fttol+1,___awmod@dividend+1
  3630  0003AA  0E00               	movlw	0
  3631  0003AC  6E3E               	movwf	___awmod@divisor+1,c
  3632  0003AE  0E0A               	movlw	10
  3633  0003B0  6E3D               	movwf	___awmod@divisor,c
  3634  0003B2  ECD9  F017         	call	___awmod	;wreg free
  3635  0003B6  503B               	movf	?___awmod,w,c
  3636  0003B8  0F30               	addlw	48
  3637  0003BA  0100               	movlb	0	; () banked
  3638  0003BC  6FBA               	movwf	(_Volt_Txt+2)& (0+255),b
  3639                           
  3640                           ; BSR set to: 0
  3641                           ;Main_Screen.c: 162: Volt_Txt[3] = ((int) (volt*100)%10) + '0';
  3642  0003BE  0E00               	movlw	0
  3643  0003C0  6E20               	movwf	___ftmul@f2,c
  3644  0003C2  0EC8               	movlw	200
  3645  0003C4  6E21               	movwf	___ftmul@f2+1,c
  3646  0003C6  0E42               	movlw	66
  3647  0003C8  6E22               	movwf	___ftmul@f2+2,c
  3648  0003CA  C0E7  F01D         	movff	_volt,___ftmul@f1
  3649  0003CE  C0E8  F01E         	movff	_volt+1,___ftmul@f1+1
  3650  0003D2  C0E9  F01F         	movff	_volt+2,___ftmul@f1+2
  3651  0003D6  EC01  F00F         	call	___ftmul	;wreg free
  3652  0003DA  C01D  F02C         	movff	?___ftmul,___fttol@f1
  3653  0003DE  C01E  F02D         	movff	?___ftmul+1,___fttol@f1+1
  3654  0003E2  C01F  F02E         	movff	?___ftmul+2,___fttol@f1+2
  3655  0003E6  ECE8  F010         	call	___fttol	;wreg free
  3656  0003EA  C02C  F03B         	movff	?___fttol,___awmod@dividend
  3657  0003EE  C02D  F03C         	movff	?___fttol+1,___awmod@dividend+1
  3658  0003F2  0E00               	movlw	0
  3659  0003F4  6E3E               	movwf	___awmod@divisor+1,c
  3660  0003F6  0E0A               	movlw	10
  3661  0003F8  6E3D               	movwf	___awmod@divisor,c
  3662  0003FA  ECD9  F017         	call	___awmod	;wreg free
  3663  0003FE  503B               	movf	?___awmod,w,c
  3664  000400  0F30               	addlw	48
  3665  000402  0100               	movlb	0	; () banked
  3666  000404  6FBB               	movwf	(_Volt_Txt+3)& (0+255),b
  3667                           
  3668                           ; BSR set to: 0
  3669                           ;Main_Screen.c: 164: RPM_Txt[0] = rpm/1000 + '0';
  3670  000406  C04C  F134         	movff	_rpm,___awdiv@dividend
  3671  00040A  C04D  F135         	movff	_rpm+1,___awdiv@dividend+1
  3672  00040E  0E03               	movlw	3
  3673  000410  0101               	movlb	1	; () banked
  3674  000412  6F37               	movwf	(___awdiv@divisor+1)& (0+255),b
  3675  000414  0EE8               	movlw	232
  3676  000416  6F36               	movwf	___awdiv@divisor& (0+255),b
  3677  000418  EC3A  F012         	call	___awdiv	;wreg free
  3678  00041C  0101               	movlb	1	; () banked
  3679  00041E  5134               	movf	?___awdiv& (0+255),w,b
  3680  000420  0F30               	addlw	48
  3681  000422  0100               	movlb	0	; () banked
  3682  000424  6FC3               	movwf	_RPM_Txt& (0+255),b
  3683                           
  3684                           ; BSR set to: 0
  3685                           ;Main_Screen.c: 165: RPM_Txt[1] = (rpm%1000)/100 + '0';
  3686  000426  0E03               	movlw	3
  3687  000428  6E3E               	movwf	___awmod@divisor+1,c
  3688  00042A  0EE8               	movlw	232
  3689  00042C  6E3D               	movwf	___awmod@divisor,c
  3690  00042E  C04C  F03B         	movff	_rpm,___awmod@dividend
  3691  000432  C04D  F03C         	movff	_rpm+1,___awmod@dividend+1
  3692  000436  ECD9  F017         	call	___awmod	;wreg free
  3693  00043A  C03B  F134         	movff	?___awmod,___awdiv@dividend
  3694  00043E  C03C  F135         	movff	?___awmod+1,___awdiv@dividend+1
  3695  000442  0E00               	movlw	0
  3696  000444  0101               	movlb	1	; () banked
  3697  000446  6F37               	movwf	(___awdiv@divisor+1)& (0+255),b
  3698  000448  0E64               	movlw	100
  3699  00044A  6F36               	movwf	___awdiv@divisor& (0+255),b
  3700  00044C  EC3A  F012         	call	___awdiv	;wreg free
  3701  000450  0101               	movlb	1	; () banked
  3702  000452  5134               	movf	?___awdiv& (0+255),w,b
  3703  000454  0F30               	addlw	48
  3704  000456  0100               	movlb	0	; () banked
  3705  000458  6FC4               	movwf	(_RPM_Txt+1)& (0+255),b
  3706                           
  3707                           ; BSR set to: 0
  3708                           ;Main_Screen.c: 166: RPM_Txt[2] = (rpm%100)/10 + '0';
  3709  00045A  0E00               	movlw	0
  3710  00045C  6E3E               	movwf	___awmod@divisor+1,c
  3711  00045E  0E64               	movlw	100
  3712  000460  6E3D               	movwf	___awmod@divisor,c
  3713  000462  C04C  F03B         	movff	_rpm,___awmod@dividend
  3714  000466  C04D  F03C         	movff	_rpm+1,___awmod@dividend+1
  3715  00046A  ECD9  F017         	call	___awmod	;wreg free
  3716  00046E  C03B  F134         	movff	?___awmod,___awdiv@dividend
  3717  000472  C03C  F135         	movff	?___awmod+1,___awdiv@dividend+1
  3718  000476  0E00               	movlw	0
  3719  000478  0101               	movlb	1	; () banked
  3720  00047A  6F37               	movwf	(___awdiv@divisor+1)& (0+255),b
  3721  00047C  0E0A               	movlw	10
  3722  00047E  6F36               	movwf	___awdiv@divisor& (0+255),b
  3723  000480  EC3A  F012         	call	___awdiv	;wreg free
  3724  000484  0101               	movlb	1	; () banked
  3725  000486  5134               	movf	?___awdiv& (0+255),w,b
  3726  000488  0F30               	addlw	48
  3727  00048A  0100               	movlb	0	; () banked
  3728  00048C  6FC5               	movwf	(_RPM_Txt+2)& (0+255),b
  3729                           
  3730                           ; BSR set to: 0
  3731                           ;Main_Screen.c: 167: RPM_Txt[3] = rpm%10 + '0';
  3732  00048E  C04C  F03B         	movff	_rpm,___awmod@dividend
  3733  000492  C04D  F03C         	movff	_rpm+1,___awmod@dividend+1
  3734  000496  0E00               	movlw	0
  3735  000498  6E3E               	movwf	___awmod@divisor+1,c
  3736  00049A  0E0A               	movlw	10
  3737  00049C  6E3D               	movwf	___awmod@divisor,c
  3738  00049E  ECD9  F017         	call	___awmod	;wreg free
  3739  0004A2  503B               	movf	?___awmod,w,c
  3740  0004A4  0F30               	addlw	48
  3741  0004A6  0100               	movlb	0	; () banked
  3742  0004A8  6FC6               	movwf	(_RPM_Txt+3)& (0+255),b
  3743                           
  3744                           ; BSR set to: 0
  3745                           ;Main_Screen.c: 170: drawtext(1, 23, tempC , 0xFFE0 , 0x0000 , 2);
  3746  0004AA  0E17               	movlw	23
  3747  0004AC  6E39               	movwf	drawtext@y,c
  3748  0004AE  0ED9               	movlw	low _tempC
  3749  0004B0  6E3A               	movwf	drawtext@_text,c
  3750  0004B2  0E00               	movlw	high _tempC
  3751  0004B4  6E3B               	movwf	drawtext@_text+1,c
  3752  0004B6  0EFF               	movlw	255
  3753  0004B8  6E3D               	movwf	drawtext@color+1,c
  3754  0004BA  0EE0               	movlw	224
  3755  0004BC  6E3C               	movwf	drawtext@color,c
  3756  0004BE  0E00               	movlw	0
  3757  0004C0  6E3F               	movwf	drawtext@bg+1,c
  3758  0004C2  0E00               	movlw	0
  3759  0004C4  6E3E               	movwf	drawtext@bg,c
  3760  0004C6  0E02               	movlw	2
  3761  0004C8  6E40               	movwf	drawtext@size,c
  3762  0004CA  0E01               	movlw	1
  3763  0004CC  ECEA  F00C         	call	_drawtext
  3764                           
  3765                           ;Main_Screen.c: 171: drawtext(70, 23, tempF , 0xFFE0 , 0x0000 , 2);
  3766  0004D0  0E17               	movlw	23
  3767  0004D2  6E39               	movwf	drawtext@y,c
  3768  0004D4  0EDD               	movlw	low _tempF
  3769  0004D6  6E3A               	movwf	drawtext@_text,c
  3770  0004D8  0E00               	movlw	high _tempF
  3771  0004DA  6E3B               	movwf	drawtext@_text+1,c
  3772  0004DC  0EFF               	movlw	255
  3773  0004DE  6E3D               	movwf	drawtext@color+1,c
  3774  0004E0  0EE0               	movlw	224
  3775  0004E2  6E3C               	movwf	drawtext@color,c
  3776  0004E4  0E00               	movlw	0
  3777  0004E6  6E3F               	movwf	drawtext@bg+1,c
  3778  0004E8  0E00               	movlw	0
  3779  0004EA  6E3E               	movwf	drawtext@bg,c
  3780  0004EC  0E02               	movlw	2
  3781  0004EE  6E40               	movwf	drawtext@size,c
  3782  0004F0  0E46               	movlw	70
  3783  0004F2  ECEA  F00C         	call	_drawtext
  3784                           
  3785                           ;Main_Screen.c: 172: drawtext(15 , 52 , time , 0x07FF , 0x0000 , 2);
  3786  0004F6  0E34               	movlw	52
  3787  0004F8  6E39               	movwf	drawtext@y,c
  3788  0004FA  0EAF               	movlw	low _time
  3789  0004FC  6E3A               	movwf	drawtext@_text,c
  3790  0004FE  0E00               	movlw	high _time
  3791  000500  6E3B               	movwf	drawtext@_text+1,c
  3792  000502  0E07               	movlw	7
  3793  000504  6E3D               	movwf	drawtext@color+1,c
  3794  000506  683C               	setf	drawtext@color,c
  3795  000508  0E00               	movlw	0
  3796  00050A  6E3F               	movwf	drawtext@bg+1,c
  3797  00050C  0E00               	movlw	0
  3798  00050E  6E3E               	movwf	drawtext@bg,c
  3799  000510  0E02               	movlw	2
  3800  000512  6E40               	movwf	drawtext@size,c
  3801  000514  0E0F               	movlw	15
  3802  000516  ECEA  F00C         	call	_drawtext
  3803                           
  3804                           ;Main_Screen.c: 173: drawtext(15 , 82 , date , 0x07E0 , 0x0000 , 2);
  3805  00051A  0E52               	movlw	82
  3806  00051C  6E39               	movwf	drawtext@y,c
  3807  00051E  0E8B               	movlw	low _date
  3808  000520  6E3A               	movwf	drawtext@_text,c
  3809  000522  0E00               	movlw	high _date
  3810  000524  6E3B               	movwf	drawtext@_text+1,c
  3811  000526  0E07               	movlw	7
  3812  000528  6E3D               	movwf	drawtext@color+1,c
  3813  00052A  0EE0               	movlw	224
  3814  00052C  6E3C               	movwf	drawtext@color,c
  3815  00052E  0E00               	movlw	0
  3816  000530  6E3F               	movwf	drawtext@bg+1,c
  3817  000532  0E00               	movlw	0
  3818  000534  6E3E               	movwf	drawtext@bg,c
  3819  000536  0E02               	movlw	2
  3820  000538  6E40               	movwf	drawtext@size,c
  3821  00053A  0E0F               	movlw	15
  3822  00053C  ECEA  F00C         	call	_drawtext
  3823                           
  3824                           ;Main_Screen.c: 174: drawtext(10 , 110 , alarm_time , 0x07FF , 0x0000 , 1);
  3825  000540  0E6E               	movlw	110
  3826  000542  6E39               	movwf	drawtext@y,c
  3827  000544  0E82               	movlw	low _alarm_time
  3828  000546  6E3A               	movwf	drawtext@_text,c
  3829  000548  0E00               	movlw	high _alarm_time
  3830  00054A  6E3B               	movwf	drawtext@_text+1,c
  3831  00054C  0E07               	movlw	7
  3832  00054E  6E3D               	movwf	drawtext@color+1,c
  3833  000550  683C               	setf	drawtext@color,c
  3834  000552  0E00               	movlw	0
  3835  000554  6E3F               	movwf	drawtext@bg+1,c
  3836  000556  0E00               	movlw	0
  3837  000558  6E3E               	movwf	drawtext@bg,c
  3838  00055A  0E01               	movlw	1
  3839  00055C  6E40               	movwf	drawtext@size,c
  3840  00055E  0E0A               	movlw	10
  3841  000560  ECEA  F00C         	call	_drawtext
  3842                           
  3843                           ;Main_Screen.c: 175: drawtext(95 , 110 , Alarm_SW_Txt , 0x07FF , 0x0000 , 1);
  3844  000564  0E6E               	movlw	110
  3845  000566  6E39               	movwf	drawtext@y,c
  3846  000568  0ECD               	movlw	low _Alarm_SW_Txt
  3847  00056A  6E3A               	movwf	drawtext@_text,c
  3848  00056C  0E00               	movlw	high _Alarm_SW_Txt
  3849  00056E  6E3B               	movwf	drawtext@_text+1,c
  3850  000570  0E07               	movlw	7
  3851  000572  6E3D               	movwf	drawtext@color+1,c
  3852  000574  683C               	setf	drawtext@color,c
  3853  000576  0E00               	movlw	0
  3854  000578  6E3F               	movwf	drawtext@bg+1,c
  3855  00057A  0E00               	movlw	0
  3856  00057C  6E3E               	movwf	drawtext@bg,c
  3857  00057E  0E01               	movlw	1
  3858  000580  6E40               	movwf	drawtext@size,c
  3859  000582  0E5F               	movlw	95
  3860  000584  ECEA  F00C         	call	_drawtext
  3861                           
  3862                           ;Main_Screen.c: 176: drawtext(35, 130 ,Heater_Set_Temp_Txt, 0xF800, 0x0000, 1);
  3863  000588  0E82               	movlw	130
  3864  00058A  6E39               	movwf	drawtext@y,c
  3865  00058C  0EBE               	movlw	low _Heater_Set_Temp_Txt
  3866  00058E  6E3A               	movwf	drawtext@_text,c
  3867  000590  0E00               	movlw	high _Heater_Set_Temp_Txt
  3868  000592  6E3B               	movwf	drawtext@_text+1,c
  3869  000594  0EF8               	movlw	248
  3870  000596  6E3D               	movwf	drawtext@color+1,c
  3871  000598  0E00               	movlw	0
  3872  00059A  6E3C               	movwf	drawtext@color,c
  3873  00059C  0E00               	movlw	0
  3874  00059E  6E3F               	movwf	drawtext@bg+1,c
  3875  0005A0  0E00               	movlw	0
  3876  0005A2  6E3E               	movwf	drawtext@bg,c
  3877  0005A4  0E01               	movlw	1
  3878  0005A6  6E40               	movwf	drawtext@size,c
  3879  0005A8  0E23               	movlw	35
  3880  0005AA  ECEA  F00C         	call	_drawtext
  3881                           
  3882                           ;Main_Screen.c: 177: drawtext(95, 130, Heater_SW_Txt, 0xF800 , 0x0000 , 1);
  3883  0005AE  0E82               	movlw	130
  3884  0005B0  6E39               	movwf	drawtext@y,c
  3885  0005B2  0ED5               	movlw	low _Heater_SW_Txt
  3886  0005B4  6E3A               	movwf	drawtext@_text,c
  3887  0005B6  0E00               	movlw	high _Heater_SW_Txt
  3888  0005B8  6E3B               	movwf	drawtext@_text+1,c
  3889  0005BA  0EF8               	movlw	248
  3890  0005BC  6E3D               	movwf	drawtext@color+1,c
  3891  0005BE  0E00               	movlw	0
  3892  0005C0  6E3C               	movwf	drawtext@color,c
  3893  0005C2  0E00               	movlw	0
  3894  0005C4  6E3F               	movwf	drawtext@bg+1,c
  3895  0005C6  0E00               	movlw	0
  3896  0005C8  6E3E               	movwf	drawtext@bg,c
  3897  0005CA  0E01               	movlw	1
  3898  0005CC  6E40               	movwf	drawtext@size,c
  3899  0005CE  0E5F               	movlw	95
  3900  0005D0  ECEA  F00C         	call	_drawtext
  3901                           
  3902                           ;Main_Screen.c: 178: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  3903  0005D4  0E96               	movlw	150
  3904  0005D6  6E39               	movwf	drawtext@y,c
  3905  0005D8  0ED1               	movlw	low _DC_Txt
  3906  0005DA  6E3A               	movwf	drawtext@_text,c
  3907  0005DC  0E00               	movlw	high _DC_Txt
  3908  0005DE  6E3B               	movwf	drawtext@_text+1,c
  3909  0005E0  0E07               	movlw	7
  3910  0005E2  6E3D               	movwf	drawtext@color+1,c
  3911  0005E4  0EE0               	movlw	224
  3912  0005E6  6E3C               	movwf	drawtext@color,c
  3913  0005E8  0E00               	movlw	0
  3914  0005EA  6E3F               	movwf	drawtext@bg+1,c
  3915  0005EC  0E00               	movlw	0
  3916  0005EE  6E3E               	movwf	drawtext@bg,c
  3917  0005F0  0E01               	movlw	1
  3918  0005F2  6E40               	movwf	drawtext@size,c
  3919  0005F4  0E0A               	movlw	10
  3920  0005F6  ECEA  F00C         	call	_drawtext
  3921                           
  3922                           ;Main_Screen.c: 179: drawtext(35, 150, RTC_ALARM_Txt, 0x07E0, 0x0000, 1);
  3923  0005FA  0E96               	movlw	150
  3924  0005FC  6E39               	movwf	drawtext@y,c
  3925  0005FE  0EE1               	movlw	low _RTC_ALARM_Txt
  3926  000600  6E3A               	movwf	drawtext@_text,c
  3927  000602  0E00               	movlw	high _RTC_ALARM_Txt
  3928  000604  6E3B               	movwf	drawtext@_text+1,c
  3929  000606  0E07               	movlw	7
  3930  000608  6E3D               	movwf	drawtext@color+1,c
  3931  00060A  0EE0               	movlw	224
  3932  00060C  6E3C               	movwf	drawtext@color,c
  3933  00060E  0E00               	movlw	0
  3934  000610  6E3F               	movwf	drawtext@bg+1,c
  3935  000612  0E00               	movlw	0
  3936  000614  6E3E               	movwf	drawtext@bg,c
  3937  000616  0E01               	movlw	1
  3938  000618  6E40               	movwf	drawtext@size,c
  3939  00061A  0E23               	movlw	35
  3940  00061C  ECEA  F00C         	call	_drawtext
  3941                           
  3942                           ;Main_Screen.c: 180: drawtext(50, 150, Volt_Txt, 0x07E0, 0x0000, 1);
  3943  000620  0E96               	movlw	150
  3944  000622  6E39               	movwf	drawtext@y,c
  3945  000624  0EB8               	movlw	low _Volt_Txt
  3946  000626  6E3A               	movwf	drawtext@_text,c
  3947  000628  0E00               	movlw	high _Volt_Txt
  3948  00062A  6E3B               	movwf	drawtext@_text+1,c
  3949  00062C  0E07               	movlw	7
  3950  00062E  6E3D               	movwf	drawtext@color+1,c
  3951  000630  0EE0               	movlw	224
  3952  000632  6E3C               	movwf	drawtext@color,c
  3953  000634  0E00               	movlw	0
  3954  000636  6E3F               	movwf	drawtext@bg+1,c
  3955  000638  0E00               	movlw	0
  3956  00063A  6E3E               	movwf	drawtext@bg,c
  3957  00063C  0E01               	movlw	1
  3958  00063E  6E40               	movwf	drawtext@size,c
  3959  000640  0E32               	movlw	50
  3960  000642  ECEA  F00C         	call	_drawtext
  3961                           
  3962                           ;Main_Screen.c: 181: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  3963  000646  0E96               	movlw	150
  3964  000648  6E39               	movwf	drawtext@y,c
  3965  00064A  0EC3               	movlw	low _RPM_Txt
  3966  00064C  6E3A               	movwf	drawtext@_text,c
  3967  00064E  0E00               	movlw	high _RPM_Txt
  3968  000650  6E3B               	movwf	drawtext@_text+1,c
  3969  000652  0E07               	movlw	7
  3970  000654  6E3D               	movwf	drawtext@color+1,c
  3971  000656  0EE0               	movlw	224
  3972  000658  6E3C               	movwf	drawtext@color,c
  3973  00065A  0E00               	movlw	0
  3974  00065C  6E3F               	movwf	drawtext@bg+1,c
  3975  00065E  0E00               	movlw	0
  3976  000660  6E3E               	movwf	drawtext@bg,c
  3977  000662  0E01               	movlw	1
  3978  000664  6E40               	movwf	drawtext@size,c
  3979  000666  0E5D               	movlw	93
  3980  000668  ECEA  F00C         	call	_drawtext
  3981  00066C  0012               	return		;funcret
  3982  00066E                     __end_of_Update_Screen:
  3983                           	opt stack 0
  3984                           tblptru	equ	0xFF8
  3985                           tblptrh	equ	0xFF7
  3986                           tblptrl	equ	0xFF6
  3987                           tablat	equ	0xFF5
  3988                           postinc0	equ	0xFEE
  3989                           wreg	equ	0xFE8
  3990                           postdec1	equ	0xFE5
  3991                           fsr1l	equ	0xFE1
  3992                           status	equ	0xFD8
  3993                           
  3994 ;; *************** function _Toggle_Heater *****************
  3995 ;; Defined at:
  3996 ;;		line 53 in file "Fan_Support.c"
  3997 ;; Parameters:    Size  Location     Type
  3998 ;;		None
  3999 ;; Auto vars:     Size  Location     Type
  4000 ;;		None
  4001 ;; Return value:  Size  Location     Type
  4002 ;;		None               void
  4003 ;; Registers used:
  4004 ;;		wreg, status,2
  4005 ;; Tracked objects:
  4006 ;;		On entry : 0/0
  4007 ;;		On exit  : 0/0
  4008 ;;		Unchanged: 0/0
  4009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4013 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4014 ;;Total ram usage:        0 bytes
  4015 ;; Hardware stack levels used:    1
  4016 ;; Hardware stack levels required when called:    3
  4017 ;; This function calls:
  4018 ;;		Nothing
  4019 ;; This function is called by:
  4020 ;;		_main
  4021 ;; This function uses a non-reentrant model
  4022 ;;
  4023                           
  4024                           	psect	text6
  4025  003D6C                     __ptext6:
  4026                           	opt stack 0
  4027  003D6C                     _Toggle_Heater:
  4028                           	opt stack 27
  4029                           
  4030                           ;Fan_Support.c: 56: HEATER= (!HEATER);
  4031                           
  4032                           ;incstack = 0
  4033  003D6C  5050               	movf	_HEATER,w,c
  4034  003D6E  A4D8               	btfss	status,2,c
  4035  003D70  D002               	goto	u5030
  4036  003D72  0E01               	movlw	1
  4037  003D74  D001               	goto	u5040
  4038  003D76                     u5030:
  4039  003D76  0E00               	movlw	0
  4040  003D78                     u5040:
  4041  003D78  6E50               	movwf	_HEATER,c
  4042  003D7A  0012               	return		;funcret
  4043  003D7C                     __end_of_Toggle_Heater:
  4044                           	opt stack 0
  4045                           tblptru	equ	0xFF8
  4046                           tblptrh	equ	0xFF7
  4047                           tblptrl	equ	0xFF6
  4048                           tablat	equ	0xFF5
  4049                           postinc0	equ	0xFEE
  4050                           wreg	equ	0xFE8
  4051                           postdec1	equ	0xFE5
  4052                           fsr1l	equ	0xFE1
  4053                           status	equ	0xFD8
  4054                           
  4055 ;; *************** function _Test_Alarm *****************
  4056 ;; Defined at:
  4057 ;;		line 201 in file "LabFinal.c"
  4058 ;; Parameters:    Size  Location     Type
  4059 ;;		None
  4060 ;; Auto vars:     Size  Location     Type
  4061 ;;		None
  4062 ;; Return value:  Size  Location     Type
  4063 ;;		None               void
  4064 ;; Registers used:
  4065 ;;		wreg, status,2, status,0, cstack
  4066 ;; Tracked objects:
  4067 ;;		On entry : 0/0
  4068 ;;		On exit  : 0/0
  4069 ;;		Unchanged: 0/0
  4070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4074 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4075 ;;Total ram usage:        0 bytes
  4076 ;; Hardware stack levels used:    1
  4077 ;; Hardware stack levels required when called:    9
  4078 ;; This function calls:
  4079 ;;		_Activate_Buzzer_4KHz
  4080 ;;		_DS3231_Turn_Off_Alarm
  4081 ;;		_DS3231_Turn_On_Alarm
  4082 ;;		_Deactivate_Buzzer
  4083 ;;		_Set_RGB_Color
  4084 ;;		___ftge
  4085 ;;		_do_update_pwm
  4086 ;; This function is called by:
  4087 ;;		_main
  4088 ;; This function uses a non-reentrant model
  4089 ;;
  4090                           
  4091                           	psect	text7
  4092  001CFA                     __ptext7:
  4093                           	opt stack 0
  4094  001CFA                     _Test_Alarm:
  4095                           	opt stack 21
  4096                           
  4097                           ;LabFinal.c: 203: if (alarm_mode == 0 & ALARMEN == 1)
  4098                           
  4099                           ;incstack = 0
  4100  001CFA  0100               	movlb	0	; () banked
  4101  001CFC  51EC               	movf	_alarm_mode& (0+255),w,b
  4102  001CFE  0100               	movlb	0	; () banked
  4103  001D00  11ED               	iorwf	(_alarm_mode+1)& (0+255),w,b
  4104  001D02  A4D8               	btfss	status,2,c
  4105  001D04  D00B               	goto	l9591
  4106                           
  4107                           ; BSR set to: 0
  4108  001D06  0444               	decf	_ALARMEN,w,c
  4109  001D08  1045               	iorwf	_ALARMEN+1,w,c
  4110  001D0A  A4D8               	btfss	status,2,c
  4111  001D0C  D007               	goto	l9591
  4112                           
  4113                           ; BSR set to: 0
  4114                           ;LabFinal.c: 204: {
  4115                           ;LabFinal.c: 205: DS3231_Turn_On_Alarm();
  4116  001D0E  EC32  F01A         	call	_DS3231_Turn_On_Alarm	;wreg free
  4117                           
  4118                           ;LabFinal.c: 206: alarm_mode = 1;
  4119  001D12  0E00               	movlw	0
  4120  001D14  0100               	movlb	0	; () banked
  4121  001D16  6FED               	movwf	(_alarm_mode+1)& (0+255),b
  4122  001D18  0E01               	movlw	1
  4123  001D1A  D070               	goto	L4
  4124  001D1C                     l9591:
  4125                           
  4126                           ; BSR set to: 0
  4127                           ;LabFinal.c: 208: else if (alarm_mode == 1 & ALARMEN == 0)
  4128  001D1C  0100               	movlb	0	; () banked
  4129  001D1E  05EC               	decf	_alarm_mode& (0+255),w,b
  4130  001D20  0100               	movlb	0	; () banked
  4131  001D22  11ED               	iorwf	(_alarm_mode+1)& (0+255),w,b
  4132  001D24  A4D8               	btfss	status,2,c
  4133  001D26  D011               	goto	l9603
  4134                           
  4135                           ; BSR set to: 0
  4136  001D28  5044               	movf	_ALARMEN,w,c
  4137  001D2A  1045               	iorwf	_ALARMEN+1,w,c
  4138  001D2C  A4D8               	btfss	status,2,c
  4139  001D2E  D00D               	goto	l9603
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;LabFinal.c: 209: {
  4143                           ;LabFinal.c: 210: DS3231_Turn_Off_Alarm();
  4144  001D30  EC5B  F01A         	call	_DS3231_Turn_Off_Alarm	;wreg free
  4145                           
  4146                           ;LabFinal.c: 211: alarm_mode = 0;
  4147  001D34  0E00               	movlw	0
  4148  001D36  0100               	movlb	0	; () banked
  4149  001D38  6FED               	movwf	(_alarm_mode+1)& (0+255),b
  4150  001D3A  0E00               	movlw	0
  4151  001D3C  6FEC               	movwf	_alarm_mode& (0+255),b
  4152                           
  4153                           ; BSR set to: 0
  4154                           ;LabFinal.c: 212: Set_RGB_Color(0);
  4155  001D3E  0E00               	movlw	0
  4156  001D40  EC26  F01F         	call	_Set_RGB_Color
  4157                           
  4158                           ;LabFinal.c: 213: Deactivate_Buzzer();
  4159  001D44  EC2A  F01F         	call	_Deactivate_Buzzer	;wreg free
  4160                           
  4161                           ;LabFinal.c: 215: }
  4162  001D48  D05B               	goto	l249
  4163  001D4A                     l9603:
  4164                           
  4165                           ;LabFinal.c: 216: else if (alarm_mode == 1 & ALARMEN == 1)
  4166  001D4A  0100               	movlb	0	; () banked
  4167  001D4C  05EC               	decf	_alarm_mode& (0+255),w,b
  4168  001D4E  0100               	movlb	0	; () banked
  4169  001D50  11ED               	iorwf	(_alarm_mode+1)& (0+255),w,b
  4170  001D52  A4D8               	btfss	status,2,c
  4171  001D54  D055               	goto	l249
  4172                           
  4173                           ; BSR set to: 0
  4174  001D56  0444               	decf	_ALARMEN,w,c
  4175  001D58  1045               	iorwf	_ALARMEN+1,w,c
  4176  001D5A  A4D8               	btfss	status,2,c
  4177  001D5C  D051               	goto	l249
  4178                           
  4179                           ; BSR set to: 0
  4180                           ;LabFinal.c: 217: {
  4181                           ;LabFinal.c: 218: if(PORTBbits.RB2 == 0)
  4182  001D5E  B481               	btfsc	3969,2,c	;volatile
  4183  001D60  D008               	goto	l9613
  4184                           
  4185                           ; BSR set to: 0
  4186                           ;LabFinal.c: 219: {
  4187                           ;LabFinal.c: 220: MATCHED = 1;
  4188  001D62  0E00               	movlw	0
  4189  001D64  0100               	movlb	0	; () banked
  4190  001D66  6FEB               	movwf	(_MATCHED+1)& (0+255),b
  4191  001D68  0E01               	movlw	1
  4192  001D6A  6FEA               	movwf	_MATCHED& (0+255),b
  4193                           
  4194                           ; BSR set to: 0
  4195                           ;LabFinal.c: 221: Activate_Buzzer_4KHz();
  4196  001D6C  EC77  F01E         	call	_Activate_Buzzer_4KHz	;wreg free
  4197  001D70  D000               	goto	l9613
  4198  001D72                     l9613:
  4199                           
  4200                           ;LabFinal.c: 223: }
  4201                           ;LabFinal.c: 224: if (MATCHED == 1)
  4202  001D72  0100               	movlb	0	; () banked
  4203  001D74  05EA               	decf	_MATCHED& (0+255),w,b
  4204  001D76  0100               	movlb	0	; () banked
  4205  001D78  11EB               	iorwf	(_MATCHED+1)& (0+255),w,b
  4206  001D7A  A4D8               	btfss	status,2,c
  4207  001D7C  D041               	goto	l249
  4208                           
  4209                           ; BSR set to: 0
  4210                           ;LabFinal.c: 225: {
  4211                           ;LabFinal.c: 226: Set_RGB_Color(color++);
  4212  001D7E  0100               	movlb	0	; () banked
  4213  001D80  51EE               	movf	_color& (0+255),w,b
  4214  001D82  EC26  F01F         	call	_Set_RGB_Color
  4215  001D86  0100               	movlb	0	; () banked
  4216  001D88  4BEE               	infsnz	_color& (0+255),f,b
  4217  001D8A  2BEF               	incf	(_color+1)& (0+255),f,b
  4218                           
  4219                           ; BSR set to: 0
  4220                           ;LabFinal.c: 227: if (color >7) color = 0;
  4221  001D8C  0100               	movlb	0	; () banked
  4222  001D8E  BFEF               	btfsc	(_color+1)& (0+255),7,b
  4223  001D90  D00E               	goto	l9623
  4224  001D92  0100               	movlb	0	; () banked
  4225  001D94  51EF               	movf	(_color+1)& (0+255),w,b
  4226  001D96  E105               	bnz	u7080
  4227  001D98  0E08               	movlw	8
  4228  001D9A  0100               	movlb	0	; () banked
  4229  001D9C  5DEE               	subwf	_color& (0+255),w,b
  4230  001D9E  A0D8               	btfss	status,0,c
  4231  001DA0  D006               	goto	l9623
  4232  001DA2                     u7080:
  4233                           
  4234                           ; BSR set to: 0
  4235  001DA2  0E00               	movlw	0
  4236  001DA4  0100               	movlb	0	; () banked
  4237  001DA6  6FEF               	movwf	(_color+1)& (0+255),b
  4238  001DA8  0E00               	movlw	0
  4239  001DAA  6FEE               	movwf	_color& (0+255),b
  4240  001DAC  D000               	goto	l9623
  4241  001DAE                     l9623:
  4242                           
  4243                           ; BSR set to: 0
  4244                           ;LabFinal.c: 228: if (volt > 2.5)
  4245  001DAE  0E00               	movlw	0
  4246  001DB0  6E11               	movwf	___ftge@ff1,c
  4247  001DB2  0E20               	movlw	32
  4248  001DB4  6E12               	movwf	___ftge@ff1+1,c
  4249  001DB6  0E40               	movlw	64
  4250  001DB8  6E13               	movwf	___ftge@ff1+2,c
  4251  001DBA  C0E7  F014         	movff	_volt,___ftge@ff2
  4252  001DBE  C0E8  F015         	movff	_volt+1,___ftge@ff2+1
  4253  001DC2  C0E9  F016         	movff	_volt+2,___ftge@ff2+2
  4254  001DC6  EC95  F015         	call	___ftge	;wreg free
  4255  001DCA  B0D8               	btfsc	status,0,c
  4256  001DCC  D019               	goto	l249
  4257                           
  4258                           ;LabFinal.c: 229: {
  4259                           ;LabFinal.c: 230: MATCHED = 0;
  4260  001DCE  0E00               	movlw	0
  4261  001DD0  0100               	movlb	0	; () banked
  4262  001DD2  6FEB               	movwf	(_MATCHED+1)& (0+255),b
  4263  001DD4  0E00               	movlw	0
  4264  001DD6  6FEA               	movwf	_MATCHED& (0+255),b
  4265                           
  4266                           ;LabFinal.c: 231: color = 0;
  4267  001DD8  0E00               	movlw	0
  4268  001DDA  0100               	movlb	0	; () banked
  4269  001DDC  6FEF               	movwf	(_color+1)& (0+255),b
  4270  001DDE  0E00               	movlw	0
  4271  001DE0  6FEE               	movwf	_color& (0+255),b
  4272                           
  4273                           ; BSR set to: 0
  4274                           ;LabFinal.c: 232: Set_RGB_Color(color);
  4275  001DE2  0100               	movlb	0	; () banked
  4276  001DE4  51EE               	movf	_color& (0+255),w,b
  4277  001DE6  EC26  F01F         	call	_Set_RGB_Color
  4278                           
  4279                           ;LabFinal.c: 233: Deactivate_Buzzer();
  4280  001DEA  EC2A  F01F         	call	_Deactivate_Buzzer	;wreg free
  4281                           
  4282                           ;LabFinal.c: 234: do_update_pwm(duty_cycle);
  4283  001DEE  505D               	movf	_duty_cycle,w,c
  4284  001DF0  EC8B  F014         	call	_do_update_pwm
  4285                           
  4286                           ;LabFinal.c: 235: alarm_mode = 0;
  4287  001DF4  0E00               	movlw	0
  4288  001DF6  0100               	movlb	0	; () banked
  4289  001DF8  6FED               	movwf	(_alarm_mode+1)& (0+255),b
  4290  001DFA  0E00               	movlw	0
  4291  001DFC                     L4:
  4292  001DFC  6FEC               	movwf	_alarm_mode& (0+255),b
  4293                           
  4294                           ; BSR set to: 0
  4295                           
  4296                           ; BSR set to: 0
  4297                           
  4298                           ; BSR set to: 0
  4299                           
  4300                           ; BSR set to: 0
  4301  001DFE  D000               	goto	l249
  4302  001E00                     l249:
  4303  001E00  0012               	return		;funcret
  4304  001E02                     __end_of_Test_Alarm:
  4305                           	opt stack 0
  4306                           tblptru	equ	0xFF8
  4307                           tblptrh	equ	0xFF7
  4308                           tblptrl	equ	0xFF6
  4309                           tablat	equ	0xFF5
  4310                           postinc0	equ	0xFEE
  4311                           wreg	equ	0xFE8
  4312                           postdec1	equ	0xFE5
  4313                           fsr1l	equ	0xFE1
  4314                           status	equ	0xFD8
  4315                           
  4316 ;; *************** function ___ftge *****************
  4317 ;; Defined at:
  4318 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  4319 ;; Parameters:    Size  Location     Type
  4320 ;;  ff1             3   16[COMRAM] float 
  4321 ;;  ff2             3   19[COMRAM] float 
  4322 ;; Auto vars:     Size  Location     Type
  4323 ;;		None
  4324 ;; Return value:  Size  Location     Type
  4325 ;;		None               void
  4326 ;; Registers used:
  4327 ;;		wreg, status,2, status,0
  4328 ;; Tracked objects:
  4329 ;;		On entry : 0/0
  4330 ;;		On exit  : 0/0
  4331 ;;		Unchanged: 0/0
  4332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4333 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4335 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4336 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4337 ;;Total ram usage:        9 bytes
  4338 ;; Hardware stack levels used:    1
  4339 ;; Hardware stack levels required when called:    3
  4340 ;; This function calls:
  4341 ;;		Nothing
  4342 ;; This function is called by:
  4343 ;;		_Test_Alarm
  4344 ;; This function uses a non-reentrant model
  4345 ;;
  4346                           
  4347                           	psect	text8
  4348  002B2A                     __ptext8:
  4349                           	opt stack 0
  4350  002B2A                     ___ftge:
  4351                           	opt stack 26
  4352                           
  4353                           ;incstack = 0
  4354  002B2A  AE13               	btfss	___ftge@ff1+2,7,c
  4355  002B2C  D017               	goto	l6809
  4356  002B2E  C011  F017         	movff	___ftge@ff1,??___ftge
  4357  002B32  C012  F018         	movff	___ftge@ff1+1,??___ftge+1
  4358  002B36  C013  F019         	movff	___ftge@ff1+2,??___ftge+2
  4359  002B3A  1E17               	comf	??___ftge,f,c
  4360  002B3C  1E18               	comf	??___ftge+1,f,c
  4361  002B3E  1E19               	comf	??___ftge+2,f,c
  4362  002B40  2A17               	incf	??___ftge,f,c
  4363  002B42  0E00               	movlw	0
  4364  002B44  2218               	addwfc	??___ftge+1,f,c
  4365  002B46  2219               	addwfc	??___ftge+2,f,c
  4366  002B48  0E00               	movlw	0
  4367  002B4A  2417               	addwf	??___ftge,w,c
  4368  002B4C  6E11               	movwf	___ftge@ff1,c
  4369  002B4E  0E00               	movlw	0
  4370  002B50  2018               	addwfc	??___ftge+1,w,c
  4371  002B52  6E12               	movwf	___ftge@ff1+1,c
  4372  002B54  0E80               	movlw	128
  4373  002B56  2019               	addwfc	??___ftge+2,w,c
  4374  002B58  6E13               	movwf	___ftge@ff1+2,c
  4375  002B5A  D000               	goto	l6809
  4376  002B5C                     l6809:
  4377  002B5C  AE16               	btfss	___ftge@ff2+2,7,c
  4378  002B5E  D017               	goto	l6813
  4379  002B60  C014  F017         	movff	___ftge@ff2,??___ftge
  4380  002B64  C015  F018         	movff	___ftge@ff2+1,??___ftge+1
  4381  002B68  C016  F019         	movff	___ftge@ff2+2,??___ftge+2
  4382  002B6C  1E17               	comf	??___ftge,f,c
  4383  002B6E  1E18               	comf	??___ftge+1,f,c
  4384  002B70  1E19               	comf	??___ftge+2,f,c
  4385  002B72  2A17               	incf	??___ftge,f,c
  4386  002B74  0E00               	movlw	0
  4387  002B76  2218               	addwfc	??___ftge+1,f,c
  4388  002B78  2219               	addwfc	??___ftge+2,f,c
  4389  002B7A  0E00               	movlw	0
  4390  002B7C  2417               	addwf	??___ftge,w,c
  4391  002B7E  6E14               	movwf	___ftge@ff2,c
  4392  002B80  0E00               	movlw	0
  4393  002B82  2018               	addwfc	??___ftge+1,w,c
  4394  002B84  6E15               	movwf	___ftge@ff2+1,c
  4395  002B86  0E80               	movlw	128
  4396  002B88  2019               	addwfc	??___ftge+2,w,c
  4397  002B8A  6E16               	movwf	___ftge@ff2+2,c
  4398  002B8C  D000               	goto	l6813
  4399  002B8E                     l6813:
  4400  002B8E  0E00               	movlw	0
  4401  002B90  1A11               	xorwf	___ftge@ff1,f,c
  4402  002B92  0E00               	movlw	0
  4403  002B94  1A12               	xorwf	___ftge@ff1+1,f,c
  4404  002B96  0E80               	movlw	128
  4405  002B98  1A13               	xorwf	___ftge@ff1+2,f,c
  4406  002B9A  0E00               	movlw	0
  4407  002B9C  1A14               	xorwf	___ftge@ff2,f,c
  4408  002B9E  0E00               	movlw	0
  4409  002BA0  1A15               	xorwf	___ftge@ff2+1,f,c
  4410  002BA2  0E80               	movlw	128
  4411  002BA4  1A16               	xorwf	___ftge@ff2+2,f,c
  4412  002BA6  5014               	movf	___ftge@ff2,w,c
  4413  002BA8  5C11               	subwf	___ftge@ff1,w,c
  4414  002BAA  5015               	movf	___ftge@ff2+1,w,c
  4415  002BAC  5812               	subwfb	___ftge@ff1+1,w,c
  4416  002BAE  5016               	movf	___ftge@ff2+2,w,c
  4417  002BB0  5813               	subwfb	___ftge@ff1+2,w,c
  4418  002BB2  B0D8               	btfsc	status,0,c
  4419  002BB4  D002               	goto	l6819
  4420  002BB6  90D8               	bcf	status,0,c
  4421  002BB8  D002               	goto	l1878
  4422  002BBA                     l6819:
  4423  002BBA  80D8               	bsf	status,0,c
  4424  002BBC  D000               	goto	l1878
  4425  002BBE                     l1878:
  4426  002BBE  0012               	return		;funcret
  4427  002BC0                     __end_of___ftge:
  4428                           	opt stack 0
  4429                           tblptru	equ	0xFF8
  4430                           tblptrh	equ	0xFF7
  4431                           tblptrl	equ	0xFF6
  4432                           tablat	equ	0xFF5
  4433                           postinc0	equ	0xFEE
  4434                           wreg	equ	0xFE8
  4435                           postdec1	equ	0xFE5
  4436                           fsr1l	equ	0xFE1
  4437                           status	equ	0xFD8
  4438                           
  4439 ;; *************** function _Set_RGB_Color *****************
  4440 ;; Defined at:
  4441 ;;		line 143 in file "utils.c"
  4442 ;; Parameters:    Size  Location     Type
  4443 ;;  color           1    wreg     unsigned char 
  4444 ;; Auto vars:     Size  Location     Type
  4445 ;;  color           1   16[COMRAM] unsigned char 
  4446 ;; Return value:  Size  Location     Type
  4447 ;;		None               void
  4448 ;; Registers used:
  4449 ;;		wreg
  4450 ;; Tracked objects:
  4451 ;;		On entry : 0/0
  4452 ;;		On exit  : 0/0
  4453 ;;		Unchanged: 0/0
  4454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4456 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4458 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4459 ;;Total ram usage:        1 bytes
  4460 ;; Hardware stack levels used:    1
  4461 ;; Hardware stack levels required when called:    3
  4462 ;; This function calls:
  4463 ;;		Nothing
  4464 ;; This function is called by:
  4465 ;;		_Test_Alarm
  4466 ;; This function uses a non-reentrant model
  4467 ;;
  4468                           
  4469                           	psect	text9
  4470  003E4C                     __ptext9:
  4471                           	opt stack 0
  4472  003E4C                     _Set_RGB_Color:
  4473                           	opt stack 26
  4474                           
  4475                           ;incstack = 0
  4476                           ;Set_RGB_Color@color stored from wreg
  4477  003E4C  6E11               	movwf	Set_RGB_Color@color,c
  4478                           
  4479                           ;utils.c: 145: PORTE = color;
  4480  003E4E  C011  FF84         	movff	Set_RGB_Color@color,3972	;volatile
  4481  003E52  0012               	return		;funcret
  4482  003E54                     __end_of_Set_RGB_Color:
  4483                           	opt stack 0
  4484                           tblptru	equ	0xFF8
  4485                           tblptrh	equ	0xFF7
  4486                           tblptrl	equ	0xFF6
  4487                           tablat	equ	0xFF5
  4488                           postinc0	equ	0xFEE
  4489                           wreg	equ	0xFE8
  4490                           postdec1	equ	0xFE5
  4491                           fsr1l	equ	0xFE1
  4492                           status	equ	0xFD8
  4493                           
  4494 ;; *************** function _DS3231_Turn_On_Alarm *****************
  4495 ;; Defined at:
  4496 ;;		line 210 in file "I2C_Support.c"
  4497 ;; Parameters:    Size  Location     Type
  4498 ;;		None
  4499 ;; Auto vars:     Size  Location     Type
  4500 ;;  Device          1   30[COMRAM] unsigned char 
  4501 ;;  control_F       1   29[COMRAM] unsigned char 
  4502 ;;  control_E       1   28[COMRAM] unsigned char 
  4503 ;;  Address_F       1   27[COMRAM] unsigned char 
  4504 ;;  Address_E       1   26[COMRAM] unsigned char 
  4505 ;; Return value:  Size  Location     Type
  4506 ;;		None               void
  4507 ;; Registers used:
  4508 ;;		wreg, status,2, status,0, cstack
  4509 ;; Tracked objects:
  4510 ;;		On entry : 0/0
  4511 ;;		On exit  : 0/0
  4512 ;;		Unchanged: 0/0
  4513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4515 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4517 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4518 ;;Total ram usage:        5 bytes
  4519 ;; Hardware stack levels used:    1
  4520 ;; Hardware stack levels required when called:    8
  4521 ;; This function calls:
  4522 ;;		_DS3231_Init
  4523 ;;		_I2C_Write_Address_Read_One_Byte
  4524 ;;		_I2C_Write_Address_Write_One_Byte
  4525 ;; This function is called by:
  4526 ;;		_Test_Alarm
  4527 ;; This function uses a non-reentrant model
  4528 ;;
  4529                           
  4530                           	psect	text10
  4531  003464                     __ptext10:
  4532                           	opt stack 0
  4533  003464                     _DS3231_Turn_On_Alarm:
  4534                           	opt stack 21
  4535                           
  4536                           ;I2C_Support.c: 212: char Device = 0x68;
  4537                           
  4538                           ;incstack = 0
  4539  003464  0E68               	movlw	104
  4540  003466  6E1F               	movwf	DS3231_Turn_On_Alarm@Device,c
  4541                           
  4542                           ;I2C_Support.c: 213: char Address_E = 0x0E;
  4543  003468  0E0E               	movlw	14
  4544  00346A  6E1B               	movwf	DS3231_Turn_On_Alarm@Address_E,c
  4545                           
  4546                           ;I2C_Support.c: 214: char Address_F = 0x0F;
  4547  00346C  0E0F               	movlw	15
  4548  00346E  6E1C               	movwf	DS3231_Turn_On_Alarm@Address_F,c
  4549                           
  4550                           ;I2C_Support.c: 215: char control_E;
  4551                           ;I2C_Support.c: 216: char control_F;
  4552                           ;I2C_Support.c: 218: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  4553  003470  C01B  F014         	movff	DS3231_Turn_On_Alarm@Address_E,I2C_Write_Address_Read_One_Byte@Address
  4554  003474  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  4555  003476  ECB3  F01C         	call	_I2C_Write_Address_Read_One_Byte
  4556  00347A  6E1D               	movwf	DS3231_Turn_On_Alarm@control_E,c
  4557                           
  4558                           ;I2C_Support.c: 219: control_E = control_E | 0x01;
  4559  00347C  501D               	movf	DS3231_Turn_On_Alarm@control_E,w,c
  4560  00347E  0901               	iorlw	1
  4561  003480  6E1D               	movwf	DS3231_Turn_On_Alarm@control_E,c
  4562                           
  4563                           ;I2C_Support.c: 220: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  4564  003482  C01B  F013         	movff	DS3231_Turn_On_Alarm@Address_E,I2C_Write_Address_Write_One_Byte@Address
  4565  003486  C01D  F014         	movff	DS3231_Turn_On_Alarm@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  4566  00348A  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  4567  00348C  EC84  F01D         	call	_I2C_Write_Address_Write_One_Byte
  4568                           
  4569                           ;I2C_Support.c: 222: control_F = I2C_Write_Address_Read_One_Byte(Device, Address_F);
  4570  003490  C01C  F014         	movff	DS3231_Turn_On_Alarm@Address_F,I2C_Write_Address_Read_One_Byte@Address
  4571  003494  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  4572  003496  ECB3  F01C         	call	_I2C_Write_Address_Read_One_Byte
  4573  00349A  6E1E               	movwf	DS3231_Turn_On_Alarm@control_F,c
  4574                           
  4575                           ;I2C_Support.c: 223: control_F = control_F & 0xFE;
  4576  00349C  501E               	movf	DS3231_Turn_On_Alarm@control_F,w,c
  4577  00349E  0BFE               	andlw	254
  4578  0034A0  6E1E               	movwf	DS3231_Turn_On_Alarm@control_F,c
  4579                           
  4580                           ;I2C_Support.c: 224: I2C_Write_Address_Write_One_Byte(Device, Address_F, control_F);
  4581  0034A2  C01C  F013         	movff	DS3231_Turn_On_Alarm@Address_F,I2C_Write_Address_Write_One_Byte@Address
  4582  0034A6  C01E  F014         	movff	DS3231_Turn_On_Alarm@control_F,I2C_Write_Address_Write_One_Byte@Data_Out
  4583  0034AA  501F               	movf	DS3231_Turn_On_Alarm@Device,w,c
  4584  0034AC  EC84  F01D         	call	_I2C_Write_Address_Write_One_Byte
  4585                           
  4586                           ;I2C_Support.c: 225: DS3231_Init();
  4587  0034B0  EC2F  F014         	call	_DS3231_Init	;wreg free
  4588  0034B4  0012               	return		;funcret
  4589  0034B6                     __end_of_DS3231_Turn_On_Alarm:
  4590                           	opt stack 0
  4591                           tblptru	equ	0xFF8
  4592                           tblptrh	equ	0xFF7
  4593                           tblptrl	equ	0xFF6
  4594                           tablat	equ	0xFF5
  4595                           postinc0	equ	0xFEE
  4596                           wreg	equ	0xFE8
  4597                           postdec1	equ	0xFE5
  4598                           fsr1l	equ	0xFE1
  4599                           status	equ	0xFD8
  4600                           
  4601 ;; *************** function _DS3231_Turn_Off_Alarm *****************
  4602 ;; Defined at:
  4603 ;;		line 193 in file "I2C_Support.c"
  4604 ;; Parameters:    Size  Location     Type
  4605 ;;		None
  4606 ;; Auto vars:     Size  Location     Type
  4607 ;;  Device          1   30[COMRAM] unsigned char 
  4608 ;;  control_F       1   29[COMRAM] unsigned char 
  4609 ;;  control_E       1   28[COMRAM] unsigned char 
  4610 ;;  Address_F       1   27[COMRAM] unsigned char 
  4611 ;;  Address_E       1   26[COMRAM] unsigned char 
  4612 ;; Return value:  Size  Location     Type
  4613 ;;		None               void
  4614 ;; Registers used:
  4615 ;;		wreg, status,2, status,0, cstack
  4616 ;; Tracked objects:
  4617 ;;		On entry : 0/0
  4618 ;;		On exit  : 0/0
  4619 ;;		Unchanged: 0/0
  4620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4622 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4624 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4625 ;;Total ram usage:        5 bytes
  4626 ;; Hardware stack levels used:    1
  4627 ;; Hardware stack levels required when called:    8
  4628 ;; This function calls:
  4629 ;;		_DS3231_Init
  4630 ;;		_I2C_Write_Address_Read_One_Byte
  4631 ;;		_I2C_Write_Address_Write_One_Byte
  4632 ;; This function is called by:
  4633 ;;		_main
  4634 ;;		_Test_Alarm
  4635 ;; This function uses a non-reentrant model
  4636 ;;
  4637                           
  4638                           	psect	text11
  4639  0034B6                     __ptext11:
  4640                           	opt stack 0
  4641  0034B6                     _DS3231_Turn_Off_Alarm:
  4642                           	opt stack 21
  4643                           
  4644                           ;I2C_Support.c: 195: char Device = 0x68;
  4645                           
  4646                           ;incstack = 0
  4647  0034B6  0E68               	movlw	104
  4648  0034B8  6E1F               	movwf	DS3231_Turn_Off_Alarm@Device,c
  4649                           
  4650                           ;I2C_Support.c: 196: char Address_E = 0x0E;
  4651  0034BA  0E0E               	movlw	14
  4652  0034BC  6E1B               	movwf	DS3231_Turn_Off_Alarm@Address_E,c
  4653                           
  4654                           ;I2C_Support.c: 197: char Address_F = 0x0F;
  4655  0034BE  0E0F               	movlw	15
  4656  0034C0  6E1C               	movwf	DS3231_Turn_Off_Alarm@Address_F,c
  4657                           
  4658                           ;I2C_Support.c: 198: char control_E;
  4659                           ;I2C_Support.c: 199: char control_F;
  4660                           ;I2C_Support.c: 201: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  4661  0034C2  C01B  F014         	movff	DS3231_Turn_Off_Alarm@Address_E,I2C_Write_Address_Read_One_Byte@Address
  4662  0034C6  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  4663  0034C8  ECB3  F01C         	call	_I2C_Write_Address_Read_One_Byte
  4664  0034CC  6E1D               	movwf	DS3231_Turn_Off_Alarm@control_E,c
  4665                           
  4666                           ;I2C_Support.c: 202: control_E = control_E & 0xFE;
  4667  0034CE  501D               	movf	DS3231_Turn_Off_Alarm@control_E,w,c
  4668  0034D0  0BFE               	andlw	254
  4669  0034D2  6E1D               	movwf	DS3231_Turn_Off_Alarm@control_E,c
  4670                           
  4671                           ;I2C_Support.c: 203: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  4672  0034D4  C01B  F013         	movff	DS3231_Turn_Off_Alarm@Address_E,I2C_Write_Address_Write_One_Byte@Address
  4673  0034D8  C01D  F014         	movff	DS3231_Turn_Off_Alarm@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  4674  0034DC  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  4675  0034DE  EC84  F01D         	call	_I2C_Write_Address_Write_One_Byte
  4676                           
  4677                           ;I2C_Support.c: 204: control_F = I2C_Write_Address_Read_One_Byte(Device, Address_F);
  4678  0034E2  C01C  F014         	movff	DS3231_Turn_Off_Alarm@Address_F,I2C_Write_Address_Read_One_Byte@Address
  4679  0034E6  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  4680  0034E8  ECB3  F01C         	call	_I2C_Write_Address_Read_One_Byte
  4681  0034EC  6E1E               	movwf	DS3231_Turn_Off_Alarm@control_F,c
  4682                           
  4683                           ;I2C_Support.c: 205: control_F = control_F & 0xFE;
  4684  0034EE  501E               	movf	DS3231_Turn_Off_Alarm@control_F,w,c
  4685  0034F0  0BFE               	andlw	254
  4686  0034F2  6E1E               	movwf	DS3231_Turn_Off_Alarm@control_F,c
  4687                           
  4688                           ;I2C_Support.c: 206: I2C_Write_Address_Write_One_Byte(Device, Address_F, control_F);
  4689  0034F4  C01C  F013         	movff	DS3231_Turn_Off_Alarm@Address_F,I2C_Write_Address_Write_One_Byte@Address
  4690  0034F8  C01E  F014         	movff	DS3231_Turn_Off_Alarm@control_F,I2C_Write_Address_Write_One_Byte@Data_Out
  4691  0034FC  501F               	movf	DS3231_Turn_Off_Alarm@Device,w,c
  4692  0034FE  EC84  F01D         	call	_I2C_Write_Address_Write_One_Byte
  4693                           
  4694                           ;I2C_Support.c: 207: DS3231_Init();
  4695  003502  EC2F  F014         	call	_DS3231_Init	;wreg free
  4696  003506  0012               	return		;funcret
  4697  003508                     __end_of_DS3231_Turn_Off_Alarm:
  4698                           	opt stack 0
  4699                           tblptru	equ	0xFF8
  4700                           tblptrh	equ	0xFF7
  4701                           tblptrl	equ	0xFF6
  4702                           tablat	equ	0xFF5
  4703                           postinc0	equ	0xFEE
  4704                           wreg	equ	0xFE8
  4705                           postdec1	equ	0xFE5
  4706                           fsr1l	equ	0xFE1
  4707                           status	equ	0xFD8
  4708                           
  4709 ;; *************** function _DS3231_Init *****************
  4710 ;; Defined at:
  4711 ;;		line 132 in file "I2C_Support.c"
  4712 ;; Parameters:    Size  Location     Type
  4713 ;;		None
  4714 ;; Auto vars:     Size  Location     Type
  4715 ;;  Device          1   25[COMRAM] unsigned char 
  4716 ;;  control_E       1   24[COMRAM] unsigned char 
  4717 ;;  Address_E       1   23[COMRAM] unsigned char 
  4718 ;;  Address_7       1   22[COMRAM] unsigned char 
  4719 ;; Return value:  Size  Location     Type
  4720 ;;		None               void
  4721 ;; Registers used:
  4722 ;;		wreg, status,2, status,0, cstack
  4723 ;; Tracked objects:
  4724 ;;		On entry : 0/0
  4725 ;;		On exit  : 0/0
  4726 ;;		Unchanged: 0/0
  4727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4729 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4731 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4732 ;;Total ram usage:        4 bytes
  4733 ;; Hardware stack levels used:    1
  4734 ;; Hardware stack levels required when called:    7
  4735 ;; This function calls:
  4736 ;;		_I2C_ReStart
  4737 ;;		_I2C_Read
  4738 ;;		_I2C_Start
  4739 ;;		_I2C_Stop
  4740 ;;		_I2C_Write
  4741 ;;		_I2C_Write_Address_Read_One_Byte
  4742 ;;		_I2C_Write_Address_Write_One_Byte
  4743 ;; This function is called by:
  4744 ;;		_DS3231_Turn_Off_Alarm
  4745 ;;		_DS3231_Turn_On_Alarm
  4746 ;; This function uses a non-reentrant model
  4747 ;;
  4748                           
  4749                           	psect	text12
  4750  00285E                     __ptext12:
  4751                           	opt stack 0
  4752  00285E                     _DS3231_Init:
  4753                           	opt stack 21
  4754                           
  4755                           ;I2C_Support.c: 134: char Device = 0x68;
  4756                           
  4757                           ;incstack = 0
  4758  00285E  0E68               	movlw	104
  4759  002860  6E1A               	movwf	DS3231_Init@Device,c
  4760                           
  4761                           ;I2C_Support.c: 135: char Address_7 = 0x07;
  4762  002862  0E07               	movlw	7
  4763  002864  6E17               	movwf	DS3231_Init@Address_7,c
  4764                           
  4765                           ;I2C_Support.c: 136: char Address_E = 0x0E;
  4766  002866  0E0E               	movlw	14
  4767  002868  6E18               	movwf	DS3231_Init@Address_E,c
  4768                           
  4769                           ;I2C_Support.c: 137: char control_E;
  4770                           ;I2C_Support.c: 139: control_E = I2C_Write_Address_Read_One_Byte(Device, Address_E);
  4771  00286A  C018  F014         	movff	DS3231_Init@Address_E,I2C_Write_Address_Read_One_Byte@Address
  4772  00286E  501A               	movf	DS3231_Init@Device,w,c
  4773  002870  ECB3  F01C         	call	_I2C_Write_Address_Read_One_Byte
  4774  002874  6E19               	movwf	DS3231_Init@control_E,c
  4775                           
  4776                           ;I2C_Support.c: 140: control_E = control_E & 0x01;
  4777  002876  5019               	movf	DS3231_Init@control_E,w,c
  4778  002878  0B01               	andlw	1
  4779  00287A  6E19               	movwf	DS3231_Init@control_E,c
  4780                           
  4781                           ;I2C_Support.c: 141: control_E = control_E | 0x25;
  4782  00287C  5019               	movf	DS3231_Init@control_E,w,c
  4783  00287E  0925               	iorlw	37
  4784  002880  6E19               	movwf	DS3231_Init@control_E,c
  4785                           
  4786                           ;I2C_Support.c: 142: I2C_Write_Address_Write_One_Byte(Device, Address_E, control_E);
  4787  002882  C018  F013         	movff	DS3231_Init@Address_E,I2C_Write_Address_Write_One_Byte@Address
  4788  002886  C019  F014         	movff	DS3231_Init@control_E,I2C_Write_Address_Write_One_Byte@Data_Out
  4789  00288A  501A               	movf	DS3231_Init@Device,w,c
  4790  00288C  EC84  F01D         	call	_I2C_Write_Address_Write_One_Byte
  4791                           
  4792                           ;I2C_Support.c: 143: I2C_Start();
  4793  002890  ECA4  F01E         	call	_I2C_Start	;wreg free
  4794                           
  4795                           ;I2C_Support.c: 144: I2C_Write((Device << 1) | 0);
  4796  002894  501A               	movf	DS3231_Init@Device,w,c
  4797  002896  241A               	addwf	DS3231_Init@Device,w,c
  4798  002898  EC3E  F01C         	call	_I2C_Write
  4799                           
  4800                           ;I2C_Support.c: 145: I2C_Write(Address_7);
  4801  00289C  5017               	movf	DS3231_Init@Address_7,w,c
  4802  00289E  EC3E  F01C         	call	_I2C_Write
  4803                           
  4804                           ;I2C_Support.c: 146: I2C_ReStart();
  4805  0028A2  EC30  F01E         	call	_I2C_ReStart	;wreg free
  4806                           
  4807                           ;I2C_Support.c: 147: I2C_Write((Device << 1) | 1);
  4808  0028A6  80D8               	bsf	status,0,c
  4809  0028A8  341A               	rlcf	DS3231_Init@Device,w,c
  4810  0028AA  EC3E  F01C         	call	_I2C_Write
  4811                           
  4812                           ;I2C_Support.c: 148: alarm_second = I2C_Read(1);
  4813  0028AE  0E01               	movlw	1
  4814  0028B0  ECBB  F01B         	call	_I2C_Read
  4815  0028B4  6E58               	movwf	_alarm_second,c
  4816                           
  4817                           ;I2C_Support.c: 149: alarm_minute = I2C_Read(1);
  4818  0028B6  0E01               	movlw	1
  4819  0028B8  ECBB  F01B         	call	_I2C_Read
  4820  0028BC  6E57               	movwf	_alarm_minute,c
  4821                           
  4822                           ;I2C_Support.c: 150: alarm_hour = I2C_Read(1);
  4823  0028BE  0E01               	movlw	1
  4824  0028C0  ECBB  F01B         	call	_I2C_Read
  4825  0028C4  6E56               	movwf	_alarm_hour,c
  4826                           
  4827                           ;I2C_Support.c: 151: alarm_date = I2C_Read(0);
  4828  0028C6  0E00               	movlw	0
  4829  0028C8  ECBB  F01B         	call	_I2C_Read
  4830  0028CC  6E55               	movwf	_alarm_date,c
  4831                           
  4832                           ;I2C_Support.c: 153: alarm_second = alarm_second & 0x7f;
  4833  0028CE  5058               	movf	_alarm_second,w,c
  4834  0028D0  0B7F               	andlw	127
  4835  0028D2  6E58               	movwf	_alarm_second,c
  4836                           
  4837                           ;I2C_Support.c: 154: alarm_minute = alarm_minute & 0x7f;
  4838  0028D4  5057               	movf	_alarm_minute,w,c
  4839  0028D6  0B7F               	andlw	127
  4840  0028D8  6E57               	movwf	_alarm_minute,c
  4841                           
  4842                           ;I2C_Support.c: 155: alarm_hour = alarm_hour & 0x7f;
  4843  0028DA  5056               	movf	_alarm_hour,w,c
  4844  0028DC  0B7F               	andlw	127
  4845  0028DE  6E56               	movwf	_alarm_hour,c
  4846                           
  4847                           ;I2C_Support.c: 156: alarm_date = alarm_date | 0x80;
  4848  0028E0  5055               	movf	_alarm_date,w,c
  4849  0028E2  0980               	iorlw	128
  4850  0028E4  6E55               	movwf	_alarm_date,c
  4851                           
  4852                           ;I2C_Support.c: 158: I2C_Start();
  4853  0028E6  ECA4  F01E         	call	_I2C_Start	;wreg free
  4854                           
  4855                           ;I2C_Support.c: 159: I2C_Write((Device << 1) | 0);
  4856  0028EA  501A               	movf	DS3231_Init@Device,w,c
  4857  0028EC  241A               	addwf	DS3231_Init@Device,w,c
  4858  0028EE  EC3E  F01C         	call	_I2C_Write
  4859                           
  4860                           ;I2C_Support.c: 160: I2C_Write(Address_7);
  4861  0028F2  5017               	movf	DS3231_Init@Address_7,w,c
  4862  0028F4  EC3E  F01C         	call	_I2C_Write
  4863                           
  4864                           ;I2C_Support.c: 162: I2C_Write(alarm_second);
  4865  0028F8  5058               	movf	_alarm_second,w,c
  4866  0028FA  EC3E  F01C         	call	_I2C_Write
  4867                           
  4868                           ;I2C_Support.c: 163: I2C_Write(alarm_minute);
  4869  0028FE  5057               	movf	_alarm_minute,w,c
  4870  002900  EC3E  F01C         	call	_I2C_Write
  4871                           
  4872                           ;I2C_Support.c: 164: I2C_Write(alarm_hour);
  4873  002904  5056               	movf	_alarm_hour,w,c
  4874  002906  EC3E  F01C         	call	_I2C_Write
  4875                           
  4876                           ;I2C_Support.c: 165: I2C_Write(alarm_date);
  4877  00290A  5055               	movf	_alarm_date,w,c
  4878  00290C  EC3E  F01C         	call	_I2C_Write
  4879                           
  4880                           ;I2C_Support.c: 166: I2C_Stop();
  4881  002910  EC9B  F01E         	call	_I2C_Stop	;wreg free
  4882  002914  0012               	return		;funcret
  4883  002916                     __end_of_DS3231_Init:
  4884                           	opt stack 0
  4885                           tblptru	equ	0xFF8
  4886                           tblptrh	equ	0xFF7
  4887                           tblptrl	equ	0xFF6
  4888                           tablat	equ	0xFF5
  4889                           postinc0	equ	0xFEE
  4890                           wreg	equ	0xFE8
  4891                           postdec1	equ	0xFE5
  4892                           fsr1l	equ	0xFE1
  4893                           status	equ	0xFD8
  4894                           
  4895 ;; *************** function _I2C_Write_Address_Write_One_Byte *****************
  4896 ;; Defined at:
  4897 ;;		line 131 in file "I2C_Soft.c"
  4898 ;; Parameters:    Size  Location     Type
  4899 ;;  Device          1    wreg     unsigned char 
  4900 ;;  Address         1   18[COMRAM] unsigned char 
  4901 ;;  Data_Out        1   19[COMRAM] unsigned char 
  4902 ;; Auto vars:     Size  Location     Type
  4903 ;;  Device          1   20[COMRAM] unsigned char 
  4904 ;; Return value:  Size  Location     Type
  4905 ;;		None               void
  4906 ;; Registers used:
  4907 ;;		wreg, status,2, status,0, cstack
  4908 ;; Tracked objects:
  4909 ;;		On entry : 0/0
  4910 ;;		On exit  : 0/0
  4911 ;;		Unchanged: 0/0
  4912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4913 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4914 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4916 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4917 ;;Total ram usage:        3 bytes
  4918 ;; Hardware stack levels used:    1
  4919 ;; Hardware stack levels required when called:    5
  4920 ;; This function calls:
  4921 ;;		_I2C_Start
  4922 ;;		_I2C_Stop
  4923 ;;		_I2C_Write
  4924 ;; This function is called by:
  4925 ;;		_DS3231_Init
  4926 ;;		_DS3231_Turn_Off_Alarm
  4927 ;;		_DS3231_Turn_On_Alarm
  4928 ;; This function uses a non-reentrant model
  4929 ;;
  4930                           
  4931                           	psect	text13
  4932  003B08                     __ptext13:
  4933                           	opt stack 0
  4934  003B08                     _I2C_Write_Address_Write_One_Byte:
  4935                           	opt stack 23
  4936                           
  4937                           ;incstack = 0
  4938                           ;I2C_Write_Address_Write_One_Byte@Device stored from wreg
  4939  003B08  6E15               	movwf	I2C_Write_Address_Write_One_Byte@Device,c
  4940                           
  4941                           ;I2C_Soft.c: 133: I2C_Start();
  4942  003B0A  ECA4  F01E         	call	_I2C_Start	;wreg free
  4943                           
  4944                           ;I2C_Soft.c: 134: I2C_Write((Device << 1) | 0);
  4945  003B0E  5015               	movf	I2C_Write_Address_Write_One_Byte@Device,w,c
  4946  003B10  2415               	addwf	I2C_Write_Address_Write_One_Byte@Device,w,c
  4947  003B12  EC3E  F01C         	call	_I2C_Write
  4948                           
  4949                           ;I2C_Soft.c: 135: I2C_Write(Address);
  4950  003B16  5013               	movf	I2C_Write_Address_Write_One_Byte@Address,w,c
  4951  003B18  EC3E  F01C         	call	_I2C_Write
  4952                           
  4953                           ;I2C_Soft.c: 136: I2C_Write(Data_Out);
  4954  003B1C  5014               	movf	I2C_Write_Address_Write_One_Byte@Data_Out,w,c
  4955  003B1E  EC3E  F01C         	call	_I2C_Write
  4956                           
  4957                           ;I2C_Soft.c: 137: I2C_Stop();
  4958  003B22  EC9B  F01E         	call	_I2C_Stop	;wreg free
  4959  003B26  0012               	return		;funcret
  4960  003B28                     __end_of_I2C_Write_Address_Write_One_Byte:
  4961                           	opt stack 0
  4962                           tblptru	equ	0xFF8
  4963                           tblptrh	equ	0xFF7
  4964                           tblptrl	equ	0xFF6
  4965                           tablat	equ	0xFF5
  4966                           postinc0	equ	0xFEE
  4967                           wreg	equ	0xFE8
  4968                           postdec1	equ	0xFE5
  4969                           fsr1l	equ	0xFE1
  4970                           status	equ	0xFD8
  4971                           
  4972 ;; *************** function _I2C_Write_Address_Read_One_Byte *****************
  4973 ;; Defined at:
  4974 ;;		line 118 in file "I2C_Soft.c"
  4975 ;; Parameters:    Size  Location     Type
  4976 ;;  Device          1    wreg     unsigned char 
  4977 ;;  Address         1   19[COMRAM] unsigned char 
  4978 ;; Auto vars:     Size  Location     Type
  4979 ;;  Device          1   21[COMRAM] unsigned char 
  4980 ;;  Data_Ret        1   20[COMRAM] unsigned char 
  4981 ;; Return value:  Size  Location     Type
  4982 ;;                  1    wreg      unsigned char 
  4983 ;; Registers used:
  4984 ;;		wreg, status,2, status,0, cstack
  4985 ;; Tracked objects:
  4986 ;;		On entry : 0/0
  4987 ;;		On exit  : 0/0
  4988 ;;		Unchanged: 0/0
  4989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4990 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4991 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4993 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4994 ;;Total ram usage:        3 bytes
  4995 ;; Hardware stack levels used:    1
  4996 ;; Hardware stack levels required when called:    6
  4997 ;; This function calls:
  4998 ;;		_I2C_ReStart
  4999 ;;		_I2C_Read
  5000 ;;		_I2C_Start
  5001 ;;		_I2C_Stop
  5002 ;;		_I2C_Write
  5003 ;; This function is called by:
  5004 ;;		_DS3231_Init
  5005 ;;		_DS3231_Turn_Off_Alarm
  5006 ;;		_DS3231_Turn_On_Alarm
  5007 ;; This function uses a non-reentrant model
  5008 ;;
  5009                           
  5010                           	psect	text14
  5011  003966                     __ptext14:
  5012                           	opt stack 0
  5013  003966                     _I2C_Write_Address_Read_One_Byte:
  5014                           	opt stack 22
  5015                           
  5016                           ;incstack = 0
  5017                           ;I2C_Write_Address_Read_One_Byte@Device stored from wreg
  5018  003966  6E16               	movwf	I2C_Write_Address_Read_One_Byte@Device,c
  5019                           
  5020                           ;I2C_Soft.c: 120: char Data_Ret;
  5021                           ;I2C_Soft.c: 121: I2C_Start();
  5022  003968  ECA4  F01E         	call	_I2C_Start	;wreg free
  5023                           
  5024                           ;I2C_Soft.c: 122: I2C_Write((Device << 1) | 0);
  5025  00396C  5016               	movf	I2C_Write_Address_Read_One_Byte@Device,w,c
  5026  00396E  2416               	addwf	I2C_Write_Address_Read_One_Byte@Device,w,c
  5027  003970  EC3E  F01C         	call	_I2C_Write
  5028                           
  5029                           ;I2C_Soft.c: 123: I2C_Write(Address);
  5030  003974  5014               	movf	I2C_Write_Address_Read_One_Byte@Address,w,c
  5031  003976  EC3E  F01C         	call	_I2C_Write
  5032                           
  5033                           ;I2C_Soft.c: 124: I2C_ReStart();
  5034  00397A  EC30  F01E         	call	_I2C_ReStart	;wreg free
  5035                           
  5036                           ;I2C_Soft.c: 125: I2C_Write((Device << 1) | 1);
  5037  00397E  80D8               	bsf	status,0,c
  5038  003980  3416               	rlcf	I2C_Write_Address_Read_One_Byte@Device,w,c
  5039  003982  EC3E  F01C         	call	_I2C_Write
  5040                           
  5041                           ;I2C_Soft.c: 126: Data_Ret = I2C_Read(0);
  5042  003986  0E00               	movlw	0
  5043  003988  ECBB  F01B         	call	_I2C_Read
  5044  00398C  6E15               	movwf	I2C_Write_Address_Read_One_Byte@Data_Ret,c
  5045                           
  5046                           ;I2C_Soft.c: 127: I2C_Stop();
  5047  00398E  EC9B  F01E         	call	_I2C_Stop	;wreg free
  5048                           
  5049                           ;I2C_Soft.c: 128: return Data_Ret;
  5050  003992  5015               	movf	I2C_Write_Address_Read_One_Byte@Data_Ret,w,c
  5051  003994  D000               	goto	l387
  5052  003996                     l387:
  5053  003996  0012               	return		;funcret
  5054  003998                     __end_of_I2C_Write_Address_Read_One_Byte:
  5055                           	opt stack 0
  5056                           tblptru	equ	0xFF8
  5057                           tblptrh	equ	0xFF7
  5058                           tblptrl	equ	0xFF6
  5059                           tablat	equ	0xFF5
  5060                           postinc0	equ	0xFEE
  5061                           wreg	equ	0xFE8
  5062                           postdec1	equ	0xFE5
  5063                           fsr1l	equ	0xFE1
  5064                           status	equ	0xFD8
  5065                           
  5066 ;; *************** function _Activate_Buzzer_4KHz *****************
  5067 ;; Defined at:
  5068 ;;		line 116 in file "utils.c"
  5069 ;; Parameters:    Size  Location     Type
  5070 ;;		None
  5071 ;; Auto vars:     Size  Location     Type
  5072 ;;		None
  5073 ;; Return value:  Size  Location     Type
  5074 ;;		None               void
  5075 ;; Registers used:
  5076 ;;		wreg, status,2
  5077 ;; Tracked objects:
  5078 ;;		On entry : 0/0
  5079 ;;		On exit  : 0/0
  5080 ;;		Unchanged: 0/0
  5081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5086 ;;Total ram usage:        0 bytes
  5087 ;; Hardware stack levels used:    1
  5088 ;; Hardware stack levels required when called:    3
  5089 ;; This function calls:
  5090 ;;		Nothing
  5091 ;; This function is called by:
  5092 ;;		_Test_Alarm
  5093 ;; This function uses a non-reentrant model
  5094 ;;
  5095                           
  5096                           	psect	text15
  5097  003CEE                     __ptext15:
  5098                           	opt stack 0
  5099  003CEE                     _Activate_Buzzer_4KHz:
  5100                           	opt stack 26
  5101                           
  5102                           ;utils.c: 118: PR2 = 0b01111100 ;
  5103                           
  5104                           ;incstack = 0
  5105  003CEE  0E7C               	movlw	124
  5106  003CF0  6ECB               	movwf	4043,c	;volatile
  5107                           
  5108                           ;utils.c: 119: T2CON = 0b00000101 ;
  5109  003CF2  0E05               	movlw	5
  5110  003CF4  6ECA               	movwf	4042,c	;volatile
  5111                           
  5112                           ;utils.c: 120: CCPR2L = 0b00111110 ;
  5113  003CF6  0E3E               	movlw	62
  5114  003CF8  6EBB               	movwf	4027,c	;volatile
  5115                           
  5116                           ;utils.c: 121: CCP2CON = 0b00011100 ;
  5117  003CFA  0E1C               	movlw	28
  5118  003CFC  6EBA               	movwf	4026,c	;volatile
  5119  003CFE  0012               	return		;funcret
  5120  003D00                     __end_of_Activate_Buzzer_4KHz:
  5121                           	opt stack 0
  5122                           tblptru	equ	0xFF8
  5123                           tblptrh	equ	0xFF7
  5124                           tblptrl	equ	0xFF6
  5125                           tablat	equ	0xFF5
  5126                           postinc0	equ	0xFEE
  5127                           wreg	equ	0xFE8
  5128                           postdec1	equ	0xFE5
  5129                           fsr1l	equ	0xFE1
  5130                           status	equ	0xFD8
  5131                           
  5132 ;; *************** function _Set_RPM_RGB *****************
  5133 ;; Defined at:
  5134 ;;		line 93 in file "Fan_Support.c"
  5135 ;; Parameters:    Size  Location     Type
  5136 ;;  rpm             2   64[COMRAM] int 
  5137 ;; Auto vars:     Size  Location     Type
  5138 ;;  temp            2   10[BANK1 ] int 
  5139 ;;  output          2    8[BANK1 ] int 
  5140 ;; Return value:  Size  Location     Type
  5141 ;;		None               void
  5142 ;; Registers used:
  5143 ;;		wreg, status,2, status,0, cstack
  5144 ;; Tracked objects:
  5145 ;;		On entry : 0/0
  5146 ;;		On exit  : 0/0
  5147 ;;		Unchanged: 0/0
  5148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5149 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5150 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5152 ;;      Totals:         2       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5153 ;;Total ram usage:        6 bytes
  5154 ;; Hardware stack levels used:    1
  5155 ;; Hardware stack levels required when called:    4
  5156 ;; This function calls:
  5157 ;;		___awdiv
  5158 ;; This function is called by:
  5159 ;;		_main
  5160 ;; This function uses a non-reentrant model
  5161 ;;
  5162                           
  5163                           	psect	text16
  5164  0029CC                     __ptext16:
  5165                           	opt stack 0
  5166  0029CC                     _Set_RPM_RGB:
  5167                           	opt stack 26
  5168                           
  5169                           ;Fan_Support.c: 95: int output;
  5170                           ;Fan_Support.c: 96: if (rpm == 0)
  5171                           
  5172                           ;incstack = 0
  5173  0029CC  5041               	movf	Set_RPM_RGB@rpm,w,c
  5174  0029CE  1042               	iorwf	Set_RPM_RGB@rpm+1,w,c
  5175  0029D0  A4D8               	btfss	status,2,c
  5176  0029D2  D003               	goto	l9529
  5177                           
  5178                           ;Fan_Support.c: 99: PORTD = output;
  5179  0029D4  C13C  FF83         	movff	Set_RPM_RGB@output,3971	;volatile
  5180                           
  5181                           ;Fan_Support.c: 100: }
  5182  0029D8  D051               	goto	l320
  5183  0029DA                     l9529:
  5184                           
  5185                           ;Fan_Support.c: 101: else
  5186                           ;Fan_Support.c: 102: {
  5187                           ;Fan_Support.c: 103: int temp = rpm / 500;
  5188  0029DA  C041  F134         	movff	Set_RPM_RGB@rpm,___awdiv@dividend
  5189  0029DE  C042  F135         	movff	Set_RPM_RGB@rpm+1,___awdiv@dividend+1
  5190  0029E2  0E01               	movlw	1
  5191  0029E4  0101               	movlb	1	; () banked
  5192  0029E6  6F37               	movwf	(___awdiv@divisor+1)& (0+255),b
  5193  0029E8  0EF4               	movlw	244
  5194  0029EA  6F36               	movwf	___awdiv@divisor& (0+255),b
  5195  0029EC  EC3A  F012         	call	___awdiv	;wreg free
  5196  0029F0  C134  F13E         	movff	?___awdiv,Set_RPM_RGB@temp
  5197  0029F4  C135  F13F         	movff	?___awdiv+1,Set_RPM_RGB@temp+1
  5198                           
  5199                           ;Fan_Support.c: 104: if (temp == 0) output = 0x01;
  5200  0029F8  0101               	movlb	1	; () banked
  5201  0029FA  513E               	movf	Set_RPM_RGB@temp& (0+255),w,b
  5202  0029FC  0101               	movlb	1	; () banked
  5203  0029FE  113F               	iorwf	(Set_RPM_RGB@temp+1)& (0+255),w,b
  5204  002A00  A4D8               	btfss	status,2,c
  5205  002A02  D005               	goto	l9535
  5206                           
  5207                           ; BSR set to: 1
  5208  002A04  0E00               	movlw	0
  5209  002A06  0101               	movlb	1	; () banked
  5210  002A08  6F3D               	movwf	(Set_RPM_RGB@output+1)& (0+255),b
  5211  002A0A  0E01               	movlw	1
  5212  002A0C  D02F               	goto	L5
  5213  002A0E                     l9535:
  5214                           
  5215                           ; BSR set to: 1
  5216                           ;Fan_Support.c: 105: else if ( (temp >= 1) & (temp < 6) ) output = temp+1;
  5217  002A0E  0101               	movlb	1	; () banked
  5218  002A10  BF3F               	btfsc	(Set_RPM_RGB@temp+1)& (0+255),7,b
  5219  002A12  D01D               	goto	l9541
  5220  002A14  0101               	movlb	1	; () banked
  5221  002A16  513F               	movf	(Set_RPM_RGB@temp+1)& (0+255),w,b
  5222  002A18  E104               	bnz	u6900
  5223  002A1A  0101               	movlb	1	; () banked
  5224  002A1C  053E               	decf	Set_RPM_RGB@temp& (0+255),w,b
  5225  002A1E  A0D8               	btfss	status,0,c
  5226  002A20  D016               	goto	l9541
  5227  002A22                     u6900:
  5228                           
  5229                           ; BSR set to: 1
  5230  002A22  0101               	movlb	1	; () banked
  5231  002A24  BF3F               	btfsc	(Set_RPM_RGB@temp+1)& (0+255),7,b
  5232  002A26  D008               	goto	l9539
  5233  002A28  0101               	movlb	1	; () banked
  5234  002A2A  513F               	movf	(Set_RPM_RGB@temp+1)& (0+255),w,b
  5235  002A2C  E110               	bnz	l9541
  5236  002A2E  0E06               	movlw	6
  5237  002A30  0101               	movlb	1	; () banked
  5238  002A32  5D3E               	subwf	Set_RPM_RGB@temp& (0+255),w,b
  5239  002A34  B0D8               	btfsc	status,0,c
  5240  002A36  D00B               	goto	l9541
  5241  002A38                     l9539:
  5242                           
  5243                           ; BSR set to: 1
  5244  002A38  0E01               	movlw	1
  5245  002A3A  0101               	movlb	1	; () banked
  5246  002A3C  253E               	addwf	Set_RPM_RGB@temp& (0+255),w,b
  5247  002A3E  0101               	movlb	1	; () banked
  5248  002A40  6F3C               	movwf	Set_RPM_RGB@output& (0+255),b
  5249  002A42  0E00               	movlw	0
  5250  002A44  0101               	movlb	1	; () banked
  5251  002A46  213F               	addwfc	(Set_RPM_RGB@temp+1)& (0+255),w,b
  5252  002A48  0101               	movlb	1	; () banked
  5253  002A4A  6F3D               	movwf	(Set_RPM_RGB@output+1)& (0+255),b
  5254  002A4C  D011               	goto	l9545
  5255  002A4E                     l9541:
  5256                           
  5257                           ; BSR set to: 1
  5258                           ;Fan_Support.c: 106: else if ( temp >= 6) output = 0x07;
  5259  002A4E  0101               	movlb	1	; () banked
  5260  002A50  BF3F               	btfsc	(Set_RPM_RGB@temp+1)& (0+255),7,b
  5261  002A52  D00E               	goto	l9545
  5262  002A54  0101               	movlb	1	; () banked
  5263  002A56  513F               	movf	(Set_RPM_RGB@temp+1)& (0+255),w,b
  5264  002A58  E105               	bnz	u6920
  5265  002A5A  0E06               	movlw	6
  5266  002A5C  0101               	movlb	1	; () banked
  5267  002A5E  5D3E               	subwf	Set_RPM_RGB@temp& (0+255),w,b
  5268  002A60  A0D8               	btfss	status,0,c
  5269  002A62  D006               	goto	l9545
  5270  002A64                     u6920:
  5271                           
  5272                           ; BSR set to: 1
  5273  002A64  0E00               	movlw	0
  5274  002A66  0101               	movlb	1	; () banked
  5275  002A68  6F3D               	movwf	(Set_RPM_RGB@output+1)& (0+255),b
  5276  002A6A  0E07               	movlw	7
  5277  002A6C                     L5:
  5278  002A6C  6F3C               	movwf	Set_RPM_RGB@output& (0+255),b
  5279                           
  5280                           ; BSR set to: 1
  5281                           
  5282                           ; BSR set to: 1
  5283  002A6E  D000               	goto	l9545
  5284  002A70                     l9545:
  5285                           
  5286                           ; BSR set to: 1
  5287                           ;Fan_Support.c: 107: PORTD = (output << 3);
  5288  002A70  0101               	movlb	1	; () banked
  5289  002A72  393C               	swapf	Set_RPM_RGB@output& (0+255),w,b
  5290  002A74  42E8               	rrncf	wreg,f,c
  5291  002A76  0BF8               	andlw	248
  5292  002A78  6E83               	movwf	3971,c	;volatile
  5293  002A7A  D000               	goto	l320
  5294  002A7C                     l320:
  5295  002A7C  0012               	return		;funcret
  5296  002A7E                     __end_of_Set_RPM_RGB:
  5297                           	opt stack 0
  5298                           tblptru	equ	0xFF8
  5299                           tblptrh	equ	0xFF7
  5300                           tblptrl	equ	0xFF6
  5301                           tablat	equ	0xFF5
  5302                           postinc0	equ	0xFEE
  5303                           wreg	equ	0xFE8
  5304                           postdec1	equ	0xFE5
  5305                           fsr1l	equ	0xFE1
  5306                           status	equ	0xFD8
  5307                           
  5308 ;; *************** function _Set_DC_RGB *****************
  5309 ;; Defined at:
  5310 ;;		line 83 in file "Fan_Support.c"
  5311 ;; Parameters:    Size  Location     Type
  5312 ;;  duty_cycle      2   64[COMRAM] int 
  5313 ;; Auto vars:     Size  Location     Type
  5314 ;;  temp            2   10[BANK1 ] int 
  5315 ;;  output          2    8[BANK1 ] int 
  5316 ;; Return value:  Size  Location     Type
  5317 ;;		None               void
  5318 ;; Registers used:
  5319 ;;		wreg, status,2, status,0, cstack
  5320 ;; Tracked objects:
  5321 ;;		On entry : 0/0
  5322 ;;		On exit  : 0/0
  5323 ;;		Unchanged: 0/0
  5324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5325 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5326 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5328 ;;      Totals:         2       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5329 ;;Total ram usage:        6 bytes
  5330 ;; Hardware stack levels used:    1
  5331 ;; Hardware stack levels required when called:    4
  5332 ;; This function calls:
  5333 ;;		___awdiv
  5334 ;; This function is called by:
  5335 ;;		_main
  5336 ;; This function uses a non-reentrant model
  5337 ;;
  5338                           
  5339                           	psect	text17
  5340  002BC0                     __ptext17:
  5341                           	opt stack 0
  5342  002BC0                     _Set_DC_RGB:
  5343                           	opt stack 26
  5344                           
  5345                           ;Fan_Support.c: 85: int temp = duty_cycle / 10;
  5346                           
  5347                           ;incstack = 0
  5348  002BC0  C041  F134         	movff	Set_DC_RGB@duty_cycle,___awdiv@dividend
  5349  002BC4  C042  F135         	movff	Set_DC_RGB@duty_cycle+1,___awdiv@dividend+1
  5350  002BC8  0E00               	movlw	0
  5351  002BCA  0101               	movlb	1	; () banked
  5352  002BCC  6F37               	movwf	(___awdiv@divisor+1)& (0+255),b
  5353  002BCE  0E0A               	movlw	10
  5354  002BD0  6F36               	movwf	___awdiv@divisor& (0+255),b
  5355  002BD2  EC3A  F012         	call	___awdiv	;wreg free
  5356  002BD6  C134  F13E         	movff	?___awdiv,Set_DC_RGB@temp
  5357  002BDA  C135  F13F         	movff	?___awdiv+1,Set_DC_RGB@temp+1
  5358                           
  5359                           ;Fan_Support.c: 86: int output;
  5360                           ;Fan_Support.c: 87: if (temp ==0 ) output = 0;
  5361  002BDE  0101               	movlb	1	; () banked
  5362  002BE0  513E               	movf	Set_DC_RGB@temp& (0+255),w,b
  5363  002BE2  0101               	movlb	1	; () banked
  5364  002BE4  113F               	iorwf	(Set_DC_RGB@temp+1)& (0+255),w,b
  5365  002BE6  A4D8               	btfss	status,2,c
  5366  002BE8  D005               	goto	l9553
  5367                           
  5368                           ; BSR set to: 1
  5369  002BEA  0E00               	movlw	0
  5370  002BEC  0101               	movlb	1	; () banked
  5371  002BEE  6F3D               	movwf	(Set_DC_RGB@output+1)& (0+255),b
  5372  002BF0  0E00               	movlw	0
  5373  002BF2  D029               	goto	L6
  5374  002BF4                     l9553:
  5375                           
  5376                           ; BSR set to: 1
  5377                           ;Fan_Support.c: 88: else if((temp >= 1) & (temp < 7)) output = temp;
  5378  002BF4  0101               	movlb	1	; () banked
  5379  002BF6  BF3F               	btfsc	(Set_DC_RGB@temp+1)& (0+255),7,b
  5380  002BF8  D017               	goto	l9559
  5381  002BFA  0101               	movlb	1	; () banked
  5382  002BFC  513F               	movf	(Set_DC_RGB@temp+1)& (0+255),w,b
  5383  002BFE  E104               	bnz	u6940
  5384  002C00  0101               	movlb	1	; () banked
  5385  002C02  053E               	decf	Set_DC_RGB@temp& (0+255),w,b
  5386  002C04  A0D8               	btfss	status,0,c
  5387  002C06  D010               	goto	l9559
  5388  002C08                     u6940:
  5389                           
  5390                           ; BSR set to: 1
  5391  002C08  0101               	movlb	1	; () banked
  5392  002C0A  BF3F               	btfsc	(Set_DC_RGB@temp+1)& (0+255),7,b
  5393  002C0C  D008               	goto	l9557
  5394  002C0E  0101               	movlb	1	; () banked
  5395  002C10  513F               	movf	(Set_DC_RGB@temp+1)& (0+255),w,b
  5396  002C12  E10A               	bnz	l9559
  5397  002C14  0E07               	movlw	7
  5398  002C16  0101               	movlb	1	; () banked
  5399  002C18  5D3E               	subwf	Set_DC_RGB@temp& (0+255),w,b
  5400  002C1A  B0D8               	btfsc	status,0,c
  5401  002C1C  D005               	goto	l9559
  5402  002C1E                     l9557:
  5403                           
  5404                           ; BSR set to: 1
  5405  002C1E  C13E  F13C         	movff	Set_DC_RGB@temp,Set_DC_RGB@output
  5406  002C22  C13F  F13D         	movff	Set_DC_RGB@temp+1,Set_DC_RGB@output+1
  5407  002C26  D011               	goto	l9563
  5408  002C28                     l9559:
  5409                           
  5410                           ; BSR set to: 1
  5411                           ;Fan_Support.c: 89: else if (temp>=7) output = 0x07;
  5412  002C28  0101               	movlb	1	; () banked
  5413  002C2A  BF3F               	btfsc	(Set_DC_RGB@temp+1)& (0+255),7,b
  5414  002C2C  D00E               	goto	l9563
  5415  002C2E  0101               	movlb	1	; () banked
  5416  002C30  513F               	movf	(Set_DC_RGB@temp+1)& (0+255),w,b
  5417  002C32  E105               	bnz	u6960
  5418  002C34  0E07               	movlw	7
  5419  002C36  0101               	movlb	1	; () banked
  5420  002C38  5D3E               	subwf	Set_DC_RGB@temp& (0+255),w,b
  5421  002C3A  A0D8               	btfss	status,0,c
  5422  002C3C  D006               	goto	l9563
  5423  002C3E                     u6960:
  5424                           
  5425                           ; BSR set to: 1
  5426  002C3E  0E00               	movlw	0
  5427  002C40  0101               	movlb	1	; () banked
  5428  002C42  6F3D               	movwf	(Set_DC_RGB@output+1)& (0+255),b
  5429  002C44  0E07               	movlw	7
  5430  002C46                     L6:
  5431  002C46  6F3C               	movwf	Set_DC_RGB@output& (0+255),b
  5432                           
  5433                           ; BSR set to: 1
  5434                           
  5435                           ; BSR set to: 1
  5436  002C48  D000               	goto	l9563
  5437  002C4A                     l9563:
  5438                           
  5439                           ; BSR set to: 1
  5440                           ;Fan_Support.c: 90: PORTD = output | PORTD;
  5441  002C4A  5083               	movf	3971,w,c	;volatile
  5442  002C4C  0101               	movlb	1	; () banked
  5443  002C4E  113C               	iorwf	Set_DC_RGB@output& (0+255),w,b
  5444  002C50  6E83               	movwf	3971,c	;volatile
  5445                           
  5446                           ; BSR set to: 1
  5447  002C52  0012               	return		;funcret
  5448  002C54                     __end_of_Set_DC_RGB:
  5449                           	opt stack 0
  5450                           tblptru	equ	0xFF8
  5451                           tblptrh	equ	0xFF7
  5452                           tblptrl	equ	0xFF6
  5453                           tablat	equ	0xFF5
  5454                           postinc0	equ	0xFEE
  5455                           wreg	equ	0xFE8
  5456                           postdec1	equ	0xFE5
  5457                           fsr1l	equ	0xFE1
  5458                           status	equ	0xFD8
  5459                           
  5460 ;; *************** function _Monitor_Heater *****************
  5461 ;; Defined at:
  5462 ;;		line 38 in file "Fan_Support.c"
  5463 ;; Parameters:    Size  Location     Type
  5464 ;;		None
  5465 ;; Auto vars:     Size  Location     Type
  5466 ;;		None
  5467 ;; Return value:  Size  Location     Type
  5468 ;;		None               void
  5469 ;; Registers used:
  5470 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5471 ;; Tracked objects:
  5472 ;;		On entry : 0/0
  5473 ;;		On exit  : 0/0
  5474 ;;		Unchanged: 0/0
  5475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5478 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5479 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5480 ;;Total ram usage:        3 bytes
  5481 ;; Hardware stack levels used:    1
  5482 ;; Hardware stack levels required when called:    7
  5483 ;; This function calls:
  5484 ;;		_Turn_Off_Fan
  5485 ;;		_Turn_On_Fan
  5486 ;;		_do_update_pwm
  5487 ;;		_get_duty_cycle
  5488 ;; This function is called by:
  5489 ;;		_main
  5490 ;; This function uses a non-reentrant model
  5491 ;;
  5492                           
  5493                           	psect	text18
  5494  00327E                     __ptext18:
  5495                           	opt stack 0
  5496  00327E                     _Monitor_Heater:
  5497                           	opt stack 23
  5498                           
  5499                           ;Fan_Support.c: 40: if(HEATER == 0 ) duty_cycle = 0;
  5500                           
  5501                           ; BSR set to: 1
  5502                           ;incstack = 0
  5503  00327E  5050               	movf	_HEATER,w,c
  5504  003280  A4D8               	btfss	status,2,c
  5505  003282  D002               	goto	l9569
  5506  003284  0E00               	movlw	0
  5507  003286  D00A               	goto	L7
  5508  003288                     l9569:
  5509                           
  5510                           ;Fan_Support.c: 41: else duty_cycle = get_duty_cycle(DS1621_tempF, heater_set_temp);
  5511  003288  C048  F011         	movff	_DS1621_tempF,get_duty_cycle@temp
  5512  00328C  C049  F012         	movff	_DS1621_tempF+1,get_duty_cycle@temp+1
  5513  003290  C06F  F013         	movff	_heater_set_temp,get_duty_cycle@set_temp
  5514  003294  6A14               	clrf	get_duty_cycle@set_temp+1,c
  5515  003296  ECA2  F012         	call	_get_duty_cycle	;wreg free
  5516  00329A  5011               	movf	?_get_duty_cycle,w,c
  5517  00329C                     L7:
  5518  00329C  6E5D               	movwf	_duty_cycle,c
  5519  00329E  D000               	goto	l9571
  5520  0032A0                     l9571:
  5521                           
  5522                           ;Fan_Support.c: 43: do_update_pwm(duty_cycle);
  5523  0032A0  505D               	movf	_duty_cycle,w,c
  5524  0032A2  EC8B  F014         	call	_do_update_pwm
  5525                           
  5526                           ;Fan_Support.c: 45: if (HEATER == 1)
  5527  0032A6  0450               	decf	_HEATER,w,c
  5528  0032A8  A4D8               	btfss	status,2,c
  5529  0032AA  D018               	goto	l9581
  5530                           
  5531                           ;Fan_Support.c: 46: {
  5532                           ;Fan_Support.c: 47: if(DS1621_tempF < heater_set_temp) Turn_On_Fan();
  5533  0032AC  506F               	movf	_heater_set_temp,w,c
  5534  0032AE  0100               	movlb	0	; () banked
  5535  0032B0  6FFD               	movwf	??_Monitor_Heater& (0+255),b
  5536  0032B2  6BFE               	clrf	(??_Monitor_Heater+1)& (0+255),b
  5537  0032B4  0100               	movlb	0	; () banked
  5538  0032B6  51FD               	movf	??_Monitor_Heater& (0+255),w,b
  5539  0032B8  5C48               	subwf	_DS1621_tempF,w,c
  5540  0032BA  5049               	movf	_DS1621_tempF+1,w,c
  5541  0032BC  0A80               	xorlw	128
  5542  0032BE  0100               	movlb	0	; () banked
  5543  0032C0  6FFF               	movwf	(??_Monitor_Heater+2)& (0+255),b
  5544  0032C2  0100               	movlb	0	; () banked
  5545  0032C4  51FE               	movf	(??_Monitor_Heater+1)& (0+255),w,b
  5546  0032C6  0A80               	xorlw	128
  5547  0032C8  0100               	movlb	0	; () banked
  5548  0032CA  59FF               	subwfb	(??_Monitor_Heater+2)& (0+255),w,b
  5549  0032CC  B0D8               	btfsc	status,0,c
  5550  0032CE  D003               	goto	l9579
  5551                           
  5552                           ; BSR set to: 0
  5553  0032D0  ECBE  F01E         	call	_Turn_On_Fan	;wreg free
  5554  0032D4  D006               	goto	l290
  5555  0032D6                     l9579:
  5556                           
  5557                           ;Fan_Support.c: 48: else HEATER = 0;
  5558  0032D6  0E00               	movlw	0
  5559  0032D8  6E50               	movwf	_HEATER,c
  5560                           
  5561                           ;Fan_Support.c: 49: }
  5562  0032DA  D003               	goto	l290
  5563  0032DC                     l9581:
  5564                           
  5565                           ;Fan_Support.c: 50: else Turn_Off_Fan();
  5566  0032DC  EC08  F01F         	call	_Turn_Off_Fan	;wreg free
  5567  0032E0  D000               	goto	l290
  5568  0032E2                     l290:
  5569  0032E2  0012               	return		;funcret
  5570  0032E4                     __end_of_Monitor_Heater:
  5571                           	opt stack 0
  5572                           tblptru	equ	0xFF8
  5573                           tblptrh	equ	0xFF7
  5574                           tblptrl	equ	0xFF6
  5575                           tablat	equ	0xFF5
  5576                           postinc0	equ	0xFEE
  5577                           wreg	equ	0xFE8
  5578                           postdec1	equ	0xFE5
  5579                           fsr1l	equ	0xFE1
  5580                           status	equ	0xFD8
  5581                           
  5582 ;; *************** function _get_duty_cycle *****************
  5583 ;; Defined at:
  5584 ;;		line 12 in file "Fan_Support.c"
  5585 ;; Parameters:    Size  Location     Type
  5586 ;;  temp            2   16[COMRAM] int 
  5587 ;;  set_temp        2   18[COMRAM] int 
  5588 ;; Auto vars:     Size  Location     Type
  5589 ;;  diff            2   22[COMRAM] int 
  5590 ;; Return value:  Size  Location     Type
  5591 ;;                  2   16[COMRAM] int 
  5592 ;; Registers used:
  5593 ;;		wreg, status,2, status,0, prodl, prodh
  5594 ;; Tracked objects:
  5595 ;;		On entry : 0/0
  5596 ;;		On exit  : 0/0
  5597 ;;		Unchanged: 0/0
  5598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5599 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5600 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5601 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5602 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5603 ;;Total ram usage:        8 bytes
  5604 ;; Hardware stack levels used:    1
  5605 ;; Hardware stack levels required when called:    3
  5606 ;; This function calls:
  5607 ;;		Nothing
  5608 ;; This function is called by:
  5609 ;;		_Monitor_Heater
  5610 ;; This function uses a non-reentrant model
  5611 ;;
  5612                           
  5613                           	psect	text19
  5614  002544                     __ptext19:
  5615                           	opt stack 0
  5616  002544                     _get_duty_cycle:
  5617                           	opt stack 26
  5618                           
  5619                           ;Fan_Support.c: 15: if(temp >= set_temp) duty_cycle = 0;
  5620                           
  5621                           ;incstack = 0
  5622  002544  5013               	movf	get_duty_cycle@set_temp,w,c
  5623  002546  5C11               	subwf	get_duty_cycle@temp,w,c
  5624  002548  5012               	movf	get_duty_cycle@temp+1,w,c
  5625  00254A  0A80               	xorlw	128
  5626  00254C  6E15               	movwf	??_get_duty_cycle& (0+255),c
  5627  00254E  5014               	movf	get_duty_cycle@set_temp+1,w,c
  5628  002550  0A80               	xorlw	128
  5629  002552  5815               	subwfb	??_get_duty_cycle& (0+255),w,c
  5630  002554  A0D8               	btfss	status,0,c
  5631  002556  D002               	goto	l6461
  5632  002558  0E00               	movlw	0
  5633  00255A  D053               	goto	L10
  5634  00255C                     l6461:
  5635                           
  5636                           ;Fan_Support.c: 16: else
  5637                           ;Fan_Support.c: 17: {
  5638                           ;Fan_Support.c: 18: signed int diff = set_temp - temp;
  5639  00255C  C011  F015         	movff	get_duty_cycle@temp,??_get_duty_cycle
  5640  002560  C012  F016         	movff	get_duty_cycle@temp+1,??_get_duty_cycle+1
  5641  002564  1E15               	comf	??_get_duty_cycle,f,c
  5642  002566  1E16               	comf	??_get_duty_cycle+1,f,c
  5643  002568  4A15               	infsnz	??_get_duty_cycle,f,c
  5644  00256A  2A16               	incf	??_get_duty_cycle+1,f,c
  5645  00256C  5013               	movf	get_duty_cycle@set_temp,w,c
  5646  00256E  2415               	addwf	??_get_duty_cycle,w,c
  5647  002570  6E17               	movwf	get_duty_cycle@diff,c
  5648  002572  5014               	movf	get_duty_cycle@set_temp+1,w,c
  5649  002574  2016               	addwfc	??_get_duty_cycle+1,w,c
  5650  002576  6E18               	movwf	get_duty_cycle@diff+1,c
  5651                           
  5652                           ;Fan_Support.c: 20: if (diff > 50) duty_cycle = 100;
  5653  002578  BE18               	btfsc	get_duty_cycle@diff+1,7,c
  5654  00257A  D008               	goto	l6465
  5655  00257C  5018               	movf	get_duty_cycle@diff+1,w,c
  5656  00257E  E104               	bnz	u4120
  5657  002580  0E33               	movlw	51
  5658  002582  5C17               	subwf	get_duty_cycle@diff,w,c
  5659  002584  A0D8               	btfss	status,0,c
  5660  002586  D002               	goto	l6465
  5661  002588                     u4120:
  5662  002588  0E64               	movlw	100
  5663  00258A  D03B               	goto	L10
  5664  00258C                     l6465:
  5665                           
  5666                           ;Fan_Support.c: 21: else if ( (25 <= diff) & (diff < 50) ) duty_cycle = (set_temp - temp
      +                          ) * 2;
  5667  00258C  BE18               	btfsc	get_duty_cycle@diff+1,7,c
  5668  00258E  D015               	goto	l6471
  5669  002590  5018               	movf	get_duty_cycle@diff+1,w,c
  5670  002592  E104               	bnz	u4130
  5671  002594  0E19               	movlw	25
  5672  002596  5C17               	subwf	get_duty_cycle@diff,w,c
  5673  002598  A0D8               	btfss	status,0,c
  5674  00259A  D00F               	goto	l6471
  5675  00259C                     u4130:
  5676  00259C  BE18               	btfsc	get_duty_cycle@diff+1,7,c
  5677  00259E  D006               	goto	l6469
  5678  0025A0  5018               	movf	get_duty_cycle@diff+1,w,c
  5679  0025A2  E10B               	bnz	l6471
  5680  0025A4  0E32               	movlw	50
  5681  0025A6  5C17               	subwf	get_duty_cycle@diff,w,c
  5682  0025A8  B0D8               	btfsc	status,0,c
  5683  0025AA  D007               	goto	l6471
  5684  0025AC                     l6469:
  5685  0025AC  5011               	movf	get_duty_cycle@temp,w,c
  5686  0025AE  0800               	sublw	0
  5687  0025B0  2413               	addwf	get_duty_cycle@set_temp,w,c
  5688  0025B2  6E15               	movwf	??_get_duty_cycle& (0+255),c
  5689  0025B4  90D8               	bcf	status,0,c
  5690  0025B6  3415               	rlcf	??_get_duty_cycle,w,c
  5691  0025B8  D024               	goto	L10
  5692  0025BA                     l6471:
  5693                           
  5694                           ;Fan_Support.c: 22: else if ( (10 <= diff) & (diff < 25) ) duty_cycle = (set_temp - temp
      +                          ) * (3/2);
  5695  0025BA  BE18               	btfsc	get_duty_cycle@diff+1,7,c
  5696  0025BC  D015               	goto	l6477
  5697  0025BE  5018               	movf	get_duty_cycle@diff+1,w,c
  5698  0025C0  E104               	bnz	u4150
  5699  0025C2  0E0A               	movlw	10
  5700  0025C4  5C17               	subwf	get_duty_cycle@diff,w,c
  5701  0025C6  A0D8               	btfss	status,0,c
  5702  0025C8  D00F               	goto	l6477
  5703  0025CA                     u4150:
  5704  0025CA  BE18               	btfsc	get_duty_cycle@diff+1,7,c
  5705  0025CC  D006               	goto	l6475
  5706  0025CE  5018               	movf	get_duty_cycle@diff+1,w,c
  5707  0025D0  E10B               	bnz	l6477
  5708  0025D2  0E19               	movlw	25
  5709  0025D4  5C17               	subwf	get_duty_cycle@diff,w,c
  5710  0025D6  B0D8               	btfsc	status,0,c
  5711  0025D8  D007               	goto	l6477
  5712  0025DA                     l6475:
  5713  0025DA  5011               	movf	get_duty_cycle@temp,w,c
  5714  0025DC  0800               	sublw	0
  5715  0025DE  2413               	addwf	get_duty_cycle@set_temp,w,c
  5716  0025E0  0D01               	mullw	1
  5717  0025E2  CFF3 F05D          	movff	prodl,_duty_cycle
  5718  0025E6  D00F               	goto	l6483
  5719  0025E8                     l6477:
  5720                           
  5721                           ;Fan_Support.c: 23: else if ( (0 <= diff) & ( diff < 10) )
  5722  0025E8  BE18               	btfsc	get_duty_cycle@diff+1,7,c
  5723  0025EA  D00D               	goto	l6483
  5724  0025EC  BE18               	btfsc	get_duty_cycle@diff+1,7,c
  5725  0025EE  D006               	goto	l6481
  5726  0025F0  5018               	movf	get_duty_cycle@diff+1,w,c
  5727  0025F2  E109               	bnz	l6483
  5728  0025F4  0E0A               	movlw	10
  5729  0025F6  5C17               	subwf	get_duty_cycle@diff,w,c
  5730  0025F8  B0D8               	btfsc	status,0,c
  5731  0025FA  D005               	goto	l6483
  5732  0025FC                     l6481:
  5733                           
  5734                           ;Fan_Support.c: 24: {
  5735                           ;Fan_Support.c: 25: duty_cycle = (set_temp - temp);
  5736  0025FC  5011               	movf	get_duty_cycle@temp,w,c
  5737  0025FE  0800               	sublw	0
  5738  002600  2413               	addwf	get_duty_cycle@set_temp,w,c
  5739  002602                     L10:
  5740  002602  6E5D               	movwf	_duty_cycle,c
  5741  002604  D000               	goto	l6483
  5742  002606                     l6483:
  5743                           
  5744                           ;Fan_Support.c: 27: }
  5745                           ;Fan_Support.c: 28: }
  5746                           ;Fan_Support.c: 29: return duty_cycle;
  5747  002606  C05D  F011         	movff	_duty_cycle,?_get_duty_cycle
  5748  00260A  6A12               	clrf	?_get_duty_cycle+1,c
  5749  00260C  D000               	goto	l281
  5750  00260E                     l281:
  5751  00260E  0012               	return		;funcret
  5752  002610                     __end_of_get_duty_cycle:
  5753                           	opt stack 0
  5754                           tblptru	equ	0xFF8
  5755                           tblptrh	equ	0xFF7
  5756                           tblptrl	equ	0xFF6
  5757                           tablat	equ	0xFF5
  5758                           prodl	equ	0xFF3
  5759                           postinc0	equ	0xFEE
  5760                           wreg	equ	0xFE8
  5761                           postdec1	equ	0xFE5
  5762                           fsr1l	equ	0xFE1
  5763                           status	equ	0xFD8
  5764                           
  5765 ;; *************** function _Turn_On_Fan *****************
  5766 ;; Defined at:
  5767 ;;		line 75 in file "Fan_Support.c"
  5768 ;; Parameters:    Size  Location     Type
  5769 ;;		None
  5770 ;; Auto vars:     Size  Location     Type
  5771 ;;		None
  5772 ;; Return value:  Size  Location     Type
  5773 ;;		None               void
  5774 ;; Registers used:
  5775 ;;		wreg, status,2, status,0, cstack
  5776 ;; Tracked objects:
  5777 ;;		On entry : 0/0
  5778 ;;		On exit  : 0/0
  5779 ;;		Unchanged: 0/0
  5780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5784 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5785 ;;Total ram usage:        0 bytes
  5786 ;; Hardware stack levels used:    1
  5787 ;; Hardware stack levels required when called:    6
  5788 ;; This function calls:
  5789 ;;		_do_update_pwm
  5790 ;; This function is called by:
  5791 ;;		_Monitor_Heater
  5792 ;; This function uses a non-reentrant model
  5793 ;;
  5794                           
  5795                           	psect	text20
  5796  003D7C                     __ptext20:
  5797                           	opt stack 0
  5798  003D7C                     _Turn_On_Fan:
  5799                           	opt stack 23
  5800                           
  5801                           ;Fan_Support.c: 77: do_update_pwm(duty_cycle);
  5802                           
  5803                           ;incstack = 0
  5804  003D7C  505D               	movf	_duty_cycle,w,c
  5805  003D7E  EC8B  F014         	call	_do_update_pwm
  5806                           
  5807                           ;Fan_Support.c: 78: HEATER = 1;
  5808  003D82  0E01               	movlw	1
  5809  003D84  6E50               	movwf	_HEATER,c
  5810                           
  5811                           ;Fan_Support.c: 79: PORTAbits.RA3 = 1;
  5812  003D86  8680               	bsf	3968,3,c	;volatile
  5813                           
  5814                           ;Fan_Support.c: 80: PORTAbits.RA5 = 1;
  5815  003D88  8A80               	bsf	3968,5,c	;volatile
  5816  003D8A  0012               	return		;funcret
  5817  003D8C                     __end_of_Turn_On_Fan:
  5818                           	opt stack 0
  5819                           tblptru	equ	0xFF8
  5820                           tblptrh	equ	0xFF7
  5821                           tblptrl	equ	0xFF6
  5822                           tablat	equ	0xFF5
  5823                           prodl	equ	0xFF3
  5824                           postinc0	equ	0xFEE
  5825                           wreg	equ	0xFE8
  5826                           postdec1	equ	0xFE5
  5827                           fsr1l	equ	0xFE1
  5828                           status	equ	0xFD8
  5829                           
  5830 ;; *************** function _Do_Setup_Time *****************
  5831 ;; Defined at:
  5832 ;;		line 33 in file "Setup_Time.c"
  5833 ;; Parameters:    Size  Location     Type
  5834 ;;		None
  5835 ;; Auto vars:     Size  Location     Type
  5836 ;;		None
  5837 ;; Return value:  Size  Location     Type
  5838 ;;                  2   70[None  ] int 
  5839 ;; Registers used:
  5840 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5841 ;; Tracked objects:
  5842 ;;		On entry : 0/0
  5843 ;;		On exit  : 0/0
  5844 ;;		Unchanged: 0/0
  5845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5849 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5850 ;;Total ram usage:        0 bytes
  5851 ;; Hardware stack levels used:    1
  5852 ;; Hardware stack levels required when called:   12
  5853 ;; This function calls:
  5854 ;;		_DS3231_Read_Time
  5855 ;;		_Decrease_Time
  5856 ;;		_Do_Beep_Bad
  5857 ;;		_Do_Beep_Good
  5858 ;;		_Do_Save_New_Time
  5859 ;;		_Exit_Time_Setup
  5860 ;;		_Go_Next_Field
  5861 ;;		_Go_Prev_Field
  5862 ;;		_Increase_Time
  5863 ;;		_Initialize_Setup_Time_Screen
  5864 ;;		_Update_Setup_Time_Screen
  5865 ;;		_bcd_2_dec
  5866 ;;		_check_for_button_input
  5867 ;; This function is called by:
  5868 ;;		_main
  5869 ;; This function uses a non-reentrant model
  5870 ;;
  5871                           
  5872                           	psect	text21
  5873  002610                     __ptext21:
  5874                           	opt stack 0
  5875  002610                     _Do_Setup_Time:
  5876                           	opt stack 18
  5877                           
  5878                           ;Setup_Time.c: 36: Select_Field = 0;
  5879                           
  5880                           ;incstack = 0
  5881  002610  0E00               	movlw	0
  5882  002612  6E53               	movwf	_Select_Field,c
  5883                           
  5884                           ;Setup_Time.c: 38: DS3231_Read_Time();
  5885  002614  EC72  F019         	call	_DS3231_Read_Time	;wreg free
  5886                           
  5887                           ;Setup_Time.c: 39: setup_second = bcd_2_dec(second);
  5888  002618  5063               	movf	_second,w,c
  5889  00261A  ECFD  F01C         	call	_bcd_2_dec
  5890  00261E  6E6C               	movwf	_setup_second,c
  5891                           
  5892                           ;Setup_Time.c: 40: setup_minute = bcd_2_dec(minute);;
  5893  002620  5060               	movf	_minute,w,c
  5894  002622  ECFD  F01C         	call	_bcd_2_dec
  5895  002626  6E6A               	movwf	_setup_minute,c
  5896                           
  5897                           ;Setup_Time.c: 41: setup_hour = bcd_2_dec(hour);;
  5898  002628  505F               	movf	_hour,w,c
  5899  00262A  ECFD  F01C         	call	_bcd_2_dec
  5900  00262E  6E69               	movwf	_setup_hour,c
  5901                           
  5902                           ;Setup_Time.c: 42: setup_day = bcd_2_dec(day);;
  5903  002630  505B               	movf	_day,w,c
  5904  002632  ECFD  F01C         	call	_bcd_2_dec
  5905  002636  6E67               	movwf	_setup_day,c
  5906                           
  5907                           ;Setup_Time.c: 43: setup_month = bcd_2_dec(month);;
  5908  002638  5061               	movf	_month,w,c
  5909  00263A  ECFD  F01C         	call	_bcd_2_dec
  5910  00263E  6E6B               	movwf	_setup_month,c
  5911                           
  5912                           ;Setup_Time.c: 44: setup_year = bcd_2_dec(year);;
  5913  002640  506E               	movf	_year,w,c
  5914  002642  ECFD  F01C         	call	_bcd_2_dec
  5915  002646  6E6D               	movwf	_setup_year,c
  5916                           
  5917                           ;Setup_Time.c: 46: Initialize_Setup_Time_Screen();
  5918  002648  EC71  F00D         	call	_Initialize_Setup_Time_Screen	;wreg free
  5919                           
  5920                           ;Setup_Time.c: 47: Update_Setup_Time_Screen();
  5921  00264C  EC1F  F00A         	call	_Update_Setup_Time_Screen	;wreg free
  5922                           
  5923                           ;Setup_Time.c: 48: In_Time_Setup = 1;
  5924  002650  0E01               	movlw	1
  5925  002652  0100               	movlb	0	; () banked
  5926  002654  6FFA               	movwf	_In_Time_Setup& (0+255),b
  5927                           
  5928                           ;Setup_Time.c: 50: while (In_Time_Setup == 1)
  5929  002656  D03C               	goto	l9829
  5930  002658                     l9793:
  5931                           
  5932                           ; BSR set to: 0
  5933                           ;Setup_Time.c: 51: {
  5934                           ;Setup_Time.c: 52: if (check_for_button_input() == 1)
  5935  002658  EC1A  F018         	call	_check_for_button_input	;wreg free
  5936  00265C  06E8               	decf	wreg,f,c
  5937  00265E  A4D8               	btfss	status,2,c
  5938  002660  D037               	goto	l9829
  5939                           
  5940                           ;Setup_Time.c: 53: {
  5941                           ;Setup_Time.c: 55: if (found >= 3 && found <= 8)
  5942  002662  0E02               	movlw	2
  5943  002664  645E               	cpfsgt	_found,c
  5944  002666  D031               	goto	l9827
  5945  002668  0E09               	movlw	9
  5946  00266A  605E               	cpfslt	_found,c
  5947  00266C  D02E               	goto	l9827
  5948                           
  5949                           ;Setup_Time.c: 56: {
  5950                           ;Setup_Time.c: 57: Do_Beep_Good();
  5951  00266E  EC4F  F01E         	call	_Do_Beep_Good	;wreg free
  5952                           
  5953                           ;Setup_Time.c: 58: if (found == 3) Go_Prev_Field();
  5954  002672  0E03               	movlw	3
  5955  002674  185E               	xorwf	_found,w,c
  5956  002676  A4D8               	btfss	status,2,c
  5957  002678  D003               	goto	l9805
  5958  00267A  ECDC  F01D         	call	_Go_Prev_Field	;wreg free
  5959  00267E  D000               	goto	l9805
  5960  002680                     l9805:
  5961                           
  5962                           ;Setup_Time.c: 59: if (found == 4) Go_Next_Field();
  5963  002680  0E04               	movlw	4
  5964  002682  185E               	xorwf	_found,w,c
  5965  002684  A4D8               	btfss	status,2,c
  5966  002686  D003               	goto	l9809
  5967  002688  ECE8  F01D         	call	_Go_Next_Field	;wreg free
  5968  00268C  D000               	goto	l9809
  5969  00268E                     l9809:
  5970                           
  5971                           ;Setup_Time.c: 60: if (found == 5) Do_Save_New_Time();
  5972  00268E  0E05               	movlw	5
  5973  002690  185E               	xorwf	_found,w,c
  5974  002692  A4D8               	btfss	status,2,c
  5975  002694  D003               	goto	l9813
  5976  002696  EC3B  F01E         	call	_Do_Save_New_Time	;wreg free
  5977  00269A  D000               	goto	l9813
  5978  00269C                     l9813:
  5979                           
  5980                           ;Setup_Time.c: 61: if (found == 6) Decrease_Time();
  5981  00269C  0E06               	movlw	6
  5982  00269E  185E               	xorwf	_found,w,c
  5983  0026A0  A4D8               	btfss	status,2,c
  5984  0026A2  D003               	goto	l9817
  5985  0026A4  EC05  F017         	call	_Decrease_Time	;wreg free
  5986  0026A8  D000               	goto	l9817
  5987  0026AA                     l9817:
  5988                           
  5989                           ;Setup_Time.c: 62: if (found == 7) Increase_Time();
  5990  0026AA  0E07               	movlw	7
  5991  0026AC  185E               	xorwf	_found,w,c
  5992  0026AE  A4D8               	btfss	status,2,c
  5993  0026B0  D003               	goto	l9821
  5994  0026B2  ECBD  F016         	call	_Increase_Time	;wreg free
  5995  0026B6  D000               	goto	l9821
  5996  0026B8                     l9821:
  5997                           
  5998                           ;Setup_Time.c: 63: if (found == 8) Exit_Time_Setup();
  5999  0026B8  0E08               	movlw	8
  6000  0026BA  185E               	xorwf	_found,w,c
  6001  0026BC  A4D8               	btfss	status,2,c
  6002  0026BE  D003               	goto	l9825
  6003  0026C0  ECC6  F01E         	call	_Exit_Time_Setup	;wreg free
  6004  0026C4  D000               	goto	l9825
  6005  0026C6                     l9825:
  6006                           
  6007                           ;Setup_Time.c: 64: found = 0xff;
  6008  0026C6  685E               	setf	_found,c
  6009                           
  6010                           ;Setup_Time.c: 65: }
  6011  0026C8  D003               	goto	l9829
  6012  0026CA                     l9827:
  6013                           
  6014                           ;Setup_Time.c: 66: else
  6015                           ;Setup_Time.c: 67: {
  6016                           ;Setup_Time.c: 68: Do_Beep_Bad();
  6017  0026CA  EC59  F01E         	call	_Do_Beep_Bad	;wreg free
  6018  0026CE  D000               	goto	l9829
  6019  0026D0                     l9829:
  6020  0026D0  0100               	movlb	0	; () banked
  6021  0026D2  05FA               	decf	_In_Time_Setup& (0+255),w,b
  6022  0026D4  B4D8               	btfsc	status,2,c
  6023  0026D6  D7C0               	goto	l9793
  6024                           
  6025                           ; BSR set to: 0
  6026                           
  6027                           ; BSR set to: 0
  6028  0026D8  0012               	return		;funcret
  6029  0026DA                     __end_of_Do_Setup_Time:
  6030                           	opt stack 0
  6031                           tblptru	equ	0xFF8
  6032                           tblptrh	equ	0xFF7
  6033                           tblptrl	equ	0xFF6
  6034                           tablat	equ	0xFF5
  6035                           prodl	equ	0xFF3
  6036                           postinc0	equ	0xFEE
  6037                           wreg	equ	0xFE8
  6038                           postdec1	equ	0xFE5
  6039                           fsr1l	equ	0xFE1
  6040                           status	equ	0xFD8
  6041                           
  6042 ;; *************** function _Initialize_Setup_Time_Screen *****************
  6043 ;; Defined at:
  6044 ;;		line 183 in file "Setup_Time.c"
  6045 ;; Parameters:    Size  Location     Type
  6046 ;;		None
  6047 ;; Auto vars:     Size  Location     Type
  6048 ;;		None
  6049 ;; Return value:  Size  Location     Type
  6050 ;;		None               void
  6051 ;; Registers used:
  6052 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6053 ;; Tracked objects:
  6054 ;;		On entry : 0/0
  6055 ;;		On exit  : 0/0
  6056 ;;		Unchanged: 0/0
  6057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6061 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6062 ;;Total ram usage:        0 bytes
  6063 ;; Hardware stack levels used:    1
  6064 ;; Hardware stack levels required when called:   10
  6065 ;; This function calls:
  6066 ;;		_drawtext
  6067 ;;		_fillRect
  6068 ;;		_fillScreen
  6069 ;;		_strcpy
  6070 ;; This function is called by:
  6071 ;;		_Do_Setup_Time
  6072 ;; This function uses a non-reentrant model
  6073 ;;
  6074                           
  6075                           	psect	text22
  6076  001AE2                     __ptext22:
  6077                           	opt stack 0
  6078  001AE2                     _Initialize_Setup_Time_Screen:
  6079                           	opt stack 19
  6080                           
  6081                           ;Setup_Time.c: 185: fillScreen(0x0000);
  6082                           
  6083                           ; BSR set to: 0
  6084                           ;incstack = 0
  6085  001AE2  0E00               	movlw	0
  6086  001AE4  6E25               	movwf	fillScreen@color+1,c
  6087  001AE6  0E00               	movlw	0
  6088  001AE8  6E24               	movwf	fillScreen@color,c
  6089  001AEA  ECB3  F01D         	call	_fillScreen	;wreg free
  6090                           
  6091                           ;Setup_Time.c: 187: strcpy(txt, "ECE3301L Sp'22 Sx\0");
  6092  001AEE  C04E  F011         	movff	_txt,strcpy@to
  6093  001AF2  C04F  F012         	movff	_txt+1,strcpy@to+1
  6094  001AF6  0E15               	movlw	low STR_27
  6095  001AF8  6E13               	movwf	strcpy@from,c
  6096  001AFA  0EFF               	movlw	high STR_27
  6097  001AFC  6E14               	movwf	strcpy@from+1,c
  6098  001AFE  ECCC  F01C         	call	_strcpy	;wreg free
  6099                           
  6100                           ;Setup_Time.c: 188: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  6101  001B02  0E01               	movlw	1
  6102  001B04  6E39               	movwf	drawtext@y,c
  6103  001B06  C04E  F03A         	movff	_txt,drawtext@_text
  6104  001B0A  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  6105  001B0E  0EFF               	movlw	255
  6106  001B10  6E3D               	movwf	drawtext@color+1,c
  6107  001B12  683C               	setf	drawtext@color,c
  6108  001B14  0E00               	movlw	0
  6109  001B16  6E3F               	movwf	drawtext@bg+1,c
  6110  001B18  0E00               	movlw	0
  6111  001B1A  6E3E               	movwf	drawtext@bg,c
  6112  001B1C  0E01               	movlw	1
  6113  001B1E  6E40               	movwf	drawtext@size,c
  6114  001B20  0E01               	movlw	1
  6115  001B22  ECEA  F00C         	call	_drawtext
  6116                           
  6117                           ;Setup_Time.c: 191: strcpy(txt, "Time Setup\0");
  6118  001B26  C04E  F011         	movff	_txt,strcpy@to
  6119  001B2A  C04F  F012         	movff	_txt+1,strcpy@to+1
  6120  001B2E  0E88               	movlw	low STR_32
  6121  001B30  6E13               	movwf	strcpy@from,c
  6122  001B32  0EFF               	movlw	high STR_32
  6123  001B34  6E14               	movwf	strcpy@from+1,c
  6124  001B36  ECCC  F01C         	call	_strcpy	;wreg free
  6125                           
  6126                           ;Setup_Time.c: 192: drawtext(1+3 , 1+15, txt, 0xF81F, 0x0000, 2);
  6127  001B3A  0E10               	movlw	16
  6128  001B3C  6E39               	movwf	drawtext@y,c
  6129  001B3E  C04E  F03A         	movff	_txt,drawtext@_text
  6130  001B42  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  6131  001B46  0EF8               	movlw	248
  6132  001B48  6E3D               	movwf	drawtext@color+1,c
  6133  001B4A  0E1F               	movlw	31
  6134  001B4C  6E3C               	movwf	drawtext@color,c
  6135  001B4E  0E00               	movlw	0
  6136  001B50  6E3F               	movwf	drawtext@bg+1,c
  6137  001B52  0E00               	movlw	0
  6138  001B54  6E3E               	movwf	drawtext@bg,c
  6139  001B56  0E02               	movlw	2
  6140  001B58  6E40               	movwf	drawtext@size,c
  6141  001B5A  0E04               	movlw	4
  6142  001B5C  ECEA  F00C         	call	_drawtext
  6143                           
  6144                           ;Setup_Time.c: 194: strcpy(txt, "Time");
  6145  001B60  C04E  F011         	movff	_txt,strcpy@to
  6146  001B64  C04F  F012         	movff	_txt+1,strcpy@to+1
  6147  001B68  0EB0               	movlw	low (STR_10+6)
  6148  001B6A  6E13               	movwf	strcpy@from,c
  6149  001B6C  0EFF               	movlw	high (STR_10+6)
  6150  001B6E  6E14               	movwf	strcpy@from+1,c
  6151  001B70  ECCC  F01C         	call	_strcpy	;wreg free
  6152                           
  6153                           ;Setup_Time.c: 195: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  6154  001B74  0E28               	movlw	40
  6155  001B76  6E39               	movwf	drawtext@y,c
  6156  001B78  C04E  F03A         	movff	_txt,drawtext@_text
  6157  001B7C  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  6158  001B80  0E00               	movlw	0
  6159  001B82  6E3D               	movwf	drawtext@color+1,c
  6160  001B84  0E1F               	movlw	31
  6161  001B86  6E3C               	movwf	drawtext@color,c
  6162  001B88  0E00               	movlw	0
  6163  001B8A  6E3F               	movwf	drawtext@bg+1,c
  6164  001B8C  0E00               	movlw	0
  6165  001B8E  6E3E               	movwf	drawtext@bg,c
  6166  001B90  0E01               	movlw	1
  6167  001B92  6E40               	movwf	drawtext@size,c
  6168  001B94  0E32               	movlw	50
  6169  001B96  ECEA  F00C         	call	_drawtext
  6170                           
  6171                           ;Setup_Time.c: 197: fillRect(15-1, 52+16, 25,2,0x07FF);
  6172  001B9A  0E44               	movlw	68
  6173  001B9C  6E23               	movwf	fillRect@y,c
  6174  001B9E  0E19               	movlw	25
  6175  001BA0  6E24               	movwf	fillRect@w,c
  6176  001BA2  0E02               	movlw	2
  6177  001BA4  6E25               	movwf	fillRect@h,c
  6178  001BA6  0E07               	movlw	7
  6179  001BA8  6E27               	movwf	fillRect@color+1,c
  6180  001BAA  6826               	setf	fillRect@color,c
  6181  001BAC  0E0E               	movlw	14
  6182  001BAE  EC96  F01B         	call	_fillRect
  6183                           
  6184                           ;Setup_Time.c: 198: strcpy(txt, "Date");
  6185  001BB2  C04E  F011         	movff	_txt,strcpy@to
  6186  001BB6  C04F  F012         	movff	_txt+1,strcpy@to+1
  6187  001BBA  0EDF               	movlw	low STR_9
  6188  001BBC  6E13               	movwf	strcpy@from,c
  6189  001BBE  0EFF               	movlw	high STR_9
  6190  001BC0  6E14               	movwf	strcpy@from+1,c
  6191  001BC2  ECCC  F01C         	call	_strcpy	;wreg free
  6192                           
  6193                           ;Setup_Time.c: 199: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  6194  001BC6  0E47               	movlw	71
  6195  001BC8  6E39               	movwf	drawtext@y,c
  6196  001BCA  C04E  F03A         	movff	_txt,drawtext@_text
  6197  001BCE  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  6198  001BD2  0EF8               	movlw	248
  6199  001BD4  6E3D               	movwf	drawtext@color+1,c
  6200  001BD6  0E00               	movlw	0
  6201  001BD8  6E3C               	movwf	drawtext@color,c
  6202  001BDA  0E00               	movlw	0
  6203  001BDC  6E3F               	movwf	drawtext@bg+1,c
  6204  001BDE  0E00               	movlw	0
  6205  001BE0  6E3E               	movwf	drawtext@bg,c
  6206  001BE2  0E01               	movlw	1
  6207  001BE4  6E40               	movwf	drawtext@size,c
  6208  001BE6  0E32               	movlw	50
  6209  001BE8  ECEA  F00C         	call	_drawtext
  6210  001BEC  0012               	return		;funcret
  6211  001BEE                     __end_of_Initialize_Setup_Time_Screen:
  6212                           	opt stack 0
  6213                           tblptru	equ	0xFF8
  6214                           tblptrh	equ	0xFF7
  6215                           tblptrl	equ	0xFF6
  6216                           tablat	equ	0xFF5
  6217                           prodl	equ	0xFF3
  6218                           postinc0	equ	0xFEE
  6219                           wreg	equ	0xFE8
  6220                           postdec1	equ	0xFE5
  6221                           fsr1l	equ	0xFE1
  6222                           status	equ	0xFD8
  6223                           
  6224 ;; *************** function _Increase_Time *****************
  6225 ;; Defined at:
  6226 ;;		line 74 in file "Setup_Time.c"
  6227 ;; Parameters:    Size  Location     Type
  6228 ;;		None
  6229 ;; Auto vars:     Size  Location     Type
  6230 ;;		None
  6231 ;; Return value:  Size  Location     Type
  6232 ;;		None               void
  6233 ;; Registers used:
  6234 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6235 ;; Tracked objects:
  6236 ;;		On entry : 0/0
  6237 ;;		On exit  : 0/0
  6238 ;;		Unchanged: 0/0
  6239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6244 ;;Total ram usage:        0 bytes
  6245 ;; Hardware stack levels used:    1
  6246 ;; Hardware stack levels required when called:   11
  6247 ;; This function calls:
  6248 ;;		_Update_Setup_Time_Screen
  6249 ;; This function is called by:
  6250 ;;		_Do_Setup_Time
  6251 ;; This function uses a non-reentrant model
  6252 ;;
  6253                           
  6254                           	psect	text23
  6255  002D7A                     __ptext23:
  6256                           	opt stack 0
  6257  002D7A                     _Increase_Time:
  6258                           	opt stack 18
  6259                           
  6260                           ;Setup_Time.c: 76: switch (Select_Field)
  6261                           
  6262                           ;incstack = 0
  6263  002D7A  D030               	goto	l9433
  6264  002D7C                     l9395:
  6265                           
  6266                           ;Setup_Time.c: 79: setup_hour++;
  6267  002D7C  2A69               	incf	_setup_hour,f,c
  6268                           
  6269                           ;Setup_Time.c: 80: if (setup_hour == 24) setup_hour = 0;
  6270  002D7E  0E18               	movlw	24
  6271  002D80  1869               	xorwf	_setup_hour,w,c
  6272  002D82  A4D8               	btfss	status,2,c
  6273  002D84  D03F               	goto	l9435
  6274  002D86  0E00               	movlw	0
  6275  002D88  6E69               	movwf	_setup_hour,c
  6276                           
  6277                           ;Setup_Time.c: 81: break;
  6278  002D8A  D03C               	goto	l9435
  6279  002D8C                     l9401:
  6280                           
  6281                           ;Setup_Time.c: 84: setup_minute++;
  6282  002D8C  2A6A               	incf	_setup_minute,f,c
  6283                           
  6284                           ;Setup_Time.c: 85: if (setup_minute == 60) setup_minute = 0;
  6285  002D8E  0E3C               	movlw	60
  6286  002D90  186A               	xorwf	_setup_minute,w,c
  6287  002D92  A4D8               	btfss	status,2,c
  6288  002D94  D037               	goto	l9435
  6289  002D96  0E00               	movlw	0
  6290  002D98  6E6A               	movwf	_setup_minute,c
  6291                           
  6292                           ;Setup_Time.c: 86: break;
  6293  002D9A  D034               	goto	l9435
  6294  002D9C                     l9407:
  6295                           
  6296                           ;Setup_Time.c: 89: setup_second++;
  6297  002D9C  2A6C               	incf	_setup_second,f,c
  6298                           
  6299                           ;Setup_Time.c: 90: if (setup_second == 60) setup_second = 0;
  6300  002D9E  0E3C               	movlw	60
  6301  002DA0  186C               	xorwf	_setup_second,w,c
  6302  002DA2  A4D8               	btfss	status,2,c
  6303  002DA4  D02F               	goto	l9435
  6304  002DA6  0E00               	movlw	0
  6305  002DA8  6E6C               	movwf	_setup_second,c
  6306                           
  6307                           ;Setup_Time.c: 91: break;
  6308  002DAA  D02C               	goto	l9435
  6309  002DAC                     l9413:
  6310                           
  6311                           ;Setup_Time.c: 94: setup_month++;
  6312  002DAC  2A6B               	incf	_setup_month,f,c
  6313                           
  6314                           ;Setup_Time.c: 95: if (setup_month == 13) setup_month = 1;
  6315  002DAE  0E0D               	movlw	13
  6316  002DB0  186B               	xorwf	_setup_month,w,c
  6317  002DB2  A4D8               	btfss	status,2,c
  6318  002DB4  D027               	goto	l9435
  6319  002DB6  0E01               	movlw	1
  6320  002DB8  6E6B               	movwf	_setup_month,c
  6321                           
  6322                           ;Setup_Time.c: 96: break;
  6323  002DBA  D024               	goto	l9435
  6324  002DBC                     l9419:
  6325                           
  6326                           ;Setup_Time.c: 99: setup_day++;
  6327  002DBC  2A67               	incf	_setup_day,f,c
  6328                           
  6329                           ;Setup_Time.c: 100: if (setup_day == 32) setup_day = 1;
  6330  002DBE  0E20               	movlw	32
  6331  002DC0  1867               	xorwf	_setup_day,w,c
  6332  002DC2  A4D8               	btfss	status,2,c
  6333  002DC4  D01F               	goto	l9435
  6334  002DC6  0E01               	movlw	1
  6335  002DC8  6E67               	movwf	_setup_day,c
  6336                           
  6337                           ;Setup_Time.c: 101: break;
  6338  002DCA  D01C               	goto	l9435
  6339  002DCC                     l9425:
  6340                           
  6341                           ;Setup_Time.c: 104: setup_year++;
  6342  002DCC  2A6D               	incf	_setup_year,f,c
  6343                           
  6344                           ;Setup_Time.c: 105: if (setup_year == 100) setup_year = 0;
  6345  002DCE  0E64               	movlw	100
  6346  002DD0  186D               	xorwf	_setup_year,w,c
  6347  002DD2  A4D8               	btfss	status,2,c
  6348  002DD4  D017               	goto	l9435
  6349  002DD6  0E00               	movlw	0
  6350  002DD8  6E6D               	movwf	_setup_year,c
  6351                           
  6352                           ;Setup_Time.c: 110: }
  6353                           
  6354                           ;Setup_Time.c: 109: break;
  6355                           
  6356                           ;Setup_Time.c: 108: default:
  6357                           
  6358                           ;Setup_Time.c: 106: break;
  6359  002DDA  D014               	goto	l9435
  6360  002DDC                     l9433:
  6361  002DDC  5053               	movf	_Select_Field,w,c
  6362                           
  6363                           ; Switch size 1, requested type "space"
  6364                           ; Number of cases is 6, Range of values is 0 to 5
  6365                           ; switch strategies available:
  6366                           ; Name         Instructions Cycles
  6367                           ; simple_byte           19    10 (average)
  6368                           ;	Chosen strategy is simple_byte
  6369  002DDE  0A00               	xorlw	0	; case 0
  6370  002DE0  B4D8               	btfsc	status,2,c
  6371  002DE2  D7CC               	goto	l9395
  6372  002DE4  0A01               	xorlw	1	; case 1
  6373  002DE6  B4D8               	btfsc	status,2,c
  6374  002DE8  D7D1               	goto	l9401
  6375  002DEA  0A03               	xorlw	3	; case 2
  6376  002DEC  B4D8               	btfsc	status,2,c
  6377  002DEE  D7D6               	goto	l9407
  6378  002DF0  0A01               	xorlw	1	; case 3
  6379  002DF2  B4D8               	btfsc	status,2,c
  6380  002DF4  D7DB               	goto	l9413
  6381  002DF6  0A07               	xorlw	7	; case 4
  6382  002DF8  B4D8               	btfsc	status,2,c
  6383  002DFA  D7E0               	goto	l9419
  6384  002DFC  0A01               	xorlw	1	; case 5
  6385  002DFE  B4D8               	btfsc	status,2,c
  6386  002E00  D7E5               	goto	l9425
  6387  002E02  D000               	goto	l9435
  6388  002E04                     l9435:
  6389                           
  6390                           ;Setup_Time.c: 111: Update_Setup_Time_Screen();
  6391  002E04  EC1F  F00A         	call	_Update_Setup_Time_Screen	;wreg free
  6392  002E08  0012               	return		;funcret
  6393  002E0A                     __end_of_Increase_Time:
  6394                           	opt stack 0
  6395                           tblptru	equ	0xFF8
  6396                           tblptrh	equ	0xFF7
  6397                           tblptrl	equ	0xFF6
  6398                           tablat	equ	0xFF5
  6399                           prodl	equ	0xFF3
  6400                           postinc0	equ	0xFEE
  6401                           wreg	equ	0xFE8
  6402                           postdec1	equ	0xFE5
  6403                           fsr1l	equ	0xFE1
  6404                           status	equ	0xFD8
  6405                           
  6406 ;; *************** function _Go_Prev_Field *****************
  6407 ;; Defined at:
  6408 ;;		line 162 in file "Setup_Time.c"
  6409 ;; Parameters:    Size  Location     Type
  6410 ;;		None
  6411 ;; Auto vars:     Size  Location     Type
  6412 ;;		None
  6413 ;; Return value:  Size  Location     Type
  6414 ;;		None               void
  6415 ;; Registers used:
  6416 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6417 ;; Tracked objects:
  6418 ;;		On entry : 0/0
  6419 ;;		On exit  : 0/0
  6420 ;;		Unchanged: 0/0
  6421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6426 ;;Total ram usage:        0 bytes
  6427 ;; Hardware stack levels used:    1
  6428 ;; Hardware stack levels required when called:    9
  6429 ;; This function calls:
  6430 ;;		_Update_Setup_Screen_Cursor_Backward
  6431 ;; This function is called by:
  6432 ;;		_Do_Setup_Time
  6433 ;; This function uses a non-reentrant model
  6434 ;;
  6435                           
  6436                           	psect	text24
  6437  003BB8                     __ptext24:
  6438                           	opt stack 0
  6439  003BB8                     _Go_Prev_Field:
  6440                           	opt stack 20
  6441                           
  6442                           ;Setup_Time.c: 164: if (Select_Field == 0) Select_Field = 5;
  6443                           
  6444                           ;incstack = 0
  6445  003BB8  5053               	movf	_Select_Field,w,c
  6446  003BBA  A4D8               	btfss	status,2,c
  6447  003BBC  D003               	goto	l9331
  6448  003BBE  0E05               	movlw	5
  6449  003BC0  6E53               	movwf	_Select_Field,c
  6450  003BC2  D002               	goto	l9333
  6451  003BC4                     l9331:
  6452                           
  6453                           ;Setup_Time.c: 165: else Select_Field--;
  6454  003BC4  0653               	decf	_Select_Field,f,c
  6455  003BC6  D000               	goto	l9333
  6456  003BC8                     l9333:
  6457                           
  6458                           ;Setup_Time.c: 166: Update_Setup_Screen_Cursor_Backward(Select_Field);
  6459  003BC8  5053               	movf	_Select_Field,w,c
  6460  003BCA  EC6E  F008         	call	_Update_Setup_Screen_Cursor_Backward
  6461  003BCE  0012               	return		;funcret
  6462  003BD0                     __end_of_Go_Prev_Field:
  6463                           	opt stack 0
  6464                           tblptru	equ	0xFF8
  6465                           tblptrh	equ	0xFF7
  6466                           tblptrl	equ	0xFF6
  6467                           tablat	equ	0xFF5
  6468                           prodl	equ	0xFF3
  6469                           postinc0	equ	0xFEE
  6470                           wreg	equ	0xFE8
  6471                           postdec1	equ	0xFE5
  6472                           fsr1l	equ	0xFE1
  6473                           status	equ	0xFD8
  6474                           
  6475 ;; *************** function _Go_Next_Field *****************
  6476 ;; Defined at:
  6477 ;;		line 153 in file "Setup_Time.c"
  6478 ;; Parameters:    Size  Location     Type
  6479 ;;		None
  6480 ;; Auto vars:     Size  Location     Type
  6481 ;;		None
  6482 ;; Return value:  Size  Location     Type
  6483 ;;		None               void
  6484 ;; Registers used:
  6485 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6486 ;; Tracked objects:
  6487 ;;		On entry : 0/0
  6488 ;;		On exit  : 0/0
  6489 ;;		Unchanged: 0/0
  6490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6494 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6495 ;;Total ram usage:        0 bytes
  6496 ;; Hardware stack levels used:    1
  6497 ;; Hardware stack levels required when called:    9
  6498 ;; This function calls:
  6499 ;;		_Update_Setup_Screen_Cursor_Forward
  6500 ;; This function is called by:
  6501 ;;		_Do_Setup_Time
  6502 ;; This function uses a non-reentrant model
  6503 ;;
  6504                           
  6505                           	psect	text25
  6506  003BD0                     __ptext25:
  6507                           	opt stack 0
  6508  003BD0                     _Go_Next_Field:
  6509                           	opt stack 20
  6510                           
  6511                           ;Setup_Time.c: 156: Select_Field++;
  6512                           
  6513                           ;incstack = 0
  6514  003BD0  2A53               	incf	_Select_Field,f,c
  6515                           
  6516                           ;Setup_Time.c: 157: if (Select_Field == 6) Select_Field = 0;
  6517  003BD2  0E06               	movlw	6
  6518  003BD4  1853               	xorwf	_Select_Field,w,c
  6519  003BD6  A4D8               	btfss	status,2,c
  6520  003BD8  D003               	goto	l9341
  6521  003BDA  0E00               	movlw	0
  6522  003BDC  6E53               	movwf	_Select_Field,c
  6523  003BDE  D000               	goto	l9341
  6524  003BE0                     l9341:
  6525                           
  6526                           ;Setup_Time.c: 158: Update_Setup_Screen_Cursor_Forward(Select_Field);
  6527  003BE0  5053               	movf	_Select_Field,w,c
  6528  003BE2  EC91  F007         	call	_Update_Setup_Screen_Cursor_Forward
  6529  003BE6  0012               	return		;funcret
  6530  003BE8                     __end_of_Go_Next_Field:
  6531                           	opt stack 0
  6532                           tblptru	equ	0xFF8
  6533                           tblptrh	equ	0xFF7
  6534                           tblptrl	equ	0xFF6
  6535                           tablat	equ	0xFF5
  6536                           prodl	equ	0xFF3
  6537                           postinc0	equ	0xFEE
  6538                           wreg	equ	0xFE8
  6539                           postdec1	equ	0xFE5
  6540                           fsr1l	equ	0xFE1
  6541                           status	equ	0xFD8
  6542                           
  6543 ;; *************** function _Exit_Time_Setup *****************
  6544 ;; Defined at:
  6545 ;;		line 177 in file "Setup_Time.c"
  6546 ;; Parameters:    Size  Location     Type
  6547 ;;		None
  6548 ;; Auto vars:     Size  Location     Type
  6549 ;;		None
  6550 ;; Return value:  Size  Location     Type
  6551 ;;		None               void
  6552 ;; Registers used:
  6553 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6554 ;; Tracked objects:
  6555 ;;		On entry : 0/0
  6556 ;;		On exit  : 0/0
  6557 ;;		Unchanged: 0/0
  6558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6562 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6563 ;;Total ram usage:        0 bytes
  6564 ;; Hardware stack levels used:    1
  6565 ;; Hardware stack levels required when called:   11
  6566 ;; This function calls:
  6567 ;;		_DS3231_Read_Time
  6568 ;;		_Initialize_Screen
  6569 ;; This function is called by:
  6570 ;;		_Do_Setup_Time
  6571 ;; This function uses a non-reentrant model
  6572 ;;
  6573                           
  6574                           	psect	text26
  6575  003D8C                     __ptext26:
  6576                           	opt stack 0
  6577  003D8C                     _Exit_Time_Setup:
  6578                           	opt stack 18
  6579                           
  6580                           ;Setup_Time.c: 179: DS3231_Read_Time();
  6581                           
  6582                           ;incstack = 0
  6583  003D8C  EC72  F019         	call	_DS3231_Read_Time	;wreg free
  6584                           
  6585                           ;Setup_Time.c: 180: Initialize_Screen();
  6586  003D90  EC37  F003         	call	_Initialize_Screen	;wreg free
  6587                           
  6588                           ;Setup_Time.c: 181: In_Time_Setup = 0;
  6589  003D94  0E00               	movlw	0
  6590  003D96  0100               	movlb	0	; () banked
  6591  003D98  6FFA               	movwf	_In_Time_Setup& (0+255),b
  6592                           
  6593                           ; BSR set to: 0
  6594  003D9A  0012               	return		;funcret
  6595  003D9C                     __end_of_Exit_Time_Setup:
  6596                           	opt stack 0
  6597                           tblptru	equ	0xFF8
  6598                           tblptrh	equ	0xFF7
  6599                           tblptrl	equ	0xFF6
  6600                           tablat	equ	0xFF5
  6601                           prodl	equ	0xFF3
  6602                           postinc0	equ	0xFEE
  6603                           wreg	equ	0xFE8
  6604                           postdec1	equ	0xFE5
  6605                           fsr1l	equ	0xFE1
  6606                           status	equ	0xFD8
  6607                           
  6608 ;; *************** function _Do_Save_New_Time *****************
  6609 ;; Defined at:
  6610 ;;		line 169 in file "Setup_Time.c"
  6611 ;; Parameters:    Size  Location     Type
  6612 ;;		None
  6613 ;; Auto vars:     Size  Location     Type
  6614 ;;		None
  6615 ;; Return value:  Size  Location     Type
  6616 ;;		None               void
  6617 ;; Registers used:
  6618 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6619 ;; Tracked objects:
  6620 ;;		On entry : 0/0
  6621 ;;		On exit  : 0/0
  6622 ;;		Unchanged: 0/0
  6623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6628 ;;Total ram usage:        0 bytes
  6629 ;; Hardware stack levels used:    1
  6630 ;; Hardware stack levels required when called:   11
  6631 ;; This function calls:
  6632 ;;		_DS3231_Read_Time
  6633 ;;		_DS3231_Write_Time
  6634 ;;		_Initialize_Screen
  6635 ;; This function is called by:
  6636 ;;		_Do_Setup_Time
  6637 ;; This function uses a non-reentrant model
  6638 ;;
  6639                           
  6640                           	psect	text27
  6641  003C76                     __ptext27:
  6642                           	opt stack 0
  6643  003C76                     _Do_Save_New_Time:
  6644                           	opt stack 18
  6645                           
  6646                           ;Setup_Time.c: 171: DS3231_Write_Time();
  6647                           
  6648                           ; BSR set to: 0
  6649                           ;incstack = 0
  6650  003C76  EC74  F016         	call	_DS3231_Write_Time	;wreg free
  6651                           
  6652                           ;Setup_Time.c: 172: DS3231_Read_Time();
  6653  003C7A  EC72  F019         	call	_DS3231_Read_Time	;wreg free
  6654                           
  6655                           ;Setup_Time.c: 173: Initialize_Screen();
  6656  003C7E  EC37  F003         	call	_Initialize_Screen	;wreg free
  6657                           
  6658                           ;Setup_Time.c: 174: In_Time_Setup = 0;
  6659  003C82  0E00               	movlw	0
  6660  003C84  0100               	movlb	0	; () banked
  6661  003C86  6FFA               	movwf	_In_Time_Setup& (0+255),b
  6662                           
  6663                           ; BSR set to: 0
  6664  003C88  0012               	return		;funcret
  6665  003C8A                     __end_of_Do_Save_New_Time:
  6666                           	opt stack 0
  6667                           tblptru	equ	0xFF8
  6668                           tblptrh	equ	0xFF7
  6669                           tblptrl	equ	0xFF6
  6670                           tablat	equ	0xFF5
  6671                           prodl	equ	0xFF3
  6672                           postinc0	equ	0xFEE
  6673                           wreg	equ	0xFE8
  6674                           postdec1	equ	0xFE5
  6675                           fsr1l	equ	0xFE1
  6676                           status	equ	0xFD8
  6677                           
  6678 ;; *************** function _DS3231_Write_Time *****************
  6679 ;; Defined at:
  6680 ;;		line 90 in file "I2C_Support.c"
  6681 ;; Parameters:    Size  Location     Type
  6682 ;;		None
  6683 ;; Auto vars:     Size  Location     Type
  6684 ;;  Address         1   12[BANK1 ] unsigned char 
  6685 ;;  Device          1   11[BANK1 ] unsigned char 
  6686 ;; Return value:  Size  Location     Type
  6687 ;;		None               void
  6688 ;; Registers used:
  6689 ;;		wreg, status,2, status,0, cstack
  6690 ;; Tracked objects:
  6691 ;;		On entry : 0/0
  6692 ;;		On exit  : 0/0
  6693 ;;		Unchanged: 0/0
  6694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6696 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6698 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6699 ;;Total ram usage:        2 bytes
  6700 ;; Hardware stack levels used:    1
  6701 ;; Hardware stack levels required when called:    5
  6702 ;; This function calls:
  6703 ;;		_I2C_Start
  6704 ;;		_I2C_Stop
  6705 ;;		_I2C_Write
  6706 ;;		_dec_2_bcd
  6707 ;; This function is called by:
  6708 ;;		_Do_Save_New_Time
  6709 ;; This function uses a non-reentrant model
  6710 ;;
  6711                           
  6712                           	psect	text28
  6713  002CE8                     __ptext28:
  6714                           	opt stack 0
  6715  002CE8                     _DS3231_Write_Time:
  6716                           	opt stack 23
  6717                           
  6718                           ;I2C_Support.c: 92: char Device = 0x68;
  6719                           
  6720                           ; BSR set to: 0
  6721                           ;incstack = 0
  6722  002CE8  0E68               	movlw	104
  6723  002CEA  0101               	movlb	1	; () banked
  6724  002CEC  6F3F               	movwf	DS3231_Write_Time@Device& (0+255),b
  6725                           
  6726                           ;I2C_Support.c: 93: char Address = 0x00;
  6727  002CEE  0E00               	movlw	0
  6728  002CF0  0101               	movlb	1	; () banked
  6729  002CF2  6F40               	movwf	DS3231_Write_Time@Address& (0+255),b
  6730                           
  6731                           ; BSR set to: 1
  6732                           ;I2C_Support.c: 94: second = dec_2_bcd(setup_second);
  6733  002CF4  506C               	movf	_setup_second,w,c
  6734  002CF6  EC0B  F019         	call	_dec_2_bcd
  6735  002CFA  5041               	movf	?_dec_2_bcd,w,c
  6736  002CFC  6E63               	movwf	_second,c
  6737                           
  6738                           ;I2C_Support.c: 95: minute = dec_2_bcd(setup_minute);
  6739  002CFE  506A               	movf	_setup_minute,w,c
  6740  002D00  EC0B  F019         	call	_dec_2_bcd
  6741  002D04  5041               	movf	?_dec_2_bcd,w,c
  6742  002D06  6E60               	movwf	_minute,c
  6743                           
  6744                           ;I2C_Support.c: 96: hour = dec_2_bcd(setup_hour);
  6745  002D08  5069               	movf	_setup_hour,w,c
  6746  002D0A  EC0B  F019         	call	_dec_2_bcd
  6747  002D0E  5041               	movf	?_dec_2_bcd,w,c
  6748  002D10  6E5F               	movwf	_hour,c
  6749                           
  6750                           ;I2C_Support.c: 97: dow = 0x01;
  6751  002D12  0E01               	movlw	1
  6752  002D14  6E5C               	movwf	_dow,c
  6753                           
  6754                           ;I2C_Support.c: 98: day = dec_2_bcd(setup_day);
  6755  002D16  5067               	movf	_setup_day,w,c
  6756  002D18  EC0B  F019         	call	_dec_2_bcd
  6757  002D1C  5041               	movf	?_dec_2_bcd,w,c
  6758  002D1E  6E5B               	movwf	_day,c
  6759                           
  6760                           ;I2C_Support.c: 99: month = dec_2_bcd(setup_month);
  6761  002D20  506B               	movf	_setup_month,w,c
  6762  002D22  EC0B  F019         	call	_dec_2_bcd
  6763  002D26  5041               	movf	?_dec_2_bcd,w,c
  6764  002D28  6E61               	movwf	_month,c
  6765                           
  6766                           ;I2C_Support.c: 100: year = dec_2_bcd(setup_year);
  6767  002D2A  506D               	movf	_setup_year,w,c
  6768  002D2C  EC0B  F019         	call	_dec_2_bcd
  6769  002D30  5041               	movf	?_dec_2_bcd,w,c
  6770  002D32  6E6E               	movwf	_year,c
  6771                           
  6772                           ;I2C_Support.c: 101: I2C_Start();
  6773  002D34  ECA4  F01E         	call	_I2C_Start	;wreg free
  6774                           
  6775                           ;I2C_Support.c: 102: I2C_Write((Device << 1) | 0);
  6776  002D38  0101               	movlb	1	; () banked
  6777  002D3A  513F               	movf	DS3231_Write_Time@Device& (0+255),w,b
  6778  002D3C  253F               	addwf	DS3231_Write_Time@Device& (0+255),w,b
  6779  002D3E  EC3E  F01C         	call	_I2C_Write
  6780                           
  6781                           ;I2C_Support.c: 103: I2C_Write(Address);
  6782  002D42  0101               	movlb	1	; () banked
  6783  002D44  5140               	movf	DS3231_Write_Time@Address& (0+255),w,b
  6784  002D46  EC3E  F01C         	call	_I2C_Write
  6785                           
  6786                           ;I2C_Support.c: 104: I2C_Write(second);
  6787  002D4A  5063               	movf	_second,w,c
  6788  002D4C  EC3E  F01C         	call	_I2C_Write
  6789                           
  6790                           ;I2C_Support.c: 105: I2C_Write(minute);
  6791  002D50  5060               	movf	_minute,w,c
  6792  002D52  EC3E  F01C         	call	_I2C_Write
  6793                           
  6794                           ;I2C_Support.c: 106: I2C_Write(hour);
  6795  002D56  505F               	movf	_hour,w,c
  6796  002D58  EC3E  F01C         	call	_I2C_Write
  6797                           
  6798                           ;I2C_Support.c: 107: I2C_Write(dow);
  6799  002D5C  505C               	movf	_dow,w,c
  6800  002D5E  EC3E  F01C         	call	_I2C_Write
  6801                           
  6802                           ;I2C_Support.c: 108: I2C_Write(day);
  6803  002D62  505B               	movf	_day,w,c
  6804  002D64  EC3E  F01C         	call	_I2C_Write
  6805                           
  6806                           ;I2C_Support.c: 109: I2C_Write(month);
  6807  002D68  5061               	movf	_month,w,c
  6808  002D6A  EC3E  F01C         	call	_I2C_Write
  6809                           
  6810                           ;I2C_Support.c: 110: I2C_Write(year);
  6811  002D6E  506E               	movf	_year,w,c
  6812  002D70  EC3E  F01C         	call	_I2C_Write
  6813                           
  6814                           ;I2C_Support.c: 111: I2C_Stop();
  6815  002D74  EC9B  F01E         	call	_I2C_Stop	;wreg free
  6816  002D78  0012               	return		;funcret
  6817  002D7A                     __end_of_DS3231_Write_Time:
  6818                           	opt stack 0
  6819                           tblptru	equ	0xFF8
  6820                           tblptrh	equ	0xFF7
  6821                           tblptrl	equ	0xFF6
  6822                           tablat	equ	0xFF5
  6823                           prodl	equ	0xFF3
  6824                           postinc0	equ	0xFEE
  6825                           wreg	equ	0xFE8
  6826                           postdec1	equ	0xFE5
  6827                           fsr1l	equ	0xFE1
  6828                           status	equ	0xFD8
  6829                           
  6830 ;; *************** function _Decrease_Time *****************
  6831 ;; Defined at:
  6832 ;;		line 114 in file "Setup_Time.c"
  6833 ;; Parameters:    Size  Location     Type
  6834 ;;		None
  6835 ;; Auto vars:     Size  Location     Type
  6836 ;;		None
  6837 ;; Return value:  Size  Location     Type
  6838 ;;		None               void
  6839 ;; Registers used:
  6840 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6841 ;; Tracked objects:
  6842 ;;		On entry : 0/0
  6843 ;;		On exit  : 0/0
  6844 ;;		Unchanged: 0/0
  6845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6849 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6850 ;;Total ram usage:        0 bytes
  6851 ;; Hardware stack levels used:    1
  6852 ;; Hardware stack levels required when called:   11
  6853 ;; This function calls:
  6854 ;;		_Update_Setup_Time_Screen
  6855 ;; This function is called by:
  6856 ;;		_Do_Setup_Time
  6857 ;; This function uses a non-reentrant model
  6858 ;;
  6859                           
  6860                           	psect	text29
  6861  002E0A                     __ptext29:
  6862                           	opt stack 0
  6863  002E0A                     _Decrease_Time:
  6864                           	opt stack 18
  6865                           
  6866                           ;Setup_Time.c: 116: switch (Select_Field)
  6867                           
  6868                           ;incstack = 0
  6869  002E0A  D030               	goto	l9389
  6870  002E0C                     l9351:
  6871                           
  6872                           ;Setup_Time.c: 119: if (setup_hour == 0) setup_hour = 23;
  6873  002E0C  5069               	movf	_setup_hour,w,c
  6874  002E0E  A4D8               	btfss	status,2,c
  6875  002E10  D003               	goto	l9355
  6876  002E12  0E17               	movlw	23
  6877  002E14  6E69               	movwf	_setup_hour,c
  6878  002E16  D03E               	goto	l9391
  6879  002E18                     l9355:
  6880                           
  6881                           ;Setup_Time.c: 120: else --setup_hour;
  6882  002E18  0669               	decf	_setup_hour,f,c
  6883                           
  6884                           ;Setup_Time.c: 121: break;
  6885  002E1A  D03C               	goto	l9391
  6886  002E1C                     l9357:
  6887                           
  6888                           ;Setup_Time.c: 124: if (setup_minute == 0) setup_minute = 59;
  6889  002E1C  506A               	movf	_setup_minute,w,c
  6890  002E1E  A4D8               	btfss	status,2,c
  6891  002E20  D003               	goto	l9361
  6892  002E22  0E3B               	movlw	59
  6893  002E24  6E6A               	movwf	_setup_minute,c
  6894  002E26  D036               	goto	l9391
  6895  002E28                     l9361:
  6896                           
  6897                           ;Setup_Time.c: 125: else --setup_minute;
  6898  002E28  066A               	decf	_setup_minute,f,c
  6899                           
  6900                           ;Setup_Time.c: 126: break;
  6901  002E2A  D034               	goto	l9391
  6902  002E2C                     l9363:
  6903                           
  6904                           ;Setup_Time.c: 129: if (setup_second == 0) setup_second = 59;
  6905  002E2C  506C               	movf	_setup_second,w,c
  6906  002E2E  A4D8               	btfss	status,2,c
  6907  002E30  D003               	goto	l9367
  6908  002E32  0E3B               	movlw	59
  6909  002E34  6E6C               	movwf	_setup_second,c
  6910  002E36  D02E               	goto	l9391
  6911  002E38                     l9367:
  6912                           
  6913                           ;Setup_Time.c: 130: else --setup_second;
  6914  002E38  066C               	decf	_setup_second,f,c
  6915                           
  6916                           ;Setup_Time.c: 131: break;
  6917  002E3A  D02C               	goto	l9391
  6918  002E3C                     l9369:
  6919                           
  6920                           ;Setup_Time.c: 134: if (setup_month == 1) setup_month = 12;
  6921  002E3C  046B               	decf	_setup_month,w,c
  6922  002E3E  A4D8               	btfss	status,2,c
  6923  002E40  D003               	goto	l9373
  6924  002E42  0E0C               	movlw	12
  6925  002E44  6E6B               	movwf	_setup_month,c
  6926  002E46  D026               	goto	l9391
  6927  002E48                     l9373:
  6928                           
  6929                           ;Setup_Time.c: 135: else --setup_month;
  6930  002E48  066B               	decf	_setup_month,f,c
  6931                           
  6932                           ;Setup_Time.c: 136: break;
  6933  002E4A  D024               	goto	l9391
  6934  002E4C                     l9375:
  6935                           
  6936                           ;Setup_Time.c: 139: if (setup_day == 1) setup_day = 31;
  6937  002E4C  0467               	decf	_setup_day,w,c
  6938  002E4E  A4D8               	btfss	status,2,c
  6939  002E50  D003               	goto	l9379
  6940  002E52  0E1F               	movlw	31
  6941  002E54  6E67               	movwf	_setup_day,c
  6942  002E56  D01E               	goto	l9391
  6943  002E58                     l9379:
  6944                           
  6945                           ;Setup_Time.c: 140: else --setup_day;
  6946  002E58  0667               	decf	_setup_day,f,c
  6947                           
  6948                           ;Setup_Time.c: 141: break;
  6949  002E5A  D01C               	goto	l9391
  6950  002E5C                     l9381:
  6951                           
  6952                           ;Setup_Time.c: 144: if (setup_year == 0) setup_year = 100;
  6953  002E5C  506D               	movf	_setup_year,w,c
  6954  002E5E  A4D8               	btfss	status,2,c
  6955  002E60  D003               	goto	l9385
  6956  002E62  0E64               	movlw	100
  6957  002E64  6E6D               	movwf	_setup_year,c
  6958  002E66  D016               	goto	l9391
  6959  002E68                     l9385:
  6960                           
  6961                           ;Setup_Time.c: 145: else --setup_year;
  6962  002E68  066D               	decf	_setup_year,f,c
  6963                           
  6964                           ;Setup_Time.c: 149: }
  6965                           
  6966                           ;Setup_Time.c: 148: break;
  6967                           
  6968                           ;Setup_Time.c: 147: default:
  6969                           
  6970                           ;Setup_Time.c: 146: break;
  6971  002E6A  D014               	goto	l9391
  6972  002E6C                     l9389:
  6973  002E6C  5053               	movf	_Select_Field,w,c
  6974                           
  6975                           ; Switch size 1, requested type "space"
  6976                           ; Number of cases is 6, Range of values is 0 to 5
  6977                           ; switch strategies available:
  6978                           ; Name         Instructions Cycles
  6979                           ; simple_byte           19    10 (average)
  6980                           ;	Chosen strategy is simple_byte
  6981  002E6E  0A00               	xorlw	0	; case 0
  6982  002E70  B4D8               	btfsc	status,2,c
  6983  002E72  D7CC               	goto	l9351
  6984  002E74  0A01               	xorlw	1	; case 1
  6985  002E76  B4D8               	btfsc	status,2,c
  6986  002E78  D7D1               	goto	l9357
  6987  002E7A  0A03               	xorlw	3	; case 2
  6988  002E7C  B4D8               	btfsc	status,2,c
  6989  002E7E  D7D6               	goto	l9363
  6990  002E80  0A01               	xorlw	1	; case 3
  6991  002E82  B4D8               	btfsc	status,2,c
  6992  002E84  D7DB               	goto	l9369
  6993  002E86  0A07               	xorlw	7	; case 4
  6994  002E88  B4D8               	btfsc	status,2,c
  6995  002E8A  D7E0               	goto	l9375
  6996  002E8C  0A01               	xorlw	1	; case 5
  6997  002E8E  B4D8               	btfsc	status,2,c
  6998  002E90  D7E5               	goto	l9381
  6999  002E92  D000               	goto	l9391
  7000  002E94                     l9391:
  7001                           
  7002                           ;Setup_Time.c: 150: Update_Setup_Time_Screen();
  7003  002E94  EC1F  F00A         	call	_Update_Setup_Time_Screen	;wreg free
  7004  002E98  0012               	return		;funcret
  7005  002E9A                     __end_of_Decrease_Time:
  7006                           	opt stack 0
  7007                           tblptru	equ	0xFF8
  7008                           tblptrh	equ	0xFF7
  7009                           tblptrl	equ	0xFF6
  7010                           tablat	equ	0xFF5
  7011                           prodl	equ	0xFF3
  7012                           postinc0	equ	0xFEE
  7013                           wreg	equ	0xFE8
  7014                           postdec1	equ	0xFE5
  7015                           fsr1l	equ	0xFE1
  7016                           status	equ	0xFD8
  7017                           
  7018 ;; *************** function _Update_Setup_Time_Screen *****************
  7019 ;; Defined at:
  7020 ;;		line 202 in file "Setup_Time.c"
  7021 ;; Parameters:    Size  Location     Type
  7022 ;;		None
  7023 ;; Auto vars:     Size  Location     Type
  7024 ;;		None
  7025 ;; Return value:  Size  Location     Type
  7026 ;;		None               void
  7027 ;; Registers used:
  7028 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7029 ;; Tracked objects:
  7030 ;;		On entry : 0/0
  7031 ;;		On exit  : 0/0
  7032 ;;		Unchanged: 0/0
  7033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7038 ;;Total ram usage:        0 bytes
  7039 ;; Hardware stack levels used:    1
  7040 ;; Hardware stack levels required when called:   10
  7041 ;; This function calls:
  7042 ;;		___awdiv
  7043 ;;		___awmod
  7044 ;;		_drawtext
  7045 ;; This function is called by:
  7046 ;;		_Do_Setup_Time
  7047 ;;		_Increase_Time
  7048 ;;		_Decrease_Time
  7049 ;; This function uses a non-reentrant model
  7050 ;;
  7051                           
  7052                           	psect	text30
  7053  00143E                     __ptext30:
  7054                           	opt stack 0
  7055  00143E                     _Update_Setup_Time_Screen:
  7056                           	opt stack 19
  7057                           
  7058                           ;Setup_Time.c: 204: setup_time[0] = (setup_hour/10) + '0';
  7059                           
  7060                           ;incstack = 0
  7061  00143E  C069  F134         	movff	_setup_hour,___awdiv@dividend
  7062  001442  0101               	movlb	1	; () banked
  7063  001444  6B35               	clrf	(___awdiv@dividend+1)& (0+255),b
  7064  001446  0E00               	movlw	0
  7065  001448  0101               	movlb	1	; () banked
  7066  00144A  6F37               	movwf	(___awdiv@divisor+1)& (0+255),b
  7067  00144C  0E0A               	movlw	10
  7068  00144E  6F36               	movwf	___awdiv@divisor& (0+255),b
  7069  001450  EC3A  F012         	call	___awdiv	;wreg free
  7070  001454  0101               	movlb	1	; () banked
  7071  001456  5134               	movf	?___awdiv& (0+255),w,b
  7072  001458  0F30               	addlw	48
  7073  00145A  0100               	movlb	0	; () banked
  7074  00145C  6FA6               	movwf	_setup_time& (0+255),b
  7075                           
  7076                           ;Setup_Time.c: 205: setup_time[1] = (setup_hour%10) + '0';
  7077  00145E  C069  F03B         	movff	_setup_hour,___awmod@dividend
  7078  001462  6A3C               	clrf	___awmod@dividend+1,c
  7079  001464  0E00               	movlw	0
  7080  001466  6E3E               	movwf	___awmod@divisor+1,c
  7081  001468  0E0A               	movlw	10
  7082  00146A  6E3D               	movwf	___awmod@divisor,c
  7083  00146C  ECD9  F017         	call	___awmod	;wreg free
  7084  001470  503B               	movf	?___awmod,w,c
  7085  001472  0F30               	addlw	48
  7086  001474  0100               	movlb	0	; () banked
  7087  001476  6FA7               	movwf	(_setup_time+1)& (0+255),b
  7088                           
  7089                           ;Setup_Time.c: 206: setup_time[3] = (setup_minute/10) + '0';
  7090  001478  C06A  F134         	movff	_setup_minute,___awdiv@dividend
  7091  00147C  0101               	movlb	1	; () banked
  7092  00147E  6B35               	clrf	(___awdiv@dividend+1)& (0+255),b
  7093  001480  0E00               	movlw	0
  7094  001482  0101               	movlb	1	; () banked
  7095  001484  6F37               	movwf	(___awdiv@divisor+1)& (0+255),b
  7096  001486  0E0A               	movlw	10
  7097  001488  6F36               	movwf	___awdiv@divisor& (0+255),b
  7098  00148A  EC3A  F012         	call	___awdiv	;wreg free
  7099  00148E  0101               	movlb	1	; () banked
  7100  001490  5134               	movf	?___awdiv& (0+255),w,b
  7101  001492  0F30               	addlw	48
  7102  001494  0100               	movlb	0	; () banked
  7103  001496  6FA9               	movwf	(_setup_time+3)& (0+255),b
  7104                           
  7105                           ;Setup_Time.c: 207: setup_time[4] = (setup_minute%10) + '0';
  7106  001498  C06A  F03B         	movff	_setup_minute,___awmod@dividend
  7107  00149C  6A3C               	clrf	___awmod@dividend+1,c
  7108  00149E  0E00               	movlw	0
  7109  0014A0  6E3E               	movwf	___awmod@divisor+1,c
  7110  0014A2  0E0A               	movlw	10
  7111  0014A4  6E3D               	movwf	___awmod@divisor,c
  7112  0014A6  ECD9  F017         	call	___awmod	;wreg free
  7113  0014AA  503B               	movf	?___awmod,w,c
  7114  0014AC  0F30               	addlw	48
  7115  0014AE  0100               	movlb	0	; () banked
  7116  0014B0  6FAA               	movwf	(_setup_time+4)& (0+255),b
  7117                           
  7118                           ;Setup_Time.c: 208: setup_time[6] = (setup_second/10) + '0';
  7119  0014B2  C06C  F134         	movff	_setup_second,___awdiv@dividend
  7120  0014B6  0101               	movlb	1	; () banked
  7121  0014B8  6B35               	clrf	(___awdiv@dividend+1)& (0+255),b
  7122  0014BA  0E00               	movlw	0
  7123  0014BC  0101               	movlb	1	; () banked
  7124  0014BE  6F37               	movwf	(___awdiv@divisor+1)& (0+255),b
  7125  0014C0  0E0A               	movlw	10
  7126  0014C2  6F36               	movwf	___awdiv@divisor& (0+255),b
  7127  0014C4  EC3A  F012         	call	___awdiv	;wreg free
  7128  0014C8  0101               	movlb	1	; () banked
  7129  0014CA  5134               	movf	?___awdiv& (0+255),w,b
  7130  0014CC  0F30               	addlw	48
  7131  0014CE  0100               	movlb	0	; () banked
  7132  0014D0  6FAC               	movwf	(_setup_time+6)& (0+255),b
  7133                           
  7134                           ;Setup_Time.c: 209: setup_time[7] = (setup_second%10) + '0';
  7135  0014D2  C06C  F03B         	movff	_setup_second,___awmod@dividend
  7136  0014D6  6A3C               	clrf	___awmod@dividend+1,c
  7137  0014D8  0E00               	movlw	0
  7138  0014DA  6E3E               	movwf	___awmod@divisor+1,c
  7139  0014DC  0E0A               	movlw	10
  7140  0014DE  6E3D               	movwf	___awmod@divisor,c
  7141  0014E0  ECD9  F017         	call	___awmod	;wreg free
  7142  0014E4  503B               	movf	?___awmod,w,c
  7143  0014E6  0F30               	addlw	48
  7144  0014E8  0100               	movlb	0	; () banked
  7145  0014EA  6FAD               	movwf	(_setup_time+7)& (0+255),b
  7146                           
  7147                           ;Setup_Time.c: 210: setup_date[0] = (setup_month/10) + '0';
  7148  0014EC  C06B  F134         	movff	_setup_month,___awdiv@dividend
  7149  0014F0  0101               	movlb	1	; () banked
  7150  0014F2  6B35               	clrf	(___awdiv@dividend+1)& (0+255),b
  7151  0014F4  0E00               	movlw	0
  7152  0014F6  0101               	movlb	1	; () banked
  7153  0014F8  6F37               	movwf	(___awdiv@divisor+1)& (0+255),b
  7154  0014FA  0E0A               	movlw	10
  7155  0014FC  6F36               	movwf	___awdiv@divisor& (0+255),b
  7156  0014FE  EC3A  F012         	call	___awdiv	;wreg free
  7157  001502  0101               	movlb	1	; () banked
  7158  001504  5134               	movf	?___awdiv& (0+255),w,b
  7159  001506  0F30               	addlw	48
  7160  001508  0100               	movlb	0	; () banked
  7161  00150A  6F9D               	movwf	_setup_date& (0+255),b
  7162                           
  7163                           ;Setup_Time.c: 211: setup_date[1] = (setup_month%10) + '0';
  7164  00150C  C06B  F03B         	movff	_setup_month,___awmod@dividend
  7165  001510  6A3C               	clrf	___awmod@dividend+1,c
  7166  001512  0E00               	movlw	0
  7167  001514  6E3E               	movwf	___awmod@divisor+1,c
  7168  001516  0E0A               	movlw	10
  7169  001518  6E3D               	movwf	___awmod@divisor,c
  7170  00151A  ECD9  F017         	call	___awmod	;wreg free
  7171  00151E  503B               	movf	?___awmod,w,c
  7172  001520  0F30               	addlw	48
  7173  001522  0100               	movlb	0	; () banked
  7174  001524  6F9E               	movwf	(_setup_date+1)& (0+255),b
  7175                           
  7176                           ;Setup_Time.c: 212: setup_date[3] = (setup_day/10) + '0';
  7177  001526  C067  F134         	movff	_setup_day,___awdiv@dividend
  7178  00152A  0101               	movlb	1	; () banked
  7179  00152C  6B35               	clrf	(___awdiv@dividend+1)& (0+255),b
  7180  00152E  0E00               	movlw	0
  7181  001530  0101               	movlb	1	; () banked
  7182  001532  6F37               	movwf	(___awdiv@divisor+1)& (0+255),b
  7183  001534  0E0A               	movlw	10
  7184  001536  6F36               	movwf	___awdiv@divisor& (0+255),b
  7185  001538  EC3A  F012         	call	___awdiv	;wreg free
  7186  00153C  0101               	movlb	1	; () banked
  7187  00153E  5134               	movf	?___awdiv& (0+255),w,b
  7188  001540  0F30               	addlw	48
  7189  001542  0100               	movlb	0	; () banked
  7190  001544  6FA0               	movwf	(_setup_date+3)& (0+255),b
  7191                           
  7192                           ;Setup_Time.c: 213: setup_date[4] = (setup_day%10) + '0';
  7193  001546  C067  F03B         	movff	_setup_day,___awmod@dividend
  7194  00154A  6A3C               	clrf	___awmod@dividend+1,c
  7195  00154C  0E00               	movlw	0
  7196  00154E  6E3E               	movwf	___awmod@divisor+1,c
  7197  001550  0E0A               	movlw	10
  7198  001552  6E3D               	movwf	___awmod@divisor,c
  7199  001554  ECD9  F017         	call	___awmod	;wreg free
  7200  001558  503B               	movf	?___awmod,w,c
  7201  00155A  0F30               	addlw	48
  7202  00155C  0100               	movlb	0	; () banked
  7203  00155E  6FA1               	movwf	(_setup_date+4)& (0+255),b
  7204                           
  7205                           ;Setup_Time.c: 214: setup_date[6] = (setup_year/10) + '0';
  7206  001560  C06D  F134         	movff	_setup_year,___awdiv@dividend
  7207  001564  0101               	movlb	1	; () banked
  7208  001566  6B35               	clrf	(___awdiv@dividend+1)& (0+255),b
  7209  001568  0E00               	movlw	0
  7210  00156A  0101               	movlb	1	; () banked
  7211  00156C  6F37               	movwf	(___awdiv@divisor+1)& (0+255),b
  7212  00156E  0E0A               	movlw	10
  7213  001570  6F36               	movwf	___awdiv@divisor& (0+255),b
  7214  001572  EC3A  F012         	call	___awdiv	;wreg free
  7215  001576  0101               	movlb	1	; () banked
  7216  001578  5134               	movf	?___awdiv& (0+255),w,b
  7217  00157A  0F30               	addlw	48
  7218  00157C  0100               	movlb	0	; () banked
  7219  00157E  6FA3               	movwf	(_setup_date+6)& (0+255),b
  7220                           
  7221                           ;Setup_Time.c: 215: setup_date[7] = (setup_year%10) + '0';
  7222  001580  C06D  F03B         	movff	_setup_year,___awmod@dividend
  7223  001584  6A3C               	clrf	___awmod@dividend+1,c
  7224  001586  0E00               	movlw	0
  7225  001588  6E3E               	movwf	___awmod@divisor+1,c
  7226  00158A  0E0A               	movlw	10
  7227  00158C  6E3D               	movwf	___awmod@divisor,c
  7228  00158E  ECD9  F017         	call	___awmod	;wreg free
  7229  001592  503B               	movf	?___awmod,w,c
  7230  001594  0F30               	addlw	48
  7231  001596  0100               	movlb	0	; () banked
  7232  001598  6FA4               	movwf	(_setup_date+7)& (0+255),b
  7233                           
  7234                           ; BSR set to: 0
  7235                           ;Setup_Time.c: 217: drawtext(15, 52, setup_time, 0x07FF, 0x0000, 2);
  7236  00159A  0E34               	movlw	52
  7237  00159C  6E39               	movwf	drawtext@y,c
  7238  00159E  0EA6               	movlw	low _setup_time
  7239  0015A0  6E3A               	movwf	drawtext@_text,c
  7240  0015A2  0E00               	movlw	high _setup_time
  7241  0015A4  6E3B               	movwf	drawtext@_text+1,c
  7242  0015A6  0E07               	movlw	7
  7243  0015A8  6E3D               	movwf	drawtext@color+1,c
  7244  0015AA  683C               	setf	drawtext@color,c
  7245  0015AC  0E00               	movlw	0
  7246  0015AE  6E3F               	movwf	drawtext@bg+1,c
  7247  0015B0  0E00               	movlw	0
  7248  0015B2  6E3E               	movwf	drawtext@bg,c
  7249  0015B4  0E02               	movlw	2
  7250  0015B6  6E40               	movwf	drawtext@size,c
  7251  0015B8  0E0F               	movlw	15
  7252  0015BA  ECEA  F00C         	call	_drawtext
  7253                           
  7254                           ;Setup_Time.c: 218: drawtext(15, 82, setup_date, 0x07E0, 0x0000, 2);
  7255  0015BE  0E52               	movlw	82
  7256  0015C0  6E39               	movwf	drawtext@y,c
  7257  0015C2  0E9D               	movlw	low _setup_date
  7258  0015C4  6E3A               	movwf	drawtext@_text,c
  7259  0015C6  0E00               	movlw	high _setup_date
  7260  0015C8  6E3B               	movwf	drawtext@_text+1,c
  7261  0015CA  0E07               	movlw	7
  7262  0015CC  6E3D               	movwf	drawtext@color+1,c
  7263  0015CE  0EE0               	movlw	224
  7264  0015D0  6E3C               	movwf	drawtext@color,c
  7265  0015D2  0E00               	movlw	0
  7266  0015D4  6E3F               	movwf	drawtext@bg+1,c
  7267  0015D6  0E00               	movlw	0
  7268  0015D8  6E3E               	movwf	drawtext@bg,c
  7269  0015DA  0E02               	movlw	2
  7270  0015DC  6E40               	movwf	drawtext@size,c
  7271  0015DE  0E0F               	movlw	15
  7272  0015E0  ECEA  F00C         	call	_drawtext
  7273  0015E4  0012               	return		;funcret
  7274  0015E6                     __end_of_Update_Setup_Time_Screen:
  7275                           	opt stack 0
  7276                           tblptru	equ	0xFF8
  7277                           tblptrh	equ	0xFF7
  7278                           tblptrl	equ	0xFF6
  7279                           tablat	equ	0xFF5
  7280                           prodl	equ	0xFF3
  7281                           postinc0	equ	0xFEE
  7282                           wreg	equ	0xFE8
  7283                           postdec1	equ	0xFE5
  7284                           fsr1l	equ	0xFE1
  7285                           status	equ	0xFD8
  7286                           
  7287 ;; *************** function _Do_Setup_Heater_Temp *****************
  7288 ;; Defined at:
  7289 ;;		line 24 in file "Setup_Heater_Temp.c"
  7290 ;; Parameters:    Size  Location     Type
  7291 ;;		None
  7292 ;; Auto vars:     Size  Location     Type
  7293 ;;		None
  7294 ;; Return value:  Size  Location     Type
  7295 ;;                  2   74[None  ] int 
  7296 ;; Registers used:
  7297 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7298 ;; Tracked objects:
  7299 ;;		On entry : 0/0
  7300 ;;		On exit  : 0/0
  7301 ;;		Unchanged: 0/0
  7302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7305 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7306 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7307 ;;Total ram usage:        2 bytes
  7308 ;; Hardware stack levels used:    1
  7309 ;; Hardware stack levels required when called:   12
  7310 ;; This function calls:
  7311 ;;		_Decrease_Heater_Temp
  7312 ;;		_Do_Beep_Bad
  7313 ;;		_Do_Beep_Good
  7314 ;;		_Do_Save_New_Heater_Temp
  7315 ;;		_Exit_Setup_Heater_Temp
  7316 ;;		_Increase_Heater_Temp
  7317 ;;		_Initialize_Setup_Heater_Screen
  7318 ;;		_Update_Setup_Heater_Screen
  7319 ;;		_check_for_button_input
  7320 ;; This function is called by:
  7321 ;;		_main
  7322 ;; This function uses a non-reentrant model
  7323 ;;
  7324                           
  7325                           	psect	text31
  7326  002C54                     __ptext31:
  7327                           	opt stack 0
  7328  002C54                     _Do_Setup_Heater_Temp:
  7329                           	opt stack 18
  7330                           
  7331                           ;Setup_Heater_Temp.c: 27: In_Heater_Temp_Setup = 1;
  7332                           
  7333                           ;incstack = 0
  7334  002C54  0E01               	movlw	1
  7335  002C56  0100               	movlb	0	; () banked
  7336  002C58  6FF9               	movwf	_In_Heater_Temp_Setup& (0+255),b
  7337                           
  7338                           ; BSR set to: 0
  7339                           ;Setup_Heater_Temp.c: 28: setup_heater_set_temp = heater_set_temp;
  7340  002C5A  C06F  F068         	movff	_heater_set_temp,_setup_heater_set_temp
  7341                           
  7342                           ; BSR set to: 0
  7343                           ;Setup_Heater_Temp.c: 29: Initialize_Setup_Heater_Screen();
  7344  002C5E  EC7D  F00F         	call	_Initialize_Setup_Heater_Screen	;wreg free
  7345                           
  7346                           ;Setup_Heater_Temp.c: 30: Update_Setup_Heater_Screen();
  7347  002C62  EC3F  F015         	call	_Update_Setup_Heater_Screen	;wreg free
  7348                           
  7349                           ;Setup_Heater_Temp.c: 32: while (In_Heater_Temp_Setup == 1)
  7350  002C66  D03B               	goto	l9927
  7351  002C68                     l9897:
  7352                           
  7353                           ;Setup_Heater_Temp.c: 33: {
  7354                           ;Setup_Heater_Temp.c: 34: if (check_for_button_input() == 1)
  7355  002C68  0E01               	movlw	1
  7356  002C6A  0101               	movlb	1	; () banked
  7357  002C6C  6F3C               	movwf	??_Do_Setup_Heater_Temp& (0+255),b
  7358  002C6E  0E00               	movlw	0
  7359  002C70  0101               	movlb	1	; () banked
  7360  002C72  6F3D               	movwf	(??_Do_Setup_Heater_Temp+1)& (0+255),b
  7361  002C74  EC1A  F018         	call	_check_for_button_input	;wreg free
  7362  002C78  0101               	movlb	1	; () banked
  7363  002C7A  193C               	xorwf	??_Do_Setup_Heater_Temp& (0+255),w,b
  7364  002C7C  113D               	iorwf	(??_Do_Setup_Heater_Temp+1)& (0+255),w,b
  7365  002C7E  A4D8               	btfss	status,2,c
  7366  002C80  D02E               	goto	l9927
  7367                           
  7368                           ; BSR set to: 1
  7369                           ;Setup_Heater_Temp.c: 35: {
  7370                           ;Setup_Heater_Temp.c: 36: nec_ok = 0;
  7371  002C82  0E00               	movlw	0
  7372  002C84  0100               	movlb	0	; () banked
  7373  002C86  6FF3               	movwf	(_nec_ok+1)& (0+255),b
  7374  002C88  0E00               	movlw	0
  7375  002C8A  6FF2               	movwf	_nec_ok& (0+255),b
  7376                           
  7377                           ; BSR set to: 0
  7378                           ;Setup_Heater_Temp.c: 37: if (found >= 5 && found <= 8)
  7379  002C8C  0E04               	movlw	4
  7380  002C8E  645E               	cpfsgt	_found,c
  7381  002C90  D023               	goto	l9925
  7382                           
  7383                           ; BSR set to: 0
  7384  002C92  0E09               	movlw	9
  7385  002C94  605E               	cpfslt	_found,c
  7386  002C96  D020               	goto	l9925
  7387                           
  7388                           ; BSR set to: 0
  7389                           ;Setup_Heater_Temp.c: 38: {
  7390                           ;Setup_Heater_Temp.c: 39: Do_Beep_Good();
  7391  002C98  EC4F  F01E         	call	_Do_Beep_Good	;wreg free
  7392                           
  7393                           ;Setup_Heater_Temp.c: 40: if(found == 5) Do_Save_New_Heater_Temp();
  7394  002C9C  0E05               	movlw	5
  7395  002C9E  185E               	xorwf	_found,w,c
  7396  002CA0  A4D8               	btfss	status,2,c
  7397  002CA2  D003               	goto	l9911
  7398  002CA4  EC45  F01E         	call	_Do_Save_New_Heater_Temp	;wreg free
  7399  002CA8  D000               	goto	l9911
  7400  002CAA                     l9911:
  7401                           
  7402                           ;Setup_Heater_Temp.c: 41: if(found == 6) Decrease_Heater_Temp();
  7403  002CAA  0E06               	movlw	6
  7404  002CAC  185E               	xorwf	_found,w,c
  7405  002CAE  A4D8               	btfss	status,2,c
  7406  002CB0  D003               	goto	l9915
  7407  002CB2  EC00  F01E         	call	_Decrease_Heater_Temp	;wreg free
  7408  002CB6  D000               	goto	l9915
  7409  002CB8                     l9915:
  7410                           
  7411                           ;Setup_Heater_Temp.c: 42: if(found == 7) Increase_Heater_Temp();
  7412  002CB8  0E07               	movlw	7
  7413  002CBA  185E               	xorwf	_found,w,c
  7414  002CBC  A4D8               	btfss	status,2,c
  7415  002CBE  D003               	goto	l9919
  7416  002CC0  ECF4  F01D         	call	_Increase_Heater_Temp	;wreg free
  7417  002CC4  D000               	goto	l9919
  7418  002CC6                     l9919:
  7419                           
  7420                           ;Setup_Heater_Temp.c: 43: if(found == 8) Exit_Setup_Heater_Temp();
  7421  002CC6  0E08               	movlw	8
  7422  002CC8  185E               	xorwf	_found,w,c
  7423  002CCA  A4D8               	btfss	status,2,c
  7424  002CCC  D003               	goto	l9923
  7425  002CCE  ECCE  F01E         	call	_Exit_Setup_Heater_Temp	;wreg free
  7426  002CD2  D000               	goto	l9923
  7427  002CD4                     l9923:
  7428                           
  7429                           ;Setup_Heater_Temp.c: 44: found = 0xff;
  7430  002CD4  685E               	setf	_found,c
  7431                           
  7432                           ;Setup_Heater_Temp.c: 45: }
  7433  002CD6  D003               	goto	l9927
  7434  002CD8                     l9925:
  7435                           
  7436                           ;Setup_Heater_Temp.c: 46: else
  7437                           ;Setup_Heater_Temp.c: 47: {
  7438                           ;Setup_Heater_Temp.c: 48: Do_Beep_Bad();
  7439  002CD8  EC59  F01E         	call	_Do_Beep_Bad	;wreg free
  7440  002CDC  D000               	goto	l9927
  7441  002CDE                     l9927:
  7442  002CDE  0100               	movlb	0	; () banked
  7443  002CE0  05F9               	decf	_In_Heater_Temp_Setup& (0+255),w,b
  7444  002CE2  B4D8               	btfsc	status,2,c
  7445  002CE4  D7C1               	goto	l9897
  7446                           
  7447                           ; BSR set to: 0
  7448                           
  7449                           ; BSR set to: 0
  7450  002CE6  0012               	return		;funcret
  7451  002CE8                     __end_of_Do_Setup_Heater_Temp:
  7452                           	opt stack 0
  7453                           tblptru	equ	0xFF8
  7454                           tblptrh	equ	0xFF7
  7455                           tblptrl	equ	0xFF6
  7456                           tablat	equ	0xFF5
  7457                           prodl	equ	0xFF3
  7458                           postinc0	equ	0xFEE
  7459                           wreg	equ	0xFE8
  7460                           postdec1	equ	0xFE5
  7461                           fsr1l	equ	0xFE1
  7462                           status	equ	0xFD8
  7463                           
  7464 ;; *************** function _Initialize_Setup_Heater_Screen *****************
  7465 ;; Defined at:
  7466 ;;		line 88 in file "Setup_Heater_Temp.c"
  7467 ;; Parameters:    Size  Location     Type
  7468 ;;		None
  7469 ;; Auto vars:     Size  Location     Type
  7470 ;;		None
  7471 ;; Return value:  Size  Location     Type
  7472 ;;		None               void
  7473 ;; Registers used:
  7474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7475 ;; Tracked objects:
  7476 ;;		On entry : 0/0
  7477 ;;		On exit  : 0/0
  7478 ;;		Unchanged: 0/0
  7479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7484 ;;Total ram usage:        0 bytes
  7485 ;; Hardware stack levels used:    1
  7486 ;; Hardware stack levels required when called:   10
  7487 ;; This function calls:
  7488 ;;		_drawtext
  7489 ;;		_fillScreen
  7490 ;;		_strcpy
  7491 ;; This function is called by:
  7492 ;;		_Do_Setup_Heater_Temp
  7493 ;; This function uses a non-reentrant model
  7494 ;;
  7495                           
  7496                           	psect	text32
  7497  001EFA                     __ptext32:
  7498                           	opt stack 0
  7499  001EFA                     _Initialize_Setup_Heater_Screen:
  7500                           	opt stack 19
  7501                           
  7502                           ;Setup_Heater_Temp.c: 90: fillScreen(0x0000);
  7503                           
  7504                           ; BSR set to: 0
  7505                           ;incstack = 0
  7506  001EFA  0E00               	movlw	0
  7507  001EFC  6E25               	movwf	fillScreen@color+1,c
  7508  001EFE  0E00               	movlw	0
  7509  001F00  6E24               	movwf	fillScreen@color,c
  7510  001F02  ECB3  F01D         	call	_fillScreen	;wreg free
  7511                           
  7512                           ;Setup_Heater_Temp.c: 92: strcpy(txt, "ECE3301L Sp'22 Sx\0");
  7513  001F06  C04E  F011         	movff	_txt,strcpy@to
  7514  001F0A  C04F  F012         	movff	_txt+1,strcpy@to+1
  7515  001F0E  0E15               	movlw	low STR_27
  7516  001F10  6E13               	movwf	strcpy@from,c
  7517  001F12  0EFF               	movlw	high STR_27
  7518  001F14  6E14               	movwf	strcpy@from+1,c
  7519  001F16  ECCC  F01C         	call	_strcpy	;wreg free
  7520                           
  7521                           ;Setup_Heater_Temp.c: 93: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  7522  001F1A  0E01               	movlw	1
  7523  001F1C  6E39               	movwf	drawtext@y,c
  7524  001F1E  C04E  F03A         	movff	_txt,drawtext@_text
  7525  001F22  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  7526  001F26  0EFF               	movlw	255
  7527  001F28  6E3D               	movwf	drawtext@color+1,c
  7528  001F2A  683C               	setf	drawtext@color,c
  7529  001F2C  0E00               	movlw	0
  7530  001F2E  6E3F               	movwf	drawtext@bg+1,c
  7531  001F30  0E00               	movlw	0
  7532  001F32  6E3E               	movwf	drawtext@bg,c
  7533  001F34  0E01               	movlw	1
  7534  001F36  6E40               	movwf	drawtext@size,c
  7535  001F38  0E01               	movlw	1
  7536  001F3A  ECEA  F00C         	call	_drawtext
  7537                           
  7538                           ;Setup_Heater_Temp.c: 95: strcpy(txt, "  Heater\0 ");
  7539  001F3E  C04E  F011         	movff	_txt,strcpy@to
  7540  001F42  C04F  F012         	movff	_txt+1,strcpy@to+1
  7541  001F46  0E94               	movlw	low STR_28
  7542  001F48  6E13               	movwf	strcpy@from,c
  7543  001F4A  0EFF               	movlw	high STR_28
  7544  001F4C  6E14               	movwf	strcpy@from+1,c
  7545  001F4E  ECCC  F01C         	call	_strcpy	;wreg free
  7546                           
  7547                           ;Setup_Heater_Temp.c: 96: drawtext(1 , 1+25, txt, 0xFFE0, 0x0000, 2);
  7548  001F52  0E1A               	movlw	26
  7549  001F54  6E39               	movwf	drawtext@y,c
  7550  001F56  C04E  F03A         	movff	_txt,drawtext@_text
  7551  001F5A  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  7552  001F5E  0EFF               	movlw	255
  7553  001F60  6E3D               	movwf	drawtext@color+1,c
  7554  001F62  0EE0               	movlw	224
  7555  001F64  6E3C               	movwf	drawtext@color,c
  7556  001F66  0E00               	movlw	0
  7557  001F68  6E3F               	movwf	drawtext@bg+1,c
  7558  001F6A  0E00               	movlw	0
  7559  001F6C  6E3E               	movwf	drawtext@bg,c
  7560  001F6E  0E02               	movlw	2
  7561  001F70  6E40               	movwf	drawtext@size,c
  7562  001F72  0E01               	movlw	1
  7563  001F74  ECEA  F00C         	call	_drawtext
  7564                           
  7565                           ;Setup_Heater_Temp.c: 97: strcpy(txt, "  Setup\0 ");
  7566  001F78  C04E  F011         	movff	_txt,strcpy@to
  7567  001F7C  C04F  F012         	movff	_txt+1,strcpy@to+1
  7568  001F80  0EB5               	movlw	low STR_29
  7569  001F82  6E13               	movwf	strcpy@from,c
  7570  001F84  0EFF               	movlw	high STR_29
  7571  001F86  6E14               	movwf	strcpy@from+1,c
  7572  001F88  ECCC  F01C         	call	_strcpy	;wreg free
  7573                           
  7574                           ;Setup_Heater_Temp.c: 98: drawtext(1 , 1+40, txt, 0xFFE0, 0x0000, 2);
  7575  001F8C  0E29               	movlw	41
  7576  001F8E  6E39               	movwf	drawtext@y,c
  7577  001F90  C04E  F03A         	movff	_txt,drawtext@_text
  7578  001F94  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  7579  001F98  0EFF               	movlw	255
  7580  001F9A  6E3D               	movwf	drawtext@color+1,c
  7581  001F9C  0EE0               	movlw	224
  7582  001F9E  6E3C               	movwf	drawtext@color,c
  7583  001FA0  0E00               	movlw	0
  7584  001FA2  6E3F               	movwf	drawtext@bg+1,c
  7585  001FA4  0E00               	movlw	0
  7586  001FA6  6E3E               	movwf	drawtext@bg,c
  7587  001FA8  0E02               	movlw	2
  7588  001FAA  6E40               	movwf	drawtext@size,c
  7589  001FAC  0E01               	movlw	1
  7590  001FAE  ECEA  F00C         	call	_drawtext
  7591                           
  7592                           ;Setup_Heater_Temp.c: 99: strcpy(txt, "Set Heater Temp");
  7593  001FB2  C04E  F011         	movff	_txt,strcpy@to
  7594  001FB6  C04F  F012         	movff	_txt+1,strcpy@to+1
  7595  001FBA  0E5E               	movlw	low STR_30
  7596  001FBC  6E13               	movwf	strcpy@from,c
  7597  001FBE  0EFF               	movlw	high STR_30
  7598  001FC0  6E14               	movwf	strcpy@from+1,c
  7599  001FC2  ECCC  F01C         	call	_strcpy	;wreg free
  7600                           
  7601                           ;Setup_Heater_Temp.c: 100: drawtext(15 , 60, txt, 0x07FF , 0x0000, 1);
  7602  001FC6  0E3C               	movlw	60
  7603  001FC8  6E39               	movwf	drawtext@y,c
  7604  001FCA  C04E  F03A         	movff	_txt,drawtext@_text
  7605  001FCE  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  7606  001FD2  0E07               	movlw	7
  7607  001FD4  6E3D               	movwf	drawtext@color+1,c
  7608  001FD6  683C               	setf	drawtext@color,c
  7609  001FD8  0E00               	movlw	0
  7610  001FDA  6E3F               	movwf	drawtext@bg+1,c
  7611  001FDC  0E00               	movlw	0
  7612  001FDE  6E3E               	movwf	drawtext@bg,c
  7613  001FE0  0E01               	movlw	1
  7614  001FE2  6E40               	movwf	drawtext@size,c
  7615  001FE4  0E0F               	movlw	15
  7616  001FE6  ECEA  F00C         	call	_drawtext
  7617  001FEA  0012               	return		;funcret
  7618  001FEC                     __end_of_Initialize_Setup_Heater_Screen:
  7619                           	opt stack 0
  7620                           tblptru	equ	0xFF8
  7621                           tblptrh	equ	0xFF7
  7622                           tblptrl	equ	0xFF6
  7623                           tablat	equ	0xFF5
  7624                           prodl	equ	0xFF3
  7625                           postinc0	equ	0xFEE
  7626                           wreg	equ	0xFE8
  7627                           postdec1	equ	0xFE5
  7628                           fsr1l	equ	0xFE1
  7629                           status	equ	0xFD8
  7630                           
  7631 ;; *************** function _Increase_Heater_Temp *****************
  7632 ;; Defined at:
  7633 ;;		line 54 in file "Setup_Heater_Temp.c"
  7634 ;; Parameters:    Size  Location     Type
  7635 ;;		None
  7636 ;; Auto vars:     Size  Location     Type
  7637 ;;		None
  7638 ;; Return value:  Size  Location     Type
  7639 ;;		None               void
  7640 ;; Registers used:
  7641 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7642 ;; Tracked objects:
  7643 ;;		On entry : 0/0
  7644 ;;		On exit  : 0/0
  7645 ;;		Unchanged: 0/0
  7646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7650 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7651 ;;Total ram usage:        0 bytes
  7652 ;; Hardware stack levels used:    1
  7653 ;; Hardware stack levels required when called:   11
  7654 ;; This function calls:
  7655 ;;		_Update_Setup_Heater_Screen
  7656 ;; This function is called by:
  7657 ;;		_Do_Setup_Heater_Temp
  7658 ;; This function uses a non-reentrant model
  7659 ;;
  7660                           
  7661                           	psect	text33
  7662  003BE8                     __ptext33:
  7663                           	opt stack 0
  7664  003BE8                     _Increase_Heater_Temp:
  7665                           	opt stack 18
  7666                           
  7667                           ;Setup_Heater_Temp.c: 56: if(setup_heater_set_temp == 120) setup_heater_set_temp = 120;
  7668                           
  7669                           ;incstack = 0
  7670  003BE8  0E78               	movlw	120
  7671  003BEA  1868               	xorwf	_setup_heater_set_temp,w,c
  7672  003BEC  A4D8               	btfss	status,2,c
  7673  003BEE  D003               	goto	l9299
  7674  003BF0  0E78               	movlw	120
  7675  003BF2  6E68               	movwf	_setup_heater_set_temp,c
  7676  003BF4  D002               	goto	l9301
  7677  003BF6                     l9299:
  7678                           
  7679                           ;Setup_Heater_Temp.c: 57: else setup_heater_set_temp++;
  7680  003BF6  2A68               	incf	_setup_heater_set_temp,f,c
  7681  003BF8  D000               	goto	l9301
  7682  003BFA                     l9301:
  7683                           
  7684                           ;Setup_Heater_Temp.c: 59: Update_Setup_Heater_Screen();
  7685  003BFA  EC3F  F015         	call	_Update_Setup_Heater_Screen	;wreg free
  7686  003BFE  0012               	return		;funcret
  7687  003C00                     __end_of_Increase_Heater_Temp:
  7688                           	opt stack 0
  7689                           tblptru	equ	0xFF8
  7690                           tblptrh	equ	0xFF7
  7691                           tblptrl	equ	0xFF6
  7692                           tablat	equ	0xFF5
  7693                           prodl	equ	0xFF3
  7694                           postinc0	equ	0xFEE
  7695                           wreg	equ	0xFE8
  7696                           postdec1	equ	0xFE5
  7697                           fsr1l	equ	0xFE1
  7698                           status	equ	0xFD8
  7699                           
  7700 ;; *************** function _Exit_Setup_Heater_Temp *****************
  7701 ;; Defined at:
  7702 ;;		line 73 in file "Setup_Heater_Temp.c"
  7703 ;; Parameters:    Size  Location     Type
  7704 ;;		None
  7705 ;; Auto vars:     Size  Location     Type
  7706 ;;		None
  7707 ;; Return value:  Size  Location     Type
  7708 ;;		None               void
  7709 ;; Registers used:
  7710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7711 ;; Tracked objects:
  7712 ;;		On entry : 0/0
  7713 ;;		On exit  : 0/0
  7714 ;;		Unchanged: 0/0
  7715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7719 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7720 ;;Total ram usage:        0 bytes
  7721 ;; Hardware stack levels used:    1
  7722 ;; Hardware stack levels required when called:   11
  7723 ;; This function calls:
  7724 ;;		_DS3231_Read_Time
  7725 ;;		_Initialize_Screen
  7726 ;; This function is called by:
  7727 ;;		_Do_Setup_Heater_Temp
  7728 ;; This function uses a non-reentrant model
  7729 ;;
  7730                           
  7731                           	psect	text34
  7732  003D9C                     __ptext34:
  7733                           	opt stack 0
  7734  003D9C                     _Exit_Setup_Heater_Temp:
  7735                           	opt stack 18
  7736                           
  7737                           ;Setup_Heater_Temp.c: 75: DS3231_Read_Time();
  7738                           
  7739                           ;incstack = 0
  7740  003D9C  EC72  F019         	call	_DS3231_Read_Time	;wreg free
  7741                           
  7742                           ;Setup_Heater_Temp.c: 76: Initialize_Screen();
  7743  003DA0  EC37  F003         	call	_Initialize_Screen	;wreg free
  7744                           
  7745                           ;Setup_Heater_Temp.c: 77: In_Heater_Temp_Setup = 0;
  7746  003DA4  0E00               	movlw	0
  7747  003DA6  0100               	movlb	0	; () banked
  7748  003DA8  6FF9               	movwf	_In_Heater_Temp_Setup& (0+255),b
  7749                           
  7750                           ; BSR set to: 0
  7751  003DAA  0012               	return		;funcret
  7752  003DAC                     __end_of_Exit_Setup_Heater_Temp:
  7753                           	opt stack 0
  7754                           tblptru	equ	0xFF8
  7755                           tblptrh	equ	0xFF7
  7756                           tblptrl	equ	0xFF6
  7757                           tablat	equ	0xFF5
  7758                           prodl	equ	0xFF3
  7759                           postinc0	equ	0xFEE
  7760                           wreg	equ	0xFE8
  7761                           postdec1	equ	0xFE5
  7762                           fsr1l	equ	0xFE1
  7763                           status	equ	0xFD8
  7764                           
  7765 ;; *************** function _Do_Save_New_Heater_Temp *****************
  7766 ;; Defined at:
  7767 ;;		line 80 in file "Setup_Heater_Temp.c"
  7768 ;; Parameters:    Size  Location     Type
  7769 ;;		None
  7770 ;; Auto vars:     Size  Location     Type
  7771 ;;		None
  7772 ;; Return value:  Size  Location     Type
  7773 ;;		None               void
  7774 ;; Registers used:
  7775 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7776 ;; Tracked objects:
  7777 ;;		On entry : 0/0
  7778 ;;		On exit  : 0/0
  7779 ;;		Unchanged: 0/0
  7780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7784 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7785 ;;Total ram usage:        0 bytes
  7786 ;; Hardware stack levels used:    1
  7787 ;; Hardware stack levels required when called:   11
  7788 ;; This function calls:
  7789 ;;		_DS3231_Read_Time
  7790 ;;		_Initialize_Screen
  7791 ;; This function is called by:
  7792 ;;		_Do_Setup_Heater_Temp
  7793 ;; This function uses a non-reentrant model
  7794 ;;
  7795                           
  7796                           	psect	text35
  7797  003C8A                     __ptext35:
  7798                           	opt stack 0
  7799  003C8A                     _Do_Save_New_Heater_Temp:
  7800                           	opt stack 18
  7801                           
  7802                           ;Setup_Heater_Temp.c: 82: heater_set_temp = setup_heater_set_temp;
  7803                           
  7804                           ; BSR set to: 0
  7805                           ;incstack = 0
  7806  003C8A  C068  F06F         	movff	_setup_heater_set_temp,_heater_set_temp
  7807                           
  7808                           ;Setup_Heater_Temp.c: 83: DS3231_Read_Time();
  7809  003C8E  EC72  F019         	call	_DS3231_Read_Time	;wreg free
  7810                           
  7811                           ;Setup_Heater_Temp.c: 84: Initialize_Screen();
  7812  003C92  EC37  F003         	call	_Initialize_Screen	;wreg free
  7813                           
  7814                           ;Setup_Heater_Temp.c: 85: In_Heater_Temp_Setup = 0;
  7815  003C96  0E00               	movlw	0
  7816  003C98  0100               	movlb	0	; () banked
  7817  003C9A  6FF9               	movwf	_In_Heater_Temp_Setup& (0+255),b
  7818                           
  7819                           ; BSR set to: 0
  7820  003C9C  0012               	return		;funcret
  7821  003C9E                     __end_of_Do_Save_New_Heater_Temp:
  7822                           	opt stack 0
  7823                           tblptru	equ	0xFF8
  7824                           tblptrh	equ	0xFF7
  7825                           tblptrl	equ	0xFF6
  7826                           tablat	equ	0xFF5
  7827                           prodl	equ	0xFF3
  7828                           postinc0	equ	0xFEE
  7829                           wreg	equ	0xFE8
  7830                           postdec1	equ	0xFE5
  7831                           fsr1l	equ	0xFE1
  7832                           status	equ	0xFD8
  7833                           
  7834 ;; *************** function _Decrease_Heater_Temp *****************
  7835 ;; Defined at:
  7836 ;;		line 63 in file "Setup_Heater_Temp.c"
  7837 ;; Parameters:    Size  Location     Type
  7838 ;;		None
  7839 ;; Auto vars:     Size  Location     Type
  7840 ;;		None
  7841 ;; Return value:  Size  Location     Type
  7842 ;;		None               void
  7843 ;; Registers used:
  7844 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7845 ;; Tracked objects:
  7846 ;;		On entry : 0/0
  7847 ;;		On exit  : 0/0
  7848 ;;		Unchanged: 0/0
  7849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7854 ;;Total ram usage:        0 bytes
  7855 ;; Hardware stack levels used:    1
  7856 ;; Hardware stack levels required when called:   11
  7857 ;; This function calls:
  7858 ;;		_Update_Setup_Heater_Screen
  7859 ;; This function is called by:
  7860 ;;		_Do_Setup_Heater_Temp
  7861 ;; This function uses a non-reentrant model
  7862 ;;
  7863                           
  7864                           	psect	text36
  7865  003C00                     __ptext36:
  7866                           	opt stack 0
  7867  003C00                     _Decrease_Heater_Temp:
  7868                           	opt stack 18
  7869                           
  7870                           ;Setup_Heater_Temp.c: 65: if(setup_heater_set_temp == 50) setup_heater_set_temp = 50;
  7871                           
  7872                           ; BSR set to: 0
  7873                           ;incstack = 0
  7874  003C00  0E32               	movlw	50
  7875  003C02  1868               	xorwf	_setup_heater_set_temp,w,c
  7876  003C04  A4D8               	btfss	status,2,c
  7877  003C06  D003               	goto	l9291
  7878  003C08  0E32               	movlw	50
  7879  003C0A  6E68               	movwf	_setup_heater_set_temp,c
  7880  003C0C  D002               	goto	l9293
  7881  003C0E                     l9291:
  7882                           
  7883                           ;Setup_Heater_Temp.c: 66: else setup_heater_set_temp--;
  7884  003C0E  0668               	decf	_setup_heater_set_temp,f,c
  7885  003C10  D000               	goto	l9293
  7886  003C12                     l9293:
  7887                           
  7888                           ;Setup_Heater_Temp.c: 68: Update_Setup_Heater_Screen();
  7889  003C12  EC3F  F015         	call	_Update_Setup_Heater_Screen	;wreg free
  7890  003C16  0012               	return		;funcret
  7891  003C18                     __end_of_Decrease_Heater_Temp:
  7892                           	opt stack 0
  7893                           tblptru	equ	0xFF8
  7894                           tblptrh	equ	0xFF7
  7895                           tblptrl	equ	0xFF6
  7896                           tablat	equ	0xFF5
  7897                           prodl	equ	0xFF3
  7898                           postinc0	equ	0xFEE
  7899                           wreg	equ	0xFE8
  7900                           postdec1	equ	0xFE5
  7901                           fsr1l	equ	0xFE1
  7902                           status	equ	0xFD8
  7903                           
  7904 ;; *************** function _Update_Setup_Heater_Screen *****************
  7905 ;; Defined at:
  7906 ;;		line 103 in file "Setup_Heater_Temp.c"
  7907 ;; Parameters:    Size  Location     Type
  7908 ;;		None
  7909 ;; Auto vars:     Size  Location     Type
  7910 ;;  dc_char3        1    2[BANK0 ] unsigned char 
  7911 ;;  dc_char2        1    1[BANK0 ] unsigned char 
  7912 ;;  dc_char1        1    0[BANK0 ] unsigned char 
  7913 ;; Return value:  Size  Location     Type
  7914 ;;		None               void
  7915 ;; Registers used:
  7916 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7917 ;; Tracked objects:
  7918 ;;		On entry : 0/0
  7919 ;;		On exit  : 0/0
  7920 ;;		Unchanged: 0/0
  7921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7923 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7925 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7926 ;;Total ram usage:        3 bytes
  7927 ;; Hardware stack levels used:    1
  7928 ;; Hardware stack levels required when called:   10
  7929 ;; This function calls:
  7930 ;;		___awdiv
  7931 ;;		___awmod
  7932 ;;		_drawtext
  7933 ;; This function is called by:
  7934 ;;		_Do_Setup_Heater_Temp
  7935 ;;		_Increase_Heater_Temp
  7936 ;;		_Decrease_Heater_Temp
  7937 ;; This function uses a non-reentrant model
  7938 ;;
  7939                           
  7940                           	psect	text37
  7941  002A7E                     __ptext37:
  7942                           	opt stack 0
  7943  002A7E                     _Update_Setup_Heater_Screen:
  7944                           	opt stack 19
  7945                           
  7946                           ;Setup_Heater_Temp.c: 105: char dc_char1 = setup_heater_set_temp/100;
  7947                           
  7948                           ;incstack = 0
  7949  002A7E  C068  F134         	movff	_setup_heater_set_temp,___awdiv@dividend
  7950  002A82  0101               	movlb	1	; () banked
  7951  002A84  6B35               	clrf	(___awdiv@dividend+1)& (0+255),b
  7952  002A86  0E00               	movlw	0
  7953  002A88  0101               	movlb	1	; () banked
  7954  002A8A  6F37               	movwf	(___awdiv@divisor+1)& (0+255),b
  7955  002A8C  0E64               	movlw	100
  7956  002A8E  6F36               	movwf	___awdiv@divisor& (0+255),b
  7957  002A90  EC3A  F012         	call	___awdiv	;wreg free
  7958  002A94  0101               	movlb	1	; () banked
  7959  002A96  5134               	movf	?___awdiv& (0+255),w,b
  7960  002A98  0100               	movlb	0	; () banked
  7961  002A9A  6FFD               	movwf	Update_Setup_Heater_Screen@dc_char1& (0+255),b
  7962                           
  7963                           ;Setup_Heater_Temp.c: 106: char dc_char2 = (setup_heater_set_temp%100) / 10;
  7964  002A9C  0E00               	movlw	0
  7965  002A9E  6E3E               	movwf	___awmod@divisor+1,c
  7966  002AA0  0E64               	movlw	100
  7967  002AA2  6E3D               	movwf	___awmod@divisor,c
  7968  002AA4  C068  F03B         	movff	_setup_heater_set_temp,___awmod@dividend
  7969  002AA8  6A3C               	clrf	___awmod@dividend+1,c
  7970  002AAA  ECD9  F017         	call	___awmod	;wreg free
  7971  002AAE  C03B  F134         	movff	?___awmod,___awdiv@dividend
  7972  002AB2  C03C  F135         	movff	?___awmod+1,___awdiv@dividend+1
  7973  002AB6  0E00               	movlw	0
  7974  002AB8  0101               	movlb	1	; () banked
  7975  002ABA  6F37               	movwf	(___awdiv@divisor+1)& (0+255),b
  7976  002ABC  0E0A               	movlw	10
  7977  002ABE  6F36               	movwf	___awdiv@divisor& (0+255),b
  7978  002AC0  EC3A  F012         	call	___awdiv	;wreg free
  7979  002AC4  0101               	movlb	1	; () banked
  7980  002AC6  5134               	movf	?___awdiv& (0+255),w,b
  7981  002AC8  0100               	movlb	0	; () banked
  7982  002ACA  6FFE               	movwf	Update_Setup_Heater_Screen@dc_char2& (0+255),b
  7983                           
  7984                           ;Setup_Heater_Temp.c: 107: char dc_char3 = (setup_heater_set_temp%10);
  7985  002ACC  C068  F03B         	movff	_setup_heater_set_temp,___awmod@dividend
  7986  002AD0  6A3C               	clrf	___awmod@dividend+1,c
  7987  002AD2  0E00               	movlw	0
  7988  002AD4  6E3E               	movwf	___awmod@divisor+1,c
  7989  002AD6  0E0A               	movlw	10
  7990  002AD8  6E3D               	movwf	___awmod@divisor,c
  7991  002ADA  ECD9  F017         	call	___awmod	;wreg free
  7992  002ADE  503B               	movf	?___awmod,w,c
  7993  002AE0  0100               	movlb	0	; () banked
  7994  002AE2  6FFF               	movwf	Update_Setup_Heater_Screen@dc_char3& (0+255),b
  7995                           
  7996                           ; BSR set to: 0
  7997                           ;Setup_Heater_Temp.c: 108: setup_heater_set_text[0] = dc_char1 + '0';
  7998  002AE4  0100               	movlb	0	; () banked
  7999  002AE6  51FD               	movf	Update_Setup_Heater_Screen@dc_char1& (0+255),w,b
  8000  002AE8  0F30               	addlw	48
  8001  002AEA  0100               	movlb	0	; () banked
  8002  002AEC  6FC8               	movwf	_setup_heater_set_text& (0+255),b
  8003                           
  8004                           ; BSR set to: 0
  8005                           ;Setup_Heater_Temp.c: 109: setup_heater_set_text[1] = dc_char2 + '0';
  8006  002AEE  0100               	movlb	0	; () banked
  8007  002AF0  51FE               	movf	Update_Setup_Heater_Screen@dc_char2& (0+255),w,b
  8008  002AF2  0F30               	addlw	48
  8009  002AF4  0100               	movlb	0	; () banked
  8010  002AF6  6FC9               	movwf	(_setup_heater_set_text+1)& (0+255),b
  8011                           
  8012                           ; BSR set to: 0
  8013                           ;Setup_Heater_Temp.c: 110: setup_heater_set_text[2] = dc_char3 + '0';
  8014  002AF8  0100               	movlb	0	; () banked
  8015  002AFA  51FF               	movf	Update_Setup_Heater_Screen@dc_char3& (0+255),w,b
  8016  002AFC  0F30               	addlw	48
  8017  002AFE  0100               	movlb	0	; () banked
  8018  002B00  6FCA               	movwf	(_setup_heater_set_text+2)& (0+255),b
  8019                           
  8020                           ; BSR set to: 0
  8021                           ;Setup_Heater_Temp.c: 111: drawtext(40, 74 ,setup_heater_set_text, 0xF800, 0x0000, 2);
  8022  002B02  0E4A               	movlw	74
  8023  002B04  6E39               	movwf	drawtext@y,c
  8024  002B06  0EC8               	movlw	low _setup_heater_set_text
  8025  002B08  6E3A               	movwf	drawtext@_text,c
  8026  002B0A  0E00               	movlw	high _setup_heater_set_text
  8027  002B0C  6E3B               	movwf	drawtext@_text+1,c
  8028  002B0E  0EF8               	movlw	248
  8029  002B10  6E3D               	movwf	drawtext@color+1,c
  8030  002B12  0E00               	movlw	0
  8031  002B14  6E3C               	movwf	drawtext@color,c
  8032  002B16  0E00               	movlw	0
  8033  002B18  6E3F               	movwf	drawtext@bg+1,c
  8034  002B1A  0E00               	movlw	0
  8035  002B1C  6E3E               	movwf	drawtext@bg,c
  8036  002B1E  0E02               	movlw	2
  8037  002B20  6E40               	movwf	drawtext@size,c
  8038  002B22  0E28               	movlw	40
  8039  002B24  ECEA  F00C         	call	_drawtext
  8040  002B28  0012               	return		;funcret
  8041  002B2A                     __end_of_Update_Setup_Heater_Screen:
  8042                           	opt stack 0
  8043                           tblptru	equ	0xFF8
  8044                           tblptrh	equ	0xFF7
  8045                           tblptrl	equ	0xFF6
  8046                           tablat	equ	0xFF5
  8047                           prodl	equ	0xFF3
  8048                           postinc0	equ	0xFEE
  8049                           wreg	equ	0xFE8
  8050                           postdec1	equ	0xFE5
  8051                           fsr1l	equ	0xFE1
  8052                           status	equ	0xFD8
  8053                           
  8054 ;; *************** function _Do_Setup_Alarm_Time *****************
  8055 ;; Defined at:
  8056 ;;		line 24 in file "Setup_Alarm_Time.c"
  8057 ;; Parameters:    Size  Location     Type
  8058 ;;		None
  8059 ;; Auto vars:     Size  Location     Type
  8060 ;;		None
  8061 ;; Return value:  Size  Location     Type
  8062 ;;                  2   72[None  ] int 
  8063 ;; Registers used:
  8064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8065 ;; Tracked objects:
  8066 ;;		On entry : 0/0
  8067 ;;		On exit  : 0/0
  8068 ;;		Unchanged: 0/0
  8069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8073 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8074 ;;Total ram usage:        0 bytes
  8075 ;; Hardware stack levels used:    1
  8076 ;; Hardware stack levels required when called:   12
  8077 ;; This function calls:
  8078 ;;		_DS3231_Read_Alarm_Time
  8079 ;;		_Decrease_Alarm_Time
  8080 ;;		_Do_Beep_Bad
  8081 ;;		_Do_Beep_Good
  8082 ;;		_Do_Save_New_Alarm_Time
  8083 ;;		_Exit_Setup_Alarm_Time
  8084 ;;		_Go_Next_Alarm_Field
  8085 ;;		_Go_Prev_Alarm_Field
  8086 ;;		_Increase_Alarm_Time
  8087 ;;		_Initialize_Setup_Alarm_Time_Screen
  8088 ;;		_Update_Setup_Alarm_Time_Screen
  8089 ;;		_bcd_2_dec
  8090 ;;		_check_for_button_input
  8091 ;; This function is called by:
  8092 ;;		_main
  8093 ;; This function uses a non-reentrant model
  8094 ;;
  8095                           
  8096                           	psect	text38
  8097  0027A0                     __ptext38:
  8098                           	opt stack 0
  8099  0027A0                     _Do_Setup_Alarm_Time:
  8100                           	opt stack 18
  8101                           
  8102                           ;Setup_Alarm_Time.c: 26: Select_Alarm_Field = 0;
  8103                           
  8104                           ;incstack = 0
  8105  0027A0  0E00               	movlw	0
  8106  0027A2  6E52               	movwf	_Select_Alarm_Field,c
  8107                           
  8108                           ;Setup_Alarm_Time.c: 27: In_Alarm_Time_Setup = 1;
  8109  0027A4  0E01               	movlw	1
  8110  0027A6  0100               	movlb	0	; () banked
  8111  0027A8  6FF8               	movwf	_In_Alarm_Time_Setup& (0+255),b
  8112                           
  8113                           ; BSR set to: 0
  8114                           ;Setup_Alarm_Time.c: 28: DS3231_Read_Alarm_Time();
  8115  0027AA  EC4A  F01B         	call	_DS3231_Read_Alarm_Time	;wreg free
  8116                           
  8117                           ;Setup_Alarm_Time.c: 29: alarm_second = bcd_2_dec(alarm_second);
  8118  0027AE  5058               	movf	_alarm_second,w,c
  8119  0027B0  ECFD  F01C         	call	_bcd_2_dec
  8120  0027B4  6E58               	movwf	_alarm_second,c
  8121                           
  8122                           ;Setup_Alarm_Time.c: 30: alarm_minute = bcd_2_dec(alarm_minute);
  8123  0027B6  5057               	movf	_alarm_minute,w,c
  8124  0027B8  ECFD  F01C         	call	_bcd_2_dec
  8125  0027BC  6E57               	movwf	_alarm_minute,c
  8126                           
  8127                           ;Setup_Alarm_Time.c: 31: alarm_hour = bcd_2_dec(alarm_hour);
  8128  0027BE  5056               	movf	_alarm_hour,w,c
  8129  0027C0  ECFD  F01C         	call	_bcd_2_dec
  8130  0027C4  6E56               	movwf	_alarm_hour,c
  8131                           
  8132                           ;Setup_Alarm_Time.c: 32: setup_alarm_second = alarm_second;
  8133  0027C6  C058  F066         	movff	_alarm_second,_setup_alarm_second
  8134                           
  8135                           ;Setup_Alarm_Time.c: 33: setup_alarm_minute = alarm_minute;
  8136  0027CA  C057  F065         	movff	_alarm_minute,_setup_alarm_minute
  8137                           
  8138                           ;Setup_Alarm_Time.c: 34: setup_alarm_hour = alarm_hour;
  8139  0027CE  C056  F064         	movff	_alarm_hour,_setup_alarm_hour
  8140                           
  8141                           ;Setup_Alarm_Time.c: 35: Initialize_Setup_Alarm_Time_Screen();
  8142  0027D2  ECF7  F00D         	call	_Initialize_Setup_Alarm_Time_Screen	;wreg free
  8143                           
  8144                           ;Setup_Alarm_Time.c: 36: Update_Setup_Alarm_Time_Screen();
  8145  0027D6  EC6F  F010         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
  8146                           
  8147                           ;Setup_Alarm_Time.c: 37: while (In_Alarm_Time_Setup == 1)
  8148  0027DA  D03C               	goto	l9887
  8149  0027DC                     l9851:
  8150                           
  8151                           ;Setup_Alarm_Time.c: 38: {
  8152                           ;Setup_Alarm_Time.c: 39: if (check_for_button_input() == 1)
  8153  0027DC  EC1A  F018         	call	_check_for_button_input	;wreg free
  8154  0027E0  06E8               	decf	wreg,f,c
  8155  0027E2  A4D8               	btfss	status,2,c
  8156  0027E4  D037               	goto	l9887
  8157                           
  8158                           ;Setup_Alarm_Time.c: 40: {
  8159                           ;Setup_Alarm_Time.c: 41: if (found >= 3 && found <= 8)
  8160  0027E6  0E02               	movlw	2
  8161  0027E8  645E               	cpfsgt	_found,c
  8162  0027EA  D031               	goto	l9885
  8163  0027EC  0E09               	movlw	9
  8164  0027EE  605E               	cpfslt	_found,c
  8165  0027F0  D02E               	goto	l9885
  8166                           
  8167                           ;Setup_Alarm_Time.c: 42: {
  8168                           ;Setup_Alarm_Time.c: 43: Do_Beep_Good();
  8169  0027F2  EC4F  F01E         	call	_Do_Beep_Good	;wreg free
  8170                           
  8171                           ;Setup_Alarm_Time.c: 44: if (found == 3) Go_Prev_Alarm_Field();
  8172  0027F6  0E03               	movlw	3
  8173  0027F8  185E               	xorwf	_found,w,c
  8174  0027FA  A4D8               	btfss	status,2,c
  8175  0027FC  D003               	goto	l9863
  8176  0027FE  EC0C  F01E         	call	_Go_Prev_Alarm_Field	;wreg free
  8177  002802  D000               	goto	l9863
  8178  002804                     l9863:
  8179                           
  8180                           ;Setup_Alarm_Time.c: 45: if (found == 4) Go_Next_Alarm_Field();
  8181  002804  0E04               	movlw	4
  8182  002806  185E               	xorwf	_found,w,c
  8183  002808  A4D8               	btfss	status,2,c
  8184  00280A  D003               	goto	l9867
  8185  00280C  EC18  F01E         	call	_Go_Next_Alarm_Field	;wreg free
  8186  002810  D000               	goto	l9867
  8187  002812                     l9867:
  8188                           
  8189                           ;Setup_Alarm_Time.c: 46: if (found == 5) Do_Save_New_Alarm_Time();
  8190  002812  0E05               	movlw	5
  8191  002814  185E               	xorwf	_found,w,c
  8192  002816  A4D8               	btfss	status,2,c
  8193  002818  D003               	goto	l9871
  8194  00281A  EC24  F01E         	call	_Do_Save_New_Alarm_Time	;wreg free
  8195  00281E  D000               	goto	l9871
  8196  002820                     l9871:
  8197                           
  8198                           ;Setup_Alarm_Time.c: 47: if (found == 6) Decrease_Alarm_Time();
  8199  002820  0E06               	movlw	6
  8200  002822  185E               	xorwf	_found,w,c
  8201  002824  A4D8               	btfss	status,2,c
  8202  002826  D003               	goto	l9875
  8203  002828  ECFC  F01A         	call	_Decrease_Alarm_Time	;wreg free
  8204  00282C  D000               	goto	l9875
  8205  00282E                     l9875:
  8206                           
  8207                           ;Setup_Alarm_Time.c: 48: if (found == 7) Increase_Alarm_Time();
  8208  00282E  0E07               	movlw	7
  8209  002830  185E               	xorwf	_found,w,c
  8210  002832  A4D8               	btfss	status,2,c
  8211  002834  D003               	goto	l9879
  8212  002836  ECD5  F01A         	call	_Increase_Alarm_Time	;wreg free
  8213  00283A  D000               	goto	l9879
  8214  00283C                     l9879:
  8215                           
  8216                           ;Setup_Alarm_Time.c: 49: if (found == 8) Exit_Setup_Alarm_Time();
  8217  00283C  0E08               	movlw	8
  8218  00283E  185E               	xorwf	_found,w,c
  8219  002840  A4D8               	btfss	status,2,c
  8220  002842  D003               	goto	l9883
  8221  002844  ECD6  F01E         	call	_Exit_Setup_Alarm_Time	;wreg free
  8222  002848  D000               	goto	l9883
  8223  00284A                     l9883:
  8224                           
  8225                           ;Setup_Alarm_Time.c: 50: found = 0xff;
  8226  00284A  685E               	setf	_found,c
  8227                           
  8228                           ;Setup_Alarm_Time.c: 51: }
  8229  00284C  D003               	goto	l9887
  8230  00284E                     l9885:
  8231                           
  8232                           ;Setup_Alarm_Time.c: 52: else
  8233                           ;Setup_Alarm_Time.c: 53: {
  8234                           ;Setup_Alarm_Time.c: 54: Do_Beep_Bad();
  8235  00284E  EC59  F01E         	call	_Do_Beep_Bad	;wreg free
  8236  002852  D000               	goto	l9887
  8237  002854                     l9887:
  8238  002854  0100               	movlb	0	; () banked
  8239  002856  05F8               	decf	_In_Alarm_Time_Setup& (0+255),w,b
  8240  002858  B4D8               	btfsc	status,2,c
  8241  00285A  D7C0               	goto	l9851
  8242                           
  8243                           ; BSR set to: 0
  8244                           
  8245                           ; BSR set to: 0
  8246  00285C  0012               	return		;funcret
  8247  00285E                     __end_of_Do_Setup_Alarm_Time:
  8248                           	opt stack 0
  8249                           tblptru	equ	0xFF8
  8250                           tblptrh	equ	0xFF7
  8251                           tblptrl	equ	0xFF6
  8252                           tablat	equ	0xFF5
  8253                           prodl	equ	0xFF3
  8254                           postinc0	equ	0xFEE
  8255                           wreg	equ	0xFE8
  8256                           postdec1	equ	0xFE5
  8257                           fsr1l	equ	0xFE1
  8258                           status	equ	0xFD8
  8259                           
  8260 ;; *************** function _check_for_button_input *****************
  8261 ;; Defined at:
  8262 ;;		line 14 in file "utils.c"
  8263 ;; Parameters:    Size  Location     Type
  8264 ;;		None
  8265 ;; Auto vars:     Size  Location     Type
  8266 ;;  j               2   57[COMRAM] int 
  8267 ;; Return value:  Size  Location     Type
  8268 ;;                  1    wreg      unsigned char 
  8269 ;; Registers used:
  8270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8271 ;; Tracked objects:
  8272 ;;		On entry : 0/0
  8273 ;;		On exit  : 0/0
  8274 ;;		Unchanged: 0/0
  8275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8277 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8278 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8279 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8280 ;;Total ram usage:        3 bytes
  8281 ;; Hardware stack levels used:    1
  8282 ;; Hardware stack levels required when called:    5
  8283 ;; This function calls:
  8284 ;;		_printf
  8285 ;; This function is called by:
  8286 ;;		_main
  8287 ;;		_Do_Setup_Alarm_Time
  8288 ;;		_Do_Setup_Heater_Temp
  8289 ;;		_Do_Setup_Time
  8290 ;; This function uses a non-reentrant model
  8291 ;;
  8292                           
  8293                           	psect	text39
  8294  003034                     __ptext39:
  8295                           	opt stack 0
  8296  003034                     _check_for_button_input:
  8297                           	opt stack 25
  8298                           
  8299                           ;utils.c: 16: if (nec_ok == 1)
  8300                           
  8301                           ; BSR set to: 0
  8302                           ;incstack = 0
  8303  003034  0100               	movlb	0	; () banked
  8304  003036  05F2               	decf	_nec_ok& (0+255),w,b
  8305  003038  0100               	movlb	0	; () banked
  8306  00303A  11F3               	iorwf	(_nec_ok+1)& (0+255),w,b
  8307  00303C  A4D8               	btfss	status,2,c
  8308  00303E  D039               	goto	l1329
  8309                           
  8310                           ; BSR set to: 0
  8311                           ;utils.c: 17: {
  8312                           ;utils.c: 18: nec_ok = 0;
  8313  003040  0E00               	movlw	0
  8314  003042  0100               	movlb	0	; () banked
  8315  003044  6FF3               	movwf	(_nec_ok+1)& (0+255),b
  8316  003046  0E00               	movlw	0
  8317  003048  6FF2               	movwf	_nec_ok& (0+255),b
  8318                           
  8319                           ; BSR set to: 0
  8320                           ;utils.c: 21: INTCONbits.INT0IE = 1;
  8321  00304A  88F2               	bsf	intcon,4,c	;volatile
  8322                           
  8323                           ; BSR set to: 0
  8324                           ;utils.c: 22: INTCON2bits.INTEDG0 = 0;
  8325  00304C  9CF1               	bcf	intcon2,6,c	;volatile
  8326                           
  8327                           ; BSR set to: 0
  8328                           ;utils.c: 24: found = 0xff;
  8329  00304E  685E               	setf	_found,c
  8330                           
  8331                           ;utils.c: 25: for (int j=0; j< 21; j++)
  8332  003050  0E00               	movlw	0
  8333  003052  6E3B               	movwf	check_for_button_input@j+1,c
  8334  003054  0E00               	movlw	0
  8335  003056  6E3A               	movwf	check_for_button_input@j,c
  8336  003058                     l9099:
  8337                           
  8338                           ; BSR set to: 0
  8339  003058  BE3B               	btfsc	check_for_button_input@j+1,7,c
  8340  00305A  D008               	goto	l9103
  8341  00305C  503B               	movf	check_for_button_input@j+1,w,c
  8342  00305E  E11C               	bnz	l9113
  8343  003060  0E15               	movlw	21
  8344  003062  5C3A               	subwf	check_for_button_input@j,w,c
  8345  003064  B0D8               	btfsc	status,0,c
  8346  003066  D018               	goto	l9113
  8347  003068  D001               	goto	l9103
  8348                           
  8349                           ; BSR set to: 0
  8350  00306A  D016               	goto	l9113
  8351  00306C                     l9103:
  8352                           
  8353                           ; BSR set to: 0
  8354                           ;utils.c: 26: {
  8355                           ;utils.c: 27: if (Nec_code1 == array1[j])
  8356  00306C  0E1F               	movlw	low _array1
  8357  00306E  243A               	addwf	check_for_button_input@j,w,c
  8358  003070  6ED9               	movwf	fsr2l,c
  8359  003072  0E01               	movlw	high _array1
  8360  003074  203B               	addwfc	check_for_button_input@j+1,w,c
  8361  003076  6EDA               	movwf	fsr2h,c
  8362  003078  0100               	movlb	0	; () banked
  8363  00307A  51FB               	movf	_Nec_code1& (0+255),w,b
  8364  00307C  18DE               	xorwf	postinc2,w,c
  8365  00307E  A4D8               	btfss	status,2,c
  8366  003080  D007               	goto	l9109
  8367                           
  8368                           ; BSR set to: 0
  8369                           ;utils.c: 28: {
  8370                           ;utils.c: 29: found = j;
  8371  003082  C03A  F05E         	movff	check_for_button_input@j,_found
  8372                           
  8373                           ; BSR set to: 0
  8374                           ;utils.c: 30: j = 21;
  8375  003086  0E00               	movlw	0
  8376  003088  6E3B               	movwf	check_for_button_input@j+1,c
  8377  00308A  0E15               	movlw	21
  8378  00308C  6E3A               	movwf	check_for_button_input@j,c
  8379  00308E  D000               	goto	l9109
  8380  003090                     l9109:
  8381                           
  8382                           ; BSR set to: 0
  8383  003090  4A3A               	infsnz	check_for_button_input@j,f,c
  8384  003092  2A3B               	incf	check_for_button_input@j+1,f,c
  8385  003094  D7E1               	goto	l9099
  8386                           
  8387                           ; BSR set to: 0
  8388  003096  D000               	goto	l9113
  8389  003098                     l9113:
  8390                           
  8391                           ; BSR set to: 0
  8392                           ;utils.c: 31: }
  8393                           ;utils.c: 32: }
  8394                           ;utils.c: 34: if (found == 0xff)
  8395  003098  285E               	incf	_found,w,c
  8396  00309A  A4D8               	btfss	status,2,c
  8397  00309C  D008               	goto	l9123
  8398                           
  8399                           ; BSR set to: 0
  8400                           ;utils.c: 35: {
  8401                           ;utils.c: 36: printf ("Cannot find button \r\n");
  8402  00309E  0ED6               	movlw	low STR_35
  8403  0030A0  6E1D               	movwf	printf@f,c
  8404  0030A2  0EFE               	movlw	high STR_35
  8405  0030A4  6E1E               	movwf	printf@f+1,c
  8406  0030A6  ECF7  F004         	call	_printf	;wreg free
  8407                           
  8408                           ;utils.c: 37: return (0);
  8409  0030AA  0E00               	movlw	0
  8410                           
  8411                           ;utils.c: 38: }
  8412  0030AC  D002               	goto	l1329
  8413  0030AE                     l9123:
  8414                           
  8415                           ;utils.c: 39: else
  8416                           ;utils.c: 40: {
  8417                           ;utils.c: 41: return (1);
  8418  0030AE  0E01               	movlw	1
  8419  0030B0  D000               	goto	l1329
  8420  0030B2                     l1329:
  8421  0030B2  0012               	return		;funcret
  8422  0030B4                     __end_of_check_for_button_input:
  8423                           	opt stack 0
  8424                           tblptru	equ	0xFF8
  8425                           tblptrh	equ	0xFF7
  8426                           tblptrl	equ	0xFF6
  8427                           tablat	equ	0xFF5
  8428                           prodl	equ	0xFF3
  8429                           intcon	equ	0xFF2
  8430                           intcon2	equ	0xFF1
  8431                           postinc0	equ	0xFEE
  8432                           wreg	equ	0xFE8
  8433                           postdec1	equ	0xFE5
  8434                           fsr1l	equ	0xFE1
  8435                           postinc2	equ	0xFDE
  8436                           fsr2h	equ	0xFDA
  8437                           fsr2l	equ	0xFD9
  8438                           status	equ	0xFD8
  8439                           
  8440 ;; *************** function _bcd_2_dec *****************
  8441 ;; Defined at:
  8442 ;;		line 46 in file "utils.c"
  8443 ;; Parameters:    Size  Location     Type
  8444 ;;  bcd             1    wreg     unsigned char 
  8445 ;; Auto vars:     Size  Location     Type
  8446 ;;  bcd             1   20[COMRAM] unsigned char 
  8447 ;;  dec             2   18[COMRAM] int 
  8448 ;; Return value:  Size  Location     Type
  8449 ;;                  1    wreg      unsigned char 
  8450 ;; Registers used:
  8451 ;;		wreg, status,2, status,0, prodl, prodh
  8452 ;; Tracked objects:
  8453 ;;		On entry : 0/0
  8454 ;;		On exit  : 0/0
  8455 ;;		Unchanged: 0/0
  8456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8458 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8459 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8460 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8461 ;;Total ram usage:        5 bytes
  8462 ;; Hardware stack levels used:    1
  8463 ;; Hardware stack levels required when called:    3
  8464 ;; This function calls:
  8465 ;;		Nothing
  8466 ;; This function is called by:
  8467 ;;		_Do_Setup_Alarm_Time
  8468 ;;		_Do_Setup_Time
  8469 ;; This function uses a non-reentrant model
  8470 ;;
  8471                           
  8472                           	psect	text40
  8473  0039FA                     __ptext40:
  8474                           	opt stack 0
  8475  0039FA                     _bcd_2_dec:
  8476                           	opt stack 26
  8477                           
  8478                           ;incstack = 0
  8479                           ;bcd_2_dec@bcd stored from wreg
  8480  0039FA  6E15               	movwf	bcd_2_dec@bcd,c
  8481                           
  8482                           ;utils.c: 48: int dec;
  8483                           ;utils.c: 49: dec = ((bcd>> 4) * 10) + (bcd & 0x0f);
  8484  0039FC  C015  F011         	movff	bcd_2_dec@bcd,??_bcd_2_dec
  8485  003A00  0E0F               	movlw	15
  8486  003A02  1611               	andwf	??_bcd_2_dec,f,c
  8487  003A04  C015  F012         	movff	bcd_2_dec@bcd,??_bcd_2_dec+1
  8488  003A08  3A12               	swapf	??_bcd_2_dec+1,f,c
  8489  003A0A  0E0F               	movlw	15
  8490  003A0C  1612               	andwf	??_bcd_2_dec+1,f,c
  8491  003A0E  5012               	movf	??_bcd_2_dec+1,w,c
  8492  003A10  0D0A               	mullw	10
  8493  003A12  5011               	movf	??_bcd_2_dec,w,c
  8494  003A14  24F3               	addwf	prodl,w,c
  8495  003A16  6E13               	movwf	bcd_2_dec@dec,c
  8496  003A18  0E00               	movlw	0
  8497  003A1A  20F4               	addwfc	prodh,w,c
  8498  003A1C  6E14               	movwf	bcd_2_dec@dec+1,c
  8499                           
  8500                           ;utils.c: 50: return dec;
  8501  003A1E  5013               	movf	bcd_2_dec@dec,w,c
  8502  003A20  D000               	goto	l1333
  8503  003A22                     l1333:
  8504  003A22  0012               	return		;funcret
  8505  003A24                     __end_of_bcd_2_dec:
  8506                           	opt stack 0
  8507                           tblptru	equ	0xFF8
  8508                           tblptrh	equ	0xFF7
  8509                           tblptrl	equ	0xFF6
  8510                           tablat	equ	0xFF5
  8511                           prodh	equ	0xFF4
  8512                           prodl	equ	0xFF3
  8513                           intcon	equ	0xFF2
  8514                           intcon2	equ	0xFF1
  8515                           postinc0	equ	0xFEE
  8516                           wreg	equ	0xFE8
  8517                           postdec1	equ	0xFE5
  8518                           fsr1l	equ	0xFE1
  8519                           postinc2	equ	0xFDE
  8520                           fsr2h	equ	0xFDA
  8521                           fsr2l	equ	0xFD9
  8522                           status	equ	0xFD8
  8523                           
  8524 ;; *************** function _Initialize_Setup_Alarm_Time_Screen *****************
  8525 ;; Defined at:
  8526 ;;		line 144 in file "Setup_Alarm_Time.c"
  8527 ;; Parameters:    Size  Location     Type
  8528 ;;		None
  8529 ;; Auto vars:     Size  Location     Type
  8530 ;;		None
  8531 ;; Return value:  Size  Location     Type
  8532 ;;		None               void
  8533 ;; Registers used:
  8534 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8535 ;; Tracked objects:
  8536 ;;		On entry : 0/0
  8537 ;;		On exit  : 0/0
  8538 ;;		Unchanged: 0/0
  8539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8543 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8544 ;;Total ram usage:        0 bytes
  8545 ;; Hardware stack levels used:    1
  8546 ;; Hardware stack levels required when called:   10
  8547 ;; This function calls:
  8548 ;;		_drawtext
  8549 ;;		_fillRect
  8550 ;;		_fillScreen
  8551 ;;		_strcpy
  8552 ;; This function is called by:
  8553 ;;		_Do_Setup_Alarm_Time
  8554 ;; This function uses a non-reentrant model
  8555 ;;
  8556                           
  8557                           	psect	text41
  8558  001BEE                     __ptext41:
  8559                           	opt stack 0
  8560  001BEE                     _Initialize_Setup_Alarm_Time_Screen:
  8561                           	opt stack 19
  8562                           
  8563                           ;Setup_Alarm_Time.c: 146: fillScreen(0x0000);
  8564                           
  8565                           ;incstack = 0
  8566  001BEE  0E00               	movlw	0
  8567  001BF0  6E25               	movwf	fillScreen@color+1,c
  8568  001BF2  0E00               	movlw	0
  8569  001BF4  6E24               	movwf	fillScreen@color,c
  8570  001BF6  ECB3  F01D         	call	_fillScreen	;wreg free
  8571                           
  8572                           ;Setup_Alarm_Time.c: 148: strcpy(txt, "ECE3301L Sp'22 Sx");
  8573  001BFA  C04E  F011         	movff	_txt,strcpy@to
  8574  001BFE  C04F  F012         	movff	_txt+1,strcpy@to+1
  8575  001C02  0E3B               	movlw	low STR_22
  8576  001C04  6E13               	movwf	strcpy@from,c
  8577  001C06  0EFF               	movlw	high STR_22
  8578  001C08  6E14               	movwf	strcpy@from+1,c
  8579  001C0A  ECCC  F01C         	call	_strcpy	;wreg free
  8580                           
  8581                           ;Setup_Alarm_Time.c: 149: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  8582  001C0E  0E01               	movlw	1
  8583  001C10  6E39               	movwf	drawtext@y,c
  8584  001C12  C04E  F03A         	movff	_txt,drawtext@_text
  8585  001C16  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  8586  001C1A  0EFF               	movlw	255
  8587  001C1C  6E3D               	movwf	drawtext@color+1,c
  8588  001C1E  683C               	setf	drawtext@color,c
  8589  001C20  0E00               	movlw	0
  8590  001C22  6E3F               	movwf	drawtext@bg+1,c
  8591  001C24  0E00               	movlw	0
  8592  001C26  6E3E               	movwf	drawtext@bg,c
  8593  001C28  0E01               	movlw	1
  8594  001C2A  6E40               	movwf	drawtext@size,c
  8595  001C2C  0E01               	movlw	1
  8596  001C2E  ECEA  F00C         	call	_drawtext
  8597                           
  8598                           ;Setup_Alarm_Time.c: 152: strcpy(txt, "  Alarm");
  8599  001C32  C04E  F011         	movff	_txt,strcpy@to
  8600  001C36  C04F  F012         	movff	_txt+1,strcpy@to+1
  8601  001C3A  0EC8               	movlw	low STR_23
  8602  001C3C  6E13               	movwf	strcpy@from,c
  8603  001C3E  0EFF               	movlw	high STR_23
  8604  001C40  6E14               	movwf	strcpy@from+1,c
  8605  001C42  ECCC  F01C         	call	_strcpy	;wreg free
  8606                           
  8607                           ;Setup_Alarm_Time.c: 153: drawtext(1+5 , 1+10, txt, 0xF81F, 0x0000, 2);
  8608  001C46  0E0B               	movlw	11
  8609  001C48  6E39               	movwf	drawtext@y,c
  8610  001C4A  C04E  F03A         	movff	_txt,drawtext@_text
  8611  001C4E  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  8612  001C52  0EF8               	movlw	248
  8613  001C54  6E3D               	movwf	drawtext@color+1,c
  8614  001C56  0E1F               	movlw	31
  8615  001C58  6E3C               	movwf	drawtext@color,c
  8616  001C5A  0E00               	movlw	0
  8617  001C5C  6E3F               	movwf	drawtext@bg+1,c
  8618  001C5E  0E00               	movlw	0
  8619  001C60  6E3E               	movwf	drawtext@bg,c
  8620  001C62  0E02               	movlw	2
  8621  001C64  6E40               	movwf	drawtext@size,c
  8622  001C66  0E06               	movlw	6
  8623  001C68  ECEA  F00C         	call	_drawtext
  8624                           
  8625                           ;Setup_Alarm_Time.c: 154: strcpy(txt, "  Setup");
  8626  001C6C  C04E  F011         	movff	_txt,strcpy@to
  8627  001C70  C04F  F012         	movff	_txt+1,strcpy@to+1
  8628  001C74  0ED0               	movlw	low STR_24
  8629  001C76  6E13               	movwf	strcpy@from,c
  8630  001C78  0EFF               	movlw	high STR_24
  8631  001C7A  6E14               	movwf	strcpy@from+1,c
  8632  001C7C  ECCC  F01C         	call	_strcpy	;wreg free
  8633                           
  8634                           ;Setup_Alarm_Time.c: 155: drawtext(1+5 , 1+25, txt, 0xF81F, 0x0000, 2);
  8635  001C80  0E1A               	movlw	26
  8636  001C82  6E39               	movwf	drawtext@y,c
  8637  001C84  C04E  F03A         	movff	_txt,drawtext@_text
  8638  001C88  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  8639  001C8C  0EF8               	movlw	248
  8640  001C8E  6E3D               	movwf	drawtext@color+1,c
  8641  001C90  0E1F               	movlw	31
  8642  001C92  6E3C               	movwf	drawtext@color,c
  8643  001C94  0E00               	movlw	0
  8644  001C96  6E3F               	movwf	drawtext@bg+1,c
  8645  001C98  0E00               	movlw	0
  8646  001C9A  6E3E               	movwf	drawtext@bg,c
  8647  001C9C  0E02               	movlw	2
  8648  001C9E  6E40               	movwf	drawtext@size,c
  8649  001CA0  0E06               	movlw	6
  8650  001CA2  ECEA  F00C         	call	_drawtext
  8651                           
  8652                           ;Setup_Alarm_Time.c: 157: strcpy(txt, "Time");
  8653  001CA6  C04E  F011         	movff	_txt,strcpy@to
  8654  001CAA  C04F  F012         	movff	_txt+1,strcpy@to+1
  8655  001CAE  0EB0               	movlw	low (STR_10+6)
  8656  001CB0  6E13               	movwf	strcpy@from,c
  8657  001CB2  0EFF               	movlw	high (STR_10+6)
  8658  001CB4  6E14               	movwf	strcpy@from+1,c
  8659  001CB6  ECCC  F01C         	call	_strcpy	;wreg free
  8660                           
  8661                           ;Setup_Alarm_Time.c: 158: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  8662  001CBA  0E28               	movlw	40
  8663  001CBC  6E39               	movwf	drawtext@y,c
  8664  001CBE  C04E  F03A         	movff	_txt,drawtext@_text
  8665  001CC2  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  8666  001CC6  0E00               	movlw	0
  8667  001CC8  6E3D               	movwf	drawtext@color+1,c
  8668  001CCA  0E1F               	movlw	31
  8669  001CCC  6E3C               	movwf	drawtext@color,c
  8670  001CCE  0E00               	movlw	0
  8671  001CD0  6E3F               	movwf	drawtext@bg+1,c
  8672  001CD2  0E00               	movlw	0
  8673  001CD4  6E3E               	movwf	drawtext@bg,c
  8674  001CD6  0E01               	movlw	1
  8675  001CD8  6E40               	movwf	drawtext@size,c
  8676  001CDA  0E32               	movlw	50
  8677  001CDC  ECEA  F00C         	call	_drawtext
  8678                           
  8679                           ;Setup_Alarm_Time.c: 159: fillRect(15-1, 52+16, 25,2,0x07FF);
  8680  001CE0  0E44               	movlw	68
  8681  001CE2  6E23               	movwf	fillRect@y,c
  8682  001CE4  0E19               	movlw	25
  8683  001CE6  6E24               	movwf	fillRect@w,c
  8684  001CE8  0E02               	movlw	2
  8685  001CEA  6E25               	movwf	fillRect@h,c
  8686  001CEC  0E07               	movlw	7
  8687  001CEE  6E27               	movwf	fillRect@color+1,c
  8688  001CF0  6826               	setf	fillRect@color,c
  8689  001CF2  0E0E               	movlw	14
  8690  001CF4  EC96  F01B         	call	_fillRect
  8691  001CF8  0012               	return		;funcret
  8692  001CFA                     __end_of_Initialize_Setup_Alarm_Time_Screen:
  8693                           	opt stack 0
  8694                           tblptru	equ	0xFF8
  8695                           tblptrh	equ	0xFF7
  8696                           tblptrl	equ	0xFF6
  8697                           tablat	equ	0xFF5
  8698                           prodh	equ	0xFF4
  8699                           prodl	equ	0xFF3
  8700                           intcon	equ	0xFF2
  8701                           intcon2	equ	0xFF1
  8702                           postinc0	equ	0xFEE
  8703                           wreg	equ	0xFE8
  8704                           postdec1	equ	0xFE5
  8705                           fsr1l	equ	0xFE1
  8706                           postinc2	equ	0xFDE
  8707                           fsr2h	equ	0xFDA
  8708                           fsr2l	equ	0xFD9
  8709                           status	equ	0xFD8
  8710                           
  8711 ;; *************** function _Increase_Alarm_Time *****************
  8712 ;; Defined at:
  8713 ;;		line 60 in file "Setup_Alarm_Time.c"
  8714 ;; Parameters:    Size  Location     Type
  8715 ;;		None
  8716 ;; Auto vars:     Size  Location     Type
  8717 ;;		None
  8718 ;; Return value:  Size  Location     Type
  8719 ;;		None               void
  8720 ;; Registers used:
  8721 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8722 ;; Tracked objects:
  8723 ;;		On entry : 0/0
  8724 ;;		On exit  : 0/0
  8725 ;;		Unchanged: 0/0
  8726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8731 ;;Total ram usage:        0 bytes
  8732 ;; Hardware stack levels used:    1
  8733 ;; Hardware stack levels required when called:   11
  8734 ;; This function calls:
  8735 ;;		_Update_Setup_Alarm_Time_Screen
  8736 ;; This function is called by:
  8737 ;;		_Do_Setup_Alarm_Time
  8738 ;; This function uses a non-reentrant model
  8739 ;;
  8740                           
  8741                           	psect	text42
  8742  0035AA                     __ptext42:
  8743                           	opt stack 0
  8744  0035AA                     _Increase_Alarm_Time:
  8745                           	opt stack 18
  8746                           
  8747                           ;Setup_Alarm_Time.c: 62: switch (Select_Alarm_Field)
  8748                           
  8749                           ;incstack = 0
  8750  0035AA  D018               	goto	l9251
  8751  0035AC                     l9231:
  8752                           
  8753                           ;Setup_Alarm_Time.c: 65: setup_alarm_hour++;
  8754  0035AC  2A64               	incf	_setup_alarm_hour,f,c
  8755                           
  8756                           ;Setup_Alarm_Time.c: 66: if (setup_alarm_hour == 24) setup_alarm_hour = 0;
  8757  0035AE  0E18               	movlw	24
  8758  0035B0  1864               	xorwf	_setup_alarm_hour,w,c
  8759  0035B2  A4D8               	btfss	status,2,c
  8760  0035B4  D01E               	goto	l9253
  8761  0035B6  0E00               	movlw	0
  8762  0035B8  6E64               	movwf	_setup_alarm_hour,c
  8763                           
  8764                           ;Setup_Alarm_Time.c: 67: break;
  8765  0035BA  D01B               	goto	l9253
  8766  0035BC                     l9237:
  8767                           
  8768                           ;Setup_Alarm_Time.c: 70: setup_alarm_minute++;
  8769  0035BC  2A65               	incf	_setup_alarm_minute,f,c
  8770                           
  8771                           ;Setup_Alarm_Time.c: 71: if (setup_alarm_minute == 60) setup_alarm_minute = 0;
  8772  0035BE  0E3C               	movlw	60
  8773  0035C0  1865               	xorwf	_setup_alarm_minute,w,c
  8774  0035C2  A4D8               	btfss	status,2,c
  8775  0035C4  D016               	goto	l9253
  8776  0035C6  0E00               	movlw	0
  8777  0035C8  6E65               	movwf	_setup_alarm_minute,c
  8778                           
  8779                           ;Setup_Alarm_Time.c: 72: break;
  8780  0035CA  D013               	goto	l9253
  8781  0035CC                     l9243:
  8782                           
  8783                           ;Setup_Alarm_Time.c: 75: setup_alarm_second++;
  8784  0035CC  2A66               	incf	_setup_alarm_second,f,c
  8785                           
  8786                           ;Setup_Alarm_Time.c: 76: if (setup_alarm_second == 60) setup_alarm_second = 0;
  8787  0035CE  0E3C               	movlw	60
  8788  0035D0  1866               	xorwf	_setup_alarm_second,w,c
  8789  0035D2  A4D8               	btfss	status,2,c
  8790  0035D4  D00E               	goto	l9253
  8791  0035D6  0E00               	movlw	0
  8792  0035D8  6E66               	movwf	_setup_alarm_second,c
  8793                           
  8794                           ;Setup_Alarm_Time.c: 81: }
  8795                           
  8796                           ;Setup_Alarm_Time.c: 80: break;
  8797                           
  8798                           ;Setup_Alarm_Time.c: 79: default:
  8799                           
  8800                           ;Setup_Alarm_Time.c: 77: break;
  8801  0035DA  D00B               	goto	l9253
  8802  0035DC                     l9251:
  8803  0035DC  5052               	movf	_Select_Alarm_Field,w,c
  8804                           
  8805                           ; Switch size 1, requested type "space"
  8806                           ; Number of cases is 3, Range of values is 0 to 2
  8807                           ; switch strategies available:
  8808                           ; Name         Instructions Cycles
  8809                           ; simple_byte           10     6 (average)
  8810                           ;	Chosen strategy is simple_byte
  8811  0035DE  0A00               	xorlw	0	; case 0
  8812  0035E0  B4D8               	btfsc	status,2,c
  8813  0035E2  D7E4               	goto	l9231
  8814  0035E4  0A01               	xorlw	1	; case 1
  8815  0035E6  B4D8               	btfsc	status,2,c
  8816  0035E8  D7E9               	goto	l9237
  8817  0035EA  0A03               	xorlw	3	; case 2
  8818  0035EC  B4D8               	btfsc	status,2,c
  8819  0035EE  D7EE               	goto	l9243
  8820  0035F0  D000               	goto	l9253
  8821  0035F2                     l9253:
  8822                           
  8823                           ;Setup_Alarm_Time.c: 82: Update_Setup_Alarm_Time_Screen();
  8824  0035F2  EC6F  F010         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
  8825  0035F6  0012               	return		;funcret
  8826  0035F8                     __end_of_Increase_Alarm_Time:
  8827                           	opt stack 0
  8828                           tblptru	equ	0xFF8
  8829                           tblptrh	equ	0xFF7
  8830                           tblptrl	equ	0xFF6
  8831                           tablat	equ	0xFF5
  8832                           prodh	equ	0xFF4
  8833                           prodl	equ	0xFF3
  8834                           intcon	equ	0xFF2
  8835                           intcon2	equ	0xFF1
  8836                           postinc0	equ	0xFEE
  8837                           wreg	equ	0xFE8
  8838                           postdec1	equ	0xFE5
  8839                           fsr1l	equ	0xFE1
  8840                           postinc2	equ	0xFDE
  8841                           fsr2h	equ	0xFDA
  8842                           fsr2l	equ	0xFD9
  8843                           status	equ	0xFD8
  8844                           
  8845 ;; *************** function _Go_Prev_Alarm_Field *****************
  8846 ;; Defined at:
  8847 ;;		line 121 in file "Setup_Alarm_Time.c"
  8848 ;; Parameters:    Size  Location     Type
  8849 ;;		None
  8850 ;; Auto vars:     Size  Location     Type
  8851 ;;		None
  8852 ;; Return value:  Size  Location     Type
  8853 ;;		None               void
  8854 ;; Registers used:
  8855 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8856 ;; Tracked objects:
  8857 ;;		On entry : 0/0
  8858 ;;		On exit  : 0/0
  8859 ;;		Unchanged: 0/0
  8860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8865 ;;Total ram usage:        0 bytes
  8866 ;; Hardware stack levels used:    1
  8867 ;; Hardware stack levels required when called:    9
  8868 ;; This function calls:
  8869 ;;		_Update_Setup_Screen_Cursor_Backward
  8870 ;; This function is called by:
  8871 ;;		_Do_Setup_Alarm_Time
  8872 ;; This function uses a non-reentrant model
  8873 ;;
  8874                           
  8875                           	psect	text43
  8876  003C18                     __ptext43:
  8877                           	opt stack 0
  8878  003C18                     _Go_Prev_Alarm_Field:
  8879                           	opt stack 20
  8880                           
  8881                           ;Setup_Alarm_Time.c: 123: if (Select_Alarm_Field == 0) Select_Alarm_Field = 2;
  8882                           
  8883                           ;incstack = 0
  8884  003C18  5052               	movf	_Select_Alarm_Field,w,c
  8885  003C1A  A4D8               	btfss	status,2,c
  8886  003C1C  D003               	goto	l9185
  8887  003C1E  0E02               	movlw	2
  8888  003C20  6E52               	movwf	_Select_Alarm_Field,c
  8889  003C22  D002               	goto	l9187
  8890  003C24                     l9185:
  8891                           
  8892                           ;Setup_Alarm_Time.c: 124: else Select_Alarm_Field--;
  8893  003C24  0652               	decf	_Select_Alarm_Field,f,c
  8894  003C26  D000               	goto	l9187
  8895  003C28                     l9187:
  8896                           
  8897                           ;Setup_Alarm_Time.c: 125: Update_Setup_Screen_Cursor_Backward(Select_Alarm_Field);
  8898  003C28  5052               	movf	_Select_Alarm_Field,w,c
  8899  003C2A  EC6E  F008         	call	_Update_Setup_Screen_Cursor_Backward
  8900  003C2E  0012               	return		;funcret
  8901  003C30                     __end_of_Go_Prev_Alarm_Field:
  8902                           	opt stack 0
  8903                           tblptru	equ	0xFF8
  8904                           tblptrh	equ	0xFF7
  8905                           tblptrl	equ	0xFF6
  8906                           tablat	equ	0xFF5
  8907                           prodh	equ	0xFF4
  8908                           prodl	equ	0xFF3
  8909                           intcon	equ	0xFF2
  8910                           intcon2	equ	0xFF1
  8911                           postinc0	equ	0xFEE
  8912                           wreg	equ	0xFE8
  8913                           postdec1	equ	0xFE5
  8914                           fsr1l	equ	0xFE1
  8915                           postinc2	equ	0xFDE
  8916                           fsr2h	equ	0xFDA
  8917                           fsr2l	equ	0xFD9
  8918                           status	equ	0xFD8
  8919                           
  8920 ;; *************** function _Update_Setup_Screen_Cursor_Backward *****************
  8921 ;; Defined at:
  8922 ;;		line 260 in file "Setup_Time.c"
  8923 ;; Parameters:    Size  Location     Type
  8924 ;;  field           1    wreg     unsigned char 
  8925 ;; Auto vars:     Size  Location     Type
  8926 ;;  field           1   45[COMRAM] unsigned char 
  8927 ;;  xinc            1   47[COMRAM] unsigned char 
  8928 ;;  yinc            1   46[COMRAM] unsigned char 
  8929 ;; Return value:  Size  Location     Type
  8930 ;;		None               void
  8931 ;; Registers used:
  8932 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8933 ;; Tracked objects:
  8934 ;;		On entry : 0/0
  8935 ;;		On exit  : 0/0
  8936 ;;		Unchanged: 0/0
  8937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8939 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8941 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8942 ;;Total ram usage:        3 bytes
  8943 ;; Hardware stack levels used:    1
  8944 ;; Hardware stack levels required when called:    8
  8945 ;; This function calls:
  8946 ;;		_fillRect
  8947 ;; This function is called by:
  8948 ;;		_Go_Prev_Alarm_Field
  8949 ;;		_Go_Prev_Field
  8950 ;; This function uses a non-reentrant model
  8951 ;;
  8952                           
  8953                           	psect	text44
  8954  0010DC                     __ptext44:
  8955                           	opt stack 0
  8956  0010DC                     _Update_Setup_Screen_Cursor_Backward:
  8957                           	opt stack 20
  8958                           
  8959                           ;incstack = 0
  8960                           ;Update_Setup_Screen_Cursor_Backward@field stored from wreg
  8961  0010DC  6E2E               	movwf	Update_Setup_Screen_Cursor_Backward@field,c
  8962                           
  8963                           ;Setup_Time.c: 262: char xinc = 36;
  8964  0010DE  0E24               	movlw	36
  8965  0010E0  6E30               	movwf	Update_Setup_Screen_Cursor_Backward@xinc,c
  8966                           
  8967                           ;Setup_Time.c: 263: char yinc = 30;
  8968  0010E2  0E1E               	movlw	30
  8969  0010E4  6E2F               	movwf	Update_Setup_Screen_Cursor_Backward@yinc,c
  8970                           
  8971                           ;Setup_Time.c: 264: switch (field)
  8972  0010E6  D0BF               	goto	l9045
  8973  0010E8                     l9023:
  8974                           
  8975                           ;Setup_Time.c: 267: fillRect(15-1+xinc, 52+16, 25,2,0x0000);
  8976  0010E8  0E44               	movlw	68
  8977  0010EA  6E23               	movwf	fillRect@y,c
  8978  0010EC  0E19               	movlw	25
  8979  0010EE  6E24               	movwf	fillRect@w,c
  8980  0010F0  0E02               	movlw	2
  8981  0010F2  6E25               	movwf	fillRect@h,c
  8982  0010F4  0E00               	movlw	0
  8983  0010F6  6E27               	movwf	fillRect@color+1,c
  8984  0010F8  0E00               	movlw	0
  8985  0010FA  6E26               	movwf	fillRect@color,c
  8986  0010FC  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  8987  0010FE  0F0E               	addlw	14
  8988  001100  EC96  F01B         	call	_fillRect
  8989                           
  8990                           ;Setup_Time.c: 268: fillRect(15-1, 52+16, 25,2,0x07FF);
  8991  001104  0E44               	movlw	68
  8992  001106  6E23               	movwf	fillRect@y,c
  8993  001108  0E19               	movlw	25
  8994  00110A  6E24               	movwf	fillRect@w,c
  8995  00110C  0E02               	movlw	2
  8996  00110E  6E25               	movwf	fillRect@h,c
  8997  001110  0E07               	movlw	7
  8998  001112  6E27               	movwf	fillRect@color+1,c
  8999  001114  6826               	setf	fillRect@color,c
  9000  001116  0E0E               	movlw	14
  9001  001118  EC96  F01B         	call	_fillRect
  9002                           
  9003                           ;Setup_Time.c: 269: break;
  9004  00111C  D0B8               	goto	l1052
  9005  00111E                     l9025:
  9006                           
  9007                           ;Setup_Time.c: 272: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  9008  00111E  0E44               	movlw	68
  9009  001120  6E23               	movwf	fillRect@y,c
  9010  001122  0E19               	movlw	25
  9011  001124  6E24               	movwf	fillRect@w,c
  9012  001126  0E02               	movlw	2
  9013  001128  6E25               	movwf	fillRect@h,c
  9014  00112A  0E00               	movlw	0
  9015  00112C  6E27               	movwf	fillRect@color+1,c
  9016  00112E  0E00               	movlw	0
  9017  001130  6E26               	movwf	fillRect@color,c
  9018  001132  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9019  001134  0D02               	mullw	2
  9020  001136  50F3               	movf	prodl,w,c
  9021  001138  0F0E               	addlw	14
  9022  00113A  EC96  F01B         	call	_fillRect
  9023                           
  9024                           ;Setup_Time.c: 273: fillRect(15-1+xinc, 52+16, 25,2,0x07FF);
  9025  00113E  0E44               	movlw	68
  9026  001140  6E23               	movwf	fillRect@y,c
  9027  001142  0E19               	movlw	25
  9028  001144  6E24               	movwf	fillRect@w,c
  9029  001146  0E02               	movlw	2
  9030  001148  6E25               	movwf	fillRect@h,c
  9031  00114A  0E07               	movlw	7
  9032  00114C  6E27               	movwf	fillRect@color+1,c
  9033  00114E  6826               	setf	fillRect@color,c
  9034  001150  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9035  001152  0F0E               	addlw	14
  9036  001154  EC96  F01B         	call	_fillRect
  9037                           
  9038                           ;Setup_Time.c: 274: break;
  9039  001158  D09A               	goto	l1052
  9040  00115A                     l9029:
  9041                           
  9042                           ;Setup_Time.c: 277: fillRect(15-1, 52+16, 25,2,0x0000);
  9043  00115A  0E44               	movlw	68
  9044  00115C  6E23               	movwf	fillRect@y,c
  9045  00115E  0E19               	movlw	25
  9046  001160  6E24               	movwf	fillRect@w,c
  9047  001162  0E02               	movlw	2
  9048  001164  6E25               	movwf	fillRect@h,c
  9049  001166  0E00               	movlw	0
  9050  001168  6E27               	movwf	fillRect@color+1,c
  9051  00116A  0E00               	movlw	0
  9052  00116C  6E26               	movwf	fillRect@color,c
  9053  00116E  0E0E               	movlw	14
  9054  001170  EC96  F01B         	call	_fillRect
  9055                           
  9056                           ;Setup_Time.c: 278: fillRect(15-1, 52+16+yinc, 25,2,0x0000);
  9057  001174  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9058  001176  0F44               	addlw	68
  9059  001178  6E23               	movwf	fillRect@y,c
  9060  00117A  0E19               	movlw	25
  9061  00117C  6E24               	movwf	fillRect@w,c
  9062  00117E  0E02               	movlw	2
  9063  001180  6E25               	movwf	fillRect@h,c
  9064  001182  0E00               	movlw	0
  9065  001184  6E27               	movwf	fillRect@color+1,c
  9066  001186  0E00               	movlw	0
  9067  001188  6E26               	movwf	fillRect@color,c
  9068  00118A  0E0E               	movlw	14
  9069  00118C  EC96  F01B         	call	_fillRect
  9070                           
  9071                           ;Setup_Time.c: 279: fillRect(15-1+2*xinc, 52+16, 25,2,0x07FF);
  9072  001190  0E44               	movlw	68
  9073  001192  6E23               	movwf	fillRect@y,c
  9074  001194  0E19               	movlw	25
  9075  001196  6E24               	movwf	fillRect@w,c
  9076  001198  0E02               	movlw	2
  9077  00119A  6E25               	movwf	fillRect@h,c
  9078  00119C  0E07               	movlw	7
  9079  00119E  6E27               	movwf	fillRect@color+1,c
  9080  0011A0  6826               	setf	fillRect@color,c
  9081  0011A2  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9082  0011A4  0D02               	mullw	2
  9083  0011A6  50F3               	movf	prodl,w,c
  9084  0011A8  0F0E               	addlw	14
  9085  0011AA  EC96  F01B         	call	_fillRect
  9086                           
  9087                           ;Setup_Time.c: 280: break;
  9088  0011AE  D06F               	goto	l1052
  9089  0011B0                     l9033:
  9090                           
  9091                           ;Setup_Time.c: 283: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x0000);
  9092  0011B0  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9093  0011B2  0F44               	addlw	68
  9094  0011B4  6E23               	movwf	fillRect@y,c
  9095  0011B6  0E19               	movlw	25
  9096  0011B8  6E24               	movwf	fillRect@w,c
  9097  0011BA  0E02               	movlw	2
  9098  0011BC  6E25               	movwf	fillRect@h,c
  9099  0011BE  0E00               	movlw	0
  9100  0011C0  6E27               	movwf	fillRect@color+1,c
  9101  0011C2  0E00               	movlw	0
  9102  0011C4  6E26               	movwf	fillRect@color,c
  9103  0011C6  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9104  0011C8  0F0E               	addlw	14
  9105  0011CA  EC96  F01B         	call	_fillRect
  9106                           
  9107                           ;Setup_Time.c: 284: fillRect(15-1, 52+16+yinc, 25,2,0x07FF);
  9108  0011CE  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9109  0011D0  0F44               	addlw	68
  9110  0011D2  6E23               	movwf	fillRect@y,c
  9111  0011D4  0E19               	movlw	25
  9112  0011D6  6E24               	movwf	fillRect@w,c
  9113  0011D8  0E02               	movlw	2
  9114  0011DA  6E25               	movwf	fillRect@h,c
  9115  0011DC  0E07               	movlw	7
  9116  0011DE  6E27               	movwf	fillRect@color+1,c
  9117  0011E0  6826               	setf	fillRect@color,c
  9118  0011E2  0E0E               	movlw	14
  9119  0011E4  EC96  F01B         	call	_fillRect
  9120                           
  9121                           ;Setup_Time.c: 285: break;
  9122  0011E8  D052               	goto	l1052
  9123  0011EA                     l9035:
  9124                           
  9125                           ;Setup_Time.c: 288: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x0000);
  9126  0011EA  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9127  0011EC  0F44               	addlw	68
  9128  0011EE  6E23               	movwf	fillRect@y,c
  9129  0011F0  0E19               	movlw	25
  9130  0011F2  6E24               	movwf	fillRect@w,c
  9131  0011F4  0E02               	movlw	2
  9132  0011F6  6E25               	movwf	fillRect@h,c
  9133  0011F8  0E00               	movlw	0
  9134  0011FA  6E27               	movwf	fillRect@color+1,c
  9135  0011FC  0E00               	movlw	0
  9136  0011FE  6E26               	movwf	fillRect@color,c
  9137  001200  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9138  001202  0D02               	mullw	2
  9139  001204  50F3               	movf	prodl,w,c
  9140  001206  0F0E               	addlw	14
  9141  001208  EC96  F01B         	call	_fillRect
  9142                           
  9143                           ;Setup_Time.c: 289: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x07FF);
  9144  00120C  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9145  00120E  0F44               	addlw	68
  9146  001210  6E23               	movwf	fillRect@y,c
  9147  001212  0E19               	movlw	25
  9148  001214  6E24               	movwf	fillRect@w,c
  9149  001216  0E02               	movlw	2
  9150  001218  6E25               	movwf	fillRect@h,c
  9151  00121A  0E07               	movlw	7
  9152  00121C  6E27               	movwf	fillRect@color+1,c
  9153  00121E  6826               	setf	fillRect@color,c
  9154  001220  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9155  001222  0F0E               	addlw	14
  9156  001224  EC96  F01B         	call	_fillRect
  9157                           
  9158                           ;Setup_Time.c: 290: break;
  9159  001228  D032               	goto	l1052
  9160  00122A                     l9039:
  9161                           
  9162                           ;Setup_Time.c: 293: fillRect(15-1, 52+16, 25,2,0x0000);
  9163  00122A  0E44               	movlw	68
  9164  00122C  6E23               	movwf	fillRect@y,c
  9165  00122E  0E19               	movlw	25
  9166  001230  6E24               	movwf	fillRect@w,c
  9167  001232  0E02               	movlw	2
  9168  001234  6E25               	movwf	fillRect@h,c
  9169  001236  0E00               	movlw	0
  9170  001238  6E27               	movwf	fillRect@color+1,c
  9171  00123A  0E00               	movlw	0
  9172  00123C  6E26               	movwf	fillRect@color,c
  9173  00123E  0E0E               	movlw	14
  9174  001240  EC96  F01B         	call	_fillRect
  9175                           
  9176                           ;Setup_Time.c: 294: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x07FF);
  9177  001244  502F               	movf	Update_Setup_Screen_Cursor_Backward@yinc,w,c
  9178  001246  0F44               	addlw	68
  9179  001248  6E23               	movwf	fillRect@y,c
  9180  00124A  0E19               	movlw	25
  9181  00124C  6E24               	movwf	fillRect@w,c
  9182  00124E  0E02               	movlw	2
  9183  001250  6E25               	movwf	fillRect@h,c
  9184  001252  0E07               	movlw	7
  9185  001254  6E27               	movwf	fillRect@color+1,c
  9186  001256  6826               	setf	fillRect@color,c
  9187  001258  5030               	movf	Update_Setup_Screen_Cursor_Backward@xinc,w,c
  9188  00125A  0D02               	mullw	2
  9189  00125C  50F3               	movf	prodl,w,c
  9190  00125E  0F0E               	addlw	14
  9191  001260  EC96  F01B         	call	_fillRect
  9192                           
  9193                           ;Setup_Time.c: 296: }
  9194                           
  9195                           ;Setup_Time.c: 295: break;
  9196  001264  D014               	goto	l1052
  9197  001266                     l9045:
  9198  001266  502E               	movf	Update_Setup_Screen_Cursor_Backward@field,w,c
  9199                           
  9200                           ; Switch size 1, requested type "space"
  9201                           ; Number of cases is 6, Range of values is 0 to 5
  9202                           ; switch strategies available:
  9203                           ; Name         Instructions Cycles
  9204                           ; simple_byte           19    10 (average)
  9205                           ;	Chosen strategy is simple_byte
  9206  001268  0A00               	xorlw	0	; case 0
  9207  00126A  B4D8               	btfsc	status,2,c
  9208  00126C  D73D               	goto	l9023
  9209  00126E  0A01               	xorlw	1	; case 1
  9210  001270  B4D8               	btfsc	status,2,c
  9211  001272  D755               	goto	l9025
  9212  001274  0A03               	xorlw	3	; case 2
  9213  001276  B4D8               	btfsc	status,2,c
  9214  001278  D770               	goto	l9029
  9215  00127A  0A01               	xorlw	1	; case 3
  9216  00127C  B4D8               	btfsc	status,2,c
  9217  00127E  D798               	goto	l9033
  9218  001280  0A07               	xorlw	7	; case 4
  9219  001282  B4D8               	btfsc	status,2,c
  9220  001284  D7B2               	goto	l9035
  9221  001286  0A01               	xorlw	1	; case 5
  9222  001288  B4D8               	btfsc	status,2,c
  9223  00128A  D7CF               	goto	l9039
  9224  00128C  D000               	goto	l1052
  9225  00128E                     l1052:
  9226  00128E  0012               	return		;funcret
  9227  001290                     __end_of_Update_Setup_Screen_Cursor_Backward:
  9228                           	opt stack 0
  9229                           tblptru	equ	0xFF8
  9230                           tblptrh	equ	0xFF7
  9231                           tblptrl	equ	0xFF6
  9232                           tablat	equ	0xFF5
  9233                           prodh	equ	0xFF4
  9234                           prodl	equ	0xFF3
  9235                           intcon	equ	0xFF2
  9236                           intcon2	equ	0xFF1
  9237                           postinc0	equ	0xFEE
  9238                           wreg	equ	0xFE8
  9239                           postdec1	equ	0xFE5
  9240                           fsr1l	equ	0xFE1
  9241                           postinc2	equ	0xFDE
  9242                           fsr2h	equ	0xFDA
  9243                           fsr2l	equ	0xFD9
  9244                           status	equ	0xFD8
  9245                           
  9246 ;; *************** function _Go_Next_Alarm_Field *****************
  9247 ;; Defined at:
  9248 ;;		line 112 in file "Setup_Alarm_Time.c"
  9249 ;; Parameters:    Size  Location     Type
  9250 ;;		None
  9251 ;; Auto vars:     Size  Location     Type
  9252 ;;		None
  9253 ;; Return value:  Size  Location     Type
  9254 ;;		None               void
  9255 ;; Registers used:
  9256 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9257 ;; Tracked objects:
  9258 ;;		On entry : 0/0
  9259 ;;		On exit  : 0/0
  9260 ;;		Unchanged: 0/0
  9261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9265 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9266 ;;Total ram usage:        0 bytes
  9267 ;; Hardware stack levels used:    1
  9268 ;; Hardware stack levels required when called:    9
  9269 ;; This function calls:
  9270 ;;		_Update_Setup_Screen_Cursor_Forward
  9271 ;; This function is called by:
  9272 ;;		_Do_Setup_Alarm_Time
  9273 ;; This function uses a non-reentrant model
  9274 ;;
  9275                           
  9276                           	psect	text45
  9277  003C30                     __ptext45:
  9278                           	opt stack 0
  9279  003C30                     _Go_Next_Alarm_Field:
  9280                           	opt stack 20
  9281                           
  9282                           ;Setup_Alarm_Time.c: 115: Select_Alarm_Field++;
  9283                           
  9284                           ;incstack = 0
  9285  003C30  2A52               	incf	_Select_Alarm_Field,f,c
  9286                           
  9287                           ;Setup_Alarm_Time.c: 116: if (Select_Alarm_Field == 3) Select_Alarm_Field = 0;
  9288  003C32  0E03               	movlw	3
  9289  003C34  1852               	xorwf	_Select_Alarm_Field,w,c
  9290  003C36  A4D8               	btfss	status,2,c
  9291  003C38  D003               	goto	l9195
  9292  003C3A  0E00               	movlw	0
  9293  003C3C  6E52               	movwf	_Select_Alarm_Field,c
  9294  003C3E  D000               	goto	l9195
  9295  003C40                     l9195:
  9296                           
  9297                           ;Setup_Alarm_Time.c: 117: Update_Setup_Screen_Cursor_Forward(Select_Alarm_Field);
  9298  003C40  5052               	movf	_Select_Alarm_Field,w,c
  9299  003C42  EC91  F007         	call	_Update_Setup_Screen_Cursor_Forward
  9300  003C46  0012               	return		;funcret
  9301  003C48                     __end_of_Go_Next_Alarm_Field:
  9302                           	opt stack 0
  9303                           tblptru	equ	0xFF8
  9304                           tblptrh	equ	0xFF7
  9305                           tblptrl	equ	0xFF6
  9306                           tablat	equ	0xFF5
  9307                           prodh	equ	0xFF4
  9308                           prodl	equ	0xFF3
  9309                           intcon	equ	0xFF2
  9310                           intcon2	equ	0xFF1
  9311                           postinc0	equ	0xFEE
  9312                           wreg	equ	0xFE8
  9313                           postdec1	equ	0xFE5
  9314                           fsr1l	equ	0xFE1
  9315                           postinc2	equ	0xFDE
  9316                           fsr2h	equ	0xFDA
  9317                           fsr2l	equ	0xFD9
  9318                           status	equ	0xFD8
  9319                           
  9320 ;; *************** function _Update_Setup_Screen_Cursor_Forward *****************
  9321 ;; Defined at:
  9322 ;;		line 221 in file "Setup_Time.c"
  9323 ;; Parameters:    Size  Location     Type
  9324 ;;  field           1    wreg     unsigned char 
  9325 ;; Auto vars:     Size  Location     Type
  9326 ;;  field           1   45[COMRAM] unsigned char 
  9327 ;;  xinc            1   47[COMRAM] unsigned char 
  9328 ;;  yinc            1   46[COMRAM] unsigned char 
  9329 ;; Return value:  Size  Location     Type
  9330 ;;		None               void
  9331 ;; Registers used:
  9332 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9333 ;; Tracked objects:
  9334 ;;		On entry : 0/0
  9335 ;;		On exit  : 0/0
  9336 ;;		Unchanged: 0/0
  9337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9339 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9341 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9342 ;;Total ram usage:        3 bytes
  9343 ;; Hardware stack levels used:    1
  9344 ;; Hardware stack levels required when called:    8
  9345 ;; This function calls:
  9346 ;;		_fillRect
  9347 ;; This function is called by:
  9348 ;;		_Go_Next_Alarm_Field
  9349 ;;		_Go_Next_Field
  9350 ;; This function uses a non-reentrant model
  9351 ;;
  9352                           
  9353                           	psect	text46
  9354  000F22                     __ptext46:
  9355                           	opt stack 0
  9356  000F22                     _Update_Setup_Screen_Cursor_Forward:
  9357                           	opt stack 20
  9358                           
  9359                           ;incstack = 0
  9360                           ;Update_Setup_Screen_Cursor_Forward@field stored from wreg
  9361  000F22  6E2E               	movwf	Update_Setup_Screen_Cursor_Forward@field,c
  9362                           
  9363                           ;Setup_Time.c: 223: char xinc = 36;
  9364  000F24  0E24               	movlw	36
  9365  000F26  6E30               	movwf	Update_Setup_Screen_Cursor_Forward@xinc,c
  9366                           
  9367                           ;Setup_Time.c: 224: char yinc = 30;
  9368  000F28  0E1E               	movlw	30
  9369  000F2A  6E2F               	movwf	Update_Setup_Screen_Cursor_Forward@yinc,c
  9370                           
  9371                           ;Setup_Time.c: 225: switch (field)
  9372  000F2C  D0C2               	goto	l9019
  9373  000F2E                     l8997:
  9374                           
  9375                           ;Setup_Time.c: 228: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x0000);
  9376  000F2E  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9377  000F30  0F44               	addlw	68
  9378  000F32  6E23               	movwf	fillRect@y,c
  9379  000F34  0E19               	movlw	25
  9380  000F36  6E24               	movwf	fillRect@w,c
  9381  000F38  0E02               	movlw	2
  9382  000F3A  6E25               	movwf	fillRect@h,c
  9383  000F3C  0E00               	movlw	0
  9384  000F3E  6E27               	movwf	fillRect@color+1,c
  9385  000F40  0E00               	movlw	0
  9386  000F42  6E26               	movwf	fillRect@color,c
  9387  000F44  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9388  000F46  0D02               	mullw	2
  9389  000F48  50F3               	movf	prodl,w,c
  9390  000F4A  0F0E               	addlw	14
  9391  000F4C  EC96  F01B         	call	_fillRect
  9392                           
  9393                           ;Setup_Time.c: 229: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  9394  000F50  0E44               	movlw	68
  9395  000F52  6E23               	movwf	fillRect@y,c
  9396  000F54  0E19               	movlw	25
  9397  000F56  6E24               	movwf	fillRect@w,c
  9398  000F58  0E02               	movlw	2
  9399  000F5A  6E25               	movwf	fillRect@h,c
  9400  000F5C  0E00               	movlw	0
  9401  000F5E  6E27               	movwf	fillRect@color+1,c
  9402  000F60  0E00               	movlw	0
  9403  000F62  6E26               	movwf	fillRect@color,c
  9404  000F64  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9405  000F66  0D02               	mullw	2
  9406  000F68  50F3               	movf	prodl,w,c
  9407  000F6A  0F0E               	addlw	14
  9408  000F6C  EC96  F01B         	call	_fillRect
  9409                           
  9410                           ;Setup_Time.c: 230: fillRect(15-1, 52+16, 25,2,0x07FF);
  9411  000F70  0E44               	movlw	68
  9412  000F72  6E23               	movwf	fillRect@y,c
  9413  000F74  0E19               	movlw	25
  9414  000F76  6E24               	movwf	fillRect@w,c
  9415  000F78  0E02               	movlw	2
  9416  000F7A  6E25               	movwf	fillRect@h,c
  9417  000F7C  0E07               	movlw	7
  9418  000F7E  6E27               	movwf	fillRect@color+1,c
  9419  000F80  6826               	setf	fillRect@color,c
  9420  000F82  0E0E               	movlw	14
  9421  000F84  EC96  F01B         	call	_fillRect
  9422                           
  9423                           ;Setup_Time.c: 231: break;
  9424  000F88  D0A8               	goto	l1041
  9425  000F8A                     l9001:
  9426                           
  9427                           ;Setup_Time.c: 234: fillRect(15-1, 52+16, 25,2,0x0000);
  9428  000F8A  0E44               	movlw	68
  9429  000F8C  6E23               	movwf	fillRect@y,c
  9430  000F8E  0E19               	movlw	25
  9431  000F90  6E24               	movwf	fillRect@w,c
  9432  000F92  0E02               	movlw	2
  9433  000F94  6E25               	movwf	fillRect@h,c
  9434  000F96  0E00               	movlw	0
  9435  000F98  6E27               	movwf	fillRect@color+1,c
  9436  000F9A  0E00               	movlw	0
  9437  000F9C  6E26               	movwf	fillRect@color,c
  9438  000F9E  0E0E               	movlw	14
  9439  000FA0  EC96  F01B         	call	_fillRect
  9440                           
  9441                           ;Setup_Time.c: 235: fillRect(15-1+xinc, 52+16, 25,2,0x07FF);
  9442  000FA4  0E44               	movlw	68
  9443  000FA6  6E23               	movwf	fillRect@y,c
  9444  000FA8  0E19               	movlw	25
  9445  000FAA  6E24               	movwf	fillRect@w,c
  9446  000FAC  0E02               	movlw	2
  9447  000FAE  6E25               	movwf	fillRect@h,c
  9448  000FB0  0E07               	movlw	7
  9449  000FB2  6E27               	movwf	fillRect@color+1,c
  9450  000FB4  6826               	setf	fillRect@color,c
  9451  000FB6  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9452  000FB8  0F0E               	addlw	14
  9453  000FBA  EC96  F01B         	call	_fillRect
  9454                           
  9455                           ;Setup_Time.c: 236: break;
  9456  000FBE  D08D               	goto	l1041
  9457  000FC0                     l9003:
  9458                           
  9459                           ;Setup_Time.c: 239: fillRect(15-1+xinc, 52+16, 25,2,0x0000);
  9460  000FC0  0E44               	movlw	68
  9461  000FC2  6E23               	movwf	fillRect@y,c
  9462  000FC4  0E19               	movlw	25
  9463  000FC6  6E24               	movwf	fillRect@w,c
  9464  000FC8  0E02               	movlw	2
  9465  000FCA  6E25               	movwf	fillRect@h,c
  9466  000FCC  0E00               	movlw	0
  9467  000FCE  6E27               	movwf	fillRect@color+1,c
  9468  000FD0  0E00               	movlw	0
  9469  000FD2  6E26               	movwf	fillRect@color,c
  9470  000FD4  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9471  000FD6  0F0E               	addlw	14
  9472  000FD8  EC96  F01B         	call	_fillRect
  9473                           
  9474                           ;Setup_Time.c: 240: fillRect(15-1+2*xinc, 52+16, 25,2,0x07FF);
  9475  000FDC  0E44               	movlw	68
  9476  000FDE  6E23               	movwf	fillRect@y,c
  9477  000FE0  0E19               	movlw	25
  9478  000FE2  6E24               	movwf	fillRect@w,c
  9479  000FE4  0E02               	movlw	2
  9480  000FE6  6E25               	movwf	fillRect@h,c
  9481  000FE8  0E07               	movlw	7
  9482  000FEA  6E27               	movwf	fillRect@color+1,c
  9483  000FEC  6826               	setf	fillRect@color,c
  9484  000FEE  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9485  000FF0  0D02               	mullw	2
  9486  000FF2  50F3               	movf	prodl,w,c
  9487  000FF4  0F0E               	addlw	14
  9488  000FF6  EC96  F01B         	call	_fillRect
  9489                           
  9490                           ;Setup_Time.c: 241: break;
  9491  000FFA  D06F               	goto	l1041
  9492  000FFC                     l9007:
  9493                           
  9494                           ;Setup_Time.c: 244: fillRect(15-1+2*xinc, 52+16, 25,2,0x0000);
  9495  000FFC  0E44               	movlw	68
  9496  000FFE  6E23               	movwf	fillRect@y,c
  9497  001000  0E19               	movlw	25
  9498  001002  6E24               	movwf	fillRect@w,c
  9499  001004  0E02               	movlw	2
  9500  001006  6E25               	movwf	fillRect@h,c
  9501  001008  0E00               	movlw	0
  9502  00100A  6E27               	movwf	fillRect@color+1,c
  9503  00100C  0E00               	movlw	0
  9504  00100E  6E26               	movwf	fillRect@color,c
  9505  001010  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9506  001012  0D02               	mullw	2
  9507  001014  50F3               	movf	prodl,w,c
  9508  001016  0F0E               	addlw	14
  9509  001018  EC96  F01B         	call	_fillRect
  9510                           
  9511                           ;Setup_Time.c: 245: fillRect(15-1, 52+16+yinc, 25,2,0x07FF);
  9512  00101C  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9513  00101E  0F44               	addlw	68
  9514  001020  6E23               	movwf	fillRect@y,c
  9515  001022  0E19               	movlw	25
  9516  001024  6E24               	movwf	fillRect@w,c
  9517  001026  0E02               	movlw	2
  9518  001028  6E25               	movwf	fillRect@h,c
  9519  00102A  0E07               	movlw	7
  9520  00102C  6E27               	movwf	fillRect@color+1,c
  9521  00102E  6826               	setf	fillRect@color,c
  9522  001030  0E0E               	movlw	14
  9523  001032  EC96  F01B         	call	_fillRect
  9524                           
  9525                           ;Setup_Time.c: 246: break;
  9526  001036  D051               	goto	l1041
  9527  001038                     l9011:
  9528                           
  9529                           ;Setup_Time.c: 249: fillRect(15-1, 52+16+yinc, 25,2,0x0000);
  9530  001038  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9531  00103A  0F44               	addlw	68
  9532  00103C  6E23               	movwf	fillRect@y,c
  9533  00103E  0E19               	movlw	25
  9534  001040  6E24               	movwf	fillRect@w,c
  9535  001042  0E02               	movlw	2
  9536  001044  6E25               	movwf	fillRect@h,c
  9537  001046  0E00               	movlw	0
  9538  001048  6E27               	movwf	fillRect@color+1,c
  9539  00104A  0E00               	movlw	0
  9540  00104C  6E26               	movwf	fillRect@color,c
  9541  00104E  0E0E               	movlw	14
  9542  001050  EC96  F01B         	call	_fillRect
  9543                           
  9544                           ;Setup_Time.c: 250: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x07FF);
  9545  001054  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9546  001056  0F44               	addlw	68
  9547  001058  6E23               	movwf	fillRect@y,c
  9548  00105A  0E19               	movlw	25
  9549  00105C  6E24               	movwf	fillRect@w,c
  9550  00105E  0E02               	movlw	2
  9551  001060  6E25               	movwf	fillRect@h,c
  9552  001062  0E07               	movlw	7
  9553  001064  6E27               	movwf	fillRect@color+1,c
  9554  001066  6826               	setf	fillRect@color,c
  9555  001068  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9556  00106A  0F0E               	addlw	14
  9557  00106C  EC96  F01B         	call	_fillRect
  9558                           
  9559                           ;Setup_Time.c: 251: break;
  9560  001070  D034               	goto	l1041
  9561  001072                     l9013:
  9562                           
  9563                           ;Setup_Time.c: 254: fillRect(15-1+xinc, 52+16+yinc, 25,2,0x0000);
  9564  001072  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9565  001074  0F44               	addlw	68
  9566  001076  6E23               	movwf	fillRect@y,c
  9567  001078  0E19               	movlw	25
  9568  00107A  6E24               	movwf	fillRect@w,c
  9569  00107C  0E02               	movlw	2
  9570  00107E  6E25               	movwf	fillRect@h,c
  9571  001080  0E00               	movlw	0
  9572  001082  6E27               	movwf	fillRect@color+1,c
  9573  001084  0E00               	movlw	0
  9574  001086  6E26               	movwf	fillRect@color,c
  9575  001088  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9576  00108A  0F0E               	addlw	14
  9577  00108C  EC96  F01B         	call	_fillRect
  9578                           
  9579                           ;Setup_Time.c: 255: fillRect(15-1+2*xinc, 52+16+yinc, 25,2,0x07FF);
  9580  001090  502F               	movf	Update_Setup_Screen_Cursor_Forward@yinc,w,c
  9581  001092  0F44               	addlw	68
  9582  001094  6E23               	movwf	fillRect@y,c
  9583  001096  0E19               	movlw	25
  9584  001098  6E24               	movwf	fillRect@w,c
  9585  00109A  0E02               	movlw	2
  9586  00109C  6E25               	movwf	fillRect@h,c
  9587  00109E  0E07               	movlw	7
  9588  0010A0  6E27               	movwf	fillRect@color+1,c
  9589  0010A2  6826               	setf	fillRect@color,c
  9590  0010A4  5030               	movf	Update_Setup_Screen_Cursor_Forward@xinc,w,c
  9591  0010A6  0D02               	mullw	2
  9592  0010A8  50F3               	movf	prodl,w,c
  9593  0010AA  0F0E               	addlw	14
  9594  0010AC  EC96  F01B         	call	_fillRect
  9595                           
  9596                           ;Setup_Time.c: 257: }
  9597                           
  9598                           ;Setup_Time.c: 256: break;
  9599  0010B0  D014               	goto	l1041
  9600  0010B2                     l9019:
  9601  0010B2  502E               	movf	Update_Setup_Screen_Cursor_Forward@field,w,c
  9602                           
  9603                           ; Switch size 1, requested type "space"
  9604                           ; Number of cases is 6, Range of values is 0 to 5
  9605                           ; switch strategies available:
  9606                           ; Name         Instructions Cycles
  9607                           ; simple_byte           19    10 (average)
  9608                           ;	Chosen strategy is simple_byte
  9609  0010B4  0A00               	xorlw	0	; case 0
  9610  0010B6  B4D8               	btfsc	status,2,c
  9611  0010B8  D73A               	goto	l8997
  9612  0010BA  0A01               	xorlw	1	; case 1
  9613  0010BC  B4D8               	btfsc	status,2,c
  9614  0010BE  D765               	goto	l9001
  9615  0010C0  0A03               	xorlw	3	; case 2
  9616  0010C2  B4D8               	btfsc	status,2,c
  9617  0010C4  D77D               	goto	l9003
  9618  0010C6  0A01               	xorlw	1	; case 3
  9619  0010C8  B4D8               	btfsc	status,2,c
  9620  0010CA  D798               	goto	l9007
  9621  0010CC  0A07               	xorlw	7	; case 4
  9622  0010CE  B4D8               	btfsc	status,2,c
  9623  0010D0  D7B3               	goto	l9011
  9624  0010D2  0A01               	xorlw	1	; case 5
  9625  0010D4  B4D8               	btfsc	status,2,c
  9626  0010D6  D7CD               	goto	l9013
  9627  0010D8  D000               	goto	l1041
  9628  0010DA                     l1041:
  9629  0010DA  0012               	return		;funcret
  9630  0010DC                     __end_of_Update_Setup_Screen_Cursor_Forward:
  9631                           	opt stack 0
  9632                           tblptru	equ	0xFF8
  9633                           tblptrh	equ	0xFF7
  9634                           tblptrl	equ	0xFF6
  9635                           tablat	equ	0xFF5
  9636                           prodh	equ	0xFF4
  9637                           prodl	equ	0xFF3
  9638                           intcon	equ	0xFF2
  9639                           intcon2	equ	0xFF1
  9640                           postinc0	equ	0xFEE
  9641                           wreg	equ	0xFE8
  9642                           postdec1	equ	0xFE5
  9643                           fsr1l	equ	0xFE1
  9644                           postinc2	equ	0xFDE
  9645                           fsr2h	equ	0xFDA
  9646                           fsr2l	equ	0xFD9
  9647                           status	equ	0xFD8
  9648                           
  9649 ;; *************** function _Exit_Setup_Alarm_Time *****************
  9650 ;; Defined at:
  9651 ;;		line 128 in file "Setup_Alarm_Time.c"
  9652 ;; Parameters:    Size  Location     Type
  9653 ;;		None
  9654 ;; Auto vars:     Size  Location     Type
  9655 ;;		None
  9656 ;; Return value:  Size  Location     Type
  9657 ;;		None               void
  9658 ;; Registers used:
  9659 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9660 ;; Tracked objects:
  9661 ;;		On entry : 0/0
  9662 ;;		On exit  : 0/0
  9663 ;;		Unchanged: 0/0
  9664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9668 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9669 ;;Total ram usage:        0 bytes
  9670 ;; Hardware stack levels used:    1
  9671 ;; Hardware stack levels required when called:   11
  9672 ;; This function calls:
  9673 ;;		_DS3231_Read_Time
  9674 ;;		_Initialize_Screen
  9675 ;; This function is called by:
  9676 ;;		_Do_Setup_Alarm_Time
  9677 ;; This function uses a non-reentrant model
  9678 ;;
  9679                           
  9680                           	psect	text47
  9681  003DAC                     __ptext47:
  9682                           	opt stack 0
  9683  003DAC                     _Exit_Setup_Alarm_Time:
  9684                           	opt stack 18
  9685                           
  9686                           ;Setup_Alarm_Time.c: 130: DS3231_Read_Time();
  9687                           
  9688                           ;incstack = 0
  9689  003DAC  EC72  F019         	call	_DS3231_Read_Time	;wreg free
  9690                           
  9691                           ;Setup_Alarm_Time.c: 131: Initialize_Screen();
  9692  003DB0  EC37  F003         	call	_Initialize_Screen	;wreg free
  9693                           
  9694                           ;Setup_Alarm_Time.c: 132: In_Alarm_Time_Setup = 0;
  9695  003DB4  0E00               	movlw	0
  9696  003DB6  0100               	movlb	0	; () banked
  9697  003DB8  6FF8               	movwf	_In_Alarm_Time_Setup& (0+255),b
  9698                           
  9699                           ; BSR set to: 0
  9700  003DBA  0012               	return		;funcret
  9701  003DBC                     __end_of_Exit_Setup_Alarm_Time:
  9702                           	opt stack 0
  9703                           tblptru	equ	0xFF8
  9704                           tblptrh	equ	0xFF7
  9705                           tblptrl	equ	0xFF6
  9706                           tablat	equ	0xFF5
  9707                           prodh	equ	0xFF4
  9708                           prodl	equ	0xFF3
  9709                           intcon	equ	0xFF2
  9710                           intcon2	equ	0xFF1
  9711                           postinc0	equ	0xFEE
  9712                           wreg	equ	0xFE8
  9713                           postdec1	equ	0xFE5
  9714                           fsr1l	equ	0xFE1
  9715                           postinc2	equ	0xFDE
  9716                           fsr2h	equ	0xFDA
  9717                           fsr2l	equ	0xFD9
  9718                           status	equ	0xFD8
  9719                           
  9720 ;; *************** function _Do_Save_New_Alarm_Time *****************
  9721 ;; Defined at:
  9722 ;;		line 135 in file "Setup_Alarm_Time.c"
  9723 ;; Parameters:    Size  Location     Type
  9724 ;;		None
  9725 ;; Auto vars:     Size  Location     Type
  9726 ;;		None
  9727 ;; Return value:  Size  Location     Type
  9728 ;;		None               void
  9729 ;; Registers used:
  9730 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9731 ;; Tracked objects:
  9732 ;;		On entry : 0/0
  9733 ;;		On exit  : 0/0
  9734 ;;		Unchanged: 0/0
  9735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9740 ;;Total ram usage:        0 bytes
  9741 ;; Hardware stack levels used:    1
  9742 ;; Hardware stack levels required when called:   11
  9743 ;; This function calls:
  9744 ;;		_DS3231_Read_Alarm_Time
  9745 ;;		_DS3231_Read_Time
  9746 ;;		_DS3231_Write_Alarm_Time
  9747 ;;		_Initialize_Screen
  9748 ;; This function is called by:
  9749 ;;		_Do_Setup_Alarm_Time
  9750 ;; This function uses a non-reentrant model
  9751 ;;
  9752                           
  9753                           	psect	text48
  9754  003C48                     __ptext48:
  9755                           	opt stack 0
  9756  003C48                     _Do_Save_New_Alarm_Time:
  9757                           	opt stack 18
  9758                           
  9759                           ;Setup_Alarm_Time.c: 137: DS3231_Write_Alarm_Time();
  9760                           
  9761                           ; BSR set to: 0
  9762                           ;incstack = 0
  9763  003C48  EC5A  F018         	call	_DS3231_Write_Alarm_Time	;wreg free
  9764                           
  9765                           ;Setup_Alarm_Time.c: 138: DS3231_Read_Alarm_Time();
  9766  003C4C  EC4A  F01B         	call	_DS3231_Read_Alarm_Time	;wreg free
  9767                           
  9768                           ;Setup_Alarm_Time.c: 139: DS3231_Read_Time();
  9769  003C50  EC72  F019         	call	_DS3231_Read_Time	;wreg free
  9770                           
  9771                           ;Setup_Alarm_Time.c: 140: Initialize_Screen();
  9772  003C54  EC37  F003         	call	_Initialize_Screen	;wreg free
  9773                           
  9774                           ;Setup_Alarm_Time.c: 141: In_Alarm_Time_Setup = 0;
  9775  003C58  0E00               	movlw	0
  9776  003C5A  0100               	movlb	0	; () banked
  9777  003C5C  6FF8               	movwf	_In_Alarm_Time_Setup& (0+255),b
  9778                           
  9779                           ; BSR set to: 0
  9780  003C5E  0012               	return		;funcret
  9781  003C60                     __end_of_Do_Save_New_Alarm_Time:
  9782                           	opt stack 0
  9783                           tblptru	equ	0xFF8
  9784                           tblptrh	equ	0xFF7
  9785                           tblptrl	equ	0xFF6
  9786                           tablat	equ	0xFF5
  9787                           prodh	equ	0xFF4
  9788                           prodl	equ	0xFF3
  9789                           intcon	equ	0xFF2
  9790                           intcon2	equ	0xFF1
  9791                           postinc0	equ	0xFEE
  9792                           wreg	equ	0xFE8
  9793                           postdec1	equ	0xFE5
  9794                           fsr1l	equ	0xFE1
  9795                           postinc2	equ	0xFDE
  9796                           fsr2h	equ	0xFDA
  9797                           fsr2l	equ	0xFD9
  9798                           status	equ	0xFD8
  9799                           
  9800 ;; *************** function _Initialize_Screen *****************
  9801 ;; Defined at:
  9802 ;;		line 36 in file "Main_Screen.c"
  9803 ;; Parameters:    Size  Location     Type
  9804 ;;		None
  9805 ;; Auto vars:     Size  Location     Type
  9806 ;;		None
  9807 ;; Return value:  Size  Location     Type
  9808 ;;                  2   40[None  ] int 
  9809 ;; Registers used:
  9810 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9811 ;; Tracked objects:
  9812 ;;		On entry : 0/0
  9813 ;;		On exit  : 0/0
  9814 ;;		Unchanged: 0/0
  9815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9820 ;;Total ram usage:        0 bytes
  9821 ;; Hardware stack levels used:    1
  9822 ;; Hardware stack levels required when called:   10
  9823 ;; This function calls:
  9824 ;;		_LCD_Reset
  9825 ;;		_TFT_GreenTab_Initialize
  9826 ;;		_drawCircle
  9827 ;;		_drawtext
  9828 ;;		_fillScreen
  9829 ;;		_strcpy
  9830 ;; This function is called by:
  9831 ;;		_main
  9832 ;;		_Exit_Setup_Alarm_Time
  9833 ;;		_Do_Save_New_Alarm_Time
  9834 ;;		_Exit_Setup_Heater_Temp
  9835 ;;		_Do_Save_New_Heater_Temp
  9836 ;;		_Do_Save_New_Time
  9837 ;;		_Exit_Time_Setup
  9838 ;; This function uses a non-reentrant model
  9839 ;;
  9840                           
  9841                           	psect	text49
  9842  00066E                     __ptext49:
  9843                           	opt stack 0
  9844  00066E                     _Initialize_Screen:
  9845                           	opt stack 20
  9846                           
  9847                           ;Main_Screen.c: 38: LCD_Reset();
  9848                           
  9849                           ; BSR set to: 0
  9850                           ;incstack = 0
  9851  00066E  EC80  F01E         	call	_LCD_Reset	;wreg free
  9852                           
  9853                           ;Main_Screen.c: 39: TFT_GreenTab_Initialize();
  9854  000672  EC12  F01D         	call	_TFT_GreenTab_Initialize	;wreg free
  9855                           
  9856                           ;Main_Screen.c: 40: fillScreen(0x0000);
  9857  000676  0E00               	movlw	0
  9858  000678  6E25               	movwf	fillScreen@color+1,c
  9859  00067A  0E00               	movlw	0
  9860  00067C  6E24               	movwf	fillScreen@color,c
  9861  00067E  ECB3  F01D         	call	_fillScreen	;wreg free
  9862                           
  9863                           ;Main_Screen.c: 42: strcpy(txt, " ECE3301L F'22 S3\0");
  9864  000682  C04E  F011         	movff	_txt,strcpy@to
  9865  000686  C04F  F012         	movff	_txt+1,strcpy@to+1
  9866  00068A  0E28               	movlw	low STR_4
  9867  00068C  6E13               	movwf	strcpy@from,c
  9868  00068E  0EFF               	movlw	high STR_4
  9869  000690  6E14               	movwf	strcpy@from+1,c
  9870  000692  ECCC  F01C         	call	_strcpy	;wreg free
  9871                           
  9872                           ;Main_Screen.c: 43: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  9873  000696  0E01               	movlw	1
  9874  000698  6E39               	movwf	drawtext@y,c
  9875  00069A  C04E  F03A         	movff	_txt,drawtext@_text
  9876  00069E  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  9877  0006A2  0EFF               	movlw	255
  9878  0006A4  6E3D               	movwf	drawtext@color+1,c
  9879  0006A6  683C               	setf	drawtext@color,c
  9880  0006A8  0E00               	movlw	0
  9881  0006AA  6E3F               	movwf	drawtext@bg+1,c
  9882  0006AC  0E00               	movlw	0
  9883  0006AE  6E3E               	movwf	drawtext@bg,c
  9884  0006B0  0E01               	movlw	1
  9885  0006B2  6E40               	movwf	drawtext@size,c
  9886  0006B4  0E01               	movlw	1
  9887  0006B6  ECEA  F00C         	call	_drawtext
  9888                           
  9889                           ;Main_Screen.c: 45: strcpy(txt, "Temperature:");
  9890  0006BA  C04E  F011         	movff	_txt,strcpy@to
  9891  0006BE  C04F  F012         	movff	_txt+1,strcpy@to+1
  9892  0006C2  0E6E               	movlw	low STR_5
  9893  0006C4  6E13               	movwf	strcpy@from,c
  9894  0006C6  0EFF               	movlw	high STR_5
  9895  0006C8  6E14               	movwf	strcpy@from+1,c
  9896  0006CA  ECCC  F01C         	call	_strcpy	;wreg free
  9897                           
  9898                           ;Main_Screen.c: 46: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
  9899  0006CE  0E0B               	movlw	11
  9900  0006D0  6E39               	movwf	drawtext@y,c
  9901  0006D2  C04E  F03A         	movff	_txt,drawtext@_text
  9902  0006D6  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  9903  0006DA  0EF8               	movlw	248
  9904  0006DC  6E3D               	movwf	drawtext@color+1,c
  9905  0006DE  0E1F               	movlw	31
  9906  0006E0  6E3C               	movwf	drawtext@color,c
  9907  0006E2  0E00               	movlw	0
  9908  0006E4  6E3F               	movwf	drawtext@bg+1,c
  9909  0006E6  0E00               	movlw	0
  9910  0006E8  6E3E               	movwf	drawtext@bg,c
  9911  0006EA  0E01               	movlw	1
  9912  0006EC  6E40               	movwf	drawtext@size,c
  9913  0006EE  0E18               	movlw	24
  9914  0006F0  ECEA  F00C         	call	_drawtext
  9915                           
  9916                           ;Main_Screen.c: 47: drawCircle(40, 23 , 2 , 0xFFE0);
  9917  0006F4  0E00               	movlw	0
  9918  0006F6  6E1D               	movwf	drawCircle@x0+1,c
  9919  0006F8  0E28               	movlw	40
  9920  0006FA  6E1C               	movwf	drawCircle@x0,c
  9921  0006FC  0E00               	movlw	0
  9922  0006FE  6E1F               	movwf	drawCircle@y0+1,c
  9923  000700  0E17               	movlw	23
  9924  000702  6E1E               	movwf	drawCircle@y0,c
  9925  000704  0E00               	movlw	0
  9926  000706  6E21               	movwf	drawCircle@r+1,c
  9927  000708  0E02               	movlw	2
  9928  00070A  6E20               	movwf	drawCircle@r,c
  9929  00070C  0EFF               	movlw	255
  9930  00070E  6E23               	movwf	drawCircle@color+1,c
  9931  000710  0EE0               	movlw	224
  9932  000712  6E22               	movwf	drawCircle@color,c
  9933  000714  EC48  F009         	call	_drawCircle	;wreg free
  9934                           
  9935                           ;Main_Screen.c: 48: strcpy(txt, "C/");
  9936  000718  C04E  F011         	movff	_txt,strcpy@to
  9937  00071C  C04F  F012         	movff	_txt+1,strcpy@to+1
  9938  000720  0EF5               	movlw	low STR_6
  9939  000722  6E13               	movwf	strcpy@from,c
  9940  000724  0EFF               	movlw	high STR_6
  9941  000726  6E14               	movwf	strcpy@from+1,c
  9942  000728  ECCC  F01C         	call	_strcpy	;wreg free
  9943                           
  9944                           ;Main_Screen.c: 49: drawtext(45 , 23, txt, 0xFFE0 , 0x0000, 2);
  9945  00072C  0E17               	movlw	23
  9946  00072E  6E39               	movwf	drawtext@y,c
  9947  000730  C04E  F03A         	movff	_txt,drawtext@_text
  9948  000734  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  9949  000738  0EFF               	movlw	255
  9950  00073A  6E3D               	movwf	drawtext@color+1,c
  9951  00073C  0EE0               	movlw	224
  9952  00073E  6E3C               	movwf	drawtext@color,c
  9953  000740  0E00               	movlw	0
  9954  000742  6E3F               	movwf	drawtext@bg+1,c
  9955  000744  0E00               	movlw	0
  9956  000746  6E3E               	movwf	drawtext@bg,c
  9957  000748  0E02               	movlw	2
  9958  00074A  6E40               	movwf	drawtext@size,c
  9959  00074C  0E2D               	movlw	45
  9960  00074E  ECEA  F00C         	call	_drawtext
  9961                           
  9962                           ;Main_Screen.c: 50: strcpy(txt, "F");
  9963  000752  C04E  F011         	movff	_txt,strcpy@to
  9964  000756  C04F  F012         	movff	_txt+1,strcpy@to+1
  9965  00075A  0EEF               	movlw	low (STR_19+2)
  9966  00075C  6E13               	movwf	strcpy@from,c
  9967  00075E  0EFF               	movlw	high (STR_19+2)
  9968  000760  6E14               	movwf	strcpy@from+1,c
  9969  000762  ECCC  F01C         	call	_strcpy	;wreg free
  9970                           
  9971                           ;Main_Screen.c: 51: drawCircle(110, 23 , 2 , 0xFFE0);
  9972  000766  0E00               	movlw	0
  9973  000768  6E1D               	movwf	drawCircle@x0+1,c
  9974  00076A  0E6E               	movlw	110
  9975  00076C  6E1C               	movwf	drawCircle@x0,c
  9976  00076E  0E00               	movlw	0
  9977  000770  6E1F               	movwf	drawCircle@y0+1,c
  9978  000772  0E17               	movlw	23
  9979  000774  6E1E               	movwf	drawCircle@y0,c
  9980  000776  0E00               	movlw	0
  9981  000778  6E21               	movwf	drawCircle@r+1,c
  9982  00077A  0E02               	movlw	2
  9983  00077C  6E20               	movwf	drawCircle@r,c
  9984  00077E  0EFF               	movlw	255
  9985  000780  6E23               	movwf	drawCircle@color+1,c
  9986  000782  0EE0               	movlw	224
  9987  000784  6E22               	movwf	drawCircle@color,c
  9988  000786  EC48  F009         	call	_drawCircle	;wreg free
  9989                           
  9990                           ;Main_Screen.c: 52: drawtext(115 , 23, txt, 0xFFE0 , 0x0000, 2);
  9991  00078A  0E17               	movlw	23
  9992  00078C  6E39               	movwf	drawtext@y,c
  9993  00078E  C04E  F03A         	movff	_txt,drawtext@_text
  9994  000792  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  9995  000796  0EFF               	movlw	255
  9996  000798  6E3D               	movwf	drawtext@color+1,c
  9997  00079A  0EE0               	movlw	224
  9998  00079C  6E3C               	movwf	drawtext@color,c
  9999  00079E  0E00               	movlw	0
 10000  0007A0  6E3F               	movwf	drawtext@bg+1,c
 10001  0007A2  0E00               	movlw	0
 10002  0007A4  6E3E               	movwf	drawtext@bg,c
 10003  0007A6  0E02               	movlw	2
 10004  0007A8  6E40               	movwf	drawtext@size,c
 10005  0007AA  0E73               	movlw	115
 10006  0007AC  ECEA  F00C         	call	_drawtext
 10007                           
 10008                           ;Main_Screen.c: 53: strcpy(txt, "Time");
 10009  0007B0  C04E  F011         	movff	_txt,strcpy@to
 10010  0007B4  C04F  F012         	movff	_txt+1,strcpy@to+1
 10011  0007B8  0EB0               	movlw	low (STR_10+6)
 10012  0007BA  6E13               	movwf	strcpy@from,c
 10013  0007BC  0EFF               	movlw	high (STR_10+6)
 10014  0007BE  6E14               	movwf	strcpy@from+1,c
 10015  0007C0  ECCC  F01C         	call	_strcpy	;wreg free
 10016                           
 10017                           ;Main_Screen.c: 54: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
 10018  0007C4  0E28               	movlw	40
 10019  0007C6  6E39               	movwf	drawtext@y,c
 10020  0007C8  C04E  F03A         	movff	_txt,drawtext@_text
 10021  0007CC  C04F  F03B         	movff	_txt+1,drawtext@_text+1
 10022  0007D0  0E00               	movlw	0
 10023  0007D2  6E3D               	movwf	drawtext@color+1,c
 10024  0007D4  0E1F               	movlw	31
 10025  0007D6  6E3C               	movwf	drawtext@color,c
 10026  0007D8  0E00               	movlw	0
 10027  0007DA  6E3F               	movwf	drawtext@bg+1,c
 10028  0007DC  0E00               	movlw	0
 10029  0007DE  6E3E               	movwf	drawtext@bg,c
 10030  0007E0  0E01               	movlw	1
 10031  0007E2  6E40               	movwf	drawtext@size,c
 10032  0007E4  0E32               	movlw	50
 10033  0007E6  ECEA  F00C         	call	_drawtext
 10034                           
 10035                           ;Main_Screen.c: 55: strcpy(txt, "Date");
 10036  0007EA  C04E  F011         	movff	_txt,strcpy@to
 10037  0007EE  C04F  F012         	movff	_txt+1,strcpy@to+1
 10038  0007F2  0EDF               	movlw	low STR_9
 10039  0007F4  6E13               	movwf	strcpy@from,c
 10040  0007F6  0EFF               	movlw	high STR_9
 10041  0007F8  6E14               	movwf	strcpy@from+1,c
 10042  0007FA  ECCC  F01C         	call	_strcpy	;wreg free
 10043                           
 10044                           ;Main_Screen.c: 56: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
 10045  0007FE  0E47               	movlw	71
 10046  000800  6E39               	movwf	drawtext@y,c
 10047  000802  C04E  F03A         	movff	_txt,drawtext@_text
 10048  000806  C04F  F03B         	movff	_txt+1,drawtext@_text+1
 10049  00080A  0EF8               	movlw	248
 10050  00080C  6E3D               	movwf	drawtext@color+1,c
 10051  00080E  0E00               	movlw	0
 10052  000810  6E3C               	movwf	drawtext@color,c
 10053  000812  0E00               	movlw	0
 10054  000814  6E3F               	movwf	drawtext@bg+1,c
 10055  000816  0E00               	movlw	0
 10056  000818  6E3E               	movwf	drawtext@bg,c
 10057  00081A  0E01               	movlw	1
 10058  00081C  6E40               	movwf	drawtext@size,c
 10059  00081E  0E32               	movlw	50
 10060  000820  ECEA  F00C         	call	_drawtext
 10061                           
 10062                           ;Main_Screen.c: 57: strcpy(txt, "Alarm Time");
 10063  000824  C04E  F011         	movff	_txt,strcpy@to
 10064  000828  C04F  F012         	movff	_txt+1,strcpy@to+1
 10065  00082C  0EAA               	movlw	low STR_10
 10066  00082E  6E13               	movwf	strcpy@from,c
 10067  000830  0EFF               	movlw	high STR_10
 10068  000832  6E14               	movwf	strcpy@from+1,c
 10069  000834  ECCC  F01C         	call	_strcpy	;wreg free
 10070                           
 10071                           ;Main_Screen.c: 58: drawtext(4 , 100 , txt, 0xFFE0, 0x0000, 1);
 10072  000838  0E64               	movlw	100
 10073  00083A  6E39               	movwf	drawtext@y,c
 10074  00083C  C04E  F03A         	movff	_txt,drawtext@_text
 10075  000840  C04F  F03B         	movff	_txt+1,drawtext@_text+1
 10076  000844  0EFF               	movlw	255
 10077  000846  6E3D               	movwf	drawtext@color+1,c
 10078  000848  0EE0               	movlw	224
 10079  00084A  6E3C               	movwf	drawtext@color,c
 10080  00084C  0E00               	movlw	0
 10081  00084E  6E3F               	movwf	drawtext@bg+1,c
 10082  000850  0E00               	movlw	0
 10083  000852  6E3E               	movwf	drawtext@bg,c
 10084  000854  0E01               	movlw	1
 10085  000856  6E40               	movwf	drawtext@size,c
 10086  000858  0E04               	movlw	4
 10087  00085A  ECEA  F00C         	call	_drawtext
 10088                           
 10089                           ;Main_Screen.c: 59: strcpy(txt, "Alarm SW");
 10090  00085E  C04E  F011         	movff	_txt,strcpy@to
 10091  000862  C04F  F012         	movff	_txt+1,strcpy@to+1
 10092  000866  0EBF               	movlw	low STR_11
 10093  000868  6E13               	movwf	strcpy@from,c
 10094  00086A  0EFF               	movlw	high STR_11
 10095  00086C  6E14               	movwf	strcpy@from+1,c
 10096  00086E  ECCC  F01C         	call	_strcpy	;wreg free
 10097                           
 10098                           ;Main_Screen.c: 60: drawtext(77, 100, txt, 0xFFE0, 0x0000, 1);
 10099  000872  0E64               	movlw	100
 10100  000874  6E39               	movwf	drawtext@y,c
 10101  000876  C04E  F03A         	movff	_txt,drawtext@_text
 10102  00087A  C04F  F03B         	movff	_txt+1,drawtext@_text+1
 10103  00087E  0EFF               	movlw	255
 10104  000880  6E3D               	movwf	drawtext@color+1,c
 10105  000882  0EE0               	movlw	224
 10106  000884  6E3C               	movwf	drawtext@color,c
 10107  000886  0E00               	movlw	0
 10108  000888  6E3F               	movwf	drawtext@bg+1,c
 10109  00088A  0E00               	movlw	0
 10110  00088C  6E3E               	movwf	drawtext@bg,c
 10111  00088E  0E01               	movlw	1
 10112  000890  6E40               	movwf	drawtext@size,c
 10113  000892  0E4D               	movlw	77
 10114  000894  ECEA  F00C         	call	_drawtext
 10115                           
 10116                           ;Main_Screen.c: 61: strcpy(txt, "HTR Set Temp");
 10117  000898  C04E  F011         	movff	_txt,strcpy@to
 10118  00089C  C04F  F012         	movff	_txt+1,strcpy@to+1
 10119  0008A0  0E7B               	movlw	low STR_12
 10120  0008A2  6E13               	movwf	strcpy@from,c
 10121  0008A4  0EFF               	movlw	high STR_12
 10122  0008A6  6E14               	movwf	strcpy@from+1,c
 10123  0008A8  ECCC  F01C         	call	_strcpy	;wreg free
 10124                           
 10125                           ;Main_Screen.c: 62: drawtext(6, 120, txt, 0x001F , 0x0000, 1);
 10126  0008AC  0E78               	movlw	120
 10127  0008AE  6E39               	movwf	drawtext@y,c
 10128  0008B0  C04E  F03A         	movff	_txt,drawtext@_text
 10129  0008B4  C04F  F03B         	movff	_txt+1,drawtext@_text+1
 10130  0008B8  0E00               	movlw	0
 10131  0008BA  6E3D               	movwf	drawtext@color+1,c
 10132  0008BC  0E1F               	movlw	31
 10133  0008BE  6E3C               	movwf	drawtext@color,c
 10134  0008C0  0E00               	movlw	0
 10135  0008C2  6E3F               	movwf	drawtext@bg+1,c
 10136  0008C4  0E00               	movlw	0
 10137  0008C6  6E3E               	movwf	drawtext@bg,c
 10138  0008C8  0E01               	movlw	1
 10139  0008CA  6E40               	movwf	drawtext@size,c
 10140  0008CC  0E06               	movlw	6
 10141  0008CE  ECEA  F00C         	call	_drawtext
 10142                           
 10143                           ;Main_Screen.c: 63: strcpy(txt, "HTR SW");
 10144  0008D2  C04E  F011         	movff	_txt,strcpy@to
 10145  0008D6  C04F  F012         	movff	_txt+1,strcpy@to+1
 10146  0008DA  0ED8               	movlw	low STR_13
 10147  0008DC  6E13               	movwf	strcpy@from,c
 10148  0008DE  0EFF               	movlw	high STR_13
 10149  0008E0  6E14               	movwf	strcpy@from+1,c
 10150  0008E2  ECCC  F01C         	call	_strcpy	;wreg free
 10151                           
 10152                           ;Main_Screen.c: 64: drawtext(85, 120, txt, 0x001F , 0x0000, 1);
 10153  0008E6  0E78               	movlw	120
 10154  0008E8  6E39               	movwf	drawtext@y,c
 10155  0008EA  C04E  F03A         	movff	_txt,drawtext@_text
 10156  0008EE  C04F  F03B         	movff	_txt+1,drawtext@_text+1
 10157  0008F2  0E00               	movlw	0
 10158  0008F4  6E3D               	movwf	drawtext@color+1,c
 10159  0008F6  0E1F               	movlw	31
 10160  0008F8  6E3C               	movwf	drawtext@color,c
 10161  0008FA  0E00               	movlw	0
 10162  0008FC  6E3F               	movwf	drawtext@bg+1,c
 10163  0008FE  0E00               	movlw	0
 10164  000900  6E3E               	movwf	drawtext@bg,c
 10165  000902  0E01               	movlw	1
 10166  000904  6E40               	movwf	drawtext@size,c
 10167  000906  0E55               	movlw	85
 10168  000908  ECEA  F00C         	call	_drawtext
 10169                           
 10170                           ;Main_Screen.c: 65: strcpy(txt, "DC");
 10171  00090C  C04E  F011         	movff	_txt,strcpy@to
 10172  000910  C04F  F012         	movff	_txt+1,strcpy@to+1
 10173  000914  0EF8               	movlw	low STR_14
 10174  000916  6E13               	movwf	strcpy@from,c
 10175  000918  0EFF               	movlw	high STR_14
 10176  00091A  6E14               	movwf	strcpy@from+1,c
 10177  00091C  ECCC  F01C         	call	_strcpy	;wreg free
 10178                           
 10179                           ;Main_Screen.c: 66: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
 10180  000920  0E8C               	movlw	140
 10181  000922  6E39               	movwf	drawtext@y,c
 10182  000924  C04E  F03A         	movff	_txt,drawtext@_text
 10183  000928  C04F  F03B         	movff	_txt+1,drawtext@_text+1
 10184  00092C  0EFF               	movlw	255
 10185  00092E  6E3D               	movwf	drawtext@color+1,c
 10186  000930  683C               	setf	drawtext@color,c
 10187  000932  0E00               	movlw	0
 10188  000934  6E3F               	movwf	drawtext@bg+1,c
 10189  000936  0E00               	movlw	0
 10190  000938  6E3E               	movwf	drawtext@bg,c
 10191  00093A  0E01               	movlw	1
 10192  00093C  6E40               	movwf	drawtext@size,c
 10193  00093E  0E0C               	movlw	12
 10194  000940  ECEA  F00C         	call	_drawtext
 10195                           
 10196                           ;Main_Screen.c: 67: strcpy(txt, "RM");
 10197  000944  C04E  F011         	movff	_txt,strcpy@to
 10198  000948  C04F  F012         	movff	_txt+1,strcpy@to+1
 10199  00094C  0EFB               	movlw	low STR_15
 10200  00094E  6E13               	movwf	strcpy@from,c
 10201  000950  0EFF               	movlw	high STR_15
 10202  000952  6E14               	movwf	strcpy@from+1,c
 10203  000954  ECCC  F01C         	call	_strcpy	;wreg free
 10204                           
 10205                           ;Main_Screen.c: 68: drawtext(33, 140, txt, 0xFFFF , 0x0000 , 1);
 10206  000958  0E8C               	movlw	140
 10207  00095A  6E39               	movwf	drawtext@y,c
 10208  00095C  C04E  F03A         	movff	_txt,drawtext@_text
 10209  000960  C04F  F03B         	movff	_txt+1,drawtext@_text+1
 10210  000964  0EFF               	movlw	255
 10211  000966  6E3D               	movwf	drawtext@color+1,c
 10212  000968  683C               	setf	drawtext@color,c
 10213  00096A  0E00               	movlw	0
 10214  00096C  6E3F               	movwf	drawtext@bg+1,c
 10215  00096E  0E00               	movlw	0
 10216  000970  6E3E               	movwf	drawtext@bg,c
 10217  000972  0E01               	movlw	1
 10218  000974  6E40               	movwf	drawtext@size,c
 10219  000976  0E21               	movlw	33
 10220  000978  ECEA  F00C         	call	_drawtext
 10221                           
 10222                           ;Main_Screen.c: 69: strcpy(txt, "Volt");
 10223  00097C  C04E  F011         	movff	_txt,strcpy@to
 10224  000980  C04F  F012         	movff	_txt+1,strcpy@to+1
 10225  000984  0EE4               	movlw	low STR_16
 10226  000986  6E13               	movwf	strcpy@from,c
 10227  000988  0EFF               	movlw	high STR_16
 10228  00098A  6E14               	movwf	strcpy@from+1,c
 10229  00098C  ECCC  F01C         	call	_strcpy	;wreg free
 10230                           
 10231                           ;Main_Screen.c: 70: drawtext(50, 140, txt, 0xFFFF , 0x0000 , 1);
 10232  000990  0E8C               	movlw	140
 10233  000992  6E39               	movwf	drawtext@y,c
 10234  000994  C04E  F03A         	movff	_txt,drawtext@_text
 10235  000998  C04F  F03B         	movff	_txt+1,drawtext@_text+1
 10236  00099C  0EFF               	movlw	255
 10237  00099E  6E3D               	movwf	drawtext@color+1,c
 10238  0009A0  683C               	setf	drawtext@color,c
 10239  0009A2  0E00               	movlw	0
 10240  0009A4  6E3F               	movwf	drawtext@bg+1,c
 10241  0009A6  0E00               	movlw	0
 10242  0009A8  6E3E               	movwf	drawtext@bg,c
 10243  0009AA  0E01               	movlw	1
 10244  0009AC  6E40               	movwf	drawtext@size,c
 10245  0009AE  0E32               	movlw	50
 10246  0009B0  ECEA  F00C         	call	_drawtext
 10247                           
 10248                           ;Main_Screen.c: 71: strcpy(txt, "RPM");
 10249  0009B4  C04E  F011         	movff	_txt,strcpy@to
 10250  0009B8  C04F  F012         	movff	_txt+1,strcpy@to+1
 10251  0009BC  0EF1               	movlw	low STR_17
 10252  0009BE  6E13               	movwf	strcpy@from,c
 10253  0009C0  0EFF               	movlw	high STR_17
 10254  0009C2  6E14               	movwf	strcpy@from+1,c
 10255  0009C4  ECCC  F01C         	call	_strcpy	;wreg free
 10256                           
 10257                           ;Main_Screen.c: 72: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
 10258  0009C8  0E8C               	movlw	140
 10259  0009CA  6E39               	movwf	drawtext@y,c
 10260  0009CC  C04E  F03A         	movff	_txt,drawtext@_text
 10261  0009D0  C04F  F03B         	movff	_txt+1,drawtext@_text+1
 10262  0009D4  0EFF               	movlw	255
 10263  0009D6  6E3D               	movwf	drawtext@color+1,c
 10264  0009D8  683C               	setf	drawtext@color,c
 10265  0009DA  0E00               	movlw	0
 10266  0009DC  6E3F               	movwf	drawtext@bg+1,c
 10267  0009DE  0E00               	movlw	0
 10268  0009E0  6E3E               	movwf	drawtext@bg,c
 10269  0009E2  0E01               	movlw	1
 10270  0009E4  6E40               	movwf	drawtext@size,c
 10271  0009E6  0E5F               	movlw	95
 10272  0009E8  ECEA  F00C         	call	_drawtext
 10273  0009EC  0012               	return		;funcret
 10274  0009EE                     __end_of_Initialize_Screen:
 10275                           	opt stack 0
 10276                           tblptru	equ	0xFF8
 10277                           tblptrh	equ	0xFF7
 10278                           tblptrl	equ	0xFF6
 10279                           tablat	equ	0xFF5
 10280                           prodh	equ	0xFF4
 10281                           prodl	equ	0xFF3
 10282                           intcon	equ	0xFF2
 10283                           intcon2	equ	0xFF1
 10284                           postinc0	equ	0xFEE
 10285                           wreg	equ	0xFE8
 10286                           postdec1	equ	0xFE5
 10287                           fsr1l	equ	0xFE1
 10288                           postinc2	equ	0xFDE
 10289                           fsr2h	equ	0xFDA
 10290                           fsr2l	equ	0xFD9
 10291                           status	equ	0xFD8
 10292                           
 10293 ;; *************** function _strcpy *****************
 10294 ;; Defined at:
 10295 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
 10296 ;; Parameters:    Size  Location     Type
 10297 ;;  to              2   16[COMRAM] PTR unsigned char 
 10298 ;;		 -> NULL(0), Heater_SW_Txt(4), Alarm_SW_Txt(4), 
 10299 ;;  from            2   18[COMRAM] PTR const unsigned char 
 10300 ;;		 -> STR_34(5), STR_33(5), STR_32(12), STR_31(19), 
 10301 ;;		 -> STR_30(16), STR_29(10), STR_28(11), STR_27(19), 
 10302 ;;		 -> STR_25(5), STR_24(8), STR_23(8), STR_22(18), 
 10303 ;;		 -> STR_21(4), STR_20(4), STR_19(4), STR_18(4), 
 10304 ;;		 -> STR_17(4), STR_16(5), STR_15(3), STR_14(3), 
 10305 ;;		 -> STR_13(7), STR_12(13), STR_11(9), STR_10(11), 
 10306 ;;		 -> STR_9(5), STR_8(5), STR_7(2), STR_6(3), 
 10307 ;;		 -> STR_5(13), STR_4(19), 
 10308 ;; Auto vars:     Size  Location     Type
 10309 ;;  cp              2   20[COMRAM] PTR unsigned char 
 10310 ;;		 -> NULL(0), Heater_SW_Txt(4), Alarm_SW_Txt(4), 
 10311 ;; Return value:  Size  Location     Type
 10312 ;;                  2   16[COMRAM] PTR unsigned char 
 10313 ;; Registers used:
 10314 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10315 ;; Tracked objects:
 10316 ;;		On entry : 0/0
 10317 ;;		On exit  : 0/0
 10318 ;;		Unchanged: 0/0
 10319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10320 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10321 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10323 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10324 ;;Total ram usage:        6 bytes
 10325 ;; Hardware stack levels used:    1
 10326 ;; Hardware stack levels required when called:    3
 10327 ;; This function calls:
 10328 ;;		Nothing
 10329 ;; This function is called by:
 10330 ;;		_Initialize_Screen
 10331 ;;		_Update_Screen
 10332 ;;		_Initialize_Setup_Alarm_Time_Screen
 10333 ;;		_Initialize_Setup_Heater_Screen
 10334 ;;		_Initialize_Setup_Time_Screen
 10335 ;; This function uses a non-reentrant model
 10336 ;;
 10337                           
 10338                           	psect	text50
 10339  003998                     __ptext50:
 10340                           	opt stack 0
 10341  003998                     _strcpy:
 10342                           	opt stack 26
 10343                           
 10344                           ;incstack = 0
 10345  003998  C011  F015         	movff	strcpy@to,strcpy@cp
 10346  00399C  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
 10347  0039A0  D005               	goto	l8537
 10348  0039A2                     l8535:
 10349  0039A2  4A15               	infsnz	strcpy@cp,f,c
 10350  0039A4  2A16               	incf	strcpy@cp+1,f,c
 10351  0039A6  4A13               	infsnz	strcpy@from,f,c
 10352  0039A8  2A14               	incf	strcpy@from+1,f,c
 10353  0039AA  D000               	goto	l8537
 10354  0039AC                     l8537:
 10355  0039AC  C013  FFF6         	movff	strcpy@from,tblptrl
 10356  0039B0  C014  FFF7         	movff	strcpy@from+1,tblptrh
 10357  0039B4                     	if	0	;tblptru may be non-zero
 10358  0039B4                     	endif
 10359  0039B4                     	if	0	;tblptru may be non-zero
 10360  0039B4                     	endif
 10361  0039B4  C015  FFD9         	movff	strcpy@cp,fsr2l
 10362  0039B8  C016  FFDA         	movff	strcpy@cp+1,fsr2h
 10363  0039BC  0008               	tblrd		*
 10364  0039BE  CFF5 FFDF          	movff	tablat,indf2
 10365  0039C2  50DF               	movf	indf2,w,c
 10366  0039C4  A4D8               	btfss	status,2,c
 10367  0039C6  D7ED               	goto	l8535
 10368                           
 10369                           ;	Return value of _strcpy is never used
 10370  0039C8  0012               	return		;funcret
 10371  0039CA                     __end_of_strcpy:
 10372                           	opt stack 0
 10373                           tblptru	equ	0xFF8
 10374                           tblptrh	equ	0xFF7
 10375                           tblptrl	equ	0xFF6
 10376                           tablat	equ	0xFF5
 10377                           prodh	equ	0xFF4
 10378                           prodl	equ	0xFF3
 10379                           intcon	equ	0xFF2
 10380                           intcon2	equ	0xFF1
 10381                           postinc0	equ	0xFEE
 10382                           wreg	equ	0xFE8
 10383                           postdec1	equ	0xFE5
 10384                           fsr1l	equ	0xFE1
 10385                           indf2	equ	0xFDF
 10386                           postinc2	equ	0xFDE
 10387                           fsr2h	equ	0xFDA
 10388                           fsr2l	equ	0xFD9
 10389                           status	equ	0xFD8
 10390                           
 10391 ;; *************** function _fillScreen *****************
 10392 ;; Defined at:
 10393 ;;		line 619 in file "ST7735_TFT.c"
 10394 ;; Parameters:    Size  Location     Type
 10395 ;;  color           2   35[COMRAM] unsigned int 
 10396 ;; Auto vars:     Size  Location     Type
 10397 ;;		None
 10398 ;; Return value:  Size  Location     Type
 10399 ;;		None               void
 10400 ;; Registers used:
 10401 ;;		wreg, status,2, status,0, cstack
 10402 ;; Tracked objects:
 10403 ;;		On entry : 0/0
 10404 ;;		On exit  : 0/0
 10405 ;;		Unchanged: 0/0
 10406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10407 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10410 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10411 ;;Total ram usage:        2 bytes
 10412 ;; Hardware stack levels used:    1
 10413 ;; Hardware stack levels required when called:    7
 10414 ;; This function calls:
 10415 ;;		_fillRectangle
 10416 ;; This function is called by:
 10417 ;;		_Initialize_Screen
 10418 ;;		_Initialize_Setup_Alarm_Time_Screen
 10419 ;;		_Initialize_Setup_Heater_Screen
 10420 ;;		_Initialize_Setup_Time_Screen
 10421 ;; This function uses a non-reentrant model
 10422 ;;
 10423                           
 10424                           	psect	text51
 10425  003B66                     __ptext51:
 10426                           	opt stack 0
 10427  003B66                     _fillScreen:
 10428                           	opt stack 22
 10429                           
 10430                           ;ST7735_TFT.c: 621: fillRectangle(0, 0, 128, 160, color);
 10431                           
 10432                           ;incstack = 0
 10433  003B66  0E00               	movlw	0
 10434  003B68  6E18               	movwf	fillRectangle@y,c
 10435  003B6A  0E80               	movlw	128
 10436  003B6C  6E19               	movwf	fillRectangle@w,c
 10437  003B6E  0EA0               	movlw	160
 10438  003B70  6E1A               	movwf	fillRectangle@h,c
 10439  003B72  C024  F01B         	movff	fillScreen@color,fillRectangle@color
 10440  003B76  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
 10441  003B7A  0E00               	movlw	0
 10442  003B7C  ECCC  F011         	call	_fillRectangle
 10443  003B80  0012               	return		;funcret
 10444  003B82                     __end_of_fillScreen:
 10445                           	opt stack 0
 10446                           tblptru	equ	0xFF8
 10447                           tblptrh	equ	0xFF7
 10448                           tblptrl	equ	0xFF6
 10449                           tablat	equ	0xFF5
 10450                           prodh	equ	0xFF4
 10451                           prodl	equ	0xFF3
 10452                           intcon	equ	0xFF2
 10453                           intcon2	equ	0xFF1
 10454                           postinc0	equ	0xFEE
 10455                           wreg	equ	0xFE8
 10456                           postdec1	equ	0xFE5
 10457                           fsr1l	equ	0xFE1
 10458                           indf2	equ	0xFDF
 10459                           postinc2	equ	0xFDE
 10460                           fsr2h	equ	0xFDA
 10461                           fsr2l	equ	0xFD9
 10462                           status	equ	0xFD8
 10463                           
 10464 ;; *************** function _fillRectangle *****************
 10465 ;; Defined at:
 10466 ;;		line 503 in file "ST7735_TFT.c"
 10467 ;; Parameters:    Size  Location     Type
 10468 ;;  x               1    wreg     unsigned char 
 10469 ;;  y               1   23[COMRAM] unsigned char 
 10470 ;;  w               1   24[COMRAM] unsigned char 
 10471 ;;  h               1   25[COMRAM] unsigned char 
 10472 ;;  color           2   26[COMRAM] unsigned int 
 10473 ;; Auto vars:     Size  Location     Type
 10474 ;;  x               1   34[COMRAM] unsigned char 
 10475 ;;  lo              1   33[COMRAM] unsigned char 
 10476 ;;  hi              1   32[COMRAM] unsigned char 
 10477 ;; Return value:  Size  Location     Type
 10478 ;;		None               void
 10479 ;; Registers used:
 10480 ;;		wreg, status,2, status,0, cstack
 10481 ;; Tracked objects:
 10482 ;;		On entry : 0/0
 10483 ;;		On exit  : 0/0
 10484 ;;		Unchanged: 0/0
 10485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10486 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10487 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10488 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10489 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10490 ;;Total ram usage:       12 bytes
 10491 ;; Hardware stack levels used:    1
 10492 ;; Hardware stack levels required when called:    6
 10493 ;; This function calls:
 10494 ;;		_setAddrWindow
 10495 ;;		_spiwrite
 10496 ;; This function is called by:
 10497 ;;		_fillScreen
 10498 ;; This function uses a non-reentrant model
 10499 ;;
 10500                           
 10501                           	psect	text52
 10502  002398                     __ptext52:
 10503                           	opt stack 0
 10504  002398                     _fillRectangle:
 10505                           	opt stack 22
 10506                           
 10507                           ;incstack = 0
 10508                           ;fillRectangle@x stored from wreg
 10509  002398  6E23               	movwf	fillRectangle@x,c
 10510                           
 10511                           ;ST7735_TFT.c: 505: unsigned char hi, lo;
 10512                           ;ST7735_TFT.c: 506: if((x >= 128) || (y >= 160))
 10513  00239A  0E80               	movlw	128
 10514  00239C  6023               	cpfslt	fillRectangle@x,c
 10515  00239E  D069               	goto	l1202
 10516  0023A0  0E9F               	movlw	159
 10517  0023A2  6418               	cpfsgt	fillRectangle@y,c
 10518  0023A4  D001               	goto	l8169
 10519                           
 10520                           ;ST7735_TFT.c: 507: return;
 10521  0023A6  D065               	goto	l1202
 10522  0023A8                     l8169:
 10523                           
 10524                           ;ST7735_TFT.c: 508: if((x + w - 1) >= 128)
 10525  0023A8  0EFF               	movlw	255
 10526  0023AA  6E1D               	movwf	??_fillRectangle& (0+255),c
 10527  0023AC  0EFF               	movlw	255
 10528  0023AE  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
 10529  0023B0  5019               	movf	fillRectangle@w,w,c
 10530  0023B2  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
 10531  0023B6  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
 10532  0023B8  261F               	addwf	??_fillRectangle+2,f,c
 10533  0023BA  0E00               	movlw	0
 10534  0023BC  2220               	addwfc	??_fillRectangle+3,f,c
 10535  0023BE  501D               	movf	??_fillRectangle,w,c
 10536  0023C0  261F               	addwf	??_fillRectangle+2,f,c
 10537  0023C2  501E               	movf	??_fillRectangle+1,w,c
 10538  0023C4  2220               	addwfc	??_fillRectangle+3,f,c
 10539  0023C6  BE20               	btfsc	??_fillRectangle+3,7,c
 10540  0023C8  D00A               	goto	l1203
 10541  0023CA  5020               	movf	??_fillRectangle+3,w,c
 10542  0023CC  E104               	bnz	u5800
 10543  0023CE  0E80               	movlw	128
 10544  0023D0  5C1F               	subwf	??_fillRectangle+2,w,c
 10545  0023D2  A0D8               	btfss	status,0,c
 10546  0023D4  D004               	goto	l1203
 10547  0023D6                     u5800:
 10548                           
 10549                           ;ST7735_TFT.c: 509: w = 128 - x;
 10550  0023D6  5023               	movf	fillRectangle@x,w,c
 10551  0023D8  0800               	sublw	0
 10552  0023DA  0F80               	addlw	128
 10553  0023DC  6E19               	movwf	fillRectangle@w,c
 10554  0023DE                     l1203:
 10555                           
 10556                           ;ST7735_TFT.c: 510: if((y + h - 1) >= 160)
 10557  0023DE  0EFF               	movlw	255
 10558  0023E0  6E1D               	movwf	??_fillRectangle& (0+255),c
 10559  0023E2  0EFF               	movlw	255
 10560  0023E4  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
 10561  0023E6  501A               	movf	fillRectangle@h,w,c
 10562  0023E8  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
 10563  0023EC  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
 10564  0023EE  261F               	addwf	??_fillRectangle+2,f,c
 10565  0023F0  0E00               	movlw	0
 10566  0023F2  2220               	addwfc	??_fillRectangle+3,f,c
 10567  0023F4  501D               	movf	??_fillRectangle,w,c
 10568  0023F6  261F               	addwf	??_fillRectangle+2,f,c
 10569  0023F8  501E               	movf	??_fillRectangle+1,w,c
 10570  0023FA  2220               	addwfc	??_fillRectangle+3,f,c
 10571  0023FC  BE20               	btfsc	??_fillRectangle+3,7,c
 10572  0023FE  D00B               	goto	l8175
 10573  002400  5020               	movf	??_fillRectangle+3,w,c
 10574  002402  E104               	bnz	u5810
 10575  002404  0EA0               	movlw	160
 10576  002406  5C1F               	subwf	??_fillRectangle+2,w,c
 10577  002408  A0D8               	btfss	status,0,c
 10578  00240A  D005               	goto	l8175
 10579  00240C                     u5810:
 10580                           
 10581                           ;ST7735_TFT.c: 511: h = 160 - y;
 10582  00240C  5018               	movf	fillRectangle@y,w,c
 10583  00240E  0800               	sublw	0
 10584  002410  0FA0               	addlw	160
 10585  002412  6E1A               	movwf	fillRectangle@h,c
 10586  002414  D000               	goto	l8175
 10587  002416                     l8175:
 10588                           
 10589                           ;ST7735_TFT.c: 512: setAddrWindow(x, y, x+w-1, y+h-1);
 10590  002416  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
 10591  00241A  5023               	movf	fillRectangle@x,w,c
 10592  00241C  2419               	addwf	fillRectangle@w,w,c
 10593  00241E  6E1D               	movwf	??_fillRectangle& (0+255),c
 10594  002420  041D               	decf	??_fillRectangle,w,c
 10595  002422  6E15               	movwf	setAddrWindow@x1,c
 10596  002424  5018               	movf	fillRectangle@y,w,c
 10597  002426  241A               	addwf	fillRectangle@h,w,c
 10598  002428  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
 10599  00242A  041E               	decf	??_fillRectangle+1,w,c
 10600  00242C  6E16               	movwf	setAddrWindow@y1,c
 10601  00242E  5023               	movf	fillRectangle@x,w,c
 10602  002430  EC23  F01B         	call	_setAddrWindow
 10603                           
 10604                           ;ST7735_TFT.c: 513: hi = color >> 8; lo = color;
 10605  002434  501C               	movf	fillRectangle@color+1,w,c
 10606  002436  6E21               	movwf	fillRectangle@hi,c
 10607  002438  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
 10608                           
 10609                           ;ST7735_TFT.c: 514: PORTBbits.RB4 = 1;
 10610  00243C  8881               	bsf	3969,4,c	;volatile
 10611                           
 10612                           ;ST7735_TFT.c: 515: PORTBbits.RB5 = 0;
 10613  00243E  9A81               	bcf	3969,5,c	;volatile
 10614                           
 10615                           ;ST7735_TFT.c: 517: for(y=h; y>0; y--) {
 10616  002440  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
 10617  002444                     l8187:
 10618  002444  5018               	movf	fillRectangle@y,w,c
 10619  002446  B4D8               	btfsc	status,2,c
 10620  002448  D013               	goto	l1206
 10621  00244A  D001               	goto	l1205
 10622  00244C  D011               	goto	l1206
 10623  00244E                     l1205:
 10624                           
 10625                           ;ST7735_TFT.c: 518: for(x = w; x > 0; x--) {
 10626  00244E  C019  F023         	movff	fillRectangle@w,fillRectangle@x
 10627  002452                     l8191:
 10628  002452  5023               	movf	fillRectangle@x,w,c
 10629  002454  B4D8               	btfsc	status,2,c
 10630  002456  D00A               	goto	l8201
 10631  002458  D001               	goto	l8195
 10632  00245A  D008               	goto	l8201
 10633  00245C                     l8195:
 10634                           
 10635                           ;ST7735_TFT.c: 519: spiwrite(hi);
 10636  00245C  5021               	movf	fillRectangle@hi,w,c
 10637  00245E  EC63  F01E         	call	_spiwrite
 10638                           
 10639                           ;ST7735_TFT.c: 520: spiwrite(lo);
 10640  002462  5022               	movf	fillRectangle@lo,w,c
 10641  002464  EC63  F01E         	call	_spiwrite
 10642  002468  0623               	decf	fillRectangle@x,f,c
 10643  00246A  D7F3               	goto	l8191
 10644  00246C                     l8201:
 10645  00246C  0618               	decf	fillRectangle@y,f,c
 10646  00246E  D7EA               	goto	l8187
 10647  002470                     l1206:
 10648                           
 10649                           ;ST7735_TFT.c: 521: }
 10650                           ;ST7735_TFT.c: 522: }
 10651                           ;ST7735_TFT.c: 523: PORTBbits.RB5 = 1;
 10652  002470  8A81               	bsf	3969,5,c	;volatile
 10653  002472                     l1202:
 10654  002472  0012               	return		;funcret
 10655  002474                     __end_of_fillRectangle:
 10656                           	opt stack 0
 10657                           tblptru	equ	0xFF8
 10658                           tblptrh	equ	0xFF7
 10659                           tblptrl	equ	0xFF6
 10660                           tablat	equ	0xFF5
 10661                           prodh	equ	0xFF4
 10662                           prodl	equ	0xFF3
 10663                           intcon	equ	0xFF2
 10664                           intcon2	equ	0xFF1
 10665                           postinc0	equ	0xFEE
 10666                           wreg	equ	0xFE8
 10667                           postdec1	equ	0xFE5
 10668                           fsr1l	equ	0xFE1
 10669                           indf2	equ	0xFDF
 10670                           postinc2	equ	0xFDE
 10671                           fsr2h	equ	0xFDA
 10672                           fsr2l	equ	0xFD9
 10673                           status	equ	0xFD8
 10674                           
 10675 ;; *************** function _drawCircle *****************
 10676 ;; Defined at:
 10677 ;;		line 528 in file "ST7735_TFT.c"
 10678 ;; Parameters:    Size  Location     Type
 10679 ;;  x0              2   27[COMRAM] int 
 10680 ;;  y0              2   29[COMRAM] int 
 10681 ;;  r               2   31[COMRAM] int 
 10682 ;;  color           2   33[COMRAM] unsigned int 
 10683 ;; Auto vars:     Size  Location     Type
 10684 ;;  y               2   45[COMRAM] int 
 10685 ;;  x               2   43[COMRAM] int 
 10686 ;;  f               2   41[COMRAM] int 
 10687 ;;  ddF_y           2   39[COMRAM] int 
 10688 ;;  ddF_x           2   37[COMRAM] int 
 10689 ;; Return value:  Size  Location     Type
 10690 ;;		None               void
 10691 ;; Registers used:
 10692 ;;		wreg, status,2, status,0, cstack
 10693 ;; Tracked objects:
 10694 ;;		On entry : 0/0
 10695 ;;		On exit  : 0/0
 10696 ;;		Unchanged: 0/0
 10697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10698 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10699 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10700 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10701 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10702 ;;Total ram usage:       20 bytes
 10703 ;; Hardware stack levels used:    1
 10704 ;; Hardware stack levels required when called:    7
 10705 ;; This function calls:
 10706 ;;		_drawPixel
 10707 ;; This function is called by:
 10708 ;;		_Initialize_Screen
 10709 ;; This function uses a non-reentrant model
 10710 ;;
 10711                           
 10712                           	psect	text53
 10713  001290                     __ptext53:
 10714                           	opt stack 0
 10715  001290                     _drawCircle:
 10716                           	opt stack 22
 10717                           
 10718                           ;ST7735_TFT.c: 530: signed int f, ddF_x, ddF_y, x, y;
 10719                           ;ST7735_TFT.c: 531: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
 10720                           
 10721                           ;incstack = 0
 10722  001290  C020  F024         	movff	drawCircle@r,??_drawCircle
 10723  001294  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
 10724  001298  1E24               	comf	??_drawCircle,f,c
 10725  00129A  1E25               	comf	??_drawCircle+1,f,c
 10726  00129C  4A24               	infsnz	??_drawCircle,f,c
 10727  00129E  2A25               	incf	??_drawCircle+1,f,c
 10728  0012A0  0E01               	movlw	1
 10729  0012A2  2424               	addwf	??_drawCircle,w,c
 10730  0012A4  6E2A               	movwf	drawCircle@f,c
 10731  0012A6  0E00               	movlw	0
 10732  0012A8  2025               	addwfc	??_drawCircle+1,w,c
 10733  0012AA  6E2B               	movwf	drawCircle@f+1,c
 10734  0012AC  0E00               	movlw	0
 10735  0012AE  6E27               	movwf	drawCircle@ddF_x+1,c
 10736  0012B0  0E01               	movlw	1
 10737  0012B2  6E26               	movwf	drawCircle@ddF_x,c
 10738  0012B4  C020  F024         	movff	drawCircle@r,??_drawCircle
 10739  0012B8  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
 10740  0012BC  90D8               	bcf	status,0,c
 10741  0012BE  3624               	rlcf	??_drawCircle,f,c
 10742  0012C0  3625               	rlcf	??_drawCircle+1,f,c
 10743  0012C2  1E24               	comf	??_drawCircle,f,c
 10744  0012C4  1E25               	comf	??_drawCircle+1,f,c
 10745  0012C6  4A24               	infsnz	??_drawCircle,f,c
 10746  0012C8  2A25               	incf	??_drawCircle+1,f,c
 10747  0012CA  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
 10748  0012CE  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
 10749  0012D2  0E00               	movlw	0
 10750  0012D4  6E2D               	movwf	drawCircle@x+1,c
 10751  0012D6  0E00               	movlw	0
 10752  0012D8  6E2C               	movwf	drawCircle@x,c
 10753  0012DA  C020  F02E         	movff	drawCircle@r,drawCircle@y
 10754  0012DE  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
 10755                           
 10756                           ;ST7735_TFT.c: 532: drawPixel(x0 , y0 + r, color);
 10757  0012E2  501E               	movf	drawCircle@y0,w,c
 10758  0012E4  2420               	addwf	drawCircle@r,w,c
 10759  0012E6  6E18               	movwf	drawPixel@y,c
 10760  0012E8  C022  F019         	movff	drawCircle@color,drawPixel@color
 10761  0012EC  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10762  0012F0  501C               	movf	drawCircle@x0,w,c
 10763  0012F2  ECE5  F01C         	call	_drawPixel
 10764                           
 10765                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 - r, color);
 10766  0012F6  5020               	movf	drawCircle@r,w,c
 10767  0012F8  0800               	sublw	0
 10768  0012FA  241E               	addwf	drawCircle@y0,w,c
 10769  0012FC  6E18               	movwf	drawPixel@y,c
 10770  0012FE  C022  F019         	movff	drawCircle@color,drawPixel@color
 10771  001302  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10772  001306  501C               	movf	drawCircle@x0,w,c
 10773  001308  ECE5  F01C         	call	_drawPixel
 10774                           
 10775                           ;ST7735_TFT.c: 534: drawPixel(x0+r, y0 , color);
 10776  00130C  C01E  F018         	movff	drawCircle@y0,drawPixel@y
 10777  001310  C022  F019         	movff	drawCircle@color,drawPixel@color
 10778  001314  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10779  001318  501C               	movf	drawCircle@x0,w,c
 10780  00131A  2420               	addwf	drawCircle@r,w,c
 10781  00131C  ECE5  F01C         	call	_drawPixel
 10782                           
 10783                           ;ST7735_TFT.c: 535: drawPixel(x0-r, y0 , color);
 10784  001320  C01E  F018         	movff	drawCircle@y0,drawPixel@y
 10785  001324  C022  F019         	movff	drawCircle@color,drawPixel@color
 10786  001328  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10787  00132C  5020               	movf	drawCircle@r,w,c
 10788  00132E  0800               	sublw	0
 10789  001330  241C               	addwf	drawCircle@x0,w,c
 10790  001332  ECE5  F01C         	call	_drawPixel
 10791                           
 10792                           ;ST7735_TFT.c: 536: while (x < y) {
 10793  001336  D078               	goto	l8621
 10794  001338                     l8593:
 10795                           
 10796                           ;ST7735_TFT.c: 537: if (f >= 0) {
 10797  001338  BE2B               	btfsc	drawCircle@f+1,7,c
 10798  00133A  D00B               	goto	l1213
 10799                           
 10800                           ;ST7735_TFT.c: 538: y--;
 10801  00133C  062E               	decf	drawCircle@y,f,c
 10802  00133E  A0D8               	btfss	status,0,c
 10803  001340  062F               	decf	drawCircle@y+1,f,c
 10804                           
 10805                           ;ST7735_TFT.c: 539: ddF_y += 2;
 10806  001342  0E02               	movlw	2
 10807  001344  2628               	addwf	drawCircle@ddF_y,f,c
 10808  001346  0E00               	movlw	0
 10809  001348  2229               	addwfc	drawCircle@ddF_y+1,f,c
 10810                           
 10811                           ;ST7735_TFT.c: 540: f += ddF_y;
 10812  00134A  5028               	movf	drawCircle@ddF_y,w,c
 10813  00134C  262A               	addwf	drawCircle@f,f,c
 10814  00134E  5029               	movf	drawCircle@ddF_y+1,w,c
 10815  001350  222B               	addwfc	drawCircle@f+1,f,c
 10816  001352                     l1213:
 10817                           
 10818                           ;ST7735_TFT.c: 541: }
 10819                           ;ST7735_TFT.c: 542: x++;
 10820  001352  4A2C               	infsnz	drawCircle@x,f,c
 10821  001354  2A2D               	incf	drawCircle@x+1,f,c
 10822                           
 10823                           ;ST7735_TFT.c: 543: ddF_x += 2;
 10824  001356  0E02               	movlw	2
 10825  001358  2626               	addwf	drawCircle@ddF_x,f,c
 10826  00135A  0E00               	movlw	0
 10827  00135C  2227               	addwfc	drawCircle@ddF_x+1,f,c
 10828                           
 10829                           ;ST7735_TFT.c: 544: f += ddF_x;
 10830  00135E  5026               	movf	drawCircle@ddF_x,w,c
 10831  001360  262A               	addwf	drawCircle@f,f,c
 10832  001362  5027               	movf	drawCircle@ddF_x+1,w,c
 10833  001364  222B               	addwfc	drawCircle@f+1,f,c
 10834                           
 10835                           ;ST7735_TFT.c: 545: drawPixel(x0 + x, y0 + y, color);
 10836  001366  501E               	movf	drawCircle@y0,w,c
 10837  001368  242E               	addwf	drawCircle@y,w,c
 10838  00136A  6E18               	movwf	drawPixel@y,c
 10839  00136C  C022  F019         	movff	drawCircle@color,drawPixel@color
 10840  001370  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10841  001374  501C               	movf	drawCircle@x0,w,c
 10842  001376  242C               	addwf	drawCircle@x,w,c
 10843  001378  ECE5  F01C         	call	_drawPixel
 10844                           
 10845                           ;ST7735_TFT.c: 546: drawPixel(x0 - x, y0 + y, color);
 10846  00137C  501E               	movf	drawCircle@y0,w,c
 10847  00137E  242E               	addwf	drawCircle@y,w,c
 10848  001380  6E18               	movwf	drawPixel@y,c
 10849  001382  C022  F019         	movff	drawCircle@color,drawPixel@color
 10850  001386  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10851  00138A  502C               	movf	drawCircle@x,w,c
 10852  00138C  0800               	sublw	0
 10853  00138E  241C               	addwf	drawCircle@x0,w,c
 10854  001390  ECE5  F01C         	call	_drawPixel
 10855                           
 10856                           ;ST7735_TFT.c: 547: drawPixel(x0 + x, y0 - y, color);
 10857  001394  502E               	movf	drawCircle@y,w,c
 10858  001396  0800               	sublw	0
 10859  001398  241E               	addwf	drawCircle@y0,w,c
 10860  00139A  6E18               	movwf	drawPixel@y,c
 10861  00139C  C022  F019         	movff	drawCircle@color,drawPixel@color
 10862  0013A0  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10863  0013A4  501C               	movf	drawCircle@x0,w,c
 10864  0013A6  242C               	addwf	drawCircle@x,w,c
 10865  0013A8  ECE5  F01C         	call	_drawPixel
 10866                           
 10867                           ;ST7735_TFT.c: 548: drawPixel(x0 - x, y0 - y, color);
 10868  0013AC  502E               	movf	drawCircle@y,w,c
 10869  0013AE  0800               	sublw	0
 10870  0013B0  241E               	addwf	drawCircle@y0,w,c
 10871  0013B2  6E18               	movwf	drawPixel@y,c
 10872  0013B4  C022  F019         	movff	drawCircle@color,drawPixel@color
 10873  0013B8  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10874  0013BC  502C               	movf	drawCircle@x,w,c
 10875  0013BE  0800               	sublw	0
 10876  0013C0  241C               	addwf	drawCircle@x0,w,c
 10877  0013C2  ECE5  F01C         	call	_drawPixel
 10878                           
 10879                           ;ST7735_TFT.c: 549: drawPixel(x0 + y, y0 + x, color);
 10880  0013C6  501E               	movf	drawCircle@y0,w,c
 10881  0013C8  242C               	addwf	drawCircle@x,w,c
 10882  0013CA  6E18               	movwf	drawPixel@y,c
 10883  0013CC  C022  F019         	movff	drawCircle@color,drawPixel@color
 10884  0013D0  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10885  0013D4  501C               	movf	drawCircle@x0,w,c
 10886  0013D6  242E               	addwf	drawCircle@y,w,c
 10887  0013D8  ECE5  F01C         	call	_drawPixel
 10888                           
 10889                           ;ST7735_TFT.c: 550: drawPixel(x0 - y, y0 + x, color);
 10890  0013DC  501E               	movf	drawCircle@y0,w,c
 10891  0013DE  242C               	addwf	drawCircle@x,w,c
 10892  0013E0  6E18               	movwf	drawPixel@y,c
 10893  0013E2  C022  F019         	movff	drawCircle@color,drawPixel@color
 10894  0013E6  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10895  0013EA  502E               	movf	drawCircle@y,w,c
 10896  0013EC  0800               	sublw	0
 10897  0013EE  241C               	addwf	drawCircle@x0,w,c
 10898  0013F0  ECE5  F01C         	call	_drawPixel
 10899                           
 10900                           ;ST7735_TFT.c: 551: drawPixel(x0 + y, y0 - x, color);
 10901  0013F4  502C               	movf	drawCircle@x,w,c
 10902  0013F6  0800               	sublw	0
 10903  0013F8  241E               	addwf	drawCircle@y0,w,c
 10904  0013FA  6E18               	movwf	drawPixel@y,c
 10905  0013FC  C022  F019         	movff	drawCircle@color,drawPixel@color
 10906  001400  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10907  001404  501C               	movf	drawCircle@x0,w,c
 10908  001406  242E               	addwf	drawCircle@y,w,c
 10909  001408  ECE5  F01C         	call	_drawPixel
 10910                           
 10911                           ;ST7735_TFT.c: 552: drawPixel(x0 - y, y0 - x, color);
 10912  00140C  502C               	movf	drawCircle@x,w,c
 10913  00140E  0800               	sublw	0
 10914  001410  241E               	addwf	drawCircle@y0,w,c
 10915  001412  6E18               	movwf	drawPixel@y,c
 10916  001414  C022  F019         	movff	drawCircle@color,drawPixel@color
 10917  001418  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
 10918  00141C  502E               	movf	drawCircle@y,w,c
 10919  00141E  0800               	sublw	0
 10920  001420  241C               	addwf	drawCircle@x0,w,c
 10921  001422  ECE5  F01C         	call	_drawPixel
 10922  001426  D000               	goto	l8621
 10923  001428                     l8621:
 10924  001428  502E               	movf	drawCircle@y,w,c
 10925  00142A  5C2C               	subwf	drawCircle@x,w,c
 10926  00142C  502D               	movf	drawCircle@x+1,w,c
 10927  00142E  0A80               	xorlw	128
 10928  001430  6E24               	movwf	??_drawCircle& (0+255),c
 10929  001432  502F               	movf	drawCircle@y+1,w,c
 10930  001434  0A80               	xorlw	128
 10931  001436  5824               	subwfb	??_drawCircle& (0+255),w,c
 10932  001438  A0D8               	btfss	status,0,c
 10933  00143A  D77E               	goto	l8593
 10934  00143C  0012               	return		;funcret
 10935  00143E                     __end_of_drawCircle:
 10936                           	opt stack 0
 10937                           tblptru	equ	0xFF8
 10938                           tblptrh	equ	0xFF7
 10939                           tblptrl	equ	0xFF6
 10940                           tablat	equ	0xFF5
 10941                           prodh	equ	0xFF4
 10942                           prodl	equ	0xFF3
 10943                           intcon	equ	0xFF2
 10944                           intcon2	equ	0xFF1
 10945                           postinc0	equ	0xFEE
 10946                           wreg	equ	0xFE8
 10947                           postdec1	equ	0xFE5
 10948                           fsr1l	equ	0xFE1
 10949                           indf2	equ	0xFDF
 10950                           postinc2	equ	0xFDE
 10951                           fsr2h	equ	0xFDA
 10952                           fsr2l	equ	0xFD9
 10953                           status	equ	0xFD8
 10954                           
 10955 ;; *************** function _TFT_GreenTab_Initialize *****************
 10956 ;; Defined at:
 10957 ;;		line 644 in file "ST7735_TFT.c"
 10958 ;; Parameters:    Size  Location     Type
 10959 ;;		None
 10960 ;; Auto vars:     Size  Location     Type
 10961 ;;		None
 10962 ;; Return value:  Size  Location     Type
 10963 ;;		None               void
 10964 ;; Registers used:
 10965 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10966 ;; Tracked objects:
 10967 ;;		On entry : 0/0
 10968 ;;		On exit  : 0/0
 10969 ;;		Unchanged: 0/0
 10970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10975 ;;Total ram usage:        0 bytes
 10976 ;; Hardware stack levels used:    1
 10977 ;; Hardware stack levels required when called:    6
 10978 ;; This function calls:
 10979 ;;		_Rcmd1
 10980 ;;		_Rcmd2red
 10981 ;;		_Rcmd3
 10982 ;;		_write_command
 10983 ;;		_write_data
 10984 ;; This function is called by:
 10985 ;;		_Initialize_Screen
 10986 ;; This function uses a non-reentrant model
 10987 ;;
 10988                           
 10989                           	psect	text54
 10990  003A24                     __ptext54:
 10991                           	opt stack 0
 10992  003A24                     _TFT_GreenTab_Initialize:
 10993                           	opt stack 23
 10994                           
 10995                           ;ST7735_TFT.c: 646: PORTBbits.RB5 = 1;
 10996                           
 10997                           ;incstack = 0
 10998  003A24  8A81               	bsf	3969,5,c	;volatile
 10999                           
 11000                           ;ST7735_TFT.c: 647: PORTBbits.RB4 = 0;
 11001  003A26  9881               	bcf	3969,4,c	;volatile
 11002                           
 11003                           ;ST7735_TFT.c: 649: SSPSTAT=0x80;
 11004  003A28  0E80               	movlw	128
 11005  003A2A  6EC7               	movwf	4039,c	;volatile
 11006                           
 11007                           ;ST7735_TFT.c: 650: SSPCON1=0x30;
 11008  003A2C  0E30               	movlw	48
 11009  003A2E  6EC6               	movwf	4038,c	;volatile
 11010                           
 11011                           ;ST7735_TFT.c: 653: Rcmd1();
 11012  003A30  EC62  F00C         	call	_Rcmd1	;wreg free
 11013                           
 11014                           ;ST7735_TFT.c: 654: Rcmd2red();
 11015  003A34  EC00  F01C         	call	_Rcmd2red	;wreg free
 11016                           
 11017                           ;ST7735_TFT.c: 655: Rcmd3();
 11018  003A38  ECF6  F00F         	call	_Rcmd3	;wreg free
 11019                           
 11020                           ;ST7735_TFT.c: 656: write_command(0x36);
 11021  003A3C  0E36               	movlw	54
 11022  003A3E  ECE6  F01E         	call	_write_command
 11023                           
 11024                           ;ST7735_TFT.c: 657: write_data(0xC0);
 11025  003A42  0EC0               	movlw	192
 11026  003A44  ECDE  F01E         	call	_write_data
 11027                           
 11028                           ;ST7735_TFT.c: 658: _tft_type = 1;
 11029  003A48  0E01               	movlw	1
 11030  003A4A  6E54               	movwf	__tft_type,c
 11031  003A4C  0012               	return		;funcret
 11032  003A4E                     __end_of_TFT_GreenTab_Initialize:
 11033                           	opt stack 0
 11034                           tblptru	equ	0xFF8
 11035                           tblptrh	equ	0xFF7
 11036                           tblptrl	equ	0xFF6
 11037                           tablat	equ	0xFF5
 11038                           prodh	equ	0xFF4
 11039                           prodl	equ	0xFF3
 11040                           intcon	equ	0xFF2
 11041                           intcon2	equ	0xFF1
 11042                           postinc0	equ	0xFEE
 11043                           wreg	equ	0xFE8
 11044                           postdec1	equ	0xFE5
 11045                           fsr1l	equ	0xFE1
 11046                           indf2	equ	0xFDF
 11047                           postinc2	equ	0xFDE
 11048                           fsr2h	equ	0xFDA
 11049                           fsr2l	equ	0xFD9
 11050                           status	equ	0xFD8
 11051                           
 11052 ;; *************** function _Rcmd3 *****************
 11053 ;; Defined at:
 11054 ;;		line 338 in file "ST7735_TFT.c"
 11055 ;; Parameters:    Size  Location     Type
 11056 ;;		None
 11057 ;; Auto vars:     Size  Location     Type
 11058 ;;		None
 11059 ;; Return value:  Size  Location     Type
 11060 ;;		None               void
 11061 ;; Registers used:
 11062 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11063 ;; Tracked objects:
 11064 ;;		On entry : 0/0
 11065 ;;		On exit  : 0/0
 11066 ;;		Unchanged: 0/0
 11067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11071 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11072 ;;Total ram usage:        0 bytes
 11073 ;; Hardware stack levels used:    1
 11074 ;; Hardware stack levels required when called:    5
 11075 ;; This function calls:
 11076 ;;		_delay_ms
 11077 ;;		_write_command
 11078 ;;		_write_data
 11079 ;; This function is called by:
 11080 ;;		_TFT_GreenTab_Initialize
 11081 ;;		_TFT_BlackTab_Initialize
 11082 ;; This function uses a non-reentrant model
 11083 ;;
 11084                           
 11085                           	psect	text55
 11086  001FEC                     __ptext55:
 11087                           	opt stack 0
 11088  001FEC                     _Rcmd3:
 11089                           	opt stack 23
 11090                           
 11091                           ;ST7735_TFT.c: 340: write_command(0xE0);
 11092                           
 11093                           ;incstack = 0
 11094  001FEC  0EE0               	movlw	224
 11095  001FEE  ECE6  F01E         	call	_write_command
 11096                           
 11097                           ;ST7735_TFT.c: 341: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
 11098  001FF2  0E02               	movlw	2
 11099  001FF4  ECDE  F01E         	call	_write_data
 11100  001FF8  0E1C               	movlw	28
 11101  001FFA  ECDE  F01E         	call	_write_data
 11102  001FFE  0E07               	movlw	7
 11103  002000  ECDE  F01E         	call	_write_data
 11104  002004  0E12               	movlw	18
 11105  002006  ECDE  F01E         	call	_write_data
 11106                           
 11107                           ;ST7735_TFT.c: 342: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
 11108  00200A  0E37               	movlw	55
 11109  00200C  ECDE  F01E         	call	_write_data
 11110  002010  0E32               	movlw	50
 11111  002012  ECDE  F01E         	call	_write_data
 11112  002016  0E29               	movlw	41
 11113  002018  ECDE  F01E         	call	_write_data
 11114  00201C  0E2D               	movlw	45
 11115  00201E  ECDE  F01E         	call	_write_data
 11116                           
 11117                           ;ST7735_TFT.c: 343: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
 11118  002022  0E29               	movlw	41
 11119  002024  ECDE  F01E         	call	_write_data
 11120  002028  0E25               	movlw	37
 11121  00202A  ECDE  F01E         	call	_write_data
 11122  00202E  0E2B               	movlw	43
 11123  002030  ECDE  F01E         	call	_write_data
 11124  002034  0E39               	movlw	57
 11125  002036  ECDE  F01E         	call	_write_data
 11126                           
 11127                           ;ST7735_TFT.c: 344: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
 11128  00203A  0E00               	movlw	0
 11129  00203C  ECDE  F01E         	call	_write_data
 11130  002040  0E01               	movlw	1
 11131  002042  ECDE  F01E         	call	_write_data
 11132  002046  0E03               	movlw	3
 11133  002048  ECDE  F01E         	call	_write_data
 11134  00204C  0E10               	movlw	16
 11135  00204E  ECDE  F01E         	call	_write_data
 11136                           
 11137                           ;ST7735_TFT.c: 345: write_command(0xE1);
 11138  002052  0EE1               	movlw	225
 11139  002054  ECE6  F01E         	call	_write_command
 11140                           
 11141                           ;ST7735_TFT.c: 346: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
 11142  002058  0E03               	movlw	3
 11143  00205A  ECDE  F01E         	call	_write_data
 11144  00205E  0E1D               	movlw	29
 11145  002060  ECDE  F01E         	call	_write_data
 11146  002064  0E07               	movlw	7
 11147  002066  ECDE  F01E         	call	_write_data
 11148  00206A  0E06               	movlw	6
 11149  00206C  ECDE  F01E         	call	_write_data
 11150                           
 11151                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
 11152  002070  0E2E               	movlw	46
 11153  002072  ECDE  F01E         	call	_write_data
 11154  002076  0E2C               	movlw	44
 11155  002078  ECDE  F01E         	call	_write_data
 11156  00207C  0E29               	movlw	41
 11157  00207E  ECDE  F01E         	call	_write_data
 11158  002082  0E2D               	movlw	45
 11159  002084  ECDE  F01E         	call	_write_data
 11160                           
 11161                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
 11162  002088  0E2E               	movlw	46
 11163  00208A  ECDE  F01E         	call	_write_data
 11164  00208E  0E2E               	movlw	46
 11165  002090  ECDE  F01E         	call	_write_data
 11166  002094  0E37               	movlw	55
 11167  002096  ECDE  F01E         	call	_write_data
 11168  00209A  0E3F               	movlw	63
 11169  00209C  ECDE  F01E         	call	_write_data
 11170                           
 11171                           ;ST7735_TFT.c: 349: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
 11172  0020A0  0E00               	movlw	0
 11173  0020A2  ECDE  F01E         	call	_write_data
 11174  0020A6  0E00               	movlw	0
 11175  0020A8  ECDE  F01E         	call	_write_data
 11176  0020AC  0E02               	movlw	2
 11177  0020AE  ECDE  F01E         	call	_write_data
 11178  0020B2  0E10               	movlw	16
 11179  0020B4  ECDE  F01E         	call	_write_data
 11180                           
 11181                           ;ST7735_TFT.c: 350: write_command(0x13);
 11182  0020B8  0E13               	movlw	19
 11183  0020BA  ECE6  F01E         	call	_write_command
 11184                           
 11185                           ;ST7735_TFT.c: 351: delay_ms(10);
 11186  0020BE  0E00               	movlw	0
 11187  0020C0  6E18               	movwf	delay_ms@ms+1,c
 11188  0020C2  0E0A               	movlw	10
 11189  0020C4  6E17               	movwf	delay_ms@ms,c
 11190  0020C6  EC84  F01A         	call	_delay_ms	;wreg free
 11191                           
 11192                           ;ST7735_TFT.c: 352: write_command(0x29);
 11193  0020CA  0E29               	movlw	41
 11194  0020CC  ECE6  F01E         	call	_write_command
 11195                           
 11196                           ;ST7735_TFT.c: 353: delay_ms(100);
 11197  0020D0  0E00               	movlw	0
 11198  0020D2  6E18               	movwf	delay_ms@ms+1,c
 11199  0020D4  0E64               	movlw	100
 11200  0020D6  6E17               	movwf	delay_ms@ms,c
 11201  0020D8  EC84  F01A         	call	_delay_ms	;wreg free
 11202  0020DC  0012               	return		;funcret
 11203  0020DE                     __end_of_Rcmd3:
 11204                           	opt stack 0
 11205                           tblptru	equ	0xFF8
 11206                           tblptrh	equ	0xFF7
 11207                           tblptrl	equ	0xFF6
 11208                           tablat	equ	0xFF5
 11209                           prodh	equ	0xFF4
 11210                           prodl	equ	0xFF3
 11211                           intcon	equ	0xFF2
 11212                           intcon2	equ	0xFF1
 11213                           postinc0	equ	0xFEE
 11214                           wreg	equ	0xFE8
 11215                           postdec1	equ	0xFE5
 11216                           fsr1l	equ	0xFE1
 11217                           indf2	equ	0xFDF
 11218                           postinc2	equ	0xFDE
 11219                           fsr2h	equ	0xFDA
 11220                           fsr2l	equ	0xFD9
 11221                           status	equ	0xFD8
 11222                           
 11223 ;; *************** function _Rcmd2red *****************
 11224 ;; Defined at:
 11225 ;;		line 328 in file "ST7735_TFT.c"
 11226 ;; Parameters:    Size  Location     Type
 11227 ;;		None
 11228 ;; Auto vars:     Size  Location     Type
 11229 ;;		None
 11230 ;; Return value:  Size  Location     Type
 11231 ;;		None               void
 11232 ;; Registers used:
 11233 ;;		wreg, status,2, cstack
 11234 ;; Tracked objects:
 11235 ;;		On entry : 0/0
 11236 ;;		On exit  : 0/0
 11237 ;;		Unchanged: 0/0
 11238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11242 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11243 ;;Total ram usage:        0 bytes
 11244 ;; Hardware stack levels used:    1
 11245 ;; Hardware stack levels required when called:    5
 11246 ;; This function calls:
 11247 ;;		_write_command
 11248 ;;		_write_data
 11249 ;; This function is called by:
 11250 ;;		_TFT_GreenTab_Initialize
 11251 ;; This function uses a non-reentrant model
 11252 ;;
 11253                           
 11254                           	psect	text56
 11255  003800                     __ptext56:
 11256                           	opt stack 0
 11257  003800                     _Rcmd2red:
 11258                           	opt stack 23
 11259                           
 11260                           ;ST7735_TFT.c: 330: write_command(0x2A);
 11261                           
 11262                           ;incstack = 0
 11263  003800  0E2A               	movlw	42
 11264  003802  ECE6  F01E         	call	_write_command
 11265                           
 11266                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x00);
 11267  003806  0E00               	movlw	0
 11268  003808  ECDE  F01E         	call	_write_data
 11269  00380C  0E00               	movlw	0
 11270  00380E  ECDE  F01E         	call	_write_data
 11271                           
 11272                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x7F);
 11273  003812  0E00               	movlw	0
 11274  003814  ECDE  F01E         	call	_write_data
 11275  003818  0E7F               	movlw	127
 11276  00381A  ECDE  F01E         	call	_write_data
 11277                           
 11278                           ;ST7735_TFT.c: 333: write_command(0x2B);
 11279  00381E  0E2B               	movlw	43
 11280  003820  ECE6  F01E         	call	_write_command
 11281                           
 11282                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x00);
 11283  003824  0E00               	movlw	0
 11284  003826  ECDE  F01E         	call	_write_data
 11285  00382A  0E00               	movlw	0
 11286  00382C  ECDE  F01E         	call	_write_data
 11287                           
 11288                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x9F);
 11289  003830  0E00               	movlw	0
 11290  003832  ECDE  F01E         	call	_write_data
 11291  003836  0E9F               	movlw	159
 11292  003838  ECDE  F01E         	call	_write_data
 11293  00383C  0012               	return		;funcret
 11294  00383E                     __end_of_Rcmd2red:
 11295                           	opt stack 0
 11296                           tblptru	equ	0xFF8
 11297                           tblptrh	equ	0xFF7
 11298                           tblptrl	equ	0xFF6
 11299                           tablat	equ	0xFF5
 11300                           prodh	equ	0xFF4
 11301                           prodl	equ	0xFF3
 11302                           intcon	equ	0xFF2
 11303                           intcon2	equ	0xFF1
 11304                           postinc0	equ	0xFEE
 11305                           wreg	equ	0xFE8
 11306                           postdec1	equ	0xFE5
 11307                           fsr1l	equ	0xFE1
 11308                           indf2	equ	0xFDF
 11309                           postinc2	equ	0xFDE
 11310                           fsr2h	equ	0xFDA
 11311                           fsr2l	equ	0xFD9
 11312                           status	equ	0xFD8
 11313                           
 11314 ;; *************** function _Rcmd1 *****************
 11315 ;; Defined at:
 11316 ;;		line 281 in file "ST7735_TFT.c"
 11317 ;; Parameters:    Size  Location     Type
 11318 ;;		None
 11319 ;; Auto vars:     Size  Location     Type
 11320 ;;		None
 11321 ;; Return value:  Size  Location     Type
 11322 ;;		None               void
 11323 ;; Registers used:
 11324 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11325 ;; Tracked objects:
 11326 ;;		On entry : 0/0
 11327 ;;		On exit  : 0/0
 11328 ;;		Unchanged: 0/0
 11329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11333 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11334 ;;Total ram usage:        0 bytes
 11335 ;; Hardware stack levels used:    1
 11336 ;; Hardware stack levels required when called:    5
 11337 ;; This function calls:
 11338 ;;		_delay_ms
 11339 ;;		_write_command
 11340 ;;		_write_data
 11341 ;; This function is called by:
 11342 ;;		_TFT_GreenTab_Initialize
 11343 ;;		_TFT_BlackTab_Initialize
 11344 ;; This function uses a non-reentrant model
 11345 ;;
 11346                           
 11347                           	psect	text57
 11348  0018C4                     __ptext57:
 11349                           	opt stack 0
 11350  0018C4                     _Rcmd1:
 11351                           	opt stack 23
 11352                           
 11353                           ;ST7735_TFT.c: 283: write_command(0x01);
 11354                           
 11355                           ;incstack = 0
 11356  0018C4  0E01               	movlw	1
 11357  0018C6  ECE6  F01E         	call	_write_command
 11358                           
 11359                           ;ST7735_TFT.c: 284: delay_ms(150);
 11360  0018CA  0E00               	movlw	0
 11361  0018CC  6E18               	movwf	delay_ms@ms+1,c
 11362  0018CE  0E96               	movlw	150
 11363  0018D0  6E17               	movwf	delay_ms@ms,c
 11364  0018D2  EC84  F01A         	call	_delay_ms	;wreg free
 11365                           
 11366                           ;ST7735_TFT.c: 285: write_command(0x11);
 11367  0018D6  0E11               	movlw	17
 11368  0018D8  ECE6  F01E         	call	_write_command
 11369                           
 11370                           ;ST7735_TFT.c: 286: delay_ms(500);
 11371  0018DC  0E01               	movlw	1
 11372  0018DE  6E18               	movwf	delay_ms@ms+1,c
 11373  0018E0  0EF4               	movlw	244
 11374  0018E2  6E17               	movwf	delay_ms@ms,c
 11375  0018E4  EC84  F01A         	call	_delay_ms	;wreg free
 11376                           
 11377                           ;ST7735_TFT.c: 287: write_command(0xB1);
 11378  0018E8  0EB1               	movlw	177
 11379  0018EA  ECE6  F01E         	call	_write_command
 11380                           
 11381                           ;ST7735_TFT.c: 288: write_data(0x01);
 11382  0018EE  0E01               	movlw	1
 11383  0018F0  ECDE  F01E         	call	_write_data
 11384                           
 11385                           ;ST7735_TFT.c: 289: write_data(0x2C);
 11386  0018F4  0E2C               	movlw	44
 11387  0018F6  ECDE  F01E         	call	_write_data
 11388                           
 11389                           ;ST7735_TFT.c: 290: write_data(0x2D);
 11390  0018FA  0E2D               	movlw	45
 11391  0018FC  ECDE  F01E         	call	_write_data
 11392                           
 11393                           ;ST7735_TFT.c: 291: write_command(0xB2);
 11394  001900  0EB2               	movlw	178
 11395  001902  ECE6  F01E         	call	_write_command
 11396                           
 11397                           ;ST7735_TFT.c: 292: write_data(0x01);
 11398  001906  0E01               	movlw	1
 11399  001908  ECDE  F01E         	call	_write_data
 11400                           
 11401                           ;ST7735_TFT.c: 293: write_data(0x2C);
 11402  00190C  0E2C               	movlw	44
 11403  00190E  ECDE  F01E         	call	_write_data
 11404                           
 11405                           ;ST7735_TFT.c: 294: write_data(0x2D);
 11406  001912  0E2D               	movlw	45
 11407  001914  ECDE  F01E         	call	_write_data
 11408                           
 11409                           ;ST7735_TFT.c: 295: write_command(0xB3);
 11410  001918  0EB3               	movlw	179
 11411  00191A  ECE6  F01E         	call	_write_command
 11412                           
 11413                           ;ST7735_TFT.c: 296: write_data(0x01);
 11414  00191E  0E01               	movlw	1
 11415  001920  ECDE  F01E         	call	_write_data
 11416                           
 11417                           ;ST7735_TFT.c: 297: write_data(0x2C);
 11418  001924  0E2C               	movlw	44
 11419  001926  ECDE  F01E         	call	_write_data
 11420                           
 11421                           ;ST7735_TFT.c: 298: write_data(0x2D);
 11422  00192A  0E2D               	movlw	45
 11423  00192C  ECDE  F01E         	call	_write_data
 11424                           
 11425                           ;ST7735_TFT.c: 299: write_data(0x01);
 11426  001930  0E01               	movlw	1
 11427  001932  ECDE  F01E         	call	_write_data
 11428                           
 11429                           ;ST7735_TFT.c: 300: write_data(0x2C);
 11430  001936  0E2C               	movlw	44
 11431  001938  ECDE  F01E         	call	_write_data
 11432                           
 11433                           ;ST7735_TFT.c: 301: write_data(0x2D);
 11434  00193C  0E2D               	movlw	45
 11435  00193E  ECDE  F01E         	call	_write_data
 11436                           
 11437                           ;ST7735_TFT.c: 302: write_command(0xB4);
 11438  001942  0EB4               	movlw	180
 11439  001944  ECE6  F01E         	call	_write_command
 11440                           
 11441                           ;ST7735_TFT.c: 303: write_data(0x07);
 11442  001948  0E07               	movlw	7
 11443  00194A  ECDE  F01E         	call	_write_data
 11444                           
 11445                           ;ST7735_TFT.c: 304: write_command(0xC0);
 11446  00194E  0EC0               	movlw	192
 11447  001950  ECE6  F01E         	call	_write_command
 11448                           
 11449                           ;ST7735_TFT.c: 305: write_data(0xA2);
 11450  001954  0EA2               	movlw	162
 11451  001956  ECDE  F01E         	call	_write_data
 11452                           
 11453                           ;ST7735_TFT.c: 306: write_data(0x02);
 11454  00195A  0E02               	movlw	2
 11455  00195C  ECDE  F01E         	call	_write_data
 11456                           
 11457                           ;ST7735_TFT.c: 307: write_data(0x84);
 11458  001960  0E84               	movlw	132
 11459  001962  ECDE  F01E         	call	_write_data
 11460                           
 11461                           ;ST7735_TFT.c: 308: write_command(0xC1);
 11462  001966  0EC1               	movlw	193
 11463  001968  ECE6  F01E         	call	_write_command
 11464                           
 11465                           ;ST7735_TFT.c: 309: write_data(0xC5);
 11466  00196C  0EC5               	movlw	197
 11467  00196E  ECDE  F01E         	call	_write_data
 11468                           
 11469                           ;ST7735_TFT.c: 310: write_command(0xC2);
 11470  001972  0EC2               	movlw	194
 11471  001974  ECE6  F01E         	call	_write_command
 11472                           
 11473                           ;ST7735_TFT.c: 311: write_data(0x0A);
 11474  001978  0E0A               	movlw	10
 11475  00197A  ECDE  F01E         	call	_write_data
 11476                           
 11477                           ;ST7735_TFT.c: 312: write_data(0x00);
 11478  00197E  0E00               	movlw	0
 11479  001980  ECDE  F01E         	call	_write_data
 11480                           
 11481                           ;ST7735_TFT.c: 313: write_command(0xC3);
 11482  001984  0EC3               	movlw	195
 11483  001986  ECE6  F01E         	call	_write_command
 11484                           
 11485                           ;ST7735_TFT.c: 314: write_data(0x8A);
 11486  00198A  0E8A               	movlw	138
 11487  00198C  ECDE  F01E         	call	_write_data
 11488                           
 11489                           ;ST7735_TFT.c: 315: write_data(0x2A);
 11490  001990  0E2A               	movlw	42
 11491  001992  ECDE  F01E         	call	_write_data
 11492                           
 11493                           ;ST7735_TFT.c: 316: write_command(0xC4);
 11494  001996  0EC4               	movlw	196
 11495  001998  ECE6  F01E         	call	_write_command
 11496                           
 11497                           ;ST7735_TFT.c: 317: write_data(0x8A);
 11498  00199C  0E8A               	movlw	138
 11499  00199E  ECDE  F01E         	call	_write_data
 11500                           
 11501                           ;ST7735_TFT.c: 318: write_data(0xEE);
 11502  0019A2  0EEE               	movlw	238
 11503  0019A4  ECDE  F01E         	call	_write_data
 11504                           
 11505                           ;ST7735_TFT.c: 319: write_command(0xC5);
 11506  0019A8  0EC5               	movlw	197
 11507  0019AA  ECE6  F01E         	call	_write_command
 11508                           
 11509                           ;ST7735_TFT.c: 320: write_data(0x0E);
 11510  0019AE  0E0E               	movlw	14
 11511  0019B0  ECDE  F01E         	call	_write_data
 11512                           
 11513                           ;ST7735_TFT.c: 321: write_command(0x20);
 11514  0019B4  0E20               	movlw	32
 11515  0019B6  ECE6  F01E         	call	_write_command
 11516                           
 11517                           ;ST7735_TFT.c: 322: write_command(0x36);
 11518  0019BA  0E36               	movlw	54
 11519  0019BC  ECE6  F01E         	call	_write_command
 11520                           
 11521                           ;ST7735_TFT.c: 323: write_data(0xC8);
 11522  0019C0  0EC8               	movlw	200
 11523  0019C2  ECDE  F01E         	call	_write_data
 11524                           
 11525                           ;ST7735_TFT.c: 324: write_command(0x3A);
 11526  0019C6  0E3A               	movlw	58
 11527  0019C8  ECE6  F01E         	call	_write_command
 11528                           
 11529                           ;ST7735_TFT.c: 325: write_data(0x05);
 11530  0019CC  0E05               	movlw	5
 11531  0019CE  ECDE  F01E         	call	_write_data
 11532  0019D2  0012               	return		;funcret
 11533  0019D4                     __end_of_Rcmd1:
 11534                           	opt stack 0
 11535                           tblptru	equ	0xFF8
 11536                           tblptrh	equ	0xFF7
 11537                           tblptrl	equ	0xFF6
 11538                           tablat	equ	0xFF5
 11539                           prodh	equ	0xFF4
 11540                           prodl	equ	0xFF3
 11541                           intcon	equ	0xFF2
 11542                           intcon2	equ	0xFF1
 11543                           postinc0	equ	0xFEE
 11544                           wreg	equ	0xFE8
 11545                           postdec1	equ	0xFE5
 11546                           fsr1l	equ	0xFE1
 11547                           indf2	equ	0xFDF
 11548                           postinc2	equ	0xFDE
 11549                           fsr2h	equ	0xFDA
 11550                           fsr2l	equ	0xFD9
 11551                           status	equ	0xFD8
 11552                           
 11553 ;; *************** function _LCD_Reset *****************
 11554 ;; Defined at:
 11555 ;;		line 217 in file "ST7735_TFT.c"
 11556 ;; Parameters:    Size  Location     Type
 11557 ;;		None
 11558 ;; Auto vars:     Size  Location     Type
 11559 ;;		None
 11560 ;; Return value:  Size  Location     Type
 11561 ;;		None               void
 11562 ;; Registers used:
 11563 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11564 ;; Tracked objects:
 11565 ;;		On entry : 0/0
 11566 ;;		On exit  : 0/0
 11567 ;;		Unchanged: 0/0
 11568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11573 ;;Total ram usage:        0 bytes
 11574 ;; Hardware stack levels used:    1
 11575 ;; Hardware stack levels required when called:    5
 11576 ;; This function calls:
 11577 ;;		_delay_ms
 11578 ;; This function is called by:
 11579 ;;		_Initialize_Screen
 11580 ;; This function uses a non-reentrant model
 11581 ;;
 11582                           
 11583                           	psect	text58
 11584  003D00                     __ptext58:
 11585                           	opt stack 0
 11586  003D00                     _LCD_Reset:
 11587                           	opt stack 24
 11588                           
 11589                           ;ST7735_TFT.c: 219: PORTCbits.RC4 = 0;
 11590                           
 11591                           ;incstack = 0
 11592  003D00  9882               	bcf	3970,4,c	;volatile
 11593                           
 11594                           ;ST7735_TFT.c: 220: delay_ms(100);
 11595  003D02  0E00               	movlw	0
 11596  003D04  6E18               	movwf	delay_ms@ms+1,c
 11597  003D06  0E64               	movlw	100
 11598  003D08  6E17               	movwf	delay_ms@ms,c
 11599  003D0A  EC84  F01A         	call	_delay_ms	;wreg free
 11600                           
 11601                           ;ST7735_TFT.c: 221: PORTCbits.RC4 = 1;
 11602  003D0E  8882               	bsf	3970,4,c	;volatile
 11603  003D10  0012               	return		;funcret
 11604  003D12                     __end_of_LCD_Reset:
 11605                           	opt stack 0
 11606                           tblptru	equ	0xFF8
 11607                           tblptrh	equ	0xFF7
 11608                           tblptrl	equ	0xFF6
 11609                           tablat	equ	0xFF5
 11610                           prodh	equ	0xFF4
 11611                           prodl	equ	0xFF3
 11612                           intcon	equ	0xFF2
 11613                           intcon2	equ	0xFF1
 11614                           postinc0	equ	0xFEE
 11615                           wreg	equ	0xFE8
 11616                           postdec1	equ	0xFE5
 11617                           fsr1l	equ	0xFE1
 11618                           indf2	equ	0xFDF
 11619                           postinc2	equ	0xFDE
 11620                           fsr2h	equ	0xFDA
 11621                           fsr2l	equ	0xFD9
 11622                           status	equ	0xFD8
 11623                           
 11624 ;; *************** function _delay_ms *****************
 11625 ;; Defined at:
 11626 ;;		line 64 in file "ST7735_TFT.c"
 11627 ;; Parameters:    Size  Location     Type
 11628 ;;  ms              2   22[COMRAM] int 
 11629 ;; Auto vars:     Size  Location     Type
 11630 ;;  count           2   26[COMRAM] int 
 11631 ;; Return value:  Size  Location     Type
 11632 ;;		None               void
 11633 ;; Registers used:
 11634 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11635 ;; Tracked objects:
 11636 ;;		On entry : 0/0
 11637 ;;		On exit  : 0/0
 11638 ;;		Unchanged: 0/0
 11639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11640 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11641 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11642 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11643 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11644 ;;Total ram usage:        6 bytes
 11645 ;; Hardware stack levels used:    1
 11646 ;; Hardware stack levels required when called:    4
 11647 ;; This function calls:
 11648 ;;		___wmul
 11649 ;; This function is called by:
 11650 ;;		_LCD_Reset
 11651 ;;		_Rcmd1
 11652 ;;		_Rcmd3
 11653 ;;		_Bcmd
 11654 ;; This function uses a non-reentrant model
 11655 ;;
 11656                           
 11657                           	psect	text59
 11658  003508                     __ptext59:
 11659                           	opt stack 0
 11660  003508                     _delay_ms:
 11661                           	opt stack 23
 11662                           
 11663                           ;ST7735_TFT.c: 70: int count;
 11664                           ;ST7735_TFT.c: 71: count = 8000000/4000/16 * ms;
 11665                           
 11666                           ;incstack = 0
 11667  003508  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
 11668  00350C  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
 11669  003510  0E00               	movlw	0
 11670  003512  6E14               	movwf	___wmul@multiplicand+1,c
 11671  003514  0E7D               	movlw	125
 11672  003516  6E13               	movwf	___wmul@multiplicand,c
 11673  003518  EC27  F01D         	call	___wmul	;wreg free
 11674  00351C  C011  F01B         	movff	?___wmul,delay_ms@count
 11675  003520  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
 11676                           
 11677                           ;ST7735_TFT.c: 72: count = (0xffff - count);
 11678  003524  C01B  F019         	movff	delay_ms@count,??_delay_ms
 11679  003528  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
 11680  00352C  1E19               	comf	??_delay_ms,f,c
 11681  00352E  1E1A               	comf	??_delay_ms+1,f,c
 11682  003530  4A19               	infsnz	??_delay_ms,f,c
 11683  003532  2A1A               	incf	??_delay_ms+1,f,c
 11684  003534  0EFF               	movlw	255
 11685  003536  2419               	addwf	??_delay_ms,w,c
 11686  003538  6E1B               	movwf	delay_ms@count,c
 11687  00353A  0EFF               	movlw	255
 11688  00353C  201A               	addwfc	??_delay_ms+1,w,c
 11689  00353E  6E1C               	movwf	delay_ms@count+1,c
 11690                           
 11691                           ;ST7735_TFT.c: 74: T0CON = 0x03;
 11692  003540  0E03               	movlw	3
 11693  003542  6ED5               	movwf	4053,c	;volatile
 11694                           
 11695                           ;ST7735_TFT.c: 76: TMR0L = count & 0x00ff;
 11696  003544  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
 11697                           
 11698                           ;ST7735_TFT.c: 77: TMR0H = count >> 8;
 11699  003548  501C               	movf	delay_ms@count+1,w,c
 11700  00354A  6ED7               	movwf	4055,c	;volatile
 11701                           
 11702                           ;ST7735_TFT.c: 79: INTCONbits.TMR0IF = 0;
 11703  00354C  94F2               	bcf	intcon,2,c	;volatile
 11704                           
 11705                           ;ST7735_TFT.c: 80: T0CONbits.TMR0ON = 1;
 11706  00354E  8ED5               	bsf	4053,7,c	;volatile
 11707                           
 11708                           ;ST7735_TFT.c: 82: while (INTCONbits.TMR0IF == 0);
 11709  003550  D000               	goto	l1089
 11710  003552                     l1089:
 11711  003552  A4F2               	btfss	intcon,2,c	;volatile
 11712  003554  D7FE               	goto	l1089
 11713                           
 11714                           ;ST7735_TFT.c: 83: T0CONbits.TMR0ON = 0;
 11715  003556  9ED5               	bcf	4053,7,c	;volatile
 11716  003558  0012               	return		;funcret
 11717  00355A                     __end_of_delay_ms:
 11718                           	opt stack 0
 11719                           tblptru	equ	0xFF8
 11720                           tblptrh	equ	0xFF7
 11721                           tblptrl	equ	0xFF6
 11722                           tablat	equ	0xFF5
 11723                           prodh	equ	0xFF4
 11724                           prodl	equ	0xFF3
 11725                           intcon	equ	0xFF2
 11726                           intcon2	equ	0xFF1
 11727                           postinc0	equ	0xFEE
 11728                           wreg	equ	0xFE8
 11729                           postdec1	equ	0xFE5
 11730                           fsr1l	equ	0xFE1
 11731                           indf2	equ	0xFDF
 11732                           postinc2	equ	0xFDE
 11733                           fsr2h	equ	0xFDA
 11734                           fsr2l	equ	0xFD9
 11735                           status	equ	0xFD8
 11736                           
 11737 ;; *************** function _DS3231_Write_Alarm_Time *****************
 11738 ;; Defined at:
 11739 ;;		line 169 in file "I2C_Support.c"
 11740 ;; Parameters:    Size  Location     Type
 11741 ;;		None
 11742 ;; Auto vars:     Size  Location     Type
 11743 ;;  Address         1   12[BANK1 ] unsigned char 
 11744 ;;  Device          1   11[BANK1 ] unsigned char 
 11745 ;; Return value:  Size  Location     Type
 11746 ;;		None               void
 11747 ;; Registers used:
 11748 ;;		wreg, status,2, status,0, cstack
 11749 ;; Tracked objects:
 11750 ;;		On entry : 0/0
 11751 ;;		On exit  : 0/0
 11752 ;;		Unchanged: 0/0
 11753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11755 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11757 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11758 ;;Total ram usage:        2 bytes
 11759 ;; Hardware stack levels used:    1
 11760 ;; Hardware stack levels required when called:    7
 11761 ;; This function calls:
 11762 ;;		_DS3231_Read_Time
 11763 ;;		_I2C_Start
 11764 ;;		_I2C_Stop
 11765 ;;		_I2C_Write
 11766 ;;		_dec_2_bcd
 11767 ;; This function is called by:
 11768 ;;		_Do_Save_New_Alarm_Time
 11769 ;; This function uses a non-reentrant model
 11770 ;;
 11771                           
 11772                           	psect	text60
 11773  0030B4                     __ptext60:
 11774                           	opt stack 0
 11775  0030B4                     _DS3231_Write_Alarm_Time:
 11776                           	opt stack 21
 11777                           
 11778                           ;I2C_Support.c: 171: DS3231_Read_Time();
 11779                           
 11780                           ;incstack = 0
 11781  0030B4  EC72  F019         	call	_DS3231_Read_Time	;wreg free
 11782                           
 11783                           ;I2C_Support.c: 172: alarm_date = day;
 11784  0030B8  C05B  F055         	movff	_day,_alarm_date
 11785                           
 11786                           ;I2C_Support.c: 173: char Device = 0x68;
 11787  0030BC  0E68               	movlw	104
 11788  0030BE  0101               	movlb	1	; () banked
 11789  0030C0  6F3F               	movwf	DS3231_Write_Alarm_Time@Device& (0+255),b
 11790                           
 11791                           ; BSR set to: 1
 11792                           ;I2C_Support.c: 174: char Address = 0x07;
 11793  0030C2  0E07               	movlw	7
 11794  0030C4  0101               	movlb	1	; () banked
 11795  0030C6  6F40               	movwf	DS3231_Write_Alarm_Time@Address& (0+255),b
 11796                           
 11797                           ;I2C_Support.c: 175: alarm_hour = dec_2_bcd(setup_alarm_hour);
 11798  0030C8  5064               	movf	_setup_alarm_hour,w,c
 11799  0030CA  EC0B  F019         	call	_dec_2_bcd
 11800  0030CE  5041               	movf	?_dec_2_bcd,w,c
 11801  0030D0  6E56               	movwf	_alarm_hour,c
 11802                           
 11803                           ;I2C_Support.c: 176: alarm_minute = dec_2_bcd(setup_alarm_minute);
 11804  0030D2  5065               	movf	_setup_alarm_minute,w,c
 11805  0030D4  EC0B  F019         	call	_dec_2_bcd
 11806  0030D8  5041               	movf	?_dec_2_bcd,w,c
 11807  0030DA  6E57               	movwf	_alarm_minute,c
 11808                           
 11809                           ;I2C_Support.c: 177: alarm_second = dec_2_bcd(setup_alarm_second);
 11810  0030DC  5066               	movf	_setup_alarm_second,w,c
 11811  0030DE  EC0B  F019         	call	_dec_2_bcd
 11812  0030E2  5041               	movf	?_dec_2_bcd,w,c
 11813  0030E4  6E58               	movwf	_alarm_second,c
 11814                           
 11815                           ;I2C_Support.c: 178: alarm_second = alarm_second & 0x7f;
 11816  0030E6  5058               	movf	_alarm_second,w,c
 11817  0030E8  0B7F               	andlw	127
 11818  0030EA  6E58               	movwf	_alarm_second,c
 11819                           
 11820                           ;I2C_Support.c: 179: alarm_minute = alarm_minute & 0x7f;
 11821  0030EC  5057               	movf	_alarm_minute,w,c
 11822  0030EE  0B7F               	andlw	127
 11823  0030F0  6E57               	movwf	_alarm_minute,c
 11824                           
 11825                           ;I2C_Support.c: 180: alarm_hour = alarm_hour & 0x7f;
 11826  0030F2  5056               	movf	_alarm_hour,w,c
 11827  0030F4  0B7F               	andlw	127
 11828  0030F6  6E56               	movwf	_alarm_hour,c
 11829                           
 11830                           ;I2C_Support.c: 181: alarm_date = alarm_date | 0x80;
 11831  0030F8  5055               	movf	_alarm_date,w,c
 11832  0030FA  0980               	iorlw	128
 11833  0030FC  6E55               	movwf	_alarm_date,c
 11834                           
 11835                           ;I2C_Support.c: 182: I2C_Start();
 11836  0030FE  ECA4  F01E         	call	_I2C_Start	;wreg free
 11837                           
 11838                           ;I2C_Support.c: 183: I2C_Write((Device << 1) | 0);
 11839  003102  0101               	movlb	1	; () banked
 11840  003104  513F               	movf	DS3231_Write_Alarm_Time@Device& (0+255),w,b
 11841  003106  253F               	addwf	DS3231_Write_Alarm_Time@Device& (0+255),w,b
 11842  003108  EC3E  F01C         	call	_I2C_Write
 11843                           
 11844                           ;I2C_Support.c: 184: I2C_Write(Address);
 11845  00310C  0101               	movlb	1	; () banked
 11846  00310E  5140               	movf	DS3231_Write_Alarm_Time@Address& (0+255),w,b
 11847  003110  EC3E  F01C         	call	_I2C_Write
 11848                           
 11849                           ;I2C_Support.c: 186: I2C_Write(alarm_second);
 11850  003114  5058               	movf	_alarm_second,w,c
 11851  003116  EC3E  F01C         	call	_I2C_Write
 11852                           
 11853                           ;I2C_Support.c: 187: I2C_Write(alarm_minute);
 11854  00311A  5057               	movf	_alarm_minute,w,c
 11855  00311C  EC3E  F01C         	call	_I2C_Write
 11856                           
 11857                           ;I2C_Support.c: 188: I2C_Write(alarm_hour);
 11858  003120  5056               	movf	_alarm_hour,w,c
 11859  003122  EC3E  F01C         	call	_I2C_Write
 11860                           
 11861                           ;I2C_Support.c: 189: I2C_Write(alarm_date);
 11862  003126  5055               	movf	_alarm_date,w,c
 11863  003128  EC3E  F01C         	call	_I2C_Write
 11864                           
 11865                           ;I2C_Support.c: 190: I2C_Stop();
 11866  00312C  EC9B  F01E         	call	_I2C_Stop	;wreg free
 11867  003130  0012               	return		;funcret
 11868  003132                     __end_of_DS3231_Write_Alarm_Time:
 11869                           	opt stack 0
 11870                           tblptru	equ	0xFF8
 11871                           tblptrh	equ	0xFF7
 11872                           tblptrl	equ	0xFF6
 11873                           tablat	equ	0xFF5
 11874                           prodh	equ	0xFF4
 11875                           prodl	equ	0xFF3
 11876                           intcon	equ	0xFF2
 11877                           intcon2	equ	0xFF1
 11878                           postinc0	equ	0xFEE
 11879                           wreg	equ	0xFE8
 11880                           postdec1	equ	0xFE5
 11881                           fsr1l	equ	0xFE1
 11882                           indf2	equ	0xFDF
 11883                           postinc2	equ	0xFDE
 11884                           fsr2h	equ	0xFDA
 11885                           fsr2l	equ	0xFD9
 11886                           status	equ	0xFD8
 11887                           
 11888 ;; *************** function _dec_2_bcd *****************
 11889 ;; Defined at:
 11890 ;;		line 53 in file "utils.c"
 11891 ;; Parameters:    Size  Location     Type
 11892 ;;  dec             1    wreg     unsigned char 
 11893 ;; Auto vars:     Size  Location     Type
 11894 ;;  dec             1   10[BANK1 ] unsigned char 
 11895 ;;  bcd             2    8[BANK1 ] int 
 11896 ;; Return value:  Size  Location     Type
 11897 ;;                  2   64[COMRAM] int 
 11898 ;; Registers used:
 11899 ;;		wreg, status,2, status,0, cstack
 11900 ;; Tracked objects:
 11901 ;;		On entry : 0/0
 11902 ;;		On exit  : 0/0
 11903 ;;		Unchanged: 0/0
 11904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11905 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11906 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11907 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11908 ;;      Totals:         2       2       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11909 ;;Total ram usage:        7 bytes
 11910 ;; Hardware stack levels used:    1
 11911 ;; Hardware stack levels required when called:    4
 11912 ;; This function calls:
 11913 ;;		___awdiv
 11914 ;;		___awmod
 11915 ;; This function is called by:
 11916 ;;		_DS3231_Write_Time
 11917 ;;		_DS3231_Write_Alarm_Time
 11918 ;; This function uses a non-reentrant model
 11919 ;;
 11920                           
 11921                           	psect	text61
 11922  003216                     __ptext61:
 11923                           	opt stack 0
 11924  003216                     _dec_2_bcd:
 11925                           	opt stack 23
 11926                           
 11927                           ;incstack = 0
 11928                           ;dec_2_bcd@dec stored from wreg
 11929  003216  0101               	movlb	1	; () banked
 11930  003218  6F3E               	movwf	dec_2_bcd@dec& (0+255),b
 11931                           
 11932                           ; BSR set to: 1
 11933                           ;utils.c: 55: int bcd;
 11934                           ;utils.c: 56: bcd = ((dec / 10) << 4) + (dec % 10);
 11935  00321A  C13E  F134         	movff	dec_2_bcd@dec,___awdiv@dividend
 11936  00321E  0101               	movlb	1	; () banked
 11937  003220  6B35               	clrf	(___awdiv@dividend+1)& (0+255),b
 11938  003222  0E00               	movlw	0
 11939  003224  0101               	movlb	1	; () banked
 11940  003226  6F37               	movwf	(___awdiv@divisor+1)& (0+255),b
 11941  003228  0E0A               	movlw	10
 11942  00322A  6F36               	movwf	___awdiv@divisor& (0+255),b
 11943  00322C  EC3A  F012         	call	___awdiv	;wreg free
 11944  003230  C134  F0FD         	movff	?___awdiv,??_dec_2_bcd
 11945  003234  C135  F0FE         	movff	?___awdiv+1,??_dec_2_bcd+1
 11946  003238  0100               	movlb	0	; () banked
 11947  00323A  3BFD               	swapf	??_dec_2_bcd& (0+255),f,b
 11948  00323C  3BFE               	swapf	(??_dec_2_bcd+1)& (0+255),f,b
 11949  00323E  0EF0               	movlw	240
 11950  003240  17FE               	andwf	(??_dec_2_bcd+1)& (0+255),f,b
 11951  003242  51FD               	movf	??_dec_2_bcd& (0+255),w,b
 11952  003244  0B0F               	andlw	15
 11953  003246  13FE               	iorwf	(??_dec_2_bcd+1)& (0+255),f,b
 11954  003248  0EF0               	movlw	240
 11955  00324A  17FD               	andwf	??_dec_2_bcd& (0+255),f,b
 11956  00324C  C13E  F03B         	movff	dec_2_bcd@dec,___awmod@dividend
 11957  003250  6A3C               	clrf	___awmod@dividend+1,c
 11958  003252  0E00               	movlw	0
 11959  003254  6E3E               	movwf	___awmod@divisor+1,c
 11960  003256  0E0A               	movlw	10
 11961  003258  6E3D               	movwf	___awmod@divisor,c
 11962  00325A  ECD9  F017         	call	___awmod	;wreg free
 11963  00325E  503B               	movf	?___awmod,w,c
 11964  003260  0100               	movlb	0	; () banked
 11965  003262  25FD               	addwf	??_dec_2_bcd& (0+255),w,b
 11966  003264  0101               	movlb	1	; () banked
 11967  003266  6F3C               	movwf	dec_2_bcd@bcd& (0+255),b
 11968  003268  503C               	movf	?___awmod+1,w,c
 11969  00326A  0100               	movlb	0	; () banked
 11970  00326C  21FE               	addwfc	(??_dec_2_bcd+1)& (0+255),w,b
 11971  00326E  0101               	movlb	1	; () banked
 11972  003270  6F3D               	movwf	(dec_2_bcd@bcd+1)& (0+255),b
 11973                           
 11974                           ; BSR set to: 1
 11975                           ;utils.c: 57: return bcd;
 11976  003272  C13C  F041         	movff	dec_2_bcd@bcd,?_dec_2_bcd
 11977  003276  C13D  F042         	movff	dec_2_bcd@bcd+1,?_dec_2_bcd+1
 11978  00327A  D000               	goto	l1336
 11979  00327C                     l1336:
 11980                           
 11981                           ; BSR set to: 1
 11982  00327C  0012               	return		;funcret
 11983  00327E                     __end_of_dec_2_bcd:
 11984                           	opt stack 0
 11985                           tblptru	equ	0xFF8
 11986                           tblptrh	equ	0xFF7
 11987                           tblptrl	equ	0xFF6
 11988                           tablat	equ	0xFF5
 11989                           prodh	equ	0xFF4
 11990                           prodl	equ	0xFF3
 11991                           intcon	equ	0xFF2
 11992                           intcon2	equ	0xFF1
 11993                           postinc0	equ	0xFEE
 11994                           wreg	equ	0xFE8
 11995                           postdec1	equ	0xFE5
 11996                           fsr1l	equ	0xFE1
 11997                           indf2	equ	0xFDF
 11998                           postinc2	equ	0xFDE
 11999                           fsr2h	equ	0xFDA
 12000                           fsr2l	equ	0xFD9
 12001                           status	equ	0xFD8
 12002                           
 12003 ;; *************** function _DS3231_Read_Time *****************
 12004 ;; Defined at:
 12005 ;;		line 45 in file "I2C_Support.c"
 12006 ;; Parameters:    Size  Location     Type
 12007 ;;		None
 12008 ;; Auto vars:     Size  Location     Type
 12009 ;;  Device          1   20[COMRAM] unsigned char 
 12010 ;;  Address         1   19[COMRAM] unsigned char 
 12011 ;; Return value:  Size  Location     Type
 12012 ;;		None               void
 12013 ;; Registers used:
 12014 ;;		wreg, status,2, status,0, cstack
 12015 ;; Tracked objects:
 12016 ;;		On entry : 0/0
 12017 ;;		On exit  : 0/0
 12018 ;;		Unchanged: 0/0
 12019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12021 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12023 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12024 ;;Total ram usage:        2 bytes
 12025 ;; Hardware stack levels used:    1
 12026 ;; Hardware stack levels required when called:    6
 12027 ;; This function calls:
 12028 ;;		_I2C_ReStart
 12029 ;;		_I2C_Read
 12030 ;;		_I2C_Start
 12031 ;;		_I2C_Stop
 12032 ;;		_I2C_Write
 12033 ;; This function is called by:
 12034 ;;		_main
 12035 ;;		_DS3231_Write_Alarm_Time
 12036 ;;		_Exit_Setup_Alarm_Time
 12037 ;;		_Do_Save_New_Alarm_Time
 12038 ;;		_Exit_Setup_Heater_Temp
 12039 ;;		_Do_Save_New_Heater_Temp
 12040 ;;		_Do_Setup_Time
 12041 ;;		_Do_Save_New_Time
 12042 ;;		_Exit_Time_Setup
 12043 ;; This function uses a non-reentrant model
 12044 ;;
 12045                           
 12046                           	psect	text62
 12047  0032E4                     __ptext62:
 12048                           	opt stack 0
 12049  0032E4                     _DS3231_Read_Time:
 12050                           	opt stack 22
 12051                           
 12052                           ;I2C_Support.c: 47: char Device = 0x68;
 12053                           
 12054                           ; BSR set to: 1
 12055                           ;incstack = 0
 12056  0032E4  0E68               	movlw	104
 12057  0032E6  6E15               	movwf	DS3231_Read_Time@Device,c
 12058                           
 12059                           ;I2C_Support.c: 48: char Address = 0x00;
 12060  0032E8  0E00               	movlw	0
 12061  0032EA  6E14               	movwf	DS3231_Read_Time@Address,c
 12062                           
 12063                           ;I2C_Support.c: 50: I2C_Start();
 12064  0032EC  ECA4  F01E         	call	_I2C_Start	;wreg free
 12065                           
 12066                           ;I2C_Support.c: 51: I2C_Write((Device << 1) | 0);
 12067  0032F0  5015               	movf	DS3231_Read_Time@Device,w,c
 12068  0032F2  2415               	addwf	DS3231_Read_Time@Device,w,c
 12069  0032F4  EC3E  F01C         	call	_I2C_Write
 12070                           
 12071                           ;I2C_Support.c: 52: I2C_Write(Address);
 12072  0032F8  5014               	movf	DS3231_Read_Time@Address,w,c
 12073  0032FA  EC3E  F01C         	call	_I2C_Write
 12074                           
 12075                           ;I2C_Support.c: 53: I2C_ReStart();
 12076  0032FE  EC30  F01E         	call	_I2C_ReStart	;wreg free
 12077                           
 12078                           ;I2C_Support.c: 54: I2C_Write((Device << 1) | 1);
 12079  003302  80D8               	bsf	status,0,c
 12080  003304  3415               	rlcf	DS3231_Read_Time@Device,w,c
 12081  003306  EC3E  F01C         	call	_I2C_Write
 12082                           
 12083                           ;I2C_Support.c: 55: second = I2C_Read(1);
 12084  00330A  0E01               	movlw	1
 12085  00330C  ECBB  F01B         	call	_I2C_Read
 12086  003310  6E63               	movwf	_second,c
 12087                           
 12088                           ;I2C_Support.c: 56: minute = I2C_Read(1);
 12089  003312  0E01               	movlw	1
 12090  003314  ECBB  F01B         	call	_I2C_Read
 12091  003318  6E60               	movwf	_minute,c
 12092                           
 12093                           ;I2C_Support.c: 57: hour = I2C_Read(1);
 12094  00331A  0E01               	movlw	1
 12095  00331C  ECBB  F01B         	call	_I2C_Read
 12096  003320  6E5F               	movwf	_hour,c
 12097                           
 12098                           ;I2C_Support.c: 58: dow = I2C_Read(1);
 12099  003322  0E01               	movlw	1
 12100  003324  ECBB  F01B         	call	_I2C_Read
 12101  003328  6E5C               	movwf	_dow,c
 12102                           
 12103                           ;I2C_Support.c: 59: day = I2C_Read(1);
 12104  00332A  0E01               	movlw	1
 12105  00332C  ECBB  F01B         	call	_I2C_Read
 12106  003330  6E5B               	movwf	_day,c
 12107                           
 12108                           ;I2C_Support.c: 60: month = I2C_Read(1);
 12109  003332  0E01               	movlw	1
 12110  003334  ECBB  F01B         	call	_I2C_Read
 12111  003338  6E61               	movwf	_month,c
 12112                           
 12113                           ;I2C_Support.c: 61: year = I2C_Read(0);
 12114  00333A  0E00               	movlw	0
 12115  00333C  ECBB  F01B         	call	_I2C_Read
 12116  003340  6E6E               	movwf	_year,c
 12117                           
 12118                           ;I2C_Support.c: 62: I2C_Stop();
 12119  003342  EC9B  F01E         	call	_I2C_Stop	;wreg free
 12120  003346  0012               	return		;funcret
 12121  003348                     __end_of_DS3231_Read_Time:
 12122                           	opt stack 0
 12123                           tblptru	equ	0xFF8
 12124                           tblptrh	equ	0xFF7
 12125                           tblptrl	equ	0xFF6
 12126                           tablat	equ	0xFF5
 12127                           prodh	equ	0xFF4
 12128                           prodl	equ	0xFF3
 12129                           intcon	equ	0xFF2
 12130                           intcon2	equ	0xFF1
 12131                           postinc0	equ	0xFEE
 12132                           wreg	equ	0xFE8
 12133                           postdec1	equ	0xFE5
 12134                           fsr1l	equ	0xFE1
 12135                           indf2	equ	0xFDF
 12136                           postinc2	equ	0xFDE
 12137                           fsr2h	equ	0xFDA
 12138                           fsr2l	equ	0xFD9
 12139                           status	equ	0xFD8
 12140                           
 12141 ;; *************** function _DS3231_Read_Alarm_Time *****************
 12142 ;; Defined at:
 12143 ;;		line 115 in file "I2C_Support.c"
 12144 ;; Parameters:    Size  Location     Type
 12145 ;;		None
 12146 ;; Auto vars:     Size  Location     Type
 12147 ;;  Device          1   20[COMRAM] unsigned char 
 12148 ;;  Address         1   19[COMRAM] unsigned char 
 12149 ;; Return value:  Size  Location     Type
 12150 ;;		None               void
 12151 ;; Registers used:
 12152 ;;		wreg, status,2, status,0, cstack
 12153 ;; Tracked objects:
 12154 ;;		On entry : 0/0
 12155 ;;		On exit  : 0/0
 12156 ;;		Unchanged: 0/0
 12157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12159 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12161 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12162 ;;Total ram usage:        2 bytes
 12163 ;; Hardware stack levels used:    1
 12164 ;; Hardware stack levels required when called:    6
 12165 ;; This function calls:
 12166 ;;		_I2C_ReStart
 12167 ;;		_I2C_Read
 12168 ;;		_I2C_Start
 12169 ;;		_I2C_Stop
 12170 ;;		_I2C_Write
 12171 ;; This function is called by:
 12172 ;;		_main
 12173 ;;		_Do_Setup_Alarm_Time
 12174 ;;		_Do_Save_New_Alarm_Time
 12175 ;; This function uses a non-reentrant model
 12176 ;;
 12177                           
 12178                           	psect	text63
 12179  003694                     __ptext63:
 12180                           	opt stack 0
 12181  003694                     _DS3231_Read_Alarm_Time:
 12182                           	opt stack 22
 12183                           
 12184                           ;I2C_Support.c: 117: char Device = 0x68;
 12185                           
 12186                           ;incstack = 0
 12187  003694  0E68               	movlw	104
 12188  003696  6E15               	movwf	DS3231_Read_Alarm_Time@Device,c
 12189                           
 12190                           ;I2C_Support.c: 118: char Address = 0x07;
 12191  003698  0E07               	movlw	7
 12192  00369A  6E14               	movwf	DS3231_Read_Alarm_Time@Address,c
 12193                           
 12194                           ;I2C_Support.c: 119: I2C_Start();
 12195  00369C  ECA4  F01E         	call	_I2C_Start	;wreg free
 12196                           
 12197                           ;I2C_Support.c: 120: I2C_Write((Device << 1) | 0);
 12198  0036A0  5015               	movf	DS3231_Read_Alarm_Time@Device,w,c
 12199  0036A2  2415               	addwf	DS3231_Read_Alarm_Time@Device,w,c
 12200  0036A4  EC3E  F01C         	call	_I2C_Write
 12201                           
 12202                           ;I2C_Support.c: 121: I2C_Write(Address);
 12203  0036A8  5014               	movf	DS3231_Read_Alarm_Time@Address,w,c
 12204  0036AA  EC3E  F01C         	call	_I2C_Write
 12205                           
 12206                           ;I2C_Support.c: 122: I2C_ReStart();
 12207  0036AE  EC30  F01E         	call	_I2C_ReStart	;wreg free
 12208                           
 12209                           ;I2C_Support.c: 123: I2C_Write((Device << 1) | 1);
 12210  0036B2  80D8               	bsf	status,0,c
 12211  0036B4  3415               	rlcf	DS3231_Read_Alarm_Time@Device,w,c
 12212  0036B6  EC3E  F01C         	call	_I2C_Write
 12213                           
 12214                           ;I2C_Support.c: 124: alarm_second = I2C_Read(1);
 12215  0036BA  0E01               	movlw	1
 12216  0036BC  ECBB  F01B         	call	_I2C_Read
 12217  0036C0  6E58               	movwf	_alarm_second,c
 12218                           
 12219                           ;I2C_Support.c: 125: alarm_minute = I2C_Read(1);
 12220  0036C2  0E01               	movlw	1
 12221  0036C4  ECBB  F01B         	call	_I2C_Read
 12222  0036C8  6E57               	movwf	_alarm_minute,c
 12223                           
 12224                           ;I2C_Support.c: 126: alarm_hour = I2C_Read(1);
 12225  0036CA  0E01               	movlw	1
 12226  0036CC  ECBB  F01B         	call	_I2C_Read
 12227  0036D0  6E56               	movwf	_alarm_hour,c
 12228                           
 12229                           ;I2C_Support.c: 127: alarm_date = I2C_Read(0);
 12230  0036D2  0E00               	movlw	0
 12231  0036D4  ECBB  F01B         	call	_I2C_Read
 12232  0036D8  6E55               	movwf	_alarm_date,c
 12233                           
 12234                           ;I2C_Support.c: 128: I2C_Stop();
 12235  0036DA  EC9B  F01E         	call	_I2C_Stop	;wreg free
 12236  0036DE  0012               	return		;funcret
 12237  0036E0                     __end_of_DS3231_Read_Alarm_Time:
 12238                           	opt stack 0
 12239                           tblptru	equ	0xFF8
 12240                           tblptrh	equ	0xFF7
 12241                           tblptrl	equ	0xFF6
 12242                           tablat	equ	0xFF5
 12243                           prodh	equ	0xFF4
 12244                           prodl	equ	0xFF3
 12245                           intcon	equ	0xFF2
 12246                           intcon2	equ	0xFF1
 12247                           postinc0	equ	0xFEE
 12248                           wreg	equ	0xFE8
 12249                           postdec1	equ	0xFE5
 12250                           fsr1l	equ	0xFE1
 12251                           indf2	equ	0xFDF
 12252                           postinc2	equ	0xFDE
 12253                           fsr2h	equ	0xFDA
 12254                           fsr2l	equ	0xFD9
 12255                           status	equ	0xFD8
 12256                           
 12257 ;; *************** function _Do_Beep_Good *****************
 12258 ;; Defined at:
 12259 ;;		line 70 in file "utils.c"
 12260 ;; Parameters:    Size  Location     Type
 12261 ;;		None
 12262 ;; Auto vars:     Size  Location     Type
 12263 ;;		None
 12264 ;; Return value:  Size  Location     Type
 12265 ;;		None               void
 12266 ;; Registers used:
 12267 ;;		wreg, status,2, status,0, cstack
 12268 ;; Tracked objects:
 12269 ;;		On entry : 0/0
 12270 ;;		On exit  : 0/0
 12271 ;;		Unchanged: 0/0
 12272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12276 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12277 ;;Total ram usage:        0 bytes
 12278 ;; Hardware stack levels used:    1
 12279 ;; Hardware stack levels required when called:    6
 12280 ;; This function calls:
 12281 ;;		_Activate_Buzzer_2KHz
 12282 ;;		_Deactivate_Buzzer
 12283 ;;		_Wait_One_Sec
 12284 ;;		_do_update_pwm
 12285 ;; This function is called by:
 12286 ;;		_main
 12287 ;;		_Do_Setup_Alarm_Time
 12288 ;;		_Do_Setup_Heater_Temp
 12289 ;;		_Do_Setup_Time
 12290 ;; This function uses a non-reentrant model
 12291 ;;
 12292                           
 12293                           	psect	text64
 12294  003C9E                     __ptext64:
 12295                           	opt stack 0
 12296  003C9E                     _Do_Beep_Good:
 12297                           	opt stack 23
 12298                           
 12299                           ;utils.c: 72: Activate_Buzzer_2KHz();
 12300                           
 12301                           ;incstack = 0
 12302  003C9E  EC89  F01E         	call	_Activate_Buzzer_2KHz	;wreg free
 12303                           
 12304                           ;utils.c: 73: Wait_One_Sec();
 12305  003CA2  ECC1  F01D         	call	_Wait_One_Sec	;wreg free
 12306                           
 12307                           ;utils.c: 74: Deactivate_Buzzer();
 12308  003CA6  EC2A  F01F         	call	_Deactivate_Buzzer	;wreg free
 12309                           
 12310                           ;utils.c: 75: do_update_pwm(duty_cycle);
 12311  003CAA  505D               	movf	_duty_cycle,w,c
 12312  003CAC  EC8B  F014         	call	_do_update_pwm
 12313  003CB0  0012               	return		;funcret
 12314  003CB2                     __end_of_Do_Beep_Good:
 12315                           	opt stack 0
 12316                           tblptru	equ	0xFF8
 12317                           tblptrh	equ	0xFF7
 12318                           tblptrl	equ	0xFF6
 12319                           tablat	equ	0xFF5
 12320                           prodh	equ	0xFF4
 12321                           prodl	equ	0xFF3
 12322                           intcon	equ	0xFF2
 12323                           intcon2	equ	0xFF1
 12324                           postinc0	equ	0xFEE
 12325                           wreg	equ	0xFE8
 12326                           postdec1	equ	0xFE5
 12327                           fsr1l	equ	0xFE1
 12328                           indf2	equ	0xFDF
 12329                           postinc2	equ	0xFDE
 12330                           fsr2h	equ	0xFDA
 12331                           fsr2l	equ	0xFD9
 12332                           status	equ	0xFD8
 12333                           
 12334 ;; *************** function _Activate_Buzzer_2KHz *****************
 12335 ;; Defined at:
 12336 ;;		line 108 in file "utils.c"
 12337 ;; Parameters:    Size  Location     Type
 12338 ;;		None
 12339 ;; Auto vars:     Size  Location     Type
 12340 ;;		None
 12341 ;; Return value:  Size  Location     Type
 12342 ;;		None               void
 12343 ;; Registers used:
 12344 ;;		wreg, status,2
 12345 ;; Tracked objects:
 12346 ;;		On entry : 0/0
 12347 ;;		On exit  : 0/0
 12348 ;;		Unchanged: 0/0
 12349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12353 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12354 ;;Total ram usage:        0 bytes
 12355 ;; Hardware stack levels used:    1
 12356 ;; Hardware stack levels required when called:    3
 12357 ;; This function calls:
 12358 ;;		Nothing
 12359 ;; This function is called by:
 12360 ;;		_Do_Beep_Good
 12361 ;; This function uses a non-reentrant model
 12362 ;;
 12363                           
 12364                           	psect	text65
 12365  003D12                     __ptext65:
 12366                           	opt stack 0
 12367  003D12                     _Activate_Buzzer_2KHz:
 12368                           	opt stack 25
 12369                           
 12370                           ;utils.c: 110: PR2 = 0b11111001 ;
 12371                           
 12372                           ;incstack = 0
 12373  003D12  0EF9               	movlw	249
 12374  003D14  6ECB               	movwf	4043,c	;volatile
 12375                           
 12376                           ;utils.c: 111: T2CON = 0b00000101 ;
 12377  003D16  0E05               	movlw	5
 12378  003D18  6ECA               	movwf	4042,c	;volatile
 12379                           
 12380                           ;utils.c: 112: CCPR2L = 0b01111100 ;
 12381  003D1A  0E7C               	movlw	124
 12382  003D1C  6EBB               	movwf	4027,c	;volatile
 12383                           
 12384                           ;utils.c: 113: CCP2CON = 0b00111100 ;
 12385  003D1E  0E3C               	movlw	60
 12386  003D20  6EBA               	movwf	4026,c	;volatile
 12387  003D22  0012               	return		;funcret
 12388  003D24                     __end_of_Activate_Buzzer_2KHz:
 12389                           	opt stack 0
 12390                           tblptru	equ	0xFF8
 12391                           tblptrh	equ	0xFF7
 12392                           tblptrl	equ	0xFF6
 12393                           tablat	equ	0xFF5
 12394                           prodh	equ	0xFF4
 12395                           prodl	equ	0xFF3
 12396                           intcon	equ	0xFF2
 12397                           intcon2	equ	0xFF1
 12398                           postinc0	equ	0xFEE
 12399                           wreg	equ	0xFE8
 12400                           postdec1	equ	0xFE5
 12401                           fsr1l	equ	0xFE1
 12402                           indf2	equ	0xFDF
 12403                           postinc2	equ	0xFDE
 12404                           fsr2h	equ	0xFDA
 12405                           fsr2l	equ	0xFD9
 12406                           status	equ	0xFD8
 12407                           
 12408 ;; *************** function _Do_Beep_Bad *****************
 12409 ;; Defined at:
 12410 ;;		line 78 in file "utils.c"
 12411 ;; Parameters:    Size  Location     Type
 12412 ;;		None
 12413 ;; Auto vars:     Size  Location     Type
 12414 ;;		None
 12415 ;; Return value:  Size  Location     Type
 12416 ;;		None               void
 12417 ;; Registers used:
 12418 ;;		wreg, status,2, status,0, cstack
 12419 ;; Tracked objects:
 12420 ;;		On entry : 0/0
 12421 ;;		On exit  : 0/0
 12422 ;;		Unchanged: 0/0
 12423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12427 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12428 ;;Total ram usage:        0 bytes
 12429 ;; Hardware stack levels used:    1
 12430 ;; Hardware stack levels required when called:    6
 12431 ;; This function calls:
 12432 ;;		_Activate_Buzzer_500Hz
 12433 ;;		_Deactivate_Buzzer
 12434 ;;		_Wait_One_Sec
 12435 ;;		_do_update_pwm
 12436 ;; This function is called by:
 12437 ;;		_main
 12438 ;;		_Do_Setup_Alarm_Time
 12439 ;;		_Do_Setup_Heater_Temp
 12440 ;;		_Do_Setup_Time
 12441 ;; This function uses a non-reentrant model
 12442 ;;
 12443                           
 12444                           	psect	text66
 12445  003CB2                     __ptext66:
 12446                           	opt stack 0
 12447  003CB2                     _Do_Beep_Bad:
 12448                           	opt stack 23
 12449                           
 12450                           ;utils.c: 80: Activate_Buzzer_500Hz();
 12451                           
 12452                           ;incstack = 0
 12453  003CB2  EC92  F01E         	call	_Activate_Buzzer_500Hz	;wreg free
 12454                           
 12455                           ;utils.c: 81: Wait_One_Sec();
 12456  003CB6  ECC1  F01D         	call	_Wait_One_Sec	;wreg free
 12457                           
 12458                           ;utils.c: 82: Deactivate_Buzzer();
 12459  003CBA  EC2A  F01F         	call	_Deactivate_Buzzer	;wreg free
 12460                           
 12461                           ;utils.c: 83: do_update_pwm(duty_cycle);
 12462  003CBE  505D               	movf	_duty_cycle,w,c
 12463  003CC0  EC8B  F014         	call	_do_update_pwm
 12464  003CC4  0012               	return		;funcret
 12465  003CC6                     __end_of_Do_Beep_Bad:
 12466                           	opt stack 0
 12467                           tblptru	equ	0xFF8
 12468                           tblptrh	equ	0xFF7
 12469                           tblptrl	equ	0xFF6
 12470                           tablat	equ	0xFF5
 12471                           prodh	equ	0xFF4
 12472                           prodl	equ	0xFF3
 12473                           intcon	equ	0xFF2
 12474                           intcon2	equ	0xFF1
 12475                           postinc0	equ	0xFEE
 12476                           wreg	equ	0xFE8
 12477                           postdec1	equ	0xFE5
 12478                           fsr1l	equ	0xFE1
 12479                           indf2	equ	0xFDF
 12480                           postinc2	equ	0xFDE
 12481                           fsr2h	equ	0xFDA
 12482                           fsr2l	equ	0xFD9
 12483                           status	equ	0xFD8
 12484                           
 12485 ;; *************** function _do_update_pwm *****************
 12486 ;; Defined at:
 12487 ;;		line 130 in file "utils.c"
 12488 ;; Parameters:    Size  Location     Type
 12489 ;;  duty_cycle      1    wreg     unsigned char 
 12490 ;; Auto vars:     Size  Location     Type
 12491 ;;  duty_cycle      1   64[COMRAM] unsigned char 
 12492 ;;  dc_f            3   61[COMRAM] float 
 12493 ;;  dc_I            2   65[COMRAM] int 
 12494 ;; Return value:  Size  Location     Type
 12495 ;;		None               void
 12496 ;; Registers used:
 12497 ;;		wreg, status,2, status,0, cstack
 12498 ;; Tracked objects:
 12499 ;;		On entry : 0/0
 12500 ;;		On exit  : 0/0
 12501 ;;		Unchanged: 0/0
 12502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12504 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12505 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12506 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12507 ;;Total ram usage:        9 bytes
 12508 ;; Hardware stack levels used:    1
 12509 ;; Hardware stack levels required when called:    5
 12510 ;; This function calls:
 12511 ;;		___ftdiv
 12512 ;;		___ftmul
 12513 ;;		___fttol
 12514 ;;		___lbtoft
 12515 ;; This function is called by:
 12516 ;;		_Test_Alarm
 12517 ;;		_Monitor_Heater
 12518 ;;		_Turn_On_Fan
 12519 ;;		_Do_Beep_Good
 12520 ;;		_Do_Beep_Bad
 12521 ;;		_Do_Beep
 12522 ;; This function uses a non-reentrant model
 12523 ;;
 12524                           
 12525                           	psect	text67
 12526  002916                     __ptext67:
 12527                           	opt stack 0
 12528  002916                     _do_update_pwm:
 12529                           	opt stack 24
 12530                           
 12531                           ;incstack = 0
 12532                           ;do_update_pwm@duty_cycle stored from wreg
 12533  002916  6E41               	movwf	do_update_pwm@duty_cycle,c
 12534                           
 12535                           ;utils.c: 132: float dc_f;
 12536                           ;utils.c: 133: int dc_I;
 12537                           ;utils.c: 134: PR2 = 0b00000100 ;
 12538  002918  0E04               	movlw	4
 12539  00291A  6ECB               	movwf	4043,c	;volatile
 12540                           
 12541                           ;utils.c: 135: T2CON = 0b00000111 ;
 12542  00291C  0E07               	movlw	7
 12543  00291E  6ECA               	movwf	4042,c	;volatile
 12544                           
 12545                           ;utils.c: 136: dc_f = ( 4.0 * duty_cycle / 20.0) ;
 12546  002920  0E00               	movlw	0
 12547  002922  6E20               	movwf	___ftmul@f2,c
 12548  002924  0E80               	movlw	128
 12549  002926  6E21               	movwf	___ftmul@f2+1,c
 12550  002928  0E40               	movlw	64
 12551  00292A  6E22               	movwf	___ftmul@f2+2,c
 12552  00292C  5041               	movf	do_update_pwm@duty_cycle,w,c
 12553  00292E  EC4E  F01D         	call	___lbtoft
 12554  002932  C019  F01D         	movff	?___lbtoft,___ftmul@f1
 12555  002936  C01A  F01E         	movff	?___lbtoft+1,___ftmul@f1+1
 12556  00293A  C01B  F01F         	movff	?___lbtoft+2,___ftmul@f1+2
 12557  00293E  EC01  F00F         	call	___ftmul	;wreg free
 12558  002942  C01D  F02C         	movff	?___ftmul,___ftdiv@f1
 12559  002946  C01E  F02D         	movff	?___ftmul+1,___ftdiv@f1+1
 12560  00294A  C01F  F02E         	movff	?___ftmul+2,___ftdiv@f1+2
 12561  00294E  0E00               	movlw	0
 12562  002950  6E2F               	movwf	___ftdiv@f2,c
 12563  002952  0EA0               	movlw	160
 12564  002954  6E30               	movwf	___ftdiv@f2+1,c
 12565  002956  0E41               	movlw	65
 12566  002958  6E31               	movwf	___ftdiv@f2+2,c
 12567  00295A  EC5B  F011         	call	___ftdiv	;wreg free
 12568  00295E  C02C  F03E         	movff	?___ftdiv,do_update_pwm@dc_f
 12569  002962  C02D  F03F         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
 12570  002966  C02E  F040         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
 12571                           
 12572                           ;utils.c: 137: dc_I = (int) dc_f;
 12573  00296A  C03E  F02C         	movff	do_update_pwm@dc_f,___fttol@f1
 12574  00296E  C03F  F02D         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
 12575  002972  C040  F02E         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
 12576  002976  ECE8  F010         	call	___fttol	;wreg free
 12577  00297A  C02C  F042         	movff	?___fttol,do_update_pwm@dc_I
 12578  00297E  C02D  F043         	movff	?___fttol+1,do_update_pwm@dc_I+1
 12579                           
 12580                           ;utils.c: 138: if (dc_I > duty_cycle) dc_I++;
 12581  002982  5041               	movf	do_update_pwm@duty_cycle,w,c
 12582  002984  6E3B               	movwf	??_do_update_pwm& (0+255),c
 12583  002986  6A3C               	clrf	(??_do_update_pwm+1)& (0+255),c
 12584  002988  5042               	movf	do_update_pwm@dc_I,w,c
 12585  00298A  5C3B               	subwf	??_do_update_pwm,w,c
 12586  00298C  503C               	movf	??_do_update_pwm+1,w,c
 12587  00298E  0A80               	xorlw	128
 12588  002990  6E3D               	movwf	(??_do_update_pwm+2)& (0+255),c
 12589  002992  5043               	movf	do_update_pwm@dc_I+1,w,c
 12590  002994  0A80               	xorlw	128
 12591  002996  583D               	subwfb	(??_do_update_pwm+2)& (0+255),w,c
 12592  002998  B0D8               	btfsc	status,0,c
 12593  00299A  D003               	goto	l8847
 12594  00299C  4A42               	infsnz	do_update_pwm@dc_I,f,c
 12595  00299E  2A43               	incf	do_update_pwm@dc_I+1,f,c
 12596  0029A0  D000               	goto	l8847
 12597  0029A2                     l8847:
 12598                           
 12599                           ;utils.c: 139: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
 12600  0029A2  C042  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
 12601  0029A6  0E03               	movlw	3
 12602  0029A8  163B               	andwf	??_do_update_pwm,f,c
 12603  0029AA  383B               	swapf	??_do_update_pwm,w,c
 12604  0029AC  0BF0               	andlw	240
 12605  0029AE  090C               	iorlw	12
 12606  0029B0  6EBD               	movwf	4029,c	;volatile
 12607                           
 12608                           ;utils.c: 140: CCPR1L = (dc_I) >> 2;
 12609  0029B2  C042  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
 12610  0029B6  C043  F03C         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
 12611  0029BA  343C               	rlcf	??_do_update_pwm+1,w,c
 12612  0029BC  323C               	rrcf	??_do_update_pwm+1,f,c
 12613  0029BE  323B               	rrcf	??_do_update_pwm,f,c
 12614  0029C0  343C               	rlcf	??_do_update_pwm+1,w,c
 12615  0029C2  323C               	rrcf	??_do_update_pwm+1,f,c
 12616  0029C4  323B               	rrcf	??_do_update_pwm,f,c
 12617  0029C6  503B               	movf	??_do_update_pwm,w,c
 12618  0029C8  6EBE               	movwf	4030,c	;volatile
 12619  0029CA  0012               	return		;funcret
 12620  0029CC                     __end_of_do_update_pwm:
 12621                           	opt stack 0
 12622                           tblptru	equ	0xFF8
 12623                           tblptrh	equ	0xFF7
 12624                           tblptrl	equ	0xFF6
 12625                           tablat	equ	0xFF5
 12626                           prodh	equ	0xFF4
 12627                           prodl	equ	0xFF3
 12628                           intcon	equ	0xFF2
 12629                           intcon2	equ	0xFF1
 12630                           postinc0	equ	0xFEE
 12631                           wreg	equ	0xFE8
 12632                           postdec1	equ	0xFE5
 12633                           fsr1l	equ	0xFE1
 12634                           indf2	equ	0xFDF
 12635                           postinc2	equ	0xFDE
 12636                           fsr2h	equ	0xFDA
 12637                           fsr2l	equ	0xFD9
 12638                           status	equ	0xFD8
 12639                           
 12640 ;; *************** function ___lbtoft *****************
 12641 ;; Defined at:
 12642 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
 12643 ;; Parameters:    Size  Location     Type
 12644 ;;  c               1    wreg     unsigned char 
 12645 ;; Auto vars:     Size  Location     Type
 12646 ;;  c               1   27[COMRAM] unsigned char 
 12647 ;; Return value:  Size  Location     Type
 12648 ;;                  3   24[COMRAM] float 
 12649 ;; Registers used:
 12650 ;;		wreg, status,2, status,0, cstack
 12651 ;; Tracked objects:
 12652 ;;		On entry : 0/0
 12653 ;;		On exit  : 0/0
 12654 ;;		Unchanged: 0/0
 12655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12656 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12657 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12659 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12660 ;;Total ram usage:        4 bytes
 12661 ;; Hardware stack levels used:    1
 12662 ;; Hardware stack levels required when called:    4
 12663 ;; This function calls:
 12664 ;;		___ftpack
 12665 ;; This function is called by:
 12666 ;;		_do_update_pwm
 12667 ;; This function uses a non-reentrant model
 12668 ;;
 12669                           
 12670                           	psect	text68
 12671  003A9C                     __ptext68:
 12672                           	opt stack 0
 12673  003A9C                     ___lbtoft:
 12674                           	opt stack 24
 12675                           
 12676                           ;incstack = 0
 12677                           ;___lbtoft@c stored from wreg
 12678  003A9C  6E1C               	movwf	___lbtoft@c,c
 12679  003A9E  501C               	movf	___lbtoft@c,w,c
 12680  003AA0  6E11               	movwf	___ftpack@arg,c
 12681  003AA2  6A12               	clrf	___ftpack@arg+1,c
 12682  003AA4  6A13               	clrf	___ftpack@arg+2,c
 12683  003AA6  0E8E               	movlw	142
 12684  003AA8  6E14               	movwf	___ftpack@exp,c
 12685  003AAA  0E00               	movlw	0
 12686  003AAC  6E15               	movwf	___ftpack@sign,c
 12687  003AAE  EC6D  F013         	call	___ftpack	;wreg free
 12688  003AB2  C011  F019         	movff	?___ftpack,?___lbtoft
 12689  003AB6  C012  F01A         	movff	?___ftpack+1,?___lbtoft+1
 12690  003ABA  C013  F01B         	movff	?___ftpack+2,?___lbtoft+2
 12691  003ABE  D000               	goto	l1946
 12692  003AC0                     l1946:
 12693  003AC0  0012               	return		;funcret
 12694  003AC2                     __end_of___lbtoft:
 12695                           	opt stack 0
 12696                           tblptru	equ	0xFF8
 12697                           tblptrh	equ	0xFF7
 12698                           tblptrl	equ	0xFF6
 12699                           tablat	equ	0xFF5
 12700                           prodh	equ	0xFF4
 12701                           prodl	equ	0xFF3
 12702                           intcon	equ	0xFF2
 12703                           intcon2	equ	0xFF1
 12704                           postinc0	equ	0xFEE
 12705                           wreg	equ	0xFE8
 12706                           postdec1	equ	0xFE5
 12707                           fsr1l	equ	0xFE1
 12708                           indf2	equ	0xFDF
 12709                           postinc2	equ	0xFDE
 12710                           fsr2h	equ	0xFDA
 12711                           fsr2l	equ	0xFD9
 12712                           status	equ	0xFD8
 12713                           
 12714 ;; *************** function ___fttol *****************
 12715 ;; Defined at:
 12716 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
 12717 ;; Parameters:    Size  Location     Type
 12718 ;;  f1              3   43[COMRAM] float 
 12719 ;; Auto vars:     Size  Location     Type
 12720 ;;  lval            4   53[COMRAM] unsigned long 
 12721 ;;  exp1            1   57[COMRAM] unsigned char 
 12722 ;;  sign1           1   52[COMRAM] unsigned char 
 12723 ;; Return value:  Size  Location     Type
 12724 ;;                  4   43[COMRAM] long 
 12725 ;; Registers used:
 12726 ;;		wreg, status,2, status,0
 12727 ;; Tracked objects:
 12728 ;;		On entry : 0/0
 12729 ;;		On exit  : 0/0
 12730 ;;		Unchanged: 0/0
 12731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12732 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12733 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12734 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12735 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12736 ;;Total ram usage:       15 bytes
 12737 ;; Hardware stack levels used:    1
 12738 ;; Hardware stack levels required when called:    3
 12739 ;; This function calls:
 12740 ;;		Nothing
 12741 ;; This function is called by:
 12742 ;;		_Update_Screen
 12743 ;;		_do_update_pwm
 12744 ;; This function uses a non-reentrant model
 12745 ;;
 12746                           
 12747                           	psect	text69
 12748  0021D0                     __ptext69:
 12749                           	opt stack 0
 12750  0021D0                     ___fttol:
 12751                           	opt stack 26
 12752                           
 12753                           ;incstack = 0
 12754  0021D0  C02E  F030         	movff	___fttol@f1+2,??___fttol
 12755  0021D4  6A31               	clrf	(??___fttol+1)& (0+255),c
 12756  0021D6  6A32               	clrf	(??___fttol+2)& (0+255),c
 12757  0021D8  342D               	rlcf	___fttol@f1+1,w,c
 12758  0021DA  3630               	rlcf	??___fttol& (0+255),f,c
 12759  0021DC  E301               	bnc	u6491
 12760  0021DE  8031               	bsf	(??___fttol+1)& (0+255),0,c
 12761  0021E0                     u6491:
 12762  0021E0  5030               	movf	??___fttol,w,c
 12763  0021E2  6E3A               	movwf	___fttol@exp1,c
 12764  0021E4  503A               	movf	___fttol@exp1,w,c
 12765  0021E6  A4D8               	btfss	status,2,c
 12766  0021E8  D002               	goto	l8723
 12767  0021EA  D039               	goto	l8747
 12768  0021EC  D063               	goto	l1905
 12769  0021EE                     l8723:
 12770  0021EE  0E17               	movlw	23
 12771  0021F0  6E30               	movwf	??___fttol& (0+255),c
 12772  0021F2  C02C  F031         	movff	___fttol@f1,??___fttol+1
 12773  0021F6  C02D  F032         	movff	___fttol@f1+1,??___fttol+2
 12774  0021FA  C02E  F033         	movff	___fttol@f1+2,??___fttol+3
 12775  0021FE  2830               	incf	??___fttol,w,c
 12776  002200  6E34               	movwf	(??___fttol+4)& (0+255),c
 12777  002202  D004               	goto	u6510
 12778  002204                     u6515:
 12779  002204  90D8               	bcf	status,0,c
 12780  002206  3233               	rrcf	??___fttol+3,f,c
 12781  002208  3232               	rrcf	??___fttol+2,f,c
 12782  00220A  3231               	rrcf	??___fttol+1,f,c
 12783  00220C                     u6510:
 12784  00220C  2E34               	decfsz	(??___fttol+4)& (0+255),f,c
 12785  00220E  D7FA               	goto	u6515
 12786  002210  5031               	movf	??___fttol+1,w,c
 12787  002212  6E35               	movwf	___fttol@sign1,c
 12788  002214  8E2D               	bsf	___fttol@f1+1,7,c
 12789  002216  0EFF               	movlw	255
 12790  002218  162C               	andwf	___fttol@f1,f,c
 12791  00221A  0EFF               	movlw	255
 12792  00221C  162D               	andwf	___fttol@f1+1,f,c
 12793  00221E  0E00               	movlw	0
 12794  002220  162E               	andwf	___fttol@f1+2,f,c
 12795  002222  502C               	movf	___fttol@f1,w,c
 12796  002224  6E36               	movwf	___fttol@lval,c
 12797  002226  502D               	movf	___fttol@f1+1,w,c
 12798  002228  6E37               	movwf	___fttol@lval+1,c
 12799  00222A  502E               	movf	___fttol@f1+2,w,c
 12800  00222C  6E38               	movwf	___fttol@lval+2,c
 12801  00222E  6A39               	clrf	___fttol@lval+3,c
 12802  002230  0E8E               	movlw	142
 12803  002232  5E3A               	subwf	___fttol@exp1,f,c
 12804  002234  AE3A               	btfss	___fttol@exp1,7,c
 12805  002236  D010               	goto	l8745
 12806  002238  503A               	movf	___fttol@exp1,w,c
 12807  00223A  0A80               	xorlw	128
 12808  00223C  0F8F               	addlw	143
 12809  00223E  B0D8               	btfsc	status,0,c
 12810  002240  D003               	goto	l8741
 12811  002242  D00D               	goto	l8747
 12812  002244  D037               	goto	l1905
 12813  002246  D000               	goto	l8741
 12814  002248                     l8741:
 12815  002248  90D8               	bcf	status,0,c
 12816  00224A  3239               	rrcf	___fttol@lval+3,f,c
 12817  00224C  3238               	rrcf	___fttol@lval+2,f,c
 12818  00224E  3237               	rrcf	___fttol@lval+1,f,c
 12819  002250  3236               	rrcf	___fttol@lval,f,c
 12820  002252  3E3A               	incfsz	___fttol@exp1,f,c
 12821  002254  D7F9               	goto	l8741
 12822  002256  D019               	goto	l8755
 12823  002258                     l8745:
 12824  002258  0E17               	movlw	23
 12825  00225A  643A               	cpfsgt	___fttol@exp1,c
 12826  00225C  D011               	goto	l8753
 12827  00225E                     l8747:
 12828  00225E  0E00               	movlw	0
 12829  002260  6E2C               	movwf	?___fttol,c
 12830  002262  0E00               	movlw	0
 12831  002264  6E2D               	movwf	?___fttol+1,c
 12832  002266  0E00               	movlw	0
 12833  002268  6E2E               	movwf	?___fttol+2,c
 12834  00226A  0E00               	movlw	0
 12835  00226C  6E2F               	movwf	?___fttol+3,c
 12836  00226E  D022               	goto	l1905
 12837  002270  D007               	goto	l8753
 12838  002272                     l8751:
 12839  002272  90D8               	bcf	status,0,c
 12840  002274  3636               	rlcf	___fttol@lval,f,c
 12841  002276  3637               	rlcf	___fttol@lval+1,f,c
 12842  002278  3638               	rlcf	___fttol@lval+2,f,c
 12843  00227A  3639               	rlcf	___fttol@lval+3,f,c
 12844  00227C  063A               	decf	___fttol@exp1,f,c
 12845  00227E  D000               	goto	l8753
 12846  002280                     l8753:
 12847  002280  503A               	movf	___fttol@exp1,w,c
 12848  002282  B4D8               	btfsc	status,2,c
 12849  002284  D002               	goto	l8755
 12850  002286  D7F5               	goto	l8751
 12851  002288  D000               	goto	l8755
 12852  00228A                     l8755:
 12853  00228A  5035               	movf	___fttol@sign1,w,c
 12854  00228C  B4D8               	btfsc	status,2,c
 12855  00228E  D009               	goto	l8759
 12856  002290  1E39               	comf	___fttol@lval+3,f,c
 12857  002292  1E38               	comf	___fttol@lval+2,f,c
 12858  002294  1E37               	comf	___fttol@lval+1,f,c
 12859  002296  6C36               	negf	___fttol@lval,c
 12860  002298  0E00               	movlw	0
 12861  00229A  2237               	addwfc	___fttol@lval+1,f,c
 12862  00229C  2238               	addwfc	___fttol@lval+2,f,c
 12863  00229E  2239               	addwfc	___fttol@lval+3,f,c
 12864  0022A0  D000               	goto	l8759
 12865  0022A2                     l8759:
 12866  0022A2  C036  F02C         	movff	___fttol@lval,?___fttol
 12867  0022A6  C037  F02D         	movff	___fttol@lval+1,?___fttol+1
 12868  0022AA  C038  F02E         	movff	___fttol@lval+2,?___fttol+2
 12869  0022AE  C039  F02F         	movff	___fttol@lval+3,?___fttol+3
 12870  0022B2  D000               	goto	l1905
 12871  0022B4                     l1905:
 12872  0022B4  0012               	return		;funcret
 12873  0022B6                     __end_of___fttol:
 12874                           	opt stack 0
 12875                           tblptru	equ	0xFF8
 12876                           tblptrh	equ	0xFF7
 12877                           tblptrl	equ	0xFF6
 12878                           tablat	equ	0xFF5
 12879                           prodh	equ	0xFF4
 12880                           prodl	equ	0xFF3
 12881                           intcon	equ	0xFF2
 12882                           intcon2	equ	0xFF1
 12883                           postinc0	equ	0xFEE
 12884                           wreg	equ	0xFE8
 12885                           postdec1	equ	0xFE5
 12886                           fsr1l	equ	0xFE1
 12887                           indf2	equ	0xFDF
 12888                           postinc2	equ	0xFDE
 12889                           fsr2h	equ	0xFDA
 12890                           fsr2l	equ	0xFD9
 12891                           status	equ	0xFD8
 12892                           
 12893 ;; *************** function ___ftmul *****************
 12894 ;; Defined at:
 12895 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
 12896 ;; Parameters:    Size  Location     Type
 12897 ;;  f1              3   28[COMRAM] float 
 12898 ;;  f2              3   31[COMRAM] float 
 12899 ;; Auto vars:     Size  Location     Type
 12900 ;;  f3_as_produc    3   38[COMRAM] unsigned um
 12901 ;;  sign            1   42[COMRAM] unsigned char 
 12902 ;;  cntr            1   41[COMRAM] unsigned char 
 12903 ;;  exp             1   37[COMRAM] unsigned char 
 12904 ;; Return value:  Size  Location     Type
 12905 ;;                  3   28[COMRAM] float 
 12906 ;; Registers used:
 12907 ;;		wreg, status,2, status,0, cstack
 12908 ;; Tracked objects:
 12909 ;;		On entry : 0/0
 12910 ;;		On exit  : 0/0
 12911 ;;		Unchanged: 0/0
 12912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12913 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12914 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12915 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12916 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12917 ;;Total ram usage:       15 bytes
 12918 ;; Hardware stack levels used:    1
 12919 ;; Hardware stack levels required when called:    4
 12920 ;; This function calls:
 12921 ;;		___ftpack
 12922 ;; This function is called by:
 12923 ;;		_Update_Screen
 12924 ;;		_do_update_pwm
 12925 ;;		_read_volt
 12926 ;; This function uses a non-reentrant model
 12927 ;;
 12928                           
 12929                           	psect	text70
 12930  001E02                     __ptext70:
 12931                           	opt stack 0
 12932  001E02                     ___ftmul:
 12933                           	opt stack 25
 12934                           
 12935                           ;incstack = 0
 12936  001E02  C01F  F023         	movff	___ftmul@f1+2,??___ftmul
 12937  001E06  6A24               	clrf	(??___ftmul+1)& (0+255),c
 12938  001E08  6A25               	clrf	(??___ftmul+2)& (0+255),c
 12939  001E0A  341E               	rlcf	___ftmul@f1+1,w,c
 12940  001E0C  3623               	rlcf	??___ftmul& (0+255),f,c
 12941  001E0E  E301               	bnc	u6431
 12942  001E10  8024               	bsf	(??___ftmul+1)& (0+255),0,c
 12943  001E12                     u6431:
 12944  001E12  5023               	movf	??___ftmul,w,c
 12945  001E14  6E26               	movwf	___ftmul@exp,c
 12946  001E16  5026               	movf	___ftmul@exp,w,c
 12947  001E18  A4D8               	btfss	status,2,c
 12948  001E1A  D002               	goto	l8675
 12949  001E1C  D00E               	goto	l8677
 12950  001E1E  D06C               	goto	l1884
 12951  001E20                     l8675:
 12952  001E20  C022  F023         	movff	___ftmul@f2+2,??___ftmul
 12953  001E24  6A24               	clrf	(??___ftmul+1)& (0+255),c
 12954  001E26  6A25               	clrf	(??___ftmul+2)& (0+255),c
 12955  001E28  3421               	rlcf	___ftmul@f2+1,w,c
 12956  001E2A  3623               	rlcf	??___ftmul& (0+255),f,c
 12957  001E2C  E301               	bnc	u6451
 12958  001E2E  8024               	bsf	(??___ftmul+1)& (0+255),0,c
 12959  001E30                     u6451:
 12960  001E30  5023               	movf	??___ftmul,w,c
 12961  001E32  6E2B               	movwf	___ftmul@sign,c
 12962  001E34  502B               	movf	___ftmul@sign,w,c
 12963  001E36  A4D8               	btfss	status,2,c
 12964  001E38  D007               	goto	l8681
 12965  001E3A                     l8677:
 12966  001E3A  0E00               	movlw	0
 12967  001E3C  6E1D               	movwf	?___ftmul,c
 12968  001E3E  0E00               	movlw	0
 12969  001E40  6E1E               	movwf	?___ftmul+1,c
 12970  001E42  0E00               	movlw	0
 12971  001E44  6E1F               	movwf	?___ftmul+2,c
 12972  001E46  D058               	goto	l1884
 12973  001E48                     l8681:
 12974  001E48  502B               	movf	___ftmul@sign,w,c
 12975  001E4A  0F7B               	addlw	123
 12976  001E4C  2626               	addwf	___ftmul@exp,f,c
 12977  001E4E  C01F  F02B         	movff	___ftmul@f1+2,___ftmul@sign
 12978  001E52  5022               	movf	___ftmul@f2+2,w,c
 12979  001E54  1A2B               	xorwf	___ftmul@sign,f,c
 12980  001E56  0E80               	movlw	128
 12981  001E58  162B               	andwf	___ftmul@sign,f,c
 12982  001E5A  8E1E               	bsf	___ftmul@f1+1,7,c
 12983  001E5C  8E21               	bsf	___ftmul@f2+1,7,c
 12984  001E5E  0EFF               	movlw	255
 12985  001E60  1620               	andwf	___ftmul@f2,f,c
 12986  001E62  0EFF               	movlw	255
 12987  001E64  1621               	andwf	___ftmul@f2+1,f,c
 12988  001E66  0E00               	movlw	0
 12989  001E68  1622               	andwf	___ftmul@f2+2,f,c
 12990  001E6A  0E00               	movlw	0
 12991  001E6C  6E27               	movwf	___ftmul@f3_as_product,c
 12992  001E6E  0E00               	movlw	0
 12993  001E70  6E28               	movwf	___ftmul@f3_as_product+1,c
 12994  001E72  0E00               	movlw	0
 12995  001E74  6E29               	movwf	___ftmul@f3_as_product+2,c
 12996  001E76  0E07               	movlw	7
 12997  001E78  6E2A               	movwf	___ftmul@cntr,c
 12998  001E7A  D000               	goto	l8695
 12999  001E7C                     l8695:
 13000  001E7C  A01D               	btfss	___ftmul@f1,0,c
 13001  001E7E  D007               	goto	l8699
 13002  001E80  5020               	movf	___ftmul@f2,w,c
 13003  001E82  2627               	addwf	___ftmul@f3_as_product,f,c
 13004  001E84  5021               	movf	___ftmul@f2+1,w,c
 13005  001E86  2228               	addwfc	___ftmul@f3_as_product+1,f,c
 13006  001E88  5022               	movf	___ftmul@f2+2,w,c
 13007  001E8A  2229               	addwfc	___ftmul@f3_as_product+2,f,c
 13008  001E8C  D000               	goto	l8699
 13009  001E8E                     l8699:
 13010  001E8E  90D8               	bcf	status,0,c
 13011  001E90  321F               	rrcf	___ftmul@f1+2,f,c
 13012  001E92  321E               	rrcf	___ftmul@f1+1,f,c
 13013  001E94  321D               	rrcf	___ftmul@f1,f,c
 13014  001E96  90D8               	bcf	status,0,c
 13015  001E98  3620               	rlcf	___ftmul@f2,f,c
 13016  001E9A  3621               	rlcf	___ftmul@f2+1,f,c
 13017  001E9C  3622               	rlcf	___ftmul@f2+2,f,c
 13018  001E9E  2E2A               	decfsz	___ftmul@cntr,f,c
 13019  001EA0  D7ED               	goto	l8695
 13020  001EA2  D000               	goto	l8703
 13021  001EA4                     l8703:
 13022  001EA4  0E09               	movlw	9
 13023  001EA6  6E2A               	movwf	___ftmul@cntr,c
 13024  001EA8  D000               	goto	l8705
 13025  001EAA                     l8705:
 13026  001EAA  A01D               	btfss	___ftmul@f1,0,c
 13027  001EAC  D007               	goto	l8709
 13028  001EAE  5020               	movf	___ftmul@f2,w,c
 13029  001EB0  2627               	addwf	___ftmul@f3_as_product,f,c
 13030  001EB2  5021               	movf	___ftmul@f2+1,w,c
 13031  001EB4  2228               	addwfc	___ftmul@f3_as_product+1,f,c
 13032  001EB6  5022               	movf	___ftmul@f2+2,w,c
 13033  001EB8  2229               	addwfc	___ftmul@f3_as_product+2,f,c
 13034  001EBA  D000               	goto	l8709
 13035  001EBC                     l8709:
 13036  001EBC  90D8               	bcf	status,0,c
 13037  001EBE  321F               	rrcf	___ftmul@f1+2,f,c
 13038  001EC0  321E               	rrcf	___ftmul@f1+1,f,c
 13039  001EC2  321D               	rrcf	___ftmul@f1,f,c
 13040  001EC4  90D8               	bcf	status,0,c
 13041  001EC6  3229               	rrcf	___ftmul@f3_as_product+2,f,c
 13042  001EC8  3228               	rrcf	___ftmul@f3_as_product+1,f,c
 13043  001ECA  3227               	rrcf	___ftmul@f3_as_product,f,c
 13044  001ECC  2E2A               	decfsz	___ftmul@cntr,f,c
 13045  001ECE  D7ED               	goto	l8705
 13046  001ED0  D000               	goto	l8713
 13047  001ED2                     l8713:
 13048  001ED2  C027  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
 13049  001ED6  C028  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 13050  001EDA  C029  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 13051  001EDE  C026  F014         	movff	___ftmul@exp,___ftpack@exp
 13052  001EE2  C02B  F015         	movff	___ftmul@sign,___ftpack@sign
 13053  001EE6  EC6D  F013         	call	___ftpack	;wreg free
 13054  001EEA  C011  F01D         	movff	?___ftpack,?___ftmul
 13055  001EEE  C012  F01E         	movff	?___ftpack+1,?___ftmul+1
 13056  001EF2  C013  F01F         	movff	?___ftpack+2,?___ftmul+2
 13057  001EF6  D000               	goto	l1884
 13058  001EF8                     l1884:
 13059  001EF8  0012               	return		;funcret
 13060  001EFA                     __end_of___ftmul:
 13061                           	opt stack 0
 13062                           tblptru	equ	0xFF8
 13063                           tblptrh	equ	0xFF7
 13064                           tblptrl	equ	0xFF6
 13065                           tablat	equ	0xFF5
 13066                           prodh	equ	0xFF4
 13067                           prodl	equ	0xFF3
 13068                           intcon	equ	0xFF2
 13069                           intcon2	equ	0xFF1
 13070                           postinc0	equ	0xFEE
 13071                           wreg	equ	0xFE8
 13072                           postdec1	equ	0xFE5
 13073                           fsr1l	equ	0xFE1
 13074                           indf2	equ	0xFDF
 13075                           postinc2	equ	0xFDE
 13076                           fsr2h	equ	0xFDA
 13077                           fsr2l	equ	0xFD9
 13078                           status	equ	0xFD8
 13079                           
 13080 ;; *************** function ___ftdiv *****************
 13081 ;; Defined at:
 13082 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
 13083 ;; Parameters:    Size  Location     Type
 13084 ;;  f1              3   43[COMRAM] float 
 13085 ;;  f2              3   46[COMRAM] float 
 13086 ;; Auto vars:     Size  Location     Type
 13087 ;;  f3              3   53[COMRAM] float 
 13088 ;;  sign            1   57[COMRAM] unsigned char 
 13089 ;;  exp             1   56[COMRAM] unsigned char 
 13090 ;;  cntr            1   52[COMRAM] unsigned char 
 13091 ;; Return value:  Size  Location     Type
 13092 ;;                  3   43[COMRAM] float 
 13093 ;; Registers used:
 13094 ;;		wreg, status,2, status,0, cstack
 13095 ;; Tracked objects:
 13096 ;;		On entry : 0/0
 13097 ;;		On exit  : 0/0
 13098 ;;		Unchanged: 0/0
 13099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13100 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13101 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13102 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13103 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13104 ;;Total ram usage:       15 bytes
 13105 ;; Hardware stack levels used:    1
 13106 ;; Hardware stack levels required when called:    4
 13107 ;; This function calls:
 13108 ;;		___ftpack
 13109 ;; This function is called by:
 13110 ;;		_do_update_pwm
 13111 ;; This function uses a non-reentrant model
 13112 ;;
 13113                           
 13114                           	psect	text71
 13115  0022B6                     __ptext71:
 13116                           	opt stack 0
 13117  0022B6                     ___ftdiv:
 13118                           	opt stack 24
 13119                           
 13120                           ;incstack = 0
 13121  0022B6  C02E  F032         	movff	___ftdiv@f1+2,??___ftdiv
 13122  0022BA  6A33               	clrf	(??___ftdiv+1)& (0+255),c
 13123  0022BC  6A34               	clrf	(??___ftdiv+2)& (0+255),c
 13124  0022BE  342D               	rlcf	___ftdiv@f1+1,w,c
 13125  0022C0  3632               	rlcf	??___ftdiv& (0+255),f,c
 13126  0022C2  E301               	bnc	u6381
 13127  0022C4  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
 13128  0022C6                     u6381:
 13129  0022C6  5032               	movf	??___ftdiv,w,c
 13130  0022C8  6E39               	movwf	___ftdiv@exp,c
 13131  0022CA  5039               	movf	___ftdiv@exp,w,c
 13132  0022CC  A4D8               	btfss	status,2,c
 13133  0022CE  D002               	goto	l8629
 13134  0022D0  D00E               	goto	l8631
 13135  0022D2  D061               	goto	l1869
 13136  0022D4                     l8629:
 13137  0022D4  C031  F032         	movff	___ftdiv@f2+2,??___ftdiv
 13138  0022D8  6A33               	clrf	(??___ftdiv+1)& (0+255),c
 13139  0022DA  6A34               	clrf	(??___ftdiv+2)& (0+255),c
 13140  0022DC  3430               	rlcf	___ftdiv@f2+1,w,c
 13141  0022DE  3632               	rlcf	??___ftdiv& (0+255),f,c
 13142  0022E0  E301               	bnc	u6401
 13143  0022E2  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
 13144  0022E4                     u6401:
 13145  0022E4  5032               	movf	??___ftdiv,w,c
 13146  0022E6  6E3A               	movwf	___ftdiv@sign,c
 13147  0022E8  503A               	movf	___ftdiv@sign,w,c
 13148  0022EA  A4D8               	btfss	status,2,c
 13149  0022EC  D007               	goto	l8635
 13150  0022EE                     l8631:
 13151  0022EE  0E00               	movlw	0
 13152  0022F0  6E2C               	movwf	?___ftdiv,c
 13153  0022F2  0E00               	movlw	0
 13154  0022F4  6E2D               	movwf	?___ftdiv+1,c
 13155  0022F6  0E00               	movlw	0
 13156  0022F8  6E2E               	movwf	?___ftdiv+2,c
 13157  0022FA  D04D               	goto	l1869
 13158  0022FC                     l8635:
 13159  0022FC  0E00               	movlw	0
 13160  0022FE  6E36               	movwf	___ftdiv@f3,c
 13161  002300  0E00               	movlw	0
 13162  002302  6E37               	movwf	___ftdiv@f3+1,c
 13163  002304  0E00               	movlw	0
 13164  002306  6E38               	movwf	___ftdiv@f3+2,c
 13165  002308  503A               	movf	___ftdiv@sign,w,c
 13166  00230A  0F89               	addlw	137
 13167  00230C  5E39               	subwf	___ftdiv@exp,f,c
 13168  00230E  C02E  F03A         	movff	___ftdiv@f1+2,___ftdiv@sign
 13169  002312  5031               	movf	___ftdiv@f2+2,w,c
 13170  002314  1A3A               	xorwf	___ftdiv@sign,f,c
 13171  002316  0E80               	movlw	128
 13172  002318  163A               	andwf	___ftdiv@sign,f,c
 13173  00231A  8E2D               	bsf	___ftdiv@f1+1,7,c
 13174  00231C  0EFF               	movlw	255
 13175  00231E  162C               	andwf	___ftdiv@f1,f,c
 13176  002320  0EFF               	movlw	255
 13177  002322  162D               	andwf	___ftdiv@f1+1,f,c
 13178  002324  0E00               	movlw	0
 13179  002326  162E               	andwf	___ftdiv@f1+2,f,c
 13180  002328  8E30               	bsf	___ftdiv@f2+1,7,c
 13181  00232A  0EFF               	movlw	255
 13182  00232C  162F               	andwf	___ftdiv@f2,f,c
 13183  00232E  0EFF               	movlw	255
 13184  002330  1630               	andwf	___ftdiv@f2+1,f,c
 13185  002332  0E00               	movlw	0
 13186  002334  1631               	andwf	___ftdiv@f2+2,f,c
 13187  002336  0E18               	movlw	24
 13188  002338  6E35               	movwf	___ftdiv@cntr,c
 13189  00233A  D000               	goto	l8655
 13190  00233C                     l8655:
 13191  00233C  90D8               	bcf	status,0,c
 13192  00233E  3636               	rlcf	___ftdiv@f3,f,c
 13193  002340  3637               	rlcf	___ftdiv@f3+1,f,c
 13194  002342  3638               	rlcf	___ftdiv@f3+2,f,c
 13195  002344  502F               	movf	___ftdiv@f2,w,c
 13196  002346  5C2C               	subwf	___ftdiv@f1,w,c
 13197  002348  5030               	movf	___ftdiv@f2+1,w,c
 13198  00234A  582D               	subwfb	___ftdiv@f1+1,w,c
 13199  00234C  5031               	movf	___ftdiv@f2+2,w,c
 13200  00234E  582E               	subwfb	___ftdiv@f1+2,w,c
 13201  002350  A0D8               	btfss	status,0,c
 13202  002352  D007               	goto	l1872
 13203  002354  502F               	movf	___ftdiv@f2,w,c
 13204  002356  5E2C               	subwf	___ftdiv@f1,f,c
 13205  002358  5030               	movf	___ftdiv@f2+1,w,c
 13206  00235A  5A2D               	subwfb	___ftdiv@f1+1,f,c
 13207  00235C  5031               	movf	___ftdiv@f2+2,w,c
 13208  00235E  5A2E               	subwfb	___ftdiv@f1+2,f,c
 13209  002360  8036               	bsf	___ftdiv@f3,0,c
 13210  002362                     l1872:
 13211  002362  90D8               	bcf	status,0,c
 13212  002364  362C               	rlcf	___ftdiv@f1,f,c
 13213  002366  362D               	rlcf	___ftdiv@f1+1,f,c
 13214  002368  362E               	rlcf	___ftdiv@f1+2,f,c
 13215  00236A  2E35               	decfsz	___ftdiv@cntr,f,c
 13216  00236C  D7E7               	goto	l8655
 13217  00236E  D000               	goto	l8665
 13218  002370                     l8665:
 13219  002370  C036  F011         	movff	___ftdiv@f3,___ftpack@arg
 13220  002374  C037  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
 13221  002378  C038  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
 13222  00237C  C039  F014         	movff	___ftdiv@exp,___ftpack@exp
 13223  002380  C03A  F015         	movff	___ftdiv@sign,___ftpack@sign
 13224  002384  EC6D  F013         	call	___ftpack	;wreg free
 13225  002388  C011  F02C         	movff	?___ftpack,?___ftdiv
 13226  00238C  C012  F02D         	movff	?___ftpack+1,?___ftdiv+1
 13227  002390  C013  F02E         	movff	?___ftpack+2,?___ftdiv+2
 13228  002394  D000               	goto	l1869
 13229  002396                     l1869:
 13230  002396  0012               	return		;funcret
 13231  002398                     __end_of___ftdiv:
 13232                           	opt stack 0
 13233                           tblptru	equ	0xFF8
 13234                           tblptrh	equ	0xFF7
 13235                           tblptrl	equ	0xFF6
 13236                           tablat	equ	0xFF5
 13237                           prodh	equ	0xFF4
 13238                           prodl	equ	0xFF3
 13239                           intcon	equ	0xFF2
 13240                           intcon2	equ	0xFF1
 13241                           postinc0	equ	0xFEE
 13242                           wreg	equ	0xFE8
 13243                           postdec1	equ	0xFE5
 13244                           fsr1l	equ	0xFE1
 13245                           indf2	equ	0xFDF
 13246                           postinc2	equ	0xFDE
 13247                           fsr2h	equ	0xFDA
 13248                           fsr2l	equ	0xFD9
 13249                           status	equ	0xFD8
 13250                           
 13251 ;; *************** function ___ftpack *****************
 13252 ;; Defined at:
 13253 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 13254 ;; Parameters:    Size  Location     Type
 13255 ;;  arg             3   16[COMRAM] unsigned um
 13256 ;;  exp             1   19[COMRAM] unsigned char 
 13257 ;;  sign            1   20[COMRAM] unsigned char 
 13258 ;; Auto vars:     Size  Location     Type
 13259 ;;		None
 13260 ;; Return value:  Size  Location     Type
 13261 ;;                  3   16[COMRAM] float 
 13262 ;; Registers used:
 13263 ;;		wreg, status,2, status,0
 13264 ;; Tracked objects:
 13265 ;;		On entry : 0/0
 13266 ;;		On exit  : 0/0
 13267 ;;		Unchanged: 0/0
 13268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13269 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13271 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13272 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13273 ;;Total ram usage:        8 bytes
 13274 ;; Hardware stack levels used:    1
 13275 ;; Hardware stack levels required when called:    3
 13276 ;; This function calls:
 13277 ;;		Nothing
 13278 ;; This function is called by:
 13279 ;;		___awtoft
 13280 ;;		___ftdiv
 13281 ;;		___ftmul
 13282 ;;		___lbtoft
 13283 ;; This function uses a non-reentrant model
 13284 ;;
 13285                           
 13286                           	psect	text72
 13287  0026DA                     __ptext72:
 13288                           	opt stack 0
 13289  0026DA                     ___ftpack:
 13290                           	opt stack 25
 13291                           
 13292                           ;incstack = 0
 13293  0026DA  5014               	movf	___ftpack@exp,w,c
 13294  0026DC  B4D8               	btfsc	status,2,c
 13295  0026DE  D005               	goto	l8209
 13296  0026E0  5011               	movf	___ftpack@arg,w,c
 13297  0026E2  1012               	iorwf	___ftpack@arg+1,w,c
 13298  0026E4  1013               	iorwf	___ftpack@arg+2,w,c
 13299  0026E6  A4D8               	btfss	status,2,c
 13300  0026E8  D00E               	goto	l8215
 13301  0026EA                     l8209:
 13302  0026EA  0E00               	movlw	0
 13303  0026EC  6E11               	movwf	?___ftpack,c
 13304  0026EE  0E00               	movlw	0
 13305  0026F0  6E12               	movwf	?___ftpack+1,c
 13306  0026F2  0E00               	movlw	0
 13307  0026F4  6E13               	movwf	?___ftpack+2,c
 13308  0026F6  D053               	goto	l1797
 13309  0026F8  D006               	goto	l8215
 13310  0026FA                     l8213:
 13311  0026FA  2A14               	incf	___ftpack@exp,f,c
 13312  0026FC  90D8               	bcf	status,0,c
 13313  0026FE  3213               	rrcf	___ftpack@arg+2,f,c
 13314  002700  3212               	rrcf	___ftpack@arg+1,f,c
 13315  002702  3211               	rrcf	___ftpack@arg,f,c
 13316  002704  D000               	goto	l8215
 13317  002706                     l8215:
 13318  002706  0E00               	movlw	0
 13319  002708  1411               	andwf	___ftpack@arg,w,c
 13320  00270A  6E16               	movwf	??___ftpack& (0+255),c
 13321  00270C  0E00               	movlw	0
 13322  00270E  1412               	andwf	___ftpack@arg+1,w,c
 13323  002710  6E17               	movwf	(??___ftpack+1)& (0+255),c
 13324  002712  0EFE               	movlw	254
 13325  002714  1413               	andwf	___ftpack@arg+2,w,c
 13326  002716  6E18               	movwf	(??___ftpack+2)& (0+255),c
 13327  002718  5016               	movf	??___ftpack,w,c
 13328  00271A  1017               	iorwf	??___ftpack+1,w,c
 13329  00271C  1018               	iorwf	??___ftpack+2,w,c
 13330  00271E  B4D8               	btfsc	status,2,c
 13331  002720  D00E               	goto	l8221
 13332  002722  D7EB               	goto	l8213
 13333  002724  D00C               	goto	l8221
 13334  002726                     l8217:
 13335  002726  2A14               	incf	___ftpack@exp,f,c
 13336  002728  0E01               	movlw	1
 13337  00272A  2611               	addwf	___ftpack@arg,f,c
 13338  00272C  0E00               	movlw	0
 13339  00272E  2212               	addwfc	___ftpack@arg+1,f,c
 13340  002730  0E00               	movlw	0
 13341  002732  2213               	addwfc	___ftpack@arg+2,f,c
 13342  002734  90D8               	bcf	status,0,c
 13343  002736  3213               	rrcf	___ftpack@arg+2,f,c
 13344  002738  3212               	rrcf	___ftpack@arg+1,f,c
 13345  00273A  3211               	rrcf	___ftpack@arg,f,c
 13346  00273C  D000               	goto	l8221
 13347  00273E                     l8221:
 13348  00273E  0E00               	movlw	0
 13349  002740  1411               	andwf	___ftpack@arg,w,c
 13350  002742  6E16               	movwf	??___ftpack& (0+255),c
 13351  002744  0E00               	movlw	0
 13352  002746  1412               	andwf	___ftpack@arg+1,w,c
 13353  002748  6E17               	movwf	(??___ftpack+1)& (0+255),c
 13354  00274A  0EFF               	movlw	255
 13355  00274C  1413               	andwf	___ftpack@arg+2,w,c
 13356  00274E  6E18               	movwf	(??___ftpack+2)& (0+255),c
 13357  002750  5016               	movf	??___ftpack,w,c
 13358  002752  1017               	iorwf	??___ftpack+1,w,c
 13359  002754  1018               	iorwf	??___ftpack+2,w,c
 13360  002756  B4D8               	btfsc	status,2,c
 13361  002758  D008               	goto	l8225
 13362  00275A  D7E5               	goto	l8217
 13363  00275C  D006               	goto	l8225
 13364  00275E                     l8223:
 13365  00275E  0614               	decf	___ftpack@exp,f,c
 13366  002760  90D8               	bcf	status,0,c
 13367  002762  3611               	rlcf	___ftpack@arg,f,c
 13368  002764  3612               	rlcf	___ftpack@arg+1,f,c
 13369  002766  3613               	rlcf	___ftpack@arg+2,f,c
 13370  002768  D000               	goto	l8225
 13371  00276A                     l8225:
 13372  00276A  BE12               	btfsc	___ftpack@arg+1,7,c
 13373  00276C  D004               	goto	l1808
 13374  00276E  0E02               	movlw	2
 13375  002770  6014               	cpfslt	___ftpack@exp,c
 13376  002772  D7F5               	goto	l8223
 13377  002774  D000               	goto	l1808
 13378  002776                     l1808:
 13379  002776  B014               	btfsc	___ftpack@exp,0,c
 13380  002778  D002               	goto	l8231
 13381  00277A  9E12               	bcf	___ftpack@arg+1,7,c
 13382  00277C  D000               	goto	l8231
 13383  00277E                     l8231:
 13384  00277E  90D8               	bcf	status,0,c
 13385  002780  3214               	rrcf	___ftpack@exp,f,c
 13386  002782  5014               	movf	___ftpack@exp,w,c
 13387  002784  1213               	iorwf	___ftpack@arg+2,f,c
 13388  002786  5015               	movf	___ftpack@sign,w,c
 13389  002788  B4D8               	btfsc	status,2,c
 13390  00278A  D002               	goto	l8237
 13391  00278C  8E13               	bsf	___ftpack@arg+2,7,c
 13392  00278E  D000               	goto	l8237
 13393  002790                     l8237:
 13394  002790  C011  F011         	movff	___ftpack@arg,?___ftpack
 13395  002794  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
 13396  002798  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
 13397  00279C  D000               	goto	l1797
 13398  00279E                     l1797:
 13399  00279E  0012               	return		;funcret
 13400  0027A0                     __end_of___ftpack:
 13401                           	opt stack 0
 13402                           tblptru	equ	0xFF8
 13403                           tblptrh	equ	0xFF7
 13404                           tblptrl	equ	0xFF6
 13405                           tablat	equ	0xFF5
 13406                           prodh	equ	0xFF4
 13407                           prodl	equ	0xFF3
 13408                           intcon	equ	0xFF2
 13409                           intcon2	equ	0xFF1
 13410                           postinc0	equ	0xFEE
 13411                           wreg	equ	0xFE8
 13412                           postdec1	equ	0xFE5
 13413                           fsr1l	equ	0xFE1
 13414                           indf2	equ	0xFDF
 13415                           postinc2	equ	0xFDE
 13416                           fsr2h	equ	0xFDA
 13417                           fsr2l	equ	0xFD9
 13418                           status	equ	0xFD8
 13419                           
 13420 ;; *************** function _Wait_One_Sec *****************
 13421 ;; Defined at:
 13422 ;;		line 87 in file "utils.c"
 13423 ;; Parameters:    Size  Location     Type
 13424 ;;		None
 13425 ;; Auto vars:     Size  Location     Type
 13426 ;;  k               2   16[COMRAM] int 
 13427 ;; Return value:  Size  Location     Type
 13428 ;;		None               void
 13429 ;; Registers used:
 13430 ;;		wreg, status,2, status,0
 13431 ;; Tracked objects:
 13432 ;;		On entry : 0/0
 13433 ;;		On exit  : 0/0
 13434 ;;		Unchanged: 0/0
 13435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13437 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13439 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13440 ;;Total ram usage:        2 bytes
 13441 ;; Hardware stack levels used:    1
 13442 ;; Hardware stack levels required when called:    3
 13443 ;; This function calls:
 13444 ;;		Nothing
 13445 ;; This function is called by:
 13446 ;;		_Do_Beep_Good
 13447 ;;		_Do_Beep_Bad
 13448 ;;		_Do_Beep
 13449 ;; This function uses a non-reentrant model
 13450 ;;
 13451                           
 13452                           	psect	text73
 13453  003B82                     __ptext73:
 13454                           	opt stack 0
 13455  003B82                     _Wait_One_Sec:
 13456                           	opt stack 25
 13457                           
 13458                           ;utils.c: 89: for (int k=0;k<0x8000;k++);
 13459                           
 13460                           ;incstack = 0
 13461  003B82  0E00               	movlw	0
 13462  003B84  6E12               	movwf	Wait_One_Sec@k+1,c
 13463  003B86  0E00               	movlw	0
 13464  003B88  6E11               	movwf	Wait_One_Sec@k,c
 13465  003B8A                     l6325:
 13466  003B8A  0E80               	movlw	128
 13467  003B8C  5C12               	subwf	Wait_One_Sec@k+1,w,c
 13468  003B8E  B0D8               	btfsc	status,0,c
 13469  003B90  D005               	goto	l1350
 13470  003B92  D001               	goto	l6329
 13471  003B94  D003               	goto	l1350
 13472  003B96                     l6329:
 13473  003B96  4A11               	infsnz	Wait_One_Sec@k,f,c
 13474  003B98  2A12               	incf	Wait_One_Sec@k+1,f,c
 13475  003B9A  D7F7               	goto	l6325
 13476  003B9C                     l1350:
 13477  003B9C  0012               	return		;funcret
 13478  003B9E                     __end_of_Wait_One_Sec:
 13479                           	opt stack 0
 13480                           tblptru	equ	0xFF8
 13481                           tblptrh	equ	0xFF7
 13482                           tblptrl	equ	0xFF6
 13483                           tablat	equ	0xFF5
 13484                           prodh	equ	0xFF4
 13485                           prodl	equ	0xFF3
 13486                           intcon	equ	0xFF2
 13487                           intcon2	equ	0xFF1
 13488                           postinc0	equ	0xFEE
 13489                           wreg	equ	0xFE8
 13490                           postdec1	equ	0xFE5
 13491                           fsr1l	equ	0xFE1
 13492                           indf2	equ	0xFDF
 13493                           postinc2	equ	0xFDE
 13494                           fsr2h	equ	0xFDA
 13495                           fsr2l	equ	0xFD9
 13496                           status	equ	0xFD8
 13497                           
 13498 ;; *************** function _Deactivate_Buzzer *****************
 13499 ;; Defined at:
 13500 ;;		line 124 in file "utils.c"
 13501 ;; Parameters:    Size  Location     Type
 13502 ;;		None
 13503 ;; Auto vars:     Size  Location     Type
 13504 ;;		None
 13505 ;; Return value:  Size  Location     Type
 13506 ;;		None               void
 13507 ;; Registers used:
 13508 ;;		wreg, status,2
 13509 ;; Tracked objects:
 13510 ;;		On entry : 0/0
 13511 ;;		On exit  : 0/0
 13512 ;;		Unchanged: 0/0
 13513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13517 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13518 ;;Total ram usage:        0 bytes
 13519 ;; Hardware stack levels used:    1
 13520 ;; Hardware stack levels required when called:    3
 13521 ;; This function calls:
 13522 ;;		Nothing
 13523 ;; This function is called by:
 13524 ;;		_Test_Alarm
 13525 ;;		_Do_Beep_Good
 13526 ;;		_Do_Beep_Bad
 13527 ;;		_Do_Beep
 13528 ;; This function uses a non-reentrant model
 13529 ;;
 13530                           
 13531                           	psect	text74
 13532  003E54                     __ptext74:
 13533                           	opt stack 0
 13534  003E54                     _Deactivate_Buzzer:
 13535                           	opt stack 26
 13536                           
 13537                           ;utils.c: 126: CCP2CON = 0x0;
 13538                           
 13539                           ;incstack = 0
 13540  003E54  0E00               	movlw	0
 13541  003E56  6EBA               	movwf	4026,c	;volatile
 13542                           
 13543                           ;utils.c: 127: PORTBbits.RB3 = 0;
 13544  003E58  9681               	bcf	3969,3,c	;volatile
 13545  003E5A  0012               	return		;funcret
 13546  003E5C                     __end_of_Deactivate_Buzzer:
 13547                           	opt stack 0
 13548                           tblptru	equ	0xFF8
 13549                           tblptrh	equ	0xFF7
 13550                           tblptrl	equ	0xFF6
 13551                           tablat	equ	0xFF5
 13552                           prodh	equ	0xFF4
 13553                           prodl	equ	0xFF3
 13554                           intcon	equ	0xFF2
 13555                           intcon2	equ	0xFF1
 13556                           postinc0	equ	0xFEE
 13557                           wreg	equ	0xFE8
 13558                           postdec1	equ	0xFE5
 13559                           fsr1l	equ	0xFE1
 13560                           indf2	equ	0xFDF
 13561                           postinc2	equ	0xFDE
 13562                           fsr2h	equ	0xFDA
 13563                           fsr2l	equ	0xFD9
 13564                           status	equ	0xFD8
 13565                           
 13566 ;; *************** function _Activate_Buzzer_500Hz *****************
 13567 ;; Defined at:
 13568 ;;		line 100 in file "utils.c"
 13569 ;; Parameters:    Size  Location     Type
 13570 ;;		None
 13571 ;; Auto vars:     Size  Location     Type
 13572 ;;		None
 13573 ;; Return value:  Size  Location     Type
 13574 ;;		None               void
 13575 ;; Registers used:
 13576 ;;		wreg, status,2
 13577 ;; Tracked objects:
 13578 ;;		On entry : 0/0
 13579 ;;		On exit  : 0/0
 13580 ;;		Unchanged: 0/0
 13581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13585 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13586 ;;Total ram usage:        0 bytes
 13587 ;; Hardware stack levels used:    1
 13588 ;; Hardware stack levels required when called:    3
 13589 ;; This function calls:
 13590 ;;		Nothing
 13591 ;; This function is called by:
 13592 ;;		_Do_Beep_Bad
 13593 ;; This function uses a non-reentrant model
 13594 ;;
 13595                           
 13596                           	psect	text75
 13597  003D24                     __ptext75:
 13598                           	opt stack 0
 13599  003D24                     _Activate_Buzzer_500Hz:
 13600                           	opt stack 25
 13601                           
 13602                           ;utils.c: 102: PR2 = 0b11111001 ;
 13603                           
 13604                           ;incstack = 0
 13605  003D24  0EF9               	movlw	249
 13606  003D26  6ECB               	movwf	4043,c	;volatile
 13607                           
 13608                           ;utils.c: 103: T2CON = 0b00000111 ;
 13609  003D28  0E07               	movlw	7
 13610  003D2A  6ECA               	movwf	4042,c	;volatile
 13611                           
 13612                           ;utils.c: 104: CCPR2L = 0b01111100 ;
 13613  003D2C  0E7C               	movlw	124
 13614  003D2E  6EBB               	movwf	4027,c	;volatile
 13615                           
 13616                           ;utils.c: 105: CCP2CON = 0b00111100 ;
 13617  003D30  0E3C               	movlw	60
 13618  003D32  6EBA               	movwf	4026,c	;volatile
 13619  003D34  0012               	return		;funcret
 13620  003D36                     __end_of_Activate_Buzzer_500Hz:
 13621                           	opt stack 0
 13622                           tblptru	equ	0xFF8
 13623                           tblptrh	equ	0xFF7
 13624                           tblptrl	equ	0xFF6
 13625                           tablat	equ	0xFF5
 13626                           prodh	equ	0xFF4
 13627                           prodl	equ	0xFF3
 13628                           intcon	equ	0xFF2
 13629                           intcon2	equ	0xFF1
 13630                           postinc0	equ	0xFEE
 13631                           wreg	equ	0xFE8
 13632                           postdec1	equ	0xFE5
 13633                           fsr1l	equ	0xFE1
 13634                           indf2	equ	0xFDF
 13635                           postinc2	equ	0xFDE
 13636                           fsr2h	equ	0xFDA
 13637                           fsr2l	equ	0xFD9
 13638                           status	equ	0xFD8
 13639                           
 13640 ;; *************** function _Decrease_Alarm_Time *****************
 13641 ;; Defined at:
 13642 ;;		line 86 in file "Setup_Alarm_Time.c"
 13643 ;; Parameters:    Size  Location     Type
 13644 ;;		None
 13645 ;; Auto vars:     Size  Location     Type
 13646 ;;		None
 13647 ;; Return value:  Size  Location     Type
 13648 ;;		None               void
 13649 ;; Registers used:
 13650 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13651 ;; Tracked objects:
 13652 ;;		On entry : 0/0
 13653 ;;		On exit  : 0/0
 13654 ;;		Unchanged: 0/0
 13655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13660 ;;Total ram usage:        0 bytes
 13661 ;; Hardware stack levels used:    1
 13662 ;; Hardware stack levels required when called:   11
 13663 ;; This function calls:
 13664 ;;		_Update_Setup_Alarm_Time_Screen
 13665 ;; This function is called by:
 13666 ;;		_Do_Setup_Alarm_Time
 13667 ;; This function uses a non-reentrant model
 13668 ;;
 13669                           
 13670                           	psect	text76
 13671  0035F8                     __ptext76:
 13672                           	opt stack 0
 13673  0035F8                     _Decrease_Alarm_Time:
 13674                           	opt stack 18
 13675                           
 13676                           ;Setup_Alarm_Time.c: 88: switch (Select_Alarm_Field)
 13677                           
 13678                           ;incstack = 0
 13679  0035F8  D018               	goto	l9225
 13680  0035FA                     l9205:
 13681                           
 13682                           ;Setup_Alarm_Time.c: 91: if (setup_alarm_hour == 0) setup_alarm_hour = 23;
 13683  0035FA  5064               	movf	_setup_alarm_hour,w,c
 13684  0035FC  A4D8               	btfss	status,2,c
 13685  0035FE  D003               	goto	l9209
 13686  003600  0E17               	movlw	23
 13687  003602  6E64               	movwf	_setup_alarm_hour,c
 13688  003604  D01D               	goto	l9227
 13689  003606                     l9209:
 13690                           
 13691                           ;Setup_Alarm_Time.c: 92: else --setup_alarm_hour;
 13692  003606  0664               	decf	_setup_alarm_hour,f,c
 13693                           
 13694                           ;Setup_Alarm_Time.c: 93: break;
 13695  003608  D01B               	goto	l9227
 13696  00360A                     l9211:
 13697                           
 13698                           ;Setup_Alarm_Time.c: 96: if (setup_alarm_minute == 0) setup_alarm_minute = 59;
 13699  00360A  5065               	movf	_setup_alarm_minute,w,c
 13700  00360C  A4D8               	btfss	status,2,c
 13701  00360E  D003               	goto	l9215
 13702  003610  0E3B               	movlw	59
 13703  003612  6E65               	movwf	_setup_alarm_minute,c
 13704  003614  D015               	goto	l9227
 13705  003616                     l9215:
 13706                           
 13707                           ;Setup_Alarm_Time.c: 97: else --setup_alarm_minute;
 13708  003616  0665               	decf	_setup_alarm_minute,f,c
 13709                           
 13710                           ;Setup_Alarm_Time.c: 98: break;
 13711  003618  D013               	goto	l9227
 13712  00361A                     l9217:
 13713                           
 13714                           ;Setup_Alarm_Time.c: 101: if (setup_alarm_second == 0) setup_alarm_second = 59;
 13715  00361A  5066               	movf	_setup_alarm_second,w,c
 13716  00361C  A4D8               	btfss	status,2,c
 13717  00361E  D003               	goto	l9221
 13718  003620  0E3B               	movlw	59
 13719  003622  6E66               	movwf	_setup_alarm_second,c
 13720  003624  D00D               	goto	l9227
 13721  003626                     l9221:
 13722                           
 13723                           ;Setup_Alarm_Time.c: 102: else --setup_alarm_second;
 13724  003626  0666               	decf	_setup_alarm_second,f,c
 13725                           
 13726                           ;Setup_Alarm_Time.c: 107: }
 13727                           
 13728                           ;Setup_Alarm_Time.c: 106: break;
 13729                           
 13730                           ;Setup_Alarm_Time.c: 105: default:
 13731                           
 13732                           ;Setup_Alarm_Time.c: 103: break;
 13733  003628  D00B               	goto	l9227
 13734  00362A                     l9225:
 13735  00362A  5052               	movf	_Select_Alarm_Field,w,c
 13736                           
 13737                           ; Switch size 1, requested type "space"
 13738                           ; Number of cases is 3, Range of values is 0 to 2
 13739                           ; switch strategies available:
 13740                           ; Name         Instructions Cycles
 13741                           ; simple_byte           10     6 (average)
 13742                           ;	Chosen strategy is simple_byte
 13743  00362C  0A00               	xorlw	0	; case 0
 13744  00362E  B4D8               	btfsc	status,2,c
 13745  003630  D7E4               	goto	l9205
 13746  003632  0A01               	xorlw	1	; case 1
 13747  003634  B4D8               	btfsc	status,2,c
 13748  003636  D7E9               	goto	l9211
 13749  003638  0A03               	xorlw	3	; case 2
 13750  00363A  B4D8               	btfsc	status,2,c
 13751  00363C  D7EE               	goto	l9217
 13752  00363E  D000               	goto	l9227
 13753  003640                     l9227:
 13754                           
 13755                           ;Setup_Alarm_Time.c: 108: Update_Setup_Alarm_Time_Screen();
 13756  003640  EC6F  F010         	call	_Update_Setup_Alarm_Time_Screen	;wreg free
 13757  003644  0012               	return		;funcret
 13758  003646                     __end_of_Decrease_Alarm_Time:
 13759                           	opt stack 0
 13760                           tblptru	equ	0xFF8
 13761                           tblptrh	equ	0xFF7
 13762                           tblptrl	equ	0xFF6
 13763                           tablat	equ	0xFF5
 13764                           prodh	equ	0xFF4
 13765                           prodl	equ	0xFF3
 13766                           intcon	equ	0xFF2
 13767                           intcon2	equ	0xFF1
 13768                           postinc0	equ	0xFEE
 13769                           wreg	equ	0xFE8
 13770                           postdec1	equ	0xFE5
 13771                           fsr1l	equ	0xFE1
 13772                           indf2	equ	0xFDF
 13773                           postinc2	equ	0xFDE
 13774                           fsr2h	equ	0xFDA
 13775                           fsr2l	equ	0xFD9
 13776                           status	equ	0xFD8
 13777                           
 13778 ;; *************** function _Update_Setup_Alarm_Time_Screen *****************
 13779 ;; Defined at:
 13780 ;;		line 162 in file "Setup_Alarm_Time.c"
 13781 ;; Parameters:    Size  Location     Type
 13782 ;;		None
 13783 ;; Auto vars:     Size  Location     Type
 13784 ;;		None
 13785 ;; Return value:  Size  Location     Type
 13786 ;;		None               void
 13787 ;; Registers used:
 13788 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13789 ;; Tracked objects:
 13790 ;;		On entry : 0/0
 13791 ;;		On exit  : 0/0
 13792 ;;		Unchanged: 0/0
 13793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13798 ;;Total ram usage:        0 bytes
 13799 ;; Hardware stack levels used:    1
 13800 ;; Hardware stack levels required when called:   10
 13801 ;; This function calls:
 13802 ;;		___awdiv
 13803 ;;		___awmod
 13804 ;;		_drawtext
 13805 ;;		_printf
 13806 ;; This function is called by:
 13807 ;;		_Do_Setup_Alarm_Time
 13808 ;;		_Increase_Alarm_Time
 13809 ;;		_Decrease_Alarm_Time
 13810 ;; This function uses a non-reentrant model
 13811 ;;
 13812                           
 13813                           	psect	text77
 13814  0020DE                     __ptext77:
 13815                           	opt stack 0
 13816  0020DE                     _Update_Setup_Alarm_Time_Screen:
 13817                           	opt stack 19
 13818                           
 13819                           ;Setup_Alarm_Time.c: 164: printf ("%x:%x:%x\r\n", setup_alarm_hour,setup_alarm_minute,se
      +                          tup_alarm_second);
 13820                           
 13821                           ;incstack = 0
 13822  0020DE  0E9F               	movlw	low STR_26
 13823  0020E0  6E1D               	movwf	printf@f,c
 13824  0020E2  0EFF               	movlw	high STR_26
 13825  0020E4  6E1E               	movwf	printf@f+1,c
 13826  0020E6  C064  F01F         	movff	_setup_alarm_hour,?_printf+2
 13827  0020EA  6A20               	clrf	?_printf+3,c
 13828  0020EC  C065  F021         	movff	_setup_alarm_minute,?_printf+4
 13829  0020F0  6A22               	clrf	?_printf+5,c
 13830  0020F2  C066  F023         	movff	_setup_alarm_second,?_printf+6
 13831  0020F6  6A24               	clrf	?_printf+7,c
 13832  0020F8  ECF7  F004         	call	_printf	;wreg free
 13833                           
 13834                           ;Setup_Alarm_Time.c: 165: setup_alarm_time[0] = (setup_alarm_hour/10) + '0';
 13835  0020FC  C064  F134         	movff	_setup_alarm_hour,___awdiv@dividend
 13836  002100  0101               	movlb	1	; () banked
 13837  002102  6B35               	clrf	(___awdiv@dividend+1)& (0+255),b
 13838  002104  0E00               	movlw	0
 13839  002106  0101               	movlb	1	; () banked
 13840  002108  6F37               	movwf	(___awdiv@divisor+1)& (0+255),b
 13841  00210A  0E0A               	movlw	10
 13842  00210C  6F36               	movwf	___awdiv@divisor& (0+255),b
 13843  00210E  EC3A  F012         	call	___awdiv	;wreg free
 13844  002112  0101               	movlb	1	; () banked
 13845  002114  5134               	movf	?___awdiv& (0+255),w,b
 13846  002116  0F30               	addlw	48
 13847  002118  0100               	movlb	0	; () banked
 13848  00211A  6F94               	movwf	_setup_alarm_time& (0+255),b
 13849                           
 13850                           ; BSR set to: 0
 13851                           ;Setup_Alarm_Time.c: 166: setup_alarm_time[1] = (setup_alarm_hour%10) + '0';;
 13852  00211C  C064  F03B         	movff	_setup_alarm_hour,___awmod@dividend
 13853  002120  6A3C               	clrf	___awmod@dividend+1,c
 13854  002122  0E00               	movlw	0
 13855  002124  6E3E               	movwf	___awmod@divisor+1,c
 13856  002126  0E0A               	movlw	10
 13857  002128  6E3D               	movwf	___awmod@divisor,c
 13858  00212A  ECD9  F017         	call	___awmod	;wreg free
 13859  00212E  503B               	movf	?___awmod,w,c
 13860  002130  0F30               	addlw	48
 13861  002132  0100               	movlb	0	; () banked
 13862  002134  6F95               	movwf	(_setup_alarm_time+1)& (0+255),b
 13863                           
 13864                           ; BSR set to: 0
 13865                           ;Setup_Alarm_Time.c: 167: setup_alarm_time[3] = (setup_alarm_minute/10) + '0';;
 13866  002136  C065  F134         	movff	_setup_alarm_minute,___awdiv@dividend
 13867  00213A  0101               	movlb	1	; () banked
 13868  00213C  6B35               	clrf	(___awdiv@dividend+1)& (0+255),b
 13869  00213E  0E00               	movlw	0
 13870  002140  0101               	movlb	1	; () banked
 13871  002142  6F37               	movwf	(___awdiv@divisor+1)& (0+255),b
 13872  002144  0E0A               	movlw	10
 13873  002146  6F36               	movwf	___awdiv@divisor& (0+255),b
 13874  002148  EC3A  F012         	call	___awdiv	;wreg free
 13875  00214C  0101               	movlb	1	; () banked
 13876  00214E  5134               	movf	?___awdiv& (0+255),w,b
 13877  002150  0F30               	addlw	48
 13878  002152  0100               	movlb	0	; () banked
 13879  002154  6F97               	movwf	(_setup_alarm_time+3)& (0+255),b
 13880                           
 13881                           ; BSR set to: 0
 13882                           ;Setup_Alarm_Time.c: 168: setup_alarm_time[4] = (setup_alarm_minute%10) + '0';;
 13883  002156  C065  F03B         	movff	_setup_alarm_minute,___awmod@dividend
 13884  00215A  6A3C               	clrf	___awmod@dividend+1,c
 13885  00215C  0E00               	movlw	0
 13886  00215E  6E3E               	movwf	___awmod@divisor+1,c
 13887  002160  0E0A               	movlw	10
 13888  002162  6E3D               	movwf	___awmod@divisor,c
 13889  002164  ECD9  F017         	call	___awmod	;wreg free
 13890  002168  503B               	movf	?___awmod,w,c
 13891  00216A  0F30               	addlw	48
 13892  00216C  0100               	movlb	0	; () banked
 13893  00216E  6F98               	movwf	(_setup_alarm_time+4)& (0+255),b
 13894                           
 13895                           ; BSR set to: 0
 13896                           ;Setup_Alarm_Time.c: 169: setup_alarm_time[6] = (setup_alarm_second/10) + '0';;
 13897  002170  C066  F134         	movff	_setup_alarm_second,___awdiv@dividend
 13898  002174  0101               	movlb	1	; () banked
 13899  002176  6B35               	clrf	(___awdiv@dividend+1)& (0+255),b
 13900  002178  0E00               	movlw	0
 13901  00217A  0101               	movlb	1	; () banked
 13902  00217C  6F37               	movwf	(___awdiv@divisor+1)& (0+255),b
 13903  00217E  0E0A               	movlw	10
 13904  002180  6F36               	movwf	___awdiv@divisor& (0+255),b
 13905  002182  EC3A  F012         	call	___awdiv	;wreg free
 13906  002186  0101               	movlb	1	; () banked
 13907  002188  5134               	movf	?___awdiv& (0+255),w,b
 13908  00218A  0F30               	addlw	48
 13909  00218C  0100               	movlb	0	; () banked
 13910  00218E  6F9A               	movwf	(_setup_alarm_time+6)& (0+255),b
 13911                           
 13912                           ; BSR set to: 0
 13913                           ;Setup_Alarm_Time.c: 170: setup_alarm_time[7] = (setup_alarm_second%10) + '0';;
 13914  002190  C066  F03B         	movff	_setup_alarm_second,___awmod@dividend
 13915  002194  6A3C               	clrf	___awmod@dividend+1,c
 13916  002196  0E00               	movlw	0
 13917  002198  6E3E               	movwf	___awmod@divisor+1,c
 13918  00219A  0E0A               	movlw	10
 13919  00219C  6E3D               	movwf	___awmod@divisor,c
 13920  00219E  ECD9  F017         	call	___awmod	;wreg free
 13921  0021A2  503B               	movf	?___awmod,w,c
 13922  0021A4  0F30               	addlw	48
 13923  0021A6  0100               	movlb	0	; () banked
 13924  0021A8  6F9B               	movwf	(_setup_alarm_time+7)& (0+255),b
 13925                           
 13926                           ;Setup_Alarm_Time.c: 171: drawtext(15, 52, setup_alarm_time, 0x07FF, 0x0000, 2);
 13927  0021AA  0E34               	movlw	52
 13928  0021AC  6E39               	movwf	drawtext@y,c
 13929  0021AE  0E94               	movlw	low _setup_alarm_time
 13930  0021B0  6E3A               	movwf	drawtext@_text,c
 13931  0021B2  0E00               	movlw	high _setup_alarm_time
 13932  0021B4  6E3B               	movwf	drawtext@_text+1,c
 13933  0021B6  0E07               	movlw	7
 13934  0021B8  6E3D               	movwf	drawtext@color+1,c
 13935  0021BA  683C               	setf	drawtext@color,c
 13936  0021BC  0E00               	movlw	0
 13937  0021BE  6E3F               	movwf	drawtext@bg+1,c
 13938  0021C0  0E00               	movlw	0
 13939  0021C2  6E3E               	movwf	drawtext@bg,c
 13940  0021C4  0E02               	movlw	2
 13941  0021C6  6E40               	movwf	drawtext@size,c
 13942  0021C8  0E0F               	movlw	15
 13943  0021CA  ECEA  F00C         	call	_drawtext
 13944  0021CE  0012               	return		;funcret
 13945  0021D0                     __end_of_Update_Setup_Alarm_Time_Screen:
 13946                           	opt stack 0
 13947                           tblptru	equ	0xFF8
 13948                           tblptrh	equ	0xFF7
 13949                           tblptrl	equ	0xFF6
 13950                           tablat	equ	0xFF5
 13951                           prodh	equ	0xFF4
 13952                           prodl	equ	0xFF3
 13953                           intcon	equ	0xFF2
 13954                           intcon2	equ	0xFF1
 13955                           postinc0	equ	0xFEE
 13956                           wreg	equ	0xFE8
 13957                           postdec1	equ	0xFE5
 13958                           fsr1l	equ	0xFE1
 13959                           indf2	equ	0xFDF
 13960                           postinc2	equ	0xFDE
 13961                           fsr2h	equ	0xFDA
 13962                           fsr2l	equ	0xFD9
 13963                           status	equ	0xFD8
 13964                           
 13965 ;; *************** function _printf *****************
 13966 ;; Defined at:
 13967 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 13968 ;; Parameters:    Size  Location     Type
 13969 ;;  f               2   28[COMRAM] PTR const unsigned char 
 13970 ;;		 -> STR_35(22), STR_26(11), STR_3(20), STR_2(21), 
 13971 ;;		 -> STR_1(30), 
 13972 ;; Auto vars:     Size  Location     Type
 13973 ;;  idx             1   46[COMRAM] unsigned char 
 13974 ;;  tmpval          4    0        struct .
 13975 ;;  cp              3    0        PTR const unsigned char 
 13976 ;;  width           2   53[COMRAM] int 
 13977 ;;  val             2   50[COMRAM] unsigned int 
 13978 ;;  ap              2   47[COMRAM] PTR void [1]
 13979 ;;		 -> ?_printf(2), 
 13980 ;;  len             2    0        unsigned int 
 13981 ;;  c               1   55[COMRAM] char 
 13982 ;;  flag            1   52[COMRAM] unsigned char 
 13983 ;;  prec            1   49[COMRAM] char 
 13984 ;; Return value:  Size  Location     Type
 13985 ;;                  2   28[COMRAM] int 
 13986 ;; Registers used:
 13987 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13988 ;; Tracked objects:
 13989 ;;		On entry : 0/0
 13990 ;;		On exit  : 0/0
 13991 ;;		Unchanged: 0/0
 13992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13993 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13994 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13995 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13996 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13997 ;;Total ram usage:       28 bytes
 13998 ;; Hardware stack levels used:    1
 13999 ;; Hardware stack levels required when called:    4
 14000 ;; This function calls:
 14001 ;;		___lwdiv
 14002 ;;		___lwmod
 14003 ;;		___wmul
 14004 ;;		_isdigit
 14005 ;;		_putch
 14006 ;; This function is called by:
 14007 ;;		_main
 14008 ;;		_Update_Setup_Alarm_Time_Screen
 14009 ;;		_check_for_button_input
 14010 ;; This function uses a non-reentrant model
 14011 ;;
 14012                           
 14013                           	psect	text78
 14014  0009EE                     __ptext78:
 14015                           	opt stack 0
 14016  0009EE                     _printf:
 14017                           	opt stack 26
 14018                           
 14019                           ;doprnt.c: 466: va_list ap;
 14020                           ;doprnt.c: 499: signed char c;
 14021                           ;doprnt.c: 501: int width;
 14022                           ;doprnt.c: 506: signed char prec;
 14023                           ;doprnt.c: 508: unsigned char flag;
 14024                           ;doprnt.c: 523: union {
 14025                           ;doprnt.c: 524: unsigned long vd;
 14026                           ;doprnt.c: 525: double integ;
 14027                           ;doprnt.c: 526: } tmpval;
 14028                           ;doprnt.c: 528: unsigned int val;
 14029                           ;doprnt.c: 529: unsigned len;
 14030                           ;doprnt.c: 530: const char * cp;
 14031                           ;doprnt.c: 533: *ap = __va_start();
 14032                           
 14033                           ;incstack = 0
 14034  0009EE  0E1F               	movlw	low (?_printf+2)
 14035  0009F0  6E30               	movwf	printf@ap,c
 14036  0009F2  0E00               	movlw	high (?_printf+2)
 14037  0009F4  6E31               	movwf	printf@ap+1,c
 14038                           
 14039                           ;doprnt.c: 536: while(c = *f++) {
 14040  0009F6  D199               	goto	l8477
 14041  0009F8                     l8351:
 14042                           
 14043                           ;doprnt.c: 538: if(c != '%')
 14044  0009F8  0E25               	movlw	37
 14045  0009FA  1838               	xorwf	printf@c,w,c
 14046  0009FC  B4D8               	btfsc	status,2,c
 14047  0009FE  D004               	goto	l8355
 14048                           
 14049                           ;doprnt.c: 540: {
 14050                           ;doprnt.c: 541: (putch(c) );
 14051  000A00  5038               	movf	printf@c,w,c
 14052  000A02  ECEE  F01E         	call	_putch
 14053                           
 14054                           ;doprnt.c: 542: continue;
 14055  000A06  D191               	goto	l8477
 14056  000A08                     l8355:
 14057                           
 14058                           ;doprnt.c: 543: }
 14059                           ;doprnt.c: 546: width = 0;
 14060  000A08  0E00               	movlw	0
 14061  000A0A  6E37               	movwf	printf@width+1,c
 14062  000A0C  0E00               	movlw	0
 14063  000A0E  6E36               	movwf	printf@width,c
 14064                           
 14065                           ;doprnt.c: 548: flag = 0;
 14066  000A10  0E00               	movlw	0
 14067  000A12  6E35               	movwf	printf@flag,c
 14068                           
 14069                           ;doprnt.c: 551: switch(*f) {
 14070                           
 14071                           ;doprnt.c: 550: for(;;) {
 14072  000A14  D005               	goto	l8361
 14073  000A16                     l8357:
 14074                           
 14075                           ;doprnt.c: 580: flag |= 0x04;
 14076  000A16  8435               	bsf	printf@flag,2,c
 14077                           
 14078                           ;doprnt.c: 581: f++;
 14079  000A18  4A1D               	infsnz	printf@f,f,c
 14080  000A1A  2A1E               	incf	printf@f+1,f,c
 14081                           
 14082                           ;doprnt.c: 582: continue;
 14083  000A1C  D001               	goto	l8361
 14084                           
 14085                           ;doprnt.c: 584: }
 14086  000A1E  D00B               	goto	l8363
 14087  000A20                     l8361:
 14088  000A20  C01D  FFF6         	movff	printf@f,tblptrl
 14089  000A24  C01E  FFF7         	movff	printf@f+1,tblptrh
 14090  000A28                     	if	0	;tblptru may be non-zero
 14091  000A28                     	endif
 14092  000A28                     	if	0	;tblptru may be non-zero
 14093  000A28                     	endif
 14094  000A28  0008               	tblrd		*
 14095  000A2A  50F5               	movf	tablat,w,c
 14096                           
 14097                           ; Switch size 1, requested type "space"
 14098                           ; Number of cases is 1, Range of values is 48 to 48
 14099                           ; switch strategies available:
 14100                           ; Name         Instructions Cycles
 14101                           ; simple_byte            4     3 (average)
 14102                           ;	Chosen strategy is simple_byte
 14103  000A2C  0A30               	xorlw	48	; case 48
 14104  000A2E  B4D8               	btfsc	status,2,c
 14105  000A30  D7F2               	goto	l8357
 14106                           
 14107                           ;doprnt.c: 585: break;
 14108  000A32  D001               	goto	l8363
 14109                           
 14110                           ;doprnt.c: 586: }
 14111  000A34  D7F5               	goto	l8361
 14112  000A36                     l8363:
 14113                           
 14114                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 14115  000A36  C01D  FFF6         	movff	printf@f,tblptrl
 14116  000A3A  C01E  FFF7         	movff	printf@f+1,tblptrh
 14117  000A3E                     	if	0	;tblptru may be non-zero
 14118  000A3E                     	endif
 14119  000A3E                     	if	0	;tblptru may be non-zero
 14120  000A3E                     	endif
 14121  000A3E  0008               	tblrd		*
 14122  000A40  50F5               	movf	tablat,w,c
 14123  000A42  EC73  F01D         	call	_isdigit
 14124  000A46  A0D8               	btfss	status,0,c
 14125  000A48  D03B               	goto	l8379
 14126                           
 14127                           ;doprnt.c: 598: width = 0;
 14128  000A4A  0E00               	movlw	0
 14129  000A4C  6E37               	movwf	printf@width+1,c
 14130  000A4E  0E00               	movlw	0
 14131  000A50  6E36               	movwf	printf@width,c
 14132  000A52  D000               	goto	l8367
 14133  000A54                     l8367:
 14134                           
 14135                           ;doprnt.c: 600: width *= 10;
 14136  000A54  C036  F011         	movff	printf@width,___wmul@multiplier
 14137  000A58  C037  F012         	movff	printf@width+1,___wmul@multiplier+1
 14138  000A5C  0E00               	movlw	0
 14139  000A5E  6E14               	movwf	___wmul@multiplicand+1,c
 14140  000A60  0E0A               	movlw	10
 14141  000A62  6E13               	movwf	___wmul@multiplicand,c
 14142  000A64  EC27  F01D         	call	___wmul	;wreg free
 14143  000A68  C011  F036         	movff	?___wmul,printf@width
 14144  000A6C  C012  F037         	movff	?___wmul+1,printf@width+1
 14145                           
 14146                           ;doprnt.c: 601: width += *f++ - '0';
 14147  000A70  0ED0               	movlw	208
 14148  000A72  6E2B               	movwf	??_printf& (0+255),c
 14149  000A74  0EFF               	movlw	255
 14150  000A76  6E2C               	movwf	(??_printf+1)& (0+255),c
 14151  000A78  C01D  FFF6         	movff	printf@f,tblptrl
 14152  000A7C  C01E  FFF7         	movff	printf@f+1,tblptrh
 14153  000A80                     	if	0	;tblptru may be non-zero
 14154  000A80                     	endif
 14155  000A80                     	if	0	;tblptru may be non-zero
 14156  000A80                     	endif
 14157  000A80  0008               	tblrd		*
 14158  000A82  50F5               	movf	tablat,w,c
 14159  000A84  6E2D               	movwf	(??_printf+2)& (0+255),c
 14160  000A86  6A2E               	clrf	(??_printf+3)& (0+255),c
 14161  000A88  502B               	movf	??_printf,w,c
 14162  000A8A  262D               	addwf	??_printf+2,f,c
 14163  000A8C  502C               	movf	??_printf+1,w,c
 14164  000A8E  222E               	addwfc	??_printf+3,f,c
 14165  000A90  502D               	movf	??_printf+2,w,c
 14166  000A92  2636               	addwf	printf@width,f,c
 14167  000A94  502E               	movf	??_printf+3,w,c
 14168  000A96  2237               	addwfc	printf@width+1,f,c
 14169  000A98  4A1D               	infsnz	printf@f,f,c
 14170  000A9A  2A1E               	incf	printf@f+1,f,c
 14171                           
 14172                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 14173  000A9C  C01D  FFF6         	movff	printf@f,tblptrl
 14174  000AA0  C01E  FFF7         	movff	printf@f+1,tblptrh
 14175  000AA4                     	if	0	;tblptru may be non-zero
 14176  000AA4                     	endif
 14177  000AA4                     	if	0	;tblptru may be non-zero
 14178  000AA4                     	endif
 14179  000AA4  0008               	tblrd		*
 14180  000AA6  50F5               	movf	tablat,w,c
 14181  000AA8  EC73  F01D         	call	_isdigit
 14182  000AAC  A0D8               	btfss	status,0,c
 14183  000AAE  D008               	goto	l8379
 14184  000AB0  D7D1               	goto	l8367
 14185                           
 14186                           ;doprnt.c: 608: }
 14187                           ;doprnt.c: 635: switch(c = *f++) {
 14188  000AB2  D006               	goto	l8379
 14189                           
 14190                           ;doprnt.c: 638: goto alldone;
 14191                           
 14192                           ;doprnt.c: 637: case 0:
 14193  000AB4  D148               	goto	l1453
 14194                           
 14195                           ;doprnt.c: 698: case 'i':
 14196                           ;doprnt.c: 699: break;
 14197                           
 14198                           ;doprnt.c: 697: case 'd':
 14199  000AB6  D01B               	goto	l1416
 14200  000AB8                     l8375:
 14201                           
 14202                           ;doprnt.c: 721: flag |= 0x80;
 14203  000AB8  8E35               	bsf	printf@flag,7,c
 14204                           
 14205                           ;doprnt.c: 723: break;
 14206  000ABA  D019               	goto	l1416
 14207                           
 14208                           ;doprnt.c: 813: continue;
 14209                           
 14210                           ;doprnt.c: 802: default:
 14211  000ABC  D136               	goto	l8477
 14212                           
 14213                           ;doprnt.c: 822: }
 14214  000ABE  D017               	goto	l1416
 14215  000AC0                     l8379:
 14216  000AC0  C01D  FFF6         	movff	printf@f,tblptrl
 14217  000AC4  C01E  FFF7         	movff	printf@f+1,tblptrh
 14218  000AC8  4A1D               	infsnz	printf@f,f,c
 14219  000ACA  2A1E               	incf	printf@f+1,f,c
 14220  000ACC                     	if	0	;tblptru may be non-zero
 14221  000ACC                     	endif
 14222  000ACC                     	if	0	;tblptru may be non-zero
 14223  000ACC                     	endif
 14224  000ACC  0008               	tblrd		*
 14225  000ACE  CFF5 F038          	movff	tablat,printf@c
 14226  000AD2  5038               	movf	printf@c,w,c
 14227                           
 14228                           ; Switch size 1, requested type "space"
 14229                           ; Number of cases is 4, Range of values is 0 to 120
 14230                           ; switch strategies available:
 14231                           ; Name         Instructions Cycles
 14232                           ; simple_byte           13     7 (average)
 14233                           ;	Chosen strategy is simple_byte
 14234  000AD4  0A00               	xorlw	0	; case 0
 14235  000AD6  B4D8               	btfsc	status,2,c
 14236  000AD8  D136               	goto	l1453
 14237  000ADA  0A64               	xorlw	100	; case 100
 14238  000ADC  B4D8               	btfsc	status,2,c
 14239  000ADE  D007               	goto	l1416
 14240  000AE0  0A0D               	xorlw	13	; case 105
 14241  000AE2  B4D8               	btfsc	status,2,c
 14242  000AE4  D004               	goto	l1416
 14243  000AE6  0A11               	xorlw	17	; case 120
 14244  000AE8  B4D8               	btfsc	status,2,c
 14245  000AEA  D7E6               	goto	l8375
 14246  000AEC  D11E               	goto	l8477
 14247  000AEE                     l1416:
 14248                           
 14249                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 14250  000AEE  BE35               	btfsc	printf@flag,7,c
 14251  000AF0  D015               	goto	l8391
 14252                           
 14253                           ;doprnt.c: 1253: {
 14254                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 14255  000AF2  C030  FFD9         	movff	printf@ap,fsr2l
 14256  000AF6  C031  FFDA         	movff	printf@ap+1,fsr2h
 14257  000AFA  CFDE F033          	movff	postinc2,printf@val
 14258  000AFE  CFDD F034          	movff	postdec2,printf@val+1
 14259  000B02  0E02               	movlw	2
 14260  000B04  2630               	addwf	printf@ap,f,c
 14261  000B06  0E00               	movlw	0
 14262  000B08  2231               	addwfc	printf@ap+1,f,c
 14263                           
 14264                           ;doprnt.c: 1261: if((int)val < 0) {
 14265  000B0A  AE34               	btfss	printf@val+1,7,c
 14266  000B0C  D04E               	goto	l8425
 14267                           
 14268                           ;doprnt.c: 1262: flag |= 0x03;
 14269  000B0E  0E03               	movlw	3
 14270  000B10  1235               	iorwf	printf@flag,f,c
 14271                           
 14272                           ;doprnt.c: 1263: val = -val;
 14273  000B12  6C33               	negf	printf@val,c
 14274  000B14  1E34               	comf	printf@val+1,f,c
 14275  000B16  B0D8               	btfsc	status,0,c
 14276  000B18  2A34               	incf	printf@val+1,f,c
 14277                           
 14278                           ;doprnt.c: 1264: }
 14279                           ;doprnt.c: 1266: }
 14280  000B1A  D047               	goto	l8425
 14281  000B1C                     l8391:
 14282                           
 14283                           ;doprnt.c: 1268: else
 14284                           ;doprnt.c: 1273: {
 14285                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 14286  000B1C  C030  FFD9         	movff	printf@ap,fsr2l
 14287  000B20  C031  FFDA         	movff	printf@ap+1,fsr2h
 14288  000B24  CFDE F033          	movff	postinc2,printf@val
 14289  000B28  CFDD F034          	movff	postdec2,printf@val+1
 14290  000B2C  0E02               	movlw	2
 14291  000B2E  2630               	addwf	printf@ap,f,c
 14292  000B30  0E00               	movlw	0
 14293  000B32  2231               	addwfc	printf@ap+1,f,c
 14294                           
 14295                           ;doprnt.c: 1287: }
 14296                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 14297  000B34  D03A               	goto	l8425
 14298  000B36                     l8395:
 14299                           
 14300                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14301  000B36  0E01               	movlw	1
 14302  000B38  6E38               	movwf	printf@c,c
 14303  000B3A                     l8397:
 14304  000B3A  0E05               	movlw	5
 14305  000B3C  1838               	xorwf	printf@c,w,c
 14306  000B3E  B4D8               	btfsc	status,2,c
 14307  000B40  D03D               	goto	l8427
 14308  000B42  D001               	goto	l8401
 14309  000B44  D03B               	goto	l8427
 14310  000B46                     l8401:
 14311                           
 14312                           ;doprnt.c: 1306: if(val < dpowers[c])
 14313  000B46  5038               	movf	printf@c,w,c
 14314  000B48  0D02               	mullw	2
 14315  000B4A  0EA6               	movlw	low _dpowers
 14316  000B4C  24F3               	addwf	prodl,w,c
 14317  000B4E  6EF6               	movwf	tblptrl,c
 14318  000B50  0EFE               	movlw	high _dpowers
 14319  000B52  20F4               	addwfc	prodh,w,c
 14320  000B54  6EF7               	movwf	tblptrh,c
 14321  000B56                     	if	0	;There are less than 3 active tblptr bytes
 14322  000B56                     	endif
 14323  000B56  0009               	tblrd		*+
 14324  000B58  50F5               	movf	tablat,w,c
 14325  000B5A  5C33               	subwf	printf@val,w,c
 14326  000B5C  0009               	tblrd		*+
 14327  000B5E  50F5               	movf	tablat,w,c
 14328  000B60  5834               	subwfb	printf@val+1,w,c
 14329  000B62  A0D8               	btfss	status,0,c
 14330  000B64  D02B               	goto	l8427
 14331  000B66  D001               	goto	l8405
 14332                           
 14333                           ;doprnt.c: 1307: break;
 14334  000B68  D029               	goto	l8427
 14335  000B6A                     l8405:
 14336  000B6A  2A38               	incf	printf@c,f,c
 14337  000B6C  D7E6               	goto	l8397
 14338                           
 14339                           ;doprnt.c: 1309: break;
 14340  000B6E  D026               	goto	l8427
 14341  000B70                     l8409:
 14342                           
 14343                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 14344  000B70  0E01               	movlw	1
 14345  000B72  6E38               	movwf	printf@c,c
 14346  000B74                     l8411:
 14347  000B74  0E04               	movlw	4
 14348  000B76  1838               	xorwf	printf@c,w,c
 14349  000B78  B4D8               	btfsc	status,2,c
 14350  000B7A  D020               	goto	l8427
 14351  000B7C  D001               	goto	l8415
 14352  000B7E  D01E               	goto	l8427
 14353  000B80                     l8415:
 14354                           
 14355                           ;doprnt.c: 1317: if(val < hexpowers[c])
 14356  000B80  5038               	movf	printf@c,w,c
 14357  000B82  0D02               	mullw	2
 14358  000B84  0EB0               	movlw	low _hexpowers
 14359  000B86  24F3               	addwf	prodl,w,c
 14360  000B88  6EF6               	movwf	tblptrl,c
 14361  000B8A  0EFE               	movlw	high _hexpowers
 14362  000B8C  20F4               	addwfc	prodh,w,c
 14363  000B8E  6EF7               	movwf	tblptrh,c
 14364  000B90                     	if	0	;There are less than 3 active tblptr bytes
 14365  000B90                     	endif
 14366  000B90  0009               	tblrd		*+
 14367  000B92  50F5               	movf	tablat,w,c
 14368  000B94  5C33               	subwf	printf@val,w,c
 14369  000B96  0009               	tblrd		*+
 14370  000B98  50F5               	movf	tablat,w,c
 14371  000B9A  5834               	subwfb	printf@val+1,w,c
 14372  000B9C  A0D8               	btfss	status,0,c
 14373  000B9E  D00E               	goto	l8427
 14374  000BA0  D001               	goto	l8419
 14375                           
 14376                           ;doprnt.c: 1318: break;
 14377  000BA2  D00C               	goto	l8427
 14378  000BA4                     l8419:
 14379  000BA4  2A38               	incf	printf@c,f,c
 14380  000BA6  D7E6               	goto	l8411
 14381                           
 14382                           ;doprnt.c: 1336: }
 14383                           
 14384                           ;doprnt.c: 1320: break;
 14385  000BA8  D009               	goto	l8427
 14386  000BAA                     l8425:
 14387  000BAA  5035               	movf	printf@flag,w,c
 14388  000BAC  0B80               	andlw	128
 14389                           
 14390                           ; Switch size 1, requested type "space"
 14391                           ; Number of cases is 2, Range of values is 0 to 128
 14392                           ; switch strategies available:
 14393                           ; Name         Instructions Cycles
 14394                           ; simple_byte            7     4 (average)
 14395                           ;	Chosen strategy is simple_byte
 14396  000BAE  0A00               	xorlw	0	; case 0
 14397  000BB0  B4D8               	btfsc	status,2,c
 14398  000BB2  D7C1               	goto	l8395
 14399  000BB4  0A80               	xorlw	128	; case 128
 14400  000BB6  B4D8               	btfsc	status,2,c
 14401  000BB8  D7DB               	goto	l8409
 14402  000BBA  D000               	goto	l8427
 14403  000BBC                     l8427:
 14404                           
 14405                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14406  000BBC  5036               	movf	printf@width,w,c
 14407  000BBE  1037               	iorwf	printf@width+1,w,c
 14408  000BC0  B4D8               	btfsc	status,2,c
 14409  000BC2  D00A               	goto	l8433
 14410  000BC4  C035  F02B         	movff	printf@flag,??_printf
 14411  000BC8  0E03               	movlw	3
 14412  000BCA  162B               	andwf	??_printf,f,c
 14413  000BCC  B4D8               	btfsc	status,2,c
 14414  000BCE  D004               	goto	l8433
 14415                           
 14416                           ;doprnt.c: 1346: width--;
 14417  000BD0  0636               	decf	printf@width,f,c
 14418  000BD2  A0D8               	btfss	status,0,c
 14419  000BD4  0637               	decf	printf@width+1,f,c
 14420  000BD6  D000               	goto	l8433
 14421  000BD8                     l8433:
 14422                           
 14423                           ;doprnt.c: 1381: if(width > c)
 14424  000BD8  0E80               	movlw	128
 14425  000BDA  BE38               	btfsc	printf@c,7,c
 14426  000BDC  0E7F               	movlw	127
 14427  000BDE  6E2B               	movwf	??_printf& (0+255),c
 14428  000BE0  5036               	movf	printf@width,w,c
 14429  000BE2  5C38               	subwf	printf@c,w,c
 14430  000BE4  5037               	movf	printf@width+1,w,c
 14431  000BE6  0A80               	xorlw	128
 14432  000BE8  582B               	subwfb	??_printf& (0+255),w,c
 14433  000BEA  B0D8               	btfsc	status,0,c
 14434  000BEC  D007               	goto	l8437
 14435                           
 14436                           ;doprnt.c: 1382: width -= c;
 14437  000BEE  5038               	movf	printf@c,w,c
 14438  000BF0  5E36               	subwf	printf@width,f,c
 14439  000BF2  0E00               	movlw	0
 14440  000BF4  BE38               	btfsc	printf@c,7,c
 14441  000BF6  0EFF               	movlw	255
 14442  000BF8  5A37               	subwfb	printf@width+1,f,c
 14443  000BFA  D005               	goto	l8439
 14444  000BFC                     l8437:
 14445                           
 14446                           ;doprnt.c: 1383: else
 14447                           ;doprnt.c: 1384: width = 0;
 14448  000BFC  0E00               	movlw	0
 14449  000BFE  6E37               	movwf	printf@width+1,c
 14450  000C00  0E00               	movlw	0
 14451  000C02  6E36               	movwf	printf@width,c
 14452  000C04  D000               	goto	l8439
 14453  000C06                     l8439:
 14454                           
 14455                           ;doprnt.c: 1387: if(flag & 0x04) {
 14456  000C06  A435               	btfss	printf@flag,2,c
 14457  000C08  D01A               	goto	l8451
 14458                           
 14459                           ;doprnt.c: 1392: if(flag & 0x03)
 14460  000C0A  C035  F02B         	movff	printf@flag,??_printf
 14461  000C0E  0E03               	movlw	3
 14462  000C10  162B               	andwf	??_printf,f,c
 14463  000C12  B4D8               	btfsc	status,2,c
 14464  000C14  D004               	goto	l8445
 14465                           
 14466                           ;doprnt.c: 1393: (putch('-') );
 14467  000C16  0E2D               	movlw	45
 14468  000C18  ECEE  F01E         	call	_putch
 14469  000C1C  D000               	goto	l8445
 14470  000C1E                     l8445:
 14471                           
 14472                           ;doprnt.c: 1415: if(width)
 14473  000C1E  5036               	movf	printf@width,w,c
 14474  000C20  1037               	iorwf	printf@width+1,w,c
 14475  000C22  B4D8               	btfsc	status,2,c
 14476  000C24  D026               	goto	l8461
 14477  000C26                     l8447:
 14478                           
 14479                           ;doprnt.c: 1417: (putch('0') );
 14480  000C26  0E30               	movlw	48
 14481  000C28  ECEE  F01E         	call	_putch
 14482                           
 14483                           ;doprnt.c: 1418: while(--width);
 14484  000C2C  0636               	decf	printf@width,f,c
 14485  000C2E  A0D8               	btfss	status,0,c
 14486  000C30  0637               	decf	printf@width+1,f,c
 14487  000C32  5036               	movf	printf@width,w,c
 14488  000C34  1037               	iorwf	printf@width+1,w,c
 14489  000C36  B4D8               	btfsc	status,2,c
 14490  000C38  D01C               	goto	l8461
 14491  000C3A  D7F5               	goto	l8447
 14492                           
 14493                           ;doprnt.c: 1420: } else
 14494  000C3C  D01A               	goto	l8461
 14495  000C3E                     l8451:
 14496                           
 14497                           ;doprnt.c: 1422: {
 14498                           ;doprnt.c: 1424: if(width
 14499                           ;doprnt.c: 1428: )
 14500  000C3E  5036               	movf	printf@width,w,c
 14501  000C40  1037               	iorwf	printf@width+1,w,c
 14502  000C42  B4D8               	btfsc	status,2,c
 14503  000C44  D00C               	goto	l8457
 14504  000C46                     l8453:
 14505                           
 14506                           ;doprnt.c: 1430: (putch(' ') );
 14507  000C46  0E20               	movlw	32
 14508  000C48  ECEE  F01E         	call	_putch
 14509                           
 14510                           ;doprnt.c: 1431: while(--width);
 14511  000C4C  0636               	decf	printf@width,f,c
 14512  000C4E  A0D8               	btfss	status,0,c
 14513  000C50  0637               	decf	printf@width+1,f,c
 14514  000C52  5036               	movf	printf@width,w,c
 14515  000C54  1037               	iorwf	printf@width+1,w,c
 14516  000C56  B4D8               	btfsc	status,2,c
 14517  000C58  D002               	goto	l8457
 14518  000C5A  D7F5               	goto	l8453
 14519  000C5C  D000               	goto	l8457
 14520  000C5E                     l8457:
 14521                           
 14522                           ;doprnt.c: 1438: if(flag & 0x03)
 14523  000C5E  C035  F02B         	movff	printf@flag,??_printf
 14524  000C62  0E03               	movlw	3
 14525  000C64  162B               	andwf	??_printf,f,c
 14526  000C66  B4D8               	btfsc	status,2,c
 14527  000C68  D004               	goto	l8461
 14528                           
 14529                           ;doprnt.c: 1439: (putch('-') );
 14530  000C6A  0E2D               	movlw	45
 14531  000C6C  ECEE  F01E         	call	_putch
 14532  000C70  D000               	goto	l8461
 14533  000C72                     l8461:
 14534                           
 14535                           ;doprnt.c: 1469: }
 14536                           ;doprnt.c: 1472: prec = c;
 14537  000C72  C038  F032         	movff	printf@c,printf@prec
 14538                           
 14539                           ;doprnt.c: 1474: while(prec--) {
 14540  000C76  D053               	goto	l8475
 14541                           
 14542                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
 14543  000C78  D045               	goto	l8471
 14544  000C7A                     l8463:
 14545                           
 14546                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14547  000C7A  5032               	movf	printf@prec,w,c
 14548  000C7C  0D02               	mullw	2
 14549  000C7E  0EA6               	movlw	low _dpowers
 14550  000C80  24F3               	addwf	prodl,w,c
 14551  000C82  6EF6               	movwf	tblptrl,c
 14552  000C84  0EFE               	movlw	high _dpowers
 14553  000C86  20F4               	addwfc	prodh,w,c
 14554  000C88  6EF7               	movwf	tblptrh,c
 14555  000C8A                     	if	0	;There are less than 3 active tblptr bytes
 14556  000C8A                     	endif
 14557  000C8A  0009               	tblrd		*+
 14558  000C8C  CFF5 F013          	movff	tablat,___lwdiv@divisor
 14559  000C90  000A               	tblrd		*-
 14560  000C92  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
 14561  000C96  C033  F011         	movff	printf@val,___lwdiv@dividend
 14562  000C9A  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
 14563  000C9E  ECD6  F019         	call	___lwdiv	;wreg free
 14564  000CA2  C011  F018         	movff	?___lwdiv,___lwmod@dividend
 14565  000CA6  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
 14566  000CAA  0E00               	movlw	0
 14567  000CAC  6E1B               	movwf	___lwmod@divisor+1,c
 14568  000CAE  0E0A               	movlw	10
 14569  000CB0  6E1A               	movwf	___lwmod@divisor,c
 14570  000CB2  EC70  F01B         	call	___lwmod	;wreg free
 14571  000CB6  5018               	movf	?___lwmod,w,c
 14572  000CB8  0F30               	addlw	48
 14573  000CBA  6E38               	movwf	printf@c,c
 14574                           
 14575                           ;doprnt.c: 1491: break;
 14576  000CBC  D02C               	goto	l8473
 14577  000CBE                     l8465:
 14578                           
 14579                           ;doprnt.c: 1499: {
 14580                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 14581  000CBE  C033  F011         	movff	printf@val,___lwdiv@dividend
 14582  000CC2  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
 14583  000CC6  5032               	movf	printf@prec,w,c
 14584  000CC8  0D02               	mullw	2
 14585  000CCA  0EB0               	movlw	low _hexpowers
 14586  000CCC  24F3               	addwf	prodl,w,c
 14587  000CCE  6EF6               	movwf	tblptrl,c
 14588  000CD0  0EFE               	movlw	high _hexpowers
 14589  000CD2  20F4               	addwfc	prodh,w,c
 14590  000CD4  6EF7               	movwf	tblptrh,c
 14591  000CD6                     	if	0	;There are less than 3 active tblptr bytes
 14592  000CD6                     	endif
 14593  000CD6  0009               	tblrd		*+
 14594  000CD8  CFF5 F013          	movff	tablat,___lwdiv@divisor
 14595  000CDC  000A               	tblrd		*-
 14596  000CDE  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
 14597  000CE2  ECD6  F019         	call	___lwdiv	;wreg free
 14598  000CE6  5011               	movf	?___lwdiv,w,c
 14599  000CE8  0B0F               	andlw	15
 14600  000CEA  6E2F               	movwf	printf@idx,c
 14601                           
 14602                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 14603  000CEC  502F               	movf	printf@idx,w,c
 14604  000CEE  0D01               	mullw	1
 14605  000CF0  0E4D               	movlw	low STR_36
 14606  000CF2  24F3               	addwf	prodl,w,c
 14607  000CF4  6EF6               	movwf	tblptrl,c
 14608  000CF6  0EFF               	movlw	high STR_36
 14609  000CF8  20F4               	addwfc	prodh,w,c
 14610  000CFA  6EF7               	movwf	tblptrh,c
 14611  000CFC                     	if	0	;There are less than 3 active tblptr bytes
 14612  000CFC                     	endif
 14613  000CFC  0008               	tblrd		*
 14614  000CFE  CFF5 F038          	movff	tablat,printf@c
 14615                           
 14616                           ;doprnt.c: 1523: }
 14617                           
 14618                           ;doprnt.c: 1508: }
 14619                           ;doprnt.c: 1510: break;
 14620  000D02  D009               	goto	l8473
 14621  000D04                     l8471:
 14622  000D04  5035               	movf	printf@flag,w,c
 14623  000D06  0B80               	andlw	128
 14624                           
 14625                           ; Switch size 1, requested type "space"
 14626                           ; Number of cases is 2, Range of values is 0 to 128
 14627                           ; switch strategies available:
 14628                           ; Name         Instructions Cycles
 14629                           ; simple_byte            7     4 (average)
 14630                           ;	Chosen strategy is simple_byte
 14631  000D08  0A00               	xorlw	0	; case 0
 14632  000D0A  B4D8               	btfsc	status,2,c
 14633  000D0C  D7B6               	goto	l8463
 14634  000D0E  0A80               	xorlw	128	; case 128
 14635  000D10  B4D8               	btfsc	status,2,c
 14636  000D12  D7D5               	goto	l8465
 14637  000D14  D000               	goto	l8473
 14638  000D16                     l8473:
 14639                           
 14640                           ;doprnt.c: 1524: (putch(c) );
 14641  000D16  5038               	movf	printf@c,w,c
 14642  000D18  ECEE  F01E         	call	_putch
 14643  000D1C  D000               	goto	l8475
 14644  000D1E                     l8475:
 14645  000D1E  0632               	decf	printf@prec,f,c
 14646  000D20  2832               	incf	printf@prec,w,c
 14647  000D22  B4D8               	btfsc	status,2,c
 14648  000D24  D002               	goto	l8477
 14649  000D26  D7EE               	goto	l8471
 14650  000D28  D000               	goto	l8477
 14651  000D2A                     l8477:
 14652  000D2A  C01D  FFF6         	movff	printf@f,tblptrl
 14653  000D2E  C01E  FFF7         	movff	printf@f+1,tblptrh
 14654  000D32  4A1D               	infsnz	printf@f,f,c
 14655  000D34  2A1E               	incf	printf@f+1,f,c
 14656  000D36                     	if	0	;tblptru may be non-zero
 14657  000D36                     	endif
 14658  000D36                     	if	0	;tblptru may be non-zero
 14659  000D36                     	endif
 14660  000D36  0008               	tblrd		*
 14661  000D38  CFF5 F038          	movff	tablat,printf@c
 14662  000D3C  5038               	movf	printf@c,w,c
 14663  000D3E  B4D8               	btfsc	status,2,c
 14664  000D40  D002               	goto	l1453
 14665  000D42  D65A               	goto	l8351
 14666  000D44  D000               	goto	l1453
 14667  000D46                     l1453:
 14668  000D46  0012               	return		;funcret
 14669  000D48                     __end_of_printf:
 14670                           	opt stack 0
 14671                           tblptru	equ	0xFF8
 14672                           tblptrh	equ	0xFF7
 14673                           tblptrl	equ	0xFF6
 14674                           tablat	equ	0xFF5
 14675                           prodh	equ	0xFF4
 14676                           prodl	equ	0xFF3
 14677                           intcon	equ	0xFF2
 14678                           intcon2	equ	0xFF1
 14679                           postinc0	equ	0xFEE
 14680                           wreg	equ	0xFE8
 14681                           postdec1	equ	0xFE5
 14682                           fsr1l	equ	0xFE1
 14683                           indf2	equ	0xFDF
 14684                           postinc2	equ	0xFDE
 14685                           postdec2	equ	0xFDD
 14686                           fsr2h	equ	0xFDA
 14687                           fsr2l	equ	0xFD9
 14688                           status	equ	0xFD8
 14689                           
 14690 ;; *************** function _putch *****************
 14691 ;; Defined at:
 14692 ;;		line 78 in file "LabFinal.c"
 14693 ;; Parameters:    Size  Location     Type
 14694 ;;  c               1    wreg     unsigned char 
 14695 ;; Auto vars:     Size  Location     Type
 14696 ;;  c               1   16[COMRAM] unsigned char 
 14697 ;; Return value:  Size  Location     Type
 14698 ;;		None               void
 14699 ;; Registers used:
 14700 ;;		wreg
 14701 ;; Tracked objects:
 14702 ;;		On entry : 0/0
 14703 ;;		On exit  : 0/0
 14704 ;;		Unchanged: 0/0
 14705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14707 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14709 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14710 ;;Total ram usage:        1 bytes
 14711 ;; Hardware stack levels used:    1
 14712 ;; Hardware stack levels required when called:    3
 14713 ;; This function calls:
 14714 ;;		Nothing
 14715 ;; This function is called by:
 14716 ;;		_printf
 14717 ;; This function uses a non-reentrant model
 14718 ;;
 14719                           
 14720                           	psect	text79
 14721  003DDC                     __ptext79:
 14722                           	opt stack 0
 14723  003DDC                     _putch:
 14724                           	opt stack 26
 14725                           
 14726                           ;incstack = 0
 14727                           ;putch@c stored from wreg
 14728  003DDC  6E11               	movwf	putch@c,c
 14729                           
 14730                           ;LabFinal.c: 80: while (!TRMT);
 14731  003DDE  D000               	goto	l211
 14732  003DE0                     l211:
 14733  003DE0  A2AC               	btfss	4012,1,c	;volatile
 14734  003DE2  D7FE               	goto	l211
 14735                           
 14736                           ;LabFinal.c: 81: TXREG = c;
 14737  003DE4  C011  FFAD         	movff	putch@c,4013	;volatile
 14738  003DE8  0012               	return		;funcret
 14739  003DEA                     __end_of_putch:
 14740                           	opt stack 0
 14741                           tblptru	equ	0xFF8
 14742                           tblptrh	equ	0xFF7
 14743                           tblptrl	equ	0xFF6
 14744                           tablat	equ	0xFF5
 14745                           prodh	equ	0xFF4
 14746                           prodl	equ	0xFF3
 14747                           intcon	equ	0xFF2
 14748                           intcon2	equ	0xFF1
 14749                           postinc0	equ	0xFEE
 14750                           wreg	equ	0xFE8
 14751                           postdec1	equ	0xFE5
 14752                           fsr1l	equ	0xFE1
 14753                           indf2	equ	0xFDF
 14754                           postinc2	equ	0xFDE
 14755                           postdec2	equ	0xFDD
 14756                           fsr2h	equ	0xFDA
 14757                           fsr2l	equ	0xFD9
 14758                           status	equ	0xFD8
 14759                           
 14760 ;; *************** function _isdigit *****************
 14761 ;; Defined at:
 14762 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
 14763 ;; Parameters:    Size  Location     Type
 14764 ;;  c               1    wreg     unsigned char 
 14765 ;; Auto vars:     Size  Location     Type
 14766 ;;  c               1   18[COMRAM] unsigned char 
 14767 ;; Return value:  Size  Location     Type
 14768 ;;		None               void
 14769 ;; Registers used:
 14770 ;;		wreg, status,2, status,0
 14771 ;; Tracked objects:
 14772 ;;		On entry : 0/0
 14773 ;;		On exit  : 0/0
 14774 ;;		Unchanged: 0/0
 14775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14777 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14778 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14779 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14780 ;;Total ram usage:        3 bytes
 14781 ;; Hardware stack levels used:    1
 14782 ;; Hardware stack levels required when called:    3
 14783 ;; This function calls:
 14784 ;;		Nothing
 14785 ;; This function is called by:
 14786 ;;		_printf
 14787 ;; This function uses a non-reentrant model
 14788 ;;
 14789                           
 14790                           	psect	text80
 14791  003AE6                     __ptext80:
 14792                           	opt stack 0
 14793  003AE6                     _isdigit:
 14794                           	opt stack 26
 14795                           
 14796                           ;incstack = 0
 14797                           ;isdigit@c stored from wreg
 14798  003AE6  6E13               	movwf	isdigit@c,c
 14799  003AE8  0E00               	movlw	0
 14800  003AEA  6E12               	movwf	_isdigit$2773,c
 14801  003AEC  0E3A               	movlw	58
 14802  003AEE  6013               	cpfslt	isdigit@c,c
 14803  003AF0  D006               	goto	l5369
 14804  003AF2  0E2F               	movlw	47
 14805  003AF4  6413               	cpfsgt	isdigit@c,c
 14806  003AF6  D003               	goto	l5369
 14807  003AF8  0E01               	movlw	1
 14808  003AFA  6E12               	movwf	_isdigit$2773,c
 14809  003AFC  D000               	goto	l5369
 14810  003AFE                     l5369:
 14811  003AFE  C012  F011         	movff	_isdigit$2773,??_isdigit
 14812  003B02  3011               	rrcf	??_isdigit,w,c
 14813  003B04  D000               	goto	l1920
 14814  003B06                     l1920:
 14815  003B06  0012               	return		;funcret
 14816  003B08                     __end_of_isdigit:
 14817                           	opt stack 0
 14818                           tblptru	equ	0xFF8
 14819                           tblptrh	equ	0xFF7
 14820                           tblptrl	equ	0xFF6
 14821                           tablat	equ	0xFF5
 14822                           prodh	equ	0xFF4
 14823                           prodl	equ	0xFF3
 14824                           intcon	equ	0xFF2
 14825                           intcon2	equ	0xFF1
 14826                           postinc0	equ	0xFEE
 14827                           wreg	equ	0xFE8
 14828                           postdec1	equ	0xFE5
 14829                           fsr1l	equ	0xFE1
 14830                           indf2	equ	0xFDF
 14831                           postinc2	equ	0xFDE
 14832                           postdec2	equ	0xFDD
 14833                           fsr2h	equ	0xFDA
 14834                           fsr2l	equ	0xFD9
 14835                           status	equ	0xFD8
 14836                           
 14837 ;; *************** function ___lwmod *****************
 14838 ;; Defined at:
 14839 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
 14840 ;; Parameters:    Size  Location     Type
 14841 ;;  dividend        2   23[COMRAM] unsigned int 
 14842 ;;  divisor         2   25[COMRAM] unsigned int 
 14843 ;; Auto vars:     Size  Location     Type
 14844 ;;  counter         1   27[COMRAM] unsigned char 
 14845 ;; Return value:  Size  Location     Type
 14846 ;;                  2   23[COMRAM] unsigned int 
 14847 ;; Registers used:
 14848 ;;		wreg, status,2, status,0
 14849 ;; Tracked objects:
 14850 ;;		On entry : 0/0
 14851 ;;		On exit  : 0/0
 14852 ;;		Unchanged: 0/0
 14853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14854 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14855 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14857 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14858 ;;Total ram usage:        5 bytes
 14859 ;; Hardware stack levels used:    1
 14860 ;; Hardware stack levels required when called:    3
 14861 ;; This function calls:
 14862 ;;		Nothing
 14863 ;; This function is called by:
 14864 ;;		_printf
 14865 ;; This function uses a non-reentrant model
 14866 ;;
 14867                           
 14868                           	psect	text81
 14869  0036E0                     __ptext81:
 14870                           	opt stack 0
 14871  0036E0                     ___lwmod:
 14872                           	opt stack 26
 14873                           
 14874                           ;incstack = 0
 14875  0036E0  501A               	movf	___lwmod@divisor,w,c
 14876  0036E2  101B               	iorwf	___lwmod@divisor+1,w,c
 14877  0036E4  B4D8               	btfsc	status,2,c
 14878  0036E6  D01D               	goto	l2022
 14879  0036E8  0E01               	movlw	1
 14880  0036EA  6E1C               	movwf	___lwmod@counter,c
 14881  0036EC  D005               	goto	l5517
 14882  0036EE                     l5515:
 14883  0036EE  90D8               	bcf	status,0,c
 14884  0036F0  361A               	rlcf	___lwmod@divisor,f,c
 14885  0036F2  361B               	rlcf	___lwmod@divisor+1,f,c
 14886  0036F4  2A1C               	incf	___lwmod@counter,f,c
 14887  0036F6  D000               	goto	l5517
 14888  0036F8                     l5517:
 14889  0036F8  BE1B               	btfsc	___lwmod@divisor+1,7,c
 14890  0036FA  D002               	goto	l5519
 14891  0036FC  D7F8               	goto	l5515
 14892  0036FE  D000               	goto	l5519
 14893  003700                     l5519:
 14894  003700  501A               	movf	___lwmod@divisor,w,c
 14895  003702  5C18               	subwf	___lwmod@dividend,w,c
 14896  003704  501B               	movf	___lwmod@divisor+1,w,c
 14897  003706  5819               	subwfb	___lwmod@dividend+1,w,c
 14898  003708  A0D8               	btfss	status,0,c
 14899  00370A  D005               	goto	l5523
 14900  00370C  501A               	movf	___lwmod@divisor,w,c
 14901  00370E  5E18               	subwf	___lwmod@dividend,f,c
 14902  003710  501B               	movf	___lwmod@divisor+1,w,c
 14903  003712  5A19               	subwfb	___lwmod@dividend+1,f,c
 14904  003714  D000               	goto	l5523
 14905  003716                     l5523:
 14906  003716  90D8               	bcf	status,0,c
 14907  003718  321B               	rrcf	___lwmod@divisor+1,f,c
 14908  00371A  321A               	rrcf	___lwmod@divisor,f,c
 14909  00371C  2E1C               	decfsz	___lwmod@counter,f,c
 14910  00371E  D7F0               	goto	l5519
 14911  003720  D000               	goto	l2022
 14912  003722                     l2022:
 14913  003722  C018  F018         	movff	___lwmod@dividend,?___lwmod
 14914  003726  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
 14915  00372A  0012               	return		;funcret
 14916  00372C                     __end_of___lwmod:
 14917                           	opt stack 0
 14918                           tblptru	equ	0xFF8
 14919                           tblptrh	equ	0xFF7
 14920                           tblptrl	equ	0xFF6
 14921                           tablat	equ	0xFF5
 14922                           prodh	equ	0xFF4
 14923                           prodl	equ	0xFF3
 14924                           intcon	equ	0xFF2
 14925                           intcon2	equ	0xFF1
 14926                           postinc0	equ	0xFEE
 14927                           wreg	equ	0xFE8
 14928                           postdec1	equ	0xFE5
 14929                           fsr1l	equ	0xFE1
 14930                           indf2	equ	0xFDF
 14931                           postinc2	equ	0xFDE
 14932                           postdec2	equ	0xFDD
 14933                           fsr2h	equ	0xFDA
 14934                           fsr2l	equ	0xFD9
 14935                           status	equ	0xFD8
 14936                           
 14937 ;; *************** function ___lwdiv *****************
 14938 ;; Defined at:
 14939 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
 14940 ;; Parameters:    Size  Location     Type
 14941 ;;  dividend        2   16[COMRAM] unsigned int 
 14942 ;;  divisor         2   18[COMRAM] unsigned int 
 14943 ;; Auto vars:     Size  Location     Type
 14944 ;;  quotient        2   20[COMRAM] unsigned int 
 14945 ;;  counter         1   22[COMRAM] unsigned char 
 14946 ;; Return value:  Size  Location     Type
 14947 ;;                  2   16[COMRAM] unsigned int 
 14948 ;; Registers used:
 14949 ;;		wreg, status,2, status,0
 14950 ;; Tracked objects:
 14951 ;;		On entry : 0/0
 14952 ;;		On exit  : 0/0
 14953 ;;		Unchanged: 0/0
 14954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14955 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14956 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14958 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14959 ;;Total ram usage:        7 bytes
 14960 ;; Hardware stack levels used:    1
 14961 ;; Hardware stack levels required when called:    3
 14962 ;; This function calls:
 14963 ;;		Nothing
 14964 ;; This function is called by:
 14965 ;;		_printf
 14966 ;; This function uses a non-reentrant model
 14967 ;;
 14968                           
 14969                           	psect	text82
 14970  0033AC                     __ptext82:
 14971                           	opt stack 0
 14972  0033AC                     ___lwdiv:
 14973                           	opt stack 26
 14974                           
 14975                           ;incstack = 0
 14976  0033AC  0E00               	movlw	0
 14977  0033AE  6E16               	movwf	___lwdiv@quotient+1,c
 14978  0033B0  0E00               	movlw	0
 14979  0033B2  6E15               	movwf	___lwdiv@quotient,c
 14980  0033B4  5013               	movf	___lwdiv@divisor,w,c
 14981  0033B6  1014               	iorwf	___lwdiv@divisor+1,w,c
 14982  0033B8  B4D8               	btfsc	status,2,c
 14983  0033BA  D021               	goto	l2012
 14984  0033BC  0E01               	movlw	1
 14985  0033BE  6E17               	movwf	___lwdiv@counter,c
 14986  0033C0  D005               	goto	l5497
 14987  0033C2                     l5495:
 14988  0033C2  90D8               	bcf	status,0,c
 14989  0033C4  3613               	rlcf	___lwdiv@divisor,f,c
 14990  0033C6  3614               	rlcf	___lwdiv@divisor+1,f,c
 14991  0033C8  2A17               	incf	___lwdiv@counter,f,c
 14992  0033CA  D000               	goto	l5497
 14993  0033CC                     l5497:
 14994  0033CC  BE14               	btfsc	___lwdiv@divisor+1,7,c
 14995  0033CE  D002               	goto	l5499
 14996  0033D0  D7F8               	goto	l5495
 14997  0033D2  D000               	goto	l5499
 14998  0033D4                     l5499:
 14999  0033D4  90D8               	bcf	status,0,c
 15000  0033D6  3615               	rlcf	___lwdiv@quotient,f,c
 15001  0033D8  3616               	rlcf	___lwdiv@quotient+1,f,c
 15002  0033DA  5013               	movf	___lwdiv@divisor,w,c
 15003  0033DC  5C11               	subwf	___lwdiv@dividend,w,c
 15004  0033DE  5014               	movf	___lwdiv@divisor+1,w,c
 15005  0033E0  5812               	subwfb	___lwdiv@dividend+1,w,c
 15006  0033E2  A0D8               	btfss	status,0,c
 15007  0033E4  D006               	goto	l5507
 15008  0033E6  5013               	movf	___lwdiv@divisor,w,c
 15009  0033E8  5E11               	subwf	___lwdiv@dividend,f,c
 15010  0033EA  5014               	movf	___lwdiv@divisor+1,w,c
 15011  0033EC  5A12               	subwfb	___lwdiv@dividend+1,f,c
 15012  0033EE  8015               	bsf	___lwdiv@quotient,0,c
 15013  0033F0  D000               	goto	l5507
 15014  0033F2                     l5507:
 15015  0033F2  90D8               	bcf	status,0,c
 15016  0033F4  3214               	rrcf	___lwdiv@divisor+1,f,c
 15017  0033F6  3213               	rrcf	___lwdiv@divisor,f,c
 15018  0033F8  2E17               	decfsz	___lwdiv@counter,f,c
 15019  0033FA  D7EC               	goto	l5499
 15020  0033FC  D000               	goto	l2012
 15021  0033FE                     l2012:
 15022  0033FE  C015  F011         	movff	___lwdiv@quotient,?___lwdiv
 15023  003402  C016  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
 15024  003406  0012               	return		;funcret
 15025  003408                     __end_of___lwdiv:
 15026                           	opt stack 0
 15027                           tblptru	equ	0xFF8
 15028                           tblptrh	equ	0xFF7
 15029                           tblptrl	equ	0xFF6
 15030                           tablat	equ	0xFF5
 15031                           prodh	equ	0xFF4
 15032                           prodl	equ	0xFF3
 15033                           intcon	equ	0xFF2
 15034                           intcon2	equ	0xFF1
 15035                           postinc0	equ	0xFEE
 15036                           wreg	equ	0xFE8
 15037                           postdec1	equ	0xFE5
 15038                           fsr1l	equ	0xFE1
 15039                           indf2	equ	0xFDF
 15040                           postinc2	equ	0xFDE
 15041                           postdec2	equ	0xFDD
 15042                           fsr2h	equ	0xFDA
 15043                           fsr2l	equ	0xFD9
 15044                           status	equ	0xFD8
 15045                           
 15046 ;; *************** function _drawtext *****************
 15047 ;; Defined at:
 15048 ;;		line 474 in file "ST7735_TFT.c"
 15049 ;; Parameters:    Size  Location     Type
 15050 ;;  x               1    wreg     unsigned char 
 15051 ;;  y               1   56[COMRAM] unsigned char 
 15052 ;;  _text           2   57[COMRAM] PTR unsigned char 
 15053 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_heater_set_text(5), 
 15054 ;;		 -> setup_alarm_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 15055 ;;		 -> RTC_ALARM_Txt(2), Heater_SW_Txt(4), Heater_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 15056 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 15057 ;;		 -> tempC(4), 
 15058 ;;  color           2   59[COMRAM] unsigned int 
 15059 ;;  bg              2   61[COMRAM] unsigned int 
 15060 ;;  size            1   63[COMRAM] unsigned char 
 15061 ;; Auto vars:     Size  Location     Type
 15062 ;;  x               1    0[BANK1 ] unsigned char 
 15063 ;;  i               2    3[BANK1 ] unsigned int 
 15064 ;;  textsize        2    1[BANK1 ] unsigned int 
 15065 ;;  cursor_x        1    6[BANK1 ] unsigned char 
 15066 ;;  cursor_y        1    5[BANK1 ] unsigned char 
 15067 ;; Return value:  Size  Location     Type
 15068 ;;		None               void
 15069 ;; Registers used:
 15070 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15071 ;; Tracked objects:
 15072 ;;		On entry : 0/0
 15073 ;;		On exit  : 0/0
 15074 ;;		Unchanged: 0/0
 15075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15076 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15077 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15078 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15079 ;;      Totals:        10       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15080 ;;Total ram usage:       17 bytes
 15081 ;; Hardware stack levels used:    1
 15082 ;; Hardware stack levels required when called:    9
 15083 ;; This function calls:
 15084 ;;		_drawChar
 15085 ;;		_strlen
 15086 ;; This function is called by:
 15087 ;;		_Initialize_Screen
 15088 ;;		_Update_Screen
 15089 ;;		_Initialize_Setup_Alarm_Time_Screen
 15090 ;;		_Update_Setup_Alarm_Time_Screen
 15091 ;;		_Initialize_Setup_Heater_Screen
 15092 ;;		_Update_Setup_Heater_Screen
 15093 ;;		_Initialize_Setup_Time_Screen
 15094 ;;		_Update_Setup_Time_Screen
 15095 ;; This function uses a non-reentrant model
 15096 ;;
 15097                           
 15098                           	psect	text83
 15099  0019D4                     __ptext83:
 15100                           	opt stack 0
 15101  0019D4                     _drawtext:
 15102                           	opt stack 20
 15103                           
 15104                           ;incstack = 0
 15105                           ;drawtext@x stored from wreg
 15106  0019D4  0101               	movlb	1	; () banked
 15107  0019D6  6F34               	movwf	drawtext@x& (0+255),b
 15108                           
 15109                           ; BSR set to: 1
 15110                           ;ST7735_TFT.c: 476: unsigned char cursor_x, cursor_y;
 15111                           ;ST7735_TFT.c: 477: unsigned int textsize, i;
 15112                           ;ST7735_TFT.c: 478: cursor_x = x, cursor_y = y;
 15113  0019D8  C134  F13A         	movff	drawtext@x,drawtext@cursor_x
 15114                           
 15115                           ; BSR set to: 1
 15116  0019DC  C039  F139         	movff	drawtext@y,drawtext@cursor_y
 15117                           
 15118                           ; BSR set to: 1
 15119                           ;ST7735_TFT.c: 479: textsize = strlen(_text);
 15120  0019E0  C03A  F011         	movff	drawtext@_text,strlen@s
 15121  0019E4  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
 15122  0019E8  EC1F  F01C         	call	_strlen	;wreg free
 15123  0019EC  C011  F135         	movff	?_strlen,drawtext@textsize
 15124  0019F0  C012  F136         	movff	?_strlen+1,drawtext@textsize+1
 15125                           
 15126                           ;ST7735_TFT.c: 480: for(i = 0; i < textsize; i++){
 15127  0019F4  0E00               	movlw	0
 15128  0019F6  0101               	movlb	1	; () banked
 15129  0019F8  6F38               	movwf	(drawtext@i+1)& (0+255),b
 15130  0019FA  0E00               	movlw	0
 15131  0019FC  6F37               	movwf	drawtext@i& (0+255),b
 15132  0019FE  D066               	goto	l8573
 15133  001A00                     l8547:
 15134                           
 15135                           ; BSR set to: 1
 15136                           ;ST7735_TFT.c: 481: if(wrap && ((cursor_x + size * 5) > 128)){
 15137  001A00  0100               	movlb	0	; () banked
 15138  001A02  5181               	movf	_wrap& (0+255),w,b
 15139  001A04  0100               	movlb	0	; () banked
 15140  001A06  B4D8               	btfsc	status,2,c
 15141  001A08  D034               	goto	l8563
 15142                           
 15143                           ; BSR set to: 0
 15144  001A0A  5040               	movf	drawtext@size,w,c
 15145  001A0C  0D05               	mullw	5
 15146  001A0E  0101               	movlb	1	; () banked
 15147  001A10  513A               	movf	drawtext@cursor_x& (0+255),w,b
 15148  001A12  6E41               	movwf	??_drawtext& (0+255),c
 15149  001A14  6A42               	clrf	(??_drawtext+1)& (0+255),c
 15150  001A16  50F3               	movf	prodl,w,c
 15151  001A18  2641               	addwf	??_drawtext,f,c
 15152  001A1A  50F4               	movf	prodh,w,c
 15153  001A1C  2242               	addwfc	??_drawtext+1,f,c
 15154  001A1E  BE42               	btfsc	??_drawtext+1,7,c
 15155  001A20  D028               	goto	l8563
 15156  001A22  5042               	movf	??_drawtext+1,w,c
 15157  001A24  E104               	bnz	u6310
 15158  001A26  0E81               	movlw	129
 15159  001A28  5C41               	subwf	??_drawtext,w,c
 15160  001A2A  A0D8               	btfss	status,0,c
 15161  001A2C  D022               	goto	l8563
 15162  001A2E                     u6310:
 15163                           
 15164                           ; BSR set to: 1
 15165                           ;ST7735_TFT.c: 482: cursor_x = 0;
 15166  001A2E  0E00               	movlw	0
 15167  001A30  0101               	movlb	1	; () banked
 15168  001A32  6F3A               	movwf	drawtext@cursor_x& (0+255),b
 15169                           
 15170                           ; BSR set to: 1
 15171                           ;ST7735_TFT.c: 483: cursor_y = cursor_y + size * 7 + 3 ;
 15172  001A34  5040               	movf	drawtext@size,w,c
 15173  001A36  0D07               	mullw	7
 15174  001A38  50F3               	movf	prodl,w,c
 15175  001A3A  0101               	movlb	1	; () banked
 15176  001A3C  2539               	addwf	drawtext@cursor_y& (0+255),w,b
 15177  001A3E  0F03               	addlw	3
 15178  001A40  0101               	movlb	1	; () banked
 15179  001A42  6F39               	movwf	drawtext@cursor_y& (0+255),b
 15180                           
 15181                           ; BSR set to: 1
 15182                           ;ST7735_TFT.c: 484: if(cursor_y > 160) cursor_y = 160;
 15183  001A44  0EA0               	movlw	160
 15184  001A46  0101               	movlb	1	; () banked
 15185  001A48  6539               	cpfsgt	drawtext@cursor_y& (0+255),b
 15186  001A4A  D004               	goto	l8559
 15187                           
 15188                           ; BSR set to: 1
 15189  001A4C  0EA0               	movlw	160
 15190  001A4E  0101               	movlb	1	; () banked
 15191  001A50  6F39               	movwf	drawtext@cursor_y& (0+255),b
 15192  001A52  D000               	goto	l8559
 15193  001A54                     l8559:
 15194                           
 15195                           ; BSR set to: 1
 15196                           ;ST7735_TFT.c: 485: if(_text[i] == 0x20) goto _skip; }
 15197  001A54  0101               	movlb	1	; () banked
 15198  001A56  5137               	movf	drawtext@i& (0+255),w,b
 15199  001A58  243A               	addwf	drawtext@_text,w,c
 15200  001A5A  6ED9               	movwf	fsr2l,c
 15201  001A5C  0101               	movlb	1	; () banked
 15202  001A5E  5138               	movf	(drawtext@i+1)& (0+255),w,b
 15203  001A60  203B               	addwfc	drawtext@_text+1,w,c
 15204  001A62  6EDA               	movwf	fsr2h,c
 15205  001A64  0E20               	movlw	32
 15206  001A66  18DE               	xorwf	postinc2,w,c
 15207  001A68  B4D8               	btfsc	status,2,c
 15208  001A6A  D02C               	goto	l8571
 15209  001A6C  D002               	goto	l8563
 15210                           
 15211                           ; BSR set to: 1
 15212  001A6E  D02A               	goto	l8571
 15213                           
 15214                           ; BSR set to: 1
 15215  001A70  D000               	goto	l8563
 15216  001A72                     l8563:
 15217                           
 15218                           ;ST7735_TFT.c: 486: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
 15219  001A72  C139  F02E         	movff	drawtext@cursor_y,drawChar@y
 15220  001A76  0101               	movlb	1	; () banked
 15221  001A78  5137               	movf	drawtext@i& (0+255),w,b
 15222  001A7A  243A               	addwf	drawtext@_text,w,c
 15223  001A7C  6ED9               	movwf	fsr2l,c
 15224  001A7E  0101               	movlb	1	; () banked
 15225  001A80  5138               	movf	(drawtext@i+1)& (0+255),w,b
 15226  001A82  203B               	addwfc	drawtext@_text+1,w,c
 15227  001A84  6EDA               	movwf	fsr2h,c
 15228  001A86  50DF               	movf	indf2,w,c
 15229  001A88  6E2F               	movwf	drawChar@c,c
 15230  001A8A  C03C  F030         	movff	drawtext@color,drawChar@color
 15231  001A8E  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
 15232  001A92  C03E  F032         	movff	drawtext@bg,drawChar@bg
 15233  001A96  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
 15234  001A9A  C040  F034         	movff	drawtext@size,drawChar@size
 15235  001A9E  0101               	movlb	1	; () banked
 15236  001AA0  513A               	movf	drawtext@cursor_x& (0+255),w,b
 15237  001AA2  ECB7  F00B         	call	_drawChar
 15238                           
 15239                           ;ST7735_TFT.c: 487: cursor_x = cursor_x + size * 6;
 15240  001AA6  5040               	movf	drawtext@size,w,c
 15241  001AA8  0D06               	mullw	6
 15242  001AAA  50F3               	movf	prodl,w,c
 15243  001AAC  0101               	movlb	1	; () banked
 15244  001AAE  253A               	addwf	drawtext@cursor_x& (0+255),w,b
 15245  001AB0  0101               	movlb	1	; () banked
 15246  001AB2  6F3A               	movwf	drawtext@cursor_x& (0+255),b
 15247                           
 15248                           ; BSR set to: 1
 15249                           ;ST7735_TFT.c: 488: if(cursor_x > 128) cursor_x = 128;
 15250  001AB4  0E80               	movlw	128
 15251  001AB6  0101               	movlb	1	; () banked
 15252  001AB8  653A               	cpfsgt	drawtext@cursor_x& (0+255),b
 15253  001ABA  D004               	goto	l8571
 15254                           
 15255                           ; BSR set to: 1
 15256  001ABC  0E80               	movlw	128
 15257  001ABE  0101               	movlb	1	; () banked
 15258  001AC0  6F3A               	movwf	drawtext@cursor_x& (0+255),b
 15259                           
 15260                           ; BSR set to: 1
 15261  001AC2  D000               	goto	l8571
 15262  001AC4                     l8571:
 15263                           
 15264                           ; BSR set to: 1
 15265  001AC4  0101               	movlb	1	; () banked
 15266  001AC6  4B37               	infsnz	drawtext@i& (0+255),f,b
 15267  001AC8  2B38               	incf	(drawtext@i+1)& (0+255),f,b
 15268  001ACA  D000               	goto	l8573
 15269  001ACC                     l8573:
 15270                           
 15271                           ; BSR set to: 1
 15272  001ACC  0101               	movlb	1	; () banked
 15273  001ACE  5135               	movf	drawtext@textsize& (0+255),w,b
 15274  001AD0  0101               	movlb	1	; () banked
 15275  001AD2  5D37               	subwf	drawtext@i& (0+255),w,b
 15276  001AD4  0101               	movlb	1	; () banked
 15277  001AD6  5136               	movf	(drawtext@textsize+1)& (0+255),w,b
 15278  001AD8  0101               	movlb	1	; () banked
 15279  001ADA  5938               	subwfb	(drawtext@i+1)& (0+255),w,b
 15280  001ADC  A0D8               	btfss	status,0,c
 15281  001ADE  D790               	goto	l8547
 15282                           
 15283                           ; BSR set to: 1
 15284                           
 15285                           ; BSR set to: 1
 15286  001AE0  0012               	return		;funcret
 15287  001AE2                     __end_of_drawtext:
 15288                           	opt stack 0
 15289                           tblptru	equ	0xFF8
 15290                           tblptrh	equ	0xFF7
 15291                           tblptrl	equ	0xFF6
 15292                           tablat	equ	0xFF5
 15293                           prodh	equ	0xFF4
 15294                           prodl	equ	0xFF3
 15295                           intcon	equ	0xFF2
 15296                           intcon2	equ	0xFF1
 15297                           postinc0	equ	0xFEE
 15298                           wreg	equ	0xFE8
 15299                           postdec1	equ	0xFE5
 15300                           fsr1l	equ	0xFE1
 15301                           indf2	equ	0xFDF
 15302                           postinc2	equ	0xFDE
 15303                           postdec2	equ	0xFDD
 15304                           fsr2h	equ	0xFDA
 15305                           fsr2l	equ	0xFD9
 15306                           status	equ	0xFD8
 15307                           
 15308 ;; *************** function _strlen *****************
 15309 ;; Defined at:
 15310 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
 15311 ;; Parameters:    Size  Location     Type
 15312 ;;  s               2   16[COMRAM] PTR const unsigned char 
 15313 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_heater_set_text(5), 
 15314 ;;		 -> setup_alarm_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 15315 ;;		 -> RTC_ALARM_Txt(2), Heater_SW_Txt(4), Heater_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 15316 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 15317 ;;		 -> tempC(4), 
 15318 ;; Auto vars:     Size  Location     Type
 15319 ;;  cp              2   20[COMRAM] PTR const unsigned char 
 15320 ;;		 -> NULL(0), setup_date(9), setup_time(9), setup_heater_set_text(5), 
 15321 ;;		 -> setup_alarm_time(9), RPM_Txt(5), Volt_Txt(6), DC_Txt(4), 
 15322 ;;		 -> RTC_ALARM_Txt(2), Heater_SW_Txt(4), Heater_Set_Temp_Txt(5), Alarm_SW_Txt(4), 
 15323 ;;		 -> alarm_time(9), date(9), time(9), tempF(4), 
 15324 ;;		 -> tempC(4), 
 15325 ;; Return value:  Size  Location     Type
 15326 ;;                  2   16[COMRAM] unsigned int 
 15327 ;; Registers used:
 15328 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15329 ;; Tracked objects:
 15330 ;;		On entry : 0/0
 15331 ;;		On exit  : 0/0
 15332 ;;		Unchanged: 0/0
 15333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15334 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15335 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15336 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15337 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15338 ;;Total ram usage:        6 bytes
 15339 ;; Hardware stack levels used:    1
 15340 ;; Hardware stack levels required when called:    3
 15341 ;; This function calls:
 15342 ;;		Nothing
 15343 ;; This function is called by:
 15344 ;;		_drawtext
 15345 ;; This function uses a non-reentrant model
 15346 ;;
 15347                           
 15348                           	psect	text84
 15349  00383E                     __ptext84:
 15350                           	opt stack 0
 15351  00383E                     _strlen:
 15352                           	opt stack 25
 15353                           
 15354                           ; BSR set to: 1
 15355                           ;incstack = 0
 15356  00383E  C011  F015         	movff	strlen@s,strlen@cp
 15357  003842  C012  F016         	movff	strlen@s+1,strlen@cp+1
 15358  003846  D003               	goto	l8159
 15359  003848                     l8157:
 15360  003848  4A15               	infsnz	strlen@cp,f,c
 15361  00384A  2A16               	incf	strlen@cp+1,f,c
 15362  00384C  D000               	goto	l8159
 15363  00384E                     l8159:
 15364  00384E  C015  FFD9         	movff	strlen@cp,fsr2l
 15365  003852  C016  FFDA         	movff	strlen@cp+1,fsr2h
 15366  003856  50DF               	movf	indf2,w,c
 15367  003858  A4D8               	btfss	status,2,c
 15368  00385A  D7F6               	goto	l8157
 15369  00385C  C011  F013         	movff	strlen@s,??_strlen
 15370  003860  C012  F014         	movff	strlen@s+1,??_strlen+1
 15371  003864  1E13               	comf	??_strlen,f,c
 15372  003866  1E14               	comf	??_strlen+1,f,c
 15373  003868  4A13               	infsnz	??_strlen,f,c
 15374  00386A  2A14               	incf	??_strlen+1,f,c
 15375  00386C  5015               	movf	strlen@cp,w,c
 15376  00386E  2413               	addwf	??_strlen,w,c
 15377  003870  6E11               	movwf	?_strlen,c
 15378  003872  5016               	movf	strlen@cp+1,w,c
 15379  003874  2014               	addwfc	??_strlen+1,w,c
 15380  003876  6E12               	movwf	?_strlen+1,c
 15381  003878  D000               	goto	l2051
 15382  00387A                     l2051:
 15383  00387A  0012               	return		;funcret
 15384  00387C                     __end_of_strlen:
 15385                           	opt stack 0
 15386                           tblptru	equ	0xFF8
 15387                           tblptrh	equ	0xFF7
 15388                           tblptrl	equ	0xFF6
 15389                           tablat	equ	0xFF5
 15390                           prodh	equ	0xFF4
 15391                           prodl	equ	0xFF3
 15392                           intcon	equ	0xFF2
 15393                           intcon2	equ	0xFF1
 15394                           postinc0	equ	0xFEE
 15395                           wreg	equ	0xFE8
 15396                           postdec1	equ	0xFE5
 15397                           fsr1l	equ	0xFE1
 15398                           indf2	equ	0xFDF
 15399                           postinc2	equ	0xFDE
 15400                           postdec2	equ	0xFDD
 15401                           fsr2h	equ	0xFDA
 15402                           fsr2l	equ	0xFD9
 15403                           status	equ	0xFD8
 15404                           
 15405 ;; *************** function _drawChar *****************
 15406 ;; Defined at:
 15407 ;;		line 447 in file "ST7735_TFT.c"
 15408 ;; Parameters:    Size  Location     Type
 15409 ;;  x               1    wreg     unsigned char 
 15410 ;;  y               1   45[COMRAM] unsigned char 
 15411 ;;  c               1   46[COMRAM] unsigned char 
 15412 ;;  color           2   47[COMRAM] unsigned int 
 15413 ;;  bg              2   49[COMRAM] unsigned int 
 15414 ;;  size            1   51[COMRAM] unsigned char 
 15415 ;; Auto vars:     Size  Location     Type
 15416 ;;  x               1   53[COMRAM] unsigned char 
 15417 ;;  line            1   52[COMRAM] unsigned char 
 15418 ;;  i               1   55[COMRAM] unsigned char 
 15419 ;;  j               1   54[COMRAM] unsigned char 
 15420 ;; Return value:  Size  Location     Type
 15421 ;;		None               void
 15422 ;; Registers used:
 15423 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15424 ;; Tracked objects:
 15425 ;;		On entry : 0/0
 15426 ;;		On exit  : 0/0
 15427 ;;		Unchanged: 0/0
 15428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15429 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15430 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15432 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15433 ;;Total ram usage:       11 bytes
 15434 ;; Hardware stack levels used:    1
 15435 ;; Hardware stack levels required when called:    8
 15436 ;; This function calls:
 15437 ;;		___wmul
 15438 ;;		_drawPixel
 15439 ;;		_fillRect
 15440 ;; This function is called by:
 15441 ;;		_drawtext
 15442 ;; This function uses a non-reentrant model
 15443 ;;
 15444                           
 15445                           	psect	text85
 15446  00176E                     __ptext85:
 15447                           	opt stack 0
 15448  00176E                     _drawChar:
 15449                           	opt stack 20
 15450                           
 15451                           ;incstack = 0
 15452                           ;drawChar@x stored from wreg
 15453  00176E  6E36               	movwf	drawChar@x,c
 15454                           
 15455                           ;ST7735_TFT.c: 449: char i, j;
 15456                           ;ST7735_TFT.c: 450: if((x >= 128) || (y >= 160))
 15457  001770  0E80               	movlw	128
 15458  001772  6036               	cpfslt	drawChar@x,c
 15459  001774  D0A6               	goto	l1165
 15460  001776  0E9F               	movlw	159
 15461  001778  642E               	cpfsgt	drawChar@y,c
 15462  00177A  D001               	goto	l8105
 15463                           
 15464                           ;ST7735_TFT.c: 451: return;
 15465  00177C  D0A2               	goto	l1165
 15466  00177E                     l8105:
 15467                           
 15468                           ;ST7735_TFT.c: 452: if(size < 1) size = 1;
 15469  00177E  5034               	movf	drawChar@size,w,c
 15470  001780  A4D8               	btfss	status,2,c
 15471  001782  D003               	goto	l8109
 15472  001784  0E01               	movlw	1
 15473  001786  6E34               	movwf	drawChar@size,c
 15474  001788  D000               	goto	l8109
 15475  00178A                     l8109:
 15476                           
 15477                           ;ST7735_TFT.c: 453: if((c < ' ') || (c > '~'))
 15478  00178A  0E1F               	movlw	31
 15479  00178C  642F               	cpfsgt	drawChar@c,c
 15480  00178E  D004               	goto	l8113
 15481  001790  0E7E               	movlw	126
 15482  001792  642F               	cpfsgt	drawChar@c,c
 15483  001794  D003               	goto	l1167
 15484  001796  D000               	goto	l8113
 15485  001798                     l8113:
 15486                           
 15487                           ;ST7735_TFT.c: 454: c = '?';
 15488  001798  0E3F               	movlw	63
 15489  00179A  6E2F               	movwf	drawChar@c,c
 15490  00179C                     l1167:
 15491                           
 15492                           ;ST7735_TFT.c: 455: for(i=0; i<5; i++ ) {
 15493  00179C  0E00               	movlw	0
 15494  00179E  6E38               	movwf	drawChar@i,c
 15495  0017A0                     l8115:
 15496  0017A0  0E04               	movlw	4
 15497  0017A2  6438               	cpfsgt	drawChar@i,c
 15498  0017A4  D001               	goto	l8119
 15499  0017A6  D08D               	goto	l1165
 15500  0017A8                     l8119:
 15501                           
 15502                           ;ST7735_TFT.c: 456: unsigned char line;
 15503                           ;ST7735_TFT.c: 457: if(c < 'S')
 15504  0017A8  0E53               	movlw	83
 15505  0017AA  602F               	cpfslt	drawChar@c,c
 15506  0017AC  D015               	goto	l8123
 15507                           
 15508                           ;ST7735_TFT.c: 458: line = font[(c - 32)*5 + i];
 15509  0017AE  0EE0               	movlw	224
 15510  0017B0  242F               	addwf	drawChar@c,w,c
 15511  0017B2  6E11               	movwf	___wmul@multiplier,c
 15512  0017B4  6A12               	clrf	___wmul@multiplier+1,c
 15513  0017B6  0EFF               	movlw	255
 15514  0017B8  2212               	addwfc	___wmul@multiplier+1,f,c
 15515  0017BA  0E00               	movlw	0
 15516  0017BC  6E14               	movwf	___wmul@multiplicand+1,c
 15517  0017BE  0E05               	movlw	5
 15518  0017C0  6E13               	movwf	___wmul@multiplicand,c
 15519  0017C2  EC27  F01D         	call	___wmul	;wreg free
 15520  0017C6  5038               	movf	drawChar@i,w,c
 15521  0017C8  2611               	addwf	?___wmul,f,c
 15522  0017CA  0E00               	movlw	0
 15523  0017CC  2212               	addwfc	?___wmul+1,f,c
 15524  0017CE  0ECB               	movlw	low _font
 15525  0017D0  2411               	addwf	?___wmul,w,c
 15526  0017D2  6EF6               	movwf	tblptrl,c
 15527  0017D4  0EFC               	movlw	high _font
 15528  0017D6  D014               	goto	L11
 15529  0017D8                     l8123:
 15530                           
 15531                           ;ST7735_TFT.c: 459: else
 15532                           ;ST7735_TFT.c: 460: line = font2[(c - 'S')*5 + i];
 15533  0017D8  0EAD               	movlw	173
 15534  0017DA  242F               	addwf	drawChar@c,w,c
 15535  0017DC  6E11               	movwf	___wmul@multiplier,c
 15536  0017DE  6A12               	clrf	___wmul@multiplier+1,c
 15537  0017E0  0EFF               	movlw	255
 15538  0017E2  2212               	addwfc	___wmul@multiplier+1,f,c
 15539  0017E4  0E00               	movlw	0
 15540  0017E6  6E14               	movwf	___wmul@multiplicand+1,c
 15541  0017E8  0E05               	movlw	5
 15542  0017EA  6E13               	movwf	___wmul@multiplicand,c
 15543  0017EC  EC27  F01D         	call	___wmul	;wreg free
 15544  0017F0  5038               	movf	drawChar@i,w,c
 15545  0017F2  2611               	addwf	?___wmul,f,c
 15546  0017F4  0E00               	movlw	0
 15547  0017F6  2212               	addwfc	?___wmul+1,f,c
 15548  0017F8  0ECA               	movlw	low _font2
 15549  0017FA  2411               	addwf	?___wmul,w,c
 15550  0017FC  6EF6               	movwf	tblptrl,c
 15551  0017FE  0EFD               	movlw	high _font2
 15552  001800                     L11:
 15553  001800  2012               	addwfc	?___wmul+1,w,c
 15554  001802  6EF7               	movwf	tblptrh,c
 15555  001804                     	if	0	;There are less than 3 active tblptr bytes
 15556  001804                     	endif
 15557  001804  0008               	tblrd		*
 15558  001806  CFF5 F035          	movff	tablat,drawChar@line
 15559  00180A  D000               	goto	l8125
 15560  00180C                     l8125:
 15561                           
 15562                           ;ST7735_TFT.c: 461: for(j=0; j<7; j++, line >>= 1) {
 15563  00180C  0E00               	movlw	0
 15564  00180E  6E37               	movwf	drawChar@j,c
 15565  001810                     l8127:
 15566  001810  0E06               	movlw	6
 15567  001812  6437               	cpfsgt	drawChar@j,c
 15568  001814  D001               	goto	l1174
 15569  001816  D053               	goto	l8151
 15570  001818                     l1174:
 15571                           
 15572                           ;ST7735_TFT.c: 462: if(line & 0x01) {
 15573  001818  A035               	btfss	drawChar@line,0,c
 15574  00181A  D023               	goto	l8137
 15575                           
 15576                           ;ST7735_TFT.c: 463: if(size == 1) drawPixel(x+i, y+j, color);
 15577  00181C  0434               	decf	drawChar@size,w,c
 15578  00181E  A4D8               	btfss	status,2,c
 15579  001820  D00C               	goto	l8135
 15580  001822  502E               	movf	drawChar@y,w,c
 15581  001824  2437               	addwf	drawChar@j,w,c
 15582  001826  6E18               	movwf	drawPixel@y,c
 15583  001828  C030  F019         	movff	drawChar@color,drawPixel@color
 15584  00182C  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
 15585  001830  5036               	movf	drawChar@x,w,c
 15586  001832  2438               	addwf	drawChar@i,w,c
 15587  001834  ECE5  F01C         	call	_drawPixel
 15588  001838  D03E               	goto	l8145
 15589  00183A                     l8135:
 15590                           
 15591                           ;ST7735_TFT.c: 464: else fillRect(x+(i*size), y+(j*size), size, size, color);
 15592  00183A  5037               	movf	drawChar@j,w,c
 15593  00183C  0234               	mulwf	drawChar@size,c
 15594  00183E  50F3               	movf	prodl,w,c
 15595  001840  242E               	addwf	drawChar@y,w,c
 15596  001842  6E23               	movwf	fillRect@y,c
 15597  001844  C034  F024         	movff	drawChar@size,fillRect@w
 15598  001848  C034  F025         	movff	drawChar@size,fillRect@h
 15599  00184C  C030  F026         	movff	drawChar@color,fillRect@color
 15600  001850  C031  F027         	movff	drawChar@color+1,fillRect@color+1
 15601  001854  5038               	movf	drawChar@i,w,c
 15602  001856  0234               	mulwf	drawChar@size,c
 15603  001858  50F3               	movf	prodl,w,c
 15604  00185A  2436               	addwf	drawChar@x,w,c
 15605  00185C  EC96  F01B         	call	_fillRect
 15606                           
 15607                           ;ST7735_TFT.c: 465: }
 15608  001860  D02A               	goto	l8145
 15609  001862                     l8137:
 15610                           
 15611                           ;ST7735_TFT.c: 466: else if(bg != color) {
 15612  001862  5030               	movf	drawChar@color,w,c
 15613  001864  1832               	xorwf	drawChar@bg,w,c
 15614  001866  E104               	bnz	u5730
 15615  001868  5031               	movf	drawChar@color+1,w,c
 15616  00186A  1833               	xorwf	drawChar@bg+1,w,c
 15617  00186C  B4D8               	btfsc	status,2,c
 15618  00186E  D023               	goto	l8145
 15619  001870                     u5730:
 15620                           
 15621                           ;ST7735_TFT.c: 467: if(size == 1) drawPixel(x+i, y+j, bg);
 15622  001870  0434               	decf	drawChar@size,w,c
 15623  001872  A4D8               	btfss	status,2,c
 15624  001874  D00C               	goto	l8143
 15625  001876  502E               	movf	drawChar@y,w,c
 15626  001878  2437               	addwf	drawChar@j,w,c
 15627  00187A  6E18               	movwf	drawPixel@y,c
 15628  00187C  C032  F019         	movff	drawChar@bg,drawPixel@color
 15629  001880  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
 15630  001884  5036               	movf	drawChar@x,w,c
 15631  001886  2438               	addwf	drawChar@i,w,c
 15632  001888  ECE5  F01C         	call	_drawPixel
 15633  00188C  D014               	goto	l8145
 15634  00188E                     l8143:
 15635                           
 15636                           ;ST7735_TFT.c: 468: else fillRect(x+i*size, y+j*size, size, size, bg);
 15637  00188E  5037               	movf	drawChar@j,w,c
 15638  001890  0234               	mulwf	drawChar@size,c
 15639  001892  50F3               	movf	prodl,w,c
 15640  001894  242E               	addwf	drawChar@y,w,c
 15641  001896  6E23               	movwf	fillRect@y,c
 15642  001898  C034  F024         	movff	drawChar@size,fillRect@w
 15643  00189C  C034  F025         	movff	drawChar@size,fillRect@h
 15644  0018A0  C032  F026         	movff	drawChar@bg,fillRect@color
 15645  0018A4  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
 15646  0018A8  5038               	movf	drawChar@i,w,c
 15647  0018AA  0234               	mulwf	drawChar@size,c
 15648  0018AC  50F3               	movf	prodl,w,c
 15649  0018AE  2436               	addwf	drawChar@x,w,c
 15650  0018B0  EC96  F01B         	call	_fillRect
 15651  0018B4  D000               	goto	l8145
 15652  0018B6                     l8145:
 15653  0018B6  2A37               	incf	drawChar@j,f,c
 15654  0018B8  90D8               	bcf	status,0,c
 15655  0018BA  3235               	rrcf	drawChar@line,f,c
 15656  0018BC  D7A9               	goto	l8127
 15657  0018BE                     l8151:
 15658  0018BE  2A38               	incf	drawChar@i,f,c
 15659  0018C0  D76F               	goto	l8115
 15660  0018C2                     l1165:
 15661  0018C2  0012               	return		;funcret
 15662  0018C4                     __end_of_drawChar:
 15663                           	opt stack 0
 15664                           tblptru	equ	0xFF8
 15665                           tblptrh	equ	0xFF7
 15666                           tblptrl	equ	0xFF6
 15667                           tablat	equ	0xFF5
 15668                           prodh	equ	0xFF4
 15669                           prodl	equ	0xFF3
 15670                           intcon	equ	0xFF2
 15671                           intcon2	equ	0xFF1
 15672                           postinc0	equ	0xFEE
 15673                           wreg	equ	0xFE8
 15674                           postdec1	equ	0xFE5
 15675                           fsr1l	equ	0xFE1
 15676                           indf2	equ	0xFDF
 15677                           postinc2	equ	0xFDE
 15678                           postdec2	equ	0xFDD
 15679                           fsr2h	equ	0xFDA
 15680                           fsr2l	equ	0xFD9
 15681                           status	equ	0xFD8
 15682                           
 15683 ;; *************** function _fillRect *****************
 15684 ;; Defined at:
 15685 ;;		line 437 in file "ST7735_TFT.c"
 15686 ;; Parameters:    Size  Location     Type
 15687 ;;  x               1    wreg     unsigned char 
 15688 ;;  y               1   34[COMRAM] unsigned char 
 15689 ;;  w               1   35[COMRAM] unsigned char 
 15690 ;;  h               1   36[COMRAM] unsigned char 
 15691 ;;  color           2   37[COMRAM] unsigned int 
 15692 ;; Auto vars:     Size  Location     Type
 15693 ;;  x               1   42[COMRAM] unsigned char 
 15694 ;;  i               2   43[COMRAM] int 
 15695 ;; Return value:  Size  Location     Type
 15696 ;;		None               void
 15697 ;; Registers used:
 15698 ;;		wreg, status,2, status,0, cstack
 15699 ;; Tracked objects:
 15700 ;;		On entry : 0/0
 15701 ;;		On exit  : 0/0
 15702 ;;		Unchanged: 0/0
 15703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15704 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15705 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15706 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15707 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15708 ;;Total ram usage:       11 bytes
 15709 ;; Hardware stack levels used:    1
 15710 ;; Hardware stack levels required when called:    7
 15711 ;; This function calls:
 15712 ;;		_drawFastVLine
 15713 ;; This function is called by:
 15714 ;;		_Initialize_Setup_Alarm_Time_Screen
 15715 ;;		_Initialize_Setup_Time_Screen
 15716 ;;		_Update_Setup_Screen_Cursor_Forward
 15717 ;;		_Update_Setup_Screen_Cursor_Backward
 15718 ;;		_drawChar
 15719 ;; This function uses a non-reentrant model
 15720 ;;
 15721                           
 15722                           	psect	text86
 15723  00372C                     __ptext86:
 15724                           	opt stack 0
 15725  00372C                     _fillRect:
 15726                           	opt stack 20
 15727                           
 15728                           ;incstack = 0
 15729                           ;fillRect@x stored from wreg
 15730  00372C  6E2B               	movwf	fillRect@x,c
 15731                           
 15732                           ;ST7735_TFT.c: 439: signed int i;
 15733                           ;ST7735_TFT.c: 441: for (i = x; i < x + w; i++)
 15734  00372E  C02B  F02C         	movff	fillRect@x,fillRect@i
 15735  003732  6A2D               	clrf	fillRect@i+1,c
 15736  003734  D00E               	goto	l7903
 15737  003736                     l7899:
 15738                           
 15739                           ;ST7735_TFT.c: 442: {
 15740                           ;ST7735_TFT.c: 443: drawFastVLine(i, y, h, color);
 15741  003736  C023  F018         	movff	fillRect@y,drawFastVLine@y
 15742  00373A  C025  F019         	movff	fillRect@h,drawFastVLine@h
 15743  00373E  C026  F01A         	movff	fillRect@color,drawFastVLine@color
 15744  003742  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
 15745  003746  502C               	movf	fillRect@i,w,c
 15746  003748  EC95  F017         	call	_drawFastVLine
 15747  00374C  4A2C               	infsnz	fillRect@i,f,c
 15748  00374E  2A2D               	incf	fillRect@i+1,f,c
 15749  003750  D000               	goto	l7903
 15750  003752                     l7903:
 15751  003752  5024               	movf	fillRect@w,w,c
 15752  003754  C02B  F028         	movff	fillRect@x,??_fillRect
 15753  003758  6A29               	clrf	(??_fillRect+1)& (0+255),c
 15754  00375A  2628               	addwf	??_fillRect,f,c
 15755  00375C  0E00               	movlw	0
 15756  00375E  2229               	addwfc	??_fillRect+1,f,c
 15757  003760  5028               	movf	??_fillRect,w,c
 15758  003762  5C2C               	subwf	fillRect@i,w,c
 15759  003764  502D               	movf	fillRect@i+1,w,c
 15760  003766  0A80               	xorlw	128
 15761  003768  6E2A               	movwf	(??_fillRect+2)& (0+255),c
 15762  00376A  5029               	movf	??_fillRect+1,w,c
 15763  00376C  0A80               	xorlw	128
 15764  00376E  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
 15765  003770  A0D8               	btfss	status,0,c
 15766  003772  D7E1               	goto	l7899
 15767  003774  0012               	return		;funcret
 15768  003776                     __end_of_fillRect:
 15769                           	opt stack 0
 15770                           tblptru	equ	0xFF8
 15771                           tblptrh	equ	0xFF7
 15772                           tblptrl	equ	0xFF6
 15773                           tablat	equ	0xFF5
 15774                           prodh	equ	0xFF4
 15775                           prodl	equ	0xFF3
 15776                           intcon	equ	0xFF2
 15777                           intcon2	equ	0xFF1
 15778                           postinc0	equ	0xFEE
 15779                           wreg	equ	0xFE8
 15780                           postdec1	equ	0xFE5
 15781                           fsr1l	equ	0xFE1
 15782                           indf2	equ	0xFDF
 15783                           postinc2	equ	0xFDE
 15784                           postdec2	equ	0xFDD
 15785                           fsr2h	equ	0xFDA
 15786                           fsr2l	equ	0xFD9
 15787                           status	equ	0xFD8
 15788                           
 15789 ;; *************** function _drawFastVLine *****************
 15790 ;; Defined at:
 15791 ;;		line 416 in file "ST7735_TFT.c"
 15792 ;; Parameters:    Size  Location     Type
 15793 ;;  x               1    wreg     unsigned char 
 15794 ;;  y               1   23[COMRAM] unsigned char 
 15795 ;;  h               1   24[COMRAM] unsigned char 
 15796 ;;  color           2   25[COMRAM] unsigned int 
 15797 ;; Auto vars:     Size  Location     Type
 15798 ;;  x               1   33[COMRAM] unsigned char 
 15799 ;;  lo              1   32[COMRAM] unsigned char 
 15800 ;;  hi              1   31[COMRAM] unsigned char 
 15801 ;; Return value:  Size  Location     Type
 15802 ;;		None               void
 15803 ;; Registers used:
 15804 ;;		wreg, status,2, status,0, cstack
 15805 ;; Tracked objects:
 15806 ;;		On entry : 0/0
 15807 ;;		On exit  : 0/0
 15808 ;;		Unchanged: 0/0
 15809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15810 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15811 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15812 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15813 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15814 ;;Total ram usage:       11 bytes
 15815 ;; Hardware stack levels used:    1
 15816 ;; Hardware stack levels required when called:    6
 15817 ;; This function calls:
 15818 ;;		_setAddrWindow
 15819 ;;		_spiwrite
 15820 ;; This function is called by:
 15821 ;;		_fillRect
 15822 ;;		_fillCircleHelper
 15823 ;;		_fillCircle
 15824 ;;		_drawRect
 15825 ;; This function uses a non-reentrant model
 15826 ;;
 15827                           
 15828                           	psect	text87
 15829  002F2A                     __ptext87:
 15830                           	opt stack 0
 15831  002F2A                     _drawFastVLine:
 15832                           	opt stack 20
 15833                           
 15834                           ;incstack = 0
 15835                           ;drawFastVLine@x stored from wreg
 15836  002F2A  6E22               	movwf	drawFastVLine@x,c
 15837                           
 15838                           ;ST7735_TFT.c: 418: unsigned char hi, lo;
 15839                           ;ST7735_TFT.c: 419: if((x >= 128) || (y >= 160))
 15840  002F2C  0E80               	movlw	128
 15841  002F2E  6022               	cpfslt	drawFastVLine@x,c
 15842  002F30  D03F               	goto	l1149
 15843  002F32  0E9F               	movlw	159
 15844  002F34  6418               	cpfsgt	drawFastVLine@y,c
 15845  002F36  D001               	goto	l7861
 15846                           
 15847                           ;ST7735_TFT.c: 420: return;
 15848  002F38  D03B               	goto	l1149
 15849  002F3A                     l7861:
 15850                           
 15851                           ;ST7735_TFT.c: 421: if((y + h - 1) >= 160)
 15852  002F3A  0EFF               	movlw	255
 15853  002F3C  6E1C               	movwf	??_drawFastVLine& (0+255),c
 15854  002F3E  0EFF               	movlw	255
 15855  002F40  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
 15856  002F42  5019               	movf	drawFastVLine@h,w,c
 15857  002F44  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
 15858  002F48  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
 15859  002F4A  261E               	addwf	??_drawFastVLine+2,f,c
 15860  002F4C  0E00               	movlw	0
 15861  002F4E  221F               	addwfc	??_drawFastVLine+3,f,c
 15862  002F50  501C               	movf	??_drawFastVLine,w,c
 15863  002F52  261E               	addwf	??_drawFastVLine+2,f,c
 15864  002F54  501D               	movf	??_drawFastVLine+1,w,c
 15865  002F56  221F               	addwfc	??_drawFastVLine+3,f,c
 15866  002F58  BE1F               	btfsc	??_drawFastVLine+3,7,c
 15867  002F5A  D00B               	goto	l7865
 15868  002F5C  501F               	movf	??_drawFastVLine+3,w,c
 15869  002F5E  E104               	bnz	u5500
 15870  002F60  0EA0               	movlw	160
 15871  002F62  5C1E               	subwf	??_drawFastVLine+2,w,c
 15872  002F64  A0D8               	btfss	status,0,c
 15873  002F66  D005               	goto	l7865
 15874  002F68                     u5500:
 15875                           
 15876                           ;ST7735_TFT.c: 422: h = 160 - y;
 15877  002F68  5018               	movf	drawFastVLine@y,w,c
 15878  002F6A  0800               	sublw	0
 15879  002F6C  0FA0               	addlw	160
 15880  002F6E  6E19               	movwf	drawFastVLine@h,c
 15881  002F70  D000               	goto	l7865
 15882  002F72                     l7865:
 15883                           
 15884                           ;ST7735_TFT.c: 423: hi = color >> 8; lo = color;
 15885  002F72  501B               	movf	drawFastVLine@color+1,w,c
 15886  002F74  6E20               	movwf	drawFastVLine@hi,c
 15887  002F76  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
 15888                           
 15889                           ;ST7735_TFT.c: 424: setAddrWindow(x, y, x, y + h - 1);
 15890  002F7A  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
 15891  002F7E  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
 15892  002F82  5018               	movf	drawFastVLine@y,w,c
 15893  002F84  2419               	addwf	drawFastVLine@h,w,c
 15894  002F86  6E1C               	movwf	??_drawFastVLine& (0+255),c
 15895  002F88  041C               	decf	??_drawFastVLine,w,c
 15896  002F8A  6E16               	movwf	setAddrWindow@y1,c
 15897  002F8C  5022               	movf	drawFastVLine@x,w,c
 15898  002F8E  EC23  F01B         	call	_setAddrWindow
 15899                           
 15900                           ;ST7735_TFT.c: 425: PORTBbits.RB4 = 1;
 15901  002F92  8881               	bsf	3969,4,c	;volatile
 15902                           
 15903                           ;ST7735_TFT.c: 426: PORTBbits.RB5 = 0;
 15904  002F94  9A81               	bcf	3969,5,c	;volatile
 15905                           
 15906                           ;ST7735_TFT.c: 428: while (h--) {
 15907  002F96  D007               	goto	l7877
 15908  002F98                     l7875:
 15909                           
 15910                           ;ST7735_TFT.c: 429: spiwrite(hi);
 15911  002F98  5020               	movf	drawFastVLine@hi,w,c
 15912  002F9A  EC63  F01E         	call	_spiwrite
 15913                           
 15914                           ;ST7735_TFT.c: 430: spiwrite(lo);
 15915  002F9E  5021               	movf	drawFastVLine@lo,w,c
 15916  002FA0  EC63  F01E         	call	_spiwrite
 15917  002FA4  D000               	goto	l7877
 15918  002FA6                     l7877:
 15919  002FA6  0619               	decf	drawFastVLine@h,f,c
 15920  002FA8  2819               	incf	drawFastVLine@h,w,c
 15921  002FAA  A4D8               	btfss	status,2,c
 15922  002FAC  D7F5               	goto	l7875
 15923                           
 15924                           ;ST7735_TFT.c: 431: }
 15925                           ;ST7735_TFT.c: 432: PORTBbits.RB5 = 1;
 15926  002FAE  8A81               	bsf	3969,5,c	;volatile
 15927  002FB0                     l1149:
 15928  002FB0  0012               	return		;funcret
 15929  002FB2                     __end_of_drawFastVLine:
 15930                           	opt stack 0
 15931                           tblptru	equ	0xFF8
 15932                           tblptrh	equ	0xFF7
 15933                           tblptrl	equ	0xFF6
 15934                           tablat	equ	0xFF5
 15935                           prodh	equ	0xFF4
 15936                           prodl	equ	0xFF3
 15937                           intcon	equ	0xFF2
 15938                           intcon2	equ	0xFF1
 15939                           postinc0	equ	0xFEE
 15940                           wreg	equ	0xFE8
 15941                           postdec1	equ	0xFE5
 15942                           fsr1l	equ	0xFE1
 15943                           indf2	equ	0xFDF
 15944                           postinc2	equ	0xFDE
 15945                           postdec2	equ	0xFDD
 15946                           fsr2h	equ	0xFDA
 15947                           fsr2l	equ	0xFD9
 15948                           status	equ	0xFD8
 15949                           
 15950 ;; *************** function _drawPixel *****************
 15951 ;; Defined at:
 15952 ;;		line 407 in file "ST7735_TFT.c"
 15953 ;; Parameters:    Size  Location     Type
 15954 ;;  x               1    wreg     unsigned char 
 15955 ;;  y               1   23[COMRAM] unsigned char 
 15956 ;;  color           2   24[COMRAM] unsigned int 
 15957 ;; Auto vars:     Size  Location     Type
 15958 ;;  x               1   26[COMRAM] unsigned char 
 15959 ;; Return value:  Size  Location     Type
 15960 ;;		None               void
 15961 ;; Registers used:
 15962 ;;		wreg, status,2, status,0, cstack
 15963 ;; Tracked objects:
 15964 ;;		On entry : 0/0
 15965 ;;		On exit  : 0/0
 15966 ;;		Unchanged: 0/0
 15967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15968 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15969 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15971 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15972 ;;Total ram usage:        4 bytes
 15973 ;; Hardware stack levels used:    1
 15974 ;; Hardware stack levels required when called:    6
 15975 ;; This function calls:
 15976 ;;		_setAddrWindow
 15977 ;;		_write_data
 15978 ;; This function is called by:
 15979 ;;		_drawChar
 15980 ;;		_drawCircle
 15981 ;;		_drawCircleHelper
 15982 ;; This function uses a non-reentrant model
 15983 ;;
 15984                           
 15985                           	psect	text88
 15986  0039CA                     __ptext88:
 15987                           	opt stack 0
 15988  0039CA                     _drawPixel:
 15989                           	opt stack 21
 15990                           
 15991                           ;incstack = 0
 15992                           ;drawPixel@x stored from wreg
 15993  0039CA  6E1B               	movwf	drawPixel@x,c
 15994                           
 15995                           ;ST7735_TFT.c: 409: if((x >= 128) || (y >= 160))
 15996  0039CC  0E80               	movlw	128
 15997  0039CE  601B               	cpfslt	drawPixel@x,c
 15998  0039D0  D013               	goto	l1143
 15999  0039D2  0E9F               	movlw	159
 16000  0039D4  6418               	cpfsgt	drawPixel@y,c
 16001  0039D6  D001               	goto	l7923
 16002                           
 16003                           ;ST7735_TFT.c: 410: return;
 16004  0039D8  D00F               	goto	l1143
 16005  0039DA                     l7923:
 16006                           
 16007                           ;ST7735_TFT.c: 411: setAddrWindow(x,y,x+1,y+1);
 16008  0039DA  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
 16009  0039DE  281B               	incf	drawPixel@x,w,c
 16010  0039E0  6E15               	movwf	setAddrWindow@x1,c
 16011  0039E2  2818               	incf	drawPixel@y,w,c
 16012  0039E4  6E16               	movwf	setAddrWindow@y1,c
 16013  0039E6  501B               	movf	drawPixel@x,w,c
 16014  0039E8  EC23  F01B         	call	_setAddrWindow
 16015                           
 16016                           ;ST7735_TFT.c: 412: write_data(color >> 8);
 16017  0039EC  501A               	movf	drawPixel@color+1,w,c
 16018  0039EE  ECDE  F01E         	call	_write_data
 16019                           
 16020                           ;ST7735_TFT.c: 413: write_data(color & 0xFF);
 16021  0039F2  5019               	movf	drawPixel@color,w,c
 16022  0039F4  ECDE  F01E         	call	_write_data
 16023  0039F8                     l1143:
 16024  0039F8  0012               	return		;funcret
 16025  0039FA                     __end_of_drawPixel:
 16026                           	opt stack 0
 16027                           tblptru	equ	0xFF8
 16028                           tblptrh	equ	0xFF7
 16029                           tblptrl	equ	0xFF6
 16030                           tablat	equ	0xFF5
 16031                           prodh	equ	0xFF4
 16032                           prodl	equ	0xFF3
 16033                           intcon	equ	0xFF2
 16034                           intcon2	equ	0xFF1
 16035                           postinc0	equ	0xFEE
 16036                           wreg	equ	0xFE8
 16037                           postdec1	equ	0xFE5
 16038                           fsr1l	equ	0xFE1
 16039                           indf2	equ	0xFDF
 16040                           postinc2	equ	0xFDE
 16041                           postdec2	equ	0xFDD
 16042                           fsr2h	equ	0xFDA
 16043                           fsr2l	equ	0xFD9
 16044                           status	equ	0xFD8
 16045                           
 16046 ;; *************** function _setAddrWindow *****************
 16047 ;; Defined at:
 16048 ;;		line 392 in file "ST7735_TFT.c"
 16049 ;; Parameters:    Size  Location     Type
 16050 ;;  x0              1    wreg     unsigned char 
 16051 ;;  y0              1   19[COMRAM] unsigned char 
 16052 ;;  x1              1   20[COMRAM] unsigned char 
 16053 ;;  y1              1   21[COMRAM] unsigned char 
 16054 ;; Auto vars:     Size  Location     Type
 16055 ;;  x0              1   22[COMRAM] unsigned char 
 16056 ;; Return value:  Size  Location     Type
 16057 ;;		None               void
 16058 ;; Registers used:
 16059 ;;		wreg, status,2, status,0, cstack
 16060 ;; Tracked objects:
 16061 ;;		On entry : 0/0
 16062 ;;		On exit  : 0/0
 16063 ;;		Unchanged: 0/0
 16064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16065 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16066 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16068 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16069 ;;Total ram usage:        4 bytes
 16070 ;; Hardware stack levels used:    1
 16071 ;; Hardware stack levels required when called:    5
 16072 ;; This function calls:
 16073 ;;		_write_command
 16074 ;;		_write_data
 16075 ;; This function is called by:
 16076 ;;		_drawPixel
 16077 ;;		_drawFastVLine
 16078 ;;		_fillRectangle
 16079 ;;		_drawFastHLine
 16080 ;; This function uses a non-reentrant model
 16081 ;;
 16082                           
 16083                           	psect	text89
 16084  003646                     __ptext89:
 16085                           	opt stack 0
 16086  003646                     _setAddrWindow:
 16087                           	opt stack 20
 16088                           
 16089                           ;incstack = 0
 16090                           ;setAddrWindow@x0 stored from wreg
 16091  003646  6E17               	movwf	setAddrWindow@x0,c
 16092                           
 16093                           ;ST7735_TFT.c: 394: write_command(0x2A);
 16094  003648  0E2A               	movlw	42
 16095  00364A  ECE6  F01E         	call	_write_command
 16096                           
 16097                           ;ST7735_TFT.c: 395: write_data(0);
 16098  00364E  0E00               	movlw	0
 16099  003650  ECDE  F01E         	call	_write_data
 16100                           
 16101                           ;ST7735_TFT.c: 396: write_data(x0 + colstart);
 16102  003654  5017               	movf	setAddrWindow@x0,w,c
 16103  003656  245A               	addwf	_colstart,w,c
 16104  003658  ECDE  F01E         	call	_write_data
 16105                           
 16106                           ;ST7735_TFT.c: 397: write_data(0);
 16107  00365C  0E00               	movlw	0
 16108  00365E  ECDE  F01E         	call	_write_data
 16109                           
 16110                           ;ST7735_TFT.c: 398: write_data(x1 + colstart);
 16111  003662  5015               	movf	setAddrWindow@x1,w,c
 16112  003664  245A               	addwf	_colstart,w,c
 16113  003666  ECDE  F01E         	call	_write_data
 16114                           
 16115                           ;ST7735_TFT.c: 399: write_command(0x2B);
 16116  00366A  0E2B               	movlw	43
 16117  00366C  ECE6  F01E         	call	_write_command
 16118                           
 16119                           ;ST7735_TFT.c: 400: write_data(0);
 16120  003670  0E00               	movlw	0
 16121  003672  ECDE  F01E         	call	_write_data
 16122                           
 16123                           ;ST7735_TFT.c: 401: write_data(y0 + rowstart);
 16124  003676  5014               	movf	setAddrWindow@y0,w,c
 16125  003678  2462               	addwf	_rowstart,w,c
 16126  00367A  ECDE  F01E         	call	_write_data
 16127                           
 16128                           ;ST7735_TFT.c: 402: write_data(0);
 16129  00367E  0E00               	movlw	0
 16130  003680  ECDE  F01E         	call	_write_data
 16131                           
 16132                           ;ST7735_TFT.c: 403: write_data(y1 + rowstart);
 16133  003684  5016               	movf	setAddrWindow@y1,w,c
 16134  003686  2462               	addwf	_rowstart,w,c
 16135  003688  ECDE  F01E         	call	_write_data
 16136                           
 16137                           ;ST7735_TFT.c: 404: write_command(0x2C);
 16138  00368C  0E2C               	movlw	44
 16139  00368E  ECE6  F01E         	call	_write_command
 16140  003692  0012               	return		;funcret
 16141  003694                     __end_of_setAddrWindow:
 16142                           	opt stack 0
 16143                           tblptru	equ	0xFF8
 16144                           tblptrh	equ	0xFF7
 16145                           tblptrl	equ	0xFF6
 16146                           tablat	equ	0xFF5
 16147                           prodh	equ	0xFF4
 16148                           prodl	equ	0xFF3
 16149                           intcon	equ	0xFF2
 16150                           intcon2	equ	0xFF1
 16151                           postinc0	equ	0xFEE
 16152                           wreg	equ	0xFE8
 16153                           postdec1	equ	0xFE5
 16154                           fsr1l	equ	0xFE1
 16155                           indf2	equ	0xFDF
 16156                           postinc2	equ	0xFDE
 16157                           postdec2	equ	0xFDD
 16158                           fsr2h	equ	0xFDA
 16159                           fsr2l	equ	0xFD9
 16160                           status	equ	0xFD8
 16161                           
 16162 ;; *************** function _write_data *****************
 16163 ;; Defined at:
 16164 ;;		line 209 in file "ST7735_TFT.c"
 16165 ;; Parameters:    Size  Location     Type
 16166 ;;  data_           1    wreg     unsigned char 
 16167 ;; Auto vars:     Size  Location     Type
 16168 ;;  data_           1   18[COMRAM] unsigned char 
 16169 ;; Return value:  Size  Location     Type
 16170 ;;		None               void
 16171 ;; Registers used:
 16172 ;;		wreg, status,2, cstack
 16173 ;; Tracked objects:
 16174 ;;		On entry : 0/0
 16175 ;;		On exit  : 0/0
 16176 ;;		Unchanged: 0/0
 16177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16179 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16181 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16182 ;;Total ram usage:        1 bytes
 16183 ;; Hardware stack levels used:    1
 16184 ;; Hardware stack levels required when called:    4
 16185 ;; This function calls:
 16186 ;;		_spiwrite
 16187 ;; This function is called by:
 16188 ;;		_Rcmd1
 16189 ;;		_Rcmd2red
 16190 ;;		_Rcmd3
 16191 ;;		_setAddrWindow
 16192 ;;		_drawPixel
 16193 ;;		_TFT_GreenTab_Initialize
 16194 ;;		_Bcmd
 16195 ;;		_setScrollDefinition
 16196 ;;		_Rcmd2green
 16197 ;;		_VerticalScroll
 16198 ;; This function uses a non-reentrant model
 16199 ;;
 16200                           
 16201                           	psect	text90
 16202  003DBC                     __ptext90:
 16203                           	opt stack 0
 16204  003DBC                     _write_data:
 16205                           	opt stack 20
 16206                           
 16207                           ;incstack = 0
 16208                           ;write_data@data_ stored from wreg
 16209  003DBC  6E13               	movwf	write_data@data_,c
 16210                           
 16211                           ;ST7735_TFT.c: 211: PORTBbits.RB5 = 0;
 16212  003DBE  9A81               	bcf	3969,5,c	;volatile
 16213                           
 16214                           ;ST7735_TFT.c: 212: PORTBbits.RB4 = 1;
 16215  003DC0  8881               	bsf	3969,4,c	;volatile
 16216                           
 16217                           ;ST7735_TFT.c: 213: spiwrite(data_);
 16218  003DC2  5013               	movf	write_data@data_,w,c
 16219  003DC4  EC63  F01E         	call	_spiwrite
 16220                           
 16221                           ;ST7735_TFT.c: 214: PORTBbits.RB5 = 1;
 16222  003DC8  8A81               	bsf	3969,5,c	;volatile
 16223  003DCA  0012               	return		;funcret
 16224  003DCC                     __end_of_write_data:
 16225                           	opt stack 0
 16226                           tblptru	equ	0xFF8
 16227                           tblptrh	equ	0xFF7
 16228                           tblptrl	equ	0xFF6
 16229                           tablat	equ	0xFF5
 16230                           prodh	equ	0xFF4
 16231                           prodl	equ	0xFF3
 16232                           intcon	equ	0xFF2
 16233                           intcon2	equ	0xFF1
 16234                           postinc0	equ	0xFEE
 16235                           wreg	equ	0xFE8
 16236                           postdec1	equ	0xFE5
 16237                           fsr1l	equ	0xFE1
 16238                           indf2	equ	0xFDF
 16239                           postinc2	equ	0xFDE
 16240                           postdec2	equ	0xFDD
 16241                           fsr2h	equ	0xFDA
 16242                           fsr2l	equ	0xFD9
 16243                           status	equ	0xFD8
 16244                           
 16245 ;; *************** function _write_command *****************
 16246 ;; Defined at:
 16247 ;;		line 198 in file "ST7735_TFT.c"
 16248 ;; Parameters:    Size  Location     Type
 16249 ;;  cmd_            1    wreg     unsigned char 
 16250 ;; Auto vars:     Size  Location     Type
 16251 ;;  cmd_            1   18[COMRAM] unsigned char 
 16252 ;; Return value:  Size  Location     Type
 16253 ;;		None               void
 16254 ;; Registers used:
 16255 ;;		wreg, status,2, cstack
 16256 ;; Tracked objects:
 16257 ;;		On entry : 0/0
 16258 ;;		On exit  : 0/0
 16259 ;;		Unchanged: 0/0
 16260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16262 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16264 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16265 ;;Total ram usage:        1 bytes
 16266 ;; Hardware stack levels used:    1
 16267 ;; Hardware stack levels required when called:    4
 16268 ;; This function calls:
 16269 ;;		_spiwrite
 16270 ;; This function is called by:
 16271 ;;		_Rcmd1
 16272 ;;		_Rcmd2red
 16273 ;;		_Rcmd3
 16274 ;;		_setAddrWindow
 16275 ;;		_TFT_GreenTab_Initialize
 16276 ;;		_Bcmd
 16277 ;;		_setScrollDefinition
 16278 ;;		_Rcmd2green
 16279 ;;		_VerticalScroll
 16280 ;; This function uses a non-reentrant model
 16281 ;;
 16282                           
 16283                           	psect	text91
 16284  003DCC                     __ptext91:
 16285                           	opt stack 0
 16286  003DCC                     _write_command:
 16287                           	opt stack 20
 16288                           
 16289                           ;incstack = 0
 16290                           ;write_command@cmd_ stored from wreg
 16291  003DCC  6E13               	movwf	write_command@cmd_,c
 16292                           
 16293                           ;ST7735_TFT.c: 200: PORTBbits.RB5 = 0;
 16294  003DCE  9A81               	bcf	3969,5,c	;volatile
 16295                           
 16296                           ;ST7735_TFT.c: 202: PORTBbits.RB4 = 0;
 16297  003DD0  9881               	bcf	3969,4,c	;volatile
 16298                           
 16299                           ;ST7735_TFT.c: 203: spiwrite(cmd_);
 16300  003DD2  5013               	movf	write_command@cmd_,w,c
 16301  003DD4  EC63  F01E         	call	_spiwrite
 16302                           
 16303                           ;ST7735_TFT.c: 205: PORTBbits.RB5 = 1;
 16304  003DD8  8A81               	bsf	3969,5,c	;volatile
 16305  003DDA  0012               	return		;funcret
 16306  003DDC                     __end_of_write_command:
 16307                           	opt stack 0
 16308                           tblptru	equ	0xFF8
 16309                           tblptrh	equ	0xFF7
 16310                           tblptrl	equ	0xFF6
 16311                           tablat	equ	0xFF5
 16312                           prodh	equ	0xFF4
 16313                           prodl	equ	0xFF3
 16314                           intcon	equ	0xFF2
 16315                           intcon2	equ	0xFF1
 16316                           postinc0	equ	0xFEE
 16317                           wreg	equ	0xFE8
 16318                           postdec1	equ	0xFE5
 16319                           fsr1l	equ	0xFE1
 16320                           indf2	equ	0xFDF
 16321                           postinc2	equ	0xFDE
 16322                           postdec2	equ	0xFDD
 16323                           fsr2h	equ	0xFDA
 16324                           fsr2l	equ	0xFD9
 16325                           status	equ	0xFD8
 16326                           
 16327 ;; *************** function _spiwrite *****************
 16328 ;; Defined at:
 16329 ;;		line 189 in file "ST7735_TFT.c"
 16330 ;; Parameters:    Size  Location     Type
 16331 ;;  spidata         1    wreg     unsigned char 
 16332 ;; Auto vars:     Size  Location     Type
 16333 ;;  spidata         1   17[COMRAM] unsigned char 
 16334 ;;  x               1   16[COMRAM] unsigned char 
 16335 ;; Return value:  Size  Location     Type
 16336 ;;		None               void
 16337 ;; Registers used:
 16338 ;;		wreg
 16339 ;; Tracked objects:
 16340 ;;		On entry : 0/0
 16341 ;;		On exit  : 0/0
 16342 ;;		Unchanged: 0/0
 16343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16345 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16347 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16348 ;;Total ram usage:        2 bytes
 16349 ;; Hardware stack levels used:    1
 16350 ;; Hardware stack levels required when called:    3
 16351 ;; This function calls:
 16352 ;;		Nothing
 16353 ;; This function is called by:
 16354 ;;		_write_command
 16355 ;;		_write_data
 16356 ;;		_drawFastVLine
 16357 ;;		_fillRectangle
 16358 ;;		_drawFastHLine
 16359 ;; This function uses a non-reentrant model
 16360 ;;
 16361                           
 16362                           	psect	text92
 16363  003CC6                     __ptext92:
 16364                           	opt stack 0
 16365  003CC6                     _spiwrite:
 16366                           	opt stack 22
 16367                           
 16368                           ;incstack = 0
 16369                           ;spiwrite@spidata stored from wreg
 16370  003CC6  6E12               	movwf	spiwrite@spidata,c
 16371                           
 16372                           ;ST7735_TFT.c: 191: char x;
 16373                           ;ST7735_TFT.c: 192: PIR1bits.SSPIF = 0;
 16374  003CC8  969E               	bcf	3998,3,c	;volatile
 16375                           
 16376                           ;ST7735_TFT.c: 193: x = SSPBUF;
 16377  003CCA  CFC9 F011          	movff	4041,spiwrite@x	;volatile
 16378                           
 16379                           ;ST7735_TFT.c: 194: SSPBUF = spidata;
 16380  003CCE  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
 16381                           
 16382                           ;ST7735_TFT.c: 195: while (!SSPSTATbits.BF);
 16383  003CD2  D000               	goto	l1099
 16384  003CD4                     l1099:
 16385  003CD4  A0C7               	btfss	4039,0,c	;volatile
 16386  003CD6  D7FE               	goto	l1099
 16387  003CD8  0012               	return		;funcret
 16388  003CDA                     __end_of_spiwrite:
 16389                           	opt stack 0
 16390                           tblptru	equ	0xFF8
 16391                           tblptrh	equ	0xFF7
 16392                           tblptrl	equ	0xFF6
 16393                           tablat	equ	0xFF5
 16394                           prodh	equ	0xFF4
 16395                           prodl	equ	0xFF3
 16396                           intcon	equ	0xFF2
 16397                           intcon2	equ	0xFF1
 16398                           postinc0	equ	0xFEE
 16399                           wreg	equ	0xFE8
 16400                           postdec1	equ	0xFE5
 16401                           fsr1l	equ	0xFE1
 16402                           indf2	equ	0xFDF
 16403                           postinc2	equ	0xFDE
 16404                           postdec2	equ	0xFDD
 16405                           fsr2h	equ	0xFDA
 16406                           fsr2l	equ	0xFD9
 16407                           status	equ	0xFD8
 16408                           
 16409 ;; *************** function ___wmul *****************
 16410 ;; Defined at:
 16411 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 16412 ;; Parameters:    Size  Location     Type
 16413 ;;  multiplier      2   16[COMRAM] unsigned int 
 16414 ;;  multiplicand    2   18[COMRAM] unsigned int 
 16415 ;; Auto vars:     Size  Location     Type
 16416 ;;  product         2   20[COMRAM] unsigned int 
 16417 ;; Return value:  Size  Location     Type
 16418 ;;                  2   16[COMRAM] unsigned int 
 16419 ;; Registers used:
 16420 ;;		wreg, status,2, status,0, prodl, prodh
 16421 ;; Tracked objects:
 16422 ;;		On entry : 0/0
 16423 ;;		On exit  : 0/0
 16424 ;;		Unchanged: 0/0
 16425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16426 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16427 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16429 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16430 ;;Total ram usage:        6 bytes
 16431 ;; Hardware stack levels used:    1
 16432 ;; Hardware stack levels required when called:    3
 16433 ;; This function calls:
 16434 ;;		Nothing
 16435 ;; This function is called by:
 16436 ;;		_main
 16437 ;;		_get_RPM
 16438 ;;		_delay_ms
 16439 ;;		_drawChar
 16440 ;;		_printf
 16441 ;; This function uses a non-reentrant model
 16442 ;;
 16443                           
 16444                           	psect	text93
 16445  003A4E                     __ptext93:
 16446                           	opt stack 0
 16447  003A4E                     ___wmul:
 16448                           	opt stack 26
 16449                           
 16450                           ;incstack = 0
 16451  003A4E  5011               	movf	___wmul@multiplier,w,c
 16452  003A50  0213               	mulwf	___wmul@multiplicand,c
 16453  003A52  CFF3 F015          	movff	prodl,___wmul@product
 16454  003A56  CFF4 F016          	movff	prodh,___wmul@product+1
 16455  003A5A  5011               	movf	___wmul@multiplier,w,c
 16456  003A5C  0214               	mulwf	___wmul@multiplicand+1,c
 16457  003A5E  50F3               	movf	prodl,w,c
 16458  003A60  2616               	addwf	___wmul@product+1,f,c
 16459  003A62  5012               	movf	___wmul@multiplier+1,w,c
 16460  003A64  0213               	mulwf	___wmul@multiplicand,c
 16461  003A66  50F3               	movf	prodl,w,c
 16462  003A68  2616               	addwf	___wmul@product+1,f,c
 16463  003A6A  C015  F011         	movff	___wmul@product,?___wmul
 16464  003A6E  C016  F012         	movff	___wmul@product+1,?___wmul+1
 16465  003A72  D000               	goto	l1489
 16466  003A74                     l1489:
 16467  003A74  0012               	return		;funcret
 16468  003A76                     __end_of___wmul:
 16469                           	opt stack 0
 16470                           tblptru	equ	0xFF8
 16471                           tblptrh	equ	0xFF7
 16472                           tblptrl	equ	0xFF6
 16473                           tablat	equ	0xFF5
 16474                           prodh	equ	0xFF4
 16475                           prodl	equ	0xFF3
 16476                           intcon	equ	0xFF2
 16477                           intcon2	equ	0xFF1
 16478                           postinc0	equ	0xFEE
 16479                           wreg	equ	0xFE8
 16480                           postdec1	equ	0xFE5
 16481                           fsr1l	equ	0xFE1
 16482                           indf2	equ	0xFDF
 16483                           postinc2	equ	0xFDE
 16484                           postdec2	equ	0xFDD
 16485                           fsr2h	equ	0xFDA
 16486                           fsr2l	equ	0xFD9
 16487                           status	equ	0xFD8
 16488                           
 16489 ;; *************** function ___awmod *****************
 16490 ;; Defined at:
 16491 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
 16492 ;; Parameters:    Size  Location     Type
 16493 ;;  dividend        2   58[COMRAM] int 
 16494 ;;  divisor         2   60[COMRAM] int 
 16495 ;; Auto vars:     Size  Location     Type
 16496 ;;  sign            1   63[COMRAM] unsigned char 
 16497 ;;  counter         1   62[COMRAM] unsigned char 
 16498 ;; Return value:  Size  Location     Type
 16499 ;;                  2   58[COMRAM] int 
 16500 ;; Registers used:
 16501 ;;		wreg, status,2, status,0
 16502 ;; Tracked objects:
 16503 ;;		On entry : 0/0
 16504 ;;		On exit  : 0/0
 16505 ;;		Unchanged: 0/0
 16506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16507 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16508 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16510 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16511 ;;Total ram usage:        6 bytes
 16512 ;; Hardware stack levels used:    1
 16513 ;; Hardware stack levels required when called:    3
 16514 ;; This function calls:
 16515 ;;		Nothing
 16516 ;; This function is called by:
 16517 ;;		_Update_Screen
 16518 ;;		_Update_Setup_Alarm_Time_Screen
 16519 ;;		_Update_Setup_Heater_Screen
 16520 ;;		_Update_Setup_Time_Screen
 16521 ;;		_dec_2_bcd
 16522 ;; This function uses a non-reentrant model
 16523 ;;
 16524                           
 16525                           	psect	text94
 16526  002FB2                     __ptext94:
 16527                           	opt stack 0
 16528  002FB2                     ___awmod:
 16529                           	opt stack 26
 16530                           
 16531                           ;incstack = 0
 16532  002FB2  0E00               	movlw	0
 16533  002FB4  6E40               	movwf	___awmod@sign,c
 16534  002FB6  AE3C               	btfss	___awmod@dividend+1,7,c
 16535  002FB8  D007               	goto	l8293
 16536  002FBA  6C3B               	negf	___awmod@dividend,c
 16537  002FBC  1E3C               	comf	___awmod@dividend+1,f,c
 16538  002FBE  B0D8               	btfsc	status,0,c
 16539  002FC0  2A3C               	incf	___awmod@dividend+1,f,c
 16540  002FC2  0E01               	movlw	1
 16541  002FC4  6E40               	movwf	___awmod@sign,c
 16542  002FC6  D000               	goto	l8293
 16543  002FC8                     l8293:
 16544  002FC8  AE3E               	btfss	___awmod@divisor+1,7,c
 16545  002FCA  D005               	goto	l8297
 16546  002FCC  6C3D               	negf	___awmod@divisor,c
 16547  002FCE  1E3E               	comf	___awmod@divisor+1,f,c
 16548  002FD0  B0D8               	btfsc	status,0,c
 16549  002FD2  2A3E               	incf	___awmod@divisor+1,f,c
 16550  002FD4  D000               	goto	l8297
 16551  002FD6                     l8297:
 16552  002FD6  503D               	movf	___awmod@divisor,w,c
 16553  002FD8  103E               	iorwf	___awmod@divisor+1,w,c
 16554  002FDA  B4D8               	btfsc	status,2,c
 16555  002FDC  D01D               	goto	l8313
 16556  002FDE  0E01               	movlw	1
 16557  002FE0  6E3F               	movwf	___awmod@counter,c
 16558  002FE2  D005               	goto	l8303
 16559  002FE4                     l8301:
 16560  002FE4  90D8               	bcf	status,0,c
 16561  002FE6  363D               	rlcf	___awmod@divisor,f,c
 16562  002FE8  363E               	rlcf	___awmod@divisor+1,f,c
 16563  002FEA  2A3F               	incf	___awmod@counter,f,c
 16564  002FEC  D000               	goto	l8303
 16565  002FEE                     l8303:
 16566  002FEE  BE3E               	btfsc	___awmod@divisor+1,7,c
 16567  002FF0  D002               	goto	l8305
 16568  002FF2  D7F8               	goto	l8301
 16569  002FF4  D000               	goto	l8305
 16570  002FF6                     l8305:
 16571  002FF6  503D               	movf	___awmod@divisor,w,c
 16572  002FF8  5C3B               	subwf	___awmod@dividend,w,c
 16573  002FFA  503E               	movf	___awmod@divisor+1,w,c
 16574  002FFC  583C               	subwfb	___awmod@dividend+1,w,c
 16575  002FFE  A0D8               	btfss	status,0,c
 16576  003000  D005               	goto	l8309
 16577  003002  503D               	movf	___awmod@divisor,w,c
 16578  003004  5E3B               	subwf	___awmod@dividend,f,c
 16579  003006  503E               	movf	___awmod@divisor+1,w,c
 16580  003008  5A3C               	subwfb	___awmod@dividend+1,f,c
 16581  00300A  D000               	goto	l8309
 16582  00300C                     l8309:
 16583  00300C  90D8               	bcf	status,0,c
 16584  00300E  323E               	rrcf	___awmod@divisor+1,f,c
 16585  003010  323D               	rrcf	___awmod@divisor,f,c
 16586  003012  2E3F               	decfsz	___awmod@counter,f,c
 16587  003014  D7F0               	goto	l8305
 16588  003016  D000               	goto	l8313
 16589  003018                     l8313:
 16590  003018  5040               	movf	___awmod@sign,w,c
 16591  00301A  B4D8               	btfsc	status,2,c
 16592  00301C  D005               	goto	l8317
 16593  00301E  6C3B               	negf	___awmod@dividend,c
 16594  003020  1E3C               	comf	___awmod@dividend+1,f,c
 16595  003022  B0D8               	btfsc	status,0,c
 16596  003024  2A3C               	incf	___awmod@dividend+1,f,c
 16597  003026  D000               	goto	l8317
 16598  003028                     l8317:
 16599  003028  C03B  F03B         	movff	___awmod@dividend,?___awmod
 16600  00302C  C03C  F03C         	movff	___awmod@dividend+1,?___awmod+1
 16601  003030  D000               	goto	l1695
 16602  003032                     l1695:
 16603  003032  0012               	return		;funcret
 16604  003034                     __end_of___awmod:
 16605                           	opt stack 0
 16606                           tblptru	equ	0xFF8
 16607                           tblptrh	equ	0xFF7
 16608                           tblptrl	equ	0xFF6
 16609                           tablat	equ	0xFF5
 16610                           prodh	equ	0xFF4
 16611                           prodl	equ	0xFF3
 16612                           intcon	equ	0xFF2
 16613                           intcon2	equ	0xFF1
 16614                           postinc0	equ	0xFEE
 16615                           wreg	equ	0xFE8
 16616                           postdec1	equ	0xFE5
 16617                           fsr1l	equ	0xFE1
 16618                           indf2	equ	0xFDF
 16619                           postinc2	equ	0xFDE
 16620                           postdec2	equ	0xFDD
 16621                           fsr2h	equ	0xFDA
 16622                           fsr2l	equ	0xFD9
 16623                           status	equ	0xFD8
 16624                           
 16625 ;; *************** function ___awdiv *****************
 16626 ;; Defined at:
 16627 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
 16628 ;; Parameters:    Size  Location     Type
 16629 ;;  dividend        2    0[BANK1 ] int 
 16630 ;;  divisor         2    2[BANK1 ] int 
 16631 ;; Auto vars:     Size  Location     Type
 16632 ;;  quotient        2    6[BANK1 ] int 
 16633 ;;  sign            1    5[BANK1 ] unsigned char 
 16634 ;;  counter         1    4[BANK1 ] unsigned char 
 16635 ;; Return value:  Size  Location     Type
 16636 ;;                  2    0[BANK1 ] int 
 16637 ;; Registers used:
 16638 ;;		wreg, status,2, status,0
 16639 ;; Tracked objects:
 16640 ;;		On entry : 0/0
 16641 ;;		On exit  : 0/0
 16642 ;;		Unchanged: 0/0
 16643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16644 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16645 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16647 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16648 ;;Total ram usage:        8 bytes
 16649 ;; Hardware stack levels used:    1
 16650 ;; Hardware stack levels required when called:    3
 16651 ;; This function calls:
 16652 ;;		Nothing
 16653 ;; This function is called by:
 16654 ;;		_main
 16655 ;;		_get_RPM
 16656 ;;		_Set_DC_RGB
 16657 ;;		_Set_RPM_RGB
 16658 ;;		_Update_Screen
 16659 ;;		_Update_Setup_Alarm_Time_Screen
 16660 ;;		_Update_Setup_Heater_Screen
 16661 ;;		_Update_Setup_Time_Screen
 16662 ;;		_dec_2_bcd
 16663 ;; This function uses a non-reentrant model
 16664 ;;
 16665                           
 16666                           	psect	text95
 16667  002474                     __ptext95:
 16668                           	opt stack 0
 16669  002474                     ___awdiv:
 16670                           	opt stack 26
 16671                           
 16672                           ;incstack = 0
 16673  002474  0E00               	movlw	0
 16674  002476  0101               	movlb	1	; () banked
 16675  002478  6F39               	movwf	___awdiv@sign& (0+255),b
 16676                           
 16677                           ; BSR set to: 1
 16678  00247A  0101               	movlb	1	; () banked
 16679  00247C  AF37               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 16680  00247E  D009               	goto	l8249
 16681                           
 16682                           ; BSR set to: 1
 16683  002480  0101               	movlb	1	; () banked
 16684  002482  6D36               	negf	___awdiv@divisor& (0+255),b
 16685  002484  1F37               	comf	(___awdiv@divisor+1)& (0+255),f,b
 16686  002486  B0D8               	btfsc	status,0,c
 16687  002488  2B37               	incf	(___awdiv@divisor+1)& (0+255),f,b
 16688                           
 16689                           ; BSR set to: 1
 16690  00248A  0E01               	movlw	1
 16691  00248C  0101               	movlb	1	; () banked
 16692  00248E  6F39               	movwf	___awdiv@sign& (0+255),b
 16693  002490  D000               	goto	l8249
 16694  002492                     l8249:
 16695                           
 16696                           ; BSR set to: 1
 16697  002492  0101               	movlb	1	; () banked
 16698  002494  AF35               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 16699  002496  D009               	goto	l8255
 16700                           
 16701                           ; BSR set to: 1
 16702  002498  0101               	movlb	1	; () banked
 16703  00249A  6D34               	negf	___awdiv@dividend& (0+255),b
 16704  00249C  1F35               	comf	(___awdiv@dividend+1)& (0+255),f,b
 16705  00249E  B0D8               	btfsc	status,0,c
 16706  0024A0  2B35               	incf	(___awdiv@dividend+1)& (0+255),f,b
 16707                           
 16708                           ; BSR set to: 1
 16709  0024A2  0E01               	movlw	1
 16710  0024A4  0101               	movlb	1	; () banked
 16711  0024A6  1B39               	xorwf	___awdiv@sign& (0+255),f,b
 16712  0024A8  D000               	goto	l8255
 16713  0024AA                     l8255:
 16714                           
 16715                           ; BSR set to: 1
 16716  0024AA  0E00               	movlw	0
 16717  0024AC  0101               	movlb	1	; () banked
 16718  0024AE  6F3B               	movwf	(___awdiv@quotient+1)& (0+255),b
 16719  0024B0  0E00               	movlw	0
 16720  0024B2  6F3A               	movwf	___awdiv@quotient& (0+255),b
 16721                           
 16722                           ; BSR set to: 1
 16723  0024B4  0101               	movlb	1	; () banked
 16724  0024B6  5136               	movf	___awdiv@divisor& (0+255),w,b
 16725  0024B8  0101               	movlb	1	; () banked
 16726  0024BA  1137               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 16727  0024BC  B4D8               	btfsc	status,2,c
 16728  0024BE  D031               	goto	l8277
 16729                           
 16730                           ; BSR set to: 1
 16731  0024C0  0E01               	movlw	1
 16732  0024C2  0101               	movlb	1	; () banked
 16733  0024C4  6F38               	movwf	___awdiv@counter& (0+255),b
 16734  0024C6  D007               	goto	l8263
 16735  0024C8                     l8261:
 16736                           
 16737                           ; BSR set to: 1
 16738  0024C8  0101               	movlb	1	; () banked
 16739  0024CA  90D8               	bcf	status,0,c
 16740  0024CC  3736               	rlcf	___awdiv@divisor& (0+255),f,b
 16741  0024CE  3737               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 16742  0024D0  0101               	movlb	1	; () banked
 16743  0024D2  2B38               	incf	___awdiv@counter& (0+255),f,b
 16744  0024D4  D000               	goto	l8263
 16745  0024D6                     l8263:
 16746                           
 16747                           ; BSR set to: 1
 16748  0024D6  0101               	movlb	1	; () banked
 16749  0024D8  BF37               	btfsc	(___awdiv@divisor+1)& (0+255),7,b
 16750  0024DA  D002               	goto	l8265
 16751  0024DC  D7F5               	goto	l8261
 16752                           
 16753                           ; BSR set to: 1
 16754  0024DE  D000               	goto	l8265
 16755  0024E0                     l8265:
 16756                           
 16757                           ; BSR set to: 1
 16758  0024E0  0101               	movlb	1	; () banked
 16759  0024E2  90D8               	bcf	status,0,c
 16760  0024E4  373A               	rlcf	___awdiv@quotient& (0+255),f,b
 16761  0024E6  373B               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 16762                           
 16763                           ; BSR set to: 1
 16764  0024E8  0101               	movlb	1	; () banked
 16765  0024EA  5136               	movf	___awdiv@divisor& (0+255),w,b
 16766  0024EC  0101               	movlb	1	; () banked
 16767  0024EE  5D34               	subwf	___awdiv@dividend& (0+255),w,b
 16768  0024F0  0101               	movlb	1	; () banked
 16769  0024F2  5137               	movf	(___awdiv@divisor+1)& (0+255),w,b
 16770  0024F4  0101               	movlb	1	; () banked
 16771  0024F6  5935               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 16772  0024F8  A0D8               	btfss	status,0,c
 16773  0024FA  D00B               	goto	l8273
 16774                           
 16775                           ; BSR set to: 1
 16776  0024FC  0101               	movlb	1	; () banked
 16777  0024FE  5136               	movf	___awdiv@divisor& (0+255),w,b
 16778  002500  0101               	movlb	1	; () banked
 16779  002502  5F34               	subwf	___awdiv@dividend& (0+255),f,b
 16780  002504  0101               	movlb	1	; () banked
 16781  002506  5137               	movf	(___awdiv@divisor+1)& (0+255),w,b
 16782  002508  0101               	movlb	1	; () banked
 16783  00250A  5B35               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 16784                           
 16785                           ; BSR set to: 1
 16786  00250C  0101               	movlb	1	; () banked
 16787  00250E  813A               	bsf	___awdiv@quotient& (0+255),0,b
 16788  002510  D000               	goto	l8273
 16789  002512                     l8273:
 16790                           
 16791                           ; BSR set to: 1
 16792  002512  0101               	movlb	1	; () banked
 16793  002514  90D8               	bcf	status,0,c
 16794  002516  3337               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 16795  002518  3336               	rrcf	___awdiv@divisor& (0+255),f,b
 16796                           
 16797                           ; BSR set to: 1
 16798  00251A  0101               	movlb	1	; () banked
 16799  00251C  2F38               	decfsz	___awdiv@counter& (0+255),f,b
 16800  00251E  D7E0               	goto	l8265
 16801                           
 16802                           ; BSR set to: 1
 16803  002520  D000               	goto	l8277
 16804  002522                     l8277:
 16805                           
 16806                           ; BSR set to: 1
 16807  002522  0101               	movlb	1	; () banked
 16808  002524  5139               	movf	___awdiv@sign& (0+255),w,b
 16809  002526  0101               	movlb	1	; () banked
 16810  002528  B4D8               	btfsc	status,2,c
 16811  00252A  D006               	goto	l8281
 16812                           
 16813                           ; BSR set to: 1
 16814  00252C  0101               	movlb	1	; () banked
 16815  00252E  6D3A               	negf	___awdiv@quotient& (0+255),b
 16816  002530  1F3B               	comf	(___awdiv@quotient+1)& (0+255),f,b
 16817  002532  B0D8               	btfsc	status,0,c
 16818  002534  2B3B               	incf	(___awdiv@quotient+1)& (0+255),f,b
 16819  002536  D000               	goto	l8281
 16820  002538                     l8281:
 16821                           
 16822                           ; BSR set to: 1
 16823  002538  C13A  F134         	movff	___awdiv@quotient,?___awdiv
 16824  00253C  C13B  F135         	movff	___awdiv@quotient+1,?___awdiv+1
 16825  002540  D000               	goto	l1682
 16826  002542                     l1682:
 16827                           
 16828                           ; BSR set to: 1
 16829  002542  0012               	return		;funcret
 16830  002544                     __end_of___awdiv:
 16831                           	opt stack 0
 16832                           tblptru	equ	0xFF8
 16833                           tblptrh	equ	0xFF7
 16834                           tblptrl	equ	0xFF6
 16835                           tablat	equ	0xFF5
 16836                           prodh	equ	0xFF4
 16837                           prodl	equ	0xFF3
 16838                           intcon	equ	0xFF2
 16839                           intcon2	equ	0xFF1
 16840                           postinc0	equ	0xFEE
 16841                           wreg	equ	0xFE8
 16842                           postdec1	equ	0xFE5
 16843                           fsr1l	equ	0xFE1
 16844                           indf2	equ	0xFDF
 16845                           postinc2	equ	0xFDE
 16846                           postdec2	equ	0xFDD
 16847                           fsr2h	equ	0xFDA
 16848                           fsr2l	equ	0xFD9
 16849                           status	equ	0xFD8
 16850                           
 16851 ;; *************** function _Do_Init *****************
 16852 ;; Defined at:
 16853 ;;		line 92 in file "LabFinal.c"
 16854 ;; Parameters:    Size  Location     Type
 16855 ;;		None
 16856 ;; Auto vars:     Size  Location     Type
 16857 ;;		None
 16858 ;; Return value:  Size  Location     Type
 16859 ;;		None               void
 16860 ;; Registers used:
 16861 ;;		wreg, status,2, status,0, cstack
 16862 ;; Tracked objects:
 16863 ;;		On entry : 0/0
 16864 ;;		On exit  : 0/0
 16865 ;;		Unchanged: 0/0
 16866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16870 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16871 ;;Total ram usage:        0 bytes
 16872 ;; Hardware stack levels used:    1
 16873 ;; Hardware stack levels required when called:    7
 16874 ;; This function calls:
 16875 ;;		_DS1621_Init
 16876 ;;		_I2C_Init
 16877 ;;		_Init_ADC
 16878 ;;		_Init_Interrupt
 16879 ;;		_Turn_Off_Fan
 16880 ;;		_init_UART
 16881 ;; This function is called by:
 16882 ;;		_main
 16883 ;; This function uses a non-reentrant model
 16884 ;;
 16885                           
 16886                           	psect	text96
 16887  003408                     __ptext96:
 16888                           	opt stack 0
 16889  003408                     _Do_Init:
 16890                           	opt stack 23
 16891                           
 16892                           ;LabFinal.c: 94: init_UART();
 16893                           
 16894                           ; BSR set to: 1
 16895                           ;incstack = 0
 16896  003408  EC6D  F01E         	call	_init_UART	;wreg free
 16897                           
 16898                           ;LabFinal.c: 95: Init_ADC();
 16899  00340C  ECF5  F01E         	call	_Init_ADC	;wreg free
 16900                           
 16901                           ;LabFinal.c: 96: OSCCON=0x70;
 16902  003410  0E70               	movlw	112
 16903  003412  6ED3               	movwf	4051,c	;volatile
 16904                           
 16905                           ;LabFinal.c: 98: ADCON1=0x0E;
 16906  003414  0E0E               	movlw	14
 16907  003416  6EC1               	movwf	4033,c	;volatile
 16908                           
 16909                           ;LabFinal.c: 99: TRISA = 0x11;
 16910  003418  0E11               	movlw	17
 16911  00341A  6E92               	movwf	3986,c	;volatile
 16912                           
 16913                           ;LabFinal.c: 100: TRISB = 0x07;
 16914  00341C  0E07               	movlw	7
 16915  00341E  6E93               	movwf	3987,c	;volatile
 16916                           
 16917                           ;LabFinal.c: 101: TRISC = 0x01;
 16918  003420  0E01               	movlw	1
 16919  003422  6E94               	movwf	3988,c	;volatile
 16920                           
 16921                           ;LabFinal.c: 102: TRISD = 0x00;
 16922  003424  0E00               	movlw	0
 16923  003426  6E95               	movwf	3989,c	;volatile
 16924                           
 16925                           ;LabFinal.c: 103: TRISE = 0x00;
 16926  003428  0E00               	movlw	0
 16927  00342A  6E96               	movwf	3990,c	;volatile
 16928                           
 16929                           ;LabFinal.c: 104: PORTE = 0x00;
 16930  00342C  0E00               	movlw	0
 16931  00342E  6E84               	movwf	3972,c	;volatile
 16932                           
 16933                           ;LabFinal.c: 106: HEATER = 0;
 16934  003430  0E00               	movlw	0
 16935  003432  6E50               	movwf	_HEATER,c
 16936                           
 16937                           ;LabFinal.c: 107: RBPU=0;
 16938  003434  9EF1               	bcf	intcon2,7,c	;volatile
 16939                           
 16940                           ;LabFinal.c: 109: TMR3L = 0x00;
 16941  003436  0E00               	movlw	0
 16942  003438  6EB2               	movwf	4018,c	;volatile
 16943                           
 16944                           ;LabFinal.c: 110: T3CON = 0x03;
 16945  00343A  0E03               	movlw	3
 16946  00343C  6EB1               	movwf	4017,c	;volatile
 16947                           
 16948                           ;LabFinal.c: 111: I2C_Init(100000);
 16949  00343E  0EA0               	movlw	160
 16950  003440  6E11               	movwf	I2C_Init@c,c
 16951  003442  0E86               	movlw	134
 16952  003444  6E12               	movwf	I2C_Init@c+1,c
 16953  003446  0E01               	movlw	1
 16954  003448  6E13               	movwf	I2C_Init@c+2,c
 16955  00344A  0E00               	movlw	0
 16956  00344C  6E14               	movwf	I2C_Init@c+3,c
 16957  00344E  EC0D  F01F         	call	_I2C_Init	;wreg free
 16958                           
 16959                           ;LabFinal.c: 113: DS1621_Init();
 16960  003452  ECA4  F01D         	call	_DS1621_Init	;wreg free
 16961                           
 16962                           ;LabFinal.c: 114: Init_Interrupt();
 16963  003456  EC61  F01D         	call	_Init_Interrupt	;wreg free
 16964                           
 16965                           ;LabFinal.c: 115: Turn_Off_Fan();
 16966  00345A  EC08  F01F         	call	_Turn_Off_Fan	;wreg free
 16967                           
 16968                           ;LabFinal.c: 116: heater_set_temp = 75;
 16969  00345E  0E4B               	movlw	75
 16970  003460  6E6F               	movwf	_heater_set_temp,c
 16971  003462  0012               	return		;funcret
 16972  003464                     __end_of_Do_Init:
 16973                           	opt stack 0
 16974                           tblptru	equ	0xFF8
 16975                           tblptrh	equ	0xFF7
 16976                           tblptrl	equ	0xFF6
 16977                           tablat	equ	0xFF5
 16978                           prodh	equ	0xFF4
 16979                           prodl	equ	0xFF3
 16980                           intcon	equ	0xFF2
 16981                           intcon2	equ	0xFF1
 16982                           postinc0	equ	0xFEE
 16983                           wreg	equ	0xFE8
 16984                           postdec1	equ	0xFE5
 16985                           fsr1l	equ	0xFE1
 16986                           indf2	equ	0xFDF
 16987                           postinc2	equ	0xFDE
 16988                           postdec2	equ	0xFDD
 16989                           fsr2h	equ	0xFDA
 16990                           fsr2l	equ	0xFD9
 16991                           status	equ	0xFD8
 16992                           
 16993 ;; *************** function _init_UART *****************
 16994 ;; Defined at:
 16995 ;;		line 84 in file "LabFinal.c"
 16996 ;; Parameters:    Size  Location     Type
 16997 ;;		None
 16998 ;; Auto vars:     Size  Location     Type
 16999 ;;		None
 17000 ;; Return value:  Size  Location     Type
 17001 ;;		None               void
 17002 ;; Registers used:
 17003 ;;		wreg, status,2, cstack
 17004 ;; Tracked objects:
 17005 ;;		On entry : 0/0
 17006 ;;		On exit  : 0/0
 17007 ;;		Unchanged: 0/0
 17008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17013 ;;Total ram usage:        0 bytes
 17014 ;; Hardware stack levels used:    1
 17015 ;; Hardware stack levels required when called:    4
 17016 ;; This function calls:
 17017 ;;		_OpenUSART
 17018 ;; This function is called by:
 17019 ;;		_Do_Init
 17020 ;; This function uses a non-reentrant model
 17021 ;;
 17022                           
 17023                           	psect	text97
 17024  003CDA                     __ptext97:
 17025                           	opt stack 0
 17026  003CDA                     _init_UART:
 17027                           	opt stack 25
 17028                           
 17029                           ;LabFinal.c: 86: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b111111
      +                          11 & 0b11111111, 25);
 17030                           
 17031                           ;incstack = 0
 17032  003CDA  0E00               	movlw	0
 17033  003CDC  6E12               	movwf	OpenUSART@spbrg+1,c
 17034  003CDE  0E19               	movlw	25
 17035  003CE0  6E11               	movwf	OpenUSART@spbrg,c
 17036  003CE2  0E3C               	movlw	60
 17037  003CE4  ECD3  F018         	call	_OpenUSART
 17038                           
 17039                           ;LabFinal.c: 87: OSCCON = 0x70;
 17040  003CE8  0E70               	movlw	112
 17041  003CEA  6ED3               	movwf	4051,c	;volatile
 17042  003CEC  0012               	return		;funcret
 17043  003CEE                     __end_of_init_UART:
 17044                           	opt stack 0
 17045                           tblptru	equ	0xFF8
 17046                           tblptrh	equ	0xFF7
 17047                           tblptrl	equ	0xFF6
 17048                           tablat	equ	0xFF5
 17049                           prodh	equ	0xFF4
 17050                           prodl	equ	0xFF3
 17051                           intcon	equ	0xFF2
 17052                           intcon2	equ	0xFF1
 17053                           postinc0	equ	0xFEE
 17054                           wreg	equ	0xFE8
 17055                           postdec1	equ	0xFE5
 17056                           fsr1l	equ	0xFE1
 17057                           indf2	equ	0xFDF
 17058                           postinc2	equ	0xFDE
 17059                           postdec2	equ	0xFDD
 17060                           fsr2h	equ	0xFDA
 17061                           fsr2l	equ	0xFD9
 17062                           status	equ	0xFD8
 17063                           
 17064 ;; *************** function _OpenUSART *****************
 17065 ;; Defined at:
 17066 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
 17067 ;; Parameters:    Size  Location     Type
 17068 ;;  config          1    wreg     unsigned char 
 17069 ;;  spbrg           2   16[COMRAM] unsigned int 
 17070 ;; Auto vars:     Size  Location     Type
 17071 ;;  config          1   18[COMRAM] unsigned char 
 17072 ;; Return value:  Size  Location     Type
 17073 ;;		None               void
 17074 ;; Registers used:
 17075 ;;		wreg, status,2
 17076 ;; Tracked objects:
 17077 ;;		On entry : 0/0
 17078 ;;		On exit  : 0/0
 17079 ;;		Unchanged: 0/0
 17080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17081 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17082 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17084 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17085 ;;Total ram usage:        3 bytes
 17086 ;; Hardware stack levels used:    1
 17087 ;; Hardware stack levels required when called:    3
 17088 ;; This function calls:
 17089 ;;		Nothing
 17090 ;; This function is called by:
 17091 ;;		_init_UART
 17092 ;; This function uses a non-reentrant model
 17093 ;;
 17094                           
 17095                           	psect	text98
 17096  0031A6                     __ptext98:
 17097                           	opt stack 0
 17098  0031A6                     _OpenUSART:
 17099                           	opt stack 25
 17100                           
 17101                           ;incstack = 0
 17102                           ;OpenUSART@config stored from wreg
 17103  0031A6  6E13               	movwf	OpenUSART@config,c
 17104  0031A8  0E00               	movlw	0
 17105  0031AA  6EAC               	movwf	4012,c	;volatile
 17106  0031AC  0E00               	movlw	0
 17107  0031AE  6EAB               	movwf	4011,c	;volatile
 17108  0031B0  A013               	btfss	OpenUSART@config,0,c
 17109  0031B2  D002               	goto	l5979
 17110  0031B4  88AC               	bsf	4012,4,c	;volatile
 17111  0031B6  D000               	goto	l5979
 17112  0031B8                     l5979:
 17113  0031B8  A213               	btfss	OpenUSART@config,1,c
 17114  0031BA  D003               	goto	l5983
 17115  0031BC  8CAC               	bsf	4012,6,c	;volatile
 17116  0031BE  8CAB               	bsf	4011,6,c	;volatile
 17117  0031C0  D000               	goto	l5983
 17118  0031C2                     l5983:
 17119  0031C2  A413               	btfss	OpenUSART@config,2,c
 17120  0031C4  D002               	goto	l5987
 17121  0031C6  8EAC               	bsf	4012,7,c	;volatile
 17122  0031C8  D000               	goto	l5987
 17123  0031CA                     l5987:
 17124  0031CA  A613               	btfss	OpenUSART@config,3,c
 17125  0031CC  D002               	goto	l1477
 17126  0031CE  88AB               	bsf	4011,4,c	;volatile
 17127  0031D0  D002               	goto	l5991
 17128  0031D2                     l1477:
 17129  0031D2  8AAB               	bsf	4011,5,c	;volatile
 17130  0031D4  D000               	goto	l5991
 17131  0031D6                     l5991:
 17132  0031D6  B813               	btfsc	OpenUSART@config,4,c
 17133  0031D8  84AC               	bsf	4012,2,c	;volatile
 17134  0031DA  989E               	bcf	3998,4,c	;volatile
 17135  0031DC  AA13               	btfss	OpenUSART@config,5,c
 17136  0031DE  D002               	goto	l5999
 17137  0031E0  86AB               	bsf	4011,3,c	;volatile
 17138  0031E2  D000               	goto	l5999
 17139  0031E4                     l5999:
 17140  0031E4  AC13               	btfss	OpenUSART@config,6,c
 17141  0031E6  D002               	goto	l1481
 17142  0031E8  8A9D               	bsf	3997,5,c	;volatile
 17143  0031EA  D001               	goto	l1482
 17144  0031EC                     l1481:
 17145  0031EC  9A9D               	bcf	3997,5,c	;volatile
 17146  0031EE                     l1482:
 17147  0031EE  9A9E               	bcf	3998,5,c	;volatile
 17148  0031F0  AE13               	btfss	OpenUSART@config,7,c
 17149  0031F2  D002               	goto	l1483
 17150  0031F4  889D               	bsf	3997,4,c	;volatile
 17151  0031F6  D001               	goto	l1484
 17152  0031F8                     l1483:
 17153  0031F8  989D               	bcf	3997,4,c	;volatile
 17154  0031FA                     l1484:
 17155  0031FA  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 17156  0031FE  5012               	movf	OpenUSART@spbrg+1,w,c
 17157  003200  6EB0               	movwf	4016,c	;volatile
 17158  003202  8AAC               	bsf	4012,5,c	;volatile
 17159  003204  8EAB               	bsf	4011,7,c	;volatile
 17160  003206  9C94               	bcf	3988,6,c	;volatile
 17161  003208  8E94               	bsf	3988,7,c	;volatile
 17162  00320A  B8AC               	btfsc	4012,4,c	;volatile
 17163  00320C  BEAC               	btfsc	4012,7,c	;volatile
 17164  00320E  D002               	goto	l1486
 17165  003210  8C94               	bsf	3988,6,c	;volatile
 17166  003212  D000               	goto	l1486
 17167  003214                     l1486:
 17168  003214  0012               	return		;funcret
 17169  003216                     __end_of_OpenUSART:
 17170                           	opt stack 0
 17171                           tblptru	equ	0xFF8
 17172                           tblptrh	equ	0xFF7
 17173                           tblptrl	equ	0xFF6
 17174                           tablat	equ	0xFF5
 17175                           prodh	equ	0xFF4
 17176                           prodl	equ	0xFF3
 17177                           intcon	equ	0xFF2
 17178                           intcon2	equ	0xFF1
 17179                           postinc0	equ	0xFEE
 17180                           wreg	equ	0xFE8
 17181                           postdec1	equ	0xFE5
 17182                           fsr1l	equ	0xFE1
 17183                           indf2	equ	0xFDF
 17184                           postinc2	equ	0xFDE
 17185                           postdec2	equ	0xFDD
 17186                           fsr2h	equ	0xFDA
 17187                           fsr2l	equ	0xFD9
 17188                           status	equ	0xFD8
 17189                           
 17190 ;; *************** function _Turn_Off_Fan *****************
 17191 ;; Defined at:
 17192 ;;		line 67 in file "Fan_Support.c"
 17193 ;; Parameters:    Size  Location     Type
 17194 ;;		None
 17195 ;; Auto vars:     Size  Location     Type
 17196 ;;		None
 17197 ;; Return value:  Size  Location     Type
 17198 ;;		None               void
 17199 ;; Registers used:
 17200 ;;		wreg, status,2
 17201 ;; Tracked objects:
 17202 ;;		On entry : 0/0
 17203 ;;		On exit  : 0/0
 17204 ;;		Unchanged: 0/0
 17205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17209 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17210 ;;Total ram usage:        0 bytes
 17211 ;; Hardware stack levels used:    1
 17212 ;; Hardware stack levels required when called:    3
 17213 ;; This function calls:
 17214 ;;		Nothing
 17215 ;; This function is called by:
 17216 ;;		_Do_Init
 17217 ;;		_Monitor_Heater
 17218 ;; This function uses a non-reentrant model
 17219 ;;
 17220                           
 17221                           	psect	text99
 17222  003E10                     __ptext99:
 17223                           	opt stack 0
 17224  003E10                     _Turn_Off_Fan:
 17225                           	opt stack 26
 17226                           
 17227                           ;Fan_Support.c: 69: HEATER = 0;
 17228                           
 17229                           ;incstack = 0
 17230  003E10  0E00               	movlw	0
 17231  003E12  6E50               	movwf	_HEATER,c
 17232                           
 17233                           ;Fan_Support.c: 70: PORTAbits.RA3 = 0;
 17234  003E14  9680               	bcf	3968,3,c	;volatile
 17235                           
 17236                           ;Fan_Support.c: 71: PORTAbits.RA5 = 0;
 17237  003E16  9A80               	bcf	3968,5,c	;volatile
 17238  003E18  0012               	return		;funcret
 17239  003E1A                     __end_of_Turn_Off_Fan:
 17240                           	opt stack 0
 17241                           tblptru	equ	0xFF8
 17242                           tblptrh	equ	0xFF7
 17243                           tblptrl	equ	0xFF6
 17244                           tablat	equ	0xFF5
 17245                           prodh	equ	0xFF4
 17246                           prodl	equ	0xFF3
 17247                           intcon	equ	0xFF2
 17248                           intcon2	equ	0xFF1
 17249                           postinc0	equ	0xFEE
 17250                           wreg	equ	0xFE8
 17251                           postdec1	equ	0xFE5
 17252                           fsr1l	equ	0xFE1
 17253                           indf2	equ	0xFDF
 17254                           postinc2	equ	0xFDE
 17255                           postdec2	equ	0xFDD
 17256                           fsr2h	equ	0xFDA
 17257                           fsr2l	equ	0xFD9
 17258                           status	equ	0xFD8
 17259                           
 17260 ;; *************** function _Init_Interrupt *****************
 17261 ;; Defined at:
 17262 ;;		line 17 in file "Interrupt.c"
 17263 ;; Parameters:    Size  Location     Type
 17264 ;;		None
 17265 ;; Auto vars:     Size  Location     Type
 17266 ;;		None
 17267 ;; Return value:  Size  Location     Type
 17268 ;;		None               void
 17269 ;; Registers used:
 17270 ;;		wreg, status,2
 17271 ;; Tracked objects:
 17272 ;;		On entry : 0/0
 17273 ;;		On exit  : 0/0
 17274 ;;		Unchanged: 0/0
 17275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17280 ;;Total ram usage:        0 bytes
 17281 ;; Hardware stack levels used:    1
 17282 ;; Hardware stack levels required when called:    3
 17283 ;; This function calls:
 17284 ;;		Nothing
 17285 ;; This function is called by:
 17286 ;;		_Do_Init
 17287 ;; This function uses a non-reentrant model
 17288 ;;
 17289                           
 17290                           	psect	text100
 17291  003AC2                     __ptext100:
 17292                           	opt stack 0
 17293  003AC2                     _Init_Interrupt:
 17294                           	opt stack 26
 17295                           
 17296                           ;Interrupt.c: 20: INTCONbits.INT0IF = 0 ;
 17297                           
 17298                           ;incstack = 0
 17299  003AC2  92F2               	bcf	intcon,1,c	;volatile
 17300                           
 17301                           ;Interrupt.c: 21: INTCON3bits.INT1IF = 0;
 17302  003AC4  90F0               	bcf	intcon3,0,c	;volatile
 17303                           
 17304                           ;Interrupt.c: 22: INTCON3bits.INT2IF = 0;
 17305  003AC6  92F0               	bcf	intcon3,1,c	;volatile
 17306                           
 17307                           ;Interrupt.c: 23: INTCONbits.INT0IE = 1;
 17308  003AC8  88F2               	bsf	intcon,4,c	;volatile
 17309                           
 17310                           ;Interrupt.c: 24: INTCON3bits.INT1IE = 1;
 17311  003ACA  86F0               	bsf	intcon3,3,c	;volatile
 17312                           
 17313                           ;Interrupt.c: 25: INTCON3bits.INT2IE = 1;
 17314  003ACC  88F0               	bsf	intcon3,4,c	;volatile
 17315                           
 17316                           ;Interrupt.c: 26: INTCON2bits.INTEDG0 = 0;
 17317  003ACE  9CF1               	bcf	intcon2,6,c	;volatile
 17318                           
 17319                           ;Interrupt.c: 27: INTCON2bits.INTEDG1 = 0;
 17320  003AD0  9AF1               	bcf	intcon2,5,c	;volatile
 17321                           
 17322                           ;Interrupt.c: 28: INTCON2bits.INTEDG2 = 0;
 17323  003AD2  98F1               	bcf	intcon2,4,c	;volatile
 17324                           
 17325                           ;Interrupt.c: 29: TMR1H = 0;
 17326  003AD4  0E00               	movlw	0
 17327  003AD6  6ECF               	movwf	4047,c	;volatile
 17328                           
 17329                           ;Interrupt.c: 30: TMR1L = 0;
 17330  003AD8  0E00               	movlw	0
 17331  003ADA  6ECE               	movwf	4046,c	;volatile
 17332                           
 17333                           ;Interrupt.c: 31: PIR1bits.TMR1IF = 0;
 17334  003ADC  909E               	bcf	3998,0,c	;volatile
 17335                           
 17336                           ;Interrupt.c: 32: PIE1bits.TMR1IE = 1;
 17337  003ADE  809D               	bsf	3997,0,c	;volatile
 17338                           
 17339                           ;Interrupt.c: 33: INTCONbits.PEIE = 1;
 17340  003AE0  8CF2               	bsf	intcon,6,c	;volatile
 17341                           
 17342                           ;Interrupt.c: 34: INTCONbits.GIE = 1;
 17343  003AE2  8EF2               	bsf	intcon,7,c	;volatile
 17344  003AE4  0012               	return		;funcret
 17345  003AE6                     __end_of_Init_Interrupt:
 17346                           	opt stack 0
 17347                           tblptru	equ	0xFF8
 17348                           tblptrh	equ	0xFF7
 17349                           tblptrl	equ	0xFF6
 17350                           tablat	equ	0xFF5
 17351                           prodh	equ	0xFF4
 17352                           prodl	equ	0xFF3
 17353                           intcon	equ	0xFF2
 17354                           intcon2	equ	0xFF1
 17355                           intcon3	equ	0xFF0
 17356                           postinc0	equ	0xFEE
 17357                           wreg	equ	0xFE8
 17358                           postdec1	equ	0xFE5
 17359                           fsr1l	equ	0xFE1
 17360                           indf2	equ	0xFDF
 17361                           postinc2	equ	0xFDE
 17362                           postdec2	equ	0xFDD
 17363                           fsr2h	equ	0xFDA
 17364                           fsr2l	equ	0xFD9
 17365                           status	equ	0xFD8
 17366                           
 17367 ;; *************** function _Init_ADC *****************
 17368 ;; Defined at:
 17369 ;;		line 165 in file "utils.c"
 17370 ;; Parameters:    Size  Location     Type
 17371 ;;		None
 17372 ;; Auto vars:     Size  Location     Type
 17373 ;;		None
 17374 ;; Return value:  Size  Location     Type
 17375 ;;		None               void
 17376 ;; Registers used:
 17377 ;;		wreg, status,2
 17378 ;; Tracked objects:
 17379 ;;		On entry : 0/0
 17380 ;;		On exit  : 0/0
 17381 ;;		Unchanged: 0/0
 17382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17386 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17387 ;;Total ram usage:        0 bytes
 17388 ;; Hardware stack levels used:    1
 17389 ;; Hardware stack levels required when called:    3
 17390 ;; This function calls:
 17391 ;;		Nothing
 17392 ;; This function is called by:
 17393 ;;		_Do_Init
 17394 ;; This function uses a non-reentrant model
 17395 ;;
 17396                           
 17397                           	psect	text101
 17398  003DEA                     __ptext101:
 17399                           	opt stack 0
 17400  003DEA                     _Init_ADC:
 17401                           	opt stack 26
 17402                           
 17403                           ;utils.c: 167: ADCON0=0x01;
 17404                           
 17405                           ;incstack = 0
 17406  003DEA  0E01               	movlw	1
 17407  003DEC  6EC2               	movwf	4034,c	;volatile
 17408                           
 17409                           ;utils.c: 168: ADCON1=0x0E;
 17410  003DEE  0E0E               	movlw	14
 17411  003DF0  6EC1               	movwf	4033,c	;volatile
 17412                           
 17413                           ;utils.c: 170: ADCON2=0xA9;
 17414  003DF2  0EA9               	movlw	169
 17415  003DF4  6EC0               	movwf	4032,c	;volatile
 17416  003DF6  0012               	return		;funcret
 17417  003DF8                     __end_of_Init_ADC:
 17418                           	opt stack 0
 17419                           tblptru	equ	0xFF8
 17420                           tblptrh	equ	0xFF7
 17421                           tblptrl	equ	0xFF6
 17422                           tablat	equ	0xFF5
 17423                           prodh	equ	0xFF4
 17424                           prodl	equ	0xFF3
 17425                           intcon	equ	0xFF2
 17426                           intcon2	equ	0xFF1
 17427                           intcon3	equ	0xFF0
 17428                           postinc0	equ	0xFEE
 17429                           wreg	equ	0xFE8
 17430                           postdec1	equ	0xFE5
 17431                           fsr1l	equ	0xFE1
 17432                           indf2	equ	0xFDF
 17433                           postinc2	equ	0xFDE
 17434                           postdec2	equ	0xFDD
 17435                           fsr2h	equ	0xFDA
 17436                           fsr2l	equ	0xFD9
 17437                           status	equ	0xFD8
 17438                           
 17439 ;; *************** function _I2C_Init *****************
 17440 ;; Defined at:
 17441 ;;		line 10 in file "I2C_Soft.c"
 17442 ;; Parameters:    Size  Location     Type
 17443 ;;  c               4   16[COMRAM] unsigned long 
 17444 ;; Auto vars:     Size  Location     Type
 17445 ;;		None
 17446 ;; Return value:  Size  Location     Type
 17447 ;;		None               void
 17448 ;; Registers used:
 17449 ;;		wreg, cstack
 17450 ;; Tracked objects:
 17451 ;;		On entry : 0/0
 17452 ;;		On exit  : 0/0
 17453 ;;		Unchanged: 0/0
 17454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17455 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17458 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17459 ;;Total ram usage:        4 bytes
 17460 ;; Hardware stack levels used:    1
 17461 ;; Hardware stack levels required when called:    4
 17462 ;; This function calls:
 17463 ;;		_i2cHighScl
 17464 ;;		_i2cHighSda
 17465 ;; This function is called by:
 17466 ;;		_Do_Init
 17467 ;; This function uses a non-reentrant model
 17468 ;;
 17469                           
 17470                           	psect	text102
 17471  003E1A                     __ptext102:
 17472                           	opt stack 0
 17473  003E1A                     _I2C_Init:
 17474                           	opt stack 25
 17475                           
 17476                           ;I2C_Soft.c: 12: i2cHighScl();
 17477                           
 17478                           ;incstack = 0
 17479  003E1A  ECFC  F01E         	call	_i2cHighScl	;wreg free
 17480                           
 17481                           ;I2C_Soft.c: 13: i2cHighSda();
 17482  003E1E  EC32  F01F         	call	_i2cHighSda	;wreg free
 17483  003E22  0012               	return		;funcret
 17484  003E24                     __end_of_I2C_Init:
 17485                           	opt stack 0
 17486                           tblptru	equ	0xFF8
 17487                           tblptrh	equ	0xFF7
 17488                           tblptrl	equ	0xFF6
 17489                           tablat	equ	0xFF5
 17490                           prodh	equ	0xFF4
 17491                           prodl	equ	0xFF3
 17492                           intcon	equ	0xFF2
 17493                           intcon2	equ	0xFF1
 17494                           intcon3	equ	0xFF0
 17495                           postinc0	equ	0xFEE
 17496                           wreg	equ	0xFE8
 17497                           postdec1	equ	0xFE5
 17498                           fsr1l	equ	0xFE1
 17499                           indf2	equ	0xFDF
 17500                           postinc2	equ	0xFDE
 17501                           postdec2	equ	0xFDD
 17502                           fsr2h	equ	0xFDA
 17503                           fsr2l	equ	0xFD9
 17504                           status	equ	0xFD8
 17505                           
 17506 ;; *************** function _DS1621_Init *****************
 17507 ;; Defined at:
 17508 ;;		line 22 in file "I2C_Support.c"
 17509 ;; Parameters:    Size  Location     Type
 17510 ;;		None
 17511 ;; Auto vars:     Size  Location     Type
 17512 ;;  Device          1   21[COMRAM] unsigned char 
 17513 ;; Return value:  Size  Location     Type
 17514 ;;		None               void
 17515 ;; Registers used:
 17516 ;;		wreg, status,2, status,0, cstack
 17517 ;; Tracked objects:
 17518 ;;		On entry : 0/0
 17519 ;;		On exit  : 0/0
 17520 ;;		Unchanged: 0/0
 17521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17523 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17525 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17526 ;;Total ram usage:        1 bytes
 17527 ;; Hardware stack levels used:    1
 17528 ;; Hardware stack levels required when called:    6
 17529 ;; This function calls:
 17530 ;;		_I2C_Write_Cmd_Only
 17531 ;;		_I2C_Write_Cmd_Write_Data
 17532 ;; This function is called by:
 17533 ;;		_Do_Init
 17534 ;; This function uses a non-reentrant model
 17535 ;;
 17536                           
 17537                           	psect	text103
 17538  003B48                     __ptext103:
 17539                           	opt stack 0
 17540  003B48                     _DS1621_Init:
 17541                           	opt stack 23
 17542                           
 17543                           ;I2C_Support.c: 24: char Device = 0x48;
 17544                           
 17545                           ;incstack = 0
 17546  003B48  0E48               	movlw	72
 17547  003B4A  6E16               	movwf	DS1621_Init@Device,c
 17548                           
 17549                           ;I2C_Support.c: 25: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
 17550  003B4C  0EAC               	movlw	172
 17551  003B4E  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
 17552  003B50  0E02               	movlw	2
 17553  003B52  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
 17554  003B54  5016               	movf	DS1621_Init@Device,w,c
 17555  003B56  EC94  F01D         	call	_I2C_Write_Cmd_Write_Data
 17556                           
 17557                           ;I2C_Support.c: 26: I2C_Write_Cmd_Only(Device, 0xEE);
 17558  003B5A  0EEE               	movlw	238
 17559  003B5C  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
 17560  003B5E  5016               	movf	DS1621_Init@Device,w,c
 17561  003B60  ECCF  F01D         	call	_I2C_Write_Cmd_Only
 17562  003B64  0012               	return		;funcret
 17563  003B66                     __end_of_DS1621_Init:
 17564                           	opt stack 0
 17565                           tblptru	equ	0xFF8
 17566                           tblptrh	equ	0xFF7
 17567                           tblptrl	equ	0xFF6
 17568                           tablat	equ	0xFF5
 17569                           prodh	equ	0xFF4
 17570                           prodl	equ	0xFF3
 17571                           intcon	equ	0xFF2
 17572                           intcon2	equ	0xFF1
 17573                           intcon3	equ	0xFF0
 17574                           postinc0	equ	0xFEE
 17575                           wreg	equ	0xFE8
 17576                           postdec1	equ	0xFE5
 17577                           fsr1l	equ	0xFE1
 17578                           indf2	equ	0xFDF
 17579                           postinc2	equ	0xFDE
 17580                           postdec2	equ	0xFDD
 17581                           fsr2h	equ	0xFDA
 17582                           fsr2l	equ	0xFD9
 17583                           status	equ	0xFD8
 17584                           
 17585 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
 17586 ;; Defined at:
 17587 ;;		line 148 in file "I2C_Soft.c"
 17588 ;; Parameters:    Size  Location     Type
 17589 ;;  Device          1    wreg     unsigned char 
 17590 ;;  Cmd             1   18[COMRAM] unsigned char 
 17591 ;;  Data_Out        1   19[COMRAM] unsigned char 
 17592 ;; Auto vars:     Size  Location     Type
 17593 ;;  Device          1   20[COMRAM] unsigned char 
 17594 ;; Return value:  Size  Location     Type
 17595 ;;		None               void
 17596 ;; Registers used:
 17597 ;;		wreg, status,2, status,0, cstack
 17598 ;; Tracked objects:
 17599 ;;		On entry : 0/0
 17600 ;;		On exit  : 0/0
 17601 ;;		Unchanged: 0/0
 17602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17603 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17604 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17606 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17607 ;;Total ram usage:        3 bytes
 17608 ;; Hardware stack levels used:    1
 17609 ;; Hardware stack levels required when called:    5
 17610 ;; This function calls:
 17611 ;;		_I2C_Start
 17612 ;;		_I2C_Stop
 17613 ;;		_I2C_Write
 17614 ;; This function is called by:
 17615 ;;		_DS1621_Init
 17616 ;; This function uses a non-reentrant model
 17617 ;;
 17618                           
 17619                           	psect	text104
 17620  003B28                     __ptext104:
 17621                           	opt stack 0
 17622  003B28                     _I2C_Write_Cmd_Write_Data:
 17623                           	opt stack 23
 17624                           
 17625                           ;incstack = 0
 17626                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
 17627  003B28  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
 17628                           
 17629                           ;I2C_Soft.c: 150: I2C_Start();
 17630  003B2A  ECA4  F01E         	call	_I2C_Start	;wreg free
 17631                           
 17632                           ;I2C_Soft.c: 151: I2C_Write((Device << 1) | 0);
 17633  003B2E  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
 17634  003B30  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
 17635  003B32  EC3E  F01C         	call	_I2C_Write
 17636                           
 17637                           ;I2C_Soft.c: 152: I2C_Write(Cmd);
 17638  003B36  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
 17639  003B38  EC3E  F01C         	call	_I2C_Write
 17640                           
 17641                           ;I2C_Soft.c: 153: I2C_Write(Data_Out);
 17642  003B3C  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
 17643  003B3E  EC3E  F01C         	call	_I2C_Write
 17644                           
 17645                           ;I2C_Soft.c: 154: I2C_Stop();
 17646  003B42  EC9B  F01E         	call	_I2C_Stop	;wreg free
 17647  003B46  0012               	return		;funcret
 17648  003B48                     __end_of_I2C_Write_Cmd_Write_Data:
 17649                           	opt stack 0
 17650                           tblptru	equ	0xFF8
 17651                           tblptrh	equ	0xFF7
 17652                           tblptrl	equ	0xFF6
 17653                           tablat	equ	0xFF5
 17654                           prodh	equ	0xFF4
 17655                           prodl	equ	0xFF3
 17656                           intcon	equ	0xFF2
 17657                           intcon2	equ	0xFF1
 17658                           intcon3	equ	0xFF0
 17659                           postinc0	equ	0xFEE
 17660                           wreg	equ	0xFE8
 17661                           postdec1	equ	0xFE5
 17662                           fsr1l	equ	0xFE1
 17663                           indf2	equ	0xFDF
 17664                           postinc2	equ	0xFDE
 17665                           postdec2	equ	0xFDD
 17666                           fsr2h	equ	0xFDA
 17667                           fsr2l	equ	0xFD9
 17668                           status	equ	0xFD8
 17669                           
 17670 ;; *************** function _I2C_Write_Cmd_Only *****************
 17671 ;; Defined at:
 17672 ;;		line 140 in file "I2C_Soft.c"
 17673 ;; Parameters:    Size  Location     Type
 17674 ;;  Device          1    wreg     unsigned char 
 17675 ;;  Cmd             1   18[COMRAM] unsigned char 
 17676 ;; Auto vars:     Size  Location     Type
 17677 ;;  Device          1   19[COMRAM] unsigned char 
 17678 ;; Return value:  Size  Location     Type
 17679 ;;		None               void
 17680 ;; Registers used:
 17681 ;;		wreg, status,2, status,0, cstack
 17682 ;; Tracked objects:
 17683 ;;		On entry : 0/0
 17684 ;;		On exit  : 0/0
 17685 ;;		Unchanged: 0/0
 17686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17687 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17688 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17690 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17691 ;;Total ram usage:        2 bytes
 17692 ;; Hardware stack levels used:    1
 17693 ;; Hardware stack levels required when called:    5
 17694 ;; This function calls:
 17695 ;;		_I2C_Start
 17696 ;;		_I2C_Stop
 17697 ;;		_I2C_Write
 17698 ;; This function is called by:
 17699 ;;		_DS1621_Init
 17700 ;; This function uses a non-reentrant model
 17701 ;;
 17702                           
 17703                           	psect	text105
 17704  003B9E                     __ptext105:
 17705                           	opt stack 0
 17706  003B9E                     _I2C_Write_Cmd_Only:
 17707                           	opt stack 23
 17708                           
 17709                           ;incstack = 0
 17710                           ;I2C_Write_Cmd_Only@Device stored from wreg
 17711  003B9E  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
 17712                           
 17713                           ;I2C_Soft.c: 142: I2C_Start();
 17714  003BA0  ECA4  F01E         	call	_I2C_Start	;wreg free
 17715                           
 17716                           ;I2C_Soft.c: 143: I2C_Write((Device << 1) | 0);
 17717  003BA4  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
 17718  003BA6  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
 17719  003BA8  EC3E  F01C         	call	_I2C_Write
 17720                           
 17721                           ;I2C_Soft.c: 144: I2C_Write(Cmd);
 17722  003BAC  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
 17723  003BAE  EC3E  F01C         	call	_I2C_Write
 17724                           
 17725                           ;I2C_Soft.c: 145: I2C_Stop();
 17726  003BB2  EC9B  F01E         	call	_I2C_Stop	;wreg free
 17727  003BB6  0012               	return		;funcret
 17728  003BB8                     __end_of_I2C_Write_Cmd_Only:
 17729                           	opt stack 0
 17730                           tblptru	equ	0xFF8
 17731                           tblptrh	equ	0xFF7
 17732                           tblptrl	equ	0xFF6
 17733                           tablat	equ	0xFF5
 17734                           prodh	equ	0xFF4
 17735                           prodl	equ	0xFF3
 17736                           intcon	equ	0xFF2
 17737                           intcon2	equ	0xFF1
 17738                           intcon3	equ	0xFF0
 17739                           postinc0	equ	0xFEE
 17740                           wreg	equ	0xFE8
 17741                           postdec1	equ	0xFE5
 17742                           fsr1l	equ	0xFE1
 17743                           indf2	equ	0xFDF
 17744                           postinc2	equ	0xFDE
 17745                           postdec2	equ	0xFDD
 17746                           fsr2h	equ	0xFDA
 17747                           fsr2l	equ	0xFD9
 17748                           status	equ	0xFD8
 17749                           
 17750 ;; *************** function _DS1621_Read_Temp *****************
 17751 ;; Defined at:
 17752 ;;		line 29 in file "I2C_Support.c"
 17753 ;; Parameters:    Size  Location     Type
 17754 ;;		None
 17755 ;; Auto vars:     Size  Location     Type
 17756 ;;  Device          1   23[COMRAM] unsigned char 
 17757 ;;  Data_Ret        1   22[COMRAM] unsigned char 
 17758 ;;  Cmd             1   21[COMRAM] unsigned char 
 17759 ;; Return value:  Size  Location     Type
 17760 ;;                  2   19[COMRAM] int 
 17761 ;; Registers used:
 17762 ;;		wreg, status,2, status,0, cstack
 17763 ;; Tracked objects:
 17764 ;;		On entry : 0/0
 17765 ;;		On exit  : 0/0
 17766 ;;		Unchanged: 0/0
 17767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17768 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17769 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17771 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17772 ;;Total ram usage:        5 bytes
 17773 ;; Hardware stack levels used:    1
 17774 ;; Hardware stack levels required when called:    6
 17775 ;; This function calls:
 17776 ;;		_I2C_ReStart
 17777 ;;		_I2C_Read
 17778 ;;		_I2C_Start
 17779 ;;		_I2C_Stop
 17780 ;;		_I2C_Write
 17781 ;; This function is called by:
 17782 ;;		_main
 17783 ;; This function uses a non-reentrant model
 17784 ;;
 17785                           
 17786                           	psect	text106
 17787  0038F6                     __ptext106:
 17788                           	opt stack 0
 17789  0038F6                     _DS1621_Read_Temp:
 17790                           	opt stack 24
 17791                           
 17792                           ;I2C_Support.c: 32: char Device = 0x48;
 17793                           
 17794                           ;incstack = 0
 17795  0038F6  0E48               	movlw	72
 17796  0038F8  6E18               	movwf	DS1621_Read_Temp@Device,c
 17797                           
 17798                           ;I2C_Support.c: 33: char Cmd = 0xAA;
 17799  0038FA  0EAA               	movlw	170
 17800  0038FC  6E16               	movwf	DS1621_Read_Temp@Cmd,c
 17801                           
 17802                           ;I2C_Support.c: 34: char Data_Ret;
 17803                           ;I2C_Support.c: 35: I2C_Start();
 17804  0038FE  ECA4  F01E         	call	_I2C_Start	;wreg free
 17805                           
 17806                           ;I2C_Support.c: 36: I2C_Write((Device << 1) | 0);
 17807  003902  5018               	movf	DS1621_Read_Temp@Device,w,c
 17808  003904  2418               	addwf	DS1621_Read_Temp@Device,w,c
 17809  003906  EC3E  F01C         	call	_I2C_Write
 17810                           
 17811                           ;I2C_Support.c: 37: I2C_Write(Cmd);
 17812  00390A  5016               	movf	DS1621_Read_Temp@Cmd,w,c
 17813  00390C  EC3E  F01C         	call	_I2C_Write
 17814                           
 17815                           ;I2C_Support.c: 38: I2C_ReStart();
 17816  003910  EC30  F01E         	call	_I2C_ReStart	;wreg free
 17817                           
 17818                           ;I2C_Support.c: 39: I2C_Write((Device << 1) | 1);
 17819  003914  80D8               	bsf	status,0,c
 17820  003916  3418               	rlcf	DS1621_Read_Temp@Device,w,c
 17821  003918  EC3E  F01C         	call	_I2C_Write
 17822                           
 17823                           ;I2C_Support.c: 40: Data_Ret = I2C_Read(0);
 17824  00391C  0E00               	movlw	0
 17825  00391E  ECBB  F01B         	call	_I2C_Read
 17826  003922  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
 17827                           
 17828                           ;I2C_Support.c: 41: I2C_Stop();
 17829  003924  EC9B  F01E         	call	_I2C_Stop	;wreg free
 17830                           
 17831                           ;I2C_Support.c: 42: return Data_Ret;
 17832  003928  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
 17833  00392C  6A15               	clrf	?_DS1621_Read_Temp+1,c
 17834  00392E  D000               	goto	l465
 17835  003930                     l465:
 17836  003930  0012               	return		;funcret
 17837  003932                     __end_of_DS1621_Read_Temp:
 17838                           	opt stack 0
 17839                           tblptru	equ	0xFF8
 17840                           tblptrh	equ	0xFF7
 17841                           tblptrl	equ	0xFF6
 17842                           tablat	equ	0xFF5
 17843                           prodh	equ	0xFF4
 17844                           prodl	equ	0xFF3
 17845                           intcon	equ	0xFF2
 17846                           intcon2	equ	0xFF1
 17847                           intcon3	equ	0xFF0
 17848                           postinc0	equ	0xFEE
 17849                           wreg	equ	0xFE8
 17850                           postdec1	equ	0xFE5
 17851                           fsr1l	equ	0xFE1
 17852                           indf2	equ	0xFDF
 17853                           postinc2	equ	0xFDE
 17854                           postdec2	equ	0xFDD
 17855                           fsr2h	equ	0xFDA
 17856                           fsr2l	equ	0xFD9
 17857                           status	equ	0xFD8
 17858                           
 17859 ;; *************** function _I2C_Write *****************
 17860 ;; Defined at:
 17861 ;;		line 37 in file "I2C_Soft.c"
 17862 ;; Parameters:    Size  Location     Type
 17863 ;;  outByte         1    wreg     unsigned char 
 17864 ;; Auto vars:     Size  Location     Type
 17865 ;;  outByte         1   16[COMRAM] unsigned char 
 17866 ;;  n               1   17[COMRAM] unsigned char 
 17867 ;; Return value:  Size  Location     Type
 17868 ;;		None               void
 17869 ;; Registers used:
 17870 ;;		wreg, status,2, status,0, cstack
 17871 ;; Tracked objects:
 17872 ;;		On entry : 0/0
 17873 ;;		On exit  : 0/0
 17874 ;;		Unchanged: 0/0
 17875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17877 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17879 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17880 ;;Total ram usage:        2 bytes
 17881 ;; Hardware stack levels used:    1
 17882 ;; Hardware stack levels required when called:    4
 17883 ;; This function calls:
 17884 ;;		_i2cHighScl
 17885 ;;		_i2cHighSda
 17886 ;;		_i2cLowScl
 17887 ;;		_i2cLowSda
 17888 ;; This function is called by:
 17889 ;;		_I2C_Write_Address_Read_One_Byte
 17890 ;;		_I2C_Write_Address_Write_One_Byte
 17891 ;;		_I2C_Write_Cmd_Only
 17892 ;;		_I2C_Write_Cmd_Write_Data
 17893 ;;		_DS1621_Read_Temp
 17894 ;;		_DS3231_Read_Time
 17895 ;;		_DS3231_Write_Time
 17896 ;;		_DS3231_Read_Alarm_Time
 17897 ;;		_DS3231_Init
 17898 ;;		_DS3231_Write_Alarm_Time
 17899 ;;		_I2C_Write_Cmd_Read_One_Byte
 17900 ;;		_DS3231_Setup_Time
 17901 ;; This function uses a non-reentrant model
 17902 ;;
 17903                           
 17904                           	psect	text107
 17905  00387C                     __ptext107:
 17906                           	opt stack 0
 17907  00387C                     _I2C_Write:
 17908                           	opt stack 23
 17909                           
 17910                           ;incstack = 0
 17911                           ;I2C_Write@outByte stored from wreg
 17912  00387C  6E11               	movwf	I2C_Write@outByte,c
 17913                           
 17914                           ;I2C_Soft.c: 39: unsigned char n;
 17915                           ;I2C_Soft.c: 40: for(n=0; n<8; n++)
 17916  00387E  0E00               	movlw	0
 17917  003880  6E12               	movwf	I2C_Write@n,c
 17918  003882                     l7963:
 17919  003882  0E07               	movlw	7
 17920  003884  6412               	cpfsgt	I2C_Write@n,c
 17921  003886  D001               	goto	l353
 17922  003888  D011               	goto	l7981
 17923  00388A                     l353:
 17924                           
 17925                           ;I2C_Soft.c: 41: {
 17926                           ;I2C_Soft.c: 42: if(outByte&0x80) i2cHighSda();
 17927  00388A  AE11               	btfss	I2C_Write@outByte,7,c
 17928  00388C  D003               	goto	l7969
 17929  00388E  EC32  F01F         	call	_i2cHighSda	;wreg free
 17930  003892  D003               	goto	l7971
 17931  003894                     l7969:
 17932                           
 17933                           ;I2C_Soft.c: 43: else i2cLowSda();
 17934  003894  EC17  F01F         	call	_i2cLowSda	;wreg free
 17935  003898  D000               	goto	l7971
 17936  00389A                     l7971:
 17937                           
 17938                           ;I2C_Soft.c: 44: i2cHighScl();
 17939  00389A  ECFC  F01E         	call	_i2cHighScl	;wreg free
 17940                           
 17941                           ;I2C_Soft.c: 45: i2cLowScl();
 17942  00389E  EC2E  F01F         	call	_i2cLowScl	;wreg free
 17943                           
 17944                           ;I2C_Soft.c: 46: outByte = outByte << 1;
 17945  0038A2  5011               	movf	I2C_Write@outByte,w,c
 17946  0038A4  2411               	addwf	I2C_Write@outByte,w,c
 17947  0038A6  6E11               	movwf	I2C_Write@outByte,c
 17948  0038A8  2A12               	incf	I2C_Write@n,f,c
 17949  0038AA  D7EB               	goto	l7963
 17950  0038AC                     l7981:
 17951                           
 17952                           ;I2C_Soft.c: 47: }
 17953                           ;I2C_Soft.c: 48: i2cHighSda();
 17954  0038AC  EC32  F01F         	call	_i2cHighSda	;wreg free
 17955                           
 17956                           ;I2C_Soft.c: 49: i2cHighScl();
 17957  0038B0  ECFC  F01E         	call	_i2cHighScl	;wreg free
 17958                           
 17959                           ;I2C_Soft.c: 50: i2cLowScl();
 17960  0038B4  EC2E  F01F         	call	_i2cLowScl	;wreg free
 17961  0038B8  0012               	return		;funcret
 17962  0038BA                     __end_of_I2C_Write:
 17963                           	opt stack 0
 17964                           tblptru	equ	0xFF8
 17965                           tblptrh	equ	0xFF7
 17966                           tblptrl	equ	0xFF6
 17967                           tablat	equ	0xFF5
 17968                           prodh	equ	0xFF4
 17969                           prodl	equ	0xFF3
 17970                           intcon	equ	0xFF2
 17971                           intcon2	equ	0xFF1
 17972                           intcon3	equ	0xFF0
 17973                           postinc0	equ	0xFEE
 17974                           wreg	equ	0xFE8
 17975                           postdec1	equ	0xFE5
 17976                           fsr1l	equ	0xFE1
 17977                           indf2	equ	0xFDF
 17978                           postinc2	equ	0xFDE
 17979                           postdec2	equ	0xFDD
 17980                           fsr2h	equ	0xFDA
 17981                           fsr2l	equ	0xFD9
 17982                           status	equ	0xFD8
 17983                           
 17984 ;; *************** function _I2C_Stop *****************
 17985 ;; Defined at:
 17986 ;;		line 84 in file "I2C_Soft.c"
 17987 ;; Parameters:    Size  Location     Type
 17988 ;;		None
 17989 ;; Auto vars:     Size  Location     Type
 17990 ;;		None
 17991 ;; Return value:  Size  Location     Type
 17992 ;;		None               void
 17993 ;; Registers used:
 17994 ;;		wreg, cstack
 17995 ;; Tracked objects:
 17996 ;;		On entry : 0/0
 17997 ;;		On exit  : 0/0
 17998 ;;		Unchanged: 0/0
 17999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18004 ;;Total ram usage:        0 bytes
 18005 ;; Hardware stack levels used:    1
 18006 ;; Hardware stack levels required when called:    4
 18007 ;; This function calls:
 18008 ;;		_i2cHighScl
 18009 ;;		_i2cHighSda
 18010 ;;		_i2cLowScl
 18011 ;;		_i2cLowSda
 18012 ;; This function is called by:
 18013 ;;		_I2C_Write_Address_Read_One_Byte
 18014 ;;		_I2C_Write_Address_Write_One_Byte
 18015 ;;		_I2C_Write_Cmd_Only
 18016 ;;		_I2C_Write_Cmd_Write_Data
 18017 ;;		_DS1621_Read_Temp
 18018 ;;		_DS3231_Read_Time
 18019 ;;		_DS3231_Write_Time
 18020 ;;		_DS3231_Read_Alarm_Time
 18021 ;;		_DS3231_Init
 18022 ;;		_DS3231_Write_Alarm_Time
 18023 ;;		_I2C_Write_Cmd_Read_One_Byte
 18024 ;;		_DS3231_Setup_Time
 18025 ;; This function uses a non-reentrant model
 18026 ;;
 18027                           
 18028                           	psect	text108
 18029  003D36                     __ptext108:
 18030                           	opt stack 0
 18031  003D36                     _I2C_Stop:
 18032                           	opt stack 23
 18033                           
 18034                           ;I2C_Soft.c: 86: i2cLowScl();
 18035                           
 18036                           ;incstack = 0
 18037  003D36  EC2E  F01F         	call	_i2cLowScl	;wreg free
 18038                           
 18039                           ;I2C_Soft.c: 87: i2cLowSda();
 18040  003D3A  EC17  F01F         	call	_i2cLowSda	;wreg free
 18041                           
 18042                           ;I2C_Soft.c: 88: i2cHighScl();
 18043  003D3E  ECFC  F01E         	call	_i2cHighScl	;wreg free
 18044                           
 18045                           ;I2C_Soft.c: 89: i2cHighSda();
 18046  003D42  EC32  F01F         	call	_i2cHighSda	;wreg free
 18047  003D46  0012               	return		;funcret
 18048  003D48                     __end_of_I2C_Stop:
 18049                           	opt stack 0
 18050                           tblptru	equ	0xFF8
 18051                           tblptrh	equ	0xFF7
 18052                           tblptrl	equ	0xFF6
 18053                           tablat	equ	0xFF5
 18054                           prodh	equ	0xFF4
 18055                           prodl	equ	0xFF3
 18056                           intcon	equ	0xFF2
 18057                           intcon2	equ	0xFF1
 18058                           intcon3	equ	0xFF0
 18059                           postinc0	equ	0xFEE
 18060                           wreg	equ	0xFE8
 18061                           postdec1	equ	0xFE5
 18062                           fsr1l	equ	0xFE1
 18063                           indf2	equ	0xFDF
 18064                           postinc2	equ	0xFDE
 18065                           postdec2	equ	0xFDD
 18066                           fsr2h	equ	0xFDA
 18067                           fsr2l	equ	0xFD9
 18068                           status	equ	0xFD8
 18069                           
 18070 ;; *************** function _I2C_Start *****************
 18071 ;; Defined at:
 18072 ;;		line 67 in file "I2C_Soft.c"
 18073 ;; Parameters:    Size  Location     Type
 18074 ;;		None
 18075 ;; Auto vars:     Size  Location     Type
 18076 ;;		None
 18077 ;; Return value:  Size  Location     Type
 18078 ;;		None               void
 18079 ;; Registers used:
 18080 ;;		wreg, cstack
 18081 ;; Tracked objects:
 18082 ;;		On entry : 0/0
 18083 ;;		On exit  : 0/0
 18084 ;;		Unchanged: 0/0
 18085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18090 ;;Total ram usage:        0 bytes
 18091 ;; Hardware stack levels used:    1
 18092 ;; Hardware stack levels required when called:    4
 18093 ;; This function calls:
 18094 ;;		_i2cHighScl
 18095 ;;		_i2cHighSda
 18096 ;;		_i2cLowScl
 18097 ;;		_i2cLowSda
 18098 ;; This function is called by:
 18099 ;;		_I2C_Write_Address_Read_One_Byte
 18100 ;;		_I2C_Write_Address_Write_One_Byte
 18101 ;;		_I2C_Write_Cmd_Only
 18102 ;;		_I2C_Write_Cmd_Write_Data
 18103 ;;		_DS1621_Read_Temp
 18104 ;;		_DS3231_Read_Time
 18105 ;;		_DS3231_Write_Time
 18106 ;;		_DS3231_Read_Alarm_Time
 18107 ;;		_DS3231_Init
 18108 ;;		_DS3231_Write_Alarm_Time
 18109 ;;		_I2C_Write_Cmd_Read_One_Byte
 18110 ;;		_DS3231_Setup_Time
 18111 ;; This function uses a non-reentrant model
 18112 ;;
 18113                           
 18114                           	psect	text109
 18115  003D48                     __ptext109:
 18116                           	opt stack 0
 18117  003D48                     _I2C_Start:
 18118                           	opt stack 23
 18119                           
 18120                           ;I2C_Soft.c: 69: i2cHighSda();
 18121                           
 18122                           ;incstack = 0
 18123  003D48  EC32  F01F         	call	_i2cHighSda	;wreg free
 18124                           
 18125                           ;I2C_Soft.c: 70: i2cHighScl();
 18126  003D4C  ECFC  F01E         	call	_i2cHighScl	;wreg free
 18127                           
 18128                           ;I2C_Soft.c: 71: i2cLowSda();
 18129  003D50  EC17  F01F         	call	_i2cLowSda	;wreg free
 18130                           
 18131                           ;I2C_Soft.c: 72: i2cLowScl();
 18132  003D54  EC2E  F01F         	call	_i2cLowScl	;wreg free
 18133  003D58  0012               	return		;funcret
 18134  003D5A                     __end_of_I2C_Start:
 18135                           	opt stack 0
 18136                           tblptru	equ	0xFF8
 18137                           tblptrh	equ	0xFF7
 18138                           tblptrl	equ	0xFF6
 18139                           tablat	equ	0xFF5
 18140                           prodh	equ	0xFF4
 18141                           prodl	equ	0xFF3
 18142                           intcon	equ	0xFF2
 18143                           intcon2	equ	0xFF1
 18144                           intcon3	equ	0xFF0
 18145                           postinc0	equ	0xFEE
 18146                           wreg	equ	0xFE8
 18147                           postdec1	equ	0xFE5
 18148                           fsr1l	equ	0xFE1
 18149                           indf2	equ	0xFDF
 18150                           postinc2	equ	0xFDE
 18151                           postdec2	equ	0xFDD
 18152                           fsr2h	equ	0xFDA
 18153                           fsr2l	equ	0xFD9
 18154                           status	equ	0xFD8
 18155                           
 18156 ;; *************** function _I2C_Read *****************
 18157 ;; Defined at:
 18158 ;;		line 16 in file "I2C_Soft.c"
 18159 ;; Parameters:    Size  Location     Type
 18160 ;;  ack             1    wreg     unsigned char 
 18161 ;; Auto vars:     Size  Location     Type
 18162 ;;  ack             1   16[COMRAM] unsigned char 
 18163 ;;  inByte          1   18[COMRAM] unsigned char 
 18164 ;;  n               1   17[COMRAM] unsigned char 
 18165 ;; Return value:  Size  Location     Type
 18166 ;;                  1    wreg      unsigned char 
 18167 ;; Registers used:
 18168 ;;		wreg, status,2, status,0, cstack
 18169 ;; Tracked objects:
 18170 ;;		On entry : 0/0
 18171 ;;		On exit  : 0/0
 18172 ;;		Unchanged: 0/0
 18173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18175 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18177 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18178 ;;Total ram usage:        3 bytes
 18179 ;; Hardware stack levels used:    1
 18180 ;; Hardware stack levels required when called:    5
 18181 ;; This function calls:
 18182 ;;		_i2cAck
 18183 ;;		_i2cHighScl
 18184 ;;		_i2cHighSda
 18185 ;;		_i2cLowScl
 18186 ;;		_i2cNack
 18187 ;; This function is called by:
 18188 ;;		_I2C_Write_Address_Read_One_Byte
 18189 ;;		_DS1621_Read_Temp
 18190 ;;		_DS3231_Read_Time
 18191 ;;		_DS3231_Read_Alarm_Time
 18192 ;;		_DS3231_Init
 18193 ;;		_I2C_Write_Cmd_Read_One_Byte
 18194 ;; This function uses a non-reentrant model
 18195 ;;
 18196                           
 18197                           	psect	text110
 18198  003776                     __ptext110:
 18199                           	opt stack 0
 18200  003776                     _I2C_Read:
 18201                           	opt stack 22
 18202                           
 18203                           ;incstack = 0
 18204                           ;I2C_Read@ack stored from wreg
 18205  003776  6E11               	movwf	I2C_Read@ack,c
 18206                           
 18207                           ;I2C_Soft.c: 18: unsigned char inByte, n;
 18208                           ;I2C_Soft.c: 19: i2cHighSda();
 18209  003778  EC32  F01F         	call	_i2cHighSda	;wreg free
 18210                           
 18211                           ;I2C_Soft.c: 20: for (n=0; n<8; n++)
 18212  00377C  0E00               	movlw	0
 18213  00377E  6E12               	movwf	I2C_Read@n,c
 18214  003780                     l7933:
 18215  003780  0E07               	movlw	7
 18216  003782  6412               	cpfsgt	I2C_Read@n,c
 18217  003784  D001               	goto	l7937
 18218  003786  D00F               	goto	l7951
 18219  003788                     l7937:
 18220                           
 18221                           ;I2C_Soft.c: 21: {
 18222                           ;I2C_Soft.c: 22: i2cHighScl();
 18223  003788  ECFC  F01E         	call	_i2cHighScl	;wreg free
 18224                           
 18225                           ;I2C_Soft.c: 24: if (PORTAbits.RA2)
 18226  00378C  A480               	btfss	3968,2,c	;volatile
 18227  00378E  D003               	goto	l7943
 18228                           
 18229                           ;I2C_Soft.c: 25: inByte = (inByte << 1) | 0x01;
 18230  003790  80D8               	bsf	status,0,c
 18231  003792  3613               	rlcf	I2C_Read@inByte,f,c
 18232  003794  D004               	goto	l7945
 18233  003796                     l7943:
 18234                           
 18235                           ;I2C_Soft.c: 26: else
 18236                           ;I2C_Soft.c: 27: inByte = inByte << 1;
 18237  003796  5013               	movf	I2C_Read@inByte,w,c
 18238  003798  2413               	addwf	I2C_Read@inByte,w,c
 18239  00379A  6E13               	movwf	I2C_Read@inByte,c
 18240  00379C  D000               	goto	l7945
 18241  00379E                     l7945:
 18242                           
 18243                           ;I2C_Soft.c: 28: i2cLowScl();
 18244  00379E  EC2E  F01F         	call	_i2cLowScl	;wreg free
 18245  0037A2  2A12               	incf	I2C_Read@n,f,c
 18246  0037A4  D7ED               	goto	l7933
 18247  0037A6                     l7951:
 18248                           
 18249                           ;I2C_Soft.c: 29: }
 18250                           ;I2C_Soft.c: 30: if (ack) i2cAck();
 18251  0037A6  5011               	movf	I2C_Read@ack,w,c
 18252  0037A8  B4D8               	btfsc	status,2,c
 18253  0037AA  D003               	goto	l7955
 18254  0037AC  ECAD  F01E         	call	_i2cAck	;wreg free
 18255  0037B0  D003               	goto	l7957
 18256  0037B2                     l7955:
 18257                           
 18258                           ;I2C_Soft.c: 31: else i2cNack();
 18259  0037B2  EC12  F01F         	call	_i2cNack	;wreg free
 18260  0037B6  D000               	goto	l7957
 18261  0037B8                     l7957:
 18262                           
 18263                           ;I2C_Soft.c: 34: return(inByte);
 18264  0037B8  5013               	movf	I2C_Read@inByte,w,c
 18265  0037BA  D000               	goto	l350
 18266  0037BC                     l350:
 18267  0037BC  0012               	return		;funcret
 18268  0037BE                     __end_of_I2C_Read:
 18269                           	opt stack 0
 18270                           tblptru	equ	0xFF8
 18271                           tblptrh	equ	0xFF7
 18272                           tblptrl	equ	0xFF6
 18273                           tablat	equ	0xFF5
 18274                           prodh	equ	0xFF4
 18275                           prodl	equ	0xFF3
 18276                           intcon	equ	0xFF2
 18277                           intcon2	equ	0xFF1
 18278                           intcon3	equ	0xFF0
 18279                           postinc0	equ	0xFEE
 18280                           wreg	equ	0xFE8
 18281                           postdec1	equ	0xFE5
 18282                           fsr1l	equ	0xFE1
 18283                           indf2	equ	0xFDF
 18284                           postinc2	equ	0xFDE
 18285                           postdec2	equ	0xFDD
 18286                           fsr2h	equ	0xFDA
 18287                           fsr2l	equ	0xFD9
 18288                           status	equ	0xFD8
 18289                           
 18290 ;; *************** function _i2cNack *****************
 18291 ;; Defined at:
 18292 ;;		line 53 in file "I2C_Soft.c"
 18293 ;; Parameters:    Size  Location     Type
 18294 ;;		None
 18295 ;; Auto vars:     Size  Location     Type
 18296 ;;		None
 18297 ;; Return value:  Size  Location     Type
 18298 ;;		None               void
 18299 ;; Registers used:
 18300 ;;		wreg, cstack
 18301 ;; Tracked objects:
 18302 ;;		On entry : 0/0
 18303 ;;		On exit  : 0/0
 18304 ;;		Unchanged: 0/0
 18305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18309 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18310 ;;Total ram usage:        0 bytes
 18311 ;; Hardware stack levels used:    1
 18312 ;; Hardware stack levels required when called:    4
 18313 ;; This function calls:
 18314 ;;		_i2cHighScl
 18315 ;;		_i2cLowScl
 18316 ;; This function is called by:
 18317 ;;		_I2C_Read
 18318 ;; This function uses a non-reentrant model
 18319 ;;
 18320                           
 18321                           	psect	text111
 18322  003E24                     __ptext111:
 18323                           	opt stack 0
 18324  003E24                     _i2cNack:
 18325                           	opt stack 22
 18326                           
 18327                           ;I2C_Soft.c: 55: i2cHighScl();
 18328                           
 18329                           ;incstack = 0
 18330  003E24  ECFC  F01E         	call	_i2cHighScl	;wreg free
 18331                           
 18332                           ;I2C_Soft.c: 56: i2cLowScl();
 18333  003E28  EC2E  F01F         	call	_i2cLowScl	;wreg free
 18334  003E2C  0012               	return		;funcret
 18335  003E2E                     __end_of_i2cNack:
 18336                           	opt stack 0
 18337                           tblptru	equ	0xFF8
 18338                           tblptrh	equ	0xFF7
 18339                           tblptrl	equ	0xFF6
 18340                           tablat	equ	0xFF5
 18341                           prodh	equ	0xFF4
 18342                           prodl	equ	0xFF3
 18343                           intcon	equ	0xFF2
 18344                           intcon2	equ	0xFF1
 18345                           intcon3	equ	0xFF0
 18346                           postinc0	equ	0xFEE
 18347                           wreg	equ	0xFE8
 18348                           postdec1	equ	0xFE5
 18349                           fsr1l	equ	0xFE1
 18350                           indf2	equ	0xFDF
 18351                           postinc2	equ	0xFDE
 18352                           postdec2	equ	0xFDD
 18353                           fsr2h	equ	0xFDA
 18354                           fsr2l	equ	0xFD9
 18355                           status	equ	0xFD8
 18356                           
 18357 ;; *************** function _i2cAck *****************
 18358 ;; Defined at:
 18359 ;;		line 59 in file "I2C_Soft.c"
 18360 ;; Parameters:    Size  Location     Type
 18361 ;;		None
 18362 ;; Auto vars:     Size  Location     Type
 18363 ;;		None
 18364 ;; Return value:  Size  Location     Type
 18365 ;;		None               void
 18366 ;; Registers used:
 18367 ;;		wreg, cstack
 18368 ;; Tracked objects:
 18369 ;;		On entry : 0/0
 18370 ;;		On exit  : 0/0
 18371 ;;		Unchanged: 0/0
 18372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18376 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18377 ;;Total ram usage:        0 bytes
 18378 ;; Hardware stack levels used:    1
 18379 ;; Hardware stack levels required when called:    4
 18380 ;; This function calls:
 18381 ;;		_i2cHighScl
 18382 ;;		_i2cHighSda
 18383 ;;		_i2cLowScl
 18384 ;;		_i2cLowSda
 18385 ;; This function is called by:
 18386 ;;		_I2C_Read
 18387 ;; This function uses a non-reentrant model
 18388 ;;
 18389                           
 18390                           	psect	text112
 18391  003D5A                     __ptext112:
 18392                           	opt stack 0
 18393  003D5A                     _i2cAck:
 18394                           	opt stack 22
 18395                           
 18396                           ;I2C_Soft.c: 61: i2cLowSda();
 18397                           
 18398                           ;incstack = 0
 18399  003D5A  EC17  F01F         	call	_i2cLowSda	;wreg free
 18400                           
 18401                           ;I2C_Soft.c: 62: i2cHighScl();
 18402  003D5E  ECFC  F01E         	call	_i2cHighScl	;wreg free
 18403                           
 18404                           ;I2C_Soft.c: 63: i2cLowScl();
 18405  003D62  EC2E  F01F         	call	_i2cLowScl	;wreg free
 18406                           
 18407                           ;I2C_Soft.c: 64: i2cHighSda();
 18408  003D66  EC32  F01F         	call	_i2cHighSda	;wreg free
 18409  003D6A  0012               	return		;funcret
 18410  003D6C                     __end_of_i2cAck:
 18411                           	opt stack 0
 18412                           tblptru	equ	0xFF8
 18413                           tblptrh	equ	0xFF7
 18414                           tblptrl	equ	0xFF6
 18415                           tablat	equ	0xFF5
 18416                           prodh	equ	0xFF4
 18417                           prodl	equ	0xFF3
 18418                           intcon	equ	0xFF2
 18419                           intcon2	equ	0xFF1
 18420                           intcon3	equ	0xFF0
 18421                           postinc0	equ	0xFEE
 18422                           wreg	equ	0xFE8
 18423                           postdec1	equ	0xFE5
 18424                           fsr1l	equ	0xFE1
 18425                           indf2	equ	0xFDF
 18426                           postinc2	equ	0xFDE
 18427                           postdec2	equ	0xFDD
 18428                           fsr2h	equ	0xFDA
 18429                           fsr2l	equ	0xFD9
 18430                           status	equ	0xFD8
 18431                           
 18432 ;; *************** function _I2C_ReStart *****************
 18433 ;; Defined at:
 18434 ;;		line 75 in file "I2C_Soft.c"
 18435 ;; Parameters:    Size  Location     Type
 18436 ;;		None
 18437 ;; Auto vars:     Size  Location     Type
 18438 ;;		None
 18439 ;; Return value:  Size  Location     Type
 18440 ;;		None               void
 18441 ;; Registers used:
 18442 ;;		wreg, cstack
 18443 ;; Tracked objects:
 18444 ;;		On entry : 0/0
 18445 ;;		On exit  : 0/0
 18446 ;;		Unchanged: 0/0
 18447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18452 ;;Total ram usage:        0 bytes
 18453 ;; Hardware stack levels used:    1
 18454 ;; Hardware stack levels required when called:    4
 18455 ;; This function calls:
 18456 ;;		_i2cHighScl
 18457 ;;		_i2cHighSda
 18458 ;;		_i2cLowScl
 18459 ;;		_i2cLowSda
 18460 ;; This function is called by:
 18461 ;;		_I2C_Write_Address_Read_One_Byte
 18462 ;;		_DS1621_Read_Temp
 18463 ;;		_DS3231_Read_Time
 18464 ;;		_DS3231_Read_Alarm_Time
 18465 ;;		_DS3231_Init
 18466 ;;		_I2C_Write_Cmd_Read_One_Byte
 18467 ;; This function uses a non-reentrant model
 18468 ;;
 18469                           
 18470                           	psect	text113
 18471  003C60                     __ptext113:
 18472                           	opt stack 0
 18473  003C60                     _I2C_ReStart:
 18474                           	opt stack 23
 18475                           
 18476                           ;I2C_Soft.c: 77: i2cLowScl();
 18477                           
 18478                           ;incstack = 0
 18479  003C60  EC2E  F01F         	call	_i2cLowScl	;wreg free
 18480                           
 18481                           ;I2C_Soft.c: 78: i2cHighSda();
 18482  003C64  EC32  F01F         	call	_i2cHighSda	;wreg free
 18483                           
 18484                           ;I2C_Soft.c: 79: i2cHighScl();
 18485  003C68  ECFC  F01E         	call	_i2cHighScl	;wreg free
 18486                           
 18487                           ;I2C_Soft.c: 80: i2cLowSda();
 18488  003C6C  EC17  F01F         	call	_i2cLowSda	;wreg free
 18489                           
 18490                           ;I2C_Soft.c: 81: i2cLowScl();
 18491  003C70  EC2E  F01F         	call	_i2cLowScl	;wreg free
 18492  003C74  0012               	return		;funcret
 18493  003C76                     __end_of_I2C_ReStart:
 18494                           	opt stack 0
 18495                           tblptru	equ	0xFF8
 18496                           tblptrh	equ	0xFF7
 18497                           tblptrl	equ	0xFF6
 18498                           tablat	equ	0xFF5
 18499                           prodh	equ	0xFF4
 18500                           prodl	equ	0xFF3
 18501                           intcon	equ	0xFF2
 18502                           intcon2	equ	0xFF1
 18503                           intcon3	equ	0xFF0
 18504                           postinc0	equ	0xFEE
 18505                           wreg	equ	0xFE8
 18506                           postdec1	equ	0xFE5
 18507                           fsr1l	equ	0xFE1
 18508                           indf2	equ	0xFDF
 18509                           postinc2	equ	0xFDE
 18510                           postdec2	equ	0xFDD
 18511                           fsr2h	equ	0xFDA
 18512                           fsr2l	equ	0xFD9
 18513                           status	equ	0xFD8
 18514                           
 18515 ;; *************** function _i2cLowSda *****************
 18516 ;; Defined at:
 18517 ;;		line 98 in file "I2C_Soft.c"
 18518 ;; Parameters:    Size  Location     Type
 18519 ;;		None
 18520 ;; Auto vars:     Size  Location     Type
 18521 ;;		None
 18522 ;; Return value:  Size  Location     Type
 18523 ;;		None               void
 18524 ;; Registers used:
 18525 ;;		None
 18526 ;; Tracked objects:
 18527 ;;		On entry : 0/0
 18528 ;;		On exit  : 0/0
 18529 ;;		Unchanged: 0/0
 18530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18534 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18535 ;;Total ram usage:        0 bytes
 18536 ;; Hardware stack levels used:    1
 18537 ;; Hardware stack levels required when called:    3
 18538 ;; This function calls:
 18539 ;;		Nothing
 18540 ;; This function is called by:
 18541 ;;		_I2C_Write
 18542 ;;		_i2cAck
 18543 ;;		_I2C_Start
 18544 ;;		_I2C_ReStart
 18545 ;;		_I2C_Stop
 18546 ;; This function uses a non-reentrant model
 18547 ;;
 18548                           
 18549                           	psect	text114
 18550  003E2E                     __ptext114:
 18551                           	opt stack 0
 18552  003E2E                     _i2cLowSda:
 18553                           	opt stack 23
 18554                           
 18555                           ;I2C_Soft.c: 100: PORTAbits.RA2 = 0;
 18556                           
 18557                           ;incstack = 0
 18558  003E2E  9480               	bcf	3968,2,c	;volatile
 18559                           
 18560                           ;I2C_Soft.c: 101: TRISAbits.RA2 = 0;
 18561  003E30  9492               	bcf	3986,2,c	;volatile
 18562                           
 18563                           ;I2C_Soft.c: 102: _delay((unsigned long)((2)*(8000000/4000000.0)));
 18564  003E32  D000               	nop2		;2 cycle nop
 18565  003E34  D000               	nop2		;2 cycle nop
 18566  003E36  0012               	return		;funcret
 18567  003E38                     __end_of_i2cLowSda:
 18568                           	opt stack 0
 18569                           tblptru	equ	0xFF8
 18570                           tblptrh	equ	0xFF7
 18571                           tblptrl	equ	0xFF6
 18572                           tablat	equ	0xFF5
 18573                           prodh	equ	0xFF4
 18574                           prodl	equ	0xFF3
 18575                           intcon	equ	0xFF2
 18576                           intcon2	equ	0xFF1
 18577                           intcon3	equ	0xFF0
 18578                           postinc0	equ	0xFEE
 18579                           wreg	equ	0xFE8
 18580                           postdec1	equ	0xFE5
 18581                           fsr1l	equ	0xFE1
 18582                           indf2	equ	0xFDF
 18583                           postinc2	equ	0xFDE
 18584                           postdec2	equ	0xFDD
 18585                           fsr2h	equ	0xFDA
 18586                           fsr2l	equ	0xFD9
 18587                           status	equ	0xFD8
 18588                           
 18589 ;; *************** function _i2cLowScl *****************
 18590 ;; Defined at:
 18591 ;;		line 111 in file "I2C_Soft.c"
 18592 ;; Parameters:    Size  Location     Type
 18593 ;;		None
 18594 ;; Auto vars:     Size  Location     Type
 18595 ;;		None
 18596 ;; Return value:  Size  Location     Type
 18597 ;;		None               void
 18598 ;; Registers used:
 18599 ;;		None
 18600 ;; Tracked objects:
 18601 ;;		On entry : 0/0
 18602 ;;		On exit  : 0/0
 18603 ;;		Unchanged: 0/0
 18604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18609 ;;Total ram usage:        0 bytes
 18610 ;; Hardware stack levels used:    1
 18611 ;; Hardware stack levels required when called:    3
 18612 ;; This function calls:
 18613 ;;		Nothing
 18614 ;; This function is called by:
 18615 ;;		_I2C_Read
 18616 ;;		_I2C_Write
 18617 ;;		_i2cNack
 18618 ;;		_i2cAck
 18619 ;;		_I2C_Start
 18620 ;;		_I2C_ReStart
 18621 ;;		_I2C_Stop
 18622 ;; This function uses a non-reentrant model
 18623 ;;
 18624                           
 18625                           	psect	text115
 18626  003E5C                     __ptext115:
 18627                           	opt stack 0
 18628  003E5C                     _i2cLowScl:
 18629                           	opt stack 23
 18630                           
 18631                           ;I2C_Soft.c: 113: PORTAbits.RA4 = 0;
 18632                           
 18633                           ;incstack = 0
 18634  003E5C  9880               	bcf	3968,4,c	;volatile
 18635                           
 18636                           ;I2C_Soft.c: 114: TRISAbits.RA4 = 0;
 18637  003E5E  9892               	bcf	3986,4,c	;volatile
 18638                           
 18639                           ;I2C_Soft.c: 115: _delay((unsigned long)((1)*(8000000/4000000.0)));
 18640  003E60  D000               	nop2		;2 cycle nop
 18641  003E62  0012               	return		;funcret
 18642  003E64                     __end_of_i2cLowScl:
 18643                           	opt stack 0
 18644                           tblptru	equ	0xFF8
 18645                           tblptrh	equ	0xFF7
 18646                           tblptrl	equ	0xFF6
 18647                           tablat	equ	0xFF5
 18648                           prodh	equ	0xFF4
 18649                           prodl	equ	0xFF3
 18650                           intcon	equ	0xFF2
 18651                           intcon2	equ	0xFF1
 18652                           intcon3	equ	0xFF0
 18653                           postinc0	equ	0xFEE
 18654                           wreg	equ	0xFE8
 18655                           postdec1	equ	0xFE5
 18656                           fsr1l	equ	0xFE1
 18657                           indf2	equ	0xFDF
 18658                           postinc2	equ	0xFDE
 18659                           postdec2	equ	0xFDD
 18660                           fsr2h	equ	0xFDA
 18661                           fsr2l	equ	0xFD9
 18662                           status	equ	0xFD8
 18663                           
 18664 ;; *************** function _i2cHighSda *****************
 18665 ;; Defined at:
 18666 ;;		line 92 in file "I2C_Soft.c"
 18667 ;; Parameters:    Size  Location     Type
 18668 ;;		None
 18669 ;; Auto vars:     Size  Location     Type
 18670 ;;		None
 18671 ;; Return value:  Size  Location     Type
 18672 ;;		None               void
 18673 ;; Registers used:
 18674 ;;		None
 18675 ;; Tracked objects:
 18676 ;;		On entry : 0/0
 18677 ;;		On exit  : 0/0
 18678 ;;		Unchanged: 0/0
 18679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18683 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18684 ;;Total ram usage:        0 bytes
 18685 ;; Hardware stack levels used:    1
 18686 ;; Hardware stack levels required when called:    3
 18687 ;; This function calls:
 18688 ;;		Nothing
 18689 ;; This function is called by:
 18690 ;;		_I2C_Init
 18691 ;;		_I2C_Read
 18692 ;;		_I2C_Write
 18693 ;;		_i2cAck
 18694 ;;		_I2C_Start
 18695 ;;		_I2C_ReStart
 18696 ;;		_I2C_Stop
 18697 ;; This function uses a non-reentrant model
 18698 ;;
 18699                           
 18700                           	psect	text116
 18701  003E64                     __ptext116:
 18702                           	opt stack 0
 18703  003E64                     _i2cHighSda:
 18704                           	opt stack 23
 18705                           
 18706                           ;I2C_Soft.c: 94: TRISAbits.RA2 = 1;
 18707                           
 18708                           ;incstack = 0
 18709  003E64  8492               	bsf	3986,2,c	;volatile
 18710                           
 18711                           ;I2C_Soft.c: 95: _delay((unsigned long)((2)*(8000000/4000000.0)));
 18712  003E66  D000               	nop2		;2 cycle nop
 18713  003E68  D000               	nop2		;2 cycle nop
 18714  003E6A  0012               	return		;funcret
 18715  003E6C                     __end_of_i2cHighSda:
 18716                           	opt stack 0
 18717                           tblptru	equ	0xFF8
 18718                           tblptrh	equ	0xFF7
 18719                           tblptrl	equ	0xFF6
 18720                           tablat	equ	0xFF5
 18721                           prodh	equ	0xFF4
 18722                           prodl	equ	0xFF3
 18723                           intcon	equ	0xFF2
 18724                           intcon2	equ	0xFF1
 18725                           intcon3	equ	0xFF0
 18726                           postinc0	equ	0xFEE
 18727                           wreg	equ	0xFE8
 18728                           postdec1	equ	0xFE5
 18729                           fsr1l	equ	0xFE1
 18730                           indf2	equ	0xFDF
 18731                           postinc2	equ	0xFDE
 18732                           postdec2	equ	0xFDD
 18733                           fsr2h	equ	0xFDA
 18734                           fsr2l	equ	0xFD9
 18735                           status	equ	0xFD8
 18736                           
 18737 ;; *************** function _i2cHighScl *****************
 18738 ;; Defined at:
 18739 ;;		line 105 in file "I2C_Soft.c"
 18740 ;; Parameters:    Size  Location     Type
 18741 ;;		None
 18742 ;; Auto vars:     Size  Location     Type
 18743 ;;		None
 18744 ;; Return value:  Size  Location     Type
 18745 ;;		None               void
 18746 ;; Registers used:
 18747 ;;		wreg
 18748 ;; Tracked objects:
 18749 ;;		On entry : 0/0
 18750 ;;		On exit  : 0/0
 18751 ;;		Unchanged: 0/0
 18752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18757 ;;Total ram usage:        0 bytes
 18758 ;; Hardware stack levels used:    1
 18759 ;; Hardware stack levels required when called:    3
 18760 ;; This function calls:
 18761 ;;		Nothing
 18762 ;; This function is called by:
 18763 ;;		_I2C_Init
 18764 ;;		_I2C_Read
 18765 ;;		_I2C_Write
 18766 ;;		_i2cNack
 18767 ;;		_i2cAck
 18768 ;;		_I2C_Start
 18769 ;;		_I2C_ReStart
 18770 ;;		_I2C_Stop
 18771 ;; This function uses a non-reentrant model
 18772 ;;
 18773                           
 18774                           	psect	text117
 18775  003DF8                     __ptext117:
 18776                           	opt stack 0
 18777  003DF8                     _i2cHighScl:
 18778                           	opt stack 23
 18779                           
 18780                           ;I2C_Soft.c: 107: TRISAbits.RA4 = 1;
 18781                           
 18782                           ;incstack = 0
 18783  003DF8  8892               	bsf	3986,4,c	;volatile
 18784                           
 18785                           ;I2C_Soft.c: 108: _delay((unsigned long)((10)*(8000000/4000000.0)));
 18786  003DFA  0E06               	movlw	6
 18787  003DFC                     u7707:
 18788  003DFC  2EE8               	decfsz	wreg,f,c
 18789  003DFE  D7FE               	goto	u7707
 18790  003E00  D000               	nop2		;nop
 18791  003E02  0012               	return		;funcret
 18792  003E04                     __end_of_i2cHighScl:
 18793                           	opt stack 0
 18794                           tblptru	equ	0xFF8
 18795                           tblptrh	equ	0xFF7
 18796                           tblptrl	equ	0xFF6
 18797                           tablat	equ	0xFF5
 18798                           prodh	equ	0xFF4
 18799                           prodl	equ	0xFF3
 18800                           intcon	equ	0xFF2
 18801                           intcon2	equ	0xFF1
 18802                           intcon3	equ	0xFF0
 18803                           postinc0	equ	0xFEE
 18804                           wreg	equ	0xFE8
 18805                           postdec1	equ	0xFE5
 18806                           fsr1l	equ	0xFE1
 18807                           indf2	equ	0xFDF
 18808                           postinc2	equ	0xFDE
 18809                           postdec2	equ	0xFDD
 18810                           fsr2h	equ	0xFDA
 18811                           fsr2l	equ	0xFD9
 18812                           status	equ	0xFD8
 18813                           
 18814 ;; *************** function _chkisr *****************
 18815 ;; Defined at:
 18816 ;;		line 38 in file "Interrupt.c"
 18817 ;; Parameters:    Size  Location     Type
 18818 ;;		None
 18819 ;; Auto vars:     Size  Location     Type
 18820 ;;		None
 18821 ;; Return value:  Size  Location     Type
 18822 ;;		None               void
 18823 ;; Registers used:
 18824 ;;		wreg, status,2, status,0, cstack
 18825 ;; Tracked objects:
 18826 ;;		On entry : 0/0
 18827 ;;		On exit  : 0/0
 18828 ;;		Unchanged: 0/0
 18829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18832 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18833 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18834 ;;Total ram usage:       14 bytes
 18835 ;; Hardware stack levels used:    1
 18836 ;; Hardware stack levels required when called:    2
 18837 ;; This function calls:
 18838 ;;		_INT0_isr
 18839 ;;		_INT1_isr
 18840 ;;		_INT2_isr
 18841 ;;		_TIMER1_isr
 18842 ;; This function is called by:
 18843 ;;		Interrupt level 2
 18844 ;; This function uses a non-reentrant model
 18845 ;;
 18846                           
 18847                           	psect	intcode
 18848  000008                     __pintcode:
 18849                           	opt stack 0
 18850  000008                     _chkisr:
 18851                           	opt stack 18
 18852                           
 18853                           ;incstack = 0
 18854  000008  CFFA F003          	movff	pclath,??_chkisr
 18855  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
 18856  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
 18857  000014  ED4D  F017         	call	int_func,f	;refresh shadow registers
 18858                           pclatu	equ	0xFFB
 18859                           pclath	equ	0xFFA
 18860                           tblptru	equ	0xFF8
 18861                           tblptrh	equ	0xFF7
 18862                           tblptrl	equ	0xFF6
 18863                           tablat	equ	0xFF5
 18864                           prodh	equ	0xFF4
 18865                           prodl	equ	0xFF3
 18866                           intcon	equ	0xFF2
 18867                           intcon2	equ	0xFF1
 18868                           intcon3	equ	0xFF0
 18869                           postinc0	equ	0xFEE
 18870                           fsr0l	equ	0xFE9
 18871                           wreg	equ	0xFE8
 18872                           postdec1	equ	0xFE5
 18873                           fsr1l	equ	0xFE1
 18874                           indf2	equ	0xFDF
 18875                           postinc2	equ	0xFDE
 18876                           postdec2	equ	0xFDD
 18877                           fsr2h	equ	0xFDA
 18878                           fsr2l	equ	0xFD9
 18879                           status	equ	0xFD8
 18880                           
 18881                           	psect	intcode_body
 18882  002E9A                     __pintcode_body:
 18883                           	opt stack 18
 18884  002E9A                     int_func:
 18885                           	opt stack 18
 18886  002E9A  0006               	pop		; remove dummy address from shadow register refresh
 18887  002E9C  CFEA F006          	movff	fsr0h,??_chkisr+3
 18888  002EA0  CFE1 F007          	movff	fsr1l,??_chkisr+4
 18889  002EA4  CFE2 F008          	movff	fsr1h,??_chkisr+5
 18890  002EA8  CFD9 F009          	movff	fsr2l,??_chkisr+6
 18891  002EAC  CFDA F00A          	movff	fsr2h,??_chkisr+7
 18892  002EB0  CFF3 F00B          	movff	prodl,??_chkisr+8
 18893  002EB4  CFF4 F00C          	movff	prodh,??_chkisr+9
 18894  002EB8  CFF6 F00D          	movff	tblptrl,??_chkisr+10
 18895  002EBC  CFF7 F00E          	movff	tblptrh,??_chkisr+11
 18896  002EC0  CFF8 F00F          	movff	tblptru,??_chkisr+12
 18897  002EC4  CFF5 F010          	movff	tablat,??_chkisr+13
 18898                           
 18899                           ;Interrupt.c: 41: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
 18900  002EC8  A09E               	btfss	3998,0,c	;volatile
 18901  002ECA  D003               	goto	i2l7559
 18902  002ECC  EC02  F01F         	call	_TIMER1_isr	;wreg free
 18903  002ED0  D000               	goto	i2l7559
 18904  002ED2                     i2l7559:
 18905                           
 18906                           ;Interrupt.c: 42: if (INTCONbits.INT0IF == 1) INT0_isr();
 18907  002ED2  A2F2               	btfss	intcon,1,c	;volatile
 18908  002ED4  D003               	goto	i2l7563
 18909  002ED6  ECF3  F00A         	call	_INT0_isr	;wreg free
 18910  002EDA  D000               	goto	i2l7563
 18911  002EDC                     i2l7563:
 18912                           
 18913                           ;Interrupt.c: 43: if (INTCON3bits.INT1IF == 1) INT1_isr();
 18914  002EDC  A0F0               	btfss	intcon3,0,c	;volatile
 18915  002EDE  D003               	goto	i2l7567
 18916  002EE0  EC21  F01F         	call	_INT1_isr	;wreg free
 18917  002EE4  D000               	goto	i2l7567
 18918  002EE6                     i2l7567:
 18919                           
 18920                           ;Interrupt.c: 44: if (INTCON3bits.INT2IF == 1) INT2_isr();
 18921  002EE6  A2F0               	btfss	intcon3,1,c	;volatile
 18922  002EE8  D003               	goto	i2l541
 18923  002EEA  EC1C  F01F         	call	_INT2_isr	;wreg free
 18924  002EEE  D000               	goto	i2l541
 18925  002EF0                     i2l541:
 18926  002EF0  C010  FFF5         	movff	??_chkisr+13,tablat
 18927  002EF4  C00F  FFF8         	movff	??_chkisr+12,tblptru
 18928  002EF8  C00E  FFF7         	movff	??_chkisr+11,tblptrh
 18929  002EFC  C00D  FFF6         	movff	??_chkisr+10,tblptrl
 18930  002F00  C00C  FFF4         	movff	??_chkisr+9,prodh
 18931  002F04  C00B  FFF3         	movff	??_chkisr+8,prodl
 18932  002F08  C00A  FFDA         	movff	??_chkisr+7,fsr2h
 18933  002F0C  C009  FFD9         	movff	??_chkisr+6,fsr2l
 18934  002F10  C008  FFE2         	movff	??_chkisr+5,fsr1h
 18935  002F14  C007  FFE1         	movff	??_chkisr+4,fsr1l
 18936  002F18  C006  FFEA         	movff	??_chkisr+3,fsr0h
 18937  002F1C  C005  FFE9         	movff	??_chkisr+2,fsr0l
 18938  002F20  C004  FFFB         	movff	??_chkisr+1,pclatu
 18939  002F24  C003  FFFA         	movff	??_chkisr,pclath
 18940  002F28  0011               	retfie		f
 18941  002F2A                     __end_of_chkisr:
 18942                           	opt stack 0
 18943                           pclatu	equ	0xFFB
 18944                           pclath	equ	0xFFA
 18945                           tblptru	equ	0xFF8
 18946                           tblptrh	equ	0xFF7
 18947                           tblptrl	equ	0xFF6
 18948                           tablat	equ	0xFF5
 18949                           prodh	equ	0xFF4
 18950                           prodl	equ	0xFF3
 18951                           intcon	equ	0xFF2
 18952                           intcon2	equ	0xFF1
 18953                           intcon3	equ	0xFF0
 18954                           postinc0	equ	0xFEE
 18955                           fsr0h	equ	0xFEA
 18956                           fsr0l	equ	0xFE9
 18957                           wreg	equ	0xFE8
 18958                           postdec1	equ	0xFE5
 18959                           fsr1h	equ	0xFE2
 18960                           fsr1l	equ	0xFE1
 18961                           indf2	equ	0xFDF
 18962                           postinc2	equ	0xFDE
 18963                           postdec2	equ	0xFDD
 18964                           fsr2h	equ	0xFDA
 18965                           fsr2l	equ	0xFD9
 18966                           status	equ	0xFD8
 18967                           
 18968 ;; *************** function _TIMER1_isr *****************
 18969 ;; Defined at:
 18970 ;;		line 48 in file "Interrupt.c"
 18971 ;; Parameters:    Size  Location     Type
 18972 ;;		None
 18973 ;; Auto vars:     Size  Location     Type
 18974 ;;		None
 18975 ;; Return value:  Size  Location     Type
 18976 ;;		None               void
 18977 ;; Registers used:
 18978 ;;		wreg, status,2
 18979 ;; Tracked objects:
 18980 ;;		On entry : 0/0
 18981 ;;		On exit  : 0/0
 18982 ;;		Unchanged: 0/0
 18983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18987 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18988 ;;Total ram usage:        0 bytes
 18989 ;; Hardware stack levels used:    1
 18990 ;; This function calls:
 18991 ;;		Nothing
 18992 ;; This function is called by:
 18993 ;;		_chkisr
 18994 ;; This function uses a non-reentrant model
 18995 ;;
 18996                           
 18997                           	psect	text119
 18998  003E04                     __ptext119:
 18999                           	opt stack 0
 19000  003E04                     _TIMER1_isr:
 19001                           	opt stack 19
 19002                           
 19003                           ;Interrupt.c: 50: Nec_state = 0;
 19004                           
 19005                           ;incstack = 0
 19006  003E04  0E00               	movlw	0
 19007  003E06  6E51               	movwf	_Nec_state,c
 19008                           
 19009                           ;Interrupt.c: 51: INTCON2bits.INTEDG0 = 0;
 19010  003E08  9CF1               	bcf	intcon2,6,c	;volatile
 19011                           
 19012                           ;Interrupt.c: 52: T1CONbits.TMR1ON = 0;
 19013  003E0A  90CD               	bcf	4045,0,c	;volatile
 19014                           
 19015                           ;Interrupt.c: 53: PIR1bits.TMR1IF = 0;
 19016  003E0C  909E               	bcf	3998,0,c	;volatile
 19017  003E0E  0012               	return		;funcret
 19018  003E10                     __end_of_TIMER1_isr:
 19019                           	opt stack 0
 19020                           pclatu	equ	0xFFB
 19021                           pclath	equ	0xFFA
 19022                           tblptru	equ	0xFF8
 19023                           tblptrh	equ	0xFF7
 19024                           tblptrl	equ	0xFF6
 19025                           tablat	equ	0xFF5
 19026                           prodh	equ	0xFF4
 19027                           prodl	equ	0xFF3
 19028                           intcon	equ	0xFF2
 19029                           intcon2	equ	0xFF1
 19030                           intcon3	equ	0xFF0
 19031                           postinc0	equ	0xFEE
 19032                           fsr0h	equ	0xFEA
 19033                           fsr0l	equ	0xFE9
 19034                           wreg	equ	0xFE8
 19035                           postdec1	equ	0xFE5
 19036                           fsr1h	equ	0xFE2
 19037                           fsr1l	equ	0xFE1
 19038                           indf2	equ	0xFDF
 19039                           postinc2	equ	0xFDE
 19040                           postdec2	equ	0xFDD
 19041                           fsr2h	equ	0xFDA
 19042                           fsr2l	equ	0xFD9
 19043                           status	equ	0xFD8
 19044                           
 19045 ;; *************** function _INT2_isr *****************
 19046 ;; Defined at:
 19047 ;;		line 146 in file "Interrupt.c"
 19048 ;; Parameters:    Size  Location     Type
 19049 ;;		None
 19050 ;; Auto vars:     Size  Location     Type
 19051 ;;		None
 19052 ;; Return value:  Size  Location     Type
 19053 ;;		None               void
 19054 ;; Registers used:
 19055 ;;		wreg, status,2
 19056 ;; Tracked objects:
 19057 ;;		On entry : 0/0
 19058 ;;		On exit  : 0/0
 19059 ;;		Unchanged: 0/0
 19060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19064 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19065 ;;Total ram usage:        0 bytes
 19066 ;; Hardware stack levels used:    1
 19067 ;; This function calls:
 19068 ;;		Nothing
 19069 ;; This function is called by:
 19070 ;;		_chkisr
 19071 ;; This function uses a non-reentrant model
 19072 ;;
 19073                           
 19074                           	psect	text120
 19075  003E38                     __ptext120:
 19076                           	opt stack 0
 19077  003E38                     _INT2_isr:
 19078                           	opt stack 19
 19079                           
 19080                           ;Interrupt.c: 149: INTCON3bits.INT2IF = 0;
 19081                           
 19082                           ;incstack = 0
 19083  003E38  92F0               	bcf	intcon3,1,c	;volatile
 19084                           
 19085                           ;Interrupt.c: 150: INT2_flag =1;
 19086  003E3A  0E01               	movlw	1
 19087  003E3C  0100               	movlb	0	; () banked
 19088  003E3E  6FF7               	movwf	_INT2_flag& (0+255),b
 19089                           
 19090                           ; BSR set to: 0
 19091  003E40  0012               	return		;funcret
 19092  003E42                     __end_of_INT2_isr:
 19093                           	opt stack 0
 19094                           pclatu	equ	0xFFB
 19095                           pclath	equ	0xFFA
 19096                           tblptru	equ	0xFF8
 19097                           tblptrh	equ	0xFF7
 19098                           tblptrl	equ	0xFF6
 19099                           tablat	equ	0xFF5
 19100                           prodh	equ	0xFF4
 19101                           prodl	equ	0xFF3
 19102                           intcon	equ	0xFF2
 19103                           intcon2	equ	0xFF1
 19104                           intcon3	equ	0xFF0
 19105                           postinc0	equ	0xFEE
 19106                           fsr0h	equ	0xFEA
 19107                           fsr0l	equ	0xFE9
 19108                           wreg	equ	0xFE8
 19109                           postdec1	equ	0xFE5
 19110                           fsr1h	equ	0xFE2
 19111                           fsr1l	equ	0xFE1
 19112                           indf2	equ	0xFDF
 19113                           postinc2	equ	0xFDE
 19114                           postdec2	equ	0xFDD
 19115                           fsr2h	equ	0xFDA
 19116                           fsr2l	equ	0xFD9
 19117                           status	equ	0xFD8
 19118                           
 19119 ;; *************** function _INT1_isr *****************
 19120 ;; Defined at:
 19121 ;;		line 139 in file "Interrupt.c"
 19122 ;; Parameters:    Size  Location     Type
 19123 ;;		None
 19124 ;; Auto vars:     Size  Location     Type
 19125 ;;		None
 19126 ;; Return value:  Size  Location     Type
 19127 ;;		None               void
 19128 ;; Registers used:
 19129 ;;		wreg, status,2
 19130 ;; Tracked objects:
 19131 ;;		On entry : 0/0
 19132 ;;		On exit  : 0/0
 19133 ;;		Unchanged: 0/0
 19134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19139 ;;Total ram usage:        0 bytes
 19140 ;; Hardware stack levels used:    1
 19141 ;; This function calls:
 19142 ;;		Nothing
 19143 ;; This function is called by:
 19144 ;;		_chkisr
 19145 ;; This function uses a non-reentrant model
 19146 ;;
 19147                           
 19148                           	psect	text121
 19149  003E42                     __ptext121:
 19150                           	opt stack 0
 19151  003E42                     _INT1_isr:
 19152                           	opt stack 19
 19153                           
 19154                           ;Interrupt.c: 142: INTCON3bits.INT1IF = 0;
 19155                           
 19156                           ; BSR set to: 0
 19157                           ;incstack = 0
 19158  003E42  90F0               	bcf	intcon3,0,c	;volatile
 19159                           
 19160                           ;Interrupt.c: 143: INT1_flag = 1;
 19161  003E44  0E01               	movlw	1
 19162  003E46  0100               	movlb	0	; () banked
 19163  003E48  6FF6               	movwf	_INT1_flag& (0+255),b
 19164                           
 19165                           ; BSR set to: 0
 19166  003E4A  0012               	return		;funcret
 19167  003E4C                     __end_of_INT1_isr:
 19168                           	opt stack 0
 19169                           pclatu	equ	0xFFB
 19170                           pclath	equ	0xFFA
 19171                           tblptru	equ	0xFF8
 19172                           tblptrh	equ	0xFF7
 19173                           tblptrl	equ	0xFF6
 19174                           tablat	equ	0xFF5
 19175                           prodh	equ	0xFF4
 19176                           prodl	equ	0xFF3
 19177                           intcon	equ	0xFF2
 19178                           intcon2	equ	0xFF1
 19179                           intcon3	equ	0xFF0
 19180                           postinc0	equ	0xFEE
 19181                           fsr0h	equ	0xFEA
 19182                           fsr0l	equ	0xFE9
 19183                           wreg	equ	0xFE8
 19184                           postdec1	equ	0xFE5
 19185                           fsr1h	equ	0xFE2
 19186                           fsr1l	equ	0xFE1
 19187                           indf2	equ	0xFDF
 19188                           postinc2	equ	0xFDE
 19189                           postdec2	equ	0xFDD
 19190                           fsr2h	equ	0xFDA
 19191                           fsr2l	equ	0xFD9
 19192                           status	equ	0xFD8
 19193                           
 19194 ;; *************** function _INT0_isr *****************
 19195 ;; Defined at:
 19196 ;;		line 62 in file "Interrupt.c"
 19197 ;; Parameters:    Size  Location     Type
 19198 ;;		None
 19199 ;; Auto vars:     Size  Location     Type
 19200 ;;		None
 19201 ;; Return value:  Size  Location     Type
 19202 ;;		None               void
 19203 ;; Registers used:
 19204 ;;		wreg, status,2, status,0, cstack
 19205 ;; Tracked objects:
 19206 ;;		On entry : 0/0
 19207 ;;		On exit  : 0/0
 19208 ;;		Unchanged: 0/0
 19209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19212 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19213 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19214 ;;Total ram usage:        2 bytes
 19215 ;; Hardware stack levels used:    1
 19216 ;; Hardware stack levels required when called:    1
 19217 ;; This function calls:
 19218 ;;		_force_nec_state0
 19219 ;; This function is called by:
 19220 ;;		_chkisr
 19221 ;; This function uses a non-reentrant model
 19222 ;;
 19223                           
 19224                           	psect	text122
 19225  0015E6                     __ptext122:
 19226                           	opt stack 0
 19227  0015E6                     _INT0_isr:
 19228                           	opt stack 18
 19229                           
 19230                           ;Interrupt.c: 64: INTCONbits.INT0IF = 0;
 19231                           
 19232                           ; BSR set to: 0
 19233                           ;incstack = 0
 19234  0015E6  92F2               	bcf	intcon,1,c	;volatile
 19235                           
 19236                           ;Interrupt.c: 65: if (Nec_state != 0)
 19237  0015E8  5051               	movf	_Nec_state,w,c
 19238  0015EA  B4D8               	btfsc	status,2,c
 19239  0015EC  D0AE               	goto	i2l7377
 19240                           
 19241                           ;Interrupt.c: 66: {
 19242                           ;Interrupt.c: 67: Time_Elapsed = (TMR1H << 8) | TMR1L;
 19243  0015EE  50CE               	movf	4046,w,c	;volatile
 19244  0015F0  CFCF F001          	movff	4047,??_INT0_isr	;volatile
 19245  0015F4  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
 19246  0015F6  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
 19247  0015FA  6A01               	clrf	??_INT0_isr,c
 19248  0015FC  1001               	iorwf	??_INT0_isr,w,c
 19249  0015FE  6E4A               	movwf	_Time_Elapsed,c
 19250  001600  5002               	movf	??_INT0_isr+1,w,c
 19251  001602  6E4B               	movwf	_Time_Elapsed+1,c
 19252                           
 19253                           ;Interrupt.c: 68: TMR1H = 0;
 19254  001604  0E00               	movlw	0
 19255  001606  6ECF               	movwf	4047,c	;volatile
 19256                           
 19257                           ;Interrupt.c: 69: TMR1L = 0;
 19258  001608  0E00               	movlw	0
 19259  00160A  6ECE               	movwf	4046,c	;volatile
 19260                           
 19261                           ;Interrupt.c: 70: }
 19262                           ;Interrupt.c: 72: switch(Nec_state)
 19263  00160C  D09E               	goto	i2l7377
 19264  00160E                     i2l7309:
 19265                           
 19266                           ;Interrupt.c: 75: {
 19267                           ;Interrupt.c: 77: TMR1H = 0;
 19268  00160E  0E00               	movlw	0
 19269  001610  6ECF               	movwf	4047,c	;volatile
 19270                           
 19271                           ;Interrupt.c: 78: TMR1L = 0;
 19272  001612  0E00               	movlw	0
 19273  001614  6ECE               	movwf	4046,c	;volatile
 19274                           
 19275                           ;Interrupt.c: 79: PIR1bits.TMR1IF = 0;
 19276  001616  909E               	bcf	3998,0,c	;volatile
 19277                           
 19278                           ;Interrupt.c: 80: T1CON= 0x90;
 19279  001618  0E90               	movlw	144
 19280  00161A  6ECD               	movwf	4045,c	;volatile
 19281                           
 19282                           ;Interrupt.c: 81: T1CONbits.TMR1ON = 1;
 19283  00161C  80CD               	bsf	4045,0,c	;volatile
 19284                           
 19285                           ;Interrupt.c: 82: bit_count = 0;
 19286  00161E  0E00               	movlw	0
 19287  001620  6E59               	movwf	_bit_count,c
 19288                           
 19289                           ;Interrupt.c: 83: Nec_code = 0;
 19290  001622  0E00               	movlw	0
 19291  001624  0100               	movlb	0	; () banked
 19292  001626  6FE3               	movwf	_Nec_code& (0+255),b
 19293  001628  0E00               	movlw	0
 19294  00162A  6FE4               	movwf	(_Nec_code+1)& (0+255),b
 19295  00162C  0E00               	movlw	0
 19296  00162E  6FE5               	movwf	(_Nec_code+2)& (0+255),b
 19297  001630  0E00               	movlw	0
 19298  001632  6FE6               	movwf	(_Nec_code+3)& (0+255),b
 19299                           
 19300                           ;Interrupt.c: 84: Nec_state = 1;
 19301  001634  0E01               	movlw	1
 19302  001636  6E51               	movwf	_Nec_state,c
 19303  001638  D086               	goto	i2l7371
 19304                           
 19305                           ; BSR set to: 0
 19306                           ;Interrupt.c: 86: return;
 19307                           
 19308                           ; BSR set to: 0
 19309                           ;Interrupt.c: 85: INTCON2bits.INTEDG0 = 1;
 19310  00163A  D098               	goto	i2l553
 19311  00163C                     i2l7319:
 19312                           
 19313                           ;Interrupt.c: 90: {
 19314                           ;Interrupt.c: 91: if(Time_Elapsed > 8500 && Time_Elapsed < 9500) Nec_state = 2;
 19315  00163C  0E35               	movlw	53
 19316  00163E  5C4A               	subwf	_Time_Elapsed,w,c
 19317  001640  0E21               	movlw	33
 19318  001642  584B               	subwfb	_Time_Elapsed+1,w,c
 19319  001644  A0D8               	btfss	status,0,c
 19320  001646  D009               	goto	i2l7325
 19321  001648  0E1C               	movlw	28
 19322  00164A  5C4A               	subwf	_Time_Elapsed,w,c
 19323  00164C  0E25               	movlw	37
 19324  00164E  584B               	subwfb	_Time_Elapsed+1,w,c
 19325  001650  B0D8               	btfsc	status,0,c
 19326  001652  D003               	goto	i2l7325
 19327  001654  0E02               	movlw	2
 19328  001656  6E51               	movwf	_Nec_state,c
 19329  001658  D02A               	goto	i2l7351
 19330  00165A                     i2l7325:
 19331                           
 19332                           ;Interrupt.c: 92: else force_nec_state0();
 19333  00165A  EC36  F01F         	call	_force_nec_state0	;wreg free
 19334  00165E  D027               	goto	i2l7351
 19335  001660  D026               	goto	i2l7351
 19336                           
 19337                           ;Interrupt.c: 94: return;
 19338                           
 19339                           ;Interrupt.c: 93: INTCON2bits.INTEDG0 = 0;
 19340  001662  D084               	goto	i2l553
 19341  001664                     i2l7331:
 19342                           
 19343                           ;Interrupt.c: 98: {
 19344                           ;Interrupt.c: 99: if(Time_Elapsed > 4000 && Time_Elapsed < 5000) Nec_state = 3;
 19345  001664  0EA1               	movlw	161
 19346  001666  5C4A               	subwf	_Time_Elapsed,w,c
 19347  001668  0E0F               	movlw	15
 19348  00166A  584B               	subwfb	_Time_Elapsed+1,w,c
 19349  00166C  A0D8               	btfss	status,0,c
 19350  00166E  D009               	goto	i2l7337
 19351  001670  0E88               	movlw	136
 19352  001672  5C4A               	subwf	_Time_Elapsed,w,c
 19353  001674  0E13               	movlw	19
 19354  001676  584B               	subwfb	_Time_Elapsed+1,w,c
 19355  001678  B0D8               	btfsc	status,0,c
 19356  00167A  D003               	goto	i2l7337
 19357  00167C  0E03               	movlw	3
 19358  00167E  6E51               	movwf	_Nec_state,c
 19359  001680  D062               	goto	i2l7371
 19360  001682                     i2l7337:
 19361                           
 19362                           ;Interrupt.c: 100: else force_nec_state0();
 19363  001682  EC36  F01F         	call	_force_nec_state0	;wreg free
 19364  001686  D05F               	goto	i2l7371
 19365  001688  D05E               	goto	i2l7371
 19366                           
 19367                           ;Interrupt.c: 102: return;
 19368                           
 19369                           ;Interrupt.c: 101: INTCON2bits.INTEDG0 = 1;
 19370  00168A  D070               	goto	i2l553
 19371  00168C                     i2l7343:
 19372                           
 19373                           ;Interrupt.c: 106: {
 19374                           ;Interrupt.c: 107: if(Time_Elapsed >= 400 && Time_Elapsed <= 700) Nec_state = 4;
 19375  00168C  0E90               	movlw	144
 19376  00168E  5C4A               	subwf	_Time_Elapsed,w,c
 19377  001690  0E01               	movlw	1
 19378  001692  584B               	subwfb	_Time_Elapsed+1,w,c
 19379  001694  A0D8               	btfss	status,0,c
 19380  001696  D008               	goto	i2l7349
 19381  001698  0EBD               	movlw	189
 19382  00169A  5C4A               	subwf	_Time_Elapsed,w,c
 19383  00169C  0E02               	movlw	2
 19384  00169E  584B               	subwfb	_Time_Elapsed+1,w,c
 19385  0016A0  B0D8               	btfsc	status,0,c
 19386  0016A2  D002               	goto	i2l7349
 19387  0016A4  0E04               	movlw	4
 19388  0016A6  D7D7               	goto	L12
 19389  0016A8                     i2l7349:
 19390                           
 19391                           ;Interrupt.c: 108: else force_nec_state0();
 19392  0016A8  EC36  F01F         	call	_force_nec_state0	;wreg free
 19393  0016AC  D000               	goto	i2l7351
 19394  0016AE                     i2l7351:
 19395                           
 19396                           ;Interrupt.c: 109: INTCON2bits.INTEDG0 = 0;
 19397  0016AE  9CF1               	bcf	intcon2,6,c	;volatile
 19398                           
 19399                           ;Interrupt.c: 110: return;
 19400  0016B0  D05D               	goto	i2l553
 19401  0016B2                     i2l7355:
 19402                           
 19403                           ;Interrupt.c: 114: {
 19404                           ;Interrupt.c: 115: if(Time_Elapsed > 400 && Time_Elapsed < 1800)
 19405  0016B2  0E91               	movlw	145
 19406  0016B4  5C4A               	subwf	_Time_Elapsed,w,c
 19407  0016B6  0E01               	movlw	1
 19408  0016B8  584B               	subwfb	_Time_Elapsed+1,w,c
 19409  0016BA  A0D8               	btfss	status,0,c
 19410  0016BC  D041               	goto	i2l7369
 19411  0016BE  0E08               	movlw	8
 19412  0016C0  5C4A               	subwf	_Time_Elapsed,w,c
 19413  0016C2  0E07               	movlw	7
 19414  0016C4  584B               	subwfb	_Time_Elapsed+1,w,c
 19415  0016C6  B0D8               	btfsc	status,0,c
 19416  0016C8  D03B               	goto	i2l7369
 19417                           
 19418                           ;Interrupt.c: 116: {
 19419                           ;Interrupt.c: 117: Nec_code = Nec_code << 1;
 19420  0016CA  90D8               	bcf	status,0,c
 19421  0016CC  0100               	movlb	0	; () banked
 19422  0016CE  35E3               	rlcf	_Nec_code& (0+255),w,b
 19423  0016D0  0100               	movlb	0	; () banked
 19424  0016D2  6FE3               	movwf	_Nec_code& (0+255),b
 19425  0016D4  0100               	movlb	0	; () banked
 19426  0016D6  35E4               	rlcf	(_Nec_code+1)& (0+255),w,b
 19427  0016D8  0100               	movlb	0	; () banked
 19428  0016DA  6FE4               	movwf	(_Nec_code+1)& (0+255),b
 19429  0016DC  0100               	movlb	0	; () banked
 19430  0016DE  35E5               	rlcf	(_Nec_code+2)& (0+255),w,b
 19431  0016E0  0100               	movlb	0	; () banked
 19432  0016E2  6FE5               	movwf	(_Nec_code+2)& (0+255),b
 19433  0016E4  0100               	movlb	0	; () banked
 19434  0016E6  35E6               	rlcf	(_Nec_code+3)& (0+255),w,b
 19435  0016E8  0100               	movlb	0	; () banked
 19436  0016EA  6FE6               	movwf	(_Nec_code+3)& (0+255),b
 19437                           
 19438                           ;Interrupt.c: 118: if(Time_Elapsed > 1000)
 19439  0016EC  0EE9               	movlw	233
 19440  0016EE  5C4A               	subwf	_Time_Elapsed,w,c
 19441  0016F0  0E03               	movlw	3
 19442  0016F2  584B               	subwfb	_Time_Elapsed+1,w,c
 19443  0016F4  A0D8               	btfss	status,0,c
 19444  0016F6  D014               	goto	i2l565
 19445                           
 19446                           ; BSR set to: 0
 19447                           ;Interrupt.c: 119: {
 19448                           ;Interrupt.c: 120: Nec_code = Nec_code +1;
 19449  0016F8  0E01               	movlw	1
 19450  0016FA  0100               	movlb	0	; () banked
 19451  0016FC  25E3               	addwf	_Nec_code& (0+255),w,b
 19452  0016FE  0100               	movlb	0	; () banked
 19453  001700  6FE3               	movwf	_Nec_code& (0+255),b
 19454  001702  0E00               	movlw	0
 19455  001704  0100               	movlb	0	; () banked
 19456  001706  21E4               	addwfc	(_Nec_code+1)& (0+255),w,b
 19457  001708  0100               	movlb	0	; () banked
 19458  00170A  6FE4               	movwf	(_Nec_code+1)& (0+255),b
 19459  00170C  0E00               	movlw	0
 19460  00170E  0100               	movlb	0	; () banked
 19461  001710  21E5               	addwfc	(_Nec_code+2)& (0+255),w,b
 19462  001712  0100               	movlb	0	; () banked
 19463  001714  6FE5               	movwf	(_Nec_code+2)& (0+255),b
 19464  001716  0E00               	movlw	0
 19465  001718  0100               	movlb	0	; () banked
 19466  00171A  21E6               	addwfc	(_Nec_code+3)& (0+255),w,b
 19467  00171C  0100               	movlb	0	; () banked
 19468  00171E  6FE6               	movwf	(_Nec_code+3)& (0+255),b
 19469  001720                     i2l565:
 19470                           
 19471                           ; BSR set to: 0
 19472                           ;Interrupt.c: 121: }
 19473                           ;Interrupt.c: 122: bit_count = bit_count + 1;
 19474  001720  2859               	incf	_bit_count,w,c
 19475  001722  6E59               	movwf	_bit_count,c
 19476                           
 19477                           ;Interrupt.c: 123: if (bit_count > 31)
 19478  001724  0E1F               	movlw	31
 19479  001726  6459               	cpfsgt	_bit_count,c
 19480  001728  D7A9               	goto	L13
 19481                           
 19482                           ; BSR set to: 0
 19483                           ;Interrupt.c: 124: {
 19484                           ;Interrupt.c: 125: nec_ok = 1;
 19485  00172A  0E00               	movlw	0
 19486  00172C  0100               	movlb	0	; () banked
 19487  00172E  6FF3               	movwf	(_nec_ok+1)& (0+255),b
 19488  001730  0E01               	movlw	1
 19489  001732  6FF2               	movwf	_nec_ok& (0+255),b
 19490                           
 19491                           ; BSR set to: 0
 19492                           ;Interrupt.c: 126: Nec_code1 = (char) ((Nec_code >> 8));
 19493  001734  C0E4  F0FB         	movff	_Nec_code+1,_Nec_code1
 19494                           
 19495                           ; BSR set to: 0
 19496                           ;Interrupt.c: 127: INTCONbits.INT0IE =0;
 19497  001738  98F2               	bcf	intcon,4,c	;volatile
 19498                           
 19499                           ;Interrupt.c: 128: Nec_state = 0;
 19500  00173A  0E00               	movlw	0
 19501  00173C  6E51               	movwf	_Nec_state,c
 19502  00173E  D79E               	goto	L13
 19503  001740                     i2l7369:
 19504                           
 19505                           ;Interrupt.c: 132: else force_nec_state0();
 19506  001740  EC36  F01F         	call	_force_nec_state0	;wreg free
 19507  001744  D000               	goto	i2l7371
 19508  001746                     i2l7371:
 19509                           
 19510                           ;Interrupt.c: 133: INTCON2bits.INTEDG0 = 1;
 19511  001746  8CF1               	bsf	intcon2,6,c	;volatile
 19512                           
 19513                           ;Interrupt.c: 135: }
 19514                           ;Interrupt.c: 136: }
 19515                           
 19516                           ;Interrupt.c: 134: return;
 19517  001748  D011               	goto	i2l553
 19518  00174A                     i2l7377:
 19519  00174A  5051               	movf	_Nec_state,w,c
 19520                           
 19521                           ; Switch size 1, requested type "space"
 19522                           ; Number of cases is 5, Range of values is 0 to 4
 19523                           ; switch strategies available:
 19524                           ; Name         Instructions Cycles
 19525                           ; simple_byte           16     9 (average)
 19526                           ;	Chosen strategy is simple_byte
 19527  00174C  0A00               	xorlw	0	; case 0
 19528  00174E  B4D8               	btfsc	status,2,c
 19529  001750  D75E               	goto	i2l7309
 19530  001752  0A01               	xorlw	1	; case 1
 19531  001754  B4D8               	btfsc	status,2,c
 19532  001756  D772               	goto	i2l7319
 19533  001758  0A03               	xorlw	3	; case 2
 19534  00175A  B4D8               	btfsc	status,2,c
 19535  00175C  D783               	goto	i2l7331
 19536  00175E  0A01               	xorlw	1	; case 3
 19537  001760  B4D8               	btfsc	status,2,c
 19538  001762  D794               	goto	i2l7343
 19539  001764  0A07               	xorlw	7	; case 4
 19540  001766  B4D8               	btfsc	status,2,c
 19541  001768  D7A4               	goto	i2l7355
 19542  00176A  D000               	goto	i2l553
 19543  00176C                     i2l553:
 19544  00176C  0012               	return		;funcret
 19545  00176E                     __end_of_INT0_isr:
 19546                           	opt stack 0
 19547                           pclatu	equ	0xFFB
 19548                           pclath	equ	0xFFA
 19549                           tblptru	equ	0xFF8
 19550                           tblptrh	equ	0xFF7
 19551                           tblptrl	equ	0xFF6
 19552                           tablat	equ	0xFF5
 19553                           prodh	equ	0xFF4
 19554                           prodl	equ	0xFF3
 19555                           intcon	equ	0xFF2
 19556                           intcon2	equ	0xFF1
 19557                           intcon3	equ	0xFF0
 19558                           postinc0	equ	0xFEE
 19559                           fsr0h	equ	0xFEA
 19560                           fsr0l	equ	0xFE9
 19561                           wreg	equ	0xFE8
 19562                           postdec1	equ	0xFE5
 19563                           fsr1h	equ	0xFE2
 19564                           fsr1l	equ	0xFE1
 19565                           indf2	equ	0xFDF
 19566                           postinc2	equ	0xFDE
 19567                           postdec2	equ	0xFDD
 19568                           fsr2h	equ	0xFDA
 19569                           fsr2l	equ	0xFD9
 19570                           status	equ	0xFD8
 19571                           
 19572 ;; *************** function _force_nec_state0 *****************
 19573 ;; Defined at:
 19574 ;;		line 56 in file "Interrupt.c"
 19575 ;; Parameters:    Size  Location     Type
 19576 ;;		None
 19577 ;; Auto vars:     Size  Location     Type
 19578 ;;		None
 19579 ;; Return value:  Size  Location     Type
 19580 ;;		None               void
 19581 ;; Registers used:
 19582 ;;		wreg, status,2
 19583 ;; Tracked objects:
 19584 ;;		On entry : 0/0
 19585 ;;		On exit  : 0/0
 19586 ;;		Unchanged: 0/0
 19587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19592 ;;Total ram usage:        0 bytes
 19593 ;; Hardware stack levels used:    1
 19594 ;; This function calls:
 19595 ;;		Nothing
 19596 ;; This function is called by:
 19597 ;;		_INT0_isr
 19598 ;; This function uses a non-reentrant model
 19599 ;;
 19600                           
 19601                           	psect	text123
 19602  003E6C                     __ptext123:
 19603                           	opt stack 0
 19604  003E6C                     _force_nec_state0:
 19605                           	opt stack 18
 19606                           
 19607                           ;Interrupt.c: 58: Nec_state=0;
 19608                           
 19609                           ;incstack = 0
 19610  003E6C  0E00               	movlw	0
 19611  003E6E  6E51               	movwf	_Nec_state,c
 19612                           
 19613                           ;Interrupt.c: 59: T1CONbits.TMR1ON = 0;
 19614  003E70  90CD               	bcf	4045,0,c	;volatile
 19615  003E72  0012               	return		;funcret
 19616  003E74                     __end_of_force_nec_state0:
 19617                           	opt stack 0
 19618                           pclatu	equ	0xFFB
 19619                           pclath	equ	0xFFA
 19620                           tblptru	equ	0xFF8
 19621                           tblptrh	equ	0xFF7
 19622                           tblptrl	equ	0xFF6
 19623                           tablat	equ	0xFF5
 19624                           prodh	equ	0xFF4
 19625                           prodl	equ	0xFF3
 19626                           intcon	equ	0xFF2
 19627                           intcon2	equ	0xFF1
 19628                           intcon3	equ	0xFF0
 19629                           postinc0	equ	0xFEE
 19630                           fsr0h	equ	0xFEA
 19631                           fsr0l	equ	0xFE9
 19632                           wreg	equ	0xFE8
 19633                           postdec1	equ	0xFE5
 19634                           fsr1h	equ	0xFE2
 19635                           fsr1l	equ	0xFE1
 19636                           indf2	equ	0xFDF
 19637                           postinc2	equ	0xFDE
 19638                           postdec2	equ	0xFDD
 19639                           fsr2h	equ	0xFDA
 19640                           fsr2l	equ	0xFD9
 19641                           status	equ	0xFD8
 19642                           pclatu	equ	0xFFB
 19643                           pclath	equ	0xFFA
 19644                           tblptru	equ	0xFF8
 19645                           tblptrh	equ	0xFF7
 19646                           tblptrl	equ	0xFF6
 19647                           tablat	equ	0xFF5
 19648                           prodh	equ	0xFF4
 19649                           prodl	equ	0xFF3
 19650                           intcon	equ	0xFF2
 19651                           intcon2	equ	0xFF1
 19652                           intcon3	equ	0xFF0
 19653                           postinc0	equ	0xFEE
 19654                           fsr0h	equ	0xFEA
 19655                           fsr0l	equ	0xFE9
 19656                           wreg	equ	0xFE8
 19657                           postdec1	equ	0xFE5
 19658                           fsr1h	equ	0xFE2
 19659                           fsr1l	equ	0xFE1
 19660                           indf2	equ	0xFDF
 19661                           postinc2	equ	0xFDE
 19662                           postdec2	equ	0xFDD
 19663                           fsr2h	equ	0xFDA
 19664                           fsr2l	equ	0xFD9
 19665                           status	equ	0xFD8
 19666                           
 19667                           	psect	rparam
 19668  0000                     pclatu	equ	0xFFB
 19669                           pclath	equ	0xFFA
 19670                           tblptru	equ	0xFF8
 19671                           tblptrh	equ	0xFF7
 19672                           tblptrl	equ	0xFF6
 19673                           tablat	equ	0xFF5
 19674                           prodh	equ	0xFF4
 19675                           prodl	equ	0xFF3
 19676                           intcon	equ	0xFF2
 19677                           intcon2	equ	0xFF1
 19678                           intcon3	equ	0xFF0
 19679                           postinc0	equ	0xFEE
 19680                           fsr0h	equ	0xFEA
 19681                           fsr0l	equ	0xFE9
 19682                           wreg	equ	0xFE8
 19683                           postdec1	equ	0xFE5
 19684                           fsr1h	equ	0xFE2
 19685                           fsr1l	equ	0xFE1
 19686                           indf2	equ	0xFDF
 19687                           postinc2	equ	0xFDE
 19688                           postdec2	equ	0xFDD
 19689                           fsr2h	equ	0xFDA
 19690                           fsr2l	equ	0xFD9
 19691                           status	equ	0xFD8


Data Sizes:
    Strings     326
    Constant    493
    Data        152
    BSS         69
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     67     111
    BANK0           128      3     128
    BANK1           256     15      67
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_date(BANK0[9]), setup_time(BANK0[9]), setup_heater_set_text(BANK0[5]), 
		 -> setup_alarm_time(BANK0[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK0[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Heater_SW_Txt(BANK0[4]), Heater_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK0[9]), date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_date(BANK0[9]), setup_time(BANK0[9]), setup_heater_set_text(BANK0[5]), 
		 -> setup_alarm_time(BANK0[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK0[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Heater_SW_Txt(BANK0[4]), Heater_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK0[9]), date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_34(CODE[5]), STR_33(CODE[5]), STR_32(CODE[12]), STR_31(CODE[19]), 
		 -> STR_30(CODE[16]), STR_29(CODE[10]), STR_28(CODE[11]), STR_27(CODE[19]), 
		 -> STR_25(CODE[5]), STR_24(CODE[8]), STR_23(CODE[8]), STR_22(CODE[18]), 
		 -> STR_21(CODE[4]), STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), 
		 -> STR_17(CODE[4]), STR_16(CODE[5]), STR_15(CODE[3]), STR_14(CODE[3]), 
		 -> STR_13(CODE[7]), STR_12(CODE[13]), STR_11(CODE[9]), STR_10(CODE[11]), 
		 -> STR_9(CODE[5]), STR_8(CODE[5]), STR_7(CODE[2]), STR_6(CODE[3]), 
		 -> STR_5(CODE[13]), STR_4(CODE[19]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Heater_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Heater_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_35(CODE[22]), STR_26(CODE[11]), STR_3(CODE[20]), STR_2(CODE[21]), 
		 -> STR_1(CODE[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 9
		 -> NULL(NULL[0]), setup_date(BANK0[9]), setup_time(BANK0[9]), setup_heater_set_text(BANK0[5]), 
		 -> setup_alarm_time(BANK0[9]), RPM_Txt(BANK0[5]), Volt_Txt(BANK0[6]), DC_Txt(BANK0[4]), 
		 -> RTC_ALARM_Txt(BANK0[2]), Heater_SW_Txt(BANK0[4]), Heater_Set_Temp_Txt(BANK0[5]), Alarm_SW_Txt(BANK0[4]), 
		 -> alarm_time(BANK0[9]), date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), 
		 -> tempC(BANK0[4]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), Heater_SW_Txt(BANK0[4]), Alarm_SW_Txt(BANK0[4]), 

    txt	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _read_volt->___ftmul
    ___awtoft->___ftpack
    _Update_Screen->_drawtext
    _Test_Alarm->_do_update_pwm
    _DS3231_Turn_On_Alarm->_DS3231_Init
    _DS3231_Turn_Off_Alarm->_DS3231_Init
    _DS3231_Init->_I2C_Write_Address_Read_One_Byte
    _I2C_Write_Address_Write_One_Byte->_I2C_Write
    _I2C_Write_Address_Read_One_Byte->_I2C_Read
    _Monitor_Heater->_do_update_pwm
    _Turn_On_Fan->_do_update_pwm
    _Initialize_Setup_Time_Screen->_drawtext
    _Go_Prev_Field->_Update_Setup_Screen_Cursor_Backward
    _Go_Next_Field->_Update_Setup_Screen_Cursor_Forward
    _DS3231_Write_Time->_dec_2_bcd
    _Update_Setup_Time_Screen->_drawtext
    _Initialize_Setup_Heater_Screen->_drawtext
    _Update_Setup_Heater_Screen->_drawtext
    _check_for_button_input->_printf
    _Initialize_Setup_Alarm_Time_Screen->_drawtext
    _Go_Prev_Alarm_Field->_Update_Setup_Screen_Cursor_Backward
    _Update_Setup_Screen_Cursor_Backward->_fillRect
    _Go_Next_Alarm_Field->_Update_Setup_Screen_Cursor_Forward
    _Update_Setup_Screen_Cursor_Forward->_fillRect
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawCircle->_drawPixel
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _DS3231_Write_Alarm_Time->_dec_2_bcd
    _dec_2_bcd->___awmod
    _DS3231_Read_Time->_I2C_Read
    _DS3231_Read_Alarm_Time->_I2C_Read
    _Do_Beep_Good->_do_update_pwm
    _Do_Beep_Bad->_do_update_pwm
    _do_update_pwm->___ftdiv
    _do_update_pwm->___fttol
    ___lbtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___awtoft
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _Update_Setup_Alarm_Time_Screen->_drawtext
    _printf->___lwmod
    ___lwmod->___lwdiv
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite
    ___awmod->___fttol
    ___awdiv->___awmod
    _Do_Init->_DS1621_Init
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_Monitor_Heater
    _DS3231_Write_Time->_dec_2_bcd
    _Do_Setup_Heater_Temp->_Update_Setup_Heater_Screen
    _Increase_Heater_Temp->_Update_Setup_Heater_Screen
    _Decrease_Heater_Temp->_Update_Setup_Heater_Screen
    _DS3231_Write_Alarm_Time->_dec_2_bcd

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    _get_RPM->___awdiv
    _Update_Screen->___awdiv
    _Set_RPM_RGB->___awdiv
    _Set_DC_RGB->___awdiv
    _Initialize_Setup_Time_Screen->_drawtext
    _Do_Save_New_Time->_DS3231_Write_Time
    _DS3231_Write_Time->_dec_2_bcd
    _Update_Setup_Time_Screen->___awdiv
    _Initialize_Setup_Heater_Screen->_drawtext
    _Update_Setup_Heater_Screen->___awdiv
    _Initialize_Setup_Alarm_Time_Screen->_drawtext
    _Do_Save_New_Alarm_Time->_DS3231_Write_Alarm_Time
    _Initialize_Screen->_drawtext
    _DS3231_Write_Alarm_Time->_dec_2_bcd
    _dec_2_bcd->___awdiv
    _Update_Setup_Alarm_Time_Screen->___awdiv

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 1152788
                                             13 BANK1      2     2      0
                   _DS1621_Read_Temp
             _DS3231_Read_Alarm_Time
                   _DS3231_Read_Time
              _DS3231_Turn_Off_Alarm
                        _Do_Beep_Bad
                       _Do_Beep_Good
                            _Do_Init
                _Do_Setup_Alarm_Time
               _Do_Setup_Heater_Temp
                      _Do_Setup_Time
                  _Initialize_Screen
                     _Monitor_Heater
                         _Set_DC_RGB
                        _Set_RPM_RGB
                         _Test_Alarm
                      _Toggle_Heater
                      _Update_Screen
                            ___awdiv
                             ___wmul
             _check_for_button_input
                            _get_RPM
                             _printf
                          _read_volt
 ---------------------------------------------------------------------------------
 (1) _read_volt                                            8     5      3    5523
                                             43 COMRAM     8     5      3
                           ___awtoft
                            ___ftmul
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (2) _get_full_ADC                                         6     4      2      23
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2266
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              4     2      2    5001
                                             64 COMRAM     2     0      2
                                              0 BANK0      2     2      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Update_Screen                                        5     5      0   48315
                                              0 BANK0      2     2      0
                                              8 BANK1      3     3      0
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _Toggle_Heater                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Test_Alarm                                           0     0      0   17927
               _Activate_Buzzer_4KHz
              _DS3231_Turn_Off_Alarm
               _DS3231_Turn_On_Alarm
                  _Deactivate_Buzzer
                      _Set_RGB_Color
                             ___ftge
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     242
                                             16 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) _Set_RGB_Color                                        1     1      0      22
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _DS3231_Turn_On_Alarm                                 5     5      0    4432
                                             26 COMRAM     5     5      0
                        _DS3231_Init
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (2) _DS3231_Turn_Off_Alarm                                5     5      0    4432
                                             26 COMRAM     5     5      0
                        _DS3231_Init
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (3) _DS3231_Init                                          4     4      0    2380
                                             22 COMRAM     4     4      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
    _I2C_Write_Address_Read_One_Byte
   _I2C_Write_Address_Write_One_Byte
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Address_Write_One_Byte                     3     1      2     876
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Address_Read_One_Byte                      3     2      1     783
                                             19 COMRAM     3     2      1
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _Activate_Buzzer_4KHz                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Set_RPM_RGB                                          6     4      2    4311
                                             64 COMRAM     2     0      2
                                              8 BANK1      4     4      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _Set_DC_RGB                                           6     4      2    4249
                                             64 COMRAM     2     0      2
                                              8 BANK1      4     4      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _Monitor_Heater                                       3     3      0   18079
                                              0 BANK0      3     3      0
                       _Turn_Off_Fan
                        _Turn_On_Fan
                      _do_update_pwm
                     _get_duty_cycle
 ---------------------------------------------------------------------------------
 (2) _get_duty_cycle                                       8     4      4     481
                                             16 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Turn_On_Fan                                          0     0      0    8799
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Time                                        0     0      0  330461
                   _DS3231_Read_Time
                      _Decrease_Time
                        _Do_Beep_Bad
                       _Do_Beep_Good
                   _Do_Save_New_Time
                    _Exit_Time_Setup
                      _Go_Next_Field
                      _Go_Prev_Field
                      _Increase_Time
       _Initialize_Setup_Time_Screen
           _Update_Setup_Time_Screen
                          _bcd_2_dec
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Time_Screen                         0     0      0   50293
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Time                                        0     0      0   40379
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Go_Prev_Field                                        0     0      0   11627
_Update_Setup_Screen_Cursor_Backward
 ---------------------------------------------------------------------------------
 (2) _Go_Next_Field                                        0     0      0   11658
 _Update_Setup_Screen_Cursor_Forward
 ---------------------------------------------------------------------------------
 (2) _Exit_Time_Setup                                      0     0      0   52987
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Time                                     0     0      0   60922
                   _DS3231_Read_Time
                  _DS3231_Write_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write_Time                                    2     2      0    7935
                                             11 BANK1      2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (2) _Decrease_Time                                        0     0      0   40379
           _Update_Setup_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Time_Screen                             0     0      0   40379
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Heater_Temp                                 2     2      0  287894
                                              8 BANK1      2     2      0
               _Decrease_Heater_Temp
                        _Do_Beep_Bad
                       _Do_Beep_Good
            _Do_Save_New_Heater_Temp
             _Exit_Setup_Heater_Temp
               _Increase_Heater_Temp
     _Initialize_Setup_Heater_Screen
         _Update_Setup_Heater_Screen
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Heater_Screen                       0     0      0   39137
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Heater_Temp                                 0     0      0   40481
         _Update_Setup_Heater_Screen
 ---------------------------------------------------------------------------------
 (2) _Exit_Setup_Heater_Temp                               0     0      0   52987
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Heater_Temp                              0     0      0   52987
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Decrease_Heater_Temp                                 0     0      0   40481
         _Update_Setup_Heater_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Heater_Screen                           3     3      0   40481
                                              0 BANK0      3     3      0
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (1) _Do_Setup_Alarm_Time                                  0     0      0  341872
             _DS3231_Read_Alarm_Time
                _Decrease_Alarm_Time
                        _Do_Beep_Bad
                       _Do_Beep_Good
             _Do_Save_New_Alarm_Time
              _Exit_Setup_Alarm_Time
                _Go_Next_Alarm_Field
                _Go_Prev_Alarm_Field
                _Increase_Alarm_Time
 _Initialize_Setup_Alarm_Time_Screen
     _Update_Setup_Alarm_Time_Screen
                          _bcd_2_dec
             _check_for_button_input
 ---------------------------------------------------------------------------------
 (1) _check_for_button_input                               3     3      0    3650
                                             56 COMRAM     3     3      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _bcd_2_dec                                            5     5      0      67
                                             16 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _Initialize_Setup_Alarm_Time_Screen                   0     0      0   50293
                           _drawtext
                           _fillRect
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _Increase_Alarm_Time                                  0     0      0   43896
     _Update_Setup_Alarm_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Go_Prev_Alarm_Field                                  0     0      0   11627
_Update_Setup_Screen_Cursor_Backward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Backward                  3     3      0   11627
                                             45 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Go_Next_Alarm_Field                                  0     0      0   11658
 _Update_Setup_Screen_Cursor_Forward
 ---------------------------------------------------------------------------------
 (3) _Update_Setup_Screen_Cursor_Forward                   3     3      0   11658
                                             45 COMRAM     3     3      0
                           _fillRect
 ---------------------------------------------------------------------------------
 (2) _Exit_Setup_Alarm_Time                                0     0      0   52987
                   _DS3231_Read_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (2) _Do_Save_New_Alarm_Time                               0     0      0   61782
             _DS3231_Read_Alarm_Time
                   _DS3231_Read_Time
            _DS3231_Write_Alarm_Time
                  _Initialize_Screen
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   52557
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    4009
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2387
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawCircle                                          20    12      8    6744
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4624
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    2052
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    2052
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _DS3231_Write_Alarm_Time                              2     2      0    8365
                                             11 BANK1      2     2      0
                   _DS3231_Read_Time
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
                          _dec_2_bcd
 ---------------------------------------------------------------------------------
 (4) _dec_2_bcd                                            7     5      2    7734
                                             64 COMRAM     2     0      2
                                              0 BANK0      2     2      0
                                              8 BANK1      3     3      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _DS3231_Read_Time                                     2     2      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _DS3231_Read_Alarm_Time                               2     2      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Good                                         0     0      0    8845
               _Activate_Buzzer_2KHz
                  _Deactivate_Buzzer
                       _Wait_One_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer_2KHz                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Do_Beep_Bad                                          0     0      0    8845
              _Activate_Buzzer_500Hz
                  _Deactivate_Buzzer
                       _Wait_One_Sec
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (2) _do_update_pwm                                        9     9      0    8799
                                             58 COMRAM     9     9      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             4     1      3    2099
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     631
                                             43 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    3166
                                             28 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    2708
                                             43 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2068
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Sec                                         2     2      0      46
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer_500Hz                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Decrease_Alarm_Time                                  0     0      0   43896
     _Update_Setup_Alarm_Time_Screen
 ---------------------------------------------------------------------------------
 (2) _Update_Setup_Alarm_Time_Screen                       0     0      0   43896
                            ___awdiv
                            ___awmod
                           _drawtext
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    3517
                                             28 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     265
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     374
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   32741
                                             56 COMRAM    10     2      8
                                              0 BANK1      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   18184
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5   11156
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1012
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    3683
                                             58 COMRAM     6     2      4
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    3955
                                              0 BANK1      8     4      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0    1019
                        _DS1621_Init
                           _I2C_Init
                           _Init_ADC
                     _Init_Interrupt
                       _Turn_Off_Fan
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     273
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _Turn_Off_Fan                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_Interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     681
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     464
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0     133
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Read                                             3     3      0     198
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (5) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (5) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _chkisr                                             14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                           _INT1_isr
                           _INT2_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (12) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT2_isr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT1_isr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (13) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Alarm_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Turn_Off_Alarm
     _DS3231_Init
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Write_Address_Read_One_Byte
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _I2C_Write_Address_Write_One_Byte
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
   _Do_Beep_Bad
     _Activate_Buzzer_500Hz
     _Deactivate_Buzzer
     _Wait_One_Sec
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
       ___lbtoft
         ___ftpack
   _Do_Beep_Good
     _Activate_Buzzer_2KHz
     _Deactivate_Buzzer
     _Wait_One_Sec
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
       ___lbtoft
         ___ftpack
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _Init_ADC
     _Init_Interrupt
     _Turn_Off_Fan
     _init_UART
       _OpenUSART
   _Do_Setup_Alarm_Time
     _DS3231_Read_Alarm_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Alarm_Time
       _Update_Setup_Alarm_Time_Screen
         ___awdiv
           ___awmod (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
           ___wmul (ARG)
         ___awmod
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
         ___lbtoft
           ___ftpack
     _Do_Save_New_Alarm_Time
       _DS3231_Read_Alarm_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Alarm_Time
         _DS3231_Read_Time
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___awmod (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
             ___wmul (ARG)
           ___awmod
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Setup_Alarm_Time
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Go_Next_Alarm_Field
       _Update_Setup_Screen_Cursor_Forward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Go_Prev_Alarm_Field
       _Update_Setup_Screen_Cursor_Backward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Increase_Alarm_Time
       _Update_Setup_Alarm_Time_Screen
         ___awdiv
           ___awmod (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
           ___wmul (ARG)
         ___awmod
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
     _Initialize_Setup_Alarm_Time_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Alarm_Time_Screen
       ___awdiv
         ___awmod (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
         ___wmul (ARG)
       ___awmod
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
     _bcd_2_dec
     _check_for_button_input
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
   _Do_Setup_Heater_Temp
     _Decrease_Heater_Temp
       _Update_Setup_Heater_Screen
         ___awdiv
           ___awmod (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
           ___wmul (ARG)
         ___awmod
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
         ___lbtoft
           ___ftpack
     _Do_Save_New_Heater_Temp
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Setup_Heater_Temp
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Increase_Heater_Temp
       _Update_Setup_Heater_Screen
         ___awdiv
           ___awmod (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
           ___wmul (ARG)
         ___awmod
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Heater_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Heater_Screen
       ___awdiv
         ___awmod (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
         ___wmul (ARG)
       ___awmod
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     _check_for_button_input
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
   _Do_Setup_Time
     _DS3231_Read_Time
       _I2C_ReStart
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Read
         _i2cAck
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cNack
           _i2cHighScl
           _i2cLowScl
       _I2C_Start
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Stop
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _I2C_Write
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
     _Decrease_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___awmod (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
           ___wmul (ARG)
         ___awmod
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Do_Beep_Bad
       _Activate_Buzzer_500Hz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
         ___lbtoft
           ___ftpack
     _Do_Beep_Good
       _Activate_Buzzer_2KHz
       _Deactivate_Buzzer
       _Wait_One_Sec
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
         ___lbtoft
           ___ftpack
     _Do_Save_New_Time
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _DS3231_Write_Time
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _dec_2_bcd
           ___awdiv
             ___awmod (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
             ___wmul (ARG)
           ___awmod
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Exit_Time_Setup
       _DS3231_Read_Time
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _Initialize_Screen
         _LCD_Reset
           _delay_ms
             ___wmul
         _TFT_GreenTab_Initialize
           _Rcmd1
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd2red
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _Rcmd3
             _delay_ms
               ___wmul
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _fillScreen
           _fillRectangle
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
         _strcpy
     _Go_Next_Field
       _Update_Setup_Screen_Cursor_Forward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Go_Prev_Field
       _Update_Setup_Screen_Cursor_Backward
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
     _Increase_Time
       _Update_Setup_Time_Screen
         ___awdiv
           ___awmod (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
           ___wmul (ARG)
         ___awmod
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Initialize_Setup_Time_Screen
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _Update_Setup_Time_Screen
       ___awdiv
         ___awmod (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
         ___wmul (ARG)
       ___awmod
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
     _bcd_2_dec
     _check_for_button_input
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Monitor_Heater
     _Turn_Off_Fan
     _Turn_On_Fan
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
         ___lbtoft
           ___ftpack
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
       ___lbtoft
         ___ftpack
     _get_duty_cycle
   _Set_DC_RGB
     ___awdiv
       ___awmod (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
       ___wmul (ARG)
   _Set_RPM_RGB
     ___awdiv
       ___awmod (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
       ___wmul (ARG)
   _Test_Alarm
     _Activate_Buzzer_4KHz
     _DS3231_Turn_Off_Alarm
       _DS3231_Init
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write_Address_Read_One_Byte
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Write_Address_Write_One_Byte
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _DS3231_Turn_On_Alarm
       _DS3231_Init
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write_Address_Read_One_Byte
           _I2C_ReStart
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Read
             _i2cAck
               _i2cHighScl
               _i2cHighSda
               _i2cLowScl
               _i2cLowSda
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cNack
               _i2cHighScl
               _i2cLowScl
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
         _I2C_Write_Address_Write_One_Byte
           _I2C_Start
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Stop
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _I2C_Write
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
       _I2C_Write_Address_Read_One_Byte
         _I2C_ReStart
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Read
           _i2cAck
             _i2cHighScl
             _i2cHighSda
             _i2cLowScl
             _i2cLowSda
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cNack
             _i2cHighScl
             _i2cLowScl
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Address_Write_One_Byte
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _Deactivate_Buzzer
     _Set_RGB_Color
     ___ftge
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
       ___lbtoft
         ___ftpack
   _Toggle_Heater
   _Update_Screen
     ___awdiv
       ___awmod (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
       ___wmul (ARG)
     ___awmod
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   ___awdiv
     ___awmod (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
     ___wmul (ARG)
   ___wmul
   _check_for_button_input
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
   _get_RPM
     ___awdiv
       ___awmod (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
       ___wmul (ARG)
     ___wmul
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
   _read_volt
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     _get_full_ADC

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _INT1_isr
   _INT2_isr
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      F      43       7       26.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      3      80       5      100.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     43      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     132      34        0.0%
DATA                 0      0     132       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Dec 01 16:18:26 2022

                                 drawCircle@f 002A                                   drawCircle@r 0020  
                                 drawCircle@x 002C                                   drawCircle@y 002E  
                          __size_of_I2C_Start 0012                                   _SSPSTATbits 000FC7  
                          __size_of_I2C_Write 003E                                  drawCircle@x0 001C  
                                drawCircle@y0 001E                  __size_of_Do_Setup_Alarm_Time 00BE  
                                ___awdiv@sign 0139                          __size_of_Turn_On_Fan 0010  
                         ___wmul@multiplicand 0013                               ??_Update_Screen 00FD  
                                         l211 3DE0                                           l320 2A7C  
                                         l350 37BC                                           l353 388A  
                                         l281 260E                                           l249 1E00  
                                         l290 32E2                                           l296 37FE  
                                         l465 3930                                           l387 3996  
                                         _PR2 000FCB                          DS3231_Init@Address_7 0017  
                        DS3231_Init@Address_E 0018                                           _day 005B  
                           _Deactivate_Buzzer 3E54                          __size_of_I2C_ReStart 0016  
                   __size_of_Do_Save_New_Time 0014                                           _dow 005C  
                                         _nbr 00F0                                           _rpm 004C  
                       __size_of_Turn_Off_Fan 000A                                           _rps 00F4  
                                         _txt 004E                                  ___awmod@sign 0040  
                                         wreg 000FE8                                 _Increase_Time 2D7A  
                __size_of_Go_Next_Alarm_Field 0018                            ?_Deactivate_Buzzer 0001  
                 __end_of_Decrease_Alarm_Time 3646        Update_Setup_Screen_Cursor_Forward@xinc 0030  
      Update_Setup_Screen_Cursor_Forward@yinc 002F                               ??_fillRectangle 001D  
                                __CFG_LVP$OFF 000000                       _TFT_GreenTab_Initialize 3A24  
                                ___ftdiv@cntr 0035                                  ___ftdiv@sign 003A  
                                __CFG_WDT$OFF 000000                                          l1041 10DA  
                                        l1202 2472                                          l1203 23DE  
                                        l2012 33FE                                          l1052 128E  
                              drawFastVLine@h 0019                                          l1213 1352  
                                        l1205 244E                                          l2022 3722  
                                        l1206 2470                                          l1143 39F8  
                                        l2051 387A                                          l1149 2FB0  
                                        l1165 18C2                                          l1333 3A22  
                                        l1174 1818                                          l1350 3B9C  
                                        l1167 179C                                          l1416 0AEE  
                                        l1336 327C                                          l1089 3552  
                                        l1329 30B2                                          l1099 3CD4  
                              drawFastVLine@x 0022                                          l1453 0D46  
                                        l1381 3A9A                                drawFastVLine@y 0018  
                                        l1375 35A8                                          l1481 31EC  
                                        l1482 31EE                                          l1378 3A7A  
                                        l1483 31F8                                          l1707 38F4  
                                        l1484 31FA                                          l1477 31D2  
                                        l1486 3214                                          l1920 3B06  
                                        l1808 2776                                          l1489 3A74  
                                        l1905 22B4                                          l1682 2542  
                                        l1695 3032                                          l1872 2362  
                                        l1946 3AC0                                          l1884 1EF8  
                                        l1797 279E                                          l1869 2396  
                                        l1878 2BBE                                          l5507 33F2  
                                        l5523 3716                                          l5515 36EE  
                                        l5517 36F8                                          l6325 3B8A  
              I2C_Write_Cmd_Write_Data@Device 0015                                          l5519 3700  
                                        l8113 1798                                          l8105 177E  
                                        l5369 3AFE                                          l6329 3B96  
                                        l8201 246C                                          l9001 0F8A  
                                        l8123 17D8                                          l8115 17A0  
                                        l9011 1038                                          l9003 0FC0  
                                        l8301 2FE4                                          l8125 180C  
                                        l8109 178A                                          l8221 273E  
                                        l8213 26FA                                          l9013 1072  
                                        l6461 255C                                          l8303 2FEE  
                                        l8143 188E                                          l8135 183A  
                                        l8151 18BE                                          l8127 1810  
                                        l8119 17A8                                          l5495 33C2  
                                        l8231 277E                                          l8223 275E  
                                        l8215 2706                                          l9007 0FFC  
                                        l9023 10E8                                          l9103 306C  
                                        l6471 25BA                                          l8305 2FF6  
                                        l8313 3018                                          l8145 18B6  
                                        l8137 1862                                          l5497 33CC  
                                        l8401 0B46                                          l8225 276A  
                                        l8217 2726                                          l8209 26EA  
                                        l9033 11B0                                          l9025 111E  
                                        l9113 3098                                          l6481 25FC  
                                        l6465 258C                                          l5499 33D4  
                                        l8411 0B74                                          l9211 360A  
                                        l9019 10B2                                          l9035 11EA  
                                        l9123 30AE                                          l6475 25DA  
                                        l6483 2606                                          l8261 24C8  
                                        l8317 3028                                          l8309 300C  
                                        l8157 3848                                          l8405 0B6A  
                                        l9221 3626                                          l9205 35FA  
                                        l8237 2790                                          l9029 115A  
                                        l9045 1266                                          l9109 3090  
                                        l9301 3BFA                                          l6477 25E8  
                                        l6469 25AC                                          l6813 2B8E  
                                        l8263 24D6                                          l8255 24AA  
                                        l8159 384E                                          l8415 0B80  
                                        l8351 09F8                                          l9215 3616  
                                        l8191 2452                                          l8175 2416  
                                        l9039 122A                                          l9231 35AC  
                                        l8281 2538                                          l8273 2512  
                                        l8265 24E0                                          l8249 2492  
                                        l8433 0BD8                                          l8409 0B70  
                                        l8425 0BAA                                          l8361 0A20  
                                        l9217 361A                                          l9209 3606  
                                        l9225 362A                                          l8169 23A8  
                                        l9401 2D8C                                          l6809 2B5C  
                                        l8451 0C3E                                          l8419 0BA4  
                                        l8427 0BBC                                          l8363 0A36  
                                        l8355 0A08                                          l9227 3640  
                                        l8195 245C                                          l8187 2444  
                                        l9243 35CC                                          l9251 35DC  
                                        l9331 3BC4                                          l6819 2BBA  
                                        l8277 2522                                          l8293 2FC8  
                                        l8453 0C46                                          l8461 0C72  
                                        l8445 0C1E                                          l8437 0BFC  
                                        l8357 0A16                                          l8621 1428  
                                        l9237 35BC                                          l9253 35F2  
                                        l9341 3BE0                                          l9333 3BC8  
                                        l9413 2DAC                                          l5991 31D6  
                                        l5983 31C2                                          l7903 3752  
                                        l8463 0C7A                                          l8471 0D04  
                                        l8447 0C26                                          l8439 0C06  
                                        l8391 0B1C                                          l8375 0AB8  
                                        l8367 0A54                                          l8631 22EE  
                                        l8703 1EA4                                          l8535 39A2  
                                        l9351 2E0C                                          l9407 2D9C  
                                        l8297 2FD6                                          l8465 0CBE  
                                        l8473 0D16                                          l8457 0C5E  
                                        l8713 1ED2                                          l8705 1EAA  
                                        l8537 39AC                                          l9185 3C24  
                                        l9361 2E28                                          l9425 2DCC  
                                        l9433 2DDC                                          l5987 31CA  
                                        l5979 31B8                                          l7923 39DA  
                                        l8571 1AC4                                          l8563 1A72  
                                        l8547 1A00                                          l8475 0D1E  
                                        l8395 0B36                                          l8379 0AC0  
                                        l8635 22FC                                          l8723 21EE  
                                        l9195 3C40                                          l9187 3C28  
                                        l9099 3058                                          l9291 3C0E  
                                        l9363 2E2C                                          l9355 2E18  
                                        l9419 2DBC                                          l9435 2E04  
                                        l9603 1D4A                                          l9451 38D0  
                                        l7933 3780                                          l7861 2F3A  
                                        l8573 1ACC                                          l8397 0B3A  
                                        l8477 0D2A                                          l8629 22D4  
                                        l8709 1EBC                                          l8741 2248  
                                        l9293 3C12                                          l9381 2E5C  
                                        l9373 2E48                                          l9357 2E1C  
                                        l9541 2A4E                                          l9613 1D72  
                                        l7943 3796                                          l7951 37A6  
                                        l5999 31E4                                          l8559 1A54  
                                        l8655 233C                                          l8751 2272  
                                        l9375 2E4C                                          l9367 2E38  
                                        l9391 2E94                                          l9535 2A0E  
                                        l9623 1DAE                                          l7945 379E  
                                        l7937 3788                                          l7865 2F72  
                                        l8665 2370                                          l8681 1E48  
                                        l8753 2280                                          l8745 2258  
                                        l8593 1338                                          l9385 2E68  
                                        l9369 2E3C                                          l9553 2BF4  
                                        l9545 2A70                                          l9529 29DA  
                                        l9721 02E2                                          l7955 37B2  
                                        l7971 389A                                          l7963 3882  
                                        l7875 2F98                                          l8675 1E20  
                                        l8747 225E                                          l8755 228A  
                                        l9299 3BF6                                          l9379 2E58  
                                        l9395 2D7C                                          l9571 32A0  
                                        l9563 2C4A                                          l9539 2A38  
                                        l9707 022E                                          l9651 00AA  
                                        l7957 37B8                                          l7981 38AC  
                                        l7877 2FA6                                          l8677 1E3A  
                                        l9389 2E6C                                          l9821 26B8  
                                        l9813 269C                                          l9805 2680  
                                        l9581 32DC                                          l9557 2C1E  
                                        l9725 02EA                                          l9709 0244  
                                        l9661 0118                                          l9645 0066  
                                        l8695 1E7C                                          l8759 22A2  
                                        l8847 29A2                                          l9911 2CAA  
                                        l9559 2C28                                          l9591 1D1C  
                                        l9727 02F2                                          l9719 02CC  
                                        l7969 3894                                          l9825 26C6  
                                        l9817 26AA                                          l9809 268E  
                                        l9569 3288                                          l7899 3736  
                                        l8699 1E8E                                          l9851 27DC  
                                        l9923 2CD4                                          l9915 2CB8  
                                        l9827 26CA                                          l9579 32D6  
                                        l9667 015C                                          l9925 2CD8  
                                        l9829 26D0                                          l9871 2820  
                                        l9863 2804                                          l9919 2CC6  
                                        l9927 2CDE                                          STR_1 FEB8  
                                        STR_2 FEEC                                          l9793 2658  
                                        STR_3 FF01                                          STR_4 FF28  
                                        l9883 284A                                          l9875 282E  
                                        l9867 2812                                          STR_5 FF6E  
                                        STR_6 FFF5                                          l8997 0F2E  
                                        l9885 284E                                          STR_7 FFEF  
                                        STR_8 FFB0                                          l9879 283C  
                                        l9887 2854                                          STR_9 FFDF  
                                        l9897 2C68                                          l9995 0D5E  
                                        u4120 2588                                          u4130 259C  
                                        u4150 25CA                                          u5030 3D76  
                                        u5040 3D78                                          u5500 2F68  
                                        u6310 1A2E                                          u6401 22E4  
                                        u6510 220C                                          u6431 1E12  
                                        u5800 23D6                                          u7080 1DA2  
                                        u5730 1870                                          u5810 240C  
                                        u6451 1E30                                          u6515 2204  
                                        u6381 22C6                  __end_of_Activate_Buzzer_2KHz 3D24  
                                        u6491 21E0                                          u6900 2A22  
                                        u7550 0F16                                          u6920 2A64  
                                        u7560 0F18                                          u7707 3DFC  
                                        u6940 2C08                                          _RBPU 007F8F  
                                        u6960 2C3E                  __end_of_Activate_Buzzer_4KHz 3D00  
                                        _TRMT 007D61                      ??_Do_Save_New_Alarm_Time 0043  
                       _setup_heater_set_temp 0068                                  _DS1621_tempC 0046  
                                _DS1621_tempF 0048                         _setup_heater_set_text 00C8  
                         ??_Deactivate_Buzzer 0011                                          _date 008B  
                                        _main 0D48                                          _font FCCB  
     Update_Setup_Screen_Cursor_Backward@xinc 0030                                  ___ftpack@arg 0011  
     Update_Setup_Screen_Cursor_Backward@yinc 002F                                          _hour 005F  
                                ___ftpack@exp 0014                              __end_of_I2C_Init 3E24  
                            __end_of_I2C_Read 37BE                                          _time 00AF  
                                        _year 006E                                          fsr0h 000FEA  
                                        fsr1h 000FE2                                ??_get_full_ADC 0013  
                                        fsr0l 000FE9                                          fsr2h 000FDA  
                                        fsr1l 000FE1                                          indf2 000FDF  
                                        fsr2l 000FD9                                          _wrap 0081  
                                        _volt 00E7                              __end_of_I2C_Stop 3D48  
                      ?_DS3231_Turn_Off_Alarm 0001                                          pclat 000FFA  
                          __size_of_LCD_Reset 0012                                          prodh 000FF4  
                                        prodl 000FF3                                          start 0018  
                 __size_of_I2C_Write_Cmd_Only 001A                                _Monitor_Heater 327E  
                             __end_of_Do_Init 3464                                   _Do_Beep_Bad 3CB2  
                             ??_drawFastVLine 001C                                  ___ftmul@cntr 002A  
                             __end_of_i2cNack 3E2E                                  ___param_bank 000010  
                                ___ftmul@sign 002B       Update_Setup_Screen_Cursor_Forward@field 002E  
                                ___fttol@exp1 003A                     ??_DS3231_Write_Alarm_Time 0043  
                       __size_of_Do_Beep_Good 0014                                  _Turn_Off_Fan 3E10  
                                ___fttol@lval 0036               __size_of_Exit_Setup_Heater_Temp 0010  
                                 ?_TIMER1_isr 0001                              __end_of_INT0_isr 176E  
                            __end_of_INT1_isr 3E4C                                         l10011 0DD6  
                                       l10041 0EC4                                         l10033 0EB0  
                            __end_of_INT2_isr 3E42                                         l10045 0ECE  
                                       l10037 0EBA                                         l10053 0EDE  
                                       l10029 0E9A                                         l10055 0EFC  
                                       l10049 0ED8                __size_of_Activate_Buzzer_500Hz 0012  
                   __end_of_Deactivate_Buzzer 3E5C                               ??_do_update_pwm 003B  
                             drawFastVLine@hi 0020                               drawFastVLine@lo 0021  
               __end_of_Activate_Buzzer_500Hz 3D36                                         ?_main 0001  
                             __end_of___awdiv 2544                               drawCircle@ddF_x 0026  
                                       STR_10 FFAA                               drawCircle@ddF_y 0028  
                                       STR_11 FFBF                                         STR_20 FFE9  
                                       STR_12 FF7B                                         STR_21 FFED  
                                       STR_13 FFD8                                         STR_14 FFF8  
                                       STR_30 FF5E                                         STR_22 FF3B  
                                       STR_31 FF15                                         STR_15 FFFB  
                                       STR_23 FFC8                                         STR_16 FFE4  
                                       STR_24 FFD0                                         STR_32 FF88  
                                       STR_33 FFB0                                         STR_25 FFB0  
                                       STR_17 FFF1                                         STR_34 FFDF  
                                       STR_18 FFE9                                         STR_26 FF9F  
                                       STR_19 FFED                                         STR_27 FF15  
                                       STR_35 FED6                                         STR_28 FF94  
                                       STR_36 FF4D                               __end_of___awmod 3034  
                                       STR_29 FFB5                               __end_of___ftdiv 2398  
                             __end_of___ftmul 1EFA                                         _T0CON 000FD5  
                             ___awdiv@divisor 0136                                         _T1CON 000FCD  
                             __end_of___fttol 22B6                                         _T2CON 000FCA  
                                       _T3CON 000FB1                 __size_of_Do_Setup_Heater_Temp 0094  
                             __end_of___lwdiv 3408                               __end_of___lwmod 372C  
                                       i2l541 2EF0                                         i2l553 176C  
                                       i2l565 1720                               ___awdiv@counter 0138  
                             drawCircle@color 0022                                         _RCSTA 000FAB  
                                       _TMR0H 000FD7                                         _TMR1H 000FCF  
                                       _TMR0L 000FD6                                         _TMR1L 000FCE  
                                       _TMR3L 000FB2                                         _SPBRG 000FAF  
                                       _PORTD 000F83                                         _PORTE 000F84  
                              ?_Increase_Time 0001                                         _TRISA 000F92  
                                       _TRISB 000F93                                         _TRISC 000F94  
                                       _TRISD 000F95                                         _TRISE 000F96  
                                       _TXREG 000FAD                                         _TXSTA 000FAC  
                             __end_of_get_RPM 3800                                         _Rcmd1 18C4  
                                       _Rcmd3 1FEC      Update_Setup_Screen_Cursor_Backward@field 002E  
                                  _i2cHighSda 3E64                                    _i2cHighScl 3DF8  
                                bcd_2_dec@bcd 0015                                  bcd_2_dec@dec 0013  
                               ___awtoft@sign 001C                               __end_of_dpowers FEB0  
                                       _color 00EE                                         _font2 FDCA  
                                       _found 005E                               __end_of_isdigit 3B08  
                                       _tempC 00D9                                         _tempF 00DD  
                                       _month 0061                                 ___ftpack@sign 0015  
                                       _putch 3DDC                             __end_of_I2C_Start 3D5A  
                           __end_of_I2C_Write 38BA                                __CFG_BOREN$OFF 000000  
                                       tablat 000FF5                        __end_of_Monitor_Heater 32E4  
                                       status 000FD8                             ?_DS1621_Read_Temp 0014  
                                _Do_Beep_Good 3C9E               __size_of_check_for_button_input 0080  
                       __end_of_Go_Next_Field 3BE8                               write_data@data_ 0013  
                          ??_DS1621_Read_Temp 0016                            Set_RGB_Color@color 0011  
                             __initialization 3132                                 ??_Set_RPM_RGB 0043  
                                __end_of_main 0F22                                  __end_of_font FDCA  
                    ?_Do_Save_New_Heater_Temp 0001                  __end_of_Decrease_Heater_Temp 3C18  
                            __end_of_Init_ADC 3DF8                              __end_of_Rcmd2red 383E  
                          _Select_Alarm_Field 0052                                        ??_main 0141  
                               ___fttol@sign1 0035                                 __activetblptr 000002  
                           ?_DS3231_Read_Time 0001                             __end_of_LCD_Reset 3D12  
     I2C_Write_Address_Write_One_Byte@Address 0013                                    _Set_DC_RGB 2BC0  
                       __end_of_Go_Prev_Field 3BD0                     ??_TFT_GreenTab_Initialize 001D  
                 ?_Update_Setup_Heater_Screen 0001                    ??_Update_Setup_Time_Screen 0043  
                              _Init_Interrupt 3AC2                            ??_DS3231_Read_Time 0014  
                                      ?_Rcmd1 0001                                        ?_Rcmd3 0001  
                                   I2C_Init@c 0011                           _In_Alarm_Time_Setup 00F8  
                                   I2C_Read@n 0012                   DS3231_Turn_Off_Alarm@Device 001F  
                                      _ADCON0 000FC2                                        _ADCON1 000FC1  
                                      _ADCON2 000FC0                           DS1621_Read_Temp@Cmd 0016  
                                      _ADRESH 000FC4                                        _ADRESL 000FC3  
                                      _CCPR1L 000FBE                                        _CCPR2L 000FBB  
                            ___awdiv@dividend 0134                        _Exit_Setup_Heater_Temp 3D9C  
                          __size_of_i2cLowSda 000A                            __size_of_i2cLowScl 0008  
                            __end_of___awtoft 38F6                                        _HEATER 0050  
                                      ?_putch 0001                              __end_of___ftpack 27A0  
                            __end_of___lbtoft 3AC2                                        _DC_Txt 00D1  
               __size_of_Increase_Heater_Temp 0018                                     ??_Do_Init 0017  
                                      i2l7331 1664                                        i2l7325 165A  
                                      i2l7309 160E                                        i2l7351 16AE  
                                      i2l7343 168C                                        i2l7319 163C  
                                      i2l7337 1682                                        i2l7371 1746  
                                      i2l7355 16B2                                        i2l7349 16A8  
                                      i2l7369 1740                                        i2l7377 174A  
                                      i2l7563 2EDC                                        i2l7567 2EE6  
                                      i2l7559 2ED2                                        _OSCCON 000FD3  
             __size_of_Do_Save_New_Alarm_Time 0018                           __size_of_TIMER1_isr 000C  
                                      _SPBRGH 000FB0                               ?_Monitor_Heater 0001  
                                      _SSPBUF 000FC9                                     ??_i2cNack 0011  
                                _Alarm_SW_Txt 00CD                              _force_nec_state0 3E6C  
                            __end_of_delay_ms 355A                                        _i2cAck 3D5A  
            ??_Initialize_Setup_Heater_Screen 0043               ?_Initialize_Setup_Heater_Screen 0001  
                __size_of_Go_Prev_Alarm_Field 0018                              __end_of_fillRect 3776  
                            __end_of_drawChar 18C4                            __size_of_OpenUSART 0070  
                                      ___ftge 2B2A                   __end_of_Increase_Alarm_Time 35F8  
                        DS3231_Init@control_E 0019                                        ___wmul 3A4E  
                                   ??___awdiv 0041                              __end_of_drawtext 1AE2  
                                   ??___awmod 003F                                     ??___ftdiv 0032  
                                  _Test_Alarm 1CFA                                     ??___ftmul 0023  
                                   ??___fttol 0030                                        _chkisr 0008  
                                   ??___lwdiv 0015                                        _array1 011F  
                                   ??___lwmod 001C                                        _buffer 0100  
              __size_of_Exit_Setup_Alarm_Time 0010                                        _nec_ok 00F2  
               __end_of_Exit_Setup_Alarm_Time 3DBC                                        clear_0 3138  
                                      clear_1 3144                              ___awdiv@quotient 013A  
                                      _minute 0060                                        _second 0063  
                             ___awmod@divisor 003D                          _Activate_Buzzer_2KHz 3D12  
                           read_volt@num_step 0032                          _Activate_Buzzer_4KHz 3CEE  
                                   ??_get_RPM 0043                    __size_of_Deactivate_Buzzer 0008  
                             ___awmod@counter 003F                                        _printf 09EE  
                                drawtext@size 0040                               ??_Increase_Time 0043  
                                      _strcpy 3998                                        _strlen 383E  
                       ___ftmul@f3_as_product 0027                        __end_of_Init_Interrupt 3AE6  
                         __end_of_Set_RPM_RGB 2A7E                          __end_of_get_full_ADC 3A9C  
                      _check_for_button_input 3034                              _Do_Save_New_Time 3C76  
                                __pdataCOMRAM 006F                                     ??_isdigit 0011  
                                   ?_I2C_Init 0011                                     ?_I2C_Read 0001  
                      get_duty_cycle@set_temp 0013                                     ?_I2C_Stop 0001  
                                __mediumconst FCCA                                        tblptrh 000FF7  
                                      tblptrl 000FF6                                        tblptru 000FF8  
            __end_of_I2C_Write_Cmd_Write_Data 3B48                                   ?_i2cHighSda 0001  
                                 ?_i2cHighScl 0001                                        putch@c 0011  
                      __size_of_Set_RGB_Color 0008                              __end_of_spiwrite 3CDA  
                    __size_of_Exit_Time_Setup 0010                            __size_of_bcd_2_dec 002A  
                         _Do_Setup_Alarm_Time 27A0                                    __accesstop 0080  
                     __end_of__initialization 319C                              ??_get_duty_cycle 0015  
       I2C_Write_Address_Read_One_Byte@Device 0016                            __size_of_dec_2_bcd 0068  
                                  ___ftge@ff1 0011                                    ___ftge@ff2 0014  
                                   ?_INT0_isr 0001                                     ?_INT1_isr 0001  
                                   ?_INT2_isr 0001                            _setup_alarm_minute 0065  
                          _setup_alarm_second 0066                                 ___rparam_used 000001  
                                  ___ftdiv@f1 002C               __end_of_Do_Save_New_Heater_Temp 3C9E  
                                  ___ftdiv@f2 002F                                    ___ftdiv@f3 0036  
                                  ___awtoft@c 0019                                    ___lbtoft@c 001C  
                         _Go_Next_Alarm_Field 3C30                                    ___ftmul@f1 001D  
                                  ___ftmul@f2 0020                                    ___fttol@f1 002C  
                               __end_of_Rcmd1 19D4                                 __end_of_Rcmd3 20DE  
                              __pcstackCOMRAM 0001                 DS3231_Turn_On_Alarm@Address_E 001B  
               DS3231_Turn_On_Alarm@Address_F 001C                                  __pidataBANK0 3348  
                                __pidataBANK1 3932                                 __end_of_font2 FEA6  
                           __end_of_i2cLowSda 3E38                             __end_of_i2cLowScl 3E64  
                        ?_Do_Setup_Alarm_Time 0001                                 __end_of_putch 3DEA  
                       ?_Activate_Buzzer_2KHz 0001                         ?_Activate_Buzzer_4KHz 0001  
                      _Do_Save_New_Alarm_Time 3C48                                drawPixel@color 0019  
                                dec_2_bcd@bcd 013C                                  dec_2_bcd@dec 013E  
                      __size_of_Decrease_Time 0090                               ?_Init_Interrupt 0001  
                      __size_of_write_command 0010                                    ??_I2C_Init 0015  
                                 ?_Set_DC_RGB 0041                                    ??_I2C_Read 0011  
                                _alarm_minute 0057                                  _alarm_second 0058  
            ??_Update_Setup_Alarm_Time_Screen 0043               ?_Update_Setup_Alarm_Time_Screen 0001  
                __end_of_DS3231_Turn_On_Alarm 34B6                                    ??_I2C_Stop 0011  
                        ?_Go_Next_Alarm_Field 0001                                       ??_Rcmd1 001D  
                                     ??_Rcmd3 001D                            __size_of_drawPixel 0030  
                           __end_of_OpenUSART 3216                                       ??_putch 0011  
                        _Decrease_Heater_Temp 3C00                       ??_DS3231_Turn_Off_Alarm 001B  
                                  __pbssBANK0 00E3                              _setup_alarm_hour 0064  
                                   ?_Init_ADC 0001                              _setup_alarm_time 0094  
        __end_of_Initialize_Setup_Time_Screen 1BEE         __size_of_Initialize_Setup_Time_Screen 010C  
                _Initialize_Setup_Time_Screen 1AE2                                 ??_DS1621_Init 0016  
                               ??_DS3231_Init 0017                                     ?_Rcmd2red 0001  
                       __end_of_Toggle_Heater 3D7C                            __size_of_init_UART 0014  
                             spiwrite@spidata 0012                                    _alarm_date 0055  
                                  ??_INT0_isr 0001                                    ??_INT1_isr 0001  
                                  ??_INT2_isr 0001                                    _alarm_mode 00EC  
                                  _alarm_hour 0056                                    _alarm_time 0082  
                               ?_Wait_One_Sec 0001      I2C_Write_Address_Write_One_Byte@Data_Out 0014  
                                     ?_i2cAck 0001                                  ?_Do_Beep_Bad 0001  
                          __size_of_read_volt 0050                          Set_DC_RGB@duty_cycle 0041  
                          __CFG_CCP2MX$PORTBE 000000                                 _Set_RGB_Color 3E4C  
                               ??_Turn_On_Fan 0044                                I2C_Read@inByte 0013  
                                     ?___ftge 0011           __size_of_Update_Setup_Heater_Screen 00AC  
                  DS3231_Turn_On_Alarm@Device 001F                                       ?___wmul 0011  
                         __size_of_i2cHighSda 0008                           __size_of_i2cHighScl 000C  
                                 _Set_RPM_RGB 29CC                                   ?_Test_Alarm 0001  
                       ??_Do_Setup_Alarm_Time 0044                                       ?_chkisr 0001  
                             _heater_set_temp 006F                        __size_of_setAddrWindow 004E  
                           __end_of_bcd_2_dec 3A24                                       _CCP1CON 000FBD  
            I2C_Write_Cmd_Write_Data@Data_Out 0014                                       _CCP2CON 000FBA  
                      __size_of_Do_Setup_Time 00CA                                  ??_TIMER1_isr 0001  
                               ??_I2C_ReStart 0011                                       _ALARMEN 0044  
                                   ?___awtoft 0019                                     ?___ftpack 0011  
                                   ?___lbtoft 0019                                    I2C_Write@n 0012  
                                     ?_printf 001D                                       ?_strcpy 0011  
                                     ?_strlen 0011                             __end_of_dec_2_bcd 327E  
                                  _fillScreen 3B66                                       _MATCHED 00EA  
                       __end_of_Update_Screen 066E                      ??_DS3231_Read_Alarm_Time 0014  
                                  _drawCircle 1290                         ??_Go_Next_Alarm_Field 0031  
                                   ?_delay_ms 0017                                     ?_fillRect 0023  
                                   ?_drawChar 002E                                       _SSPCON1 000FC6  
                       ?_Decrease_Heater_Temp 0001                                       _SSPSTAT 000FC7  
                                     _RPM_Txt 00C3                         __end_of_fillRectangle 2474  
                                   ?_drawtext 0039                                    ??_Init_ADC 0011  
                                     _Do_Init 3408                      _I2C_Write_Cmd_Write_Data 3B28  
                  __end_of_I2C_Write_Cmd_Only 3BB8                                    ??_Rcmd2red 0014  
                __end_of_Do_Setup_Heater_Temp 2CE8                        DS1621_Read_Temp@Device 0018  
                               _Decrease_Time 2E0A                                ??_Wait_One_Sec 0011  
                                     _i2cNack 3E24                            __end_of_TIMER1_isr 3E10  
               ?_Initialize_Setup_Time_Screen 0001                  __size_of_Decrease_Alarm_Time 004E  
                               _write_command 3DCC                                     _I2C_Start 3D48  
                                   _I2C_Write 387C                             ??_Exit_Time_Setup 0043  
                             __size_of_i2cAck 0012                                       __Hparam 0000  
                                     __Lparam 0000                           __size_of_Set_DC_RGB 0094  
                              ?_Set_RGB_Color 0001                           __end_of_DS1621_Init 3B66  
                         __end_of_DS3231_Init 2916                             __end_of_drawPixel 39FA  
                       __end_of_drawFastVLine 2FB2                               __size_of___ftge 0096  
                                     ___awdiv 2474                                       ___awmod 2FB2  
                                     ___ftdiv 22B6                               __size_of___wmul 0028  
                      ??_Activate_Buzzer_2KHz 0011                                       ___ftmul 1E02  
                      ??_Activate_Buzzer_4KHz 0011                                       ___fttol 21D0  
                                     ___lwdiv 33AC                                       ___lwmod 36E0  
                       __size_of_get_full_ADC 0026                               __size_of_chkisr 2F22  
                                   ?_spiwrite 0001                                       __pcinit 3132  
                                  ??___awtoft 001C                                    ??___ftpack 0016  
                                  ??___lbtoft 001C                                       __ramtop 1000  
                                     _get_RPM 37BE                                       __ptext0 0D48  
                                     __ptext1 355A                                       __ptext2 3A76  
                                     __ptext3 38BA                                       __ptext4 37BE  
                                     __ptext5 001C                     __size_of_DS1621_Read_Temp 003C  
                                     __ptext6 3D6C                                       __ptext7 1CFA  
                                     __ptext8 2B2A                                       __ptext9 3E4C  
                             __size_of_printf 035A                             __end_of_init_UART 3CEE  
                         __end_of_Turn_On_Fan 3D8C                                     _T0CONbits 000FD5  
                             __size_of_strcpy 0032                               __size_of_strlen 003E  
                           __end_of_hexpowers FEB8                      __end_of_force_nec_state0 3E74  
                                   _T1CONbits 000FCD                                       _dpowers FEA6  
                       __end_of_do_update_pwm 29CC                                       _isdigit 3AE6  
                       _Activate_Buzzer_500Hz 3D24                              ___awmod@dividend 003B  
                                  _duty_cycle 005D                       ?_Exit_Setup_Heater_Temp 0001  
                         _Go_Prev_Alarm_Field 3C18                             __end_of_read_volt 35AA  
                                  ??_delay_ms 0019                           __end_of_I2C_ReStart 3C76  
            __size_of_Do_Save_New_Heater_Temp 0014                                 drawtext@_text 003A  
                               drawtext@color 003C                              ??_Monitor_Heater 00FD  
                                  ??_fillRect 0028                                    ??_drawChar 0035  
                                   _LCD_Reset 3D00                             _DS3231_Write_Time 2CE8  
                               _setAddrWindow 3646                                __pintcode_body 2E9A  
                               Wait_One_Sec@k 0011                                    delay_ms@ms 0017  
                        end_of_initialization 319C                                 _Do_Setup_Time 2610  
                                   _INT1_flag 00F6                           __size_of_Test_Alarm 0108  
                                   _INT2_flag 00F7                                    ??_drawtext 0041  
                          ?_DS3231_Write_Time 0001                                ?_Decrease_Time 0001  
               DS3231_Turn_On_Alarm@control_E 001D                 DS3231_Turn_On_Alarm@control_F 001E  
                              ?_write_command 0001                                 __Lmediumconst FCCA  
                   __size_of_DS3231_Read_Time 0064                                       int_func 2E9A  
                     DS3231_Read_Time@Address 0014                      DS3231_Write_Time@Address 0140  
                                  ?_I2C_Start 0001                            read_volt@voltage_t 002F  
                                  ?_I2C_Write 0001                                    get_RPM@RPS 00FD  
                    __end_of_Do_Save_New_Time 3C8A                                  _get_full_ADC 3A76  
                         ??_DS3231_Write_Time 0043                          ?_Go_Prev_Alarm_Field 0001  
                     check_for_button_input@j 003A                      ?_DS3231_Write_Alarm_Time 0001  
                                  _tempSecond 0080                          _DS3231_Turn_On_Alarm 3464  
                                   _RCSTAbits 000FAB                                       printf@c 0038  
                                     printf@f 001D                                       postdec1 000FE5  
                                     postdec2 000FDD                                       postinc0 000FEE  
                                     postinc2 000FDE                  __end_of_Increase_Heater_Temp 3C00  
                                  ??_spiwrite 0011                       ?_check_for_button_input 0001  
                                     strlen@s 0011                   I2C_Write_Cmd_Write_Data@Cmd 0013  
                                   _PORTAbits 000F80                              drawtext@cursor_x 013A  
                            drawtext@cursor_y 0139                                     _PORTBbits 000F81  
                                   _PORTCbits 000F82                              I2C_Write@outByte 0011  
      __end_of_Initialize_Setup_Heater_Screen 1FEC       __size_of_Initialize_Setup_Heater_Screen 00F2  
              _Initialize_Setup_Heater_Screen 1EFA                                    _setup_date 009D  
                                 ?_fillScreen 0024                __end_of_Exit_Setup_Heater_Temp 3DAC  
                                  _setup_hour 0069                                    _setup_time 00A6  
                                  _setup_year 006D                                   ?_drawCircle 001C  
             __size_of_DS3231_Read_Alarm_Time 004C                                    drawChar@bg 0032  
                   __end_of_DS3231_Write_Time 2D7A                                     _TRISAbits 000F92  
              DS3231_Turn_Off_Alarm@Address_E 001B                DS3231_Turn_Off_Alarm@Address_F 001C  
                                   _TRISCbits 000F94                        __size_of_Go_Next_Field 0018  
      I2C_Write_Address_Read_One_Byte@Address 0014                                  ??_i2cHighSda 0011  
                                ??_i2cHighScl 0011                        ??_Decrease_Heater_Temp 0043  
                           __size_of_I2C_Init 000A                             __size_of_I2C_Read 0048  
                           __size_of_I2C_Stop 0012                                ?_setAddrWindow 0014  
                                  ?_LCD_Reset 0001                                ?_Do_Setup_Time 0001  
                        _In_Heater_Temp_Setup 00F9                              drawtext@textsize 0135  
                                  drawPixel@x 001B                                    drawPixel@y 0018  
                                 _DS1621_Init 3B48                                   _DS3231_Init 285E  
                                 ___ftdiv@exp 0039                                   printf@width 0036  
                                   _TXSTAbits 000FAC                               ??_Set_RGB_Color 0011  
                       ??_Go_Prev_Alarm_Field 0031             __size_of_Update_Setup_Time_Screen 01A8  
                          get_full_ADC@result 0015                     ?_Update_Setup_Time_Screen 0001  
                       ?_DS3231_Turn_On_Alarm 0001                             __size_of_INT0_isr 0188  
                           __size_of_INT1_isr 000A                             __size_of_INT2_isr 000A  
                              __end_of_i2cAck 3D6C                                   ___ftmul@exp 0026  
                      __size_of_Go_Prev_Field 0018                ??_Initialize_Setup_Time_Screen 0043  
                     ?_Do_Save_New_Alarm_Time 0001                          __size_of_Do_Beep_Bad 0014  
                    DS1621_Read_Temp@Data_Ret 0017                                   _Turn_On_Fan 3D7C  
              __end_of_check_for_button_input 30B4                              ??_Init_Interrupt 0011  
          Update_Setup_Heater_Screen@dc_char1 00FD            Update_Setup_Heater_Screen@dc_char2 00FE  
          Update_Setup_Heater_Screen@dc_char3 00FF                            __end_of_i2cHighSda 3E6C  
                              __end_of___ftge 2BC0                            __end_of_i2cHighScl 3E04  
                              __end_of___wmul 3A76                                 delay_ms@count 001B  
                                  _write_data 3DBC                                 __pidataCOMRAM 3E74  
                              __end_of_chkisr 2F2A                      ?_TFT_GreenTab_Initialize 0001  
                                 _I2C_ReStart 3C60                                    drawtext@bg 003E  
                       _Exit_Setup_Alarm_Time 3DAC                        ?_Activate_Buzzer_500Hz 0001  
                                   _Nec_code1 00FB                                     _i2cLowSda 3E2E  
                        _Do_Setup_Heater_Temp 2C54                                     _i2cLowScl 3E5C  
                __size_of_Increase_Alarm_Time 004E                          __end_of_Wait_One_Sec 3B9E  
                              __end_of_printf 0D48                                  ??_Set_DC_RGB 0043  
                       __end_of_Increase_Time 2E0A                                __end_of_strcpy 39CA  
                              __end_of_strlen 387C                                     _Nec_state 0051  
                         start_initialization 3132                        Update_Screen@neg_tempF 013C  
                          get_duty_cycle@diff 0017                               ??_Decrease_Time 0043  
                          get_duty_cycle@temp 0011                               ??_write_command 0013  
             __end_of_DS3231_Write_Alarm_Time 3132                                     _OpenUSART 31A6  
              __size_of_DS3231_Turn_Off_Alarm 0052                  DS3231_Read_Alarm_Time@Device 0015  
               __end_of_DS3231_Turn_Off_Alarm 3508                              __CFG_OSC$INTIO67 000000  
                                 ??_I2C_Start 0011                             __size_of_Init_ADC 000E  
                                 ??_I2C_Write 0011                        _DS3231_Read_Alarm_Time 3694  
                                    ??_i2cAck 0011                             __size_of_Rcmd2red 003E  
                         __size_of_fillScreen 001C       I2C_Write_Address_Read_One_Byte@Data_Ret 0015  
              __end_of_Do_Save_New_Alarm_Time 3C60                           __size_of_drawCircle 01AE  
                               _Go_Next_Field 3BD0                            __end_of_Set_DC_RGB 2C54  
                                    ??___ftge 0017                                      ??___wmul 0015  
                                ?_Set_RPM_RGB 0041                                  ??_Test_Alarm 0044  
                               ?_Turn_Off_Fan 0001                                      ??_chkisr 0003  
                                 __pdataBANK0 0080                                   __pdataBANK1 0100  
                             setAddrWindow@x0 0017                               setAddrWindow@x1 0015  
                             setAddrWindow@y0 0014                               setAddrWindow@y1 0016  
                                    ??_printf 002B                              _DS1621_Read_Temp 38F6  
                       ?_Do_Setup_Heater_Temp 0001                                      ??_strcpy 0015  
                                    ??_strlen 0013                                    ?_i2cLowSda 0001  
                                  ?_i2cLowScl 0001                           _Decrease_Alarm_Time 35F8  
                                   _bcd_2_dec 39FA                             __size_of___awtoft 003C  
                           __size_of___ftpack 00C6                             __size_of___lbtoft 0026  
                     _Do_Save_New_Heater_Temp 3C8A                                   __pbssCOMRAM 0044  
                  ??_I2C_Write_Cmd_Write_Data 0015                    __size_of_DS3231_Write_Time 0092  
                             ??_setAddrWindow 0017                                 __pcstackBANK0 00FD  
                               __pcstackBANK1 0134                                 _Go_Prev_Field 3BB8  
                             ??_Do_Setup_Time 0044                                     _dec_2_bcd 3216  
                             _Exit_Time_Setup 3D8C                                   ??_LCD_Reset 001D  
                                _isdigit$2773 0012                             __size_of_delay_ms 0052  
                               _Heater_SW_Txt 00D5                          _Increase_Heater_Temp 3BE8  
                                    ?_Do_Init 0001                             __size_of_fillRect 004A  
                           __size_of_drawChar 0156                            __end_of_Test_Alarm 1E02  
                                  ?_OpenUSART 0011                              _DS3231_Read_Time 32E4  
                         _Heater_Set_Temp_Txt 00BE                                      ?_i2cNack 0001  
                        ?_Decrease_Alarm_Time 0001                             __size_of_drawtext 010E  
                               ?_Do_Beep_Good 0001                        ??_DS3231_Turn_On_Alarm 001B  
 __end_of_Update_Setup_Screen_Cursor_Backward 1290  __size_of_Update_Setup_Screen_Cursor_Backward 01B4  
       ??_Update_Setup_Screen_Cursor_Backward 002E          ?_Update_Setup_Screen_Cursor_Backward 0001  
         _Update_Setup_Screen_Cursor_Backward 10DC                   __end_of_Do_Setup_Alarm_Time 285E  
                              ?_Go_Next_Field 0001                              ___lwdiv@dividend 0011  
                                 I2C_Read@ack 0011                                     _bit_count 0059  
                                   __pintcode 0008               __end_of_TFT_GreenTab_Initialize 3A4E  
                              ??_Turn_Off_Fan 0011                                 __pmediumconst FCCA  
                                    ?___awdiv 0134                                     __ptext100 3AC2  
                                   __ptext101 3DEA                                     __ptext110 3776  
                                   __ptext102 3E1A                                     __ptext111 3E24  
                                   __ptext103 3B48                                     __ptext120 3E38  
                                   __ptext112 3D5A                                     __ptext104 3B28  
                                   __ptext121 3E42                                     __ptext113 3C60  
                                   __ptext105 3B9E                                     __ptext122 15E6  
                                   __ptext114 3E2E                                     __ptext106 38F6  
                                   __ptext123 3E6C                                     __ptext115 3E5C  
                                   __ptext107 387C                                     __ptext116 3E64  
                                   __ptext108 3D36                                     __ptext117 3DF8  
                                   __ptext109 3D48                                     __ptext119 3E04  
                                    ?___awmod 003B                                      ?___ftdiv 002C  
                                    ?___ftmul 001D                                      ?___fttol 002C  
                     __size_of_get_duty_cycle 00CC                                     __tft_type 0054  
                                    ?___lwdiv 0011                            _I2C_Write_Cmd_Only 3B9E  
                                    ?___lwmod 0018                                Set_DC_RGB@temp 013E  
                 __end_of_Go_Next_Alarm_Field 3C48                DS3231_Turn_Off_Alarm@control_E 001D  
              DS3231_Turn_Off_Alarm@control_F 001E                            drawFastVLine@color 001A  
                                 ?_write_data 0001                        ?_Exit_Setup_Alarm_Time 0001  
                                   _drawPixel 39CA                                      ?_get_RPM 0041  
                           __size_of_spiwrite 0014                                    ?_bcd_2_dec 0001  
                      __size_of_Toggle_Heater 0010                           ?_I2C_Write_Cmd_Only 0013  
                           ?_force_nec_state0 0001                                      ?_isdigit 0001  
                                    _I2C_Init 3E1A                                      _I2C_Read 3776  
                              ?_Go_Prev_Field 0001                                      _I2C_Stop 3D36  
                           _Initialize_Screen 066E                                __size_of_Rcmd1 0110  
                              __size_of_Rcmd3 00F2                  ??_Update_Setup_Heater_Screen 0043  
                                   _init_UART 3CDA                                    ?_dec_2_bcd 0041  
                          ??_force_nec_state0 0001                      I2C_Write_Cmd_Only@Device 0014  
                                   _hexpowers FEB0                            ?_Initialize_Screen 0001  
                            ___lwdiv@quotient 0015                                __size_of_putch 000E  
                                   _read_volt 355A                         ?_Increase_Heater_Temp 0001  
                            Set_DC_RGB@output 013C      __end_of_I2C_Write_Address_Write_One_Byte 3B28  
   __size_of_I2C_Write_Address_Write_One_Byte 0020            ??_I2C_Write_Address_Write_One_Byte 0015  
           ?_I2C_Write_Address_Write_One_Byte 0013              _I2C_Write_Address_Write_One_Byte 3B08  
                       ??_Decrease_Alarm_Time 0043                                ___wmul@product 0015  
                              ??_Do_Beep_Good 0044                           ??_Initialize_Screen 0043  
                                _Select_Field 0053                                      _INT0_isr 15E6  
                                    _INT1_isr 3E42                                      _INT2_isr 3E38  
                        ??_I2C_Write_Cmd_Only 0014                                      _PIE1bits 000F9D  
                           ?_Do_Save_New_Time 0001                        __size_of_Update_Screen 0652  
                      DS3231_Read_Time@Device 0015                       DS3231_Write_Time@Device 013F  
                                    _PIR1bits 000F9E                                 _In_Time_Setup 00FA  
                          ??_Do_Save_New_Time 0043                         __size_of_Wait_One_Sec 001C  
                                   _setup_day 0067                             DS1621_Init@Device 0016  
                                   fillRect@h 0025                                     fillRect@i 002C  
                                   fillRect@w 0024                                     fillRect@x 002B  
                                   fillRect@y 0023                        ??_Do_Setup_Heater_Temp 013C  
                                   drawChar@c 002F                                     drawChar@i 0038  
                                   drawChar@j 0037                                     drawChar@x 0036  
                                   drawChar@y 002E                 __size_of_Activate_Buzzer_2KHz 0012  
               __size_of_Activate_Buzzer_4KHz 0012                                    ?_drawPixel 0018  
                      __size_of_fillRectangle 00DC                     ??_Do_Save_New_Heater_Temp 0043  
                                  _ADCON0bits 000FC2                       __end_of_Exit_Time_Setup 3D9C  
                           ___wmul@multiplier 0011                     __end_of_Initialize_Screen 09EE  
                                 ??_i2cLowSda 0011                                   ??_i2cLowScl 0011  
               DS3231_Read_Alarm_Time@Address 0014                                  ??_fillScreen 0026  
            __size_of_DS3231_Write_Alarm_Time 007E                                  ??_drawCircle 0024  
                                  printf@flag 0035                                    printf@prec 0032  
                                  ?_init_UART 0001              __end_of_Update_Setup_Time_Screen 15E6  
                                 _INTCON2bits 000FF1       __end_of_I2C_Write_Address_Read_One_Byte 3998  
    __size_of_I2C_Write_Address_Read_One_Byte 0032             ??_I2C_Write_Address_Read_One_Byte 0015  
            ?_I2C_Write_Address_Read_One_Byte 0014               _I2C_Write_Address_Read_One_Byte 3966  
                                 _INTCON3bits 000FF0                                     copy_data0 315E  
                                   copy_data1 317E                                     drawtext@i 0137  
                      __size_of_drawFastVLine 0088                                     drawtext@x 0134  
                                   drawtext@y 0039                                    ?_read_volt 002C  
                                    _Nec_code 00E3                                      _Init_ADC 3DEA  
                           write_command@cmd_ 0013    __end_of_Initialize_Setup_Alarm_Time_Screen 1CFA  
 __size_of_Initialize_Setup_Alarm_Time_Screen 010C          ??_Initialize_Setup_Alarm_Time_Screen 0043  
         ?_Initialize_Setup_Alarm_Time_Screen 0001            _Initialize_Setup_Alarm_Time_Screen 1BEE  
                                 ??_OpenUSART 0013                                  ?_DS1621_Init 0001  
                                    _Rcmd2red 3800                              __size_of_Do_Init 005C  
                         __size_of_write_data 0010                                  ?_DS3231_Init 0001  
                             ??_Go_Next_Field 0031                               OpenUSART@config 0013  
      I2C_Write_Address_Write_One_Byte@Device 0015                                 _Toggle_Heater 3D6C  
                                _Time_Elapsed 004A                           _Increase_Alarm_Time 35AA  
                            __size_of_i2cNack 000A                                 _RTC_ALARM_Txt 00E1  
                                _Wait_One_Sec 3B82                                      __Hrparam 0000  
                      __size_of_do_update_pwm 00B6                            __end_of_fillScreen 3B82  
                                    __Lrparam 0000                            __end_of_drawCircle 143E  
                                ?_Turn_On_Fan 0001                       ??_Activate_Buzzer_500Hz 0011  
                            __size_of___awdiv 00D0                              __size_of___awmod 0082  
                            __size_of___ftdiv 00E2                              __size_of___ftmul 00F8  
                            __size_of___fttol 00E6                              __size_of___lwdiv 005C  
                                    _Volt_Txt 00B8                              __size_of___lwmod 004C  
                        __size_of_Set_RPM_RGB 00B2                                      ___awtoft 38BA  
                                    ___ftpack 26DA                                      ___lbtoft 3A9C  
                                ?_I2C_ReStart 0001                               ??_Go_Prev_Field 0031  
                            __size_of_get_RPM 0042                                   ??_bcd_2_dec 0011  
                        ?_Increase_Alarm_Time 0001                                 _Update_Screen 001C  
                            __size_of_isdigit 0022                                      _delay_ms 3508  
                             ___lwdiv@divisor 0013                                   ??_dec_2_bcd 00FD  
                             ___lwdiv@counter 0017                                      __ptext10 3464  
                                    __ptext11 34B6                                      __ptext20 3D7C  
                                    __ptext12 285E                                      __ptext21 2610  
                                    __ptext13 3B08                                      __ptext30 143E  
                                    __ptext22 1AE2                                      __ptext14 3966  
                                    __ptext31 2C54                                      __ptext23 2D7A  
                                    __ptext15 3CEE                                      __ptext40 39FA  
                                    __ptext32 1EFA                                      __ptext24 3BB8  
                                    __ptext16 29CC                                      __ptext41 1BEE  
                                    __ptext33 3BE8                                      __ptext25 3BD0  
                                    __ptext17 2BC0                                      __ptext50 3998  
                                    __ptext42 35AA                                      __ptext34 3D9C  
                                    __ptext26 3D8C                                      __ptext18 327E  
                                    __ptext51 3B66                                      __ptext43 3C18  
                                    __ptext35 3C8A                                      __ptext27 3C76  
                                    __ptext19 2544                                      __ptext60 30B4  
                                    __ptext52 2398                                      __ptext44 10DC  
                                    __ptext36 3C00                                      __ptext28 2CE8  
                                    __ptext61 3216                                      __ptext53 1290  
                                    __ptext45 3C30                                      __ptext37 2A7E  
                                    __ptext29 2E0A                                      __ptext70 1E02  
                                    __ptext62 32E4                                      __ptext54 3A24  
                                    __ptext46 0F22                                      __ptext38 27A0  
                                    __ptext71 22B6                                      __ptext63 3694  
                                    __ptext55 1FEC                                      __ptext47 3DAC  
                                    __ptext39 3034                                      __ptext80 3AE6  
                                    __ptext72 26DA                                      __ptext64 3C9E  
                                    __ptext56 3800                                      __ptext48 3C48  
                                    __ptext81 36E0                                      __ptext73 3B82  
                                    __ptext65 3D12                                      __ptext57 18C4  
                                    __ptext49 066E                                      __ptext90 3DBC  
                                    __ptext82 33AC                                      __ptext74 3E54  
                                    __ptext66 3CB2                                      __ptext58 3D00  
                                    __ptext91 3DCC                                      __ptext83 19D4  
                                    __ptext75 3D24                                      __ptext67 2916  
                                    __ptext59 3508                                      __ptext92 3CC6  
                                    __ptext84 383E                                      __ptext76 35F8  
                                    __ptext68 3A9C                                      __ptext93 3A4E  
                                    __ptext85 176E                                      __ptext77 20DE  
                                    __ptext69 21D0                                      __ptext94 2FB2  
                                    __ptext86 372C                                      __ptext78 09EE  
                                    __ptext95 2474                                      __ptext87 2F2A  
                                    __ptext79 3DDC                                      __ptext96 3408  
                                    __ptext88 39CA                                      __ptext97 3CDA  
                                    __ptext89 3646                                      __ptext98 31A6  
                                    __ptext99 3E10                        ??_Increase_Heater_Temp 0043  
                                    _fillRect 372C                                      _drawChar 176E  
                        __end_of_Turn_Off_Fan 3E1A              __size_of_TFT_GreenTab_Initialize 002A  
               __size_of_Decrease_Heater_Temp 0018    __end_of_Update_Setup_Screen_Cursor_Forward 10DC  
 __size_of_Update_Setup_Screen_Cursor_Forward 01BA          ??_Update_Setup_Screen_Cursor_Forward 002E  
         ?_Update_Setup_Screen_Cursor_Forward 0001            _Update_Setup_Screen_Cursor_Forward 0F22  
                                    _colstart 005A                   __end_of_Go_Prev_Alarm_Field 3C30  
                                    _drawtext 19D4                                    strcpy@from 0013  
                     ?_DS3231_Read_Alarm_Time 0001                                 _fillRectangle 2398  
              DS3231_Write_Alarm_Time@Address 0140                                ?_Toggle_Heater 0001  
                    __end_of_DS1621_Read_Temp 3932                                 __size_of_main 01DA  
                               ??_Do_Beep_Bad 0044                       __size_of_Monitor_Heater 0066  
                       __end_of_Set_RGB_Color 3E54                               fillRectangle@hi 0021  
                             fillRectangle@lo 0022                 Update_Screen@neg_DS1621_tempC 013E  
                              _get_duty_cycle 2544                                 _drawFastVLine 2F2A  
                                   printf@idx 002F                                      _spiwrite 3CC6  
                                   printf@val 0033                             DS3231_Init@Device 001A  
                           Set_RPM_RGB@output 013C                                   ??_drawPixel 001B  
                                    _rowstart 0062                      __end_of_DS3231_Read_Time 3348  
                       ??_Increase_Alarm_Time 0043                    __size_of_Initialize_Screen 0380  
                            ?_Exit_Time_Setup 0001                          __end_of_Do_Beep_Good 3CB2  
                              ?_Update_Screen 0001                                    _INTCONbits 000FF2  
          __end_of_Update_Setup_Heater_Screen 2B2A                    _Update_Setup_Heater_Screen 2A7E  
                               _do_update_pwm 2916                                OpenUSART@spbrg 0011  
                                 ??_init_UART 0014                                      isdigit@c 0013  
              __end_of_DS3231_Read_Alarm_Time 36E0                                   ??_read_volt 002F  
                                   spiwrite@x 0011                                      intlevel2 0000  
                              ?_fillRectangle 0018                         __end_of_Decrease_Time 2E9A  
                    _Update_Setup_Time_Screen 143E                              ___lwmod@dividend 0018  
                       __end_of_write_command 3DDC                               fillScreen@color 0024  
                       _DS3231_Turn_Off_Alarm 34B6                 DS3231_Write_Alarm_Time@Device 013F  
                     do_update_pwm@duty_cycle 0041                        __end_of_get_duty_cycle 2610  
                      __size_of_Increase_Time 0090                      _Select_Heater_Temp_Field 00FC  
                              fillRectangle@h 001A                                fillRectangle@w 0019  
                              fillRectangle@x 0023                                fillRectangle@y 0018  
                     ??_Exit_Setup_Alarm_Time 0043                                ?_drawFastVLine 0018  
                                    printf@ap 0030                      ??_Exit_Setup_Heater_Temp 0043  
                         __end_of_Do_Beep_Bad 3CC6                                  ??_write_data 0013  
                                  _TIMER1_isr 3E04                                 fillRect@color 0026  
                     _DS3231_Write_Alarm_Time 30B4                                ?_do_update_pwm 0001  
                             ___lwmod@divisor 001A                                      strcpy@cp 0015  
                                    strlen@cp 0015                                      strcpy@to 0011  
                       I2C_Write_Cmd_Only@Cmd 0013                               ___lwmod@counter 001C  
                                _setup_minute 006A                                  _setup_second 006C  
                     __size_of_Init_Interrupt 0024                               Set_RPM_RGB@temp 013E  
                       __end_of_setAddrWindow 3694                         __end_of_Do_Setup_Time 26DA  
                          fillRectangle@color 001B                               ??_Toggle_Heater 0011  
                           do_update_pwm@dc_I 0042                             do_update_pwm@dc_f 003E  
                               drawChar@color 0030                                   _setup_month 006B  
                              Set_RPM_RGB@rpm 0041                            __end_of_write_data 3DCC  
                   __size_of_force_nec_state0 0008                                  drawChar@line 0035  
                               ?_get_full_ADC 0011                      ??_check_for_button_input 0039  
                                drawChar@size 0034             __size_of_I2C_Write_Cmd_Write_Data 0020  
                        __size_of_DS1621_Init 001E                     ?_I2C_Write_Cmd_Write_Data 0013  
                        __size_of_DS3231_Init 00B8                               ?_get_duty_cycle 0011  
               __size_of_DS3231_Turn_On_Alarm 0052        __end_of_Update_Setup_Alarm_Time_Screen 21D0  
     __size_of_Update_Setup_Alarm_Time_Screen 00F2                _Update_Setup_Alarm_Time_Screen 20DE  
