

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Oct 06 17:02:44 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    41  0000                     
    42                           	psect	idataBANK0
    43  002A6A                     __pidataBANK0:
    44                           	opt stack 0
    45                           
    46                           ;initializer for main@F4279
    47  002A6A  01                 	db	1
    48  002A6B  4F                 	db	79
    49  002A6C  12                 	db	18
    50  002A6D  06                 	db	6
    51  002A6E  4C                 	db	76
    52  002A6F  24                 	db	36
    53  002A70  20                 	db	32
    54  002A71  0F                 	db	15
    55  002A72  00                 	db	0
    56  002A73  04                 	db	4
    57                           
    58                           	psect	smallconst
    59  001000                     __psmallconst:
    60                           	opt stack 0
    61  001000  00                 	db	0
    62  001001                     _dpowers:
    63                           	opt stack 0
    64  001001  0001               	dw	1
    65  001003  0000               	dw	0
    66  001005  000A               	dw	10
    67  001007  0000               	dw	0
    68  001009  0064               	dw	100
    69  00100B  0000               	dw	0
    70  00100D  03E8               	dw	1000
    71  00100F  0000               	dw	0
    72  001011  2710               	dw	10000
    73  001013  0000               	dw	0
    74  001015  86A0               	dw	34464
    75  001017  0001               	dw	1
    76  001019  4240               	dw	16960
    77  00101B  000F               	dw	15
    78  00101D  9680               	dw	38528
    79  00101F  0098               	dw	152
    80  001021  E100               	dw	57600
    81  001023  05F5               	dw	1525
    82  001025  CA00               	dw	51712
    83  001027  3B9A               	dw	15258
    84  001029                     __end_of_dpowers:
    85                           	opt stack 0
    86  001029                     __npowers_:
    87                           	opt stack 0
    88  001029  00                 	db	0
    89  00102A  80                 	db	128
    90  00102B  3F                 	db	63
    91  00102C  CD                 	db	205
    92  00102D  CC                 	db	204
    93  00102E  3D                 	db	61
    94  00102F  D7                 	db	215
    95  001030  23                 	db	35
    96  001031  3C                 	db	60
    97  001032  12                 	db	18
    98  001033  83                 	db	131
    99  001034  3A                 	db	58
   100  001035  B7                 	db	183
   101  001036  D1                 	db	209
   102  001037  38                 	db	56
   103  001038  C6                 	db	198
   104  001039  27                 	db	39
   105  00103A  37                 	db	55
   106  00103B  38                 	db	56
   107  00103C  86                 	db	134
   108  00103D  35                 	db	53
   109  00103E  C0                 	db	192
   110  00103F  D6                 	db	214
   111  001040  33                 	db	51
   112  001041  CC                 	db	204
   113  001042  2B                 	db	43
   114  001043  32                 	db	50
   115  001044  70                 	db	112
   116  001045  89                 	db	137
   117  001046  30                 	db	48
   118  001047  E7                 	db	231
   119  001048  DB                 	db	219
   120  001049  2E                 	db	46
   121  00104A  E5                 	db	229
   122  00104B  3C                 	db	60
   123  00104C  1E                 	db	30
   124  00104D  42                 	db	66
   125  00104E  A2                 	db	162
   126  00104F  0D                 	db	13
   127  001050                     __end_of__npowers_:
   128                           	opt stack 0
   129  001050                     __powers_:
   130                           	opt stack 0
   131  001050  00                 	db	0
   132  001051  80                 	db	128
   133  001052  3F                 	db	63
   134  001053  00                 	db	0
   135  001054  20                 	db	32
   136  001055  41                 	db	65
   137  001056  00                 	db	0
   138  001057  C8                 	db	200
   139  001058  42                 	db	66
   140  001059  00                 	db	0
   141  00105A  7A                 	db	122
   142  00105B  44                 	db	68
   143  00105C  40                 	db	64
   144  00105D  1C                 	db	28
   145  00105E  46                 	db	70
   146  00105F  50                 	db	80
   147  001060  C3                 	db	195
   148  001061  47                 	db	71
   149  001062  24                 	db	36
   150  001063  74                 	db	116
   151  001064  49                 	db	73
   152  001065  97                 	db	151
   153  001066  18                 	db	24
   154  001067  4B                 	db	75
   155  001068  BC                 	db	188
   156  001069  BE                 	db	190
   157  00106A  4C                 	db	76
   158  00106B  6B                 	db	107
   159  00106C  6E                 	db	110
   160  00106D  4E                 	db	78
   161  00106E  03                 	db	3
   162  00106F  15                 	db	21
   163  001070  50                 	db	80
   164  001071  79                 	db	121
   165  001072  AD                 	db	173
   166  001073  60                 	db	96
   167  001074  F3                 	db	243
   168  001075  49                 	db	73
   169  001076  71                 	db	113
   170  001077                     __end_of__powers_:
   171                           	opt stack 0
   172  0000                     _ADCON0	set	4034
   173  0000                     _ADCON0bits	set	4034
   174  0000                     _ADCON1	set	4033
   175  0000                     _ADCON2	set	4032
   176  0000                     _ADRESH	set	4036
   177  0000                     _ADRESL	set	4035
   178  0000                     _OSCCON	set	4051
   179  0000                     _PIE1bits	set	3997
   180  0000                     _PIR1bits	set	3998
   181  0000                     _PORTC	set	3970
   182  0000                     _PORTD	set	3971
   183  0000                     _PORTDbits	set	3971
   184  0000                     _PORTE	set	3972
   185  0000                     _RCSTA	set	4011
   186  0000                     _RCSTAbits	set	4011
   187  0000                     _SPBRG	set	4015
   188  0000                     _SPBRGH	set	4016
   189  0000                     _TRISA	set	3986
   190  0000                     _TRISC	set	3988
   191  0000                     _TRISCbits	set	3988
   192  0000                     _TRISD	set	3989
   193  0000                     _TRISE	set	3990
   194  0000                     _TXREG	set	4013
   195  0000                     _TXSTA	set	4012
   196  0000                     _TXSTAbits	set	4012
   197  0000                     _TRMT	set	32097
   198  001077                     STR_1:
   199  001077  56                 	db	86	;'V'
   200  001078  6F                 	db	111	;'o'
   201  001079  6C                 	db	108	;'l'
   202  00107A  74                 	db	116	;'t'
   203  00107B  61                 	db	97	;'a'
   204  00107C  67                 	db	103	;'g'
   205  00107D  65                 	db	101	;'e'
   206  00107E  3A                 	db	58	;':'
   207  00107F  20                 	db	32
   208  001080  25                 	db	37
   209  001081  66                 	db	102	;'f'
   210  001082  0D                 	db	13
   211  001083  0A                 	db	10
   212  001084  00                 	db	0
   213                           
   214                           ; #config settings
   215  001085  00                 	db	0	; dummy byte at the end
   216  0000                     
   217                           	psect	cinit
   218  002948                     __pcinit:
   219                           	opt stack 0
   220  002948                     start_initialization:
   221                           	opt stack 0
   222  002948                     __initialization:
   223                           	opt stack 0
   224                           
   225                           ; Initialize objects allocated to BANK0 (10 bytes)
   226                           ; load TBLPTR registers with __pidataBANK0
   227  002948  0E6A               	movlw	low __pidataBANK0
   228  00294A  6EF6               	movwf	tblptrl,c
   229  00294C  0E2A               	movlw	high __pidataBANK0
   230  00294E  6EF7               	movwf	tblptrh,c
   231  002950  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   232  002952  6EF8               	movwf	tblptru,c
   233  002954  EE00  F095         	lfsr	0,__pdataBANK0
   234  002958  EE10 F00A          	lfsr	1,10
   235  00295C                     copy_data0:
   236  00295C  0009               	tblrd		*+
   237  00295E  CFF5 FFEE          	movff	tablat,postinc0
   238  002962  50E5               	movf	postdec1,w,c
   239  002964  50E1               	movf	fsr1l,w,c
   240  002966  E1FA               	bnz	copy_data0
   241  002968                     end_of_initialization:
   242                           	opt stack 0
   243  002968                     __end_of__initialization:
   244                           	opt stack 0
   245  002968  0E00               	movlw	low (__Lmediumconst shr (0+16))
   246  00296A  6EF8               	movwf	tblptru,c
   247  00296C  0100               	movlb	0
   248  00296E  EF4A  F00F         	goto	_main	;jump to C main() function
   249                           tblptru	equ	0xFF8
   250                           tblptrh	equ	0xFF7
   251                           tblptrl	equ	0xFF6
   252                           tablat	equ	0xFF5
   253                           postinc0	equ	0xFEE
   254                           postdec1	equ	0xFE5
   255                           fsr1l	equ	0xFE1
   256                           
   257                           	psect	dataBANK0
   258  000095                     __pdataBANK0:
   259                           	opt stack 0
   260  000095                     main@F4279:
   261                           	opt stack 0
   262  000095                     	ds	10
   263                           tblptru	equ	0xFF8
   264                           tblptrh	equ	0xFF7
   265                           tblptrl	equ	0xFF6
   266                           tablat	equ	0xFF5
   267                           postinc0	equ	0xFEE
   268                           postdec1	equ	0xFE5
   269                           fsr1l	equ	0xFE1
   270                           
   271                           	psect	cstackBANK0
   272  000080                     __pcstackBANK0:
   273                           	opt stack 0
   274  000080                     main@LED_7seg:
   275                           	opt stack 0
   276                           
   277                           ; 10 bytes @ 0x0
   278  000080                     	ds	10
   279  00008A                     main@num_step:
   280                           	opt stack 0
   281                           
   282                           ; 3 bytes @ 0xA
   283  00008A                     	ds	3
   284  00008D                     main@u:
   285                           	opt stack 0
   286                           
   287                           ; 2 bytes @ 0xD
   288  00008D                     	ds	2
   289  00008F                     main@l:
   290                           	opt stack 0
   291                           
   292                           ; 2 bytes @ 0xF
   293  00008F                     	ds	2
   294  000091                     main@t:
   295                           	opt stack 0
   296                           
   297                           ; 1 bytes @ 0x11
   298  000091                     	ds	1
   299  000092                     main@voltage:
   300                           	opt stack 0
   301                           
   302                           ; 3 bytes @ 0x12
   303  000092                     	ds	3
   304                           tblptru	equ	0xFF8
   305                           tblptrh	equ	0xFF7
   306                           tblptrl	equ	0xFF6
   307                           tablat	equ	0xFF5
   308                           postinc0	equ	0xFEE
   309                           postdec1	equ	0xFE5
   310                           fsr1l	equ	0xFE1
   311                           
   312                           	psect	cstackCOMRAM
   313  000001                     __pcstackCOMRAM:
   314                           	opt stack 0
   315  000001                     ?_get_full_ADC:
   316                           	opt stack 0
   317  000001                     ?___ftpack:
   318                           	opt stack 0
   319  000001                     ?___ftneg:
   320                           	opt stack 0
   321  000001                     ?__tdiv_to_l_:
   322                           	opt stack 0
   323  000001                     ?__div_to_l_:
   324                           	opt stack 0
   325  000001                     ?___lldiv:
   326                           	opt stack 0
   327  000001                     ?___llmod:
   328                           	opt stack 0
   329  000001                     putch@c:
   330                           	opt stack 0
   331  000001                     Select_ADC_Channel@channel:
   332                           	opt stack 0
   333  000001                     Delay_One_Sec@I:
   334                           	opt stack 0
   335  000001                     OpenUSART@spbrg:
   336                           	opt stack 0
   337  000001                     __div_to_l_@f1:
   338                           	opt stack 0
   339  000001                     ___ftpack@arg:
   340                           	opt stack 0
   341  000001                     __tdiv_to_l_@f1:
   342                           	opt stack 0
   343  000001                     ___ftge@ff1:
   344                           	opt stack 0
   345  000001                     ___ftneg@f1:
   346                           	opt stack 0
   347  000001                     ___lldiv@dividend:
   348                           	opt stack 0
   349  000001                     ___llmod@dividend:
   350                           	opt stack 0
   351                           
   352                           ; 4 bytes @ 0x0
   353  000001                     	ds	2
   354  000003                     ??_get_full_ADC:
   355  000003                     OpenUSART@config:
   356                           	opt stack 0
   357                           
   358                           ; 1 bytes @ 0x2
   359  000003                     	ds	1
   360  000004                     ___ftpack@exp:
   361                           	opt stack 0
   362  000004                     __div_to_l_@f2:
   363                           	opt stack 0
   364  000004                     __tdiv_to_l_@f2:
   365                           	opt stack 0
   366  000004                     ___ftge@ff2:
   367                           	opt stack 0
   368                           
   369                           ; 3 bytes @ 0x3
   370  000004                     	ds	1
   371  000005                     ___ftpack@sign:
   372                           	opt stack 0
   373  000005                     get_full_ADC@result:
   374                           	opt stack 0
   375  000005                     ___lldiv@divisor:
   376                           	opt stack 0
   377  000005                     ___llmod@divisor:
   378                           	opt stack 0
   379                           
   380                           ; 4 bytes @ 0x4
   381  000005                     	ds	1
   382  000006                     ??___ftpack:
   383                           
   384                           ; 0 bytes @ 0x5
   385  000006                     	ds	1
   386  000007                     ??__tdiv_to_l_:
   387  000007                     ??___ftge:
   388  000007                     __div_to_l_@quot:
   389                           	opt stack 0
   390                           
   391                           ; 4 bytes @ 0x6
   392  000007                     	ds	2
   393  000009                     ?___ftmul:
   394                           	opt stack 0
   395  000009                     ?___lltoft:
   396                           	opt stack 0
   397  000009                     ?___lwtoft:
   398                           	opt stack 0
   399  000009                     ___llmod@counter:
   400                           	opt stack 0
   401  000009                     ___lwtoft@c:
   402                           	opt stack 0
   403  000009                     ___ftmul@f1:
   404                           	opt stack 0
   405  000009                     ___lldiv@quotient:
   406                           	opt stack 0
   407  000009                     ___lltoft@c:
   408                           	opt stack 0
   409                           
   410                           ; 4 bytes @ 0x8
   411  000009                     	ds	1
   412  00000A                     __tdiv_to_l_@quot:
   413                           	opt stack 0
   414                           
   415                           ; 4 bytes @ 0x9
   416  00000A                     	ds	1
   417  00000B                     __div_to_l_@cntr:
   418                           	opt stack 0
   419                           
   420                           ; 1 bytes @ 0xA
   421  00000B                     	ds	1
   422  00000C                     __div_to_l_@exp1:
   423                           	opt stack 0
   424  00000C                     ___ftmul@f2:
   425                           	opt stack 0
   426                           
   427                           ; 3 bytes @ 0xB
   428  00000C                     	ds	1
   429  00000D                     ??___lltoft:
   430  00000D                     ___lldiv@counter:
   431                           	opt stack 0
   432                           
   433                           ; 1 bytes @ 0xC
   434  00000D                     	ds	1
   435  00000E                     __tdiv_to_l_@cntr:
   436                           	opt stack 0
   437                           
   438                           ; 1 bytes @ 0xD
   439  00000E                     	ds	1
   440  00000F                     ??___ftmul:
   441  00000F                     __tdiv_to_l_@exp1:
   442                           	opt stack 0
   443                           
   444                           ; 1 bytes @ 0xE
   445  00000F                     	ds	2
   446  000011                     ___lltoft@exp:
   447                           	opt stack 0
   448                           
   449                           ; 1 bytes @ 0x10
   450  000011                     	ds	1
   451  000012                     ___ftmul@exp:
   452                           	opt stack 0
   453                           
   454                           ; 1 bytes @ 0x11
   455  000012                     	ds	1
   456  000013                     ___ftmul@f3_as_product:
   457                           	opt stack 0
   458                           
   459                           ; 3 bytes @ 0x12
   460  000013                     	ds	3
   461  000016                     ___ftmul@cntr:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0x15
   465  000016                     	ds	1
   466  000017                     ___ftmul@sign:
   467                           	opt stack 0
   468                           
   469                           ; 1 bytes @ 0x16
   470  000017                     	ds	1
   471  000018                     ?___ftdiv:
   472                           	opt stack 0
   473  000018                     ?___fttol:
   474                           	opt stack 0
   475  000018                     ___ftdiv@f1:
   476                           	opt stack 0
   477  000018                     ___fttol@f1:
   478                           	opt stack 0
   479                           
   480                           ; 3 bytes @ 0x17
   481  000018                     	ds	3
   482  00001B                     ___ftdiv@f2:
   483                           	opt stack 0
   484                           
   485                           ; 3 bytes @ 0x1A
   486  00001B                     	ds	1
   487  00001C                     ??___fttol:
   488                           
   489                           ; 0 bytes @ 0x1B
   490  00001C                     	ds	2
   491  00001E                     ??___ftdiv:
   492                           
   493                           ; 0 bytes @ 0x1D
   494  00001E                     	ds	3
   495  000021                     ___ftdiv@cntr:
   496                           	opt stack 0
   497  000021                     ___fttol@sign1:
   498                           	opt stack 0
   499                           
   500                           ; 1 bytes @ 0x20
   501  000021                     	ds	1
   502  000022                     ___ftdiv@f3:
   503                           	opt stack 0
   504  000022                     ___fttol@lval:
   505                           	opt stack 0
   506                           
   507                           ; 4 bytes @ 0x21
   508  000022                     	ds	3
   509  000025                     ___ftdiv@exp:
   510                           	opt stack 0
   511                           
   512                           ; 1 bytes @ 0x24
   513  000025                     	ds	1
   514  000026                     ___ftdiv@sign:
   515                           	opt stack 0
   516  000026                     ___fttol@exp1:
   517                           	opt stack 0
   518                           
   519                           ; 1 bytes @ 0x25
   520  000026                     	ds	1
   521  000027                     ?___awmod:
   522                           	opt stack 0
   523  000027                     ___awmod@dividend:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0x26
   527  000027                     	ds	2
   528  000029                     ___awmod@divisor:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x28
   532  000029                     	ds	2
   533  00002B                     ___awmod@counter:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0x2A
   537  00002B                     	ds	1
   538  00002C                     ___awmod@sign:
   539                           	opt stack 0
   540                           
   541                           ; 1 bytes @ 0x2B
   542  00002C                     	ds	1
   543  00002D                     ?___awdiv:
   544                           	opt stack 0
   545  00002D                     ___awdiv@dividend:
   546                           	opt stack 0
   547                           
   548                           ; 2 bytes @ 0x2C
   549  00002D                     	ds	2
   550  00002F                     ___awdiv@divisor:
   551                           	opt stack 0
   552                           
   553                           ; 2 bytes @ 0x2E
   554  00002F                     	ds	2
   555  000031                     ___awdiv@counter:
   556                           	opt stack 0
   557                           
   558                           ; 1 bytes @ 0x30
   559  000031                     	ds	1
   560  000032                     ___awdiv@sign:
   561                           	opt stack 0
   562                           
   563                           ; 1 bytes @ 0x31
   564  000032                     	ds	1
   565  000033                     ___awdiv@quotient:
   566                           	opt stack 0
   567                           
   568                           ; 2 bytes @ 0x32
   569  000033                     	ds	2
   570  000035                     ?___wmul:
   571                           	opt stack 0
   572  000035                     ___wmul@multiplier:
   573                           	opt stack 0
   574                           
   575                           ; 2 bytes @ 0x34
   576  000035                     	ds	2
   577  000037                     ___wmul@multiplicand:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x36
   581  000037                     	ds	2
   582  000039                     ___wmul@product:
   583                           	opt stack 0
   584                           
   585                           ; 2 bytes @ 0x38
   586  000039                     	ds	2
   587  00003B                     ?_fround:
   588                           	opt stack 0
   589  00003B                     ?_scale:
   590                           	opt stack 0
   591                           
   592                           ; 3 bytes @ 0x3A
   593  00003B                     	ds	3
   594  00003E                     _fround$1090:
   595                           	opt stack 0
   596  00003E                     _scale$1091:
   597                           	opt stack 0
   598                           
   599                           ; 3 bytes @ 0x3D
   600  00003E                     	ds	3
   601  000041                     scale@scl:
   602                           	opt stack 0
   603  000041                     _fround$1089:
   604                           	opt stack 0
   605                           
   606                           ; 3 bytes @ 0x40
   607  000041                     	ds	3
   608  000044                     fround@prec:
   609                           	opt stack 0
   610                           
   611                           ; 1 bytes @ 0x43
   612  000044                     	ds	1
   613  000045                     ?___ftadd:
   614                           	opt stack 0
   615  000045                     ___ftadd@f1:
   616                           	opt stack 0
   617                           
   618                           ; 3 bytes @ 0x44
   619  000045                     	ds	3
   620  000048                     ___ftadd@f2:
   621                           	opt stack 0
   622                           
   623                           ; 3 bytes @ 0x47
   624  000048                     	ds	3
   625  00004B                     ??___ftadd:
   626                           
   627                           ; 0 bytes @ 0x4A
   628  00004B                     	ds	3
   629  00004E                     ___ftadd@sign:
   630                           	opt stack 0
   631                           
   632                           ; 1 bytes @ 0x4D
   633  00004E                     	ds	1
   634  00004F                     ___ftadd@exp2:
   635                           	opt stack 0
   636                           
   637                           ; 1 bytes @ 0x4E
   638  00004F                     	ds	1
   639  000050                     ___ftadd@exp1:
   640                           	opt stack 0
   641                           
   642                           ; 1 bytes @ 0x4F
   643  000050                     	ds	1
   644  000051                     ?___ftsub:
   645                           	opt stack 0
   646  000051                     ___ftsub@f1:
   647                           	opt stack 0
   648                           
   649                           ; 3 bytes @ 0x50
   650  000051                     	ds	3
   651  000054                     ___ftsub@f2:
   652                           	opt stack 0
   653                           
   654                           ; 3 bytes @ 0x53
   655  000054                     	ds	3
   656  000057                     ?_printf:
   657                           	opt stack 0
   658  000057                     printf@f:
   659                           	opt stack 0
   660                           
   661                           ; 2 bytes @ 0x56
   662  000057                     	ds	5
   663  00005C                     ??_printf:
   664                           
   665                           ; 0 bytes @ 0x5B
   666  00005C                     	ds	6
   667  000062                     _printf$1092:
   668                           	opt stack 0
   669                           
   670                           ; 3 bytes @ 0x61
   671  000062                     	ds	3
   672  000065                     printf@ap:
   673                           	opt stack 0
   674                           
   675                           ; 2 bytes @ 0x64
   676  000065                     	ds	2
   677  000067                     printf@flag:
   678                           	opt stack 0
   679                           
   680                           ; 2 bytes @ 0x66
   681  000067                     	ds	2
   682  000069                     printf@prec:
   683                           	opt stack 0
   684                           
   685                           ; 2 bytes @ 0x68
   686  000069                     	ds	2
   687  00006B                     printf@val:
   688                           	opt stack 0
   689                           
   690                           ; 4 bytes @ 0x6A
   691  00006B                     	ds	4
   692  00006F                     printf@exp:
   693                           	opt stack 0
   694                           
   695                           ; 2 bytes @ 0x6E
   696  00006F                     	ds	2
   697  000071                     printf@tmpval:
   698                           	opt stack 0
   699                           
   700                           ; 4 bytes @ 0x70
   701  000071                     	ds	4
   702  000075                     printf@fval:
   703                           	opt stack 0
   704                           
   705                           ; 3 bytes @ 0x74
   706  000075                     	ds	3
   707  000078                     printf@c:
   708                           	opt stack 0
   709                           
   710                           ; 1 bytes @ 0x77
   711  000078                     	ds	1
   712  000079                     tblptru	equ	0xFF8
   713                           tblptrh	equ	0xFF7
   714                           tblptrl	equ	0xFF6
   715                           tablat	equ	0xFF5
   716                           postinc0	equ	0xFEE
   717                           postdec1	equ	0xFE5
   718                           fsr1l	equ	0xFE1
   719                           
   720                           ; 0 bytes @ 0x78
   721 ;;
   722 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   723 ;;
   724 ;; *************** function _main *****************
   725 ;; Defined at:
   726 ;;		line 35 in file "Lab6pA.c"
   727 ;; Parameters:    Size  Location     Type
   728 ;;		None
   729 ;; Auto vars:     Size  Location     Type
   730 ;;  voltage         3   18[BANK0 ] float 
   731 ;;  num_step        3   10[BANK0 ] float 
   732 ;;  l               2   15[BANK0 ] int 
   733 ;;  u               2   13[BANK0 ] int 
   734 ;;  t               1   17[BANK0 ] unsigned char 
   735 ;;  LED_7seg       10    0[BANK0 ] unsigned char [10]
   736 ;; Return value:  Size  Location     Type
   737 ;;		None               void
   738 ;; Registers used:
   739 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   740 ;; Tracked objects:
   741 ;;		On entry : 0/0
   742 ;;		On exit  : 0/0
   743 ;;		Unchanged: 0/0
   744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   746 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   748 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   749 ;;Total ram usage:       21 bytes
   750 ;; Hardware stack levels required when called:    4
   751 ;; This function calls:
   752 ;;		_Delay_One_Sec
   753 ;;		_Init_ADC
   754 ;;		_Init_UART
   755 ;;		_Select_ADC_Channel
   756 ;;		___awmod
   757 ;;		___ftdiv
   758 ;;		___ftmul
   759 ;;		___fttol
   760 ;;		___lwtoft
   761 ;;		_get_full_ADC
   762 ;;		_printf
   763 ;; This function is called by:
   764 ;;		Startup code after reset
   765 ;; This function uses a non-reentrant model
   766 ;;
   767                           
   768                           	psect	text0
   769  001E94                     __ptext0:
   770                           	opt stack 0
   771  001E94                     _main:
   772                           	opt stack 27
   773                           
   774                           ;Lab6pA.c: 37: Init_UART();
   775                           
   776                           ;incstack = 0
   777  001E94  EC17  F015         	call	_Init_UART	;wreg free
   778                           
   779                           ;Lab6pA.c: 38: Init_ADC();
   780  001E98  EC28  F015         	call	_Init_ADC	;wreg free
   781                           
   782                           ;Lab6pA.c: 39: char LED_7seg[10] = {0x01,0x4F, 0x12, 0x06, 0x4C, 0x24, 0x20, 0x0F, 0x00,
      +                           0x04};
   783  001E9C  EE20  F095         	lfsr	2,main@F4279
   784  001EA0  EE10  F080         	lfsr	1,main@LED_7seg
   785  001EA4  0E09               	movlw	9
   786  001EA6                     u2731:
   787  001EA6  CFDB FFE3          	movff	plusw2,plusw1
   788  001EAA  06E8               	decf	wreg,f,c
   789  001EAC  E2FC               	bc	u2731
   790                           
   791                           ;Lab6pA.c: 41: TRISA = 0xFF;
   792  001EAE  6892               	setf	3986,c	;volatile
   793                           
   794                           ;Lab6pA.c: 42: TRISC = 0x00;
   795  001EB0  0E00               	movlw	0
   796  001EB2  6E94               	movwf	3988,c	;volatile
   797                           
   798                           ;Lab6pA.c: 43: TRISD = 0x00;
   799  001EB4  0E00               	movlw	0
   800  001EB6  6E95               	movwf	3989,c	;volatile
   801                           
   802                           ;Lab6pA.c: 44: TRISE = 0x00;
   803  001EB8  0E00               	movlw	0
   804  001EBA  6E96               	movwf	3990,c	;volatile
   805  001EBC  D000               	goto	l2537
   806  001EBE                     l2537:
   807                           
   808                           ;Lab6pA.c: 47: {
   809                           ;Lab6pA.c: 48: Select_ADC_Channel(0);
   810  001EBE  0E00               	movlw	0
   811  001EC0  EC2F  F015         	call	_Select_ADC_Channel
   812                           
   813                           ;Lab6pA.c: 49: float num_step = get_full_ADC();
   814  001EC4  ECCD  F014         	call	_get_full_ADC	;wreg free
   815  001EC8  C001  F009         	movff	?_get_full_ADC,___lwtoft@c
   816  001ECC  C002  F00A         	movff	?_get_full_ADC+1,___lwtoft@c+1
   817  001ED0  ECE0  F014         	call	___lwtoft	;wreg free
   818  001ED4  C009  F08A         	movff	?___lwtoft,main@num_step
   819  001ED8  C00A  F08B         	movff	?___lwtoft+1,main@num_step+1
   820  001EDC  C00B  F08C         	movff	?___lwtoft+2,main@num_step+2
   821                           
   822                           ;Lab6pA.c: 50: float voltage = (num_step*4)/1000;
   823  001EE0  0E00               	movlw	0
   824  001EE2  6E0C               	movwf	___ftmul@f2,c
   825  001EE4  0E80               	movlw	128
   826  001EE6  6E0D               	movwf	___ftmul@f2+1,c
   827  001EE8  0E40               	movlw	64
   828  001EEA  6E0E               	movwf	___ftmul@f2+2,c
   829  001EEC  C08A  F009         	movff	main@num_step,___ftmul@f1
   830  001EF0  C08B  F00A         	movff	main@num_step+1,___ftmul@f1+1
   831  001EF4  C08C  F00B         	movff	main@num_step+2,___ftmul@f1+2
   832  001EF8  EC02  F011         	call	___ftmul	;wreg free
   833  001EFC  C009  F018         	movff	?___ftmul,___ftdiv@f1
   834  001F00  C00A  F019         	movff	?___ftmul+1,___ftdiv@f1+1
   835  001F04  C00B  F01A         	movff	?___ftmul+2,___ftdiv@f1+2
   836  001F08  0E00               	movlw	0
   837  001F0A  6E1B               	movwf	___ftdiv@f2,c
   838  001F0C  0E7A               	movlw	122
   839  001F0E  6E1C               	movwf	___ftdiv@f2+1,c
   840  001F10  0E44               	movlw	68
   841  001F12  6E1D               	movwf	___ftdiv@f2+2,c
   842  001F14  ECF1  F011         	call	___ftdiv	;wreg free
   843  001F18  C018  F092         	movff	?___ftdiv,main@voltage
   844  001F1C  C019  F093         	movff	?___ftdiv+1,main@voltage+1
   845  001F20  C01A  F094         	movff	?___ftdiv+2,main@voltage+2
   846                           
   847                           ;Lab6pA.c: 52: int u = (int)voltage;
   848  001F24  C092  F018         	movff	main@voltage,___fttol@f1
   849  001F28  C093  F019         	movff	main@voltage+1,___fttol@f1+1
   850  001F2C  C094  F01A         	movff	main@voltage+2,___fttol@f1+2
   851  001F30  EC7E  F011         	call	___fttol	;wreg free
   852  001F34  C018  F08D         	movff	?___fttol,main@u
   853  001F38  C019  F08E         	movff	?___fttol+1,main@u+1
   854                           
   855                           ;Lab6pA.c: 53: int l = (int)(voltage * 10)% 10;
   856  001F3C  0E00               	movlw	0
   857  001F3E  6E0C               	movwf	___ftmul@f2,c
   858  001F40  0E20               	movlw	32
   859  001F42  6E0D               	movwf	___ftmul@f2+1,c
   860  001F44  0E41               	movlw	65
   861  001F46  6E0E               	movwf	___ftmul@f2+2,c
   862  001F48  C092  F009         	movff	main@voltage,___ftmul@f1
   863  001F4C  C093  F00A         	movff	main@voltage+1,___ftmul@f1+1
   864  001F50  C094  F00B         	movff	main@voltage+2,___ftmul@f1+2
   865  001F54  EC02  F011         	call	___ftmul	;wreg free
   866  001F58  C009  F018         	movff	?___ftmul,___fttol@f1
   867  001F5C  C00A  F019         	movff	?___ftmul+1,___fttol@f1+1
   868  001F60  C00B  F01A         	movff	?___ftmul+2,___fttol@f1+2
   869  001F64  EC7E  F011         	call	___fttol	;wreg free
   870  001F68  C018  F027         	movff	?___fttol,___awmod@dividend
   871  001F6C  C019  F028         	movff	?___fttol+1,___awmod@dividend+1
   872  001F70  0E00               	movlw	0
   873  001F72  6E2A               	movwf	___awmod@divisor+1,c
   874  001F74  0E0A               	movlw	10
   875  001F76  6E29               	movwf	___awmod@divisor,c
   876  001F78  ECA1  F013         	call	___awmod	;wreg free
   877  001F7C  C027  F08F         	movff	?___awmod,main@l
   878  001F80  C028  F090         	movff	?___awmod+1,main@l+1
   879                           
   880                           ;Lab6pA.c: 54: PORTD = LED_7seg[l];
   881  001F84  0E80               	movlw	low main@LED_7seg
   882  001F86  0100               	movlb	0	; () banked
   883  001F88  258F               	addwf	main@l& (0+255),w,b
   884  001F8A  6ED9               	movwf	fsr2l,c
   885  001F8C  0E00               	movlw	high main@LED_7seg
   886  001F8E  0100               	movlb	0	; () banked
   887  001F90  2190               	addwfc	(main@l+1)& (0+255),w,b
   888  001F92  6EDA               	movwf	fsr2h,c
   889  001F94  50DF               	movf	indf2,w,c
   890  001F96  6E83               	movwf	3971,c	;volatile
   891                           
   892                           ; BSR set to: 0
   893                           ;Lab6pA.c: 55: char t = LED_7seg[u];
   894  001F98  0E80               	movlw	low main@LED_7seg
   895  001F9A  0100               	movlb	0	; () banked
   896  001F9C  258D               	addwf	main@u& (0+255),w,b
   897  001F9E  6ED9               	movwf	fsr2l,c
   898  001FA0  0E00               	movlw	high main@LED_7seg
   899  001FA2  0100               	movlb	0	; () banked
   900  001FA4  218E               	addwfc	(main@u+1)& (0+255),w,b
   901  001FA6  6EDA               	movwf	fsr2h,c
   902  001FA8  50DF               	movf	indf2,w,c
   903  001FAA  0100               	movlb	0	; () banked
   904  001FAC  6F91               	movwf	main@t& (0+255),b
   905                           
   906                           ; BSR set to: 0
   907                           ;Lab6pA.c: 56: PORTC = t & 0x3F;
   908  001FAE  0100               	movlb	0	; () banked
   909  001FB0  5191               	movf	main@t& (0+255),w,b
   910  001FB2  0B3F               	andlw	63
   911  001FB4  6E82               	movwf	3970,c	;volatile
   912                           
   913                           ; BSR set to: 0
   914                           ;Lab6pA.c: 57: PORTE = 0;
   915  001FB6  0E00               	movlw	0
   916  001FB8  6E84               	movwf	3972,c	;volatile
   917                           
   918                           ; BSR set to: 0
   919                           ;Lab6pA.c: 58: if(t & 0x40) PORTE=2;
   920  001FBA  0100               	movlb	0	; () banked
   921  001FBC  AD91               	btfss	main@t& (0+255),6,b
   922  001FBE  D003               	goto	l2559
   923                           
   924                           ; BSR set to: 0
   925  001FC0  0E02               	movlw	2
   926  001FC2  6E84               	movwf	3972,c	;volatile
   927  001FC4  D000               	goto	l2559
   928  001FC6                     l2559:
   929                           
   930                           ; BSR set to: 0
   931                           ;Lab6pA.c: 59: PORTDbits.RD7 = 0;
   932  001FC6  9E83               	bcf	3971,7,c	;volatile
   933                           
   934                           ; BSR set to: 0
   935                           ;Lab6pA.c: 60: printf("Voltage: %f\r\n", voltage);
   936  001FC8  0E77               	movlw	low STR_1
   937  001FCA  6E57               	movwf	printf@f,c
   938  001FCC  0E10               	movlw	high STR_1
   939  001FCE  6E58               	movwf	printf@f+1,c
   940  001FD0  C092  F059         	movff	main@voltage,?_printf+2
   941  001FD4  C093  F05A         	movff	main@voltage+1,?_printf+3
   942  001FD8  C094  F05B         	movff	main@voltage+2,?_printf+4
   943  001FDC  EC43  F008         	call	_printf	;wreg free
   944                           
   945                           ;Lab6pA.c: 63: Delay_One_Sec();
   946  001FE0  EC05  F015         	call	_Delay_One_Sec	;wreg free
   947  001FE4  D76C               	goto	l2537
   948  001FE6  EF00  F000         	goto	start
   949  001FEA                     __end_of_main:
   950                           	opt stack 0
   951                           tblptru	equ	0xFF8
   952                           tblptrh	equ	0xFF7
   953                           tblptrl	equ	0xFF6
   954                           tablat	equ	0xFF5
   955                           postinc0	equ	0xFEE
   956                           wreg	equ	0xFE8
   957                           postdec1	equ	0xFE5
   958                           plusw1	equ	0xFE3
   959                           fsr1l	equ	0xFE1
   960                           indf2	equ	0xFDF
   961                           plusw2	equ	0xFDB
   962                           fsr2h	equ	0xFDA
   963                           fsr2l	equ	0xFD9
   964                           
   965 ;; *************** function _printf *****************
   966 ;; Defined at:
   967 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
   968 ;; Parameters:    Size  Location     Type
   969 ;;  f               2   86[COMRAM] PTR const unsigned char 
   970 ;;		 -> STR_1(14), 
   971 ;; Auto vars:     Size  Location     Type
   972 ;;  tmpval          4  112[COMRAM] struct .
   973 ;;  val             4  106[COMRAM] unsigned long 
   974 ;;  fval            3  116[COMRAM] unsigned long 
   975 ;;  cp              3    0        PTR const unsigned char 
   976 ;;  exp             2  110[COMRAM] int 
   977 ;;  prec            2  104[COMRAM] int 
   978 ;;  flag            2  102[COMRAM] unsigned short 
   979 ;;  ap              2  100[COMRAM] PTR void [1]
   980 ;;		 -> ?_printf(2), 
   981 ;;  len             2    0        unsigned int 
   982 ;;  width           2    0        int 
   983 ;;  c               1  119[COMRAM] char 
   984 ;;  d               1    0        unsigned char 
   985 ;; Return value:  Size  Location     Type
   986 ;;                  2   86[COMRAM] int 
   987 ;; Registers used:
   988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   989 ;; Tracked objects:
   990 ;;		On entry : 0/0
   991 ;;		On exit  : 0/0
   992 ;;		Unchanged: 0/0
   993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   994 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   995 ;;      Locals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   996 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   997 ;;      Totals:        34       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   998 ;;Total ram usage:       34 bytes
   999 ;; Hardware stack levels used:    1
  1000 ;; Hardware stack levels required when called:    3
  1001 ;; This function calls:
  1002 ;;		___awdiv
  1003 ;;		___ftadd
  1004 ;;		___ftge
  1005 ;;		___ftmul
  1006 ;;		___ftneg
  1007 ;;		___ftsub
  1008 ;;		___fttol
  1009 ;;		___lldiv
  1010 ;;		___llmod
  1011 ;;		___lltoft
  1012 ;;		___wmul
  1013 ;;		__div_to_l_
  1014 ;;		__tdiv_to_l_
  1015 ;;		_fround
  1016 ;;		_putch
  1017 ;;		_scale
  1018 ;; This function is called by:
  1019 ;;		_main
  1020 ;; This function uses a non-reentrant model
  1021 ;;
  1022                           
  1023                           	psect	text1
  1024  001086                     __ptext1:
  1025                           	opt stack 0
  1026  001086                     _printf:
  1027                           	opt stack 27
  1028                           
  1029                           ;doprnt.c: 466: va_list ap;
  1030                           ;doprnt.c: 499: signed char c;
  1031                           ;doprnt.c: 501: int width;
  1032                           ;doprnt.c: 504: int prec;
  1033                           ;doprnt.c: 508: unsigned short flag;
  1034                           ;doprnt.c: 515: char d;
  1035                           ;doprnt.c: 516: double fval;
  1036                           ;doprnt.c: 517: int exp;
  1037                           ;doprnt.c: 523: union {
  1038                           ;doprnt.c: 524: unsigned long vd;
  1039                           ;doprnt.c: 525: double integ;
  1040                           ;doprnt.c: 526: } tmpval;
  1041                           ;doprnt.c: 528: unsigned long val;
  1042                           ;doprnt.c: 529: unsigned len;
  1043                           ;doprnt.c: 530: const char * cp;
  1044                           ;doprnt.c: 533: *ap = __va_start();
  1045                           
  1046                           ;incstack = 0
  1047  001086  0E59               	movlw	low (?_printf+2)
  1048  001088  6E65               	movwf	printf@ap,c
  1049  00108A  0E00               	movlw	high (?_printf+2)
  1050  00108C  6E66               	movwf	printf@ap+1,c
  1051                           
  1052                           ;doprnt.c: 536: while(c = *f++) {
  1053  00108E  D2FF               	goto	l2463
  1054  001090                     l2315:
  1055                           
  1056                           ;doprnt.c: 538: if(c != '%')
  1057  001090  0E25               	movlw	37
  1058  001092  1878               	xorwf	printf@c,w,c
  1059  001094  B4D8               	btfsc	status,2,c
  1060  001096  D004               	goto	l2319
  1061                           
  1062                           ;doprnt.c: 540: {
  1063                           ;doprnt.c: 541: (putch(c) );
  1064  001098  5078               	movf	printf@c,w,c
  1065  00109A  EC21  F015         	call	_putch
  1066                           
  1067                           ;doprnt.c: 542: continue;
  1068  00109E  D2F7               	goto	l2463
  1069  0010A0                     l2319:
  1070                           
  1071                           ;doprnt.c: 543: }
  1072                           ;doprnt.c: 548: flag = 0;
  1073  0010A0  0E00               	movlw	0
  1074  0010A2  6E68               	movwf	printf@flag+1,c
  1075  0010A4  0E00               	movlw	0
  1076  0010A6  6E67               	movwf	printf@flag,c
  1077                           
  1078                           ;doprnt.c: 635: switch(c = *f++) {
  1079  0010A8  D005               	goto	l2325
  1080                           
  1081                           ;doprnt.c: 638: goto alldone;
  1082                           
  1083                           ;doprnt.c: 637: case 0:
  1084  0010AA  D2FF               	goto	l164
  1085  0010AC                     l2321:
  1086                           
  1087                           ;doprnt.c: 663: flag |= 0x400;
  1088  0010AC  8468               	bsf	printf@flag+1,2,c
  1089                           
  1090                           ;doprnt.c: 664: break;
  1091  0010AE  D013               	goto	l2327
  1092                           
  1093                           ;doprnt.c: 813: continue;
  1094                           
  1095                           ;doprnt.c: 802: default:
  1096  0010B0  D2EE               	goto	l2463
  1097                           
  1098                           ;doprnt.c: 822: }
  1099  0010B2  D011               	goto	l2327
  1100  0010B4                     l2325:
  1101  0010B4  C057  FFF6         	movff	printf@f,tblptrl
  1102  0010B8  C058  FFF7         	movff	printf@f+1,tblptrh
  1103  0010BC  4A57               	infsnz	printf@f,f,c
  1104  0010BE  2A58               	incf	printf@f+1,f,c
  1105  0010C0                     	if	0	;tblptru may be non-zero
  1106  0010C0                     	endif
  1107  0010C0                     	if	0	;tblptru may be non-zero
  1108  0010C0                     	endif
  1109  0010C0  0008               	tblrd		*
  1110  0010C2  CFF5 F078          	movff	tablat,printf@c
  1111  0010C6  5078               	movf	printf@c,w,c
  1112                           
  1113                           ; Switch size 1, requested type "space"
  1114                           ; Number of cases is 2, Range of values is 0 to 102
  1115                           ; switch strategies available:
  1116                           ; Name         Instructions Cycles
  1117                           ; simple_byte            7     4 (average)
  1118                           ;	Chosen strategy is simple_byte
  1119  0010C8  0A00               	xorlw	0	; case 0
  1120  0010CA  B4D8               	btfsc	status,2,c
  1121  0010CC  D2EE               	goto	l164
  1122  0010CE  0A66               	xorlw	102	; case 102
  1123  0010D0  B4D8               	btfsc	status,2,c
  1124  0010D2  D7EC               	goto	l2321
  1125  0010D4  D2DC               	goto	l2463
  1126  0010D6                     l2327:
  1127                           
  1128                           ;doprnt.c: 825: if(flag & (0x700)) {
  1129  0010D6  0E07               	movlw	7
  1130  0010D8  1468               	andwf	printf@flag+1,w,c
  1131  0010DA  B4D8               	btfsc	status,2,c
  1132  0010DC  D2CA               	goto	l2459
  1133                           
  1134                           ;doprnt.c: 829: prec = 6;
  1135  0010DE  0E00               	movlw	0
  1136  0010E0  6E6A               	movwf	printf@prec+1,c
  1137  0010E2  0E06               	movlw	6
  1138  0010E4  6E69               	movwf	printf@prec,c
  1139                           
  1140                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1141  0010E6  C065  FFD9         	movff	printf@ap,fsr2l
  1142  0010EA  C066  FFDA         	movff	printf@ap+1,fsr2h
  1143  0010EE  CFDE F075          	movff	postinc2,printf@fval
  1144  0010F2  CFDE F076          	movff	postinc2,printf@fval+1
  1145  0010F6  CFDD F077          	movff	postdec2,printf@fval+2
  1146  0010FA  0E03               	movlw	3
  1147  0010FC  2665               	addwf	printf@ap,f,c
  1148  0010FE  0E00               	movlw	0
  1149  001100  2266               	addwfc	printf@ap+1,f,c
  1150                           
  1151                           ;doprnt.c: 831: if(fval < 0.0) {
  1152  001102  AE77               	btfss	printf@fval+2,7,c
  1153  001104  D011               	goto	l2341
  1154                           
  1155                           ;doprnt.c: 832: fval = -fval;
  1156  001106  C075  F001         	movff	printf@fval,___ftneg@f1
  1157  00110A  C076  F002         	movff	printf@fval+1,___ftneg@f1+1
  1158  00110E  C077  F003         	movff	printf@fval+2,___ftneg@f1+2
  1159  001112  ECF3  F014         	call	___ftneg	;wreg free
  1160  001116  C001  F075         	movff	?___ftneg,printf@fval
  1161  00111A  C002  F076         	movff	?___ftneg+1,printf@fval+1
  1162  00111E  C003  F077         	movff	?___ftneg+2,printf@fval+2
  1163                           
  1164                           ;doprnt.c: 833: flag |= 0x03;
  1165  001122  0E03               	movlw	3
  1166  001124  1267               	iorwf	printf@flag,f,c
  1167  001126  D000               	goto	l2341
  1168  001128                     l2341:
  1169                           
  1170                           ;doprnt.c: 834: }
  1171                           ;doprnt.c: 835: exp = 0;
  1172  001128  0E00               	movlw	0
  1173  00112A  6E70               	movwf	printf@exp+1,c
  1174  00112C  0E00               	movlw	0
  1175  00112E  6E6F               	movwf	printf@exp,c
  1176                           
  1177                           ;doprnt.c: 836: if( fval!=0) {
  1178  001130  5075               	movf	printf@fval,w,c
  1179  001132  1076               	iorwf	printf@fval+1,w,c
  1180  001134  1077               	iorwf	printf@fval+2,w,c
  1181  001136  B4D8               	btfsc	status,2,c
  1182  001138  D085               	goto	l2369
  1183                           
  1184                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1185  00113A  0E82               	movlw	130
  1186  00113C  6E5C               	movwf	??_printf& (0+255),c
  1187  00113E  0EFF               	movlw	255
  1188  001140  6E5D               	movwf	(??_printf+1)& (0+255),c
  1189  001142  C075  F05E         	movff	printf@fval,??_printf+2
  1190  001146  C076  F05F         	movff	printf@fval+1,??_printf+3
  1191  00114A  C077  F060         	movff	printf@fval+2,??_printf+4
  1192  00114E  C078  F061         	movff	printf@fval+3,??_printf+5
  1193  001152  0E10               	movlw	16
  1194  001154  D005               	goto	u2440
  1195  001156                     u2445:
  1196  001156  90D8               	bcf	status,0,c
  1197  001158  3261               	rrcf	??_printf+5,f,c
  1198  00115A  3260               	rrcf	??_printf+4,f,c
  1199  00115C  325F               	rrcf	??_printf+3,f,c
  1200  00115E  325E               	rrcf	??_printf+2,f,c
  1201  001160                     u2440:
  1202  001160  2EE8               	decfsz	wreg,f,c
  1203  001162  D7F9               	goto	u2445
  1204  001164  505E               	movf	??_printf+2,w,c
  1205  001166  245C               	addwf	??_printf,w,c
  1206  001168  6E6F               	movwf	printf@exp,c
  1207  00116A  0E00               	movlw	0
  1208  00116C  205D               	addwfc	??_printf+1,w,c
  1209  00116E  6E70               	movwf	printf@exp+1,c
  1210                           
  1211                           ;doprnt.c: 838: exp--;
  1212  001170  066F               	decf	printf@exp,f,c
  1213  001172  A0D8               	btfss	status,0,c
  1214  001174  0670               	decf	printf@exp+1,f,c
  1215                           
  1216                           ;doprnt.c: 839: exp *= 3;
  1217  001176  C06F  F035         	movff	printf@exp,___wmul@multiplier
  1218  00117A  C070  F036         	movff	printf@exp+1,___wmul@multiplier+1
  1219  00117E  0E00               	movlw	0
  1220  001180  6E38               	movwf	___wmul@multiplicand+1,c
  1221  001182  0E03               	movlw	3
  1222  001184  6E37               	movwf	___wmul@multiplicand,c
  1223  001186  ECB9  F014         	call	___wmul	;wreg free
  1224  00118A  C035  F06F         	movff	?___wmul,printf@exp
  1225  00118E  C036  F070         	movff	?___wmul+1,printf@exp+1
  1226                           
  1227                           ;doprnt.c: 840: exp /= 10;
  1228  001192  C06F  F02D         	movff	printf@exp,___awdiv@dividend
  1229  001196  C070  F02E         	movff	printf@exp+1,___awdiv@dividend+1
  1230  00119A  0E00               	movlw	0
  1231  00119C  6E30               	movwf	___awdiv@divisor+1,c
  1232  00119E  0E0A               	movlw	10
  1233  0011A0  6E2F               	movwf	___awdiv@divisor,c
  1234  0011A2  ECC5  F012         	call	___awdiv	;wreg free
  1235  0011A6  C02D  F06F         	movff	?___awdiv,printf@exp
  1236  0011AA  C02E  F070         	movff	?___awdiv+1,printf@exp+1
  1237                           
  1238                           ;doprnt.c: 841: if(exp < 0)
  1239  0011AE  AE70               	btfss	printf@exp+1,7,c
  1240  0011B0  D004               	goto	l2357
  1241                           
  1242                           ;doprnt.c: 842: exp--;
  1243  0011B2  066F               	decf	printf@exp,f,c
  1244  0011B4  A0D8               	btfss	status,0,c
  1245  0011B6  0670               	decf	printf@exp+1,f,c
  1246  0011B8  D000               	goto	l2357
  1247  0011BA                     l2357:
  1248                           
  1249                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1250  0011BA  506F               	movf	printf@exp,w,c
  1251  0011BC  0800               	sublw	0
  1252  0011BE  EC56  F00B         	call	_scale
  1253  0011C2  C03B  F071         	movff	?_scale,printf@tmpval
  1254  0011C6  C03C  F072         	movff	?_scale+1,printf@tmpval+1
  1255  0011CA  C03D  F073         	movff	?_scale+2,printf@tmpval+2
  1256                           
  1257                           ;doprnt.c: 847: tmpval.integ *= fval;
  1258  0011CE  C071  F009         	movff	printf@tmpval,___ftmul@f1
  1259  0011D2  C072  F00A         	movff	printf@tmpval+1,___ftmul@f1+1
  1260  0011D6  C073  F00B         	movff	printf@tmpval+2,___ftmul@f1+2
  1261  0011DA  C075  F00C         	movff	printf@fval,___ftmul@f2
  1262  0011DE  C076  F00D         	movff	printf@fval+1,___ftmul@f2+1
  1263  0011E2  C077  F00E         	movff	printf@fval+2,___ftmul@f2+2
  1264  0011E6  EC02  F011         	call	___ftmul	;wreg free
  1265  0011EA  C009  F071         	movff	?___ftmul,printf@tmpval
  1266  0011EE  C00A  F072         	movff	?___ftmul+1,printf@tmpval+1
  1267  0011F2  C00B  F073         	movff	?___ftmul+2,printf@tmpval+2
  1268                           
  1269                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1270  0011F6  C071  F001         	movff	printf@tmpval,___ftge@ff1
  1271  0011FA  C072  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1272  0011FE  C073  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1273  001202  0E00               	movlw	0
  1274  001204  6E04               	movwf	___ftge@ff2,c
  1275  001206  0E80               	movlw	128
  1276  001208  6E05               	movwf	___ftge@ff2+1,c
  1277  00120A  0E3F               	movlw	63
  1278  00120C  6E06               	movwf	___ftge@ff2+2,c
  1279  00120E  EC10  F013         	call	___ftge	;wreg free
  1280  001212  B0D8               	btfsc	status,0,c
  1281  001214  D004               	goto	l2365
  1282                           
  1283                           ;doprnt.c: 849: exp--;
  1284  001216  066F               	decf	printf@exp,f,c
  1285  001218  A0D8               	btfss	status,0,c
  1286  00121A  0670               	decf	printf@exp+1,f,c
  1287  00121C  D013               	goto	l2369
  1288  00121E                     l2365:
  1289                           
  1290                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1291  00121E  C071  F001         	movff	printf@tmpval,___ftge@ff1
  1292  001222  C072  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1293  001226  C073  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1294  00122A  0E00               	movlw	0
  1295  00122C  6E04               	movwf	___ftge@ff2,c
  1296  00122E  0E20               	movlw	32
  1297  001230  6E05               	movwf	___ftge@ff2+1,c
  1298  001232  0E41               	movlw	65
  1299  001234  6E06               	movwf	___ftge@ff2+2,c
  1300  001236  EC10  F013         	call	___ftge	;wreg free
  1301  00123A  A0D8               	btfss	status,0,c
  1302  00123C  D003               	goto	l2369
  1303                           
  1304                           ;doprnt.c: 851: exp++;
  1305  00123E  4A6F               	infsnz	printf@exp,f,c
  1306  001240  2A70               	incf	printf@exp+1,f,c
  1307  001242  D000               	goto	l2369
  1308  001244                     l2369:
  1309                           
  1310                           ;doprnt.c: 852: }
  1311                           ;doprnt.c: 1112: if(prec <= 12)
  1312  001244  BE6A               	btfsc	printf@prec+1,7,c
  1313  001246  D006               	goto	l2371
  1314  001248  506A               	movf	printf@prec+1,w,c
  1315  00124A  E11C               	bnz	l2373
  1316  00124C  0E0D               	movlw	13
  1317  00124E  5C69               	subwf	printf@prec,w,c
  1318  001250  B0D8               	btfsc	status,0,c
  1319  001252  D018               	goto	l2373
  1320  001254                     l2371:
  1321                           
  1322                           ;doprnt.c: 1113: fval += fround(prec);
  1323  001254  C075  F045         	movff	printf@fval,___ftadd@f1
  1324  001258  C076  F046         	movff	printf@fval+1,___ftadd@f1+1
  1325  00125C  C077  F047         	movff	printf@fval+2,___ftadd@f1+2
  1326  001260  5069               	movf	printf@prec,w,c
  1327  001262  EC46  F00D         	call	_fround
  1328  001266  C03B  F048         	movff	?_fround,___ftadd@f2
  1329  00126A  C03C  F049         	movff	?_fround+1,___ftadd@f2+1
  1330  00126E  C03D  F04A         	movff	?_fround+2,___ftadd@f2+2
  1331  001272  EC68  F00E         	call	___ftadd	;wreg free
  1332  001276  C045  F075         	movff	?___ftadd,printf@fval
  1333  00127A  C046  F076         	movff	?___ftadd+1,printf@fval+1
  1334  00127E  C047  F077         	movff	?___ftadd+2,printf@fval+2
  1335  001282  D000               	goto	l2373
  1336  001284                     l2373:
  1337                           
  1338                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1339  001284  BE70               	btfsc	printf@exp+1,7,c
  1340  001286  D006               	goto	l2375
  1341  001288  5070               	movf	printf@exp+1,w,c
  1342  00128A  E120               	bnz	l2381
  1343  00128C  0E0A               	movlw	10
  1344  00128E  5C6F               	subwf	printf@exp,w,c
  1345  001290  B0D8               	btfsc	status,0,c
  1346  001292  D01C               	goto	l2381
  1347  001294                     l2375:
  1348  001294  5075               	movf	printf@fval,w,c
  1349  001296  1076               	iorwf	printf@fval+1,w,c
  1350  001298  1077               	iorwf	printf@fval+2,w,c
  1351  00129A  B4D8               	btfsc	status,2,c
  1352  00129C  D06D               	goto	l2395
  1353  00129E  C075  F018         	movff	printf@fval,___fttol@f1
  1354  0012A2  C076  F019         	movff	printf@fval+1,___fttol@f1+1
  1355  0012A6  C077  F01A         	movff	printf@fval+2,___fttol@f1+2
  1356  0012AA  EC7E  F011         	call	___fttol	;wreg free
  1357  0012AE  5018               	movf	?___fttol,w,c
  1358  0012B0  1019               	iorwf	?___fttol+1,w,c
  1359  0012B2  101A               	iorwf	?___fttol+2,w,c
  1360  0012B4  101B               	iorwf	?___fttol+3,w,c
  1361  0012B6  B4D8               	btfsc	status,2,c
  1362  0012B8  BE70               	btfsc	printf@exp+1,7,c
  1363  0012BA  D05E               	goto	l2395
  1364  0012BC  5070               	movf	printf@exp+1,w,c
  1365  0012BE  E106               	bnz	l2381
  1366  0012C0  0E02               	movlw	2
  1367  0012C2  5C6F               	subwf	printf@exp,w,c
  1368  0012C4  B0D8               	btfsc	status,0,c
  1369  0012C6  D002               	goto	l2381
  1370  0012C8  D057               	goto	l2395
  1371  0012CA  D000               	goto	l2381
  1372  0012CC                     l2381:
  1373                           
  1374                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1375  0012CC  C071  F001         	movff	printf@tmpval,___ftge@ff1
  1376  0012D0  C072  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1377  0012D4  C073  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1378  0012D8  0E70               	movlw	112
  1379  0012DA  6E04               	movwf	___ftge@ff2,c
  1380  0012DC  0E89               	movlw	137
  1381  0012DE  6E05               	movwf	___ftge@ff2+1,c
  1382  0012E0  0E40               	movlw	64
  1383  0012E2  6E06               	movwf	___ftge@ff2+2,c
  1384  0012E4  EC10  F013         	call	___ftge	;wreg free
  1385  0012E8  B0D8               	btfsc	status,0,c
  1386  0012EA  D002               	goto	l2385
  1387                           
  1388                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1389  0012EC  0EF7               	movlw	247
  1390  0012EE  D001               	goto	L1
  1391  0012F0                     l2385:
  1392                           
  1393                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1394  0012F0  0EF8               	movlw	248
  1395  0012F2                     L1:
  1396  0012F2  266F               	addwf	printf@exp,f,c
  1397  0012F4  0EFF               	movlw	255
  1398  0012F6  2270               	addwfc	printf@exp+1,f,c
  1399  0012F8  D000               	goto	l2387
  1400  0012FA                     l2387:
  1401                           
  1402                           ;doprnt.c: 1124: }
  1403                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1404  0012FA  506F               	movf	printf@exp,w,c
  1405  0012FC  EC56  F00B         	call	_scale
  1406  001300  C03B  F071         	movff	?_scale,printf@tmpval
  1407  001304  C03C  F072         	movff	?_scale+1,printf@tmpval+1
  1408  001308  C03D  F073         	movff	?_scale+2,printf@tmpval+2
  1409                           
  1410                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1411  00130C  D017               	goto	l2391
  1412  00130E  C075  F001         	movff	printf@fval,__div_to_l_@f1
  1413  001312  C076  F002         	movff	printf@fval+1,__div_to_l_@f1+1
  1414  001316  C077  F003         	movff	printf@fval+2,__div_to_l_@f1+2
  1415  00131A  C071  F004         	movff	printf@tmpval,__div_to_l_@f2
  1416  00131E  C072  F005         	movff	printf@tmpval+1,__div_to_l_@f2+1
  1417  001322  C073  F006         	movff	printf@tmpval+2,__div_to_l_@f2+2
  1418  001326  EC7D  F010         	call	__div_to_l_	;wreg free
  1419  00132A  C001  F06B         	movff	?__div_to_l_,printf@val
  1420  00132E  C002  F06C         	movff	?__div_to_l_+1,printf@val+1
  1421  001332  C003  F06D         	movff	?__div_to_l_+2,printf@val+2
  1422  001336  C004  F06E         	movff	?__div_to_l_+3,printf@val+3
  1423  00133A  D017               	goto	l2393
  1424  00133C                     l2391:
  1425  00133C  C075  F001         	movff	printf@fval,__tdiv_to_l_@f1
  1426  001340  C076  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  1427  001344  C077  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  1428  001348  C071  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  1429  00134C  C072  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  1430  001350  C073  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  1431  001354  ECF5  F00F         	call	__tdiv_to_l_	;wreg free
  1432  001358  C001  F06B         	movff	?__tdiv_to_l_,printf@val
  1433  00135C  C002  F06C         	movff	?__tdiv_to_l_+1,printf@val+1
  1434  001360  C003  F06D         	movff	?__tdiv_to_l_+2,printf@val+2
  1435  001364  C004  F06E         	movff	?__tdiv_to_l_+3,printf@val+3
  1436  001368  D000               	goto	l2393
  1437  00136A                     l2393:
  1438                           
  1439                           ;doprnt.c: 1129: fval = 0.0;
  1440  00136A  0E00               	movlw	0
  1441  00136C  6E75               	movwf	printf@fval,c
  1442  00136E  0E00               	movlw	0
  1443  001370  6E76               	movwf	printf@fval+1,c
  1444  001372  0E00               	movlw	0
  1445  001374  6E77               	movwf	printf@fval+2,c
  1446                           
  1447                           ;doprnt.c: 1130: } else {
  1448  001376  D033               	goto	l2399
  1449  001378                     l2395:
  1450                           
  1451                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1452  001378  C075  F018         	movff	printf@fval,___fttol@f1
  1453  00137C  C076  F019         	movff	printf@fval+1,___fttol@f1+1
  1454  001380  C077  F01A         	movff	printf@fval+2,___fttol@f1+2
  1455  001384  EC7E  F011         	call	___fttol	;wreg free
  1456  001388  C018  F06B         	movff	?___fttol,printf@val
  1457  00138C  C019  F06C         	movff	?___fttol+1,printf@val+1
  1458  001390  C01A  F06D         	movff	?___fttol+2,printf@val+2
  1459  001394  C01B  F06E         	movff	?___fttol+3,printf@val+3
  1460                           
  1461                           ;doprnt.c: 1132: fval -= (double)val;
  1462  001398  C075  F051         	movff	printf@fval,___ftsub@f1
  1463  00139C  C076  F052         	movff	printf@fval+1,___ftsub@f1+1
  1464  0013A0  C077  F053         	movff	printf@fval+2,___ftsub@f1+2
  1465  0013A4  C06B  F009         	movff	printf@val,___lltoft@c
  1466  0013A8  C06C  F00A         	movff	printf@val+1,___lltoft@c+1
  1467  0013AC  C06D  F00B         	movff	printf@val+2,___lltoft@c+2
  1468  0013B0  C06E  F00C         	movff	printf@val+3,___lltoft@c+3
  1469  0013B4  EC52  F014         	call	___lltoft	;wreg free
  1470  0013B8  C009  F054         	movff	?___lltoft,___ftsub@f2
  1471  0013BC  C00A  F055         	movff	?___lltoft+1,___ftsub@f2+1
  1472  0013C0  C00B  F056         	movff	?___lltoft+2,___ftsub@f2+2
  1473  0013C4  EC82  F014         	call	___ftsub	;wreg free
  1474  0013C8  C051  F075         	movff	?___ftsub,printf@fval
  1475  0013CC  C052  F076         	movff	?___ftsub+1,printf@fval+1
  1476  0013D0  C053  F077         	movff	?___ftsub+2,printf@fval+2
  1477                           
  1478                           ;doprnt.c: 1133: exp = 0;
  1479  0013D4  0E00               	movlw	0
  1480  0013D6  6E70               	movwf	printf@exp+1,c
  1481  0013D8  0E00               	movlw	0
  1482  0013DA  6E6F               	movwf	printf@exp,c
  1483  0013DC  D000               	goto	l2399
  1484  0013DE                     l2399:
  1485                           
  1486                           ;doprnt.c: 1134: }
  1487                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1488  0013DE  0E01               	movlw	1
  1489  0013E0  6E78               	movwf	printf@c,c
  1490  0013E2                     l2401:
  1491  0013E2  0E0A               	movlw	10
  1492  0013E4  1878               	xorwf	printf@c,w,c
  1493  0013E6  B4D8               	btfsc	status,2,c
  1494  0013E8  D01C               	goto	l2413
  1495  0013EA  D001               	goto	l2405
  1496  0013EC  D01A               	goto	l2413
  1497  0013EE                     l2405:
  1498                           
  1499                           ;doprnt.c: 1137: if(val < dpowers[c])
  1500  0013EE  5078               	movf	printf@c,w,c
  1501  0013F0  0D04               	mullw	4
  1502  0013F2  0E01               	movlw	low _dpowers
  1503  0013F4  24F3               	addwf	prodl,w,c
  1504  0013F6  6EF6               	movwf	tblptrl,c
  1505  0013F8  0E10               	movlw	high _dpowers
  1506  0013FA  20F4               	addwfc	prodh,w,c
  1507  0013FC  6EF7               	movwf	tblptrh,c
  1508  0013FE                     	if	0	;There are less than 3 active tblptr bytes
  1509  0013FE                     	endif
  1510  0013FE  0009               	tblrd		*+
  1511  001400  50F5               	movf	tablat,w,c
  1512  001402  5C6B               	subwf	printf@val,w,c
  1513  001404  0009               	tblrd		*+
  1514  001406  50F5               	movf	tablat,w,c
  1515  001408  586C               	subwfb	printf@val+1,w,c
  1516  00140A  0009               	tblrd		*+
  1517  00140C  50F5               	movf	tablat,w,c
  1518  00140E  586D               	subwfb	printf@val+2,w,c
  1519  001410  0009               	tblrd		*+
  1520  001412  50F5               	movf	tablat,w,c
  1521  001414  586E               	subwfb	printf@val+3,w,c
  1522  001416  A0D8               	btfss	status,0,c
  1523  001418  D004               	goto	l2413
  1524  00141A  D001               	goto	l2409
  1525                           
  1526                           ;doprnt.c: 1138: break;
  1527  00141C  D002               	goto	l2413
  1528  00141E                     l2409:
  1529  00141E  2A78               	incf	printf@c,f,c
  1530  001420  D7E0               	goto	l2401
  1531  001422                     l2413:
  1532                           
  1533                           ;doprnt.c: 1175: {
  1534                           ;doprnt.c: 1188: if(flag & 0x03)
  1535  001422  0E03               	movlw	3
  1536  001424  1467               	andwf	printf@flag,w,c
  1537  001426  6E5C               	movwf	??_printf& (0+255),c
  1538  001428  0E00               	movlw	0
  1539  00142A  1468               	andwf	printf@flag+1,w,c
  1540  00142C  6E5D               	movwf	(??_printf+1)& (0+255),c
  1541  00142E  505C               	movf	??_printf,w,c
  1542  001430  105D               	iorwf	??_printf+1,w,c
  1543  001432  B4D8               	btfsc	status,2,c
  1544  001434  D049               	goto	l2423
  1545                           
  1546                           ;doprnt.c: 1190: (putch('-') );
  1547  001436  0E2D               	movlw	45
  1548  001438  EC21  F015         	call	_putch
  1549                           
  1550                           ;doprnt.c: 1195: }
  1551                           ;doprnt.c: 1196: while(c--) {
  1552  00143C  D045               	goto	l2423
  1553  00143E                     l2417:
  1554                           
  1555                           ;doprnt.c: 1200: {
  1556                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1557  00143E  C06B  F001         	movff	printf@val,___lldiv@dividend
  1558  001442  C06C  F002         	movff	printf@val+1,___lldiv@dividend+1
  1559  001446  C06D  F003         	movff	printf@val+2,___lldiv@dividend+2
  1560  00144A  C06E  F004         	movff	printf@val+3,___lldiv@dividend+3
  1561  00144E  5078               	movf	printf@c,w,c
  1562  001450  0D04               	mullw	4
  1563  001452  0E01               	movlw	low _dpowers
  1564  001454  24F3               	addwf	prodl,w,c
  1565  001456  6EF6               	movwf	tblptrl,c
  1566  001458  0E10               	movlw	high _dpowers
  1567  00145A  20F4               	addwfc	prodh,w,c
  1568  00145C  6EF7               	movwf	tblptrh,c
  1569  00145E                     	if	0	;There are less than 3 active tblptr bytes
  1570  00145E                     	endif
  1571  00145E  0009               	tblrd		*+
  1572  001460  CFF5 F005          	movff	tablat,___lldiv@divisor
  1573  001464  0009               	tblrd		*+
  1574  001466  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1575  00146A  0009               	tblrd		*+
  1576  00146C  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1577  001470  000A               	tblrd		*-
  1578  001472  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1579  001476  EC5B  F013         	call	___lldiv	;wreg free
  1580  00147A  C001  F071         	movff	?___lldiv,printf@tmpval
  1581  00147E  C002  F072         	movff	?___lldiv+1,printf@tmpval+1
  1582  001482  C003  F073         	movff	?___lldiv+2,printf@tmpval+2
  1583  001486  C004  F074         	movff	?___lldiv+3,printf@tmpval+3
  1584                           
  1585                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1586  00148A  C071  F001         	movff	printf@tmpval,___llmod@dividend
  1587  00148E  C072  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  1588  001492  C073  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  1589  001496  C074  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  1590  00149A  0E0A               	movlw	10
  1591  00149C  6E05               	movwf	___llmod@divisor,c
  1592  00149E  0E00               	movlw	0
  1593  0014A0  6E06               	movwf	___llmod@divisor+1,c
  1594  0014A2  0E00               	movlw	0
  1595  0014A4  6E07               	movwf	___llmod@divisor+2,c
  1596  0014A6  0E00               	movlw	0
  1597  0014A8  6E08               	movwf	___llmod@divisor+3,c
  1598  0014AA  ECE2  F013         	call	___llmod	;wreg free
  1599  0014AE  C001  F071         	movff	?___llmod,printf@tmpval
  1600  0014B2  C002  F072         	movff	?___llmod+1,printf@tmpval+1
  1601  0014B6  C003  F073         	movff	?___llmod+2,printf@tmpval+2
  1602  0014BA  C004  F074         	movff	?___llmod+3,printf@tmpval+3
  1603                           
  1604                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  1605  0014BE  5071               	movf	printf@tmpval,w,c
  1606  0014C0  0F30               	addlw	48
  1607  0014C2  EC21  F015         	call	_putch
  1608  0014C6  D000               	goto	l2423
  1609  0014C8                     l2423:
  1610  0014C8  0678               	decf	printf@c,f,c
  1611  0014CA  2878               	incf	printf@c,w,c
  1612  0014CC  B4D8               	btfsc	status,2,c
  1613  0014CE  D009               	goto	l2429
  1614  0014D0  D7B6               	goto	l2417
  1615                           
  1616                           ;doprnt.c: 1204: }
  1617                           ;doprnt.c: 1206: }
  1618                           ;doprnt.c: 1207: while(exp > 0) {
  1619  0014D2  D007               	goto	l2429
  1620  0014D4                     l2425:
  1621                           
  1622                           ;doprnt.c: 1208: (putch('0') );
  1623  0014D4  0E30               	movlw	48
  1624  0014D6  EC21  F015         	call	_putch
  1625                           
  1626                           ;doprnt.c: 1209: exp--;
  1627  0014DA  066F               	decf	printf@exp,f,c
  1628  0014DC  A0D8               	btfss	status,0,c
  1629  0014DE  0670               	decf	printf@exp+1,f,c
  1630  0014E0  D000               	goto	l2429
  1631  0014E2                     l2429:
  1632  0014E2  BE70               	btfsc	printf@exp+1,7,c
  1633  0014E4  D005               	goto	l2431
  1634  0014E6  5070               	movf	printf@exp+1,w,c
  1635  0014E8  E1F5               	bnz	l2425
  1636  0014EA  046F               	decf	printf@exp,w,c
  1637  0014EC  B0D8               	btfsc	status,0,c
  1638  0014EE  D7F2               	goto	l2425
  1639  0014F0                     l2431:
  1640                           
  1641                           ;doprnt.c: 1210: }
  1642                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  1643  0014F0  BE6A               	btfsc	printf@prec+1,7,c
  1644  0014F2  D009               	goto	l153
  1645  0014F4  506A               	movf	printf@prec+1,w,c
  1646  0014F6  E104               	bnz	u2600
  1647  0014F8  0E09               	movlw	9
  1648  0014FA  5C69               	subwf	printf@prec,w,c
  1649  0014FC  A0D8               	btfss	status,0,c
  1650  0014FE  D003               	goto	l153
  1651  001500                     u2600:
  1652                           
  1653                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1654  001500  0E08               	movlw	8
  1655  001502  6E78               	movwf	printf@c,c
  1656  001504  D003               	goto	l2435
  1657  001506                     l153:
  1658                           
  1659                           ;doprnt.c: 1213: else
  1660                           ;doprnt.c: 1214: c = prec;
  1661  001506  C069  F078         	movff	printf@prec,printf@c
  1662  00150A  D000               	goto	l2435
  1663  00150C                     l2435:
  1664                           
  1665                           ;doprnt.c: 1215: prec -= c;
  1666  00150C  5078               	movf	printf@c,w,c
  1667  00150E  5E69               	subwf	printf@prec,f,c
  1668  001510  0E00               	movlw	0
  1669  001512  BE78               	btfsc	printf@c,7,c
  1670  001514  0EFF               	movlw	255
  1671  001516  5A6A               	subwfb	printf@prec+1,f,c
  1672                           
  1673                           ;doprnt.c: 1219: if(c)
  1674  001518  5078               	movf	printf@c,w,c
  1675  00151A  B4D8               	btfsc	status,2,c
  1676  00151C  D004               	goto	l2441
  1677                           
  1678                           ;doprnt.c: 1221: (putch('.') );
  1679  00151E  0E2E               	movlw	46
  1680  001520  EC21  F015         	call	_putch
  1681  001524  D000               	goto	l2441
  1682  001526                     l2441:
  1683                           
  1684                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1685  001526  5078               	movf	printf@c,w,c
  1686  001528  EC56  F00B         	call	_scale
  1687  00152C  C03B  F062         	movff	?_scale,_printf$1092
  1688  001530  C03C  F063         	movff	?_scale+1,_printf$1092+1
  1689  001534  C03D  F064         	movff	?_scale+2,_printf$1092+2
  1690                           
  1691                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1692  001538  C075  F00C         	movff	printf@fval,___ftmul@f2
  1693  00153C  C076  F00D         	movff	printf@fval+1,___ftmul@f2+1
  1694  001540  C077  F00E         	movff	printf@fval+2,___ftmul@f2+2
  1695  001544  C062  F009         	movff	_printf$1092,___ftmul@f1
  1696  001548  C063  F00A         	movff	_printf$1092+1,___ftmul@f1+1
  1697  00154C  C064  F00B         	movff	_printf$1092+2,___ftmul@f1+2
  1698  001550  EC02  F011         	call	___ftmul	;wreg free
  1699  001554  C009  F018         	movff	?___ftmul,___fttol@f1
  1700  001558  C00A  F019         	movff	?___ftmul+1,___fttol@f1+1
  1701  00155C  C00B  F01A         	movff	?___ftmul+2,___fttol@f1+2
  1702  001560  EC7E  F011         	call	___fttol	;wreg free
  1703  001564  C018  F06B         	movff	?___fttol,printf@val
  1704  001568  C019  F06C         	movff	?___fttol+1,printf@val+1
  1705  00156C  C01A  F06D         	movff	?___fttol+2,printf@val+2
  1706  001570  C01B  F06E         	movff	?___fttol+3,printf@val+3
  1707                           
  1708                           ;doprnt.c: 1228: while(c--) {
  1709  001574  D06B               	goto	l2451
  1710  001576                     l2445:
  1711                           
  1712                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  1713  001576  C06B  F001         	movff	printf@val,___lldiv@dividend
  1714  00157A  C06C  F002         	movff	printf@val+1,___lldiv@dividend+1
  1715  00157E  C06D  F003         	movff	printf@val+2,___lldiv@dividend+2
  1716  001582  C06E  F004         	movff	printf@val+3,___lldiv@dividend+3
  1717  001586  5078               	movf	printf@c,w,c
  1718  001588  0D04               	mullw	4
  1719  00158A  0E01               	movlw	low _dpowers
  1720  00158C  24F3               	addwf	prodl,w,c
  1721  00158E  6EF6               	movwf	tblptrl,c
  1722  001590  0E10               	movlw	high _dpowers
  1723  001592  20F4               	addwfc	prodh,w,c
  1724  001594  6EF7               	movwf	tblptrh,c
  1725  001596                     	if	0	;There are less than 3 active tblptr bytes
  1726  001596                     	endif
  1727  001596  0009               	tblrd		*+
  1728  001598  CFF5 F005          	movff	tablat,___lldiv@divisor
  1729  00159C  0009               	tblrd		*+
  1730  00159E  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1731  0015A2  0009               	tblrd		*+
  1732  0015A4  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1733  0015A8  000A               	tblrd		*-
  1734  0015AA  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1735  0015AE  EC5B  F013         	call	___lldiv	;wreg free
  1736  0015B2  C001  F071         	movff	?___lldiv,printf@tmpval
  1737  0015B6  C002  F072         	movff	?___lldiv+1,printf@tmpval+1
  1738  0015BA  C003  F073         	movff	?___lldiv+2,printf@tmpval+2
  1739  0015BE  C004  F074         	movff	?___lldiv+3,printf@tmpval+3
  1740                           
  1741                           ;doprnt.c: 1230: tmpval.vd %= 10;
  1742  0015C2  C071  F001         	movff	printf@tmpval,___llmod@dividend
  1743  0015C6  C072  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  1744  0015CA  C073  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  1745  0015CE  C074  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  1746  0015D2  0E0A               	movlw	10
  1747  0015D4  6E05               	movwf	___llmod@divisor,c
  1748  0015D6  0E00               	movlw	0
  1749  0015D8  6E06               	movwf	___llmod@divisor+1,c
  1750  0015DA  0E00               	movlw	0
  1751  0015DC  6E07               	movwf	___llmod@divisor+2,c
  1752  0015DE  0E00               	movlw	0
  1753  0015E0  6E08               	movwf	___llmod@divisor+3,c
  1754  0015E2  ECE2  F013         	call	___llmod	;wreg free
  1755  0015E6  C001  F071         	movff	?___llmod,printf@tmpval
  1756  0015EA  C002  F072         	movff	?___llmod+1,printf@tmpval+1
  1757  0015EE  C003  F073         	movff	?___llmod+2,printf@tmpval+2
  1758  0015F2  C004  F074         	movff	?___llmod+3,printf@tmpval+3
  1759                           
  1760                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  1761  0015F6  5071               	movf	printf@tmpval,w,c
  1762  0015F8  0F30               	addlw	48
  1763  0015FA  EC21  F015         	call	_putch
  1764                           
  1765                           ;doprnt.c: 1232: val %= dpowers[c];
  1766  0015FE  C06B  F001         	movff	printf@val,___llmod@dividend
  1767  001602  C06C  F002         	movff	printf@val+1,___llmod@dividend+1
  1768  001606  C06D  F003         	movff	printf@val+2,___llmod@dividend+2
  1769  00160A  C06E  F004         	movff	printf@val+3,___llmod@dividend+3
  1770  00160E  5078               	movf	printf@c,w,c
  1771  001610  0D04               	mullw	4
  1772  001612  0E01               	movlw	low _dpowers
  1773  001614  24F3               	addwf	prodl,w,c
  1774  001616  6EF6               	movwf	tblptrl,c
  1775  001618  0E10               	movlw	high _dpowers
  1776  00161A  20F4               	addwfc	prodh,w,c
  1777  00161C  6EF7               	movwf	tblptrh,c
  1778  00161E                     	if	0	;There are less than 3 active tblptr bytes
  1779  00161E                     	endif
  1780  00161E  0009               	tblrd		*+
  1781  001620  CFF5 F005          	movff	tablat,___llmod@divisor
  1782  001624  0009               	tblrd		*+
  1783  001626  CFF5 F006          	movff	tablat,___llmod@divisor+1
  1784  00162A  0009               	tblrd		*+
  1785  00162C  CFF5 F007          	movff	tablat,___llmod@divisor+2
  1786  001630  000A               	tblrd		*-
  1787  001632  CFF5 F008          	movff	tablat,___llmod@divisor+3
  1788  001636  ECE2  F013         	call	___llmod	;wreg free
  1789  00163A  C001  F06B         	movff	?___llmod,printf@val
  1790  00163E  C002  F06C         	movff	?___llmod+1,printf@val+1
  1791  001642  C003  F06D         	movff	?___llmod+2,printf@val+2
  1792  001646  C004  F06E         	movff	?___llmod+3,printf@val+3
  1793  00164A  D000               	goto	l2451
  1794  00164C                     l2451:
  1795  00164C  0678               	decf	printf@c,f,c
  1796  00164E  2878               	incf	printf@c,w,c
  1797  001650  B4D8               	btfsc	status,2,c
  1798  001652  D009               	goto	l2457
  1799  001654  D790               	goto	l2445
  1800                           
  1801                           ;doprnt.c: 1233: }
  1802                           ;doprnt.c: 1235: while(prec) {
  1803  001656  D007               	goto	l2457
  1804  001658                     l2453:
  1805                           
  1806                           ;doprnt.c: 1236: (putch('0') );
  1807  001658  0E30               	movlw	48
  1808  00165A  EC21  F015         	call	_putch
  1809                           
  1810                           ;doprnt.c: 1237: prec--;
  1811  00165E  0669               	decf	printf@prec,f,c
  1812  001660  A0D8               	btfss	status,0,c
  1813  001662  066A               	decf	printf@prec+1,f,c
  1814  001664  D000               	goto	l2457
  1815  001666                     l2457:
  1816  001666  5069               	movf	printf@prec,w,c
  1817  001668  106A               	iorwf	printf@prec+1,w,c
  1818  00166A  B4D8               	btfsc	status,2,c
  1819  00166C  D010               	goto	l2463
  1820  00166E  D7F4               	goto	l2453
  1821                           
  1822                           ;doprnt.c: 1238: }
  1823                           ;doprnt.c: 1245: continue;
  1824  001670  D00E               	goto	l2463
  1825  001672                     l2459:
  1826                           
  1827                           ;doprnt.c: 1246: }
  1828                           ;doprnt.c: 1422: {
  1829                           ;doprnt.c: 1438: if(flag & 0x03)
  1830  001672  0E03               	movlw	3
  1831  001674  1467               	andwf	printf@flag,w,c
  1832  001676  6E5C               	movwf	??_printf& (0+255),c
  1833  001678  0E00               	movlw	0
  1834  00167A  1468               	andwf	printf@flag+1,w,c
  1835  00167C  6E5D               	movwf	(??_printf+1)& (0+255),c
  1836  00167E  505C               	movf	??_printf,w,c
  1837  001680  105D               	iorwf	??_printf+1,w,c
  1838  001682  B4D8               	btfsc	status,2,c
  1839  001684  D004               	goto	l2463
  1840                           
  1841                           ;doprnt.c: 1439: (putch('-') );
  1842  001686  0E2D               	movlw	45
  1843  001688  EC21  F015         	call	_putch
  1844  00168C  D000               	goto	l2463
  1845  00168E                     l2463:
  1846  00168E  C057  FFF6         	movff	printf@f,tblptrl
  1847  001692  C058  FFF7         	movff	printf@f+1,tblptrh
  1848  001696  4A57               	infsnz	printf@f,f,c
  1849  001698  2A58               	incf	printf@f+1,f,c
  1850  00169A                     	if	0	;tblptru may be non-zero
  1851  00169A                     	endif
  1852  00169A                     	if	0	;tblptru may be non-zero
  1853  00169A                     	endif
  1854  00169A  0008               	tblrd		*
  1855  00169C  CFF5 F078          	movff	tablat,printf@c
  1856  0016A0  5078               	movf	printf@c,w,c
  1857  0016A2  B4D8               	btfsc	status,2,c
  1858  0016A4  D002               	goto	l164
  1859  0016A6  D4F4               	goto	l2315
  1860  0016A8  D000               	goto	l164
  1861  0016AA                     l164:
  1862  0016AA  0012               	return		;funcret
  1863  0016AC                     __end_of_printf:
  1864                           	opt stack 0
  1865                           tblptru	equ	0xFF8
  1866                           tblptrh	equ	0xFF7
  1867                           tblptrl	equ	0xFF6
  1868                           tablat	equ	0xFF5
  1869                           prodh	equ	0xFF4
  1870                           prodl	equ	0xFF3
  1871                           postinc0	equ	0xFEE
  1872                           wreg	equ	0xFE8
  1873                           postdec1	equ	0xFE5
  1874                           plusw1	equ	0xFE3
  1875                           fsr1l	equ	0xFE1
  1876                           indf2	equ	0xFDF
  1877                           postinc2	equ	0xFDE
  1878                           postdec2	equ	0xFDD
  1879                           plusw2	equ	0xFDB
  1880                           fsr2h	equ	0xFDA
  1881                           fsr2l	equ	0xFD9
  1882                           status	equ	0xFD8
  1883                           
  1884 ;; *************** function _scale *****************
  1885 ;; Defined at:
  1886 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1887 ;; Parameters:    Size  Location     Type
  1888 ;;  scl             1    wreg     char 
  1889 ;; Auto vars:     Size  Location     Type
  1890 ;;  scl             1   64[COMRAM] char 
  1891 ;; Return value:  Size  Location     Type
  1892 ;;                  3   58[COMRAM] char 
  1893 ;; Registers used:
  1894 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1895 ;; Tracked objects:
  1896 ;;		On entry : 0/0
  1897 ;;		On exit  : 0/0
  1898 ;;		Unchanged: 0/0
  1899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1900 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1901 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1903 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1904 ;;Total ram usage:        7 bytes
  1905 ;; Hardware stack levels used:    1
  1906 ;; Hardware stack levels required when called:    2
  1907 ;; This function calls:
  1908 ;;		___awdiv
  1909 ;;		___awmod
  1910 ;;		___ftmul
  1911 ;;		___wmul
  1912 ;; This function is called by:
  1913 ;;		_printf
  1914 ;; This function uses a non-reentrant model
  1915 ;;
  1916                           
  1917                           	psect	text2
  1918  0016AC                     __ptext2:
  1919                           	opt stack 0
  1920  0016AC                     _scale:
  1921                           	opt stack 27
  1922                           
  1923                           ;incstack = 0
  1924                           ;scale@scl stored from wreg
  1925  0016AC  6E41               	movwf	scale@scl,c
  1926                           
  1927                           ;doprnt.c: 428: if(scl < 0) {
  1928  0016AE  AE41               	btfss	scale@scl,7,c
  1929  0016B0  D0EF               	goto	l2039
  1930                           
  1931                           ;doprnt.c: 429: scl = -scl;
  1932  0016B2  6C41               	negf	scale@scl,c
  1933                           
  1934                           ;doprnt.c: 430: if(scl>=110)
  1935  0016B4  5041               	movf	scale@scl,w,c
  1936  0016B6  0A80               	xorlw	128
  1937  0016B8  0F12               	addlw	-238
  1938  0016BA  A0D8               	btfss	status,0,c
  1939  0016BC  D08D               	goto	l2029
  1940                           
  1941                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  1942  0016BE  0E00               	movlw	0
  1943  0016C0  6E38               	movwf	___wmul@multiplicand+1,c
  1944  0016C2  0E03               	movlw	3
  1945  0016C4  6E37               	movwf	___wmul@multiplicand,c
  1946  0016C6  0E00               	movlw	0
  1947  0016C8  6E30               	movwf	___awdiv@divisor+1,c
  1948  0016CA  0E0A               	movlw	10
  1949  0016CC  6E2F               	movwf	___awdiv@divisor,c
  1950  0016CE  0E00               	movlw	0
  1951  0016D0  6E2A               	movwf	___awmod@divisor+1,c
  1952  0016D2  0E64               	movlw	100
  1953  0016D4  6E29               	movwf	___awmod@divisor,c
  1954  0016D6  5041               	movf	scale@scl,w,c
  1955  0016D8  6E27               	movwf	___awmod@dividend,c
  1956  0016DA  6A28               	clrf	___awmod@dividend+1,c
  1957  0016DC  BE27               	btfsc	___awmod@dividend,7,c
  1958  0016DE  0628               	decf	___awmod@dividend+1,f,c
  1959  0016E0  ECA1  F013         	call	___awmod	;wreg free
  1960  0016E4  C027  F02D         	movff	?___awmod,___awdiv@dividend
  1961  0016E8  C028  F02E         	movff	?___awmod+1,___awdiv@dividend+1
  1962  0016EC  ECC5  F012         	call	___awdiv	;wreg free
  1963  0016F0  0E09               	movlw	9
  1964  0016F2  242D               	addwf	?___awdiv,w,c
  1965  0016F4  6E35               	movwf	___wmul@multiplier,c
  1966  0016F6  0E00               	movlw	0
  1967  0016F8  202E               	addwfc	?___awdiv+1,w,c
  1968  0016FA  6E36               	movwf	___wmul@multiplier+1,c
  1969  0016FC  ECB9  F014         	call	___wmul	;wreg free
  1970  001700  0E29               	movlw	low __npowers_
  1971  001702  2435               	addwf	?___wmul,w,c
  1972  001704  6EF6               	movwf	tblptrl,c
  1973  001706  0E10               	movlw	high __npowers_
  1974  001708  2036               	addwfc	?___wmul+1,w,c
  1975  00170A  6EF7               	movwf	tblptrh,c
  1976  00170C                     	if	0	;There are less than 3 active tblptr bytes
  1977  00170C                     	endif
  1978  00170C  0009               	tblrd		*+
  1979  00170E  CFF5 F00C          	movff	tablat,___ftmul@f2
  1980  001712  0009               	tblrd		*+
  1981  001714  CFF5 F00D          	movff	tablat,___ftmul@f2+1
  1982  001718  000A               	tblrd		*-
  1983  00171A  CFF5 F00E          	movff	tablat,___ftmul@f2+2
  1984  00171E  0E00               	movlw	0
  1985  001720  6E30               	movwf	___awdiv@divisor+1,c
  1986  001722  0E64               	movlw	100
  1987  001724  6E2F               	movwf	___awdiv@divisor,c
  1988  001726  5041               	movf	scale@scl,w,c
  1989  001728  6E2D               	movwf	___awdiv@dividend,c
  1990  00172A  6A2E               	clrf	___awdiv@dividend+1,c
  1991  00172C  BE2D               	btfsc	___awdiv@dividend,7,c
  1992  00172E  062E               	decf	___awdiv@dividend+1,f,c
  1993  001730  ECC5  F012         	call	___awdiv	;wreg free
  1994  001734  0E12               	movlw	18
  1995  001736  242D               	addwf	?___awdiv,w,c
  1996  001738  6E35               	movwf	___wmul@multiplier,c
  1997  00173A  0E00               	movlw	0
  1998  00173C  202E               	addwfc	?___awdiv+1,w,c
  1999  00173E  6E36               	movwf	___wmul@multiplier+1,c
  2000  001740  0E00               	movlw	0
  2001  001742  6E38               	movwf	___wmul@multiplicand+1,c
  2002  001744  0E03               	movlw	3
  2003  001746  6E37               	movwf	___wmul@multiplicand,c
  2004  001748  ECB9  F014         	call	___wmul	;wreg free
  2005  00174C  0E29               	movlw	low __npowers_
  2006  00174E  2435               	addwf	?___wmul,w,c
  2007  001750  6EF6               	movwf	tblptrl,c
  2008  001752  0E10               	movlw	high __npowers_
  2009  001754  2036               	addwfc	?___wmul+1,w,c
  2010  001756  6EF7               	movwf	tblptrh,c
  2011  001758                     	if	0	;There are less than 3 active tblptr bytes
  2012  001758                     	endif
  2013  001758  0009               	tblrd		*+
  2014  00175A  CFF5 F009          	movff	tablat,___ftmul@f1
  2015  00175E  0009               	tblrd		*+
  2016  001760  CFF5 F00A          	movff	tablat,___ftmul@f1+1
  2017  001764  000A               	tblrd		*-
  2018  001766  CFF5 F00B          	movff	tablat,___ftmul@f1+2
  2019  00176A  EC02  F011         	call	___ftmul	;wreg free
  2020  00176E  C009  F03E         	movff	?___ftmul,_scale$1091
  2021  001772  C00A  F03F         	movff	?___ftmul+1,_scale$1091+1
  2022  001776  C00B  F040         	movff	?___ftmul+2,_scale$1091+2
  2023                           
  2024                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2025  00177A  C03E  F009         	movff	_scale$1091,___ftmul@f1
  2026  00177E  C03F  F00A         	movff	_scale$1091+1,___ftmul@f1+1
  2027  001782  C040  F00B         	movff	_scale$1091+2,___ftmul@f1+2
  2028  001786  0E00               	movlw	0
  2029  001788  6E38               	movwf	___wmul@multiplicand+1,c
  2030  00178A  0E03               	movlw	3
  2031  00178C  6E37               	movwf	___wmul@multiplicand,c
  2032  00178E  0E00               	movlw	0
  2033  001790  6E2A               	movwf	___awmod@divisor+1,c
  2034  001792  0E0A               	movlw	10
  2035  001794  6E29               	movwf	___awmod@divisor,c
  2036  001796  5041               	movf	scale@scl,w,c
  2037  001798  6E27               	movwf	___awmod@dividend,c
  2038  00179A  6A28               	clrf	___awmod@dividend+1,c
  2039  00179C  BE27               	btfsc	___awmod@dividend,7,c
  2040  00179E  0628               	decf	___awmod@dividend+1,f,c
  2041  0017A0  ECA1  F013         	call	___awmod	;wreg free
  2042  0017A4  C027  F035         	movff	?___awmod,___wmul@multiplier
  2043  0017A8  C028  F036         	movff	?___awmod+1,___wmul@multiplier+1
  2044  0017AC  ECB9  F014         	call	___wmul	;wreg free
  2045  0017B0  0E29               	movlw	low __npowers_
  2046  0017B2  2435               	addwf	?___wmul,w,c
  2047  0017B4  6EF6               	movwf	tblptrl,c
  2048  0017B6  0E10               	movlw	high __npowers_
  2049  0017B8  2036               	addwfc	?___wmul+1,w,c
  2050  0017BA  6EF7               	movwf	tblptrh,c
  2051  0017BC                     	if	0	;There are less than 3 active tblptr bytes
  2052  0017BC                     	endif
  2053  0017BC  0009               	tblrd		*+
  2054  0017BE  CFF5 F00C          	movff	tablat,___ftmul@f2
  2055  0017C2  0009               	tblrd		*+
  2056  0017C4  CFF5 F00D          	movff	tablat,___ftmul@f2+1
  2057  0017C8  000A               	tblrd		*-
  2058  0017CA  CFF5 F00E          	movff	tablat,___ftmul@f2+2
  2059  0017CE  EC02  F011         	call	___ftmul	;wreg free
  2060  0017D2  D141               	goto	L5
  2061  0017D4  D15A               	goto	l108
  2062  0017D6  D054               	goto	l2035
  2063  0017D8                     l2029:
  2064                           
  2065                           ;doprnt.c: 432: else if(scl > 10)
  2066  0017D8  5041               	movf	scale@scl,w,c
  2067  0017DA  0A80               	xorlw	128
  2068  0017DC  0F75               	addlw	-139
  2069  0017DE  A0D8               	btfss	status,0,c
  2070  0017E0  D04F               	goto	l2035
  2071                           
  2072                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2073  0017E2  0E00               	movlw	0
  2074  0017E4  6E30               	movwf	___awdiv@divisor+1,c
  2075  0017E6  0E0A               	movlw	10
  2076  0017E8  6E2F               	movwf	___awdiv@divisor,c
  2077  0017EA  5041               	movf	scale@scl,w,c
  2078  0017EC  6E2D               	movwf	___awdiv@dividend,c
  2079  0017EE  6A2E               	clrf	___awdiv@dividend+1,c
  2080  0017F0  BE2D               	btfsc	___awdiv@dividend,7,c
  2081  0017F2  062E               	decf	___awdiv@dividend+1,f,c
  2082  0017F4  ECC5  F012         	call	___awdiv	;wreg free
  2083  0017F8  0E09               	movlw	9
  2084  0017FA  242D               	addwf	?___awdiv,w,c
  2085  0017FC  6E35               	movwf	___wmul@multiplier,c
  2086  0017FE  0E00               	movlw	0
  2087  001800  202E               	addwfc	?___awdiv+1,w,c
  2088  001802  6E36               	movwf	___wmul@multiplier+1,c
  2089  001804  0E00               	movlw	0
  2090  001806  6E38               	movwf	___wmul@multiplicand+1,c
  2091  001808  0E03               	movlw	3
  2092  00180A  6E37               	movwf	___wmul@multiplicand,c
  2093  00180C  ECB9  F014         	call	___wmul	;wreg free
  2094  001810  0E29               	movlw	low __npowers_
  2095  001812  2435               	addwf	?___wmul,w,c
  2096  001814  6EF6               	movwf	tblptrl,c
  2097  001816  0E10               	movlw	high __npowers_
  2098  001818  2036               	addwfc	?___wmul+1,w,c
  2099  00181A  6EF7               	movwf	tblptrh,c
  2100  00181C                     	if	0	;There are less than 3 active tblptr bytes
  2101  00181C                     	endif
  2102  00181C  0009               	tblrd		*+
  2103  00181E  CFF5 F009          	movff	tablat,___ftmul@f1
  2104  001822  0009               	tblrd		*+
  2105  001824  CFF5 F00A          	movff	tablat,___ftmul@f1+1
  2106  001828  000A               	tblrd		*-
  2107  00182A  CFF5 F00B          	movff	tablat,___ftmul@f1+2
  2108  00182E  0E00               	movlw	0
  2109  001830  6E38               	movwf	___wmul@multiplicand+1,c
  2110  001832  0E03               	movlw	3
  2111  001834  6E37               	movwf	___wmul@multiplicand,c
  2112  001836  0E00               	movlw	0
  2113  001838  6E2A               	movwf	___awmod@divisor+1,c
  2114  00183A  0E0A               	movlw	10
  2115  00183C  6E29               	movwf	___awmod@divisor,c
  2116  00183E  5041               	movf	scale@scl,w,c
  2117  001840  6E27               	movwf	___awmod@dividend,c
  2118  001842  6A28               	clrf	___awmod@dividend+1,c
  2119  001844  BE27               	btfsc	___awmod@dividend,7,c
  2120  001846  0628               	decf	___awmod@dividend+1,f,c
  2121  001848  ECA1  F013         	call	___awmod	;wreg free
  2122  00184C  C027  F035         	movff	?___awmod,___wmul@multiplier
  2123  001850  C028  F036         	movff	?___awmod+1,___wmul@multiplier+1
  2124  001854  ECB9  F014         	call	___wmul	;wreg free
  2125  001858  0E29               	movlw	low __npowers_
  2126  00185A  2435               	addwf	?___wmul,w,c
  2127  00185C  6EF6               	movwf	tblptrl,c
  2128  00185E  0E10               	movlw	high __npowers_
  2129  001860  2036               	addwfc	?___wmul+1,w,c
  2130  001862  6EF7               	movwf	tblptrh,c
  2131  001864                     	if	0	;There are less than 3 active tblptr bytes
  2132  001864                     	endif
  2133  001864  0009               	tblrd		*+
  2134  001866  CFF5 F00C          	movff	tablat,___ftmul@f2
  2135  00186A  0009               	tblrd		*+
  2136  00186C  CFF5 F00D          	movff	tablat,___ftmul@f2+1
  2137  001870  000A               	tblrd		*-
  2138  001872  CFF5 F00E          	movff	tablat,___ftmul@f2+2
  2139  001876  EC02  F011         	call	___ftmul	;wreg free
  2140  00187A  D0ED               	goto	L5
  2141  00187C  D106               	goto	l108
  2142  00187E  D000               	goto	l2035
  2143  001880                     l2035:
  2144                           
  2145                           ;doprnt.c: 434: return _npowers_[scl];
  2146  001880  5041               	movf	scale@scl,w,c
  2147  001882  0D03               	mullw	3
  2148  001884  0E29               	movlw	low __npowers_
  2149  001886  24F3               	addwf	prodl,w,c
  2150  001888  6EF6               	movwf	tblptrl,c
  2151  00188A  0E10               	movlw	high __npowers_
  2152  00188C  D0F2               	goto	L4
  2153  00188E  D0FD               	goto	l108
  2154  001890                     l2039:
  2155                           
  2156                           ;doprnt.c: 435: }
  2157                           ;doprnt.c: 436: if(scl>=110)
  2158  001890  5041               	movf	scale@scl,w,c
  2159  001892  0A80               	xorlw	128
  2160  001894  0F12               	addlw	-238
  2161  001896  A0D8               	btfss	status,0,c
  2162  001898  D08D               	goto	l2047
  2163                           
  2164                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2165  00189A  0E00               	movlw	0
  2166  00189C  6E38               	movwf	___wmul@multiplicand+1,c
  2167  00189E  0E03               	movlw	3
  2168  0018A0  6E37               	movwf	___wmul@multiplicand,c
  2169  0018A2  0E00               	movlw	0
  2170  0018A4  6E30               	movwf	___awdiv@divisor+1,c
  2171  0018A6  0E0A               	movlw	10
  2172  0018A8  6E2F               	movwf	___awdiv@divisor,c
  2173  0018AA  0E00               	movlw	0
  2174  0018AC  6E2A               	movwf	___awmod@divisor+1,c
  2175  0018AE  0E64               	movlw	100
  2176  0018B0  6E29               	movwf	___awmod@divisor,c
  2177  0018B2  5041               	movf	scale@scl,w,c
  2178  0018B4  6E27               	movwf	___awmod@dividend,c
  2179  0018B6  6A28               	clrf	___awmod@dividend+1,c
  2180  0018B8  BE27               	btfsc	___awmod@dividend,7,c
  2181  0018BA  0628               	decf	___awmod@dividend+1,f,c
  2182  0018BC  ECA1  F013         	call	___awmod	;wreg free
  2183  0018C0  C027  F02D         	movff	?___awmod,___awdiv@dividend
  2184  0018C4  C028  F02E         	movff	?___awmod+1,___awdiv@dividend+1
  2185  0018C8  ECC5  F012         	call	___awdiv	;wreg free
  2186  0018CC  0E09               	movlw	9
  2187  0018CE  242D               	addwf	?___awdiv,w,c
  2188  0018D0  6E35               	movwf	___wmul@multiplier,c
  2189  0018D2  0E00               	movlw	0
  2190  0018D4  202E               	addwfc	?___awdiv+1,w,c
  2191  0018D6  6E36               	movwf	___wmul@multiplier+1,c
  2192  0018D8  ECB9  F014         	call	___wmul	;wreg free
  2193  0018DC  0E50               	movlw	low __powers_
  2194  0018DE  2435               	addwf	?___wmul,w,c
  2195  0018E0  6EF6               	movwf	tblptrl,c
  2196  0018E2  0E10               	movlw	high __powers_
  2197  0018E4  2036               	addwfc	?___wmul+1,w,c
  2198  0018E6  6EF7               	movwf	tblptrh,c
  2199  0018E8                     	if	0	;There are less than 3 active tblptr bytes
  2200  0018E8                     	endif
  2201  0018E8  0009               	tblrd		*+
  2202  0018EA  CFF5 F00C          	movff	tablat,___ftmul@f2
  2203  0018EE  0009               	tblrd		*+
  2204  0018F0  CFF5 F00D          	movff	tablat,___ftmul@f2+1
  2205  0018F4  000A               	tblrd		*-
  2206  0018F6  CFF5 F00E          	movff	tablat,___ftmul@f2+2
  2207  0018FA  0E00               	movlw	0
  2208  0018FC  6E30               	movwf	___awdiv@divisor+1,c
  2209  0018FE  0E64               	movlw	100
  2210  001900  6E2F               	movwf	___awdiv@divisor,c
  2211  001902  5041               	movf	scale@scl,w,c
  2212  001904  6E2D               	movwf	___awdiv@dividend,c
  2213  001906  6A2E               	clrf	___awdiv@dividend+1,c
  2214  001908  BE2D               	btfsc	___awdiv@dividend,7,c
  2215  00190A  062E               	decf	___awdiv@dividend+1,f,c
  2216  00190C  ECC5  F012         	call	___awdiv	;wreg free
  2217  001910  0E12               	movlw	18
  2218  001912  242D               	addwf	?___awdiv,w,c
  2219  001914  6E35               	movwf	___wmul@multiplier,c
  2220  001916  0E00               	movlw	0
  2221  001918  202E               	addwfc	?___awdiv+1,w,c
  2222  00191A  6E36               	movwf	___wmul@multiplier+1,c
  2223  00191C  0E00               	movlw	0
  2224  00191E  6E38               	movwf	___wmul@multiplicand+1,c
  2225  001920  0E03               	movlw	3
  2226  001922  6E37               	movwf	___wmul@multiplicand,c
  2227  001924  ECB9  F014         	call	___wmul	;wreg free
  2228  001928  0E50               	movlw	low __powers_
  2229  00192A  2435               	addwf	?___wmul,w,c
  2230  00192C  6EF6               	movwf	tblptrl,c
  2231  00192E  0E10               	movlw	high __powers_
  2232  001930  2036               	addwfc	?___wmul+1,w,c
  2233  001932  6EF7               	movwf	tblptrh,c
  2234  001934                     	if	0	;There are less than 3 active tblptr bytes
  2235  001934                     	endif
  2236  001934  0009               	tblrd		*+
  2237  001936  CFF5 F009          	movff	tablat,___ftmul@f1
  2238  00193A  0009               	tblrd		*+
  2239  00193C  CFF5 F00A          	movff	tablat,___ftmul@f1+1
  2240  001940  000A               	tblrd		*-
  2241  001942  CFF5 F00B          	movff	tablat,___ftmul@f1+2
  2242  001946  EC02  F011         	call	___ftmul	;wreg free
  2243  00194A  C009  F03E         	movff	?___ftmul,_scale$1091
  2244  00194E  C00A  F03F         	movff	?___ftmul+1,_scale$1091+1
  2245  001952  C00B  F040         	movff	?___ftmul+2,_scale$1091+2
  2246                           
  2247                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2248  001956  C03E  F009         	movff	_scale$1091,___ftmul@f1
  2249  00195A  C03F  F00A         	movff	_scale$1091+1,___ftmul@f1+1
  2250  00195E  C040  F00B         	movff	_scale$1091+2,___ftmul@f1+2
  2251  001962  0E00               	movlw	0
  2252  001964  6E38               	movwf	___wmul@multiplicand+1,c
  2253  001966  0E03               	movlw	3
  2254  001968  6E37               	movwf	___wmul@multiplicand,c
  2255  00196A  0E00               	movlw	0
  2256  00196C  6E2A               	movwf	___awmod@divisor+1,c
  2257  00196E  0E0A               	movlw	10
  2258  001970  6E29               	movwf	___awmod@divisor,c
  2259  001972  5041               	movf	scale@scl,w,c
  2260  001974  6E27               	movwf	___awmod@dividend,c
  2261  001976  6A28               	clrf	___awmod@dividend+1,c
  2262  001978  BE27               	btfsc	___awmod@dividend,7,c
  2263  00197A  0628               	decf	___awmod@dividend+1,f,c
  2264  00197C  ECA1  F013         	call	___awmod	;wreg free
  2265  001980  C027  F035         	movff	?___awmod,___wmul@multiplier
  2266  001984  C028  F036         	movff	?___awmod+1,___wmul@multiplier+1
  2267  001988  ECB9  F014         	call	___wmul	;wreg free
  2268  00198C  0E50               	movlw	low __powers_
  2269  00198E  2435               	addwf	?___wmul,w,c
  2270  001990  6EF6               	movwf	tblptrl,c
  2271  001992  0E10               	movlw	high __powers_
  2272  001994  2036               	addwfc	?___wmul+1,w,c
  2273  001996  6EF7               	movwf	tblptrh,c
  2274  001998                     	if	0	;There are less than 3 active tblptr bytes
  2275  001998                     	endif
  2276  001998  0009               	tblrd		*+
  2277  00199A  CFF5 F00C          	movff	tablat,___ftmul@f2
  2278  00199E  0009               	tblrd		*+
  2279  0019A0  CFF5 F00D          	movff	tablat,___ftmul@f2+1
  2280  0019A4  000A               	tblrd		*-
  2281  0019A6  CFF5 F00E          	movff	tablat,___ftmul@f2+2
  2282  0019AA  EC02  F011         	call	___ftmul	;wreg free
  2283  0019AE  D053               	goto	L5
  2284  0019B0  D06C               	goto	l108
  2285  0019B2  D059               	goto	l2053
  2286  0019B4                     l2047:
  2287                           
  2288                           ;doprnt.c: 438: else if(scl > 10)
  2289  0019B4  5041               	movf	scale@scl,w,c
  2290  0019B6  0A80               	xorlw	128
  2291  0019B8  0F75               	addlw	-139
  2292  0019BA  A0D8               	btfss	status,0,c
  2293  0019BC  D054               	goto	l2053
  2294                           
  2295                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2296  0019BE  0E00               	movlw	0
  2297  0019C0  6E30               	movwf	___awdiv@divisor+1,c
  2298  0019C2  0E0A               	movlw	10
  2299  0019C4  6E2F               	movwf	___awdiv@divisor,c
  2300  0019C6  5041               	movf	scale@scl,w,c
  2301  0019C8  6E2D               	movwf	___awdiv@dividend,c
  2302  0019CA  6A2E               	clrf	___awdiv@dividend+1,c
  2303  0019CC  BE2D               	btfsc	___awdiv@dividend,7,c
  2304  0019CE  062E               	decf	___awdiv@dividend+1,f,c
  2305  0019D0  ECC5  F012         	call	___awdiv	;wreg free
  2306  0019D4  0E09               	movlw	9
  2307  0019D6  242D               	addwf	?___awdiv,w,c
  2308  0019D8  6E35               	movwf	___wmul@multiplier,c
  2309  0019DA  0E00               	movlw	0
  2310  0019DC  202E               	addwfc	?___awdiv+1,w,c
  2311  0019DE  6E36               	movwf	___wmul@multiplier+1,c
  2312  0019E0  0E00               	movlw	0
  2313  0019E2  6E38               	movwf	___wmul@multiplicand+1,c
  2314  0019E4  0E03               	movlw	3
  2315  0019E6  6E37               	movwf	___wmul@multiplicand,c
  2316  0019E8  ECB9  F014         	call	___wmul	;wreg free
  2317  0019EC  0E50               	movlw	low __powers_
  2318  0019EE  2435               	addwf	?___wmul,w,c
  2319  0019F0  6EF6               	movwf	tblptrl,c
  2320  0019F2  0E10               	movlw	high __powers_
  2321  0019F4  2036               	addwfc	?___wmul+1,w,c
  2322  0019F6  6EF7               	movwf	tblptrh,c
  2323  0019F8                     	if	0	;There are less than 3 active tblptr bytes
  2324  0019F8                     	endif
  2325  0019F8  0009               	tblrd		*+
  2326  0019FA  CFF5 F009          	movff	tablat,___ftmul@f1
  2327  0019FE  0009               	tblrd		*+
  2328  001A00  CFF5 F00A          	movff	tablat,___ftmul@f1+1
  2329  001A04  000A               	tblrd		*-
  2330  001A06  CFF5 F00B          	movff	tablat,___ftmul@f1+2
  2331  001A0A  0E00               	movlw	0
  2332  001A0C  6E38               	movwf	___wmul@multiplicand+1,c
  2333  001A0E  0E03               	movlw	3
  2334  001A10  6E37               	movwf	___wmul@multiplicand,c
  2335  001A12  0E00               	movlw	0
  2336  001A14  6E2A               	movwf	___awmod@divisor+1,c
  2337  001A16  0E0A               	movlw	10
  2338  001A18  6E29               	movwf	___awmod@divisor,c
  2339  001A1A  5041               	movf	scale@scl,w,c
  2340  001A1C  6E27               	movwf	___awmod@dividend,c
  2341  001A1E  6A28               	clrf	___awmod@dividend+1,c
  2342  001A20  BE27               	btfsc	___awmod@dividend,7,c
  2343  001A22  0628               	decf	___awmod@dividend+1,f,c
  2344  001A24  ECA1  F013         	call	___awmod	;wreg free
  2345  001A28  C027  F035         	movff	?___awmod,___wmul@multiplier
  2346  001A2C  C028  F036         	movff	?___awmod+1,___wmul@multiplier+1
  2347  001A30  ECB9  F014         	call	___wmul	;wreg free
  2348  001A34  0E50               	movlw	low __powers_
  2349  001A36  2435               	addwf	?___wmul,w,c
  2350  001A38  6EF6               	movwf	tblptrl,c
  2351  001A3A  0E10               	movlw	high __powers_
  2352  001A3C  2036               	addwfc	?___wmul+1,w,c
  2353  001A3E  6EF7               	movwf	tblptrh,c
  2354  001A40                     	if	0	;There are less than 3 active tblptr bytes
  2355  001A40                     	endif
  2356  001A40  0009               	tblrd		*+
  2357  001A42  CFF5 F00C          	movff	tablat,___ftmul@f2
  2358  001A46  0009               	tblrd		*+
  2359  001A48  CFF5 F00D          	movff	tablat,___ftmul@f2+1
  2360  001A4C  000A               	tblrd		*-
  2361  001A4E  CFF5 F00E          	movff	tablat,___ftmul@f2+2
  2362  001A52  EC02  F011         	call	___ftmul	;wreg free
  2363  001A56                     L5:
  2364  001A56  C009  F03B         	movff	?___ftmul,?_scale
  2365  001A5A  C00A  F03C         	movff	?___ftmul+1,?_scale+1
  2366  001A5E  C00B  F03D         	movff	?___ftmul+2,?_scale+2
  2367  001A62  D013               	goto	l108
  2368  001A64  D000               	goto	l2053
  2369  001A66                     l2053:
  2370                           
  2371                           ;doprnt.c: 440: return _powers_[scl];
  2372  001A66  5041               	movf	scale@scl,w,c
  2373  001A68  0D03               	mullw	3
  2374  001A6A  0E50               	movlw	low __powers_
  2375  001A6C  24F3               	addwf	prodl,w,c
  2376  001A6E  6EF6               	movwf	tblptrl,c
  2377  001A70  0E10               	movlw	high __powers_
  2378  001A72                     L4:
  2379  001A72  20F4               	addwfc	prodh,w,c
  2380  001A74  6EF7               	movwf	tblptrh,c
  2381  001A76                     	if	0	;There are less than 3 active tblptr bytes
  2382  001A76                     	endif
  2383  001A76  0009               	tblrd		*+
  2384  001A78  CFF5 F03B          	movff	tablat,?_scale
  2385  001A7C  0009               	tblrd		*+
  2386  001A7E  CFF5 F03C          	movff	tablat,?_scale+1
  2387  001A82  000A               	tblrd		*-
  2388  001A84  CFF5 F03D          	movff	tablat,?_scale+2
  2389  001A88  D000               	goto	l108
  2390  001A8A                     l108:
  2391  001A8A  0012               	return		;funcret
  2392  001A8C                     __end_of_scale:
  2393                           	opt stack 0
  2394                           tblptru	equ	0xFF8
  2395                           tblptrh	equ	0xFF7
  2396                           tblptrl	equ	0xFF6
  2397                           tablat	equ	0xFF5
  2398                           prodh	equ	0xFF4
  2399                           prodl	equ	0xFF3
  2400                           postinc0	equ	0xFEE
  2401                           wreg	equ	0xFE8
  2402                           postdec1	equ	0xFE5
  2403                           plusw1	equ	0xFE3
  2404                           fsr1l	equ	0xFE1
  2405                           indf2	equ	0xFDF
  2406                           postinc2	equ	0xFDE
  2407                           postdec2	equ	0xFDD
  2408                           plusw2	equ	0xFDB
  2409                           fsr2h	equ	0xFDA
  2410                           fsr2l	equ	0xFD9
  2411                           status	equ	0xFD8
  2412                           
  2413 ;; *************** function _putch *****************
  2414 ;; Defined at:
  2415 ;;		line 29 in file "Lab6pA.c"
  2416 ;; Parameters:    Size  Location     Type
  2417 ;;  c               1    wreg     unsigned char 
  2418 ;; Auto vars:     Size  Location     Type
  2419 ;;  c               1    0[COMRAM] unsigned char 
  2420 ;; Return value:  Size  Location     Type
  2421 ;;		None               void
  2422 ;; Registers used:
  2423 ;;		wreg
  2424 ;; Tracked objects:
  2425 ;;		On entry : 0/0
  2426 ;;		On exit  : 0/0
  2427 ;;		Unchanged: 0/0
  2428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2430 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2432 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2433 ;;Total ram usage:        1 bytes
  2434 ;; Hardware stack levels used:    1
  2435 ;; This function calls:
  2436 ;;		Nothing
  2437 ;; This function is called by:
  2438 ;;		_printf
  2439 ;; This function uses a non-reentrant model
  2440 ;;
  2441                           
  2442                           	psect	text3
  2443  002A42                     __ptext3:
  2444                           	opt stack 0
  2445  002A42                     _putch:
  2446                           	opt stack 29
  2447                           
  2448                           ;incstack = 0
  2449                           ;putch@c stored from wreg
  2450  002A42  6E01               	movwf	putch@c,c
  2451                           
  2452                           ;Lab6pA.c: 31: while (!TRMT);
  2453  002A44  D000               	goto	l52
  2454  002A46                     l52:
  2455  002A46  A2AC               	btfss	4012,1,c	;volatile
  2456  002A48  D7FE               	goto	l52
  2457                           
  2458                           ;Lab6pA.c: 32: TXREG = c;
  2459  002A4A  C001  FFAD         	movff	putch@c,4013	;volatile
  2460  002A4E  0012               	return		;funcret
  2461  002A50                     __end_of_putch:
  2462                           	opt stack 0
  2463                           tblptru	equ	0xFF8
  2464                           tblptrh	equ	0xFF7
  2465                           tblptrl	equ	0xFF6
  2466                           tablat	equ	0xFF5
  2467                           prodh	equ	0xFF4
  2468                           prodl	equ	0xFF3
  2469                           postinc0	equ	0xFEE
  2470                           wreg	equ	0xFE8
  2471                           postdec1	equ	0xFE5
  2472                           plusw1	equ	0xFE3
  2473                           fsr1l	equ	0xFE1
  2474                           indf2	equ	0xFDF
  2475                           postinc2	equ	0xFDE
  2476                           postdec2	equ	0xFDD
  2477                           plusw2	equ	0xFDB
  2478                           fsr2h	equ	0xFDA
  2479                           fsr2l	equ	0xFD9
  2480                           status	equ	0xFD8
  2481                           
  2482 ;; *************** function _fround *****************
  2483 ;; Defined at:
  2484 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;  prec            1    wreg     unsigned char 
  2487 ;; Auto vars:     Size  Location     Type
  2488 ;;  prec            1   67[COMRAM] unsigned char 
  2489 ;; Return value:  Size  Location     Type
  2490 ;;                  3   58[COMRAM] unsigned char 
  2491 ;; Registers used:
  2492 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2493 ;; Tracked objects:
  2494 ;;		On entry : 0/0
  2495 ;;		On exit  : 0/0
  2496 ;;		Unchanged: 0/0
  2497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2498 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2499 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2501 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2502 ;;Total ram usage:       10 bytes
  2503 ;; Hardware stack levels used:    1
  2504 ;; Hardware stack levels required when called:    2
  2505 ;; This function calls:
  2506 ;;		___awdiv
  2507 ;;		___awmod
  2508 ;;		___ftmul
  2509 ;;		___wmul
  2510 ;; This function is called by:
  2511 ;;		_printf
  2512 ;; This function uses a non-reentrant model
  2513 ;;
  2514                           
  2515                           	psect	text4
  2516  001A8C                     __ptext4:
  2517                           	opt stack 0
  2518  001A8C                     _fround:
  2519                           	opt stack 27
  2520                           
  2521                           ;incstack = 0
  2522                           ;fround@prec stored from wreg
  2523  001A8C  6E44               	movwf	fround@prec,c
  2524                           
  2525                           ;doprnt.c: 413: if(prec>=110)
  2526  001A8E  0E6D               	movlw	109
  2527  001A90  6444               	cpfsgt	fround@prec,c
  2528  001A92  D09B               	goto	l2007
  2529                           
  2530                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2531  001A94  0E00               	movlw	0
  2532  001A96  6E38               	movwf	___wmul@multiplicand+1,c
  2533  001A98  0E03               	movlw	3
  2534  001A9A  6E37               	movwf	___wmul@multiplicand,c
  2535  001A9C  0E00               	movlw	0
  2536  001A9E  6E30               	movwf	___awdiv@divisor+1,c
  2537  001AA0  0E0A               	movlw	10
  2538  001AA2  6E2F               	movwf	___awdiv@divisor,c
  2539  001AA4  0E00               	movlw	0
  2540  001AA6  6E2A               	movwf	___awmod@divisor+1,c
  2541  001AA8  0E64               	movlw	100
  2542  001AAA  6E29               	movwf	___awmod@divisor,c
  2543  001AAC  C044  F027         	movff	fround@prec,___awmod@dividend
  2544  001AB0  6A28               	clrf	___awmod@dividend+1,c
  2545  001AB2  ECA1  F013         	call	___awmod	;wreg free
  2546  001AB6  C027  F02D         	movff	?___awmod,___awdiv@dividend
  2547  001ABA  C028  F02E         	movff	?___awmod+1,___awdiv@dividend+1
  2548  001ABE  ECC5  F012         	call	___awdiv	;wreg free
  2549  001AC2  0E09               	movlw	9
  2550  001AC4  242D               	addwf	?___awdiv,w,c
  2551  001AC6  6E35               	movwf	___wmul@multiplier,c
  2552  001AC8  0E00               	movlw	0
  2553  001ACA  202E               	addwfc	?___awdiv+1,w,c
  2554  001ACC  6E36               	movwf	___wmul@multiplier+1,c
  2555  001ACE  ECB9  F014         	call	___wmul	;wreg free
  2556  001AD2  0E29               	movlw	low __npowers_
  2557  001AD4  2435               	addwf	?___wmul,w,c
  2558  001AD6  6EF6               	movwf	tblptrl,c
  2559  001AD8  0E10               	movlw	high __npowers_
  2560  001ADA  2036               	addwfc	?___wmul+1,w,c
  2561  001ADC  6EF7               	movwf	tblptrh,c
  2562  001ADE                     	if	0	;There are less than 3 active tblptr bytes
  2563  001ADE                     	endif
  2564  001ADE  0009               	tblrd		*+
  2565  001AE0  CFF5 F00C          	movff	tablat,___ftmul@f2
  2566  001AE4  0009               	tblrd		*+
  2567  001AE6  CFF5 F00D          	movff	tablat,___ftmul@f2+1
  2568  001AEA  000A               	tblrd		*-
  2569  001AEC  CFF5 F00E          	movff	tablat,___ftmul@f2+2
  2570  001AF0  0E00               	movlw	0
  2571  001AF2  6E30               	movwf	___awdiv@divisor+1,c
  2572  001AF4  0E64               	movlw	100
  2573  001AF6  6E2F               	movwf	___awdiv@divisor,c
  2574  001AF8  C044  F02D         	movff	fround@prec,___awdiv@dividend
  2575  001AFC  6A2E               	clrf	___awdiv@dividend+1,c
  2576  001AFE  ECC5  F012         	call	___awdiv	;wreg free
  2577  001B02  0E12               	movlw	18
  2578  001B04  242D               	addwf	?___awdiv,w,c
  2579  001B06  6E35               	movwf	___wmul@multiplier,c
  2580  001B08  0E00               	movlw	0
  2581  001B0A  202E               	addwfc	?___awdiv+1,w,c
  2582  001B0C  6E36               	movwf	___wmul@multiplier+1,c
  2583  001B0E  0E00               	movlw	0
  2584  001B10  6E38               	movwf	___wmul@multiplicand+1,c
  2585  001B12  0E03               	movlw	3
  2586  001B14  6E37               	movwf	___wmul@multiplicand,c
  2587  001B16  ECB9  F014         	call	___wmul	;wreg free
  2588  001B1A  0E29               	movlw	low __npowers_
  2589  001B1C  2435               	addwf	?___wmul,w,c
  2590  001B1E  6EF6               	movwf	tblptrl,c
  2591  001B20  0E10               	movlw	high __npowers_
  2592  001B22  2036               	addwfc	?___wmul+1,w,c
  2593  001B24  6EF7               	movwf	tblptrh,c
  2594  001B26                     	if	0	;There are less than 3 active tblptr bytes
  2595  001B26                     	endif
  2596  001B26  0009               	tblrd		*+
  2597  001B28  CFF5 F009          	movff	tablat,___ftmul@f1
  2598  001B2C  0009               	tblrd		*+
  2599  001B2E  CFF5 F00A          	movff	tablat,___ftmul@f1+1
  2600  001B32  000A               	tblrd		*-
  2601  001B34  CFF5 F00B          	movff	tablat,___ftmul@f1+2
  2602  001B38  EC02  F011         	call	___ftmul	;wreg free
  2603  001B3C  C009  F041         	movff	?___ftmul,_fround$1089
  2604  001B40  C00A  F042         	movff	?___ftmul+1,_fround$1089+1
  2605  001B44  C00B  F043         	movff	?___ftmul+2,_fround$1089+2
  2606                           
  2607                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2608  001B48  0E00               	movlw	0
  2609  001B4A  6E38               	movwf	___wmul@multiplicand+1,c
  2610  001B4C  0E03               	movlw	3
  2611  001B4E  6E37               	movwf	___wmul@multiplicand,c
  2612  001B50  0E00               	movlw	0
  2613  001B52  6E2A               	movwf	___awmod@divisor+1,c
  2614  001B54  0E0A               	movlw	10
  2615  001B56  6E29               	movwf	___awmod@divisor,c
  2616  001B58  C044  F027         	movff	fround@prec,___awmod@dividend
  2617  001B5C  6A28               	clrf	___awmod@dividend+1,c
  2618  001B5E  ECA1  F013         	call	___awmod	;wreg free
  2619  001B62  C027  F035         	movff	?___awmod,___wmul@multiplier
  2620  001B66  C028  F036         	movff	?___awmod+1,___wmul@multiplier+1
  2621  001B6A  ECB9  F014         	call	___wmul	;wreg free
  2622  001B6E  0E29               	movlw	low __npowers_
  2623  001B70  2435               	addwf	?___wmul,w,c
  2624  001B72  6EF6               	movwf	tblptrl,c
  2625  001B74  0E10               	movlw	high __npowers_
  2626  001B76  2036               	addwfc	?___wmul+1,w,c
  2627  001B78  6EF7               	movwf	tblptrh,c
  2628  001B7A                     	if	0	;There are less than 3 active tblptr bytes
  2629  001B7A                     	endif
  2630  001B7A  0009               	tblrd		*+
  2631  001B7C  CFF5 F00C          	movff	tablat,___ftmul@f2
  2632  001B80  0009               	tblrd		*+
  2633  001B82  CFF5 F00D          	movff	tablat,___ftmul@f2+1
  2634  001B86  000A               	tblrd		*-
  2635  001B88  CFF5 F00E          	movff	tablat,___ftmul@f2+2
  2636  001B8C  C041  F009         	movff	_fround$1089,___ftmul@f1
  2637  001B90  C042  F00A         	movff	_fround$1089+1,___ftmul@f1+1
  2638  001B94  C043  F00B         	movff	_fround$1089+2,___ftmul@f1+2
  2639  001B98  EC02  F011         	call	___ftmul	;wreg free
  2640  001B9C  C009  F03E         	movff	?___ftmul,_fround$1090
  2641  001BA0  C00A  F03F         	movff	?___ftmul+1,_fround$1090+1
  2642  001BA4  C00B  F040         	movff	?___ftmul+2,_fround$1090+2
  2643                           
  2644                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2645  001BA8  C03E  F009         	movff	_fround$1090,___ftmul@f1
  2646  001BAC  C03F  F00A         	movff	_fround$1090+1,___ftmul@f1+1
  2647  001BB0  C040  F00B         	movff	_fround$1090+2,___ftmul@f1+2
  2648  001BB4  0E00               	movlw	0
  2649  001BB6  6E0C               	movwf	___ftmul@f2,c
  2650  001BB8  0E00               	movlw	0
  2651  001BBA  6E0D               	movwf	___ftmul@f2+1,c
  2652  001BBC  0E3F               	movlw	63
  2653  001BBE  6E0E               	movwf	___ftmul@f2+2,c
  2654  001BC0  EC02  F011         	call	___ftmul	;wreg free
  2655  001BC4  D07D               	goto	L7
  2656  001BC6  D083               	goto	l101
  2657  001BC8  D062               	goto	l2015
  2658  001BCA                     l2007:
  2659                           
  2660                           ;doprnt.c: 415: else if(prec > 10)
  2661  001BCA  0E0A               	movlw	10
  2662  001BCC  6444               	cpfsgt	fround@prec,c
  2663  001BCE  D05F               	goto	l2015
  2664                           
  2665                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2666  001BD0  0E00               	movlw	0
  2667  001BD2  6E38               	movwf	___wmul@multiplicand+1,c
  2668  001BD4  0E03               	movlw	3
  2669  001BD6  6E37               	movwf	___wmul@multiplicand,c
  2670  001BD8  0E00               	movlw	0
  2671  001BDA  6E2A               	movwf	___awmod@divisor+1,c
  2672  001BDC  0E0A               	movlw	10
  2673  001BDE  6E29               	movwf	___awmod@divisor,c
  2674  001BE0  C044  F027         	movff	fround@prec,___awmod@dividend
  2675  001BE4  6A28               	clrf	___awmod@dividend+1,c
  2676  001BE6  ECA1  F013         	call	___awmod	;wreg free
  2677  001BEA  C027  F035         	movff	?___awmod,___wmul@multiplier
  2678  001BEE  C028  F036         	movff	?___awmod+1,___wmul@multiplier+1
  2679  001BF2  ECB9  F014         	call	___wmul	;wreg free
  2680  001BF6  0E29               	movlw	low __npowers_
  2681  001BF8  2435               	addwf	?___wmul,w,c
  2682  001BFA  6EF6               	movwf	tblptrl,c
  2683  001BFC  0E10               	movlw	high __npowers_
  2684  001BFE  2036               	addwfc	?___wmul+1,w,c
  2685  001C00  6EF7               	movwf	tblptrh,c
  2686  001C02                     	if	0	;There are less than 3 active tblptr bytes
  2687  001C02                     	endif
  2688  001C02  0009               	tblrd		*+
  2689  001C04  CFF5 F00C          	movff	tablat,___ftmul@f2
  2690  001C08  0009               	tblrd		*+
  2691  001C0A  CFF5 F00D          	movff	tablat,___ftmul@f2+1
  2692  001C0E  000A               	tblrd		*-
  2693  001C10  CFF5 F00E          	movff	tablat,___ftmul@f2+2
  2694  001C14  0E00               	movlw	0
  2695  001C16  6E30               	movwf	___awdiv@divisor+1,c
  2696  001C18  0E0A               	movlw	10
  2697  001C1A  6E2F               	movwf	___awdiv@divisor,c
  2698  001C1C  C044  F02D         	movff	fround@prec,___awdiv@dividend
  2699  001C20  6A2E               	clrf	___awdiv@dividend+1,c
  2700  001C22  ECC5  F012         	call	___awdiv	;wreg free
  2701  001C26  0E09               	movlw	9
  2702  001C28  242D               	addwf	?___awdiv,w,c
  2703  001C2A  6E35               	movwf	___wmul@multiplier,c
  2704  001C2C  0E00               	movlw	0
  2705  001C2E  202E               	addwfc	?___awdiv+1,w,c
  2706  001C30  6E36               	movwf	___wmul@multiplier+1,c
  2707  001C32  0E00               	movlw	0
  2708  001C34  6E38               	movwf	___wmul@multiplicand+1,c
  2709  001C36  0E03               	movlw	3
  2710  001C38  6E37               	movwf	___wmul@multiplicand,c
  2711  001C3A  ECB9  F014         	call	___wmul	;wreg free
  2712  001C3E  0E29               	movlw	low __npowers_
  2713  001C40  2435               	addwf	?___wmul,w,c
  2714  001C42  6EF6               	movwf	tblptrl,c
  2715  001C44  0E10               	movlw	high __npowers_
  2716  001C46  2036               	addwfc	?___wmul+1,w,c
  2717  001C48  6EF7               	movwf	tblptrh,c
  2718  001C4A                     	if	0	;There are less than 3 active tblptr bytes
  2719  001C4A                     	endif
  2720  001C4A  0009               	tblrd		*+
  2721  001C4C  CFF5 F009          	movff	tablat,___ftmul@f1
  2722  001C50  0009               	tblrd		*+
  2723  001C52  CFF5 F00A          	movff	tablat,___ftmul@f1+1
  2724  001C56  000A               	tblrd		*-
  2725  001C58  CFF5 F00B          	movff	tablat,___ftmul@f1+2
  2726  001C5C  EC02  F011         	call	___ftmul	;wreg free
  2727  001C60  C009  F041         	movff	?___ftmul,_fround$1089
  2728  001C64  C00A  F042         	movff	?___ftmul+1,_fround$1089+1
  2729  001C68  C00B  F043         	movff	?___ftmul+2,_fround$1089+2
  2730                           
  2731                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2732  001C6C  C041  F009         	movff	_fround$1089,___ftmul@f1
  2733  001C70  C042  F00A         	movff	_fround$1089+1,___ftmul@f1+1
  2734  001C74  C043  F00B         	movff	_fround$1089+2,___ftmul@f1+2
  2735  001C78  0E00               	movlw	0
  2736  001C7A  6E0C               	movwf	___ftmul@f2,c
  2737  001C7C  0E00               	movlw	0
  2738  001C7E  6E0D               	movwf	___ftmul@f2+1,c
  2739  001C80  0E3F               	movlw	63
  2740  001C82  6E0E               	movwf	___ftmul@f2+2,c
  2741  001C84  EC02  F011         	call	___ftmul	;wreg free
  2742  001C88  D01B               	goto	L7
  2743  001C8A  D021               	goto	l101
  2744  001C8C  D000               	goto	l2015
  2745  001C8E                     l2015:
  2746                           
  2747                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  2748  001C8E  5044               	movf	fround@prec,w,c
  2749  001C90  0D03               	mullw	3
  2750  001C92  0E29               	movlw	low __npowers_
  2751  001C94  24F3               	addwf	prodl,w,c
  2752  001C96  6EF6               	movwf	tblptrl,c
  2753  001C98  0E10               	movlw	high __npowers_
  2754  001C9A  20F4               	addwfc	prodh,w,c
  2755  001C9C  6EF7               	movwf	tblptrh,c
  2756  001C9E                     	if	0	;There are less than 3 active tblptr bytes
  2757  001C9E                     	endif
  2758  001C9E  0009               	tblrd		*+
  2759  001CA0  CFF5 F009          	movff	tablat,___ftmul@f1
  2760  001CA4  0009               	tblrd		*+
  2761  001CA6  CFF5 F00A          	movff	tablat,___ftmul@f1+1
  2762  001CAA  000A               	tblrd		*-
  2763  001CAC  CFF5 F00B          	movff	tablat,___ftmul@f1+2
  2764  001CB0  0E00               	movlw	0
  2765  001CB2  6E0C               	movwf	___ftmul@f2,c
  2766  001CB4  0E00               	movlw	0
  2767  001CB6  6E0D               	movwf	___ftmul@f2+1,c
  2768  001CB8  0E3F               	movlw	63
  2769  001CBA  6E0E               	movwf	___ftmul@f2+2,c
  2770  001CBC  EC02  F011         	call	___ftmul	;wreg free
  2771  001CC0                     L7:
  2772  001CC0  C009  F03B         	movff	?___ftmul,?_fround
  2773  001CC4  C00A  F03C         	movff	?___ftmul+1,?_fround+1
  2774  001CC8  C00B  F03D         	movff	?___ftmul+2,?_fround+2
  2775  001CCC  D000               	goto	l101
  2776  001CCE                     l101:
  2777  001CCE  0012               	return		;funcret
  2778  001CD0                     __end_of_fround:
  2779                           	opt stack 0
  2780                           tblptru	equ	0xFF8
  2781                           tblptrh	equ	0xFF7
  2782                           tblptrl	equ	0xFF6
  2783                           tablat	equ	0xFF5
  2784                           prodh	equ	0xFF4
  2785                           prodl	equ	0xFF3
  2786                           postinc0	equ	0xFEE
  2787                           wreg	equ	0xFE8
  2788                           postdec1	equ	0xFE5
  2789                           plusw1	equ	0xFE3
  2790                           fsr1l	equ	0xFE1
  2791                           indf2	equ	0xFDF
  2792                           postinc2	equ	0xFDE
  2793                           postdec2	equ	0xFDD
  2794                           plusw2	equ	0xFDB
  2795                           fsr2h	equ	0xFDA
  2796                           fsr2l	equ	0xFD9
  2797                           status	equ	0xFD8
  2798                           
  2799 ;; *************** function ___wmul *****************
  2800 ;; Defined at:
  2801 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  2802 ;; Parameters:    Size  Location     Type
  2803 ;;  multiplier      2   52[COMRAM] unsigned int 
  2804 ;;  multiplicand    2   54[COMRAM] unsigned int 
  2805 ;; Auto vars:     Size  Location     Type
  2806 ;;  product         2   56[COMRAM] unsigned int 
  2807 ;; Return value:  Size  Location     Type
  2808 ;;                  2   52[COMRAM] unsigned int 
  2809 ;; Registers used:
  2810 ;;		wreg, status,2, status,0, prodl, prodh
  2811 ;; Tracked objects:
  2812 ;;		On entry : 0/0
  2813 ;;		On exit  : 0/0
  2814 ;;		Unchanged: 0/0
  2815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2816 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2817 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2819 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2820 ;;Total ram usage:        6 bytes
  2821 ;; Hardware stack levels used:    1
  2822 ;; This function calls:
  2823 ;;		Nothing
  2824 ;; This function is called by:
  2825 ;;		_fround
  2826 ;;		_scale
  2827 ;;		_printf
  2828 ;; This function uses a non-reentrant model
  2829 ;;
  2830                           
  2831                           	psect	text5
  2832  002972                     __ptext5:
  2833                           	opt stack 0
  2834  002972                     ___wmul:
  2835                           	opt stack 28
  2836                           
  2837                           ;incstack = 0
  2838  002972  5035               	movf	___wmul@multiplier,w,c
  2839  002974  0237               	mulwf	___wmul@multiplicand,c
  2840  002976  CFF3 F039          	movff	prodl,___wmul@product
  2841  00297A  CFF4 F03A          	movff	prodh,___wmul@product+1
  2842  00297E  5035               	movf	___wmul@multiplier,w,c
  2843  002980  0238               	mulwf	___wmul@multiplicand+1,c
  2844  002982  50F3               	movf	prodl,w,c
  2845  002984  263A               	addwf	___wmul@product+1,f,c
  2846  002986  5036               	movf	___wmul@multiplier+1,w,c
  2847  002988  0237               	mulwf	___wmul@multiplicand,c
  2848  00298A  50F3               	movf	prodl,w,c
  2849  00298C  263A               	addwf	___wmul@product+1,f,c
  2850  00298E  C039  F035         	movff	___wmul@product,?___wmul
  2851  002992  C03A  F036         	movff	___wmul@product+1,?___wmul+1
  2852  002996  D000               	goto	l200
  2853  002998                     l200:
  2854  002998  0012               	return		;funcret
  2855  00299A                     __end_of___wmul:
  2856                           	opt stack 0
  2857                           tblptru	equ	0xFF8
  2858                           tblptrh	equ	0xFF7
  2859                           tblptrl	equ	0xFF6
  2860                           tablat	equ	0xFF5
  2861                           prodh	equ	0xFF4
  2862                           prodl	equ	0xFF3
  2863                           postinc0	equ	0xFEE
  2864                           wreg	equ	0xFE8
  2865                           postdec1	equ	0xFE5
  2866                           plusw1	equ	0xFE3
  2867                           fsr1l	equ	0xFE1
  2868                           indf2	equ	0xFDF
  2869                           postinc2	equ	0xFDE
  2870                           postdec2	equ	0xFDD
  2871                           plusw2	equ	0xFDB
  2872                           fsr2h	equ	0xFDA
  2873                           fsr2l	equ	0xFD9
  2874                           status	equ	0xFD8
  2875                           
  2876 ;; *************** function ___ftmul *****************
  2877 ;; Defined at:
  2878 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  2879 ;; Parameters:    Size  Location     Type
  2880 ;;  f1              3    8[COMRAM] float 
  2881 ;;  f2              3   11[COMRAM] float 
  2882 ;; Auto vars:     Size  Location     Type
  2883 ;;  f3_as_produc    3   18[COMRAM] unsigned um
  2884 ;;  sign            1   22[COMRAM] unsigned char 
  2885 ;;  cntr            1   21[COMRAM] unsigned char 
  2886 ;;  exp             1   17[COMRAM] unsigned char 
  2887 ;; Return value:  Size  Location     Type
  2888 ;;                  3    8[COMRAM] float 
  2889 ;; Registers used:
  2890 ;;		wreg, status,2, status,0, cstack
  2891 ;; Tracked objects:
  2892 ;;		On entry : 0/0
  2893 ;;		On exit  : 0/0
  2894 ;;		Unchanged: 0/0
  2895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2896 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2897 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2898 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2899 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2900 ;;Total ram usage:       15 bytes
  2901 ;; Hardware stack levels used:    1
  2902 ;; Hardware stack levels required when called:    1
  2903 ;; This function calls:
  2904 ;;		___ftpack
  2905 ;; This function is called by:
  2906 ;;		_main
  2907 ;;		_fround
  2908 ;;		_scale
  2909 ;;		_printf
  2910 ;; This function uses a non-reentrant model
  2911 ;;
  2912                           
  2913                           	psect	text6
  2914  002204                     __ptext6:
  2915                           	opt stack 0
  2916  002204                     ___ftmul:
  2917                           	opt stack 27
  2918                           
  2919                           ;incstack = 0
  2920  002204  C00B  F00F         	movff	___ftmul@f1+2,??___ftmul
  2921  002208  6A10               	clrf	(??___ftmul+1)& (0+255),c
  2922  00220A  6A11               	clrf	(??___ftmul+2)& (0+255),c
  2923  00220C  340A               	rlcf	___ftmul@f1+1,w,c
  2924  00220E  360F               	rlcf	??___ftmul& (0+255),f,c
  2925  002210  E301               	bnc	u1671
  2926  002212  8010               	bsf	(??___ftmul+1)& (0+255),0,c
  2927  002214                     u1671:
  2928  002214  500F               	movf	??___ftmul,w,c
  2929  002216  6E12               	movwf	___ftmul@exp,c
  2930  002218  5012               	movf	___ftmul@exp,w,c
  2931  00221A  A4D8               	btfss	status,2,c
  2932  00221C  D002               	goto	l1821
  2933  00221E  D00E               	goto	l1823
  2934  002220  D06C               	goto	l629
  2935  002222                     l1821:
  2936  002222  C00E  F00F         	movff	___ftmul@f2+2,??___ftmul
  2937  002226  6A10               	clrf	(??___ftmul+1)& (0+255),c
  2938  002228  6A11               	clrf	(??___ftmul+2)& (0+255),c
  2939  00222A  340D               	rlcf	___ftmul@f2+1,w,c
  2940  00222C  360F               	rlcf	??___ftmul& (0+255),f,c
  2941  00222E  E301               	bnc	u1691
  2942  002230  8010               	bsf	(??___ftmul+1)& (0+255),0,c
  2943  002232                     u1691:
  2944  002232  500F               	movf	??___ftmul,w,c
  2945  002234  6E17               	movwf	___ftmul@sign,c
  2946  002236  5017               	movf	___ftmul@sign,w,c
  2947  002238  A4D8               	btfss	status,2,c
  2948  00223A  D007               	goto	l1827
  2949  00223C                     l1823:
  2950  00223C  0E00               	movlw	0
  2951  00223E  6E09               	movwf	?___ftmul,c
  2952  002240  0E00               	movlw	0
  2953  002242  6E0A               	movwf	?___ftmul+1,c
  2954  002244  0E00               	movlw	0
  2955  002246  6E0B               	movwf	?___ftmul+2,c
  2956  002248  D058               	goto	l629
  2957  00224A                     l1827:
  2958  00224A  5017               	movf	___ftmul@sign,w,c
  2959  00224C  0F7B               	addlw	123
  2960  00224E  2612               	addwf	___ftmul@exp,f,c
  2961  002250  C00B  F017         	movff	___ftmul@f1+2,___ftmul@sign
  2962  002254  500E               	movf	___ftmul@f2+2,w,c
  2963  002256  1A17               	xorwf	___ftmul@sign,f,c
  2964  002258  0E80               	movlw	128
  2965  00225A  1617               	andwf	___ftmul@sign,f,c
  2966  00225C  8E0A               	bsf	___ftmul@f1+1,7,c
  2967  00225E  8E0D               	bsf	___ftmul@f2+1,7,c
  2968  002260  0EFF               	movlw	255
  2969  002262  160C               	andwf	___ftmul@f2,f,c
  2970  002264  0EFF               	movlw	255
  2971  002266  160D               	andwf	___ftmul@f2+1,f,c
  2972  002268  0E00               	movlw	0
  2973  00226A  160E               	andwf	___ftmul@f2+2,f,c
  2974  00226C  0E00               	movlw	0
  2975  00226E  6E13               	movwf	___ftmul@f3_as_product,c
  2976  002270  0E00               	movlw	0
  2977  002272  6E14               	movwf	___ftmul@f3_as_product+1,c
  2978  002274  0E00               	movlw	0
  2979  002276  6E15               	movwf	___ftmul@f3_as_product+2,c
  2980  002278  0E07               	movlw	7
  2981  00227A  6E16               	movwf	___ftmul@cntr,c
  2982  00227C  D000               	goto	l1841
  2983  00227E                     l1841:
  2984  00227E  A009               	btfss	___ftmul@f1,0,c
  2985  002280  D007               	goto	l1845
  2986  002282  500C               	movf	___ftmul@f2,w,c
  2987  002284  2613               	addwf	___ftmul@f3_as_product,f,c
  2988  002286  500D               	movf	___ftmul@f2+1,w,c
  2989  002288  2214               	addwfc	___ftmul@f3_as_product+1,f,c
  2990  00228A  500E               	movf	___ftmul@f2+2,w,c
  2991  00228C  2215               	addwfc	___ftmul@f3_as_product+2,f,c
  2992  00228E  D000               	goto	l1845
  2993  002290                     l1845:
  2994  002290  90D8               	bcf	status,0,c
  2995  002292  320B               	rrcf	___ftmul@f1+2,f,c
  2996  002294  320A               	rrcf	___ftmul@f1+1,f,c
  2997  002296  3209               	rrcf	___ftmul@f1,f,c
  2998  002298  90D8               	bcf	status,0,c
  2999  00229A  360C               	rlcf	___ftmul@f2,f,c
  3000  00229C  360D               	rlcf	___ftmul@f2+1,f,c
  3001  00229E  360E               	rlcf	___ftmul@f2+2,f,c
  3002  0022A0  2E16               	decfsz	___ftmul@cntr,f,c
  3003  0022A2  D7ED               	goto	l1841
  3004  0022A4  D000               	goto	l1849
  3005  0022A6                     l1849:
  3006  0022A6  0E09               	movlw	9
  3007  0022A8  6E16               	movwf	___ftmul@cntr,c
  3008  0022AA  D000               	goto	l1851
  3009  0022AC                     l1851:
  3010  0022AC  A009               	btfss	___ftmul@f1,0,c
  3011  0022AE  D007               	goto	l1855
  3012  0022B0  500C               	movf	___ftmul@f2,w,c
  3013  0022B2  2613               	addwf	___ftmul@f3_as_product,f,c
  3014  0022B4  500D               	movf	___ftmul@f2+1,w,c
  3015  0022B6  2214               	addwfc	___ftmul@f3_as_product+1,f,c
  3016  0022B8  500E               	movf	___ftmul@f2+2,w,c
  3017  0022BA  2215               	addwfc	___ftmul@f3_as_product+2,f,c
  3018  0022BC  D000               	goto	l1855
  3019  0022BE                     l1855:
  3020  0022BE  90D8               	bcf	status,0,c
  3021  0022C0  320B               	rrcf	___ftmul@f1+2,f,c
  3022  0022C2  320A               	rrcf	___ftmul@f1+1,f,c
  3023  0022C4  3209               	rrcf	___ftmul@f1,f,c
  3024  0022C6  90D8               	bcf	status,0,c
  3025  0022C8  3215               	rrcf	___ftmul@f3_as_product+2,f,c
  3026  0022CA  3214               	rrcf	___ftmul@f3_as_product+1,f,c
  3027  0022CC  3213               	rrcf	___ftmul@f3_as_product,f,c
  3028  0022CE  2E16               	decfsz	___ftmul@cntr,f,c
  3029  0022D0  D7ED               	goto	l1851
  3030  0022D2  D000               	goto	l1859
  3031  0022D4                     l1859:
  3032  0022D4  C013  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3033  0022D8  C014  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3034  0022DC  C015  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3035  0022E0  C012  F004         	movff	___ftmul@exp,___ftpack@exp
  3036  0022E4  C017  F005         	movff	___ftmul@sign,___ftpack@sign
  3037  0022E8  EC62  F012         	call	___ftpack	;wreg free
  3038  0022EC  C001  F009         	movff	?___ftpack,?___ftmul
  3039  0022F0  C002  F00A         	movff	?___ftpack+1,?___ftmul+1
  3040  0022F4  C003  F00B         	movff	?___ftpack+2,?___ftmul+2
  3041  0022F8  D000               	goto	l629
  3042  0022FA                     l629:
  3043  0022FA  0012               	return		;funcret
  3044  0022FC                     __end_of___ftmul:
  3045                           	opt stack 0
  3046                           tblptru	equ	0xFF8
  3047                           tblptrh	equ	0xFF7
  3048                           tblptrl	equ	0xFF6
  3049                           tablat	equ	0xFF5
  3050                           prodh	equ	0xFF4
  3051                           prodl	equ	0xFF3
  3052                           postinc0	equ	0xFEE
  3053                           wreg	equ	0xFE8
  3054                           postdec1	equ	0xFE5
  3055                           plusw1	equ	0xFE3
  3056                           fsr1l	equ	0xFE1
  3057                           indf2	equ	0xFDF
  3058                           postinc2	equ	0xFDE
  3059                           postdec2	equ	0xFDD
  3060                           plusw2	equ	0xFDB
  3061                           fsr2h	equ	0xFDA
  3062                           fsr2l	equ	0xFD9
  3063                           status	equ	0xFD8
  3064                           
  3065 ;; *************** function ___awmod *****************
  3066 ;; Defined at:
  3067 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  3068 ;; Parameters:    Size  Location     Type
  3069 ;;  dividend        2   38[COMRAM] int 
  3070 ;;  divisor         2   40[COMRAM] int 
  3071 ;; Auto vars:     Size  Location     Type
  3072 ;;  sign            1   43[COMRAM] unsigned char 
  3073 ;;  counter         1   42[COMRAM] unsigned char 
  3074 ;; Return value:  Size  Location     Type
  3075 ;;                  2   38[COMRAM] int 
  3076 ;; Registers used:
  3077 ;;		wreg, status,2, status,0
  3078 ;; Tracked objects:
  3079 ;;		On entry : 0/0
  3080 ;;		On exit  : 0/0
  3081 ;;		Unchanged: 0/0
  3082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3083 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3084 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3086 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3087 ;;Total ram usage:        6 bytes
  3088 ;; Hardware stack levels used:    1
  3089 ;; This function calls:
  3090 ;;		Nothing
  3091 ;; This function is called by:
  3092 ;;		_main
  3093 ;;		_fround
  3094 ;;		_scale
  3095 ;; This function uses a non-reentrant model
  3096 ;;
  3097                           
  3098                           	psect	text7
  3099  002742                     __ptext7:
  3100                           	opt stack 0
  3101  002742                     ___awmod:
  3102                           	opt stack 28
  3103                           
  3104                           ;incstack = 0
  3105  002742  0E00               	movlw	0
  3106  002744  6E2C               	movwf	___awmod@sign,c
  3107  002746  AE28               	btfss	___awmod@dividend+1,7,c
  3108  002748  D007               	goto	l1915
  3109  00274A  6C27               	negf	___awmod@dividend,c
  3110  00274C  1E28               	comf	___awmod@dividend+1,f,c
  3111  00274E  B0D8               	btfsc	status,0,c
  3112  002750  2A28               	incf	___awmod@dividend+1,f,c
  3113  002752  0E01               	movlw	1
  3114  002754  6E2C               	movwf	___awmod@sign,c
  3115  002756  D000               	goto	l1915
  3116  002758                     l1915:
  3117  002758  AE2A               	btfss	___awmod@divisor+1,7,c
  3118  00275A  D005               	goto	l1919
  3119  00275C  6C29               	negf	___awmod@divisor,c
  3120  00275E  1E2A               	comf	___awmod@divisor+1,f,c
  3121  002760  B0D8               	btfsc	status,0,c
  3122  002762  2A2A               	incf	___awmod@divisor+1,f,c
  3123  002764  D000               	goto	l1919
  3124  002766                     l1919:
  3125  002766  5029               	movf	___awmod@divisor,w,c
  3126  002768  102A               	iorwf	___awmod@divisor+1,w,c
  3127  00276A  B4D8               	btfsc	status,2,c
  3128  00276C  D01D               	goto	l1935
  3129  00276E  0E01               	movlw	1
  3130  002770  6E2B               	movwf	___awmod@counter,c
  3131  002772  D005               	goto	l1925
  3132  002774                     l1923:
  3133  002774  90D8               	bcf	status,0,c
  3134  002776  3629               	rlcf	___awmod@divisor,f,c
  3135  002778  362A               	rlcf	___awmod@divisor+1,f,c
  3136  00277A  2A2B               	incf	___awmod@counter,f,c
  3137  00277C  D000               	goto	l1925
  3138  00277E                     l1925:
  3139  00277E  BE2A               	btfsc	___awmod@divisor+1,7,c
  3140  002780  D002               	goto	l1927
  3141  002782  D7F8               	goto	l1923
  3142  002784  D000               	goto	l1927
  3143  002786                     l1927:
  3144  002786  5029               	movf	___awmod@divisor,w,c
  3145  002788  5C27               	subwf	___awmod@dividend,w,c
  3146  00278A  502A               	movf	___awmod@divisor+1,w,c
  3147  00278C  5828               	subwfb	___awmod@dividend+1,w,c
  3148  00278E  A0D8               	btfss	status,0,c
  3149  002790  D005               	goto	l1931
  3150  002792  5029               	movf	___awmod@divisor,w,c
  3151  002794  5E27               	subwf	___awmod@dividend,f,c
  3152  002796  502A               	movf	___awmod@divisor+1,w,c
  3153  002798  5A28               	subwfb	___awmod@dividend+1,f,c
  3154  00279A  D000               	goto	l1931
  3155  00279C                     l1931:
  3156  00279C  90D8               	bcf	status,0,c
  3157  00279E  322A               	rrcf	___awmod@divisor+1,f,c
  3158  0027A0  3229               	rrcf	___awmod@divisor,f,c
  3159  0027A2  2E2B               	decfsz	___awmod@counter,f,c
  3160  0027A4  D7F0               	goto	l1927
  3161  0027A6  D000               	goto	l1935
  3162  0027A8                     l1935:
  3163  0027A8  502C               	movf	___awmod@sign,w,c
  3164  0027AA  B4D8               	btfsc	status,2,c
  3165  0027AC  D005               	goto	l1939
  3166  0027AE  6C27               	negf	___awmod@dividend,c
  3167  0027B0  1E28               	comf	___awmod@dividend+1,f,c
  3168  0027B2  B0D8               	btfsc	status,0,c
  3169  0027B4  2A28               	incf	___awmod@dividend+1,f,c
  3170  0027B6  D000               	goto	l1939
  3171  0027B8                     l1939:
  3172  0027B8  C027  F027         	movff	___awmod@dividend,?___awmod
  3173  0027BC  C028  F028         	movff	___awmod@dividend+1,?___awmod+1
  3174  0027C0  D000               	goto	l406
  3175  0027C2                     l406:
  3176  0027C2  0012               	return		;funcret
  3177  0027C4                     __end_of___awmod:
  3178                           	opt stack 0
  3179                           tblptru	equ	0xFF8
  3180                           tblptrh	equ	0xFF7
  3181                           tblptrl	equ	0xFF6
  3182                           tablat	equ	0xFF5
  3183                           prodh	equ	0xFF4
  3184                           prodl	equ	0xFF3
  3185                           postinc0	equ	0xFEE
  3186                           wreg	equ	0xFE8
  3187                           postdec1	equ	0xFE5
  3188                           plusw1	equ	0xFE3
  3189                           fsr1l	equ	0xFE1
  3190                           indf2	equ	0xFDF
  3191                           postinc2	equ	0xFDE
  3192                           postdec2	equ	0xFDD
  3193                           plusw2	equ	0xFDB
  3194                           fsr2h	equ	0xFDA
  3195                           fsr2l	equ	0xFD9
  3196                           status	equ	0xFD8
  3197                           
  3198 ;; *************** function ___awdiv *****************
  3199 ;; Defined at:
  3200 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  3201 ;; Parameters:    Size  Location     Type
  3202 ;;  dividend        2   44[COMRAM] int 
  3203 ;;  divisor         2   46[COMRAM] int 
  3204 ;; Auto vars:     Size  Location     Type
  3205 ;;  quotient        2   50[COMRAM] int 
  3206 ;;  sign            1   49[COMRAM] unsigned char 
  3207 ;;  counter         1   48[COMRAM] unsigned char 
  3208 ;; Return value:  Size  Location     Type
  3209 ;;                  2   44[COMRAM] int 
  3210 ;; Registers used:
  3211 ;;		wreg, status,2, status,0
  3212 ;; Tracked objects:
  3213 ;;		On entry : 0/0
  3214 ;;		On exit  : 0/0
  3215 ;;		Unchanged: 0/0
  3216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3217 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3218 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3220 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3221 ;;Total ram usage:        8 bytes
  3222 ;; Hardware stack levels used:    1
  3223 ;; This function calls:
  3224 ;;		Nothing
  3225 ;; This function is called by:
  3226 ;;		_fround
  3227 ;;		_scale
  3228 ;;		_printf
  3229 ;; This function uses a non-reentrant model
  3230 ;;
  3231                           
  3232                           	psect	text8
  3233  00258A                     __ptext8:
  3234                           	opt stack 0
  3235  00258A                     ___awdiv:
  3236                           	opt stack 28
  3237                           
  3238                           ;incstack = 0
  3239  00258A  0E00               	movlw	0
  3240  00258C  6E32               	movwf	___awdiv@sign,c
  3241  00258E  AE30               	btfss	___awdiv@divisor+1,7,c
  3242  002590  D007               	goto	l1871
  3243  002592  6C2F               	negf	___awdiv@divisor,c
  3244  002594  1E30               	comf	___awdiv@divisor+1,f,c
  3245  002596  B0D8               	btfsc	status,0,c
  3246  002598  2A30               	incf	___awdiv@divisor+1,f,c
  3247  00259A  0E01               	movlw	1
  3248  00259C  6E32               	movwf	___awdiv@sign,c
  3249  00259E  D000               	goto	l1871
  3250  0025A0                     l1871:
  3251  0025A0  AE2E               	btfss	___awdiv@dividend+1,7,c
  3252  0025A2  D007               	goto	l1877
  3253  0025A4  6C2D               	negf	___awdiv@dividend,c
  3254  0025A6  1E2E               	comf	___awdiv@dividend+1,f,c
  3255  0025A8  B0D8               	btfsc	status,0,c
  3256  0025AA  2A2E               	incf	___awdiv@dividend+1,f,c
  3257  0025AC  0E01               	movlw	1
  3258  0025AE  1A32               	xorwf	___awdiv@sign,f,c
  3259  0025B0  D000               	goto	l1877
  3260  0025B2                     l1877:
  3261  0025B2  0E00               	movlw	0
  3262  0025B4  6E34               	movwf	___awdiv@quotient+1,c
  3263  0025B6  0E00               	movlw	0
  3264  0025B8  6E33               	movwf	___awdiv@quotient,c
  3265  0025BA  502F               	movf	___awdiv@divisor,w,c
  3266  0025BC  1030               	iorwf	___awdiv@divisor+1,w,c
  3267  0025BE  B4D8               	btfsc	status,2,c
  3268  0025C0  D021               	goto	l1899
  3269  0025C2  0E01               	movlw	1
  3270  0025C4  6E31               	movwf	___awdiv@counter,c
  3271  0025C6  D005               	goto	l1885
  3272  0025C8                     l1883:
  3273  0025C8  90D8               	bcf	status,0,c
  3274  0025CA  362F               	rlcf	___awdiv@divisor,f,c
  3275  0025CC  3630               	rlcf	___awdiv@divisor+1,f,c
  3276  0025CE  2A31               	incf	___awdiv@counter,f,c
  3277  0025D0  D000               	goto	l1885
  3278  0025D2                     l1885:
  3279  0025D2  BE30               	btfsc	___awdiv@divisor+1,7,c
  3280  0025D4  D002               	goto	l1887
  3281  0025D6  D7F8               	goto	l1883
  3282  0025D8  D000               	goto	l1887
  3283  0025DA                     l1887:
  3284  0025DA  90D8               	bcf	status,0,c
  3285  0025DC  3633               	rlcf	___awdiv@quotient,f,c
  3286  0025DE  3634               	rlcf	___awdiv@quotient+1,f,c
  3287  0025E0  502F               	movf	___awdiv@divisor,w,c
  3288  0025E2  5C2D               	subwf	___awdiv@dividend,w,c
  3289  0025E4  5030               	movf	___awdiv@divisor+1,w,c
  3290  0025E6  582E               	subwfb	___awdiv@dividend+1,w,c
  3291  0025E8  A0D8               	btfss	status,0,c
  3292  0025EA  D006               	goto	l1895
  3293  0025EC  502F               	movf	___awdiv@divisor,w,c
  3294  0025EE  5E2D               	subwf	___awdiv@dividend,f,c
  3295  0025F0  5030               	movf	___awdiv@divisor+1,w,c
  3296  0025F2  5A2E               	subwfb	___awdiv@dividend+1,f,c
  3297  0025F4  8033               	bsf	___awdiv@quotient,0,c
  3298  0025F6  D000               	goto	l1895
  3299  0025F8                     l1895:
  3300  0025F8  90D8               	bcf	status,0,c
  3301  0025FA  3230               	rrcf	___awdiv@divisor+1,f,c
  3302  0025FC  322F               	rrcf	___awdiv@divisor,f,c
  3303  0025FE  2E31               	decfsz	___awdiv@counter,f,c
  3304  002600  D7EC               	goto	l1887
  3305  002602  D000               	goto	l1899
  3306  002604                     l1899:
  3307  002604  5032               	movf	___awdiv@sign,w,c
  3308  002606  B4D8               	btfsc	status,2,c
  3309  002608  D005               	goto	l1903
  3310  00260A  6C33               	negf	___awdiv@quotient,c
  3311  00260C  1E34               	comf	___awdiv@quotient+1,f,c
  3312  00260E  B0D8               	btfsc	status,0,c
  3313  002610  2A34               	incf	___awdiv@quotient+1,f,c
  3314  002612  D000               	goto	l1903
  3315  002614                     l1903:
  3316  002614  C033  F02D         	movff	___awdiv@quotient,?___awdiv
  3317  002618  C034  F02E         	movff	___awdiv@quotient+1,?___awdiv+1
  3318  00261C  D000               	goto	l393
  3319  00261E                     l393:
  3320  00261E  0012               	return		;funcret
  3321  002620                     __end_of___awdiv:
  3322                           	opt stack 0
  3323                           tblptru	equ	0xFF8
  3324                           tblptrh	equ	0xFF7
  3325                           tblptrl	equ	0xFF6
  3326                           tablat	equ	0xFF5
  3327                           prodh	equ	0xFF4
  3328                           prodl	equ	0xFF3
  3329                           postinc0	equ	0xFEE
  3330                           wreg	equ	0xFE8
  3331                           postdec1	equ	0xFE5
  3332                           plusw1	equ	0xFE3
  3333                           fsr1l	equ	0xFE1
  3334                           indf2	equ	0xFDF
  3335                           postinc2	equ	0xFDE
  3336                           postdec2	equ	0xFDD
  3337                           plusw2	equ	0xFDB
  3338                           fsr2h	equ	0xFDA
  3339                           fsr2l	equ	0xFD9
  3340                           status	equ	0xFD8
  3341                           
  3342 ;; *************** function __tdiv_to_l_ *****************
  3343 ;; Defined at:
  3344 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdivl.c"
  3345 ;; Parameters:    Size  Location     Type
  3346 ;;  f1              3    0[COMRAM] float 
  3347 ;;  f2              3    3[COMRAM] float 
  3348 ;; Auto vars:     Size  Location     Type
  3349 ;;  quot            4    9[COMRAM] unsigned long 
  3350 ;;  exp1            1   14[COMRAM] unsigned char 
  3351 ;;  cntr            1   13[COMRAM] unsigned char 
  3352 ;; Return value:  Size  Location     Type
  3353 ;;                  4    0[COMRAM] unsigned long 
  3354 ;; Registers used:
  3355 ;;		wreg, status,2, status,0
  3356 ;; Tracked objects:
  3357 ;;		On entry : 0/0
  3358 ;;		On exit  : 0/0
  3359 ;;		Unchanged: 0/0
  3360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3361 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3362 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3363 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3364 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3365 ;;Total ram usage:       15 bytes
  3366 ;; Hardware stack levels used:    1
  3367 ;; This function calls:
  3368 ;;		Nothing
  3369 ;; This function is called by:
  3370 ;;		_printf
  3371 ;; This function uses a non-reentrant model
  3372 ;;
  3373                           
  3374                           	psect	text9
  3375  001FEA                     __ptext9:
  3376                           	opt stack 0
  3377  001FEA                     __tdiv_to_l_:
  3378                           	opt stack 29
  3379                           
  3380                           ;incstack = 0
  3381  001FEA  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3382  001FEE  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3383  001FF0  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3384  001FF2  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3385  001FF4  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3386  001FF6  E301               	bnc	u2031
  3387  001FF8  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3388  001FFA                     u2031:
  3389  001FFA  5007               	movf	??__tdiv_to_l_,w,c
  3390  001FFC  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3391  001FFE  500F               	movf	__tdiv_to_l_@exp1,w,c
  3392  002000  A4D8               	btfss	status,2,c
  3393  002002  D002               	goto	l2063
  3394  002004  D05D               	goto	l2105
  3395  002006  D078               	goto	l605
  3396  002008                     l2063:
  3397  002008  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3398  00200C  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3399  00200E  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3400  002010  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  3401  002012  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3402  002014  E301               	bnc	u2051
  3403  002016  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3404  002018                     u2051:
  3405  002018  5007               	movf	??__tdiv_to_l_,w,c
  3406  00201A  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3407  00201C  500E               	movf	__tdiv_to_l_@cntr,w,c
  3408  00201E  A4D8               	btfss	status,2,c
  3409  002020  D002               	goto	l2069
  3410  002022  D04E               	goto	l2105
  3411  002024  D069               	goto	l605
  3412  002026                     l2069:
  3413  002026  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  3414  002028  0EFF               	movlw	255
  3415  00202A  1601               	andwf	__tdiv_to_l_@f1,f,c
  3416  00202C  0EFF               	movlw	255
  3417  00202E  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  3418  002030  0E00               	movlw	0
  3419  002032  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  3420  002034  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  3421  002036  0EFF               	movlw	255
  3422  002038  1604               	andwf	__tdiv_to_l_@f2,f,c
  3423  00203A  0EFF               	movlw	255
  3424  00203C  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  3425  00203E  0E00               	movlw	0
  3426  002040  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  3427  002042  0E00               	movlw	0
  3428  002044  6E0A               	movwf	__tdiv_to_l_@quot,c
  3429  002046  0E00               	movlw	0
  3430  002048  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  3431  00204A  0E00               	movlw	0
  3432  00204C  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  3433  00204E  0E00               	movlw	0
  3434  002050  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  3435  002052  0E7F               	movlw	127
  3436  002054  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3437  002056  500E               	movf	__tdiv_to_l_@cntr,w,c
  3438  002058  0F98               	addlw	152
  3439  00205A  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3440  00205C  0E18               	movlw	24
  3441  00205E  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3442  002060                     l607:
  3443  002060  90D8               	bcf	status,0,c
  3444  002062  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3445  002064  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3446  002066  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3447  002068  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3448  00206A  5004               	movf	__tdiv_to_l_@f2,w,c
  3449  00206C  5C01               	subwf	__tdiv_to_l_@f1,w,c
  3450  00206E  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3451  002070  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  3452  002072  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3453  002074  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  3454  002076  A0D8               	btfss	status,0,c
  3455  002078  D007               	goto	l608
  3456  00207A  5004               	movf	__tdiv_to_l_@f2,w,c
  3457  00207C  5E01               	subwf	__tdiv_to_l_@f1,f,c
  3458  00207E  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3459  002080  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  3460  002082  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3461  002084  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  3462  002086  800A               	bsf	__tdiv_to_l_@quot,0,c
  3463  002088                     l608:
  3464  002088  90D8               	bcf	status,0,c
  3465  00208A  3601               	rlcf	__tdiv_to_l_@f1,f,c
  3466  00208C  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  3467  00208E  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  3468  002090  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  3469  002092  D7E6               	goto	l607
  3470  002094  D000               	goto	l2091
  3471  002096                     l2091:
  3472  002096  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  3473  002098  D010               	goto	l2103
  3474  00209A  500F               	movf	__tdiv_to_l_@exp1,w,c
  3475  00209C  0A80               	xorlw	128
  3476  00209E  0F97               	addlw	151
  3477  0020A0  B0D8               	btfsc	status,0,c
  3478  0020A2  D003               	goto	l2099
  3479  0020A4  D00D               	goto	l2105
  3480  0020A6  D028               	goto	l605
  3481  0020A8  D000               	goto	l2099
  3482  0020AA                     l2099:
  3483  0020AA  90D8               	bcf	status,0,c
  3484  0020AC  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  3485  0020AE  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  3486  0020B0  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  3487  0020B2  320A               	rrcf	__tdiv_to_l_@quot,f,c
  3488  0020B4  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  3489  0020B6  D7F9               	goto	l2099
  3490  0020B8  D017               	goto	l614
  3491  0020BA                     l2103:
  3492  0020BA  0E17               	movlw	23
  3493  0020BC  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  3494  0020BE  D011               	goto	l2111
  3495  0020C0                     l2105:
  3496  0020C0  0E00               	movlw	0
  3497  0020C2  6E01               	movwf	?__tdiv_to_l_,c
  3498  0020C4  0E00               	movlw	0
  3499  0020C6  6E02               	movwf	?__tdiv_to_l_+1,c
  3500  0020C8  0E00               	movlw	0
  3501  0020CA  6E03               	movwf	?__tdiv_to_l_+2,c
  3502  0020CC  0E00               	movlw	0
  3503  0020CE  6E04               	movwf	?__tdiv_to_l_+3,c
  3504  0020D0  D013               	goto	l605
  3505  0020D2  D007               	goto	l2111
  3506  0020D4                     l2109:
  3507  0020D4  90D8               	bcf	status,0,c
  3508  0020D6  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3509  0020D8  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3510  0020DA  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3511  0020DC  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3512  0020DE  060F               	decf	__tdiv_to_l_@exp1,f,c
  3513  0020E0  D000               	goto	l2111
  3514  0020E2                     l2111:
  3515  0020E2  500F               	movf	__tdiv_to_l_@exp1,w,c
  3516  0020E4  A4D8               	btfss	status,2,c
  3517  0020E6  D7F6               	goto	l2109
  3518  0020E8                     l614:
  3519  0020E8  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  3520  0020EC  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  3521  0020F0  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  3522  0020F4  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  3523  0020F8                     l605:
  3524  0020F8  0012               	return		;funcret
  3525  0020FA                     __end_of__tdiv_to_l_:
  3526                           	opt stack 0
  3527                           tblptru	equ	0xFF8
  3528                           tblptrh	equ	0xFF7
  3529                           tblptrl	equ	0xFF6
  3530                           tablat	equ	0xFF5
  3531                           prodh	equ	0xFF4
  3532                           prodl	equ	0xFF3
  3533                           postinc0	equ	0xFEE
  3534                           wreg	equ	0xFE8
  3535                           postdec1	equ	0xFE5
  3536                           plusw1	equ	0xFE3
  3537                           fsr1l	equ	0xFE1
  3538                           indf2	equ	0xFDF
  3539                           postinc2	equ	0xFDE
  3540                           postdec2	equ	0xFDD
  3541                           plusw2	equ	0xFDB
  3542                           fsr2h	equ	0xFDA
  3543                           fsr2l	equ	0xFD9
  3544                           status	equ	0xFD8
  3545                           
  3546 ;; *************** function __div_to_l_ *****************
  3547 ;; Defined at:
  3548 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldivl.c"
  3549 ;; Parameters:    Size  Location     Type
  3550 ;;  f1              3    0[COMRAM] unsigned long 
  3551 ;;  f2              3    3[COMRAM] unsigned long 
  3552 ;; Auto vars:     Size  Location     Type
  3553 ;;  quot            4    6[COMRAM] unsigned long 
  3554 ;;  exp1            1   11[COMRAM] unsigned char 
  3555 ;;  cntr            1   10[COMRAM] unsigned char 
  3556 ;; Return value:  Size  Location     Type
  3557 ;;                  4    0[COMRAM] unsigned long 
  3558 ;; Registers used:
  3559 ;;		wreg, status,2, status,0
  3560 ;; Tracked objects:
  3561 ;;		On entry : 0/0
  3562 ;;		On exit  : 0/0
  3563 ;;		Unchanged: 0/0
  3564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3565 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3566 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3568 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3569 ;;Total ram usage:       12 bytes
  3570 ;; Hardware stack levels used:    1
  3571 ;; This function calls:
  3572 ;;		Nothing
  3573 ;; This function is called by:
  3574 ;;		_printf
  3575 ;; This function uses a non-reentrant model
  3576 ;;
  3577                           
  3578                           	psect	text10
  3579  0020FA                     __ptext10:
  3580                           	opt stack 0
  3581  0020FA                     __div_to_l_:
  3582                           	opt stack 29
  3583                           
  3584                           ;incstack = 0
  3585  0020FA  3403               	rlcf	__div_to_l_@f1+2,w,c
  3586  0020FC  3404               	rlcf	__div_to_l_@f1+3,w,c
  3587  0020FE  6E0C               	movwf	__div_to_l_@exp1,c
  3588  002100  500C               	movf	__div_to_l_@exp1,w,c
  3589  002102  A4D8               	btfss	status,2,c
  3590  002104  D002               	goto	l2119
  3591  002106  D061               	goto	l2165
  3592  002108  D07C               	goto	l484
  3593  00210A                     l2119:
  3594  00210A  3406               	rlcf	__div_to_l_@f2+2,w,c
  3595  00210C  3407               	rlcf	__div_to_l_@f2+3,w,c
  3596  00210E  6E0B               	movwf	__div_to_l_@cntr,c
  3597  002110  500B               	movf	__div_to_l_@cntr,w,c
  3598  002112  A4D8               	btfss	status,2,c
  3599  002114  D002               	goto	l2125
  3600  002116  D059               	goto	l2165
  3601  002118  D074               	goto	l484
  3602  00211A                     l2125:
  3603  00211A  8E03               	bsf	__div_to_l_@f1+2,7,c
  3604  00211C  0EFF               	movlw	255
  3605  00211E  1601               	andwf	__div_to_l_@f1,f,c
  3606  002120  0EFF               	movlw	255
  3607  002122  1602               	andwf	__div_to_l_@f1+1,f,c
  3608  002124  0EFF               	movlw	255
  3609  002126  1603               	andwf	__div_to_l_@f1+2,f,c
  3610  002128  0E00               	movlw	0
  3611  00212A  1604               	andwf	__div_to_l_@f1+3,f,c
  3612  00212C  8E06               	bsf	__div_to_l_@f2+2,7,c
  3613  00212E  0EFF               	movlw	255
  3614  002130  1604               	andwf	__div_to_l_@f2,f,c
  3615  002132  0EFF               	movlw	255
  3616  002134  1605               	andwf	__div_to_l_@f2+1,f,c
  3617  002136  0EFF               	movlw	255
  3618  002138  1606               	andwf	__div_to_l_@f2+2,f,c
  3619  00213A  0E00               	movlw	0
  3620  00213C  1607               	andwf	__div_to_l_@f2+3,f,c
  3621  00213E  0E00               	movlw	0
  3622  002140  6E07               	movwf	__div_to_l_@quot,c
  3623  002142  0E00               	movlw	0
  3624  002144  6E08               	movwf	__div_to_l_@quot+1,c
  3625  002146  0E00               	movlw	0
  3626  002148  6E09               	movwf	__div_to_l_@quot+2,c
  3627  00214A  0E00               	movlw	0
  3628  00214C  6E0A               	movwf	__div_to_l_@quot+3,c
  3629  00214E  0E7F               	movlw	127
  3630  002150  5E0C               	subwf	__div_to_l_@exp1,f,c
  3631  002152  500B               	movf	__div_to_l_@cntr,w,c
  3632  002154  0FA0               	addlw	160
  3633  002156  5E0C               	subwf	__div_to_l_@exp1,f,c
  3634  002158  0E20               	movlw	32
  3635  00215A  6E0B               	movwf	__div_to_l_@cntr,c
  3636  00215C  D000               	goto	l2139
  3637  00215E                     l2139:
  3638  00215E  90D8               	bcf	status,0,c
  3639  002160  3607               	rlcf	__div_to_l_@quot,f,c
  3640  002162  3608               	rlcf	__div_to_l_@quot+1,f,c
  3641  002164  3609               	rlcf	__div_to_l_@quot+2,f,c
  3642  002166  360A               	rlcf	__div_to_l_@quot+3,f,c
  3643  002168  5004               	movf	__div_to_l_@f2,w,c
  3644  00216A  5C01               	subwf	__div_to_l_@f1,w,c
  3645  00216C  5005               	movf	__div_to_l_@f2+1,w,c
  3646  00216E  5802               	subwfb	__div_to_l_@f1+1,w,c
  3647  002170  5006               	movf	__div_to_l_@f2+2,w,c
  3648  002172  5803               	subwfb	__div_to_l_@f1+2,w,c
  3649  002174  5007               	movf	__div_to_l_@f2+3,w,c
  3650  002176  5804               	subwfb	__div_to_l_@f1+3,w,c
  3651  002178  A0D8               	btfss	status,0,c
  3652  00217A  D00A               	goto	l2147
  3653  00217C  5004               	movf	__div_to_l_@f2,w,c
  3654  00217E  5E01               	subwf	__div_to_l_@f1,f,c
  3655  002180  5005               	movf	__div_to_l_@f2+1,w,c
  3656  002182  5A02               	subwfb	__div_to_l_@f1+1,f,c
  3657  002184  5006               	movf	__div_to_l_@f2+2,w,c
  3658  002186  5A03               	subwfb	__div_to_l_@f1+2,f,c
  3659  002188  5007               	movf	__div_to_l_@f2+3,w,c
  3660  00218A  5A04               	subwfb	__div_to_l_@f1+3,f,c
  3661  00218C  8007               	bsf	__div_to_l_@quot,0,c
  3662  00218E  D000               	goto	l2147
  3663  002190                     l2147:
  3664  002190  90D8               	bcf	status,0,c
  3665  002192  3601               	rlcf	__div_to_l_@f1,f,c
  3666  002194  3602               	rlcf	__div_to_l_@f1+1,f,c
  3667  002196  3603               	rlcf	__div_to_l_@f1+2,f,c
  3668  002198  3604               	rlcf	__div_to_l_@f1+3,f,c
  3669  00219A  2E0B               	decfsz	__div_to_l_@cntr,f,c
  3670  00219C  D7E0               	goto	l2139
  3671  00219E  D000               	goto	l2151
  3672  0021A0                     l2151:
  3673  0021A0  AE0C               	btfss	__div_to_l_@exp1,7,c
  3674  0021A2  D010               	goto	l2163
  3675  0021A4  500C               	movf	__div_to_l_@exp1,w,c
  3676  0021A6  0A80               	xorlw	128
  3677  0021A8  0F9F               	addlw	159
  3678  0021AA  B0D8               	btfsc	status,0,c
  3679  0021AC  D003               	goto	l2159
  3680  0021AE  D00D               	goto	l2165
  3681  0021B0  D028               	goto	l484
  3682  0021B2  D000               	goto	l2159
  3683  0021B4                     l2159:
  3684  0021B4  90D8               	bcf	status,0,c
  3685  0021B6  320A               	rrcf	__div_to_l_@quot+3,f,c
  3686  0021B8  3209               	rrcf	__div_to_l_@quot+2,f,c
  3687  0021BA  3208               	rrcf	__div_to_l_@quot+1,f,c
  3688  0021BC  3207               	rrcf	__div_to_l_@quot,f,c
  3689  0021BE  3E0C               	incfsz	__div_to_l_@exp1,f,c
  3690  0021C0  D7F9               	goto	l2159
  3691  0021C2  D017               	goto	l493
  3692  0021C4                     l2163:
  3693  0021C4  0E1F               	movlw	31
  3694  0021C6  640C               	cpfsgt	__div_to_l_@exp1,c
  3695  0021C8  D011               	goto	l2171
  3696  0021CA                     l2165:
  3697  0021CA  0E00               	movlw	0
  3698  0021CC  6E01               	movwf	?__div_to_l_,c
  3699  0021CE  0E00               	movlw	0
  3700  0021D0  6E02               	movwf	?__div_to_l_+1,c
  3701  0021D2  0E00               	movlw	0
  3702  0021D4  6E03               	movwf	?__div_to_l_+2,c
  3703  0021D6  0E00               	movlw	0
  3704  0021D8  6E04               	movwf	?__div_to_l_+3,c
  3705  0021DA  D013               	goto	l484
  3706  0021DC  D007               	goto	l2171
  3707  0021DE                     l2169:
  3708  0021DE  90D8               	bcf	status,0,c
  3709  0021E0  3607               	rlcf	__div_to_l_@quot,f,c
  3710  0021E2  3608               	rlcf	__div_to_l_@quot+1,f,c
  3711  0021E4  3609               	rlcf	__div_to_l_@quot+2,f,c
  3712  0021E6  360A               	rlcf	__div_to_l_@quot+3,f,c
  3713  0021E8  060C               	decf	__div_to_l_@exp1,f,c
  3714  0021EA  D000               	goto	l2171
  3715  0021EC                     l2171:
  3716  0021EC  500C               	movf	__div_to_l_@exp1,w,c
  3717  0021EE  A4D8               	btfss	status,2,c
  3718  0021F0  D7F6               	goto	l2169
  3719  0021F2                     l493:
  3720  0021F2  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  3721  0021F6  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  3722  0021FA  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  3723  0021FE  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  3724  002202                     l484:
  3725  002202  0012               	return		;funcret
  3726  002204                     __end_of__div_to_l_:
  3727                           	opt stack 0
  3728                           tblptru	equ	0xFF8
  3729                           tblptrh	equ	0xFF7
  3730                           tblptrl	equ	0xFF6
  3731                           tablat	equ	0xFF5
  3732                           prodh	equ	0xFF4
  3733                           prodl	equ	0xFF3
  3734                           postinc0	equ	0xFEE
  3735                           wreg	equ	0xFE8
  3736                           postdec1	equ	0xFE5
  3737                           plusw1	equ	0xFE3
  3738                           fsr1l	equ	0xFE1
  3739                           indf2	equ	0xFDF
  3740                           postinc2	equ	0xFDE
  3741                           postdec2	equ	0xFDD
  3742                           plusw2	equ	0xFDB
  3743                           fsr2h	equ	0xFDA
  3744                           fsr2l	equ	0xFD9
  3745                           status	equ	0xFD8
  3746                           
  3747 ;; *************** function ___lltoft *****************
  3748 ;; Defined at:
  3749 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  3750 ;; Parameters:    Size  Location     Type
  3751 ;;  c               4    8[COMRAM] unsigned long 
  3752 ;; Auto vars:     Size  Location     Type
  3753 ;;  exp             1   16[COMRAM] unsigned char 
  3754 ;; Return value:  Size  Location     Type
  3755 ;;                  3    8[COMRAM] float 
  3756 ;; Registers used:
  3757 ;;		wreg, status,2, status,0, cstack
  3758 ;; Tracked objects:
  3759 ;;		On entry : 0/0
  3760 ;;		On exit  : 0/0
  3761 ;;		Unchanged: 0/0
  3762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3763 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3764 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3765 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3766 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3767 ;;Total ram usage:        9 bytes
  3768 ;; Hardware stack levels used:    1
  3769 ;; Hardware stack levels required when called:    1
  3770 ;; This function calls:
  3771 ;;		___ftpack
  3772 ;; This function is called by:
  3773 ;;		_printf
  3774 ;; This function uses a non-reentrant model
  3775 ;;
  3776                           
  3777                           	psect	text11
  3778  0028A4                     __ptext11:
  3779                           	opt stack 0
  3780  0028A4                     ___lltoft:
  3781                           	opt stack 28
  3782                           
  3783                           ;incstack = 0
  3784  0028A4  0E8E               	movlw	142
  3785  0028A6  6E11               	movwf	___lltoft@exp,c
  3786  0028A8  D007               	goto	l2291
  3787  0028AA                     l2289:
  3788  0028AA  90D8               	bcf	status,0,c
  3789  0028AC  320C               	rrcf	___lltoft@c+3,f,c
  3790  0028AE  320B               	rrcf	___lltoft@c+2,f,c
  3791  0028B0  320A               	rrcf	___lltoft@c+1,f,c
  3792  0028B2  3209               	rrcf	___lltoft@c,f,c
  3793  0028B4  2A11               	incf	___lltoft@exp,f,c
  3794  0028B6  D000               	goto	l2291
  3795  0028B8                     l2291:
  3796  0028B8  0E00               	movlw	0
  3797  0028BA  1409               	andwf	___lltoft@c,w,c
  3798  0028BC  6E0D               	movwf	??___lltoft& (0+255),c
  3799  0028BE  0E00               	movlw	0
  3800  0028C0  140A               	andwf	___lltoft@c+1,w,c
  3801  0028C2  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  3802  0028C4  0E00               	movlw	0
  3803  0028C6  140B               	andwf	___lltoft@c+2,w,c
  3804  0028C8  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  3805  0028CA  0EFF               	movlw	255
  3806  0028CC  140C               	andwf	___lltoft@c+3,w,c
  3807  0028CE  6E10               	movwf	(??___lltoft+3)& (0+255),c
  3808  0028D0  500D               	movf	??___lltoft,w,c
  3809  0028D2  100E               	iorwf	??___lltoft+1,w,c
  3810  0028D4  100F               	iorwf	??___lltoft+2,w,c
  3811  0028D6  1010               	iorwf	??___lltoft+3,w,c
  3812  0028D8  A4D8               	btfss	status,2,c
  3813  0028DA  D7E7               	goto	l2289
  3814  0028DC  C009  F001         	movff	___lltoft@c,___ftpack@arg
  3815  0028E0  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  3816  0028E4  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  3817  0028E8  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  3818  0028EC  0E00               	movlw	0
  3819  0028EE  6E05               	movwf	___ftpack@sign,c
  3820  0028F0  EC62  F012         	call	___ftpack	;wreg free
  3821  0028F4  C001  F009         	movff	?___ftpack,?___lltoft
  3822  0028F8  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  3823  0028FC  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  3824  002900  D000               	goto	l719
  3825  002902                     l719:
  3826  002902  0012               	return		;funcret
  3827  002904                     __end_of___lltoft:
  3828                           	opt stack 0
  3829                           tblptru	equ	0xFF8
  3830                           tblptrh	equ	0xFF7
  3831                           tblptrl	equ	0xFF6
  3832                           tablat	equ	0xFF5
  3833                           prodh	equ	0xFF4
  3834                           prodl	equ	0xFF3
  3835                           postinc0	equ	0xFEE
  3836                           wreg	equ	0xFE8
  3837                           postdec1	equ	0xFE5
  3838                           plusw1	equ	0xFE3
  3839                           fsr1l	equ	0xFE1
  3840                           indf2	equ	0xFDF
  3841                           postinc2	equ	0xFDE
  3842                           postdec2	equ	0xFDD
  3843                           plusw2	equ	0xFDB
  3844                           fsr2h	equ	0xFDA
  3845                           fsr2l	equ	0xFD9
  3846                           status	equ	0xFD8
  3847                           
  3848 ;; *************** function ___llmod *****************
  3849 ;; Defined at:
  3850 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  3851 ;; Parameters:    Size  Location     Type
  3852 ;;  dividend        4    0[COMRAM] unsigned long 
  3853 ;;  divisor         4    4[COMRAM] unsigned long 
  3854 ;; Auto vars:     Size  Location     Type
  3855 ;;  counter         1    8[COMRAM] unsigned char 
  3856 ;; Return value:  Size  Location     Type
  3857 ;;                  4    0[COMRAM] unsigned long 
  3858 ;; Registers used:
  3859 ;;		wreg, status,2, status,0
  3860 ;; Tracked objects:
  3861 ;;		On entry : 0/0
  3862 ;;		On exit  : 0/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3865 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3866 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3868 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3869 ;;Total ram usage:        9 bytes
  3870 ;; Hardware stack levels used:    1
  3871 ;; This function calls:
  3872 ;;		Nothing
  3873 ;; This function is called by:
  3874 ;;		_printf
  3875 ;; This function uses a non-reentrant model
  3876 ;;
  3877                           
  3878                           	psect	text12
  3879  0027C4                     __ptext12:
  3880                           	opt stack 0
  3881  0027C4                     ___llmod:
  3882                           	opt stack 29
  3883                           
  3884                           ;incstack = 0
  3885  0027C4  5005               	movf	___llmod@divisor,w,c
  3886  0027C6  1006               	iorwf	___llmod@divisor+1,w,c
  3887  0027C8  1007               	iorwf	___llmod@divisor+2,w,c
  3888  0027CA  1008               	iorwf	___llmod@divisor+3,w,c
  3889  0027CC  B4D8               	btfsc	status,2,c
  3890  0027CE  D029               	goto	l699
  3891  0027D0  0E01               	movlw	1
  3892  0027D2  6E09               	movwf	___llmod@counter,c
  3893  0027D4  D007               	goto	l2277
  3894  0027D6                     l2275:
  3895  0027D6  90D8               	bcf	status,0,c
  3896  0027D8  3605               	rlcf	___llmod@divisor,f,c
  3897  0027DA  3606               	rlcf	___llmod@divisor+1,f,c
  3898  0027DC  3607               	rlcf	___llmod@divisor+2,f,c
  3899  0027DE  3608               	rlcf	___llmod@divisor+3,f,c
  3900  0027E0  2A09               	incf	___llmod@counter,f,c
  3901  0027E2  D000               	goto	l2277
  3902  0027E4                     l2277:
  3903  0027E4  BE08               	btfsc	___llmod@divisor+3,7,c
  3904  0027E6  D002               	goto	l2279
  3905  0027E8  D7F6               	goto	l2275
  3906  0027EA  D000               	goto	l2279
  3907  0027EC                     l2279:
  3908  0027EC  5005               	movf	___llmod@divisor,w,c
  3909  0027EE  5C01               	subwf	___llmod@dividend,w,c
  3910  0027F0  5006               	movf	___llmod@divisor+1,w,c
  3911  0027F2  5802               	subwfb	___llmod@dividend+1,w,c
  3912  0027F4  5007               	movf	___llmod@divisor+2,w,c
  3913  0027F6  5803               	subwfb	___llmod@dividend+2,w,c
  3914  0027F8  5008               	movf	___llmod@divisor+3,w,c
  3915  0027FA  5804               	subwfb	___llmod@dividend+3,w,c
  3916  0027FC  A0D8               	btfss	status,0,c
  3917  0027FE  D009               	goto	l2283
  3918  002800  5005               	movf	___llmod@divisor,w,c
  3919  002802  5E01               	subwf	___llmod@dividend,f,c
  3920  002804  5006               	movf	___llmod@divisor+1,w,c
  3921  002806  5A02               	subwfb	___llmod@dividend+1,f,c
  3922  002808  5007               	movf	___llmod@divisor+2,w,c
  3923  00280A  5A03               	subwfb	___llmod@dividend+2,f,c
  3924  00280C  5008               	movf	___llmod@divisor+3,w,c
  3925  00280E  5A04               	subwfb	___llmod@dividend+3,f,c
  3926  002810  D000               	goto	l2283
  3927  002812                     l2283:
  3928  002812  90D8               	bcf	status,0,c
  3929  002814  3208               	rrcf	___llmod@divisor+3,f,c
  3930  002816  3207               	rrcf	___llmod@divisor+2,f,c
  3931  002818  3206               	rrcf	___llmod@divisor+1,f,c
  3932  00281A  3205               	rrcf	___llmod@divisor,f,c
  3933  00281C  2E09               	decfsz	___llmod@counter,f,c
  3934  00281E  D7E6               	goto	l2279
  3935  002820  D000               	goto	l699
  3936  002822                     l699:
  3937  002822  C001  F001         	movff	___llmod@dividend,?___llmod
  3938  002826  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  3939  00282A  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  3940  00282E  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  3941  002832  0012               	return		;funcret
  3942  002834                     __end_of___llmod:
  3943                           	opt stack 0
  3944                           tblptru	equ	0xFF8
  3945                           tblptrh	equ	0xFF7
  3946                           tblptrl	equ	0xFF6
  3947                           tablat	equ	0xFF5
  3948                           prodh	equ	0xFF4
  3949                           prodl	equ	0xFF3
  3950                           postinc0	equ	0xFEE
  3951                           wreg	equ	0xFE8
  3952                           postdec1	equ	0xFE5
  3953                           plusw1	equ	0xFE3
  3954                           fsr1l	equ	0xFE1
  3955                           indf2	equ	0xFDF
  3956                           postinc2	equ	0xFDE
  3957                           postdec2	equ	0xFDD
  3958                           plusw2	equ	0xFDB
  3959                           fsr2h	equ	0xFDA
  3960                           fsr2l	equ	0xFD9
  3961                           status	equ	0xFD8
  3962                           
  3963 ;; *************** function ___lldiv *****************
  3964 ;; Defined at:
  3965 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  3966 ;; Parameters:    Size  Location     Type
  3967 ;;  dividend        4    0[COMRAM] unsigned long 
  3968 ;;  divisor         4    4[COMRAM] unsigned long 
  3969 ;; Auto vars:     Size  Location     Type
  3970 ;;  quotient        4    8[COMRAM] unsigned long 
  3971 ;;  counter         1   12[COMRAM] unsigned char 
  3972 ;; Return value:  Size  Location     Type
  3973 ;;                  4    0[COMRAM] unsigned long 
  3974 ;; Registers used:
  3975 ;;		wreg, status,2, status,0
  3976 ;; Tracked objects:
  3977 ;;		On entry : 0/0
  3978 ;;		On exit  : 0/0
  3979 ;;		Unchanged: 0/0
  3980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3981 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3982 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3984 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3985 ;;Total ram usage:       13 bytes
  3986 ;; Hardware stack levels used:    1
  3987 ;; This function calls:
  3988 ;;		Nothing
  3989 ;; This function is called by:
  3990 ;;		_printf
  3991 ;; This function uses a non-reentrant model
  3992 ;;
  3993                           
  3994                           	psect	text13
  3995  0026B6                     __ptext13:
  3996                           	opt stack 0
  3997  0026B6                     ___lldiv:
  3998                           	opt stack 29
  3999                           
  4000                           ;incstack = 0
  4001  0026B6  0E00               	movlw	0
  4002  0026B8  6E09               	movwf	___lldiv@quotient,c
  4003  0026BA  0E00               	movlw	0
  4004  0026BC  6E0A               	movwf	___lldiv@quotient+1,c
  4005  0026BE  0E00               	movlw	0
  4006  0026C0  6E0B               	movwf	___lldiv@quotient+2,c
  4007  0026C2  0E00               	movlw	0
  4008  0026C4  6E0C               	movwf	___lldiv@quotient+3,c
  4009  0026C6  5005               	movf	___lldiv@divisor,w,c
  4010  0026C8  1006               	iorwf	___lldiv@divisor+1,w,c
  4011  0026CA  1007               	iorwf	___lldiv@divisor+2,w,c
  4012  0026CC  1008               	iorwf	___lldiv@divisor+3,w,c
  4013  0026CE  B4D8               	btfsc	status,2,c
  4014  0026D0  D02F               	goto	l689
  4015  0026D2  0E01               	movlw	1
  4016  0026D4  6E0D               	movwf	___lldiv@counter,c
  4017  0026D6  D007               	goto	l2257
  4018  0026D8                     l2255:
  4019  0026D8  90D8               	bcf	status,0,c
  4020  0026DA  3605               	rlcf	___lldiv@divisor,f,c
  4021  0026DC  3606               	rlcf	___lldiv@divisor+1,f,c
  4022  0026DE  3607               	rlcf	___lldiv@divisor+2,f,c
  4023  0026E0  3608               	rlcf	___lldiv@divisor+3,f,c
  4024  0026E2  2A0D               	incf	___lldiv@counter,f,c
  4025  0026E4  D000               	goto	l2257
  4026  0026E6                     l2257:
  4027  0026E6  BE08               	btfsc	___lldiv@divisor+3,7,c
  4028  0026E8  D002               	goto	l2259
  4029  0026EA  D7F6               	goto	l2255
  4030  0026EC  D000               	goto	l2259
  4031  0026EE                     l2259:
  4032  0026EE  90D8               	bcf	status,0,c
  4033  0026F0  3609               	rlcf	___lldiv@quotient,f,c
  4034  0026F2  360A               	rlcf	___lldiv@quotient+1,f,c
  4035  0026F4  360B               	rlcf	___lldiv@quotient+2,f,c
  4036  0026F6  360C               	rlcf	___lldiv@quotient+3,f,c
  4037  0026F8  5005               	movf	___lldiv@divisor,w,c
  4038  0026FA  5C01               	subwf	___lldiv@dividend,w,c
  4039  0026FC  5006               	movf	___lldiv@divisor+1,w,c
  4040  0026FE  5802               	subwfb	___lldiv@dividend+1,w,c
  4041  002700  5007               	movf	___lldiv@divisor+2,w,c
  4042  002702  5803               	subwfb	___lldiv@dividend+2,w,c
  4043  002704  5008               	movf	___lldiv@divisor+3,w,c
  4044  002706  5804               	subwfb	___lldiv@dividend+3,w,c
  4045  002708  A0D8               	btfss	status,0,c
  4046  00270A  D00A               	goto	l2267
  4047  00270C  5005               	movf	___lldiv@divisor,w,c
  4048  00270E  5E01               	subwf	___lldiv@dividend,f,c
  4049  002710  5006               	movf	___lldiv@divisor+1,w,c
  4050  002712  5A02               	subwfb	___lldiv@dividend+1,f,c
  4051  002714  5007               	movf	___lldiv@divisor+2,w,c
  4052  002716  5A03               	subwfb	___lldiv@dividend+2,f,c
  4053  002718  5008               	movf	___lldiv@divisor+3,w,c
  4054  00271A  5A04               	subwfb	___lldiv@dividend+3,f,c
  4055  00271C  8009               	bsf	___lldiv@quotient,0,c
  4056  00271E  D000               	goto	l2267
  4057  002720                     l2267:
  4058  002720  90D8               	bcf	status,0,c
  4059  002722  3208               	rrcf	___lldiv@divisor+3,f,c
  4060  002724  3207               	rrcf	___lldiv@divisor+2,f,c
  4061  002726  3206               	rrcf	___lldiv@divisor+1,f,c
  4062  002728  3205               	rrcf	___lldiv@divisor,f,c
  4063  00272A  2E0D               	decfsz	___lldiv@counter,f,c
  4064  00272C  D7E0               	goto	l2259
  4065  00272E  D000               	goto	l689
  4066  002730                     l689:
  4067  002730  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4068  002734  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4069  002738  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4070  00273C  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4071  002740  0012               	return		;funcret
  4072  002742                     __end_of___lldiv:
  4073                           	opt stack 0
  4074                           tblptru	equ	0xFF8
  4075                           tblptrh	equ	0xFF7
  4076                           tblptrl	equ	0xFF6
  4077                           tablat	equ	0xFF5
  4078                           prodh	equ	0xFF4
  4079                           prodl	equ	0xFF3
  4080                           postinc0	equ	0xFEE
  4081                           wreg	equ	0xFE8
  4082                           postdec1	equ	0xFE5
  4083                           plusw1	equ	0xFE3
  4084                           fsr1l	equ	0xFE1
  4085                           indf2	equ	0xFDF
  4086                           postinc2	equ	0xFDE
  4087                           postdec2	equ	0xFDD
  4088                           plusw2	equ	0xFDB
  4089                           fsr2h	equ	0xFDA
  4090                           fsr2l	equ	0xFD9
  4091                           status	equ	0xFD8
  4092                           
  4093 ;; *************** function ___fttol *****************
  4094 ;; Defined at:
  4095 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  4096 ;; Parameters:    Size  Location     Type
  4097 ;;  f1              3   23[COMRAM] float 
  4098 ;; Auto vars:     Size  Location     Type
  4099 ;;  lval            4   33[COMRAM] unsigned long 
  4100 ;;  exp1            1   37[COMRAM] unsigned char 
  4101 ;;  sign1           1   32[COMRAM] unsigned char 
  4102 ;; Return value:  Size  Location     Type
  4103 ;;                  4   23[COMRAM] long 
  4104 ;; Registers used:
  4105 ;;		wreg, status,2, status,0
  4106 ;; Tracked objects:
  4107 ;;		On entry : 0/0
  4108 ;;		On exit  : 0/0
  4109 ;;		Unchanged: 0/0
  4110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4111 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4112 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4113 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4114 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4115 ;;Total ram usage:       15 bytes
  4116 ;; Hardware stack levels used:    1
  4117 ;; This function calls:
  4118 ;;		Nothing
  4119 ;; This function is called by:
  4120 ;;		_main
  4121 ;;		_printf
  4122 ;; This function uses a non-reentrant model
  4123 ;;
  4124                           
  4125                           	psect	text14
  4126  0022FC                     __ptext14:
  4127                           	opt stack 0
  4128  0022FC                     ___fttol:
  4129                           	opt stack 29
  4130                           
  4131                           ;incstack = 0
  4132  0022FC  C01A  F01C         	movff	___fttol@f1+2,??___fttol
  4133  002300  6A1D               	clrf	(??___fttol+1)& (0+255),c
  4134  002302  6A1E               	clrf	(??___fttol+2)& (0+255),c
  4135  002304  3419               	rlcf	___fttol@f1+1,w,c
  4136  002306  361C               	rlcf	??___fttol& (0+255),f,c
  4137  002308  E301               	bnc	u2241
  4138  00230A  801D               	bsf	(??___fttol+1)& (0+255),0,c
  4139  00230C                     u2241:
  4140  00230C  501C               	movf	??___fttol,w,c
  4141  00230E  6E26               	movwf	___fttol@exp1,c
  4142  002310  5026               	movf	___fttol@exp1,w,c
  4143  002312  A4D8               	btfss	status,2,c
  4144  002314  D002               	goto	l2209
  4145  002316  D039               	goto	l2233
  4146  002318  D063               	goto	l650
  4147  00231A                     l2209:
  4148  00231A  0E17               	movlw	23
  4149  00231C  6E1C               	movwf	??___fttol& (0+255),c
  4150  00231E  C018  F01D         	movff	___fttol@f1,??___fttol+1
  4151  002322  C019  F01E         	movff	___fttol@f1+1,??___fttol+2
  4152  002326  C01A  F01F         	movff	___fttol@f1+2,??___fttol+3
  4153  00232A  281C               	incf	??___fttol,w,c
  4154  00232C  6E20               	movwf	(??___fttol+4)& (0+255),c
  4155  00232E  D004               	goto	u2260
  4156  002330                     u2265:
  4157  002330  90D8               	bcf	status,0,c
  4158  002332  321F               	rrcf	??___fttol+3,f,c
  4159  002334  321E               	rrcf	??___fttol+2,f,c
  4160  002336  321D               	rrcf	??___fttol+1,f,c
  4161  002338                     u2260:
  4162  002338  2E20               	decfsz	(??___fttol+4)& (0+255),f,c
  4163  00233A  D7FA               	goto	u2265
  4164  00233C  501D               	movf	??___fttol+1,w,c
  4165  00233E  6E21               	movwf	___fttol@sign1,c
  4166  002340  8E19               	bsf	___fttol@f1+1,7,c
  4167  002342  0EFF               	movlw	255
  4168  002344  1618               	andwf	___fttol@f1,f,c
  4169  002346  0EFF               	movlw	255
  4170  002348  1619               	andwf	___fttol@f1+1,f,c
  4171  00234A  0E00               	movlw	0
  4172  00234C  161A               	andwf	___fttol@f1+2,f,c
  4173  00234E  5018               	movf	___fttol@f1,w,c
  4174  002350  6E22               	movwf	___fttol@lval,c
  4175  002352  5019               	movf	___fttol@f1+1,w,c
  4176  002354  6E23               	movwf	___fttol@lval+1,c
  4177  002356  501A               	movf	___fttol@f1+2,w,c
  4178  002358  6E24               	movwf	___fttol@lval+2,c
  4179  00235A  6A25               	clrf	___fttol@lval+3,c
  4180  00235C  0E8E               	movlw	142
  4181  00235E  5E26               	subwf	___fttol@exp1,f,c
  4182  002360  AE26               	btfss	___fttol@exp1,7,c
  4183  002362  D010               	goto	l2231
  4184  002364  5026               	movf	___fttol@exp1,w,c
  4185  002366  0A80               	xorlw	128
  4186  002368  0F8F               	addlw	143
  4187  00236A  B0D8               	btfsc	status,0,c
  4188  00236C  D003               	goto	l2227
  4189  00236E  D00D               	goto	l2233
  4190  002370  D037               	goto	l650
  4191  002372  D000               	goto	l2227
  4192  002374                     l2227:
  4193  002374  90D8               	bcf	status,0,c
  4194  002376  3225               	rrcf	___fttol@lval+3,f,c
  4195  002378  3224               	rrcf	___fttol@lval+2,f,c
  4196  00237A  3223               	rrcf	___fttol@lval+1,f,c
  4197  00237C  3222               	rrcf	___fttol@lval,f,c
  4198  00237E  3E26               	incfsz	___fttol@exp1,f,c
  4199  002380  D7F9               	goto	l2227
  4200  002382  D019               	goto	l2241
  4201  002384                     l2231:
  4202  002384  0E17               	movlw	23
  4203  002386  6426               	cpfsgt	___fttol@exp1,c
  4204  002388  D011               	goto	l2239
  4205  00238A                     l2233:
  4206  00238A  0E00               	movlw	0
  4207  00238C  6E18               	movwf	?___fttol,c
  4208  00238E  0E00               	movlw	0
  4209  002390  6E19               	movwf	?___fttol+1,c
  4210  002392  0E00               	movlw	0
  4211  002394  6E1A               	movwf	?___fttol+2,c
  4212  002396  0E00               	movlw	0
  4213  002398  6E1B               	movwf	?___fttol+3,c
  4214  00239A  D022               	goto	l650
  4215  00239C  D007               	goto	l2239
  4216  00239E                     l2237:
  4217  00239E  90D8               	bcf	status,0,c
  4218  0023A0  3622               	rlcf	___fttol@lval,f,c
  4219  0023A2  3623               	rlcf	___fttol@lval+1,f,c
  4220  0023A4  3624               	rlcf	___fttol@lval+2,f,c
  4221  0023A6  3625               	rlcf	___fttol@lval+3,f,c
  4222  0023A8  0626               	decf	___fttol@exp1,f,c
  4223  0023AA  D000               	goto	l2239
  4224  0023AC                     l2239:
  4225  0023AC  5026               	movf	___fttol@exp1,w,c
  4226  0023AE  B4D8               	btfsc	status,2,c
  4227  0023B0  D002               	goto	l2241
  4228  0023B2  D7F5               	goto	l2237
  4229  0023B4  D000               	goto	l2241
  4230  0023B6                     l2241:
  4231  0023B6  5021               	movf	___fttol@sign1,w,c
  4232  0023B8  B4D8               	btfsc	status,2,c
  4233  0023BA  D009               	goto	l2245
  4234  0023BC  1E25               	comf	___fttol@lval+3,f,c
  4235  0023BE  1E24               	comf	___fttol@lval+2,f,c
  4236  0023C0  1E23               	comf	___fttol@lval+1,f,c
  4237  0023C2  6C22               	negf	___fttol@lval,c
  4238  0023C4  0E00               	movlw	0
  4239  0023C6  2223               	addwfc	___fttol@lval+1,f,c
  4240  0023C8  2224               	addwfc	___fttol@lval+2,f,c
  4241  0023CA  2225               	addwfc	___fttol@lval+3,f,c
  4242  0023CC  D000               	goto	l2245
  4243  0023CE                     l2245:
  4244  0023CE  C022  F018         	movff	___fttol@lval,?___fttol
  4245  0023D2  C023  F019         	movff	___fttol@lval+1,?___fttol+1
  4246  0023D6  C024  F01A         	movff	___fttol@lval+2,?___fttol+2
  4247  0023DA  C025  F01B         	movff	___fttol@lval+3,?___fttol+3
  4248  0023DE  D000               	goto	l650
  4249  0023E0                     l650:
  4250  0023E0  0012               	return		;funcret
  4251  0023E2                     __end_of___fttol:
  4252                           	opt stack 0
  4253                           tblptru	equ	0xFF8
  4254                           tblptrh	equ	0xFF7
  4255                           tblptrl	equ	0xFF6
  4256                           tablat	equ	0xFF5
  4257                           prodh	equ	0xFF4
  4258                           prodl	equ	0xFF3
  4259                           postinc0	equ	0xFEE
  4260                           wreg	equ	0xFE8
  4261                           postdec1	equ	0xFE5
  4262                           plusw1	equ	0xFE3
  4263                           fsr1l	equ	0xFE1
  4264                           indf2	equ	0xFDF
  4265                           postinc2	equ	0xFDE
  4266                           postdec2	equ	0xFDD
  4267                           plusw2	equ	0xFDB
  4268                           fsr2h	equ	0xFDA
  4269                           fsr2l	equ	0xFD9
  4270                           status	equ	0xFD8
  4271                           
  4272 ;; *************** function ___ftsub *****************
  4273 ;; Defined at:
  4274 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  4275 ;; Parameters:    Size  Location     Type
  4276 ;;  f1              3   80[COMRAM] float 
  4277 ;;  f2              3   83[COMRAM] float 
  4278 ;; Auto vars:     Size  Location     Type
  4279 ;;		None
  4280 ;; Return value:  Size  Location     Type
  4281 ;;                  3   80[COMRAM] float 
  4282 ;; Registers used:
  4283 ;;		wreg, status,2, status,0, cstack
  4284 ;; Tracked objects:
  4285 ;;		On entry : 0/0
  4286 ;;		On exit  : 0/0
  4287 ;;		Unchanged: 0/0
  4288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4289 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4292 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4293 ;;Total ram usage:        6 bytes
  4294 ;; Hardware stack levels used:    1
  4295 ;; Hardware stack levels required when called:    2
  4296 ;; This function calls:
  4297 ;;		___ftadd
  4298 ;; This function is called by:
  4299 ;;		_printf
  4300 ;; This function uses a non-reentrant model
  4301 ;;
  4302                           
  4303                           	psect	text15
  4304  002904                     __ptext15:
  4305                           	opt stack 0
  4306  002904                     ___ftsub:
  4307                           	opt stack 27
  4308                           
  4309                           ;incstack = 0
  4310  002904  5054               	movf	___ftsub@f2,w,c
  4311  002906  1055               	iorwf	___ftsub@f2+1,w,c
  4312  002908  1056               	iorwf	___ftsub@f2+2,w,c
  4313  00290A  B4D8               	btfsc	status,2,c
  4314  00290C  D007               	goto	l2177
  4315  00290E  0E00               	movlw	0
  4316  002910  1A54               	xorwf	___ftsub@f2,f,c
  4317  002912  0E00               	movlw	0
  4318  002914  1A55               	xorwf	___ftsub@f2+1,f,c
  4319  002916  0E80               	movlw	128
  4320  002918  1A56               	xorwf	___ftsub@f2+2,f,c
  4321  00291A  D000               	goto	l2177
  4322  00291C                     l2177:
  4323  00291C  C051  F045         	movff	___ftsub@f1,___ftadd@f1
  4324  002920  C052  F046         	movff	___ftsub@f1+1,___ftadd@f1+1
  4325  002924  C053  F047         	movff	___ftsub@f1+2,___ftadd@f1+2
  4326  002928  C054  F048         	movff	___ftsub@f2,___ftadd@f2
  4327  00292C  C055  F049         	movff	___ftsub@f2+1,___ftadd@f2+1
  4328  002930  C056  F04A         	movff	___ftsub@f2+2,___ftadd@f2+2
  4329  002934  EC68  F00E         	call	___ftadd	;wreg free
  4330  002938  C045  F051         	movff	?___ftadd,?___ftsub
  4331  00293C  C046  F052         	movff	?___ftadd+1,?___ftsub+1
  4332  002940  C047  F053         	movff	?___ftadd+2,?___ftsub+2
  4333  002944  D000               	goto	l646
  4334  002946                     l646:
  4335  002946  0012               	return		;funcret
  4336  002948                     __end_of___ftsub:
  4337                           	opt stack 0
  4338                           tblptru	equ	0xFF8
  4339                           tblptrh	equ	0xFF7
  4340                           tblptrl	equ	0xFF6
  4341                           tablat	equ	0xFF5
  4342                           prodh	equ	0xFF4
  4343                           prodl	equ	0xFF3
  4344                           postinc0	equ	0xFEE
  4345                           wreg	equ	0xFE8
  4346                           postdec1	equ	0xFE5
  4347                           plusw1	equ	0xFE3
  4348                           fsr1l	equ	0xFE1
  4349                           indf2	equ	0xFDF
  4350                           postinc2	equ	0xFDE
  4351                           postdec2	equ	0xFDD
  4352                           plusw2	equ	0xFDB
  4353                           fsr2h	equ	0xFDA
  4354                           fsr2l	equ	0xFD9
  4355                           status	equ	0xFD8
  4356                           
  4357 ;; *************** function ___ftadd *****************
  4358 ;; Defined at:
  4359 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  4360 ;; Parameters:    Size  Location     Type
  4361 ;;  f1              3   68[COMRAM] float 
  4362 ;;  f2              3   71[COMRAM] float 
  4363 ;; Auto vars:     Size  Location     Type
  4364 ;;  exp1            1   79[COMRAM] unsigned char 
  4365 ;;  exp2            1   78[COMRAM] unsigned char 
  4366 ;;  sign            1   77[COMRAM] unsigned char 
  4367 ;; Return value:  Size  Location     Type
  4368 ;;                  3   68[COMRAM] float 
  4369 ;; Registers used:
  4370 ;;		wreg, status,2, status,0, cstack
  4371 ;; Tracked objects:
  4372 ;;		On entry : 0/0
  4373 ;;		On exit  : 0/0
  4374 ;;		Unchanged: 0/0
  4375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4376 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4377 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4378 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4379 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4380 ;;Total ram usage:       12 bytes
  4381 ;; Hardware stack levels used:    1
  4382 ;; Hardware stack levels required when called:    1
  4383 ;; This function calls:
  4384 ;;		___ftpack
  4385 ;; This function is called by:
  4386 ;;		_printf
  4387 ;;		___ftsub
  4388 ;; This function uses a non-reentrant model
  4389 ;;
  4390                           
  4391                           	psect	text16
  4392  001CD0                     __ptext16:
  4393                           	opt stack 0
  4394  001CD0                     ___ftadd:
  4395                           	opt stack 27
  4396                           
  4397                           ;incstack = 0
  4398  001CD0  C047  F04B         	movff	___ftadd@f1+2,??___ftadd
  4399  001CD4  6A4C               	clrf	(??___ftadd+1)& (0+255),c
  4400  001CD6  6A4D               	clrf	(??___ftadd+2)& (0+255),c
  4401  001CD8  3446               	rlcf	___ftadd@f1+1,w,c
  4402  001CDA  364B               	rlcf	??___ftadd& (0+255),f,c
  4403  001CDC  E301               	bnc	u1461
  4404  001CDE  804C               	bsf	(??___ftadd+1)& (0+255),0,c
  4405  001CE0                     u1461:
  4406  001CE0  504B               	movf	??___ftadd,w,c
  4407  001CE2  6E50               	movwf	___ftadd@exp1,c
  4408  001CE4  C04A  F04B         	movff	___ftadd@f2+2,??___ftadd
  4409  001CE8  6A4C               	clrf	(??___ftadd+1)& (0+255),c
  4410  001CEA  6A4D               	clrf	(??___ftadd+2)& (0+255),c
  4411  001CEC  3449               	rlcf	___ftadd@f2+1,w,c
  4412  001CEE  364B               	rlcf	??___ftadd& (0+255),f,c
  4413  001CF0  E301               	bnc	u1471
  4414  001CF2  804C               	bsf	(??___ftadd+1)& (0+255),0,c
  4415  001CF4                     u1471:
  4416  001CF4  504B               	movf	??___ftadd,w,c
  4417  001CF6  6E4F               	movwf	___ftadd@exp2,c
  4418  001CF8  5050               	movf	___ftadd@exp1,w,c
  4419  001CFA  B4D8               	btfsc	status,2,c
  4420  001CFC  D00B               	goto	l565
  4421  001CFE  504F               	movf	___ftadd@exp2,w,c
  4422  001D00  5C50               	subwf	___ftadd@exp1,w,c
  4423  001D02  B0D8               	btfsc	status,0,c
  4424  001D04  D00E               	goto	l1753
  4425  001D06  5050               	movf	___ftadd@exp1,w,c
  4426  001D08  0800               	sublw	0
  4427  001D0A  244F               	addwf	___ftadd@exp2,w,c
  4428  001D0C  6E4B               	movwf	??___ftadd& (0+255),c
  4429  001D0E  0E18               	movlw	24
  4430  001D10  644B               	cpfsgt	??___ftadd,c
  4431  001D12  D007               	goto	l1753
  4432  001D14                     l565:
  4433  001D14  C048  F045         	movff	___ftadd@f2,?___ftadd
  4434  001D18  C049  F046         	movff	___ftadd@f2+1,?___ftadd+1
  4435  001D1C  C04A  F047         	movff	___ftadd@f2+2,?___ftadd+2
  4436  001D20  D0B8               	goto	l566
  4437  001D22                     l1753:
  4438  001D22  504F               	movf	___ftadd@exp2,w,c
  4439  001D24  B4D8               	btfsc	status,2,c
  4440  001D26  D00B               	goto	l569
  4441  001D28  5050               	movf	___ftadd@exp1,w,c
  4442  001D2A  5C4F               	subwf	___ftadd@exp2,w,c
  4443  001D2C  B0D8               	btfsc	status,0,c
  4444  001D2E  D00E               	goto	l1759
  4445  001D30  504F               	movf	___ftadd@exp2,w,c
  4446  001D32  0800               	sublw	0
  4447  001D34  2450               	addwf	___ftadd@exp1,w,c
  4448  001D36  6E4B               	movwf	??___ftadd& (0+255),c
  4449  001D38  0E18               	movlw	24
  4450  001D3A  644B               	cpfsgt	??___ftadd,c
  4451  001D3C  D007               	goto	l1759
  4452  001D3E                     l569:
  4453  001D3E  C045  F045         	movff	___ftadd@f1,?___ftadd
  4454  001D42  C046  F046         	movff	___ftadd@f1+1,?___ftadd+1
  4455  001D46  C047  F047         	movff	___ftadd@f1+2,?___ftadd+2
  4456  001D4A  D0A3               	goto	l566
  4457  001D4C                     l1759:
  4458  001D4C  0E06               	movlw	6
  4459  001D4E  6E4E               	movwf	___ftadd@sign,c
  4460  001D50  AE47               	btfss	___ftadd@f1+2,7,c
  4461  001D52  D002               	goto	l1765
  4462  001D54  8E4E               	bsf	___ftadd@sign,7,c
  4463  001D56  D000               	goto	l1765
  4464  001D58                     l1765:
  4465  001D58  BE4A               	btfsc	___ftadd@f2+2,7,c
  4466  001D5A  8C4E               	bsf	___ftadd@sign,6,c
  4467  001D5C  8E46               	bsf	___ftadd@f1+1,7,c
  4468  001D5E  0EFF               	movlw	255
  4469  001D60  1645               	andwf	___ftadd@f1,f,c
  4470  001D62  0EFF               	movlw	255
  4471  001D64  1646               	andwf	___ftadd@f1+1,f,c
  4472  001D66  0E00               	movlw	0
  4473  001D68  1647               	andwf	___ftadd@f1+2,f,c
  4474  001D6A  8E49               	bsf	___ftadd@f2+1,7,c
  4475  001D6C  0EFF               	movlw	255
  4476  001D6E  1648               	andwf	___ftadd@f2,f,c
  4477  001D70  0EFF               	movlw	255
  4478  001D72  1649               	andwf	___ftadd@f2+1,f,c
  4479  001D74  0E00               	movlw	0
  4480  001D76  164A               	andwf	___ftadd@f2+2,f,c
  4481  001D78  504F               	movf	___ftadd@exp2,w,c
  4482  001D7A  5C50               	subwf	___ftadd@exp1,w,c
  4483  001D7C  B0D8               	btfsc	status,0,c
  4484  001D7E  D01E               	goto	l1785
  4485  001D80                     l1775:
  4486  001D80  90D8               	bcf	status,0,c
  4487  001D82  3648               	rlcf	___ftadd@f2,f,c
  4488  001D84  3649               	rlcf	___ftadd@f2+1,f,c
  4489  001D86  364A               	rlcf	___ftadd@f2+2,f,c
  4490  001D88  064F               	decf	___ftadd@exp2,f,c
  4491  001D8A  5050               	movf	___ftadd@exp1,w,c
  4492  001D8C  184F               	xorwf	___ftadd@exp2,w,c
  4493  001D8E  B4D8               	btfsc	status,2,c
  4494  001D90  D00F               	goto	l1783
  4495  001D92  064E               	decf	___ftadd@sign,f,c
  4496  001D94  C04E  F04B         	movff	___ftadd@sign,??___ftadd
  4497  001D98  0E07               	movlw	7
  4498  001D9A  164B               	andwf	??___ftadd,f,c
  4499  001D9C  B4D8               	btfsc	status,2,c
  4500  001D9E  D008               	goto	l1783
  4501  001DA0  D7EF               	goto	l1775
  4502  001DA2  D006               	goto	l1783
  4503  001DA4                     l1781:
  4504  001DA4  90D8               	bcf	status,0,c
  4505  001DA6  3247               	rrcf	___ftadd@f1+2,f,c
  4506  001DA8  3246               	rrcf	___ftadd@f1+1,f,c
  4507  001DAA  3245               	rrcf	___ftadd@f1,f,c
  4508  001DAC  2A50               	incf	___ftadd@exp1,f,c
  4509  001DAE  D000               	goto	l1783
  4510  001DB0                     l1783:
  4511  001DB0  504F               	movf	___ftadd@exp2,w,c
  4512  001DB2  1850               	xorwf	___ftadd@exp1,w,c
  4513  001DB4  B4D8               	btfsc	status,2,c
  4514  001DB6  D024               	goto	l580
  4515  001DB8  D7F5               	goto	l1781
  4516  001DBA  D022               	goto	l580
  4517  001DBC                     l1785:
  4518  001DBC  5050               	movf	___ftadd@exp1,w,c
  4519  001DBE  5C4F               	subwf	___ftadd@exp2,w,c
  4520  001DC0  B0D8               	btfsc	status,0,c
  4521  001DC2  D01E               	goto	l580
  4522  001DC4                     l1787:
  4523  001DC4  90D8               	bcf	status,0,c
  4524  001DC6  3645               	rlcf	___ftadd@f1,f,c
  4525  001DC8  3646               	rlcf	___ftadd@f1+1,f,c
  4526  001DCA  3647               	rlcf	___ftadd@f1+2,f,c
  4527  001DCC  0650               	decf	___ftadd@exp1,f,c
  4528  001DCE  5050               	movf	___ftadd@exp1,w,c
  4529  001DD0  184F               	xorwf	___ftadd@exp2,w,c
  4530  001DD2  B4D8               	btfsc	status,2,c
  4531  001DD4  D00F               	goto	l1795
  4532  001DD6  064E               	decf	___ftadd@sign,f,c
  4533  001DD8  C04E  F04B         	movff	___ftadd@sign,??___ftadd
  4534  001DDC  0E07               	movlw	7
  4535  001DDE  164B               	andwf	??___ftadd,f,c
  4536  001DE0  B4D8               	btfsc	status,2,c
  4537  001DE2  D008               	goto	l1795
  4538  001DE4  D7EF               	goto	l1787
  4539  001DE6  D006               	goto	l1795
  4540  001DE8                     l1793:
  4541  001DE8  90D8               	bcf	status,0,c
  4542  001DEA  324A               	rrcf	___ftadd@f2+2,f,c
  4543  001DEC  3249               	rrcf	___ftadd@f2+1,f,c
  4544  001DEE  3248               	rrcf	___ftadd@f2,f,c
  4545  001DF0  2A4F               	incf	___ftadd@exp2,f,c
  4546  001DF2  D000               	goto	l1795
  4547  001DF4                     l1795:
  4548  001DF4  504F               	movf	___ftadd@exp2,w,c
  4549  001DF6  1850               	xorwf	___ftadd@exp1,w,c
  4550  001DF8  B4D8               	btfsc	status,2,c
  4551  001DFA  D002               	goto	l580
  4552  001DFC  D7F5               	goto	l1793
  4553  001DFE  D000               	goto	l580
  4554  001E00                     l580:
  4555  001E00  AE4E               	btfss	___ftadd@sign,7,c
  4556  001E02  D00C               	goto	l589
  4557  001E04  0EFF               	movlw	255
  4558  001E06  1A45               	xorwf	___ftadd@f1,f,c
  4559  001E08  0EFF               	movlw	255
  4560  001E0A  1A46               	xorwf	___ftadd@f1+1,f,c
  4561  001E0C  0EFF               	movlw	255
  4562  001E0E  1A47               	xorwf	___ftadd@f1+2,f,c
  4563  001E10  0E01               	movlw	1
  4564  001E12  2645               	addwf	___ftadd@f1,f,c
  4565  001E14  0E00               	movlw	0
  4566  001E16  2246               	addwfc	___ftadd@f1+1,f,c
  4567  001E18  0E00               	movlw	0
  4568  001E1A  2247               	addwfc	___ftadd@f1+2,f,c
  4569  001E1C                     l589:
  4570  001E1C  AC4E               	btfss	___ftadd@sign,6,c
  4571  001E1E  D00D               	goto	l1801
  4572  001E20  0EFF               	movlw	255
  4573  001E22  1A48               	xorwf	___ftadd@f2,f,c
  4574  001E24  0EFF               	movlw	255
  4575  001E26  1A49               	xorwf	___ftadd@f2+1,f,c
  4576  001E28  0EFF               	movlw	255
  4577  001E2A  1A4A               	xorwf	___ftadd@f2+2,f,c
  4578  001E2C  0E01               	movlw	1
  4579  001E2E  2648               	addwf	___ftadd@f2,f,c
  4580  001E30  0E00               	movlw	0
  4581  001E32  2249               	addwfc	___ftadd@f2+1,f,c
  4582  001E34  0E00               	movlw	0
  4583  001E36  224A               	addwfc	___ftadd@f2+2,f,c
  4584  001E38  D000               	goto	l1801
  4585  001E3A                     l1801:
  4586  001E3A  0E00               	movlw	0
  4587  001E3C  6E4E               	movwf	___ftadd@sign,c
  4588  001E3E  5045               	movf	___ftadd@f1,w,c
  4589  001E40  2648               	addwf	___ftadd@f2,f,c
  4590  001E42  5046               	movf	___ftadd@f1+1,w,c
  4591  001E44  2249               	addwfc	___ftadd@f2+1,f,c
  4592  001E46  5047               	movf	___ftadd@f1+2,w,c
  4593  001E48  224A               	addwfc	___ftadd@f2+2,f,c
  4594  001E4A  AE4A               	btfss	___ftadd@f2+2,7,c
  4595  001E4C  D00F               	goto	l1811
  4596  001E4E  0EFF               	movlw	255
  4597  001E50  1A48               	xorwf	___ftadd@f2,f,c
  4598  001E52  0EFF               	movlw	255
  4599  001E54  1A49               	xorwf	___ftadd@f2+1,f,c
  4600  001E56  0EFF               	movlw	255
  4601  001E58  1A4A               	xorwf	___ftadd@f2+2,f,c
  4602  001E5A  0E01               	movlw	1
  4603  001E5C  2648               	addwf	___ftadd@f2,f,c
  4604  001E5E  0E00               	movlw	0
  4605  001E60  2249               	addwfc	___ftadd@f2+1,f,c
  4606  001E62  0E00               	movlw	0
  4607  001E64  224A               	addwfc	___ftadd@f2+2,f,c
  4608  001E66  0E01               	movlw	1
  4609  001E68  6E4E               	movwf	___ftadd@sign,c
  4610  001E6A  D000               	goto	l1811
  4611  001E6C                     l1811:
  4612  001E6C  C048  F001         	movff	___ftadd@f2,___ftpack@arg
  4613  001E70  C049  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  4614  001E74  C04A  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  4615  001E78  C050  F004         	movff	___ftadd@exp1,___ftpack@exp
  4616  001E7C  C04E  F005         	movff	___ftadd@sign,___ftpack@sign
  4617  001E80  EC62  F012         	call	___ftpack	;wreg free
  4618  001E84  C001  F045         	movff	?___ftpack,?___ftadd
  4619  001E88  C002  F046         	movff	?___ftpack+1,?___ftadd+1
  4620  001E8C  C003  F047         	movff	?___ftpack+2,?___ftadd+2
  4621  001E90  D000               	goto	l566
  4622  001E92                     l566:
  4623  001E92  0012               	return		;funcret
  4624  001E94                     __end_of___ftadd:
  4625                           	opt stack 0
  4626                           tblptru	equ	0xFF8
  4627                           tblptrh	equ	0xFF7
  4628                           tblptrl	equ	0xFF6
  4629                           tablat	equ	0xFF5
  4630                           prodh	equ	0xFF4
  4631                           prodl	equ	0xFF3
  4632                           postinc0	equ	0xFEE
  4633                           wreg	equ	0xFE8
  4634                           postdec1	equ	0xFE5
  4635                           plusw1	equ	0xFE3
  4636                           fsr1l	equ	0xFE1
  4637                           indf2	equ	0xFDF
  4638                           postinc2	equ	0xFDE
  4639                           postdec2	equ	0xFDD
  4640                           plusw2	equ	0xFDB
  4641                           fsr2h	equ	0xFDA
  4642                           fsr2l	equ	0xFD9
  4643                           status	equ	0xFD8
  4644                           
  4645 ;; *************** function ___ftneg *****************
  4646 ;; Defined at:
  4647 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
  4648 ;; Parameters:    Size  Location     Type
  4649 ;;  f1              3    0[COMRAM] float 
  4650 ;; Auto vars:     Size  Location     Type
  4651 ;;		None
  4652 ;; Return value:  Size  Location     Type
  4653 ;;                  3    0[COMRAM] float 
  4654 ;; Registers used:
  4655 ;;		wreg, status,2, status,0
  4656 ;; Tracked objects:
  4657 ;;		On entry : 0/0
  4658 ;;		On exit  : 0/0
  4659 ;;		Unchanged: 0/0
  4660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4661 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4664 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4665 ;;Total ram usage:        3 bytes
  4666 ;; Hardware stack levels used:    1
  4667 ;; This function calls:
  4668 ;;		Nothing
  4669 ;; This function is called by:
  4670 ;;		_printf
  4671 ;; This function uses a non-reentrant model
  4672 ;;
  4673                           
  4674                           	psect	text17
  4675  0029E6                     __ptext17:
  4676                           	opt stack 0
  4677  0029E6                     ___ftneg:
  4678                           	opt stack 29
  4679                           
  4680                           ;incstack = 0
  4681  0029E6  5001               	movf	___ftneg@f1,w,c
  4682  0029E8  1002               	iorwf	___ftneg@f1+1,w,c
  4683  0029EA  1003               	iorwf	___ftneg@f1+2,w,c
  4684  0029EC  B4D8               	btfsc	status,2,c
  4685  0029EE  D006               	goto	l639
  4686  0029F0  0E00               	movlw	0
  4687  0029F2  1A01               	xorwf	___ftneg@f1,f,c
  4688  0029F4  0E00               	movlw	0
  4689  0029F6  1A02               	xorwf	___ftneg@f1+1,f,c
  4690  0029F8  0E80               	movlw	128
  4691  0029FA  1A03               	xorwf	___ftneg@f1+2,f,c
  4692  0029FC                     l639:
  4693  0029FC  C001  F001         	movff	___ftneg@f1,?___ftneg
  4694  002A00  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  4695  002A04  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  4696  002A08  0012               	return		;funcret
  4697  002A0A                     __end_of___ftneg:
  4698                           	opt stack 0
  4699                           tblptru	equ	0xFF8
  4700                           tblptrh	equ	0xFF7
  4701                           tblptrl	equ	0xFF6
  4702                           tablat	equ	0xFF5
  4703                           prodh	equ	0xFF4
  4704                           prodl	equ	0xFF3
  4705                           postinc0	equ	0xFEE
  4706                           wreg	equ	0xFE8
  4707                           postdec1	equ	0xFE5
  4708                           plusw1	equ	0xFE3
  4709                           fsr1l	equ	0xFE1
  4710                           indf2	equ	0xFDF
  4711                           postinc2	equ	0xFDE
  4712                           postdec2	equ	0xFDD
  4713                           plusw2	equ	0xFDB
  4714                           fsr2h	equ	0xFDA
  4715                           fsr2l	equ	0xFD9
  4716                           status	equ	0xFD8
  4717                           
  4718 ;; *************** function ___ftge *****************
  4719 ;; Defined at:
  4720 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  4721 ;; Parameters:    Size  Location     Type
  4722 ;;  ff1             3    0[COMRAM] float 
  4723 ;;  ff2             3    3[COMRAM] float 
  4724 ;; Auto vars:     Size  Location     Type
  4725 ;;		None
  4726 ;; Return value:  Size  Location     Type
  4727 ;;		None               void
  4728 ;; Registers used:
  4729 ;;		wreg, status,2, status,0
  4730 ;; Tracked objects:
  4731 ;;		On entry : 0/0
  4732 ;;		On exit  : 0/0
  4733 ;;		Unchanged: 0/0
  4734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4735 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4737 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4738 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4739 ;;Total ram usage:        9 bytes
  4740 ;; Hardware stack levels used:    1
  4741 ;; This function calls:
  4742 ;;		Nothing
  4743 ;; This function is called by:
  4744 ;;		_printf
  4745 ;; This function uses a non-reentrant model
  4746 ;;
  4747                           
  4748                           	psect	text18
  4749  002620                     __ptext18:
  4750                           	opt stack 0
  4751  002620                     ___ftge:
  4752                           	opt stack 29
  4753                           
  4754                           ;incstack = 0
  4755  002620  AE03               	btfss	___ftge@ff1+2,7,c
  4756  002622  D017               	goto	l2185
  4757  002624  C001  F007         	movff	___ftge@ff1,??___ftge
  4758  002628  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  4759  00262C  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  4760  002630  1E07               	comf	??___ftge,f,c
  4761  002632  1E08               	comf	??___ftge+1,f,c
  4762  002634  1E09               	comf	??___ftge+2,f,c
  4763  002636  2A07               	incf	??___ftge,f,c
  4764  002638  0E00               	movlw	0
  4765  00263A  2208               	addwfc	??___ftge+1,f,c
  4766  00263C  2209               	addwfc	??___ftge+2,f,c
  4767  00263E  0E00               	movlw	0
  4768  002640  2407               	addwf	??___ftge,w,c
  4769  002642  6E01               	movwf	___ftge@ff1,c
  4770  002644  0E00               	movlw	0
  4771  002646  2008               	addwfc	??___ftge+1,w,c
  4772  002648  6E02               	movwf	___ftge@ff1+1,c
  4773  00264A  0E80               	movlw	128
  4774  00264C  2009               	addwfc	??___ftge+2,w,c
  4775  00264E  6E03               	movwf	___ftge@ff1+2,c
  4776  002650  D000               	goto	l2185
  4777  002652                     l2185:
  4778  002652  AE06               	btfss	___ftge@ff2+2,7,c
  4779  002654  D017               	goto	l2189
  4780  002656  C004  F007         	movff	___ftge@ff2,??___ftge
  4781  00265A  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  4782  00265E  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  4783  002662  1E07               	comf	??___ftge,f,c
  4784  002664  1E08               	comf	??___ftge+1,f,c
  4785  002666  1E09               	comf	??___ftge+2,f,c
  4786  002668  2A07               	incf	??___ftge,f,c
  4787  00266A  0E00               	movlw	0
  4788  00266C  2208               	addwfc	??___ftge+1,f,c
  4789  00266E  2209               	addwfc	??___ftge+2,f,c
  4790  002670  0E00               	movlw	0
  4791  002672  2407               	addwf	??___ftge,w,c
  4792  002674  6E04               	movwf	___ftge@ff2,c
  4793  002676  0E00               	movlw	0
  4794  002678  2008               	addwfc	??___ftge+1,w,c
  4795  00267A  6E05               	movwf	___ftge@ff2+1,c
  4796  00267C  0E80               	movlw	128
  4797  00267E  2009               	addwfc	??___ftge+2,w,c
  4798  002680  6E06               	movwf	___ftge@ff2+2,c
  4799  002682  D000               	goto	l2189
  4800  002684                     l2189:
  4801  002684  0E00               	movlw	0
  4802  002686  1A01               	xorwf	___ftge@ff1,f,c
  4803  002688  0E00               	movlw	0
  4804  00268A  1A02               	xorwf	___ftge@ff1+1,f,c
  4805  00268C  0E80               	movlw	128
  4806  00268E  1A03               	xorwf	___ftge@ff1+2,f,c
  4807  002690  0E00               	movlw	0
  4808  002692  1A04               	xorwf	___ftge@ff2,f,c
  4809  002694  0E00               	movlw	0
  4810  002696  1A05               	xorwf	___ftge@ff2+1,f,c
  4811  002698  0E80               	movlw	128
  4812  00269A  1A06               	xorwf	___ftge@ff2+2,f,c
  4813  00269C  5004               	movf	___ftge@ff2,w,c
  4814  00269E  5C01               	subwf	___ftge@ff1,w,c
  4815  0026A0  5005               	movf	___ftge@ff2+1,w,c
  4816  0026A2  5802               	subwfb	___ftge@ff1+1,w,c
  4817  0026A4  5006               	movf	___ftge@ff2+2,w,c
  4818  0026A6  5803               	subwfb	___ftge@ff1+2,w,c
  4819  0026A8  B0D8               	btfsc	status,0,c
  4820  0026AA  D002               	goto	l2195
  4821  0026AC  90D8               	bcf	status,0,c
  4822  0026AE  D002               	goto	l623
  4823  0026B0                     l2195:
  4824  0026B0  80D8               	bsf	status,0,c
  4825  0026B2  D000               	goto	l623
  4826  0026B4                     l623:
  4827  0026B4  0012               	return		;funcret
  4828  0026B6                     __end_of___ftge:
  4829                           	opt stack 0
  4830                           tblptru	equ	0xFF8
  4831                           tblptrh	equ	0xFF7
  4832                           tblptrl	equ	0xFF6
  4833                           tablat	equ	0xFF5
  4834                           prodh	equ	0xFF4
  4835                           prodl	equ	0xFF3
  4836                           postinc0	equ	0xFEE
  4837                           wreg	equ	0xFE8
  4838                           postdec1	equ	0xFE5
  4839                           plusw1	equ	0xFE3
  4840                           fsr1l	equ	0xFE1
  4841                           indf2	equ	0xFDF
  4842                           postinc2	equ	0xFDE
  4843                           postdec2	equ	0xFDD
  4844                           plusw2	equ	0xFDB
  4845                           fsr2h	equ	0xFDA
  4846                           fsr2l	equ	0xFD9
  4847                           status	equ	0xFD8
  4848                           
  4849 ;; *************** function _get_full_ADC *****************
  4850 ;; Defined at:
  4851 ;;		line 80 in file "Lab6pA.c"
  4852 ;; Parameters:    Size  Location     Type
  4853 ;;		None
  4854 ;; Auto vars:     Size  Location     Type
  4855 ;;  result          2    4[COMRAM] int 
  4856 ;; Return value:  Size  Location     Type
  4857 ;;                  2    0[COMRAM] unsigned int 
  4858 ;; Registers used:
  4859 ;;		wreg, status,2, status,0
  4860 ;; Tracked objects:
  4861 ;;		On entry : 0/0
  4862 ;;		On exit  : 0/0
  4863 ;;		Unchanged: 0/0
  4864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4865 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4866 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4867 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4868 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4869 ;;Total ram usage:        6 bytes
  4870 ;; Hardware stack levels used:    1
  4871 ;; This function calls:
  4872 ;;		Nothing
  4873 ;; This function is called by:
  4874 ;;		_main
  4875 ;; This function uses a non-reentrant model
  4876 ;;
  4877                           
  4878                           	psect	text19
  4879  00299A                     __ptext19:
  4880                           	opt stack 0
  4881  00299A                     _get_full_ADC:
  4882                           	opt stack 30
  4883                           
  4884                           ;Lab6pA.c: 82: int result;
  4885                           ;Lab6pA.c: 83: ADCON0bits.GO=1;
  4886                           
  4887                           ;incstack = 0
  4888  00299A  82C2               	bsf	4034,1,c	;volatile
  4889                           
  4890                           ;Lab6pA.c: 84: while(ADCON0bits.DONE==1);
  4891  00299C  D000               	goto	l75
  4892  00299E                     l75:
  4893  00299E  B2C2               	btfsc	4034,1,c	;volatile
  4894  0029A0  D7FE               	goto	l75
  4895                           
  4896                           ;Lab6pA.c: 85: result = (ADRESH * 0x100) + ADRESL;
  4897  0029A2  50C4               	movf	4036,w,c	;volatile
  4898  0029A4  6E04               	movwf	(??_get_full_ADC+1)& (0+255),c
  4899  0029A6  6A03               	clrf	??_get_full_ADC& (0+255),c
  4900  0029A8  50C3               	movf	4035,w,c	;volatile
  4901  0029AA  2403               	addwf	??_get_full_ADC,w,c
  4902  0029AC  6E05               	movwf	get_full_ADC@result,c
  4903  0029AE  0E00               	movlw	0
  4904  0029B0  2004               	addwfc	??_get_full_ADC+1,w,c
  4905  0029B2  6E06               	movwf	get_full_ADC@result+1,c
  4906                           
  4907                           ;Lab6pA.c: 87: return result;
  4908  0029B4  C005  F001         	movff	get_full_ADC@result,?_get_full_ADC
  4909  0029B8  C006  F002         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  4910  0029BC  D000               	goto	l78
  4911  0029BE                     l78:
  4912  0029BE  0012               	return		;funcret
  4913  0029C0                     __end_of_get_full_ADC:
  4914                           	opt stack 0
  4915                           tblptru	equ	0xFF8
  4916                           tblptrh	equ	0xFF7
  4917                           tblptrl	equ	0xFF6
  4918                           tablat	equ	0xFF5
  4919                           prodh	equ	0xFF4
  4920                           prodl	equ	0xFF3
  4921                           postinc0	equ	0xFEE
  4922                           wreg	equ	0xFE8
  4923                           postdec1	equ	0xFE5
  4924                           plusw1	equ	0xFE3
  4925                           fsr1l	equ	0xFE1
  4926                           indf2	equ	0xFDF
  4927                           postinc2	equ	0xFDE
  4928                           postdec2	equ	0xFDD
  4929                           plusw2	equ	0xFDB
  4930                           fsr2h	equ	0xFDA
  4931                           fsr2l	equ	0xFD9
  4932                           status	equ	0xFD8
  4933                           
  4934 ;; *************** function ___lwtoft *****************
  4935 ;; Defined at:
  4936 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  4937 ;; Parameters:    Size  Location     Type
  4938 ;;  c               2    8[COMRAM] unsigned int 
  4939 ;; Auto vars:     Size  Location     Type
  4940 ;;		None
  4941 ;; Return value:  Size  Location     Type
  4942 ;;                  3    8[COMRAM] float 
  4943 ;; Registers used:
  4944 ;;		wreg, status,2, status,0, cstack
  4945 ;; Tracked objects:
  4946 ;;		On entry : 0/0
  4947 ;;		On exit  : 0/0
  4948 ;;		Unchanged: 0/0
  4949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4950 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4953 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4954 ;;Total ram usage:        3 bytes
  4955 ;; Hardware stack levels used:    1
  4956 ;; Hardware stack levels required when called:    1
  4957 ;; This function calls:
  4958 ;;		___ftpack
  4959 ;; This function is called by:
  4960 ;;		_main
  4961 ;; This function uses a non-reentrant model
  4962 ;;
  4963                           
  4964                           	psect	text20
  4965  0029C0                     __ptext20:
  4966                           	opt stack 0
  4967  0029C0                     ___lwtoft:
  4968                           	opt stack 29
  4969                           
  4970                           ;incstack = 0
  4971  0029C0  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  4972  0029C4  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  4973  0029C8  6A03               	clrf	___ftpack@arg+2,c
  4974  0029CA  0E8E               	movlw	142
  4975  0029CC  6E04               	movwf	___ftpack@exp,c
  4976  0029CE  0E00               	movlw	0
  4977  0029D0  6E05               	movwf	___ftpack@sign,c
  4978  0029D2  EC62  F012         	call	___ftpack	;wreg free
  4979  0029D6  C001  F009         	movff	?___ftpack,?___lwtoft
  4980  0029DA  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  4981  0029DE  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  4982  0029E2  D000               	goto	l779
  4983  0029E4                     l779:
  4984  0029E4  0012               	return		;funcret
  4985  0029E6                     __end_of___lwtoft:
  4986                           	opt stack 0
  4987                           tblptru	equ	0xFF8
  4988                           tblptrh	equ	0xFF7
  4989                           tblptrl	equ	0xFF6
  4990                           tablat	equ	0xFF5
  4991                           prodh	equ	0xFF4
  4992                           prodl	equ	0xFF3
  4993                           postinc0	equ	0xFEE
  4994                           wreg	equ	0xFE8
  4995                           postdec1	equ	0xFE5
  4996                           plusw1	equ	0xFE3
  4997                           fsr1l	equ	0xFE1
  4998                           indf2	equ	0xFDF
  4999                           postinc2	equ	0xFDE
  5000                           postdec2	equ	0xFDD
  5001                           plusw2	equ	0xFDB
  5002                           fsr2h	equ	0xFDA
  5003                           fsr2l	equ	0xFD9
  5004                           status	equ	0xFD8
  5005                           
  5006 ;; *************** function ___ftdiv *****************
  5007 ;; Defined at:
  5008 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  5009 ;; Parameters:    Size  Location     Type
  5010 ;;  f1              3   23[COMRAM] float 
  5011 ;;  f2              3   26[COMRAM] float 
  5012 ;; Auto vars:     Size  Location     Type
  5013 ;;  f3              3   33[COMRAM] float 
  5014 ;;  sign            1   37[COMRAM] unsigned char 
  5015 ;;  exp             1   36[COMRAM] unsigned char 
  5016 ;;  cntr            1   32[COMRAM] unsigned char 
  5017 ;; Return value:  Size  Location     Type
  5018 ;;                  3   23[COMRAM] float 
  5019 ;; Registers used:
  5020 ;;		wreg, status,2, status,0, cstack
  5021 ;; Tracked objects:
  5022 ;;		On entry : 0/0
  5023 ;;		On exit  : 0/0
  5024 ;;		Unchanged: 0/0
  5025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5026 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5027 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5028 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5029 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5030 ;;Total ram usage:       15 bytes
  5031 ;; Hardware stack levels used:    1
  5032 ;; Hardware stack levels required when called:    1
  5033 ;; This function calls:
  5034 ;;		___ftpack
  5035 ;; This function is called by:
  5036 ;;		_main
  5037 ;; This function uses a non-reentrant model
  5038 ;;
  5039                           
  5040                           	psect	text21
  5041  0023E2                     __ptext21:
  5042                           	opt stack 0
  5043  0023E2                     ___ftdiv:
  5044                           	opt stack 29
  5045                           
  5046                           ;incstack = 0
  5047  0023E2  C01A  F01E         	movff	___ftdiv@f1+2,??___ftdiv
  5048  0023E6  6A1F               	clrf	(??___ftdiv+1)& (0+255),c
  5049  0023E8  6A20               	clrf	(??___ftdiv+2)& (0+255),c
  5050  0023EA  3419               	rlcf	___ftdiv@f1+1,w,c
  5051  0023EC  361E               	rlcf	??___ftdiv& (0+255),f,c
  5052  0023EE  E301               	bnc	u2681
  5053  0023F0  801F               	bsf	(??___ftdiv+1)& (0+255),0,c
  5054  0023F2                     u2681:
  5055  0023F2  501E               	movf	??___ftdiv,w,c
  5056  0023F4  6E25               	movwf	___ftdiv@exp,c
  5057  0023F6  5025               	movf	___ftdiv@exp,w,c
  5058  0023F8  A4D8               	btfss	status,2,c
  5059  0023FA  D002               	goto	l2481
  5060  0023FC  D00E               	goto	l2483
  5061  0023FE  D061               	goto	l597
  5062  002400                     l2481:
  5063  002400  C01D  F01E         	movff	___ftdiv@f2+2,??___ftdiv
  5064  002404  6A1F               	clrf	(??___ftdiv+1)& (0+255),c
  5065  002406  6A20               	clrf	(??___ftdiv+2)& (0+255),c
  5066  002408  341C               	rlcf	___ftdiv@f2+1,w,c
  5067  00240A  361E               	rlcf	??___ftdiv& (0+255),f,c
  5068  00240C  E301               	bnc	u2701
  5069  00240E  801F               	bsf	(??___ftdiv+1)& (0+255),0,c
  5070  002410                     u2701:
  5071  002410  501E               	movf	??___ftdiv,w,c
  5072  002412  6E26               	movwf	___ftdiv@sign,c
  5073  002414  5026               	movf	___ftdiv@sign,w,c
  5074  002416  A4D8               	btfss	status,2,c
  5075  002418  D007               	goto	l2487
  5076  00241A                     l2483:
  5077  00241A  0E00               	movlw	0
  5078  00241C  6E18               	movwf	?___ftdiv,c
  5079  00241E  0E00               	movlw	0
  5080  002420  6E19               	movwf	?___ftdiv+1,c
  5081  002422  0E00               	movlw	0
  5082  002424  6E1A               	movwf	?___ftdiv+2,c
  5083  002426  D04D               	goto	l597
  5084  002428                     l2487:
  5085  002428  0E00               	movlw	0
  5086  00242A  6E22               	movwf	___ftdiv@f3,c
  5087  00242C  0E00               	movlw	0
  5088  00242E  6E23               	movwf	___ftdiv@f3+1,c
  5089  002430  0E00               	movlw	0
  5090  002432  6E24               	movwf	___ftdiv@f3+2,c
  5091  002434  5026               	movf	___ftdiv@sign,w,c
  5092  002436  0F89               	addlw	137
  5093  002438  5E25               	subwf	___ftdiv@exp,f,c
  5094  00243A  C01A  F026         	movff	___ftdiv@f1+2,___ftdiv@sign
  5095  00243E  501D               	movf	___ftdiv@f2+2,w,c
  5096  002440  1A26               	xorwf	___ftdiv@sign,f,c
  5097  002442  0E80               	movlw	128
  5098  002444  1626               	andwf	___ftdiv@sign,f,c
  5099  002446  8E19               	bsf	___ftdiv@f1+1,7,c
  5100  002448  0EFF               	movlw	255
  5101  00244A  1618               	andwf	___ftdiv@f1,f,c
  5102  00244C  0EFF               	movlw	255
  5103  00244E  1619               	andwf	___ftdiv@f1+1,f,c
  5104  002450  0E00               	movlw	0
  5105  002452  161A               	andwf	___ftdiv@f1+2,f,c
  5106  002454  8E1C               	bsf	___ftdiv@f2+1,7,c
  5107  002456  0EFF               	movlw	255
  5108  002458  161B               	andwf	___ftdiv@f2,f,c
  5109  00245A  0EFF               	movlw	255
  5110  00245C  161C               	andwf	___ftdiv@f2+1,f,c
  5111  00245E  0E00               	movlw	0
  5112  002460  161D               	andwf	___ftdiv@f2+2,f,c
  5113  002462  0E18               	movlw	24
  5114  002464  6E21               	movwf	___ftdiv@cntr,c
  5115  002466  D000               	goto	l2507
  5116  002468                     l2507:
  5117  002468  90D8               	bcf	status,0,c
  5118  00246A  3622               	rlcf	___ftdiv@f3,f,c
  5119  00246C  3623               	rlcf	___ftdiv@f3+1,f,c
  5120  00246E  3624               	rlcf	___ftdiv@f3+2,f,c
  5121  002470  501B               	movf	___ftdiv@f2,w,c
  5122  002472  5C18               	subwf	___ftdiv@f1,w,c
  5123  002474  501C               	movf	___ftdiv@f2+1,w,c
  5124  002476  5819               	subwfb	___ftdiv@f1+1,w,c
  5125  002478  501D               	movf	___ftdiv@f2+2,w,c
  5126  00247A  581A               	subwfb	___ftdiv@f1+2,w,c
  5127  00247C  A0D8               	btfss	status,0,c
  5128  00247E  D007               	goto	l600
  5129  002480  501B               	movf	___ftdiv@f2,w,c
  5130  002482  5E18               	subwf	___ftdiv@f1,f,c
  5131  002484  501C               	movf	___ftdiv@f2+1,w,c
  5132  002486  5A19               	subwfb	___ftdiv@f1+1,f,c
  5133  002488  501D               	movf	___ftdiv@f2+2,w,c
  5134  00248A  5A1A               	subwfb	___ftdiv@f1+2,f,c
  5135  00248C  8022               	bsf	___ftdiv@f3,0,c
  5136  00248E                     l600:
  5137  00248E  90D8               	bcf	status,0,c
  5138  002490  3618               	rlcf	___ftdiv@f1,f,c
  5139  002492  3619               	rlcf	___ftdiv@f1+1,f,c
  5140  002494  361A               	rlcf	___ftdiv@f1+2,f,c
  5141  002496  2E21               	decfsz	___ftdiv@cntr,f,c
  5142  002498  D7E7               	goto	l2507
  5143  00249A  D000               	goto	l2517
  5144  00249C                     l2517:
  5145  00249C  C022  F001         	movff	___ftdiv@f3,___ftpack@arg
  5146  0024A0  C023  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5147  0024A4  C024  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5148  0024A8  C025  F004         	movff	___ftdiv@exp,___ftpack@exp
  5149  0024AC  C026  F005         	movff	___ftdiv@sign,___ftpack@sign
  5150  0024B0  EC62  F012         	call	___ftpack	;wreg free
  5151  0024B4  C001  F018         	movff	?___ftpack,?___ftdiv
  5152  0024B8  C002  F019         	movff	?___ftpack+1,?___ftdiv+1
  5153  0024BC  C003  F01A         	movff	?___ftpack+2,?___ftdiv+2
  5154  0024C0  D000               	goto	l597
  5155  0024C2                     l597:
  5156  0024C2  0012               	return		;funcret
  5157  0024C4                     __end_of___ftdiv:
  5158                           	opt stack 0
  5159                           tblptru	equ	0xFF8
  5160                           tblptrh	equ	0xFF7
  5161                           tblptrl	equ	0xFF6
  5162                           tablat	equ	0xFF5
  5163                           prodh	equ	0xFF4
  5164                           prodl	equ	0xFF3
  5165                           postinc0	equ	0xFEE
  5166                           wreg	equ	0xFE8
  5167                           postdec1	equ	0xFE5
  5168                           plusw1	equ	0xFE3
  5169                           fsr1l	equ	0xFE1
  5170                           indf2	equ	0xFDF
  5171                           postinc2	equ	0xFDE
  5172                           postdec2	equ	0xFDD
  5173                           plusw2	equ	0xFDB
  5174                           fsr2h	equ	0xFDA
  5175                           fsr2l	equ	0xFD9
  5176                           status	equ	0xFD8
  5177                           
  5178 ;; *************** function ___ftpack *****************
  5179 ;; Defined at:
  5180 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  5181 ;; Parameters:    Size  Location     Type
  5182 ;;  arg             3    0[COMRAM] unsigned um
  5183 ;;  exp             1    3[COMRAM] unsigned char 
  5184 ;;  sign            1    4[COMRAM] unsigned char 
  5185 ;; Auto vars:     Size  Location     Type
  5186 ;;		None
  5187 ;; Return value:  Size  Location     Type
  5188 ;;                  3    0[COMRAM] float 
  5189 ;; Registers used:
  5190 ;;		wreg, status,2, status,0
  5191 ;; Tracked objects:
  5192 ;;		On entry : 0/0
  5193 ;;		On exit  : 0/0
  5194 ;;		Unchanged: 0/0
  5195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5196 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5198 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5199 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5200 ;;Total ram usage:        8 bytes
  5201 ;; Hardware stack levels used:    1
  5202 ;; This function calls:
  5203 ;;		Nothing
  5204 ;; This function is called by:
  5205 ;;		___ftadd
  5206 ;;		___ftdiv
  5207 ;;		___ftmul
  5208 ;;		___lltoft
  5209 ;;		___lwtoft
  5210 ;; This function uses a non-reentrant model
  5211 ;;
  5212                           
  5213                           	psect	text22
  5214  0024C4                     __ptext22:
  5215                           	opt stack 0
  5216  0024C4                     ___ftpack:
  5217                           	opt stack 27
  5218                           
  5219                           ;incstack = 0
  5220  0024C4  5004               	movf	___ftpack@exp,w,c
  5221  0024C6  B4D8               	btfsc	status,2,c
  5222  0024C8  D005               	goto	l1707
  5223  0024CA  5001               	movf	___ftpack@arg,w,c
  5224  0024CC  1002               	iorwf	___ftpack@arg+1,w,c
  5225  0024CE  1003               	iorwf	___ftpack@arg+2,w,c
  5226  0024D0  A4D8               	btfss	status,2,c
  5227  0024D2  D00E               	goto	l1713
  5228  0024D4                     l1707:
  5229  0024D4  0E00               	movlw	0
  5230  0024D6  6E01               	movwf	?___ftpack,c
  5231  0024D8  0E00               	movlw	0
  5232  0024DA  6E02               	movwf	?___ftpack+1,c
  5233  0024DC  0E00               	movlw	0
  5234  0024DE  6E03               	movwf	?___ftpack+2,c
  5235  0024E0  D053               	goto	l525
  5236  0024E2  D006               	goto	l1713
  5237  0024E4                     l1711:
  5238  0024E4  2A04               	incf	___ftpack@exp,f,c
  5239  0024E6  90D8               	bcf	status,0,c
  5240  0024E8  3203               	rrcf	___ftpack@arg+2,f,c
  5241  0024EA  3202               	rrcf	___ftpack@arg+1,f,c
  5242  0024EC  3201               	rrcf	___ftpack@arg,f,c
  5243  0024EE  D000               	goto	l1713
  5244  0024F0                     l1713:
  5245  0024F0  0E00               	movlw	0
  5246  0024F2  1401               	andwf	___ftpack@arg,w,c
  5247  0024F4  6E06               	movwf	??___ftpack& (0+255),c
  5248  0024F6  0E00               	movlw	0
  5249  0024F8  1402               	andwf	___ftpack@arg+1,w,c
  5250  0024FA  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5251  0024FC  0EFE               	movlw	254
  5252  0024FE  1403               	andwf	___ftpack@arg+2,w,c
  5253  002500  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5254  002502  5006               	movf	??___ftpack,w,c
  5255  002504  1007               	iorwf	??___ftpack+1,w,c
  5256  002506  1008               	iorwf	??___ftpack+2,w,c
  5257  002508  B4D8               	btfsc	status,2,c
  5258  00250A  D00E               	goto	l1719
  5259  00250C  D7EB               	goto	l1711
  5260  00250E  D00C               	goto	l1719
  5261  002510                     l1715:
  5262  002510  2A04               	incf	___ftpack@exp,f,c
  5263  002512  0E01               	movlw	1
  5264  002514  2601               	addwf	___ftpack@arg,f,c
  5265  002516  0E00               	movlw	0
  5266  002518  2202               	addwfc	___ftpack@arg+1,f,c
  5267  00251A  0E00               	movlw	0
  5268  00251C  2203               	addwfc	___ftpack@arg+2,f,c
  5269  00251E  90D8               	bcf	status,0,c
  5270  002520  3203               	rrcf	___ftpack@arg+2,f,c
  5271  002522  3202               	rrcf	___ftpack@arg+1,f,c
  5272  002524  3201               	rrcf	___ftpack@arg,f,c
  5273  002526  D000               	goto	l1719
  5274  002528                     l1719:
  5275  002528  0E00               	movlw	0
  5276  00252A  1401               	andwf	___ftpack@arg,w,c
  5277  00252C  6E06               	movwf	??___ftpack& (0+255),c
  5278  00252E  0E00               	movlw	0
  5279  002530  1402               	andwf	___ftpack@arg+1,w,c
  5280  002532  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5281  002534  0EFF               	movlw	255
  5282  002536  1403               	andwf	___ftpack@arg+2,w,c
  5283  002538  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5284  00253A  5006               	movf	??___ftpack,w,c
  5285  00253C  1007               	iorwf	??___ftpack+1,w,c
  5286  00253E  1008               	iorwf	??___ftpack+2,w,c
  5287  002540  B4D8               	btfsc	status,2,c
  5288  002542  D008               	goto	l1723
  5289  002544  D7E5               	goto	l1715
  5290  002546  D006               	goto	l1723
  5291  002548                     l1721:
  5292  002548  0604               	decf	___ftpack@exp,f,c
  5293  00254A  90D8               	bcf	status,0,c
  5294  00254C  3601               	rlcf	___ftpack@arg,f,c
  5295  00254E  3602               	rlcf	___ftpack@arg+1,f,c
  5296  002550  3603               	rlcf	___ftpack@arg+2,f,c
  5297  002552  D000               	goto	l1723
  5298  002554                     l1723:
  5299  002554  BE02               	btfsc	___ftpack@arg+1,7,c
  5300  002556  D004               	goto	l536
  5301  002558  0E02               	movlw	2
  5302  00255A  6004               	cpfslt	___ftpack@exp,c
  5303  00255C  D7F5               	goto	l1721
  5304  00255E  D000               	goto	l536
  5305  002560                     l536:
  5306  002560  B004               	btfsc	___ftpack@exp,0,c
  5307  002562  D002               	goto	l1729
  5308  002564  9E02               	bcf	___ftpack@arg+1,7,c
  5309  002566  D000               	goto	l1729
  5310  002568                     l1729:
  5311  002568  90D8               	bcf	status,0,c
  5312  00256A  3204               	rrcf	___ftpack@exp,f,c
  5313  00256C  5004               	movf	___ftpack@exp,w,c
  5314  00256E  1203               	iorwf	___ftpack@arg+2,f,c
  5315  002570  5005               	movf	___ftpack@sign,w,c
  5316  002572  B4D8               	btfsc	status,2,c
  5317  002574  D002               	goto	l1735
  5318  002576  8E03               	bsf	___ftpack@arg+2,7,c
  5319  002578  D000               	goto	l1735
  5320  00257A                     l1735:
  5321  00257A  C001  F001         	movff	___ftpack@arg,?___ftpack
  5322  00257E  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5323  002582  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5324  002586  D000               	goto	l525
  5325  002588                     l525:
  5326  002588  0012               	return		;funcret
  5327  00258A                     __end_of___ftpack:
  5328                           	opt stack 0
  5329                           tblptru	equ	0xFF8
  5330                           tblptrh	equ	0xFF7
  5331                           tblptrl	equ	0xFF6
  5332                           tablat	equ	0xFF5
  5333                           prodh	equ	0xFF4
  5334                           prodl	equ	0xFF3
  5335                           postinc0	equ	0xFEE
  5336                           wreg	equ	0xFE8
  5337                           postdec1	equ	0xFE5
  5338                           plusw1	equ	0xFE3
  5339                           fsr1l	equ	0xFE1
  5340                           indf2	equ	0xFDF
  5341                           postinc2	equ	0xFDE
  5342                           postdec2	equ	0xFDD
  5343                           plusw2	equ	0xFDB
  5344                           fsr2h	equ	0xFDA
  5345                           fsr2l	equ	0xFD9
  5346                           status	equ	0xFD8
  5347                           
  5348 ;; *************** function _Select_ADC_Channel *****************
  5349 ;; Defined at:
  5350 ;;		line 74 in file "Lab6pA.c"
  5351 ;; Parameters:    Size  Location     Type
  5352 ;;  channel         1    wreg     unsigned char 
  5353 ;; Auto vars:     Size  Location     Type
  5354 ;;  channel         1    0[COMRAM] unsigned char 
  5355 ;; Return value:  Size  Location     Type
  5356 ;;		None               void
  5357 ;; Registers used:
  5358 ;;		wreg, status,2, status,0, prodl, prodh
  5359 ;; Tracked objects:
  5360 ;;		On entry : 0/0
  5361 ;;		On exit  : 0/0
  5362 ;;		Unchanged: 0/0
  5363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5365 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5367 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5368 ;;Total ram usage:        1 bytes
  5369 ;; Hardware stack levels used:    1
  5370 ;; This function calls:
  5371 ;;		Nothing
  5372 ;; This function is called by:
  5373 ;;		_main
  5374 ;; This function uses a non-reentrant model
  5375 ;;
  5376                           
  5377                           	psect	text23
  5378  002A5E                     __ptext23:
  5379                           	opt stack 0
  5380  002A5E                     _Select_ADC_Channel:
  5381                           	opt stack 30
  5382                           
  5383                           ;incstack = 0
  5384                           ;Select_ADC_Channel@channel stored from wreg
  5385  002A5E  6E01               	movwf	Select_ADC_Channel@channel,c
  5386                           
  5387                           ;Lab6pA.c: 76: ADCON0 = channel *4 + 1;
  5388  002A60  5001               	movf	Select_ADC_Channel@channel,w,c
  5389  002A62  0D04               	mullw	4
  5390  002A64  28F3               	incf	prodl,w,c
  5391  002A66  6EC2               	movwf	4034,c	;volatile
  5392  002A68  0012               	return		;funcret
  5393  002A6A                     __end_of_Select_ADC_Channel:
  5394                           	opt stack 0
  5395                           tblptru	equ	0xFF8
  5396                           tblptrh	equ	0xFF7
  5397                           tblptrl	equ	0xFF6
  5398                           tablat	equ	0xFF5
  5399                           prodh	equ	0xFF4
  5400                           prodl	equ	0xFF3
  5401                           postinc0	equ	0xFEE
  5402                           wreg	equ	0xFE8
  5403                           postdec1	equ	0xFE5
  5404                           plusw1	equ	0xFE3
  5405                           fsr1l	equ	0xFE1
  5406                           indf2	equ	0xFDF
  5407                           postinc2	equ	0xFDE
  5408                           postdec2	equ	0xFDD
  5409                           plusw2	equ	0xFDB
  5410                           fsr2h	equ	0xFDA
  5411                           fsr2l	equ	0xFD9
  5412                           status	equ	0xFD8
  5413                           
  5414 ;; *************** function _Init_UART *****************
  5415 ;; Defined at:
  5416 ;;		line 22 in file "Lab6pA.c"
  5417 ;; Parameters:    Size  Location     Type
  5418 ;;		None
  5419 ;; Auto vars:     Size  Location     Type
  5420 ;;		None
  5421 ;; Return value:  Size  Location     Type
  5422 ;;		None               void
  5423 ;; Registers used:
  5424 ;;		wreg, status,2, cstack
  5425 ;; Tracked objects:
  5426 ;;		On entry : 0/0
  5427 ;;		On exit  : 0/0
  5428 ;;		Unchanged: 0/0
  5429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5434 ;;Total ram usage:        0 bytes
  5435 ;; Hardware stack levels used:    1
  5436 ;; Hardware stack levels required when called:    1
  5437 ;; This function calls:
  5438 ;;		_OpenUSART
  5439 ;; This function is called by:
  5440 ;;		_main
  5441 ;; This function uses a non-reentrant model
  5442 ;;
  5443                           
  5444                           	psect	text24
  5445  002A2E                     __ptext24:
  5446                           	opt stack 0
  5447  002A2E                     _Init_UART:
  5448                           	opt stack 29
  5449                           
  5450                           ;Lab6pA.c: 24: OpenUSART (0b01111111 & 0b10111111 &
  5451                           ;Lab6pA.c: 25: 0b11111110 & 0b11111101 & 0b11111111 &
  5452                           ;Lab6pA.c: 26: 0b11111111, 25);
  5453                           
  5454                           ;incstack = 0
  5455  002A2E  0E00               	movlw	0
  5456  002A30  6E02               	movwf	OpenUSART@spbrg+1,c
  5457  002A32  0E19               	movlw	25
  5458  002A34  6E01               	movwf	OpenUSART@spbrg,c
  5459  002A36  0E3C               	movlw	60
  5460  002A38  EC1A  F014         	call	_OpenUSART
  5461                           
  5462                           ;Lab6pA.c: 27: OSCCON = 0x60;
  5463  002A3C  0E60               	movlw	96
  5464  002A3E  6ED3               	movwf	4051,c	;volatile
  5465  002A40  0012               	return		;funcret
  5466  002A42                     __end_of_Init_UART:
  5467                           	opt stack 0
  5468                           tblptru	equ	0xFF8
  5469                           tblptrh	equ	0xFF7
  5470                           tblptrl	equ	0xFF6
  5471                           tablat	equ	0xFF5
  5472                           prodh	equ	0xFF4
  5473                           prodl	equ	0xFF3
  5474                           postinc0	equ	0xFEE
  5475                           wreg	equ	0xFE8
  5476                           postdec1	equ	0xFE5
  5477                           plusw1	equ	0xFE3
  5478                           fsr1l	equ	0xFE1
  5479                           indf2	equ	0xFDF
  5480                           postinc2	equ	0xFDE
  5481                           postdec2	equ	0xFDD
  5482                           plusw2	equ	0xFDB
  5483                           fsr2h	equ	0xFDA
  5484                           fsr2l	equ	0xFD9
  5485                           status	equ	0xFD8
  5486                           
  5487 ;; *************** function _OpenUSART *****************
  5488 ;; Defined at:
  5489 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  5490 ;; Parameters:    Size  Location     Type
  5491 ;;  config          1    wreg     unsigned char 
  5492 ;;  spbrg           2    0[COMRAM] unsigned int 
  5493 ;; Auto vars:     Size  Location     Type
  5494 ;;  config          1    2[COMRAM] unsigned char 
  5495 ;; Return value:  Size  Location     Type
  5496 ;;		None               void
  5497 ;; Registers used:
  5498 ;;		wreg, status,2
  5499 ;; Tracked objects:
  5500 ;;		On entry : 0/0
  5501 ;;		On exit  : 0/0
  5502 ;;		Unchanged: 0/0
  5503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5504 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5505 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5507 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5508 ;;Total ram usage:        3 bytes
  5509 ;; Hardware stack levels used:    1
  5510 ;; This function calls:
  5511 ;;		Nothing
  5512 ;; This function is called by:
  5513 ;;		_Init_UART
  5514 ;; This function uses a non-reentrant model
  5515 ;;
  5516                           
  5517                           	psect	text25
  5518  002834                     __ptext25:
  5519                           	opt stack 0
  5520  002834                     _OpenUSART:
  5521                           	opt stack 29
  5522                           
  5523                           ;incstack = 0
  5524                           ;OpenUSART@config stored from wreg
  5525  002834  6E03               	movwf	OpenUSART@config,c
  5526  002836  0E00               	movlw	0
  5527  002838  6EAC               	movwf	4012,c	;volatile
  5528  00283A  0E00               	movlw	0
  5529  00283C  6EAB               	movwf	4011,c	;volatile
  5530  00283E  A003               	btfss	OpenUSART@config,0,c
  5531  002840  D002               	goto	l1949
  5532  002842  88AC               	bsf	4012,4,c	;volatile
  5533  002844  D000               	goto	l1949
  5534  002846                     l1949:
  5535  002846  A203               	btfss	OpenUSART@config,1,c
  5536  002848  D003               	goto	l1953
  5537  00284A  8CAC               	bsf	4012,6,c	;volatile
  5538  00284C  8CAB               	bsf	4011,6,c	;volatile
  5539  00284E  D000               	goto	l1953
  5540  002850                     l1953:
  5541  002850  A403               	btfss	OpenUSART@config,2,c
  5542  002852  D002               	goto	l1957
  5543  002854  8EAC               	bsf	4012,7,c	;volatile
  5544  002856  D000               	goto	l1957
  5545  002858                     l1957:
  5546  002858  A603               	btfss	OpenUSART@config,3,c
  5547  00285A  D002               	goto	l188
  5548  00285C  88AB               	bsf	4011,4,c	;volatile
  5549  00285E  D002               	goto	l1961
  5550  002860                     l188:
  5551  002860  8AAB               	bsf	4011,5,c	;volatile
  5552  002862  D000               	goto	l1961
  5553  002864                     l1961:
  5554  002864  B803               	btfsc	OpenUSART@config,4,c
  5555  002866  84AC               	bsf	4012,2,c	;volatile
  5556  002868  989E               	bcf	3998,4,c	;volatile
  5557  00286A  AA03               	btfss	OpenUSART@config,5,c
  5558  00286C  D002               	goto	l1969
  5559  00286E  86AB               	bsf	4011,3,c	;volatile
  5560  002870  D000               	goto	l1969
  5561  002872                     l1969:
  5562  002872  AC03               	btfss	OpenUSART@config,6,c
  5563  002874  D002               	goto	l192
  5564  002876  8A9D               	bsf	3997,5,c	;volatile
  5565  002878  D001               	goto	l193
  5566  00287A                     l192:
  5567  00287A  9A9D               	bcf	3997,5,c	;volatile
  5568  00287C                     l193:
  5569  00287C  9A9E               	bcf	3998,5,c	;volatile
  5570  00287E  AE03               	btfss	OpenUSART@config,7,c
  5571  002880  D002               	goto	l194
  5572  002882  889D               	bsf	3997,4,c	;volatile
  5573  002884  D001               	goto	l195
  5574  002886                     l194:
  5575  002886  989D               	bcf	3997,4,c	;volatile
  5576  002888                     l195:
  5577  002888  C001  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  5578  00288C  5002               	movf	OpenUSART@spbrg+1,w,c
  5579  00288E  6EB0               	movwf	4016,c	;volatile
  5580  002890  8AAC               	bsf	4012,5,c	;volatile
  5581  002892  8EAB               	bsf	4011,7,c	;volatile
  5582  002894  9C94               	bcf	3988,6,c	;volatile
  5583  002896  8E94               	bsf	3988,7,c	;volatile
  5584  002898  B8AC               	btfsc	4012,4,c	;volatile
  5585  00289A  BEAC               	btfsc	4012,7,c	;volatile
  5586  00289C  D002               	goto	l197
  5587  00289E  8C94               	bsf	3988,6,c	;volatile
  5588  0028A0  D000               	goto	l197
  5589  0028A2                     l197:
  5590  0028A2  0012               	return		;funcret
  5591  0028A4                     __end_of_OpenUSART:
  5592                           	opt stack 0
  5593                           tblptru	equ	0xFF8
  5594                           tblptrh	equ	0xFF7
  5595                           tblptrl	equ	0xFF6
  5596                           tablat	equ	0xFF5
  5597                           prodh	equ	0xFF4
  5598                           prodl	equ	0xFF3
  5599                           postinc0	equ	0xFEE
  5600                           wreg	equ	0xFE8
  5601                           postdec1	equ	0xFE5
  5602                           plusw1	equ	0xFE3
  5603                           fsr1l	equ	0xFE1
  5604                           indf2	equ	0xFDF
  5605                           postinc2	equ	0xFDE
  5606                           postdec2	equ	0xFDD
  5607                           plusw2	equ	0xFDB
  5608                           fsr2h	equ	0xFDA
  5609                           fsr2l	equ	0xFD9
  5610                           status	equ	0xFD8
  5611                           
  5612 ;; *************** function _Init_ADC *****************
  5613 ;; Defined at:
  5614 ;;		line 90 in file "Lab6pA.c"
  5615 ;; Parameters:    Size  Location     Type
  5616 ;;		None
  5617 ;; Auto vars:     Size  Location     Type
  5618 ;;		None
  5619 ;; Return value:  Size  Location     Type
  5620 ;;		None               void
  5621 ;; Registers used:
  5622 ;;		wreg, status,2
  5623 ;; Tracked objects:
  5624 ;;		On entry : 0/0
  5625 ;;		On exit  : 0/0
  5626 ;;		Unchanged: 0/0
  5627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5632 ;;Total ram usage:        0 bytes
  5633 ;; Hardware stack levels used:    1
  5634 ;; This function calls:
  5635 ;;		Nothing
  5636 ;; This function is called by:
  5637 ;;		_main
  5638 ;; This function uses a non-reentrant model
  5639 ;;
  5640                           
  5641                           	psect	text26
  5642  002A50                     __ptext26:
  5643                           	opt stack 0
  5644  002A50                     _Init_ADC:
  5645                           	opt stack 30
  5646                           
  5647                           ;Lab6pA.c: 92: ADCON0 = 0x01;
  5648                           
  5649                           ;incstack = 0
  5650  002A50  0E01               	movlw	1
  5651  002A52  6EC2               	movwf	4034,c	;volatile
  5652                           
  5653                           ;Lab6pA.c: 93: ADCON1 = 0x1E;
  5654  002A54  0E1E               	movlw	30
  5655  002A56  6EC1               	movwf	4033,c	;volatile
  5656                           
  5657                           ;Lab6pA.c: 94: ADCON2=0xA9;
  5658  002A58  0EA9               	movlw	169
  5659  002A5A  6EC0               	movwf	4032,c	;volatile
  5660  002A5C  0012               	return		;funcret
  5661  002A5E                     __end_of_Init_ADC:
  5662                           	opt stack 0
  5663                           tblptru	equ	0xFF8
  5664                           tblptrh	equ	0xFF7
  5665                           tblptrl	equ	0xFF6
  5666                           tablat	equ	0xFF5
  5667                           prodh	equ	0xFF4
  5668                           prodl	equ	0xFF3
  5669                           postinc0	equ	0xFEE
  5670                           wreg	equ	0xFE8
  5671                           postdec1	equ	0xFE5
  5672                           plusw1	equ	0xFE3
  5673                           fsr1l	equ	0xFE1
  5674                           indf2	equ	0xFDF
  5675                           postinc2	equ	0xFDE
  5676                           postdec2	equ	0xFDD
  5677                           plusw2	equ	0xFDB
  5678                           fsr2h	equ	0xFDA
  5679                           fsr2l	equ	0xFD9
  5680                           status	equ	0xFD8
  5681                           
  5682 ;; *************** function _Delay_One_Sec *****************
  5683 ;; Defined at:
  5684 ;;		line 68 in file "Lab6pA.c"
  5685 ;; Parameters:    Size  Location     Type
  5686 ;;		None
  5687 ;; Auto vars:     Size  Location     Type
  5688 ;;  I               2    0[COMRAM] int 
  5689 ;; Return value:  Size  Location     Type
  5690 ;;		None               void
  5691 ;; Registers used:
  5692 ;;		wreg, status,2, status,0
  5693 ;; Tracked objects:
  5694 ;;		On entry : 0/0
  5695 ;;		On exit  : 0/0
  5696 ;;		Unchanged: 0/0
  5697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5699 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5701 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5702 ;;Total ram usage:        2 bytes
  5703 ;; Hardware stack levels used:    1
  5704 ;; This function calls:
  5705 ;;		Nothing
  5706 ;; This function is called by:
  5707 ;;		_main
  5708 ;; This function uses a non-reentrant model
  5709 ;;
  5710                           
  5711                           	psect	text27
  5712  002A0A                     __ptext27:
  5713                           	opt stack 0
  5714  002A0A                     _Delay_One_Sec:
  5715                           	opt stack 30
  5716                           
  5717                           ;Lab6pA.c: 70: for(int I=0; I <17000; I++);
  5718                           
  5719                           ;incstack = 0
  5720  002A0A  0E00               	movlw	0
  5721  002A0C  6E02               	movwf	Delay_One_Sec@I+1,c
  5722  002A0E  0E00               	movlw	0
  5723  002A10  6E01               	movwf	Delay_One_Sec@I,c
  5724  002A12                     l2467:
  5725  002A12  BE02               	btfsc	Delay_One_Sec@I+1,7,c
  5726  002A14  D008               	goto	l2471
  5727  002A16  0E68               	movlw	104
  5728  002A18  5C01               	subwf	Delay_One_Sec@I,w,c
  5729  002A1A  0E42               	movlw	66
  5730  002A1C  5802               	subwfb	Delay_One_Sec@I+1,w,c
  5731  002A1E  B0D8               	btfsc	status,0,c
  5732  002A20  D005               	goto	l69
  5733  002A22  D001               	goto	l2471
  5734  002A24  D003               	goto	l69
  5735  002A26                     l2471:
  5736  002A26  4A01               	infsnz	Delay_One_Sec@I,f,c
  5737  002A28  2A02               	incf	Delay_One_Sec@I+1,f,c
  5738  002A2A  D7F3               	goto	l2467
  5739  002A2C                     l69:
  5740  002A2C  0012               	return		;funcret
  5741  002A2E                     __end_of_Delay_One_Sec:
  5742                           	opt stack 0
  5743                           tblptru	equ	0xFF8
  5744                           tblptrh	equ	0xFF7
  5745                           tblptrl	equ	0xFF6
  5746                           tablat	equ	0xFF5
  5747                           prodh	equ	0xFF4
  5748                           prodl	equ	0xFF3
  5749                           postinc0	equ	0xFEE
  5750                           wreg	equ	0xFE8
  5751                           postdec1	equ	0xFE5
  5752                           plusw1	equ	0xFE3
  5753                           fsr1l	equ	0xFE1
  5754                           indf2	equ	0xFDF
  5755                           postinc2	equ	0xFDE
  5756                           postdec2	equ	0xFDD
  5757                           plusw2	equ	0xFDB
  5758                           fsr2h	equ	0xFDA
  5759                           fsr2l	equ	0xFD9
  5760                           status	equ	0xFD8
  5761                           tblptru	equ	0xFF8
  5762                           tblptrh	equ	0xFF7
  5763                           tblptrl	equ	0xFF6
  5764                           tablat	equ	0xFF5
  5765                           prodh	equ	0xFF4
  5766                           prodl	equ	0xFF3
  5767                           postinc0	equ	0xFEE
  5768                           wreg	equ	0xFE8
  5769                           postdec1	equ	0xFE5
  5770                           plusw1	equ	0xFE3
  5771                           fsr1l	equ	0xFE1
  5772                           indf2	equ	0xFDF
  5773                           postinc2	equ	0xFDE
  5774                           postdec2	equ	0xFDD
  5775                           plusw2	equ	0xFDB
  5776                           fsr2h	equ	0xFDA
  5777                           fsr2l	equ	0xFD9
  5778                           status	equ	0xFD8
  5779                           
  5780                           	psect	rparam
  5781  0000                     tblptru	equ	0xFF8
  5782                           tblptrh	equ	0xFF7
  5783                           tblptrl	equ	0xFF6
  5784                           tablat	equ	0xFF5
  5785                           prodh	equ	0xFF4
  5786                           prodl	equ	0xFF3
  5787                           postinc0	equ	0xFEE
  5788                           wreg	equ	0xFE8
  5789                           postdec1	equ	0xFE5
  5790                           plusw1	equ	0xFE3
  5791                           fsr1l	equ	0xFE1
  5792                           indf2	equ	0xFDF
  5793                           postinc2	equ	0xFDE
  5794                           postdec2	equ	0xFDD
  5795                           plusw2	equ	0xFDB
  5796                           fsr2h	equ	0xFDA
  5797                           fsr2l	equ	0xFD9
  5798                           status	equ	0xFD8


Data Sizes:
    Strings     14
    Constant    118
    Data        10
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    120     120
    BANK0           128     21      31
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___ftsub
    _scale->___wmul
    _fround->___wmul
    ___wmul->___awdiv
    ___ftmul->___ftpack
    ___awmod->___fttol
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___lwtoft->___ftpack
    ___ftdiv->___ftmul
    _Init_UART->_OpenUSART

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0   47247
                                              0 BANK0     21    21      0
                      _Delay_One_Sec
                           _Init_ADC
                          _Init_UART
                 _Select_ADC_Channel
                            ___awmod
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                       _get_full_ADC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              42    37      5   36901
                                             86 COMRAM    34    29      5
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3    8908
                                             58 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3    8710
                                             58 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1855
                                             52 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    3848
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1356
                                             38 COMRAM     6     2      4
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1360
                                             44 COMRAM     8     4      4
                            ___awmod (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     409
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     552
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    1868
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     477
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     374
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     517
                                             23 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3131
                                             80 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    2878
                                             68 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3      98
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     454
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _get_full_ADC                                         6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    1821
                                              8 COMRAM     3     0      3
                           ___ftpack
                       _get_full_ADC (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2212
                                             23 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1746
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _Select_ADC_Channel                                   1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     273
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Delay_One_Sec                                        2     2      0      46
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay_One_Sec
   _Init_ADC
   _Init_UART
     _OpenUSART
   _Select_ADC_Channel
   ___awmod
     ___ftmul (ARG)
       ___ftpack
     ___fttol (ARG)
       ___ftmul (ARG)
         ___ftpack
   ___ftdiv
     ___ftmul (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___ftmul
     ___ftpack
   ___fttol
     ___ftmul (ARG)
       ___ftpack
   ___lwtoft
     ___ftpack
     _get_full_ADC (ARG)
   _get_full_ADC
   _printf
     ___awdiv
       ___awmod (ARG)
         ___ftmul (ARG)
           ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
       ___ftmul (ARG)
         ___ftpack
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
           ___ftmul (ARG)
             ___ftpack
         ___awmod
           ___ftmul (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
         ___ftmul
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
               ___ftmul (ARG)
                 ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___ftpack
             ___ftmul (ARG)
               ___ftpack
           ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
           ___ftmul (ARG)
             ___ftpack
     ___ftge
     ___ftmul
       ___ftpack
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
               ___ftmul (ARG)
                 ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___ftpack
             ___ftmul (ARG)
               ___ftpack
           ___awmod
             ___ftmul (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
           ___ftmul
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___ftpack
               ___ftmul (ARG)
                 ___ftpack
             ___awmod (ARG)
               ___ftmul (ARG)
                 ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___ftpack
             ___ftmul (ARG)
               ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___ftpack
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
         ___ftmul (ARG)
           ___ftpack
       ___awmod (ARG)
         ___ftmul (ARG)
           ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
       ___ftmul (ARG)
         ___ftpack
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
         ___ftmul (ARG)
           ___ftpack
       ___awmod
         ___ftmul (ARG)
           ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
       ___ftmul
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
           ___ftmul (ARG)
             ___ftpack
         ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
         ___ftmul (ARG)
           ___ftpack
     _putch
     _scale
       ___awdiv
         ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
         ___ftmul (ARG)
           ___ftpack
       ___awmod
         ___ftmul (ARG)
           ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
       ___ftmul
         ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
           ___ftmul (ARG)
             ___ftpack
         ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
         ___ftmul (ARG)
           ___ftpack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     15      1F       5       24.2%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     78      78       1       94.5%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      97      34        0.0%
DATA                 0      0      97       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Oct 06 17:02:44 2022

                         l52 2A46                           l75 299E                           l69 2A2C  
                         l78 29BE                 ___awdiv@sign 0032          ___wmul@multiplicand 0037  
               ___ftadd@exp1 0050                 ___ftadd@exp2 004F                 ___ftadd@sign 004E  
                        l101 1CCE                          l200 2998                          l108 1A8A  
                        l153 1506                          l164 16AA                          l406 27C2  
                        l192 287A                          l600 248E                          l193 287C  
                        l194 2886                          l195 2888                          l188 2860  
                        l197 28A2                          l525 2588                          l605 20F8  
                        l614 20E8                          l623 26B4                          l607 2060  
                        l536 2560                          l608 2088                          l393 261E  
                        l650 23E0                          l580 1E00                          l484 2202  
                        l565 1D14                          l493 21F2                          l629 22FA  
                        l566 1E92                          l646 2946                          l639 29FC  
                        l719 2902                          l569 1D3E                          l597 24C2  
                        l589 1E1C                          l689 2730                          l779 29E4  
                        l699 2822                 ___awmod@sign 002C                          wreg 000FE8  
               __CFG_LVP$OFF 000000                 ___ftdiv@cntr 0021                 ___ftdiv@sign 0026  
               __CFG_WDT$OFF 000000                         l2111 20E2                         l2103 20BA  
                       l2015 1C8E                         l2007 1BCA                         l2105 20C0  
                       l2035 1880                         l2125 211A                         l2109 20D4  
                       l2053 1A66                         l2029 17D8                         l2231 2384  
                       l2151 21A0                         l2119 210A                         l2063 2008  
                       l2047 19B4                         l2039 1890                         l2233 238A  
                       l2241 23B6                         l2209 231A                         l2401 13E2  
                       l2321 10AC                         l2227 2374                         l2171 21EC  
                       l2163 21C4                         l2147 2190                         l2139 215E  
                       l2091 2096                         l2315 1090                         l2245 23CE  
                       l2237 239E                         l2165 21CA                         l2069 2026  
                       l2413 1422                         l2405 13EE                         l2341 1128  
                       l2325 10B4                         l1711 24E4                         l2239 23AC  
                       l2255 26D8                         l2159 21B4                         l2431 14F0  
                       l2423 14C8                         l2327 10D6                         l2319 10A0  
                       l1721 2548                         l1713 24F0                         l2185 2652  
                       l1801 1E3A                         l2177 291C                         l2257 26E6  
                       l2169 21DE                         l2441 1526                         l2425 14D4  
                       l2417 143E                         l2409 141E                         l1723 2554  
                       l1715 2510                         l1707 24D4                         l2507 2468  
                       l2195 26B0                         l1811 1E6C                         l2267 2720  
                       l2259 26EE                         l2283 2812                         l2275 27D6  
                       l2291 28B8                         l2099 20AA                         l2451 164C  
                       l2435 150C                         l2371 1254                         l2517 249C  
                       l2189 2684                         l2277 27E4                         l1821 2222  
                       l2453 1658                         l2445 1576                         l2429 14E2  
                       l2381 12CC                         l2373 1284                         l2365 121E  
                       l2357 11BA                         l2471 2A26                         l1735 257A  
                       l1719 2528                         l2279 27EC                         l1903 2614  
                       l1823 223C                         l2391 133C                         l2375 1294  
                       l2463 168E                         l1729 2568                         l2481 2400  
                       l1753 1D22                         l2289 28AA                         l1841 227E  
                       l2457 1666                         l2393 136A                         l2385 12F0  
                       l2369 1244                         l2537 1EBE                         l2467 2A12  
                       l2483 241A                         l1931 279C                         l1923 2774  
                       l1915 2758                         l1851 22AC                         l1827 224A  
                       l2387 12FA                         l2395 1378                         l2459 1672  
                       l1781 1DA4                         l1765 1D58                         l1925 277E  
                       l1845 2290                         l2487 2428                         l1783 1DB0  
                       l1775 1D80                         l1759 1D4C                         l1871 25A0  
                       l1927 2786                         l1935 27A8                         l1919 2766  
                       l1855 22BE                         l2399 13DE                         l2559 1FC6  
                       l1961 2864                         l1953 2850                         l1793 1DE8  
                       l1785 1DBC                         l1849 22A6                         l1795 1DF4  
                       l1787 1DC4                         l1883 25C8                         l1939 27B8  
                       l1859 22D4                         l1957 2858                         l1949 2846  
                       l1885 25D2                         l1877 25B2                         l1895 25F8  
                       l1887 25DA                         l1969 2872                         l1899 2604  
                       STR_1 1077                         u2031 1FFA                         u2051 2018  
                       u2241 230C                         u2260 2338                         u1461 1CE0  
                       u1471 1CF4                         u2600 1500                         u2440 1160  
                       u2265 2330                         u2701 2410                         u2445 1156  
                       u1671 2214                         u1691 2232                         u2731 1EA6  
               printf@tmpval 0071                         u2681 23F2                         _TRMT 007D61  
                       _main 1E94                 ___ftpack@arg 0001                 ___ftpack@exp 0004  
             ??_get_full_ADC 0003                         fsr2h 000FDA                         fsr1l 000FE1  
                       indf2 000FDF                         fsr2l 000FD9                         prodh 000FF4  
                       prodl 000FF3                         start 0000                  main@voltage 0092  
               ___ftmul@cntr 0016                 ___param_bank 000010                 ___ftmul@sign 0017  
               ___fttol@exp1 0026                 ___fttol@lval 0022                        ?_main 0001  
            __end_of___awdiv 2620              __end_of___ftadd 1E94              __end_of___awmod 27C4  
            __end_of___ftdiv 24C4              __end_of___ftneg 2A0A              __end_of___lldiv 2742  
            __end_of___ftmul 22FC              ___awdiv@divisor 002F              __end_of___llmod 2834  
            __end_of___ftsub 2948              __end_of___fttol 23E2              ___awdiv@counter 0031  
                      _RCSTA 000FAB                        _SPBRG 000FAF                        _PORTC 000F82  
                      _PORTD 000F83                        _PORTE 000F84                        _TRISA 000F92  
                      _TRISC 000F94                        _TRISD 000F95                        _TRISE 000F96  
                      _TXREG 000FAD                        _TXSTA 000FAC                 ___lltoft@exp 0011  
            __end_of_dpowers 1029                        _scale 16AC                ___ftpack@sign 0005  
                      _putch 2A42                        main@l 008F                        main@t 0091  
                      main@u 008D                 main@num_step 008A               __CFG_BOREN$OFF 000000  
                      tablat 000FF5                        plusw1 000FE3                        plusw2 000FDB  
                      status 000FD8              __initialization 2948                 __end_of_main 1FEA  
           __end_of_Init_ADC 2A5E                       ??_main 0079                ___fttol@sign1 0021  
              __activetblptr 000002         __size_of__tdiv_to_l_ 0110                       _ADCON0 000FC2  
                     _ADCON1 000FC1                       _ADCON2 000FC0             ___llmod@dividend 0001  
                     ?_scale 003B                       _ADRESH 000FC4                       _ADRESL 000FC3  
           ___awdiv@dividend 002D                       ?_putch 0001             __end_of___ftpack 258A  
           __end_of___lltoft 2904             __end_of___lwtoft 29E6                       _OSCCON 000FD3  
         __size_of_Init_UART 0014                       _SPBRGH 000FB0             __end_of__powers_ 1077  
         __size_of_OpenUSART 0070                       ___ftge 2620                       ___wmul 2972  
                  ??___awdiv 0031                    ??___ftadd 004B                    ??___awmod 002B  
                  ??___ftdiv 001E                    ??___ftneg 0004                    ??___lldiv 0009  
                  ??___ftmul 000F                    ??___llmod 0009                    ??___ftsub 0057  
                  ??___fttol 001C                       _fround 1A8C             ___awdiv@quotient 0033  
            ___awmod@divisor 0029              ___awmod@counter 002B                       _printf 1086  
      ___ftmul@f3_as_product 0013         __end_of_get_full_ADC 29C0                 __mediumconst 0000  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
                     putch@c 0001                   __accesstop 0080      __end_of__initialization 2968  
                 ___ftadd@f1 0045                   ___ftadd@f2 0048                   ___ftge@ff1 0001  
                 ___ftge@ff2 0004                ___rparam_used 000001                   ___ftdiv@f1 0018  
                 ___ftdiv@f2 001B                   ___ftdiv@f3 0022                   ___ftneg@f1 0001  
                 ___ftmul@f1 0009                   ___ftmul@f2 000C                   ___ftsub@f1 0051  
                 ___ftsub@f2 0054                   ___fttol@f1 0018               __pcstackCOMRAM 0001  
               __pidataBANK0 2A6A                   ___lltoft@c 0009                __end_of_scale 1A8C  
              __end_of_putch 2A50            __end_of_Init_UART 2A42                   ___lwtoft@c 0009  
                 __div_to_l_ 20FA            __end_of_OpenUSART 28A4              __div_to_l_@exp1 000C  
            __div_to_l_@cntr 000B                      ??_scale 003E              __div_to_l_@quot 0007  
                    ??_putch 0001                    ?_Init_ADC 0001               Delay_One_Sec@I 0001  
 __end_of_Select_ADC_Channel 2A6A                __div_to_l_@f1 0001                __div_to_l_@f2 0004  
                    ?___ftge 0001                      ?___wmul 0035       __size_of_Delay_One_Sec 0024  
                    ?_fround 003B                    ?___ftpack 0001                      ?_printf 0057  
  Select_ADC_Channel@channel 0001                    ?___lltoft 0009                    ?___lwtoft 0009  
                 ??_Init_ADC 0001            __end_of__npowers_ 1050                      __Hparam 0000  
                 _scale$1091 003E                      __Lparam 0000              __size_of___ftge 0096  
                    ___awdiv 258A                      ___ftadd 1CD0                      ___awmod 2742  
                    ___ftdiv 23E2                      ___ftneg 29E6                      ___lldiv 26B6  
            __size_of___wmul 0028                      ___ftmul 2204                      ___llmod 27C4  
                    ___ftsub 2904                      ___fttol 22FC        __size_of_get_full_ADC 0026  
               __psmallconst 1000                      __pcinit 2948                   ??___ftpack 0006  
            __size_of_fround 0244                      __ramtop 1000                   ??___lltoft 000D  
                    __ptext0 1E94                      __ptext1 1086                      __ptext2 16AC  
                    __ptext3 2A42                      __ptext4 1A8C                      __ptext5 2972  
                    __ptext6 2204                      __ptext7 2742                      __ptext8 258A  
                    __ptext9 1FEA              __size_of_printf 0626                   ??___lwtoft 000C  
                ?__div_to_l_ 0001                      _dpowers 1001             ___awmod@dividend 0027  
       end_of_initialization 2968                _Delay_One_Sec 2A0A                __Lmediumconst 0000  
               _get_full_ADC 299A              ___lldiv@divisor 0005              ___lldiv@counter 000D  
                  _RCSTAbits 000FAB                      printf@c 0078                      printf@f 0057  
                    postdec1 000FE5                      postdec2 000FDD                      postinc0 000FEE  
                    postinc2 000FDE               __tdiv_to_l_@f1 0001               __tdiv_to_l_@f2 0004  
              ??__tdiv_to_l_ 0007                    _PORTDbits 000F83                    _TRISCbits 000F94  
             ?_Delay_One_Sec 0001                  ___ftdiv@exp 0025                    _TXSTAbits 000FAC  
         get_full_ADC@result 0005          __size_of__div_to_l_ 010A                  ___ftmul@exp 0012  
             __end_of___ftge 26B6               __end_of___wmul 299A               __end_of_fround 1CD0  
             __end_of_printf 16AC          start_initialization 2948                    _Init_UART 2A2E  
        __end_of__tdiv_to_l_ 20FA                    _OpenUSART 2834              ___llmod@divisor 0005  
           __CFG_OSC$INTIO67 000000            __size_of_Init_ADC 000E              ___llmod@counter 0009  
                   ??___ftge 0007                     ??___wmul 0039                  __pdataBANK0 0095  
         _Select_ADC_Channel 2A5E                     ??_fround 003E                     ??_printf 005C  
                 fround@prec 0044            __size_of___ftpack 00C6          ?_Select_ADC_Channel 0001  
          __size_of___lltoft 0060                   ?_Init_UART 0001            __size_of___lwtoft 0026  
              __pcstackBANK0 0080              ??_Delay_One_Sec 0001                   ?_OpenUSART 0001  
       ??_Select_ADC_Channel 0001                     ?___awdiv 002D                     ?___ftadd 0045  
                   ?___awmod 0027                     ?___ftdiv 0018                     ?___ftneg 0001  
                   ?___lldiv 0001                     ?___ftmul 0009                     ?___llmod 0001  
                   ?___ftsub 0051                    __npowers_ 1029                     ?___fttol 0018  
                __tdiv_to_l_ 1FEA                 ??__div_to_l_ 0007                  __smallconst 1000  
             __size_of_scale 03E0               __size_of_putch 000E               ___wmul@product 0039  
                   _PIE1bits 000F9D                     _PIR1bits 000F9E           __end_of__div_to_l_ 2204  
                  main@F4279 0095                   _ADCON0bits 000FC2            ___wmul@multiplier 0035  
                 printf@flag 0067                   printf@fval 0075                   printf@prec 0069  
                ??_Init_UART 0004                    copy_data0 295C                     _Init_ADC 2A50  
                ??_OpenUSART 0003              OpenUSART@config 0003                     __Hrparam 0000  
                   __Lrparam 0000             __size_of___awdiv 0096             __size_of___ftadd 01C4  
           __size_of___awmod 0082             __size_of___ftdiv 00E2             __size_of___ftneg 0024  
           __size_of___lldiv 008C             __size_of___ftmul 00F8             __size_of___llmod 0070  
           __size_of___ftsub 0044             __size_of___fttol 00E6                     ___ftpack 24C4  
                _fround$1090 003E                  _fround$1089 0041                     ___lltoft 28A4  
                   ___lwtoft 29C0                     __ptext10 20FA                     __ptext11 28A4  
                   __ptext20 29C0                     __ptext12 27C4                     __ptext21 23E2  
                   __ptext13 26B6                     __ptext22 24C4                     __ptext14 22FC  
                   __ptext23 2A5E                     __ptext15 2904                     __ptext24 2A2E  
                   __ptext16 1CD0                     __ptext25 2834                     __ptext17 29E6  
                   __ptext26 2A50                     __ptext18 2620                     __ptext27 2A0A  
                   __ptext19 299A                     __powers_ 1050                __size_of_main 0156  
                  printf@exp 006F                    printf@val 006B               OpenUSART@spbrg 0001  
                   scale@scl 0041             __tdiv_to_l_@exp1 000F             __tdiv_to_l_@cntr 000E  
           __tdiv_to_l_@quot 000A             ___lldiv@dividend 0001                     printf@ap 0065  
               ?__tdiv_to_l_ 0001                  _printf$1092 0062             ___lldiv@quotient 0009  
               main@LED_7seg 0080        __end_of_Delay_One_Sec 2A2E                ?_get_full_ADC 0001  
__size_of_Select_ADC_Channel 000C  
