

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Oct 06 18:27:16 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    43  0000                     
    44                           	psect	idataBANK0
    45  002C40                     __pidataBANK0:
    46                           	opt stack 0
    47                           
    48                           ;initializer for main@F4283
    49  002C40  01                 	db	1
    50  002C41  4F                 	db	79
    51  002C42  12                 	db	18
    52  002C43  06                 	db	6
    53  002C44  4C                 	db	76
    54  002C45  24                 	db	36
    55  002C46  20                 	db	32
    56  002C47  0F                 	db	15
    57  002C48  00                 	db	0
    58  002C49  04                 	db	4
    59                           
    60                           	psect	smallconst
    61  001000                     __psmallconst:
    62                           	opt stack 0
    63  001000  00                 	db	0
    64  001001                     _dpowers:
    65                           	opt stack 0
    66  001001  0001               	dw	1
    67  001003  0000               	dw	0
    68  001005  000A               	dw	10
    69  001007  0000               	dw	0
    70  001009  0064               	dw	100
    71  00100B  0000               	dw	0
    72  00100D  03E8               	dw	1000
    73  00100F  0000               	dw	0
    74  001011  2710               	dw	10000
    75  001013  0000               	dw	0
    76  001015  86A0               	dw	34464
    77  001017  0001               	dw	1
    78  001019  4240               	dw	16960
    79  00101B  000F               	dw	15
    80  00101D  9680               	dw	38528
    81  00101F  0098               	dw	152
    82  001021  E100               	dw	57600
    83  001023  05F5               	dw	1525
    84  001025  CA00               	dw	51712
    85  001027  3B9A               	dw	15258
    86  001029                     __end_of_dpowers:
    87                           	opt stack 0
    88  001029                     __npowers_:
    89                           	opt stack 0
    90  001029  00                 	db	0
    91  00102A  80                 	db	128
    92  00102B  3F                 	db	63
    93  00102C  CD                 	db	205
    94  00102D  CC                 	db	204
    95  00102E  3D                 	db	61
    96  00102F  D7                 	db	215
    97  001030  23                 	db	35
    98  001031  3C                 	db	60
    99  001032  12                 	db	18
   100  001033  83                 	db	131
   101  001034  3A                 	db	58
   102  001035  B7                 	db	183
   103  001036  D1                 	db	209
   104  001037  38                 	db	56
   105  001038  C6                 	db	198
   106  001039  27                 	db	39
   107  00103A  37                 	db	55
   108  00103B  38                 	db	56
   109  00103C  86                 	db	134
   110  00103D  35                 	db	53
   111  00103E  C0                 	db	192
   112  00103F  D6                 	db	214
   113  001040  33                 	db	51
   114  001041  CC                 	db	204
   115  001042  2B                 	db	43
   116  001043  32                 	db	50
   117  001044  70                 	db	112
   118  001045  89                 	db	137
   119  001046  30                 	db	48
   120  001047  E7                 	db	231
   121  001048  DB                 	db	219
   122  001049  2E                 	db	46
   123  00104A  E5                 	db	229
   124  00104B  3C                 	db	60
   125  00104C  1E                 	db	30
   126  00104D  42                 	db	66
   127  00104E  A2                 	db	162
   128  00104F  0D                 	db	13
   129  001050                     __end_of__npowers_:
   130                           	opt stack 0
   131  001050                     __powers_:
   132                           	opt stack 0
   133  001050  00                 	db	0
   134  001051  80                 	db	128
   135  001052  3F                 	db	63
   136  001053  00                 	db	0
   137  001054  20                 	db	32
   138  001055  41                 	db	65
   139  001056  00                 	db	0
   140  001057  C8                 	db	200
   141  001058  42                 	db	66
   142  001059  00                 	db	0
   143  00105A  7A                 	db	122
   144  00105B  44                 	db	68
   145  00105C  40                 	db	64
   146  00105D  1C                 	db	28
   147  00105E  46                 	db	70
   148  00105F  50                 	db	80
   149  001060  C3                 	db	195
   150  001061  47                 	db	71
   151  001062  24                 	db	36
   152  001063  74                 	db	116
   153  001064  49                 	db	73
   154  001065  97                 	db	151
   155  001066  18                 	db	24
   156  001067  4B                 	db	75
   157  001068  BC                 	db	188
   158  001069  BE                 	db	190
   159  00106A  4C                 	db	76
   160  00106B  6B                 	db	107
   161  00106C  6E                 	db	110
   162  00106D  4E                 	db	78
   163  00106E  03                 	db	3
   164  00106F  15                 	db	21
   165  001070  50                 	db	80
   166  001071  79                 	db	121
   167  001072  AD                 	db	173
   168  001073  60                 	db	96
   169  001074  F3                 	db	243
   170  001075  49                 	db	73
   171  001076  71                 	db	113
   172  001077                     __end_of__powers_:
   173                           	opt stack 0
   174  0000                     _ADCON0	set	4034
   175  0000                     _ADCON0bits	set	4034
   176  0000                     _ADCON1	set	4033
   177  0000                     _ADCON2	set	4032
   178  0000                     _ADRESH	set	4036
   179  0000                     _ADRESL	set	4035
   180  0000                     _CCP2CON	set	4026
   181  0000                     _CCPR2L	set	4027
   182  0000                     _OSCCON	set	4051
   183  0000                     _PIE1bits	set	3997
   184  0000                     _PIR1bits	set	3998
   185  0000                     _PORTB	set	3969
   186  0000                     _PORTBbits	set	3969
   187  0000                     _PORTC	set	3970
   188  0000                     _PORTD	set	3971
   189  0000                     _PORTDbits	set	3971
   190  0000                     _PORTE	set	3972
   191  0000                     _PR2	set	4043
   192  0000                     _RCSTA	set	4011
   193  0000                     _RCSTAbits	set	4011
   194  0000                     _SPBRG	set	4015
   195  0000                     _SPBRGH	set	4016
   196  0000                     _T2CON	set	4042
   197  0000                     _TRISA	set	3986
   198  0000                     _TRISB	set	3987
   199  0000                     _TRISC	set	3988
   200  0000                     _TRISCbits	set	3988
   201  0000                     _TRISD	set	3989
   202  0000                     _TRISE	set	3990
   203  0000                     _TXREG	set	4013
   204  0000                     _TXSTA	set	4012
   205  0000                     _TXSTAbits	set	4012
   206  0000                     _TRMT	set	32097
   207  001077                     STR_1:
   208  001077  52                 	db	82	;'R'
   209  001078  4C                 	db	76	;'L'
   210  001079  3A                 	db	58	;':'
   211  00107A  20                 	db	32
   212  00107B  25                 	db	37
   213  00107C  66                 	db	102	;'f'
   214  00107D  0D                 	db	13
   215  00107E  0A                 	db	10
   216  00107F  00                 	db	0
   217  0000                     
   218                           ; #config settings
   219  001080  00                 	db	0	; dummy byte at the end
   220  0000                     
   221                           	psect	cinit
   222  002B32                     __pcinit:
   223                           	opt stack 0
   224  002B32                     start_initialization:
   225                           	opt stack 0
   226  002B32                     __initialization:
   227                           	opt stack 0
   228                           
   229                           ; Initialize objects allocated to BANK0 (10 bytes)
   230                           ; load TBLPTR registers with __pidataBANK0
   231  002B32  0E40               	movlw	low __pidataBANK0
   232  002B34  6EF6               	movwf	tblptrl,c
   233  002B36  0E2C               	movlw	high __pidataBANK0
   234  002B38  6EF7               	movwf	tblptrh,c
   235  002B3A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   236  002B3C  6EF8               	movwf	tblptru,c
   237  002B3E  EE00  F09F         	lfsr	0,__pdataBANK0
   238  002B42  EE10 F00A          	lfsr	1,10
   239  002B46                     copy_data0:
   240  002B46  0009               	tblrd		*+
   241  002B48  CFF5 FFEE          	movff	tablat,postinc0
   242  002B4C  50E5               	movf	postdec1,w,c
   243  002B4E  50E1               	movf	fsr1l,w,c
   244  002B50  E1FA               	bnz	copy_data0
   245  002B52                     end_of_initialization:
   246                           	opt stack 0
   247  002B52                     __end_of__initialization:
   248                           	opt stack 0
   249  002B52  0E00               	movlw	low (__Lmediumconst shr (0+16))
   250  002B54  6EF8               	movwf	tblptru,c
   251  002B56  0100               	movlb	0
   252  002B58  EF44  F00D         	goto	_main	;jump to C main() function
   253                           tblptru	equ	0xFF8
   254                           tblptrh	equ	0xFF7
   255                           tblptrl	equ	0xFF6
   256                           tablat	equ	0xFF5
   257                           postinc0	equ	0xFEE
   258                           postdec1	equ	0xFE5
   259                           fsr1l	equ	0xFE1
   260                           
   261                           	psect	dataBANK0
   262  00009F                     __pdataBANK0:
   263                           	opt stack 0
   264  00009F                     main@F4283:
   265                           	opt stack 0
   266  00009F                     	ds	10
   267                           tblptru	equ	0xFF8
   268                           tblptrh	equ	0xFF7
   269                           tblptrl	equ	0xFF6
   270                           tablat	equ	0xFF5
   271                           postinc0	equ	0xFEE
   272                           postdec1	equ	0xFE5
   273                           fsr1l	equ	0xFE1
   274                           
   275                           	psect	cstackBANK0
   276  000080                     __pcstackBANK0:
   277                           	opt stack 0
   278  000080                     main@LED_7seg:
   279                           	opt stack 0
   280                           
   281                           ; 10 bytes @ 0x0
   282  000080                     	ds	10
   283  00008A                     main@num_step:
   284                           	opt stack 0
   285                           
   286                           ; 2 bytes @ 0xA
   287  00008A                     	ds	2
   288  00008C                     main@u:
   289                           	opt stack 0
   290                           
   291                           ; 2 bytes @ 0xC
   292  00008C                     	ds	2
   293  00008E                     main@l:
   294                           	opt stack 0
   295                           
   296                           ; 2 bytes @ 0xE
   297  00008E                     	ds	2
   298  000090                     main@u_300:
   299                           	opt stack 0
   300                           
   301                           ; 2 bytes @ 0x10
   302  000090                     	ds	2
   303  000092                     main@l_301:
   304                           	opt stack 0
   305                           
   306                           ; 2 bytes @ 0x12
   307  000092                     	ds	2
   308  000094                     main@voltage_mv:
   309                           	opt stack 0
   310                           
   311                           ; 3 bytes @ 0x14
   312  000094                     	ds	3
   313  000097                     main@RLint:
   314                           	opt stack 0
   315                           
   316                           ; 2 bytes @ 0x17
   317  000097                     	ds	2
   318  000099                     main@t:
   319                           	opt stack 0
   320                           
   321                           ; 1 bytes @ 0x19
   322  000099                     	ds	1
   323  00009A                     main@t_302:
   324                           	opt stack 0
   325                           
   326                           ; 1 bytes @ 0x1A
   327  00009A                     	ds	1
   328  00009B                     main@temp:
   329                           	opt stack 0
   330                           
   331                           ; 1 bytes @ 0x1B
   332  00009B                     	ds	1
   333  00009C                     main@RL:
   334                           	opt stack 0
   335                           
   336                           ; 3 bytes @ 0x1C
   337  00009C                     	ds	3
   338                           tblptru	equ	0xFF8
   339                           tblptrh	equ	0xFF7
   340                           tblptrl	equ	0xFF6
   341                           tablat	equ	0xFF5
   342                           postinc0	equ	0xFEE
   343                           postdec1	equ	0xFE5
   344                           fsr1l	equ	0xFE1
   345                           
   346                           	psect	cstackCOMRAM
   347  000001                     __pcstackCOMRAM:
   348                           	opt stack 0
   349  000001                     ?_get_full_ADC:
   350                           	opt stack 0
   351  000001                     ?___ftpack:
   352                           	opt stack 0
   353  000001                     ?___ftneg:
   354                           	opt stack 0
   355  000001                     ?__tdiv_to_l_:
   356                           	opt stack 0
   357  000001                     ?__div_to_l_:
   358                           	opt stack 0
   359  000001                     ?___lldiv:
   360                           	opt stack 0
   361  000001                     ?___llmod:
   362                           	opt stack 0
   363  000001                     putch@c:
   364                           	opt stack 0
   365  000001                     Select_ADC_Channel@channel:
   366                           	opt stack 0
   367  000001                     Delay_One_Sec@I:
   368                           	opt stack 0
   369  000001                     OpenUSART@spbrg:
   370                           	opt stack 0
   371  000001                     __div_to_l_@f1:
   372                           	opt stack 0
   373  000001                     ___ftpack@arg:
   374                           	opt stack 0
   375  000001                     __tdiv_to_l_@f1:
   376                           	opt stack 0
   377  000001                     ___ftge@ff1:
   378                           	opt stack 0
   379  000001                     ___ftneg@f1:
   380                           	opt stack 0
   381  000001                     ___lldiv@dividend:
   382                           	opt stack 0
   383  000001                     ___llmod@dividend:
   384                           	opt stack 0
   385                           
   386                           ; 4 bytes @ 0x0
   387  000001                     	ds	2
   388  000003                     ??_get_full_ADC:
   389  000003                     OpenUSART@config:
   390                           	opt stack 0
   391                           
   392                           ; 1 bytes @ 0x2
   393  000003                     	ds	1
   394  000004                     ___ftpack@exp:
   395                           	opt stack 0
   396  000004                     __div_to_l_@f2:
   397                           	opt stack 0
   398  000004                     __tdiv_to_l_@f2:
   399                           	opt stack 0
   400  000004                     ___ftge@ff2:
   401                           	opt stack 0
   402                           
   403                           ; 3 bytes @ 0x3
   404  000004                     	ds	1
   405  000005                     ___ftpack@sign:
   406                           	opt stack 0
   407  000005                     get_full_ADC@result:
   408                           	opt stack 0
   409  000005                     ___lldiv@divisor:
   410                           	opt stack 0
   411  000005                     ___llmod@divisor:
   412                           	opt stack 0
   413                           
   414                           ; 4 bytes @ 0x4
   415  000005                     	ds	1
   416  000006                     ??___ftpack:
   417                           
   418                           ; 0 bytes @ 0x5
   419  000006                     	ds	1
   420  000007                     ??__tdiv_to_l_:
   421  000007                     ??___ftge:
   422  000007                     __div_to_l_@quot:
   423                           	opt stack 0
   424                           
   425                           ; 4 bytes @ 0x6
   426  000007                     	ds	2
   427  000009                     ?___awtoft:
   428                           	opt stack 0
   429  000009                     ?___lltoft:
   430                           	opt stack 0
   431  000009                     ___llmod@counter:
   432                           	opt stack 0
   433  000009                     ___awtoft@c:
   434                           	opt stack 0
   435  000009                     ___lldiv@quotient:
   436                           	opt stack 0
   437  000009                     ___lltoft@c:
   438                           	opt stack 0
   439                           
   440                           ; 4 bytes @ 0x8
   441  000009                     	ds	1
   442  00000A                     __tdiv_to_l_@quot:
   443                           	opt stack 0
   444                           
   445                           ; 4 bytes @ 0x9
   446  00000A                     	ds	1
   447  00000B                     __div_to_l_@cntr:
   448                           	opt stack 0
   449                           
   450                           ; 1 bytes @ 0xA
   451  00000B                     	ds	1
   452  00000C                     ___awtoft@sign:
   453                           	opt stack 0
   454  00000C                     __div_to_l_@exp1:
   455                           	opt stack 0
   456                           
   457                           ; 1 bytes @ 0xB
   458  00000C                     	ds	1
   459  00000D                     ??___lltoft:
   460  00000D                     ?___ftmul:
   461                           	opt stack 0
   462  00000D                     ___lldiv@counter:
   463                           	opt stack 0
   464  00000D                     ___ftmul@f1:
   465                           	opt stack 0
   466                           
   467                           ; 3 bytes @ 0xC
   468  00000D                     	ds	1
   469  00000E                     __tdiv_to_l_@cntr:
   470                           	opt stack 0
   471                           
   472                           ; 1 bytes @ 0xD
   473  00000E                     	ds	1
   474  00000F                     __tdiv_to_l_@exp1:
   475                           	opt stack 0
   476                           
   477                           ; 1 bytes @ 0xE
   478  00000F                     	ds	1
   479  000010                     ___ftmul@f2:
   480                           	opt stack 0
   481                           
   482                           ; 3 bytes @ 0xF
   483  000010                     	ds	1
   484  000011                     ___lltoft@exp:
   485                           	opt stack 0
   486                           
   487                           ; 1 bytes @ 0x10
   488  000011                     	ds	2
   489  000013                     ??___ftmul:
   490                           
   491                           ; 0 bytes @ 0x12
   492  000013                     	ds	3
   493  000016                     ___ftmul@exp:
   494                           	opt stack 0
   495                           
   496                           ; 1 bytes @ 0x15
   497  000016                     	ds	1
   498  000017                     ___ftmul@f3_as_product:
   499                           	opt stack 0
   500                           
   501                           ; 3 bytes @ 0x16
   502  000017                     	ds	3
   503  00001A                     ___ftmul@cntr:
   504                           	opt stack 0
   505                           
   506                           ; 1 bytes @ 0x19
   507  00001A                     	ds	1
   508  00001B                     ___ftmul@sign:
   509                           	opt stack 0
   510                           
   511                           ; 1 bytes @ 0x1A
   512  00001B                     	ds	1
   513  00001C                     ?___fttol:
   514                           	opt stack 0
   515  00001C                     ___fttol@f1:
   516                           	opt stack 0
   517                           
   518                           ; 3 bytes @ 0x1B
   519  00001C                     	ds	4
   520  000020                     ??___fttol:
   521                           
   522                           ; 0 bytes @ 0x1F
   523  000020                     	ds	5
   524  000025                     ___fttol@sign1:
   525                           	opt stack 0
   526                           
   527                           ; 1 bytes @ 0x24
   528  000025                     	ds	1
   529  000026                     ___fttol@lval:
   530                           	opt stack 0
   531                           
   532                           ; 4 bytes @ 0x25
   533  000026                     	ds	4
   534  00002A                     ___fttol@exp1:
   535                           	opt stack 0
   536                           
   537                           ; 1 bytes @ 0x29
   538  00002A                     	ds	1
   539  00002B                     ?___awmod:
   540                           	opt stack 0
   541  00002B                     ___awmod@dividend:
   542                           	opt stack 0
   543                           
   544                           ; 2 bytes @ 0x2A
   545  00002B                     	ds	2
   546  00002D                     ___awmod@divisor:
   547                           	opt stack 0
   548                           
   549                           ; 2 bytes @ 0x2C
   550  00002D                     	ds	2
   551  00002F                     ___awmod@counter:
   552                           	opt stack 0
   553                           
   554                           ; 1 bytes @ 0x2E
   555  00002F                     	ds	1
   556  000030                     ___awmod@sign:
   557                           	opt stack 0
   558                           
   559                           ; 1 bytes @ 0x2F
   560  000030                     	ds	1
   561  000031                     ?___awdiv:
   562                           	opt stack 0
   563  000031                     ___awdiv@dividend:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x30
   567  000031                     	ds	2
   568  000033                     ___awdiv@divisor:
   569                           	opt stack 0
   570                           
   571                           ; 2 bytes @ 0x32
   572  000033                     	ds	2
   573  000035                     ___awdiv@counter:
   574                           	opt stack 0
   575                           
   576                           ; 1 bytes @ 0x34
   577  000035                     	ds	1
   578  000036                     ___awdiv@sign:
   579                           	opt stack 0
   580                           
   581                           ; 1 bytes @ 0x35
   582  000036                     	ds	1
   583  000037                     ___awdiv@quotient:
   584                           	opt stack 0
   585                           
   586                           ; 2 bytes @ 0x36
   587  000037                     	ds	2
   588  000039                     ?___wmul:
   589                           	opt stack 0
   590  000039                     ___wmul@multiplier:
   591                           	opt stack 0
   592                           
   593                           ; 2 bytes @ 0x38
   594  000039                     	ds	2
   595  00003B                     ___wmul@multiplicand:
   596                           	opt stack 0
   597                           
   598                           ; 2 bytes @ 0x3A
   599  00003B                     	ds	2
   600  00003D                     ___wmul@product:
   601                           	opt stack 0
   602                           
   603                           ; 2 bytes @ 0x3C
   604  00003D                     	ds	2
   605  00003F                     ?_fround:
   606                           	opt stack 0
   607  00003F                     ?_scale:
   608                           	opt stack 0
   609                           
   610                           ; 3 bytes @ 0x3E
   611  00003F                     	ds	3
   612  000042                     _fround$1187:
   613                           	opt stack 0
   614  000042                     _scale$1188:
   615                           	opt stack 0
   616                           
   617                           ; 3 bytes @ 0x41
   618  000042                     	ds	3
   619  000045                     scale@scl:
   620                           	opt stack 0
   621  000045                     _fround$1186:
   622                           	opt stack 0
   623                           
   624                           ; 3 bytes @ 0x44
   625  000045                     	ds	3
   626  000048                     fround@prec:
   627                           	opt stack 0
   628                           
   629                           ; 1 bytes @ 0x47
   630  000048                     	ds	1
   631  000049                     ?___ftadd:
   632                           	opt stack 0
   633  000049                     ___ftadd@f1:
   634                           	opt stack 0
   635                           
   636                           ; 3 bytes @ 0x48
   637  000049                     	ds	3
   638  00004C                     ___ftadd@f2:
   639                           	opt stack 0
   640                           
   641                           ; 3 bytes @ 0x4B
   642  00004C                     	ds	3
   643  00004F                     ??___ftadd:
   644                           
   645                           ; 0 bytes @ 0x4E
   646  00004F                     	ds	3
   647  000052                     ___ftadd@sign:
   648                           	opt stack 0
   649                           
   650                           ; 1 bytes @ 0x51
   651  000052                     	ds	1
   652  000053                     ___ftadd@exp2:
   653                           	opt stack 0
   654                           
   655                           ; 1 bytes @ 0x52
   656  000053                     	ds	1
   657  000054                     ___ftadd@exp1:
   658                           	opt stack 0
   659                           
   660                           ; 1 bytes @ 0x53
   661  000054                     	ds	1
   662  000055                     ?___ftdiv:
   663                           	opt stack 0
   664  000055                     ?___ftsub:
   665                           	opt stack 0
   666  000055                     ___ftdiv@f1:
   667                           	opt stack 0
   668  000055                     ___ftsub@f1:
   669                           	opt stack 0
   670                           
   671                           ; 3 bytes @ 0x54
   672  000055                     	ds	3
   673  000058                     ___ftdiv@f2:
   674                           	opt stack 0
   675  000058                     ___ftsub@f2:
   676                           	opt stack 0
   677                           
   678                           ; 3 bytes @ 0x57
   679  000058                     	ds	3
   680  00005B                     ??___ftdiv:
   681  00005B                     ?_printf:
   682                           	opt stack 0
   683  00005B                     printf@f:
   684                           	opt stack 0
   685                           
   686                           ; 2 bytes @ 0x5A
   687  00005B                     	ds	3
   688  00005E                     ___ftdiv@cntr:
   689                           	opt stack 0
   690                           
   691                           ; 1 bytes @ 0x5D
   692  00005E                     	ds	1
   693  00005F                     ___ftdiv@f3:
   694                           	opt stack 0
   695                           
   696                           ; 3 bytes @ 0x5E
   697  00005F                     	ds	1
   698  000060                     ??_printf:
   699                           
   700                           ; 0 bytes @ 0x5F
   701  000060                     	ds	2
   702  000062                     ___ftdiv@exp:
   703                           	opt stack 0
   704                           
   705                           ; 1 bytes @ 0x61
   706  000062                     	ds	1
   707  000063                     ___ftdiv@sign:
   708                           	opt stack 0
   709                           
   710                           ; 1 bytes @ 0x62
   711  000063                     	ds	3
   712  000066                     _printf$1189:
   713                           	opt stack 0
   714                           
   715                           ; 3 bytes @ 0x65
   716  000066                     	ds	3
   717  000069                     printf@ap:
   718                           	opt stack 0
   719                           
   720                           ; 2 bytes @ 0x68
   721  000069                     	ds	2
   722  00006B                     printf@flag:
   723                           	opt stack 0
   724                           
   725                           ; 2 bytes @ 0x6A
   726  00006B                     	ds	2
   727  00006D                     printf@prec:
   728                           	opt stack 0
   729                           
   730                           ; 2 bytes @ 0x6C
   731  00006D                     	ds	2
   732  00006F                     printf@val:
   733                           	opt stack 0
   734                           
   735                           ; 4 bytes @ 0x6E
   736  00006F                     	ds	4
   737  000073                     printf@exp:
   738                           	opt stack 0
   739                           
   740                           ; 2 bytes @ 0x72
   741  000073                     	ds	2
   742  000075                     printf@tmpval:
   743                           	opt stack 0
   744                           
   745                           ; 4 bytes @ 0x74
   746  000075                     	ds	4
   747  000079                     printf@fval:
   748                           	opt stack 0
   749                           
   750                           ; 3 bytes @ 0x78
   751  000079                     	ds	3
   752  00007C                     printf@c:
   753                           	opt stack 0
   754                           
   755                           ; 1 bytes @ 0x7B
   756  00007C                     	ds	1
   757  00007D                     tblptru	equ	0xFF8
   758                           tblptrh	equ	0xFF7
   759                           tblptrl	equ	0xFF6
   760                           tablat	equ	0xFF5
   761                           postinc0	equ	0xFEE
   762                           postdec1	equ	0xFE5
   763                           fsr1l	equ	0xFE1
   764                           
   765                           ; 0 bytes @ 0x7C
   766 ;;
   767 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   768 ;;
   769 ;; *************** function _main *****************
   770 ;; Defined at:
   771 ;;		line 37 in file "Lab6pB2.c"
   772 ;; Parameters:    Size  Location     Type
   773 ;;		None
   774 ;; Auto vars:     Size  Location     Type
   775 ;;  RLint           2   23[BANK0 ] int 
   776 ;;  l               2   18[BANK0 ] int 
   777 ;;  u               2   16[BANK0 ] int 
   778 ;;  t               1   26[BANK0 ] unsigned char 
   779 ;;  l               2   14[BANK0 ] int 
   780 ;;  u               2   12[BANK0 ] int 
   781 ;;  t               1   25[BANK0 ] unsigned char 
   782 ;;  RL              3   28[BANK0 ] float 
   783 ;;  voltage_mv      3   20[BANK0 ] float 
   784 ;;  num_step        2   10[BANK0 ] int 
   785 ;;  temp            1   27[BANK0 ] unsigned char 
   786 ;;  LED_7seg       10    0[BANK0 ] unsigned char [10]
   787 ;; Return value:  Size  Location     Type
   788 ;;		None               void
   789 ;; Registers used:
   790 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   791 ;; Tracked objects:
   792 ;;		On entry : 0/0
   793 ;;		On exit  : 0/0
   794 ;;		Unchanged: 0/0
   795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   797 ;;      Locals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   799 ;;      Totals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   800 ;;Total ram usage:       31 bytes
   801 ;; Hardware stack levels required when called:    4
   802 ;; This function calls:
   803 ;;		_Activate_Buzzer
   804 ;;		_Deactivate_Buzzer
   805 ;;		_Delay_One_Sec
   806 ;;		_Init_ADC
   807 ;;		_Init_UART
   808 ;;		_Select_ADC_Channel
   809 ;;		___awdiv
   810 ;;		___awmod
   811 ;;		___awtoft
   812 ;;		___ftadd
   813 ;;		___ftdiv
   814 ;;		___ftge
   815 ;;		___ftmul
   816 ;;		___ftneg
   817 ;;		___fttol
   818 ;;		_get_full_ADC
   819 ;;		_printf
   820 ;; This function is called by:
   821 ;;		Startup code after reset
   822 ;; This function uses a non-reentrant model
   823 ;;
   824                           
   825                           	psect	text0
   826  001A88                     __ptext0:
   827                           	opt stack 0
   828  001A88                     _main:
   829                           	opt stack 27
   830                           
   831                           ;Lab6pB2.c: 39: Init_UART();
   832                           
   833                           ;incstack = 0
   834  001A88  ECF9  F015         	call	_Init_UART	;wreg free
   835                           
   836                           ;Lab6pB2.c: 40: Init_ADC();
   837  001A8C  EC13  F016         	call	_Init_ADC	;wreg free
   838                           
   839                           ;Lab6pB2.c: 41: char LED_7seg[10] = {0x01,0x4F, 0x12, 0x06, 0x4C, 0x24, 0x20, 0x0F, 0x00
      +                          , 0x04};
   840  001A90  EE20  F09F         	lfsr	2,main@F4283
   841  001A94  EE10  F080         	lfsr	1,main@LED_7seg
   842  001A98  0E09               	movlw	9
   843  001A9A                     u2791:
   844  001A9A  CFDB FFE3          	movff	plusw2,plusw1
   845  001A9E  06E8               	decf	wreg,f,c
   846  001AA0  E2FC               	bc	u2791
   847                           
   848                           ;Lab6pB2.c: 43: TRISA = 0xFF;
   849  001AA2  6892               	setf	3986,c	;volatile
   850                           
   851                           ;Lab6pB2.c: 44: TRISB = 0x00;
   852  001AA4  0E00               	movlw	0
   853  001AA6  6E93               	movwf	3987,c	;volatile
   854                           
   855                           ;Lab6pB2.c: 45: TRISC = 0x00;
   856  001AA8  0E00               	movlw	0
   857  001AAA  6E94               	movwf	3988,c	;volatile
   858                           
   859                           ;Lab6pB2.c: 46: TRISD = 0x00;
   860  001AAC  0E00               	movlw	0
   861  001AAE  6E95               	movwf	3989,c	;volatile
   862                           
   863                           ;Lab6pB2.c: 47: TRISE = 0x00;
   864  001AB0  0E00               	movlw	0
   865  001AB2  6E96               	movwf	3990,c	;volatile
   866  001AB4  D000               	goto	l2634
   867  001AB6                     l2634:
   868                           
   869                           ;Lab6pB2.c: 50: {
   870                           ;Lab6pB2.c: 51: Select_ADC_Channel(2);
   871  001AB6  0E02               	movlw	2
   872  001AB8  EC1A  F016         	call	_Select_ADC_Channel
   873                           
   874                           ;Lab6pB2.c: 52: int num_step = get_full_ADC();
   875  001ABC  ECC2  F015         	call	_get_full_ADC	;wreg free
   876  001AC0  C001  F08A         	movff	?_get_full_ADC,main@num_step
   877  001AC4  C002  F08B         	movff	?_get_full_ADC+1,main@num_step+1
   878                           
   879                           ;Lab6pB2.c: 53: float voltage_mv = (num_step*4.0)/1000.0;
   880  001AC8  0E00               	movlw	0
   881  001ACA  6E10               	movwf	___ftmul@f2,c
   882  001ACC  0E80               	movlw	128
   883  001ACE  6E11               	movwf	___ftmul@f2+1,c
   884  001AD0  0E40               	movlw	64
   885  001AD2  6E12               	movwf	___ftmul@f2+2,c
   886  001AD4  C08A  F009         	movff	main@num_step,___awtoft@c
   887  001AD8  C08B  F00A         	movff	main@num_step+1,___awtoft@c+1
   888  001ADC  EC7B  F015         	call	___awtoft	;wreg free
   889  001AE0  C009  F00D         	movff	?___awtoft,___ftmul@f1
   890  001AE4  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
   891  001AE8  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
   892  001AEC  ECD9  F011         	call	___ftmul	;wreg free
   893  001AF0  C00D  F055         	movff	?___ftmul,___ftdiv@f1
   894  001AF4  C00E  F056         	movff	?___ftmul+1,___ftdiv@f1+1
   895  001AF8  C00F  F057         	movff	?___ftmul+2,___ftdiv@f1+2
   896  001AFC  0E00               	movlw	0
   897  001AFE  6E58               	movwf	___ftdiv@f2,c
   898  001B00  0E7A               	movlw	122
   899  001B02  6E59               	movwf	___ftdiv@f2+1,c
   900  001B04  0E44               	movlw	68
   901  001B06  6E5A               	movwf	___ftdiv@f2+2,c
   902  001B08  ECC8  F012         	call	___ftdiv	;wreg free
   903  001B0C  C055  F094         	movff	?___ftdiv,main@voltage_mv
   904  001B10  C056  F095         	movff	?___ftdiv+1,main@voltage_mv+1
   905  001B14  C057  F096         	movff	?___ftdiv+2,main@voltage_mv+2
   906                           
   907                           ;Lab6pB2.c: 54: float RL = (10.0 * voltage_mv) / (4.096 - voltage_mv);
   908  001B18  0E00               	movlw	0
   909  001B1A  6E10               	movwf	___ftmul@f2,c
   910  001B1C  0E20               	movlw	32
   911  001B1E  6E11               	movwf	___ftmul@f2+1,c
   912  001B20  0E41               	movlw	65
   913  001B22  6E12               	movwf	___ftmul@f2+2,c
   914  001B24  C094  F00D         	movff	main@voltage_mv,___ftmul@f1
   915  001B28  C095  F00E         	movff	main@voltage_mv+1,___ftmul@f1+1
   916  001B2C  C096  F00F         	movff	main@voltage_mv+2,___ftmul@f1+2
   917  001B30  ECD9  F011         	call	___ftmul	;wreg free
   918  001B34  C00D  F055         	movff	?___ftmul,___ftdiv@f1
   919  001B38  C00E  F056         	movff	?___ftmul+1,___ftdiv@f1+1
   920  001B3C  C00F  F057         	movff	?___ftmul+2,___ftdiv@f1+2
   921  001B40  0E12               	movlw	18
   922  001B42  6E4C               	movwf	___ftadd@f2,c
   923  001B44  0E83               	movlw	131
   924  001B46  6E4D               	movwf	___ftadd@f2+1,c
   925  001B48  0E40               	movlw	64
   926  001B4A  6E4E               	movwf	___ftadd@f2+2,c
   927  001B4C  C094  F001         	movff	main@voltage_mv,___ftneg@f1
   928  001B50  C095  F002         	movff	main@voltage_mv+1,___ftneg@f1+1
   929  001B54  C096  F003         	movff	main@voltage_mv+2,___ftneg@f1+2
   930  001B58  ECD5  F015         	call	___ftneg	;wreg free
   931  001B5C  C001  F049         	movff	?___ftneg,___ftadd@f1
   932  001B60  C002  F04A         	movff	?___ftneg+1,___ftadd@f1+1
   933  001B64  C003  F04B         	movff	?___ftneg+2,___ftadd@f1+2
   934  001B68  ECEA  F00F         	call	___ftadd	;wreg free
   935  001B6C  C049  F058         	movff	?___ftadd,___ftdiv@f2
   936  001B70  C04A  F059         	movff	?___ftadd+1,___ftdiv@f2+1
   937  001B74  C04B  F05A         	movff	?___ftadd+2,___ftdiv@f2+2
   938  001B78  ECC8  F012         	call	___ftdiv	;wreg free
   939  001B7C  C055  F09C         	movff	?___ftdiv,main@RL
   940  001B80  C056  F09D         	movff	?___ftdiv+1,main@RL+1
   941  001B84  C057  F09E         	movff	?___ftdiv+2,main@RL+2
   942                           
   943                           ;Lab6pB2.c: 56: if (RL < 10.0)
   944  001B88  C09C  F001         	movff	main@RL,___ftge@ff1
   945  001B8C  C09D  F002         	movff	main@RL+1,___ftge@ff1+1
   946  001B90  C09E  F003         	movff	main@RL+2,___ftge@ff1+2
   947  001B94  0E00               	movlw	0
   948  001B96  6E04               	movwf	___ftge@ff2,c
   949  001B98  0E20               	movlw	32
   950  001B9A  6E05               	movwf	___ftge@ff2+1,c
   951  001B9C  0E41               	movlw	65
   952  001B9E  6E06               	movwf	___ftge@ff2+2,c
   953  001BA0  ECE7  F013         	call	___ftge	;wreg free
   954  001BA4  B0D8               	btfsc	status,0,c
   955  001BA6  D05F               	goto	l2662
   956                           
   957                           ;Lab6pB2.c: 57: {
   958                           ;Lab6pB2.c: 58: int u = (int)RL;
   959  001BA8  C09C  F01C         	movff	main@RL,___fttol@f1
   960  001BAC  C09D  F01D         	movff	main@RL+1,___fttol@f1+1
   961  001BB0  C09E  F01E         	movff	main@RL+2,___fttol@f1+2
   962  001BB4  EC55  F012         	call	___fttol	;wreg free
   963  001BB8  C01C  F08C         	movff	?___fttol,main@u
   964  001BBC  C01D  F08D         	movff	?___fttol+1,main@u+1
   965                           
   966                           ;Lab6pB2.c: 59: int l = (int)(RL * 10)% 10;
   967  001BC0  0E00               	movlw	0
   968  001BC2  6E10               	movwf	___ftmul@f2,c
   969  001BC4  0E20               	movlw	32
   970  001BC6  6E11               	movwf	___ftmul@f2+1,c
   971  001BC8  0E41               	movlw	65
   972  001BCA  6E12               	movwf	___ftmul@f2+2,c
   973  001BCC  C09C  F00D         	movff	main@RL,___ftmul@f1
   974  001BD0  C09D  F00E         	movff	main@RL+1,___ftmul@f1+1
   975  001BD4  C09E  F00F         	movff	main@RL+2,___ftmul@f1+2
   976  001BD8  ECD9  F011         	call	___ftmul	;wreg free
   977  001BDC  C00D  F01C         	movff	?___ftmul,___fttol@f1
   978  001BE0  C00E  F01D         	movff	?___ftmul+1,___fttol@f1+1
   979  001BE4  C00F  F01E         	movff	?___ftmul+2,___fttol@f1+2
   980  001BE8  EC55  F012         	call	___fttol	;wreg free
   981  001BEC  C01C  F02B         	movff	?___fttol,___awmod@dividend
   982  001BF0  C01D  F02C         	movff	?___fttol+1,___awmod@dividend+1
   983  001BF4  0E00               	movlw	0
   984  001BF6  6E2E               	movwf	___awmod@divisor+1,c
   985  001BF8  0E0A               	movlw	10
   986  001BFA  6E2D               	movwf	___awmod@divisor,c
   987  001BFC  EC78  F014         	call	___awmod	;wreg free
   988  001C00  C02B  F08E         	movff	?___awmod,main@l
   989  001C04  C02C  F08F         	movff	?___awmod+1,main@l+1
   990                           
   991                           ;Lab6pB2.c: 60: PORTD = LED_7seg[l];
   992  001C08  0E80               	movlw	low main@LED_7seg
   993  001C0A  0100               	movlb	0	; () banked
   994  001C0C  258E               	addwf	main@l& (0+255),w,b
   995  001C0E  6ED9               	movwf	fsr2l,c
   996  001C10  0E00               	movlw	high main@LED_7seg
   997  001C12  0100               	movlb	0	; () banked
   998  001C14  218F               	addwfc	(main@l+1)& (0+255),w,b
   999  001C16  6EDA               	movwf	fsr2h,c
  1000  001C18  50DF               	movf	indf2,w,c
  1001  001C1A  6E83               	movwf	3971,c	;volatile
  1002                           
  1003                           ; BSR set to: 0
  1004                           ;Lab6pB2.c: 61: char t = LED_7seg[u];
  1005  001C1C  0E80               	movlw	low main@LED_7seg
  1006  001C1E  0100               	movlb	0	; () banked
  1007  001C20  258C               	addwf	main@u& (0+255),w,b
  1008  001C22  6ED9               	movwf	fsr2l,c
  1009  001C24  0E00               	movlw	high main@LED_7seg
  1010  001C26  0100               	movlb	0	; () banked
  1011  001C28  218D               	addwfc	(main@u+1)& (0+255),w,b
  1012  001C2A  6EDA               	movwf	fsr2h,c
  1013  001C2C  50DF               	movf	indf2,w,c
  1014  001C2E  0100               	movlb	0	; () banked
  1015  001C30  6F99               	movwf	main@t& (0+255),b
  1016                           
  1017                           ; BSR set to: 0
  1018                           ;Lab6pB2.c: 62: PORTC = t & 0x3F;
  1019  001C32  0100               	movlb	0	; () banked
  1020  001C34  5199               	movf	main@t& (0+255),w,b
  1021  001C36  0B3F               	andlw	63
  1022  001C38  6E82               	movwf	3970,c	;volatile
  1023                           
  1024                           ; BSR set to: 0
  1025                           ;Lab6pB2.c: 63: PORTE = 0;
  1026  001C3A  0E00               	movlw	0
  1027  001C3C  6E84               	movwf	3972,c	;volatile
  1028                           
  1029                           ; BSR set to: 0
  1030                           ;Lab6pB2.c: 64: if(t & 0x40) PORTE=2;
  1031  001C3E  0100               	movlb	0	; () banked
  1032  001C40  AD99               	btfss	main@t& (0+255),6,b
  1033  001C42  D003               	goto	l2658
  1034                           
  1035                           ; BSR set to: 0
  1036  001C44  0E02               	movlw	2
  1037  001C46  6E84               	movwf	3972,c	;volatile
  1038  001C48  D000               	goto	l2658
  1039  001C4A                     l2658:
  1040                           
  1041                           ; BSR set to: 0
  1042                           ;Lab6pB2.c: 65: PORTDbits.RD7 = 0;
  1043  001C4A  9E83               	bcf	3971,7,c	;volatile
  1044                           
  1045                           ; BSR set to: 0
  1046                           ;Lab6pB2.c: 66: printf("RL: %f\r\n", RL);
  1047  001C4C  0E77               	movlw	low STR_1
  1048  001C4E  6E5B               	movwf	printf@f,c
  1049  001C50  0E10               	movlw	high STR_1
  1050  001C52  6E5C               	movwf	printf@f+1,c
  1051  001C54  C09C  F05D         	movff	main@RL,?_printf+2
  1052  001C58  C09D  F05E         	movff	main@RL+1,?_printf+3
  1053  001C5C  C09E  F05F         	movff	main@RL+2,?_printf+4
  1054  001C60  EC41  F008         	call	_printf	;wreg free
  1055                           
  1056                           ;Lab6pB2.c: 67: }
  1057  001C64  D057               	goto	l2680
  1058  001C66                     l2662:
  1059                           
  1060                           ;Lab6pB2.c: 68: else
  1061                           ;Lab6pB2.c: 69: {
  1062                           ;Lab6pB2.c: 70: int RLint = (int)RL;
  1063  001C66  C09C  F01C         	movff	main@RL,___fttol@f1
  1064  001C6A  C09D  F01D         	movff	main@RL+1,___fttol@f1+1
  1065  001C6E  C09E  F01E         	movff	main@RL+2,___fttol@f1+2
  1066  001C72  EC55  F012         	call	___fttol	;wreg free
  1067  001C76  C01C  F097         	movff	?___fttol,main@RLint
  1068  001C7A  C01D  F098         	movff	?___fttol+1,main@RLint+1
  1069                           
  1070                           ;Lab6pB2.c: 71: int u = RLint / 10;
  1071  001C7E  C097  F031         	movff	main@RLint,___awdiv@dividend
  1072  001C82  C098  F032         	movff	main@RLint+1,___awdiv@dividend+1
  1073  001C86  0E00               	movlw	0
  1074  001C88  6E34               	movwf	___awdiv@divisor+1,c
  1075  001C8A  0E0A               	movlw	10
  1076  001C8C  6E33               	movwf	___awdiv@divisor,c
  1077  001C8E  EC9C  F013         	call	___awdiv	;wreg free
  1078  001C92  C031  F090         	movff	?___awdiv,main@u_300
  1079  001C96  C032  F091         	movff	?___awdiv+1,main@u_300+1
  1080                           
  1081                           ;Lab6pB2.c: 72: int l = RLint % 10;
  1082  001C9A  C097  F02B         	movff	main@RLint,___awmod@dividend
  1083  001C9E  C098  F02C         	movff	main@RLint+1,___awmod@dividend+1
  1084  001CA2  0E00               	movlw	0
  1085  001CA4  6E2E               	movwf	___awmod@divisor+1,c
  1086  001CA6  0E0A               	movlw	10
  1087  001CA8  6E2D               	movwf	___awmod@divisor,c
  1088  001CAA  EC78  F014         	call	___awmod	;wreg free
  1089  001CAE  C02B  F092         	movff	?___awmod,main@l_301
  1090  001CB2  C02C  F093         	movff	?___awmod+1,main@l_301+1
  1091                           
  1092                           ;Lab6pB2.c: 73: PORTD = LED_7seg[l];
  1093  001CB6  0E80               	movlw	low main@LED_7seg
  1094  001CB8  0100               	movlb	0	; () banked
  1095  001CBA  2592               	addwf	main@l_301& (0+255),w,b
  1096  001CBC  6ED9               	movwf	fsr2l,c
  1097  001CBE  0E00               	movlw	high main@LED_7seg
  1098  001CC0  0100               	movlb	0	; () banked
  1099  001CC2  2193               	addwfc	(main@l_301+1)& (0+255),w,b
  1100  001CC4  6EDA               	movwf	fsr2h,c
  1101  001CC6  50DF               	movf	indf2,w,c
  1102  001CC8  6E83               	movwf	3971,c	;volatile
  1103                           
  1104                           ; BSR set to: 0
  1105                           ;Lab6pB2.c: 74: char t = LED_7seg[u];
  1106  001CCA  0E80               	movlw	low main@LED_7seg
  1107  001CCC  0100               	movlb	0	; () banked
  1108  001CCE  2590               	addwf	main@u_300& (0+255),w,b
  1109  001CD0  6ED9               	movwf	fsr2l,c
  1110  001CD2  0E00               	movlw	high main@LED_7seg
  1111  001CD4  0100               	movlb	0	; () banked
  1112  001CD6  2191               	addwfc	(main@u_300+1)& (0+255),w,b
  1113  001CD8  6EDA               	movwf	fsr2h,c
  1114  001CDA  50DF               	movf	indf2,w,c
  1115  001CDC  0100               	movlb	0	; () banked
  1116  001CDE  6F9A               	movwf	main@t_302& (0+255),b
  1117                           
  1118                           ; BSR set to: 0
  1119                           ;Lab6pB2.c: 75: PORTC = t & 0x3F;
  1120  001CE0  0100               	movlb	0	; () banked
  1121  001CE2  519A               	movf	main@t_302& (0+255),w,b
  1122  001CE4  0B3F               	andlw	63
  1123  001CE6  6E82               	movwf	3970,c	;volatile
  1124                           
  1125                           ; BSR set to: 0
  1126                           ;Lab6pB2.c: 76: PORTE = 0;
  1127  001CE8  0E00               	movlw	0
  1128  001CEA  6E84               	movwf	3972,c	;volatile
  1129                           
  1130                           ; BSR set to: 0
  1131                           ;Lab6pB2.c: 77: if(t & 0x40) PORTE=2;
  1132  001CEC  0100               	movlb	0	; () banked
  1133  001CEE  AD9A               	btfss	main@t_302& (0+255),6,b
  1134  001CF0  D003               	goto	l2676
  1135                           
  1136                           ; BSR set to: 0
  1137  001CF2  0E02               	movlw	2
  1138  001CF4  6E84               	movwf	3972,c	;volatile
  1139  001CF6  D000               	goto	l2676
  1140  001CF8                     l2676:
  1141                           
  1142                           ; BSR set to: 0
  1143                           ;Lab6pB2.c: 78: PORTDbits.RD7 = 1;
  1144  001CF8  8E83               	bsf	3971,7,c	;volatile
  1145                           
  1146                           ; BSR set to: 0
  1147                           ;Lab6pB2.c: 79: printf("RL: %f\r\n", RL);
  1148  001CFA  0E77               	movlw	low STR_1
  1149  001CFC  6E5B               	movwf	printf@f,c
  1150  001CFE  0E10               	movlw	high STR_1
  1151  001D00  6E5C               	movwf	printf@f+1,c
  1152  001D02  C09C  F05D         	movff	main@RL,?_printf+2
  1153  001D06  C09D  F05E         	movff	main@RL+1,?_printf+3
  1154  001D0A  C09E  F05F         	movff	main@RL+2,?_printf+4
  1155  001D0E  EC41  F008         	call	_printf	;wreg free
  1156  001D12  D000               	goto	l2680
  1157  001D14                     l2680:
  1158                           
  1159                           ;Lab6pB2.c: 80: }
  1160                           ;Lab6pB2.c: 82: char temp = (int) RL/10;
  1161  001D14  C09C  F01C         	movff	main@RL,___fttol@f1
  1162  001D18  C09D  F01D         	movff	main@RL+1,___fttol@f1+1
  1163  001D1C  C09E  F01E         	movff	main@RL+2,___fttol@f1+2
  1164  001D20  EC55  F012         	call	___fttol	;wreg free
  1165  001D24  C01C  F031         	movff	?___fttol,___awdiv@dividend
  1166  001D28  C01D  F032         	movff	?___fttol+1,___awdiv@dividend+1
  1167  001D2C  0E00               	movlw	0
  1168  001D2E  6E34               	movwf	___awdiv@divisor+1,c
  1169  001D30  0E0A               	movlw	10
  1170  001D32  6E33               	movwf	___awdiv@divisor,c
  1171  001D34  EC9C  F013         	call	___awdiv	;wreg free
  1172  001D38  5031               	movf	?___awdiv,w,c
  1173  001D3A  0100               	movlb	0	; () banked
  1174  001D3C  6F9B               	movwf	main@temp& (0+255),b
  1175                           
  1176                           ; BSR set to: 0
  1177                           ;Lab6pB2.c: 83: if (temp >= 7) PORTB = 0x07;
  1178  001D3E  0E06               	movlw	6
  1179  001D40  0100               	movlb	0	; () banked
  1180  001D42  659B               	cpfsgt	main@temp& (0+255),b
  1181  001D44  D003               	goto	l83
  1182                           
  1183                           ; BSR set to: 0
  1184  001D46  0E07               	movlw	7
  1185  001D48  6E81               	movwf	3969,c	;volatile
  1186  001D4A  D003               	goto	l2686
  1187  001D4C                     l83:
  1188                           
  1189                           ; BSR set to: 0
  1190                           ;Lab6pB2.c: 84: else PORTB = temp;
  1191  001D4C  C09B  FF81         	movff	main@temp,3969	;volatile
  1192  001D50  D000               	goto	l2686
  1193  001D52                     l2686:
  1194                           
  1195                           ; BSR set to: 0
  1196                           ;Lab6pB2.c: 86: if(RL <= 0.070)
  1197  001D52  0E5C               	movlw	92
  1198  001D54  6E01               	movwf	___ftge@ff1,c
  1199  001D56  0E8F               	movlw	143
  1200  001D58  6E02               	movwf	___ftge@ff1+1,c
  1201  001D5A  0E3D               	movlw	61
  1202  001D5C  6E03               	movwf	___ftge@ff1+2,c
  1203  001D5E  C09C  F004         	movff	main@RL,___ftge@ff2
  1204  001D62  C09D  F005         	movff	main@RL+1,___ftge@ff2+1
  1205  001D66  C09E  F006         	movff	main@RL+2,___ftge@ff2+2
  1206  001D6A  ECE7  F013         	call	___ftge	;wreg free
  1207  001D6E  A0D8               	btfss	status,0,c
  1208  001D70  D005               	goto	l85
  1209                           
  1210                           ;Lab6pB2.c: 87: {
  1211                           ;Lab6pB2.c: 88: PORTBbits.RB4 = 1;
  1212  001D72  8881               	bsf	3969,4,c	;volatile
  1213                           
  1214                           ;Lab6pB2.c: 89: PORTBbits.RB5 = 1;
  1215  001D74  8A81               	bsf	3969,5,c	;volatile
  1216                           
  1217                           ;Lab6pB2.c: 90: Activate_Buzzer();
  1218  001D76  EC03  F016         	call	_Activate_Buzzer	;wreg free
  1219                           
  1220                           ;Lab6pB2.c: 91: } else
  1221  001D7A  D005               	goto	l2694
  1222  001D7C                     l85:
  1223                           
  1224                           ;Lab6pB2.c: 92: {
  1225                           ;Lab6pB2.c: 93: PORTBbits.RB4 = 0;
  1226  001D7C  9881               	bcf	3969,4,c	;volatile
  1227                           
  1228                           ;Lab6pB2.c: 94: PORTBbits.RB5 = 0;
  1229  001D7E  9A81               	bcf	3969,5,c	;volatile
  1230                           
  1231                           ;Lab6pB2.c: 95: Deactivate_Buzzer();
  1232  001D80  EC25  F016         	call	_Deactivate_Buzzer	;wreg free
  1233  001D84  D000               	goto	l2694
  1234  001D86                     l2694:
  1235                           
  1236                           ;Lab6pB2.c: 96: }
  1237                           ;Lab6pB2.c: 98: Delay_One_Sec();
  1238  001D86  ECE7  F015         	call	_Delay_One_Sec	;wreg free
  1239  001D8A  D695               	goto	l2634
  1240  001D8C  EF00  F000         	goto	start
  1241  001D90                     __end_of_main:
  1242                           	opt stack 0
  1243                           tblptru	equ	0xFF8
  1244                           tblptrh	equ	0xFF7
  1245                           tblptrl	equ	0xFF6
  1246                           tablat	equ	0xFF5
  1247                           postinc0	equ	0xFEE
  1248                           wreg	equ	0xFE8
  1249                           postdec1	equ	0xFE5
  1250                           plusw1	equ	0xFE3
  1251                           fsr1l	equ	0xFE1
  1252                           indf2	equ	0xFDF
  1253                           plusw2	equ	0xFDB
  1254                           fsr2h	equ	0xFDA
  1255                           fsr2l	equ	0xFD9
  1256                           status	equ	0xFD8
  1257                           
  1258 ;; *************** function _printf *****************
  1259 ;; Defined at:
  1260 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1261 ;; Parameters:    Size  Location     Type
  1262 ;;  f               2   90[COMRAM] PTR const unsigned char 
  1263 ;;		 -> STR_2(9), STR_1(9), 
  1264 ;; Auto vars:     Size  Location     Type
  1265 ;;  tmpval          4  116[COMRAM] struct .
  1266 ;;  val             4  110[COMRAM] unsigned long 
  1267 ;;  fval            3  120[COMRAM] unsigned long 
  1268 ;;  cp              3    0        PTR const unsigned char 
  1269 ;;  exp             2  114[COMRAM] int 
  1270 ;;  prec            2  108[COMRAM] int 
  1271 ;;  flag            2  106[COMRAM] unsigned short 
  1272 ;;  ap              2  104[COMRAM] PTR void [1]
  1273 ;;		 -> ?_printf(2), 
  1274 ;;  len             2    0        unsigned int 
  1275 ;;  width           2    0        int 
  1276 ;;  c               1  123[COMRAM] char 
  1277 ;;  d               1    0        unsigned char 
  1278 ;; Return value:  Size  Location     Type
  1279 ;;                  2   90[COMRAM] int 
  1280 ;; Registers used:
  1281 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1282 ;; Tracked objects:
  1283 ;;		On entry : 0/0
  1284 ;;		On exit  : 0/0
  1285 ;;		Unchanged: 0/0
  1286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1287 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1288 ;;      Locals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1289 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1290 ;;      Totals:        34       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1291 ;;Total ram usage:       34 bytes
  1292 ;; Hardware stack levels used:    1
  1293 ;; Hardware stack levels required when called:    3
  1294 ;; This function calls:
  1295 ;;		___awdiv
  1296 ;;		___ftadd
  1297 ;;		___ftge
  1298 ;;		___ftmul
  1299 ;;		___ftneg
  1300 ;;		___ftsub
  1301 ;;		___fttol
  1302 ;;		___lldiv
  1303 ;;		___llmod
  1304 ;;		___lltoft
  1305 ;;		___wmul
  1306 ;;		__div_to_l_
  1307 ;;		__tdiv_to_l_
  1308 ;;		_fround
  1309 ;;		_putch
  1310 ;;		_scale
  1311 ;; This function is called by:
  1312 ;;		_main
  1313 ;; This function uses a non-reentrant model
  1314 ;;
  1315                           
  1316                           	psect	text1
  1317  001082                     __ptext1:
  1318                           	opt stack 0
  1319  001082                     _printf:
  1320                           	opt stack 27
  1321                           
  1322                           ;doprnt.c: 466: va_list ap;
  1323                           ;doprnt.c: 499: signed char c;
  1324                           ;doprnt.c: 501: int width;
  1325                           ;doprnt.c: 504: int prec;
  1326                           ;doprnt.c: 508: unsigned short flag;
  1327                           ;doprnt.c: 515: char d;
  1328                           ;doprnt.c: 516: double fval;
  1329                           ;doprnt.c: 517: int exp;
  1330                           ;doprnt.c: 523: union {
  1331                           ;doprnt.c: 524: unsigned long vd;
  1332                           ;doprnt.c: 525: double integ;
  1333                           ;doprnt.c: 526: } tmpval;
  1334                           ;doprnt.c: 528: unsigned long val;
  1335                           ;doprnt.c: 529: unsigned len;
  1336                           ;doprnt.c: 530: const char * cp;
  1337                           ;doprnt.c: 533: *ap = __va_start();
  1338                           
  1339                           ;incstack = 0
  1340  001082  0E5D               	movlw	low (?_printf+2)
  1341  001084  6E69               	movwf	printf@ap,c
  1342  001086  0E00               	movlw	high (?_printf+2)
  1343  001088  6E6A               	movwf	printf@ap+1,c
  1344                           
  1345                           ;doprnt.c: 536: while(c = *f++) {
  1346  00108A  D2FF               	goto	l2544
  1347  00108C                     l2396:
  1348                           
  1349                           ;doprnt.c: 538: if(c != '%')
  1350  00108C  0E25               	movlw	37
  1351  00108E  187C               	xorwf	printf@c,w,c
  1352  001090  B4D8               	btfsc	status,2,c
  1353  001092  D004               	goto	l2400
  1354                           
  1355                           ;doprnt.c: 540: {
  1356                           ;doprnt.c: 541: (putch(c) );
  1357  001094  507C               	movf	printf@c,w,c
  1358  001096  EC0C  F016         	call	_putch
  1359                           
  1360                           ;doprnt.c: 542: continue;
  1361  00109A  D2F7               	goto	l2544
  1362  00109C                     l2400:
  1363                           
  1364                           ;doprnt.c: 543: }
  1365                           ;doprnt.c: 548: flag = 0;
  1366  00109C  0E00               	movlw	0
  1367  00109E  6E6C               	movwf	printf@flag+1,c
  1368  0010A0  0E00               	movlw	0
  1369  0010A2  6E6B               	movwf	printf@flag,c
  1370                           
  1371                           ;doprnt.c: 635: switch(c = *f++) {
  1372  0010A4  D005               	goto	l2406
  1373                           
  1374                           ;doprnt.c: 638: goto alldone;
  1375                           
  1376                           ;doprnt.c: 637: case 0:
  1377  0010A6  D2FF               	goto	l195
  1378  0010A8                     l2402:
  1379                           
  1380                           ;doprnt.c: 663: flag |= 0x400;
  1381  0010A8  846C               	bsf	printf@flag+1,2,c
  1382                           
  1383                           ;doprnt.c: 664: break;
  1384  0010AA  D013               	goto	l2408
  1385                           
  1386                           ;doprnt.c: 813: continue;
  1387                           
  1388                           ;doprnt.c: 802: default:
  1389  0010AC  D2EE               	goto	l2544
  1390                           
  1391                           ;doprnt.c: 822: }
  1392  0010AE  D011               	goto	l2408
  1393  0010B0                     l2406:
  1394  0010B0  C05B  FFF6         	movff	printf@f,tblptrl
  1395  0010B4  C05C  FFF7         	movff	printf@f+1,tblptrh
  1396  0010B8  4A5B               	infsnz	printf@f,f,c
  1397  0010BA  2A5C               	incf	printf@f+1,f,c
  1398  0010BC                     	if	0	;tblptru may be non-zero
  1399  0010BC                     	endif
  1400  0010BC                     	if	0	;tblptru may be non-zero
  1401  0010BC                     	endif
  1402  0010BC  0008               	tblrd		*
  1403  0010BE  CFF5 F07C          	movff	tablat,printf@c
  1404  0010C2  507C               	movf	printf@c,w,c
  1405                           
  1406                           ; Switch size 1, requested type "space"
  1407                           ; Number of cases is 2, Range of values is 0 to 102
  1408                           ; switch strategies available:
  1409                           ; Name         Instructions Cycles
  1410                           ; simple_byte            7     4 (average)
  1411                           ;	Chosen strategy is simple_byte
  1412  0010C4  0A00               	xorlw	0	; case 0
  1413  0010C6  B4D8               	btfsc	status,2,c
  1414  0010C8  D2EE               	goto	l195
  1415  0010CA  0A66               	xorlw	102	; case 102
  1416  0010CC  B4D8               	btfsc	status,2,c
  1417  0010CE  D7EC               	goto	l2402
  1418  0010D0  D2DC               	goto	l2544
  1419  0010D2                     l2408:
  1420                           
  1421                           ;doprnt.c: 825: if(flag & (0x700)) {
  1422  0010D2  0E07               	movlw	7
  1423  0010D4  146C               	andwf	printf@flag+1,w,c
  1424  0010D6  B4D8               	btfsc	status,2,c
  1425  0010D8  D2CA               	goto	l2540
  1426                           
  1427                           ;doprnt.c: 829: prec = 6;
  1428  0010DA  0E00               	movlw	0
  1429  0010DC  6E6E               	movwf	printf@prec+1,c
  1430  0010DE  0E06               	movlw	6
  1431  0010E0  6E6D               	movwf	printf@prec,c
  1432                           
  1433                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1434  0010E2  C069  FFD9         	movff	printf@ap,fsr2l
  1435  0010E6  C06A  FFDA         	movff	printf@ap+1,fsr2h
  1436  0010EA  CFDE F079          	movff	postinc2,printf@fval
  1437  0010EE  CFDE F07A          	movff	postinc2,printf@fval+1
  1438  0010F2  CFDD F07B          	movff	postdec2,printf@fval+2
  1439  0010F6  0E03               	movlw	3
  1440  0010F8  2669               	addwf	printf@ap,f,c
  1441  0010FA  0E00               	movlw	0
  1442  0010FC  226A               	addwfc	printf@ap+1,f,c
  1443                           
  1444                           ;doprnt.c: 831: if(fval < 0.0) {
  1445  0010FE  AE7B               	btfss	printf@fval+2,7,c
  1446  001100  D011               	goto	l2422
  1447                           
  1448                           ;doprnt.c: 832: fval = -fval;
  1449  001102  C079  F001         	movff	printf@fval,___ftneg@f1
  1450  001106  C07A  F002         	movff	printf@fval+1,___ftneg@f1+1
  1451  00110A  C07B  F003         	movff	printf@fval+2,___ftneg@f1+2
  1452  00110E  ECD5  F015         	call	___ftneg	;wreg free
  1453  001112  C001  F079         	movff	?___ftneg,printf@fval
  1454  001116  C002  F07A         	movff	?___ftneg+1,printf@fval+1
  1455  00111A  C003  F07B         	movff	?___ftneg+2,printf@fval+2
  1456                           
  1457                           ;doprnt.c: 833: flag |= 0x03;
  1458  00111E  0E03               	movlw	3
  1459  001120  126B               	iorwf	printf@flag,f,c
  1460  001122  D000               	goto	l2422
  1461  001124                     l2422:
  1462                           
  1463                           ;doprnt.c: 834: }
  1464                           ;doprnt.c: 835: exp = 0;
  1465  001124  0E00               	movlw	0
  1466  001126  6E74               	movwf	printf@exp+1,c
  1467  001128  0E00               	movlw	0
  1468  00112A  6E73               	movwf	printf@exp,c
  1469                           
  1470                           ;doprnt.c: 836: if( fval!=0) {
  1471  00112C  5079               	movf	printf@fval,w,c
  1472  00112E  107A               	iorwf	printf@fval+1,w,c
  1473  001130  107B               	iorwf	printf@fval+2,w,c
  1474  001132  B4D8               	btfsc	status,2,c
  1475  001134  D085               	goto	l2450
  1476                           
  1477                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1478  001136  0E82               	movlw	130
  1479  001138  6E60               	movwf	??_printf& (0+255),c
  1480  00113A  0EFF               	movlw	255
  1481  00113C  6E61               	movwf	(??_printf+1)& (0+255),c
  1482  00113E  C079  F062         	movff	printf@fval,??_printf+2
  1483  001142  C07A  F063         	movff	printf@fval+1,??_printf+3
  1484  001146  C07B  F064         	movff	printf@fval+2,??_printf+4
  1485  00114A  C07C  F065         	movff	printf@fval+3,??_printf+5
  1486  00114E  0E10               	movlw	16
  1487  001150  D005               	goto	u2490
  1488  001152                     u2495:
  1489  001152  90D8               	bcf	status,0,c
  1490  001154  3265               	rrcf	??_printf+5,f,c
  1491  001156  3264               	rrcf	??_printf+4,f,c
  1492  001158  3263               	rrcf	??_printf+3,f,c
  1493  00115A  3262               	rrcf	??_printf+2,f,c
  1494  00115C                     u2490:
  1495  00115C  2EE8               	decfsz	wreg,f,c
  1496  00115E  D7F9               	goto	u2495
  1497  001160  5062               	movf	??_printf+2,w,c
  1498  001162  2460               	addwf	??_printf,w,c
  1499  001164  6E73               	movwf	printf@exp,c
  1500  001166  0E00               	movlw	0
  1501  001168  2061               	addwfc	??_printf+1,w,c
  1502  00116A  6E74               	movwf	printf@exp+1,c
  1503                           
  1504                           ;doprnt.c: 838: exp--;
  1505  00116C  0673               	decf	printf@exp,f,c
  1506  00116E  A0D8               	btfss	status,0,c
  1507  001170  0674               	decf	printf@exp+1,f,c
  1508                           
  1509                           ;doprnt.c: 839: exp *= 3;
  1510  001172  C073  F039         	movff	printf@exp,___wmul@multiplier
  1511  001176  C074  F03A         	movff	printf@exp+1,___wmul@multiplier+1
  1512  00117A  0E00               	movlw	0
  1513  00117C  6E3C               	movwf	___wmul@multiplicand+1,c
  1514  00117E  0E03               	movlw	3
  1515  001180  6E3B               	movwf	___wmul@multiplicand,c
  1516  001182  ECAE  F015         	call	___wmul	;wreg free
  1517  001186  C039  F073         	movff	?___wmul,printf@exp
  1518  00118A  C03A  F074         	movff	?___wmul+1,printf@exp+1
  1519                           
  1520                           ;doprnt.c: 840: exp /= 10;
  1521  00118E  C073  F031         	movff	printf@exp,___awdiv@dividend
  1522  001192  C074  F032         	movff	printf@exp+1,___awdiv@dividend+1
  1523  001196  0E00               	movlw	0
  1524  001198  6E34               	movwf	___awdiv@divisor+1,c
  1525  00119A  0E0A               	movlw	10
  1526  00119C  6E33               	movwf	___awdiv@divisor,c
  1527  00119E  EC9C  F013         	call	___awdiv	;wreg free
  1528  0011A2  C031  F073         	movff	?___awdiv,printf@exp
  1529  0011A6  C032  F074         	movff	?___awdiv+1,printf@exp+1
  1530                           
  1531                           ;doprnt.c: 841: if(exp < 0)
  1532  0011AA  AE74               	btfss	printf@exp+1,7,c
  1533  0011AC  D004               	goto	l2438
  1534                           
  1535                           ;doprnt.c: 842: exp--;
  1536  0011AE  0673               	decf	printf@exp,f,c
  1537  0011B0  A0D8               	btfss	status,0,c
  1538  0011B2  0674               	decf	printf@exp+1,f,c
  1539  0011B4  D000               	goto	l2438
  1540  0011B6                     l2438:
  1541                           
  1542                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1543  0011B6  5073               	movf	printf@exp,w,c
  1544  0011B8  0800               	sublw	0
  1545  0011BA  EC54  F00B         	call	_scale
  1546  0011BE  C03F  F075         	movff	?_scale,printf@tmpval
  1547  0011C2  C040  F076         	movff	?_scale+1,printf@tmpval+1
  1548  0011C6  C041  F077         	movff	?_scale+2,printf@tmpval+2
  1549                           
  1550                           ;doprnt.c: 847: tmpval.integ *= fval;
  1551  0011CA  C075  F00D         	movff	printf@tmpval,___ftmul@f1
  1552  0011CE  C076  F00E         	movff	printf@tmpval+1,___ftmul@f1+1
  1553  0011D2  C077  F00F         	movff	printf@tmpval+2,___ftmul@f1+2
  1554  0011D6  C079  F010         	movff	printf@fval,___ftmul@f2
  1555  0011DA  C07A  F011         	movff	printf@fval+1,___ftmul@f2+1
  1556  0011DE  C07B  F012         	movff	printf@fval+2,___ftmul@f2+2
  1557  0011E2  ECD9  F011         	call	___ftmul	;wreg free
  1558  0011E6  C00D  F075         	movff	?___ftmul,printf@tmpval
  1559  0011EA  C00E  F076         	movff	?___ftmul+1,printf@tmpval+1
  1560  0011EE  C00F  F077         	movff	?___ftmul+2,printf@tmpval+2
  1561                           
  1562                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1563  0011F2  C075  F001         	movff	printf@tmpval,___ftge@ff1
  1564  0011F6  C076  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1565  0011FA  C077  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1566  0011FE  0E00               	movlw	0
  1567  001200  6E04               	movwf	___ftge@ff2,c
  1568  001202  0E80               	movlw	128
  1569  001204  6E05               	movwf	___ftge@ff2+1,c
  1570  001206  0E3F               	movlw	63
  1571  001208  6E06               	movwf	___ftge@ff2+2,c
  1572  00120A  ECE7  F013         	call	___ftge	;wreg free
  1573  00120E  B0D8               	btfsc	status,0,c
  1574  001210  D004               	goto	l2446
  1575                           
  1576                           ;doprnt.c: 849: exp--;
  1577  001212  0673               	decf	printf@exp,f,c
  1578  001214  A0D8               	btfss	status,0,c
  1579  001216  0674               	decf	printf@exp+1,f,c
  1580  001218  D013               	goto	l2450
  1581  00121A                     l2446:
  1582                           
  1583                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1584  00121A  C075  F001         	movff	printf@tmpval,___ftge@ff1
  1585  00121E  C076  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1586  001222  C077  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1587  001226  0E00               	movlw	0
  1588  001228  6E04               	movwf	___ftge@ff2,c
  1589  00122A  0E20               	movlw	32
  1590  00122C  6E05               	movwf	___ftge@ff2+1,c
  1591  00122E  0E41               	movlw	65
  1592  001230  6E06               	movwf	___ftge@ff2+2,c
  1593  001232  ECE7  F013         	call	___ftge	;wreg free
  1594  001236  A0D8               	btfss	status,0,c
  1595  001238  D003               	goto	l2450
  1596                           
  1597                           ;doprnt.c: 851: exp++;
  1598  00123A  4A73               	infsnz	printf@exp,f,c
  1599  00123C  2A74               	incf	printf@exp+1,f,c
  1600  00123E  D000               	goto	l2450
  1601  001240                     l2450:
  1602                           
  1603                           ;doprnt.c: 852: }
  1604                           ;doprnt.c: 1112: if(prec <= 12)
  1605  001240  BE6E               	btfsc	printf@prec+1,7,c
  1606  001242  D006               	goto	l2452
  1607  001244  506E               	movf	printf@prec+1,w,c
  1608  001246  E11C               	bnz	l2454
  1609  001248  0E0D               	movlw	13
  1610  00124A  5C6D               	subwf	printf@prec,w,c
  1611  00124C  B0D8               	btfsc	status,0,c
  1612  00124E  D018               	goto	l2454
  1613  001250                     l2452:
  1614                           
  1615                           ;doprnt.c: 1113: fval += fround(prec);
  1616  001250  C079  F049         	movff	printf@fval,___ftadd@f1
  1617  001254  C07A  F04A         	movff	printf@fval+1,___ftadd@f1+1
  1618  001258  C07B  F04B         	movff	printf@fval+2,___ftadd@f1+2
  1619  00125C  506D               	movf	printf@prec,w,c
  1620  00125E  ECC8  F00E         	call	_fround
  1621  001262  C03F  F04C         	movff	?_fround,___ftadd@f2
  1622  001266  C040  F04D         	movff	?_fround+1,___ftadd@f2+1
  1623  00126A  C041  F04E         	movff	?_fround+2,___ftadd@f2+2
  1624  00126E  ECEA  F00F         	call	___ftadd	;wreg free
  1625  001272  C049  F079         	movff	?___ftadd,printf@fval
  1626  001276  C04A  F07A         	movff	?___ftadd+1,printf@fval+1
  1627  00127A  C04B  F07B         	movff	?___ftadd+2,printf@fval+2
  1628  00127E  D000               	goto	l2454
  1629  001280                     l2454:
  1630                           
  1631                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1632  001280  BE74               	btfsc	printf@exp+1,7,c
  1633  001282  D006               	goto	l2456
  1634  001284  5074               	movf	printf@exp+1,w,c
  1635  001286  E120               	bnz	l2462
  1636  001288  0E0A               	movlw	10
  1637  00128A  5C73               	subwf	printf@exp,w,c
  1638  00128C  B0D8               	btfsc	status,0,c
  1639  00128E  D01C               	goto	l2462
  1640  001290                     l2456:
  1641  001290  5079               	movf	printf@fval,w,c
  1642  001292  107A               	iorwf	printf@fval+1,w,c
  1643  001294  107B               	iorwf	printf@fval+2,w,c
  1644  001296  B4D8               	btfsc	status,2,c
  1645  001298  D06D               	goto	l2476
  1646  00129A  C079  F01C         	movff	printf@fval,___fttol@f1
  1647  00129E  C07A  F01D         	movff	printf@fval+1,___fttol@f1+1
  1648  0012A2  C07B  F01E         	movff	printf@fval+2,___fttol@f1+2
  1649  0012A6  EC55  F012         	call	___fttol	;wreg free
  1650  0012AA  501C               	movf	?___fttol,w,c
  1651  0012AC  101D               	iorwf	?___fttol+1,w,c
  1652  0012AE  101E               	iorwf	?___fttol+2,w,c
  1653  0012B0  101F               	iorwf	?___fttol+3,w,c
  1654  0012B2  B4D8               	btfsc	status,2,c
  1655  0012B4  BE74               	btfsc	printf@exp+1,7,c
  1656  0012B6  D05E               	goto	l2476
  1657  0012B8  5074               	movf	printf@exp+1,w,c
  1658  0012BA  E106               	bnz	l2462
  1659  0012BC  0E02               	movlw	2
  1660  0012BE  5C73               	subwf	printf@exp,w,c
  1661  0012C0  B0D8               	btfsc	status,0,c
  1662  0012C2  D002               	goto	l2462
  1663  0012C4  D057               	goto	l2476
  1664  0012C6  D000               	goto	l2462
  1665  0012C8                     l2462:
  1666                           
  1667                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1668  0012C8  C075  F001         	movff	printf@tmpval,___ftge@ff1
  1669  0012CC  C076  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1670  0012D0  C077  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1671  0012D4  0E70               	movlw	112
  1672  0012D6  6E04               	movwf	___ftge@ff2,c
  1673  0012D8  0E89               	movlw	137
  1674  0012DA  6E05               	movwf	___ftge@ff2+1,c
  1675  0012DC  0E40               	movlw	64
  1676  0012DE  6E06               	movwf	___ftge@ff2+2,c
  1677  0012E0  ECE7  F013         	call	___ftge	;wreg free
  1678  0012E4  B0D8               	btfsc	status,0,c
  1679  0012E6  D002               	goto	l2466
  1680                           
  1681                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1682  0012E8  0EF7               	movlw	247
  1683  0012EA  D001               	goto	L1
  1684  0012EC                     l2466:
  1685                           
  1686                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1687  0012EC  0EF8               	movlw	248
  1688  0012EE                     L1:
  1689  0012EE  2673               	addwf	printf@exp,f,c
  1690  0012F0  0EFF               	movlw	255
  1691  0012F2  2274               	addwfc	printf@exp+1,f,c
  1692  0012F4  D000               	goto	l2468
  1693  0012F6                     l2468:
  1694                           
  1695                           ;doprnt.c: 1124: }
  1696                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1697  0012F6  5073               	movf	printf@exp,w,c
  1698  0012F8  EC54  F00B         	call	_scale
  1699  0012FC  C03F  F075         	movff	?_scale,printf@tmpval
  1700  001300  C040  F076         	movff	?_scale+1,printf@tmpval+1
  1701  001304  C041  F077         	movff	?_scale+2,printf@tmpval+2
  1702                           
  1703                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1704  001308  D017               	goto	l2472
  1705  00130A  C079  F001         	movff	printf@fval,__div_to_l_@f1
  1706  00130E  C07A  F002         	movff	printf@fval+1,__div_to_l_@f1+1
  1707  001312  C07B  F003         	movff	printf@fval+2,__div_to_l_@f1+2
  1708  001316  C075  F004         	movff	printf@tmpval,__div_to_l_@f2
  1709  00131A  C076  F005         	movff	printf@tmpval+1,__div_to_l_@f2+1
  1710  00131E  C077  F006         	movff	printf@tmpval+2,__div_to_l_@f2+2
  1711  001322  EC54  F011         	call	__div_to_l_	;wreg free
  1712  001326  C001  F06F         	movff	?__div_to_l_,printf@val
  1713  00132A  C002  F070         	movff	?__div_to_l_+1,printf@val+1
  1714  00132E  C003  F071         	movff	?__div_to_l_+2,printf@val+2
  1715  001332  C004  F072         	movff	?__div_to_l_+3,printf@val+3
  1716  001336  D017               	goto	l2474
  1717  001338                     l2472:
  1718  001338  C079  F001         	movff	printf@fval,__tdiv_to_l_@f1
  1719  00133C  C07A  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  1720  001340  C07B  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  1721  001344  C075  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  1722  001348  C076  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  1723  00134C  C077  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  1724  001350  ECCC  F010         	call	__tdiv_to_l_	;wreg free
  1725  001354  C001  F06F         	movff	?__tdiv_to_l_,printf@val
  1726  001358  C002  F070         	movff	?__tdiv_to_l_+1,printf@val+1
  1727  00135C  C003  F071         	movff	?__tdiv_to_l_+2,printf@val+2
  1728  001360  C004  F072         	movff	?__tdiv_to_l_+3,printf@val+3
  1729  001364  D000               	goto	l2474
  1730  001366                     l2474:
  1731                           
  1732                           ;doprnt.c: 1129: fval = 0.0;
  1733  001366  0E00               	movlw	0
  1734  001368  6E79               	movwf	printf@fval,c
  1735  00136A  0E00               	movlw	0
  1736  00136C  6E7A               	movwf	printf@fval+1,c
  1737  00136E  0E00               	movlw	0
  1738  001370  6E7B               	movwf	printf@fval+2,c
  1739                           
  1740                           ;doprnt.c: 1130: } else {
  1741  001372  D033               	goto	l2480
  1742  001374                     l2476:
  1743                           
  1744                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1745  001374  C079  F01C         	movff	printf@fval,___fttol@f1
  1746  001378  C07A  F01D         	movff	printf@fval+1,___fttol@f1+1
  1747  00137C  C07B  F01E         	movff	printf@fval+2,___fttol@f1+2
  1748  001380  EC55  F012         	call	___fttol	;wreg free
  1749  001384  C01C  F06F         	movff	?___fttol,printf@val
  1750  001388  C01D  F070         	movff	?___fttol+1,printf@val+1
  1751  00138C  C01E  F071         	movff	?___fttol+2,printf@val+2
  1752  001390  C01F  F072         	movff	?___fttol+3,printf@val+3
  1753                           
  1754                           ;doprnt.c: 1132: fval -= (double)val;
  1755  001394  C079  F055         	movff	printf@fval,___ftsub@f1
  1756  001398  C07A  F056         	movff	printf@fval+1,___ftsub@f1+1
  1757  00139C  C07B  F057         	movff	printf@fval+2,___ftsub@f1+2
  1758  0013A0  C06F  F009         	movff	printf@val,___lltoft@c
  1759  0013A4  C070  F00A         	movff	printf@val+1,___lltoft@c+1
  1760  0013A8  C071  F00B         	movff	printf@val+2,___lltoft@c+2
  1761  0013AC  C072  F00C         	movff	printf@val+3,___lltoft@c+3
  1762  0013B0  EC29  F015         	call	___lltoft	;wreg free
  1763  0013B4  C009  F058         	movff	?___lltoft,___ftsub@f2
  1764  0013B8  C00A  F059         	movff	?___lltoft+1,___ftsub@f2+1
  1765  0013BC  C00B  F05A         	movff	?___lltoft+2,___ftsub@f2+2
  1766  0013C0  EC59  F015         	call	___ftsub	;wreg free
  1767  0013C4  C055  F079         	movff	?___ftsub,printf@fval
  1768  0013C8  C056  F07A         	movff	?___ftsub+1,printf@fval+1
  1769  0013CC  C057  F07B         	movff	?___ftsub+2,printf@fval+2
  1770                           
  1771                           ;doprnt.c: 1133: exp = 0;
  1772  0013D0  0E00               	movlw	0
  1773  0013D2  6E74               	movwf	printf@exp+1,c
  1774  0013D4  0E00               	movlw	0
  1775  0013D6  6E73               	movwf	printf@exp,c
  1776  0013D8  D000               	goto	l2480
  1777  0013DA                     l2480:
  1778                           
  1779                           ;doprnt.c: 1134: }
  1780                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1781  0013DA  0E01               	movlw	1
  1782  0013DC  6E7C               	movwf	printf@c,c
  1783  0013DE                     l2482:
  1784  0013DE  0E0A               	movlw	10
  1785  0013E0  187C               	xorwf	printf@c,w,c
  1786  0013E2  B4D8               	btfsc	status,2,c
  1787  0013E4  D01C               	goto	l2494
  1788  0013E6  D001               	goto	l2486
  1789  0013E8  D01A               	goto	l2494
  1790  0013EA                     l2486:
  1791                           
  1792                           ;doprnt.c: 1137: if(val < dpowers[c])
  1793  0013EA  507C               	movf	printf@c,w,c
  1794  0013EC  0D04               	mullw	4
  1795  0013EE  0E01               	movlw	low _dpowers
  1796  0013F0  24F3               	addwf	prodl,w,c
  1797  0013F2  6EF6               	movwf	tblptrl,c
  1798  0013F4  0E10               	movlw	high _dpowers
  1799  0013F6  20F4               	addwfc	prodh,w,c
  1800  0013F8  6EF7               	movwf	tblptrh,c
  1801  0013FA                     	if	0	;There are less than 3 active tblptr bytes
  1802  0013FA                     	endif
  1803  0013FA  0009               	tblrd		*+
  1804  0013FC  50F5               	movf	tablat,w,c
  1805  0013FE  5C6F               	subwf	printf@val,w,c
  1806  001400  0009               	tblrd		*+
  1807  001402  50F5               	movf	tablat,w,c
  1808  001404  5870               	subwfb	printf@val+1,w,c
  1809  001406  0009               	tblrd		*+
  1810  001408  50F5               	movf	tablat,w,c
  1811  00140A  5871               	subwfb	printf@val+2,w,c
  1812  00140C  0009               	tblrd		*+
  1813  00140E  50F5               	movf	tablat,w,c
  1814  001410  5872               	subwfb	printf@val+3,w,c
  1815  001412  A0D8               	btfss	status,0,c
  1816  001414  D004               	goto	l2494
  1817  001416  D001               	goto	l2490
  1818                           
  1819                           ;doprnt.c: 1138: break;
  1820  001418  D002               	goto	l2494
  1821  00141A                     l2490:
  1822  00141A  2A7C               	incf	printf@c,f,c
  1823  00141C  D7E0               	goto	l2482
  1824  00141E                     l2494:
  1825                           
  1826                           ;doprnt.c: 1175: {
  1827                           ;doprnt.c: 1188: if(flag & 0x03)
  1828  00141E  0E03               	movlw	3
  1829  001420  146B               	andwf	printf@flag,w,c
  1830  001422  6E60               	movwf	??_printf& (0+255),c
  1831  001424  0E00               	movlw	0
  1832  001426  146C               	andwf	printf@flag+1,w,c
  1833  001428  6E61               	movwf	(??_printf+1)& (0+255),c
  1834  00142A  5060               	movf	??_printf,w,c
  1835  00142C  1061               	iorwf	??_printf+1,w,c
  1836  00142E  B4D8               	btfsc	status,2,c
  1837  001430  D049               	goto	l2504
  1838                           
  1839                           ;doprnt.c: 1190: (putch('-') );
  1840  001432  0E2D               	movlw	45
  1841  001434  EC0C  F016         	call	_putch
  1842                           
  1843                           ;doprnt.c: 1195: }
  1844                           ;doprnt.c: 1196: while(c--) {
  1845  001438  D045               	goto	l2504
  1846  00143A                     l2498:
  1847                           
  1848                           ;doprnt.c: 1200: {
  1849                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1850  00143A  C06F  F001         	movff	printf@val,___lldiv@dividend
  1851  00143E  C070  F002         	movff	printf@val+1,___lldiv@dividend+1
  1852  001442  C071  F003         	movff	printf@val+2,___lldiv@dividend+2
  1853  001446  C072  F004         	movff	printf@val+3,___lldiv@dividend+3
  1854  00144A  507C               	movf	printf@c,w,c
  1855  00144C  0D04               	mullw	4
  1856  00144E  0E01               	movlw	low _dpowers
  1857  001450  24F3               	addwf	prodl,w,c
  1858  001452  6EF6               	movwf	tblptrl,c
  1859  001454  0E10               	movlw	high _dpowers
  1860  001456  20F4               	addwfc	prodh,w,c
  1861  001458  6EF7               	movwf	tblptrh,c
  1862  00145A                     	if	0	;There are less than 3 active tblptr bytes
  1863  00145A                     	endif
  1864  00145A  0009               	tblrd		*+
  1865  00145C  CFF5 F005          	movff	tablat,___lldiv@divisor
  1866  001460  0009               	tblrd		*+
  1867  001462  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1868  001466  0009               	tblrd		*+
  1869  001468  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1870  00146C  000A               	tblrd		*-
  1871  00146E  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1872  001472  EC32  F014         	call	___lldiv	;wreg free
  1873  001476  C001  F075         	movff	?___lldiv,printf@tmpval
  1874  00147A  C002  F076         	movff	?___lldiv+1,printf@tmpval+1
  1875  00147E  C003  F077         	movff	?___lldiv+2,printf@tmpval+2
  1876  001482  C004  F078         	movff	?___lldiv+3,printf@tmpval+3
  1877                           
  1878                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1879  001486  C075  F001         	movff	printf@tmpval,___llmod@dividend
  1880  00148A  C076  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  1881  00148E  C077  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  1882  001492  C078  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  1883  001496  0E0A               	movlw	10
  1884  001498  6E05               	movwf	___llmod@divisor,c
  1885  00149A  0E00               	movlw	0
  1886  00149C  6E06               	movwf	___llmod@divisor+1,c
  1887  00149E  0E00               	movlw	0
  1888  0014A0  6E07               	movwf	___llmod@divisor+2,c
  1889  0014A2  0E00               	movlw	0
  1890  0014A4  6E08               	movwf	___llmod@divisor+3,c
  1891  0014A6  ECB9  F014         	call	___llmod	;wreg free
  1892  0014AA  C001  F075         	movff	?___llmod,printf@tmpval
  1893  0014AE  C002  F076         	movff	?___llmod+1,printf@tmpval+1
  1894  0014B2  C003  F077         	movff	?___llmod+2,printf@tmpval+2
  1895  0014B6  C004  F078         	movff	?___llmod+3,printf@tmpval+3
  1896                           
  1897                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  1898  0014BA  5075               	movf	printf@tmpval,w,c
  1899  0014BC  0F30               	addlw	48
  1900  0014BE  EC0C  F016         	call	_putch
  1901  0014C2  D000               	goto	l2504
  1902  0014C4                     l2504:
  1903  0014C4  067C               	decf	printf@c,f,c
  1904  0014C6  287C               	incf	printf@c,w,c
  1905  0014C8  B4D8               	btfsc	status,2,c
  1906  0014CA  D009               	goto	l2510
  1907  0014CC  D7B6               	goto	l2498
  1908                           
  1909                           ;doprnt.c: 1204: }
  1910                           ;doprnt.c: 1206: }
  1911                           ;doprnt.c: 1207: while(exp > 0) {
  1912  0014CE  D007               	goto	l2510
  1913  0014D0                     l2506:
  1914                           
  1915                           ;doprnt.c: 1208: (putch('0') );
  1916  0014D0  0E30               	movlw	48
  1917  0014D2  EC0C  F016         	call	_putch
  1918                           
  1919                           ;doprnt.c: 1209: exp--;
  1920  0014D6  0673               	decf	printf@exp,f,c
  1921  0014D8  A0D8               	btfss	status,0,c
  1922  0014DA  0674               	decf	printf@exp+1,f,c
  1923  0014DC  D000               	goto	l2510
  1924  0014DE                     l2510:
  1925  0014DE  BE74               	btfsc	printf@exp+1,7,c
  1926  0014E0  D005               	goto	l2512
  1927  0014E2  5074               	movf	printf@exp+1,w,c
  1928  0014E4  E1F5               	bnz	l2506
  1929  0014E6  0473               	decf	printf@exp,w,c
  1930  0014E8  B0D8               	btfsc	status,0,c
  1931  0014EA  D7F2               	goto	l2506
  1932  0014EC                     l2512:
  1933                           
  1934                           ;doprnt.c: 1210: }
  1935                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  1936  0014EC  BE6E               	btfsc	printf@prec+1,7,c
  1937  0014EE  D009               	goto	l184
  1938  0014F0  506E               	movf	printf@prec+1,w,c
  1939  0014F2  E104               	bnz	u2650
  1940  0014F4  0E09               	movlw	9
  1941  0014F6  5C6D               	subwf	printf@prec,w,c
  1942  0014F8  A0D8               	btfss	status,0,c
  1943  0014FA  D003               	goto	l184
  1944  0014FC                     u2650:
  1945                           
  1946                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1947  0014FC  0E08               	movlw	8
  1948  0014FE  6E7C               	movwf	printf@c,c
  1949  001500  D003               	goto	l2516
  1950  001502                     l184:
  1951                           
  1952                           ;doprnt.c: 1213: else
  1953                           ;doprnt.c: 1214: c = prec;
  1954  001502  C06D  F07C         	movff	printf@prec,printf@c
  1955  001506  D000               	goto	l2516
  1956  001508                     l2516:
  1957                           
  1958                           ;doprnt.c: 1215: prec -= c;
  1959  001508  507C               	movf	printf@c,w,c
  1960  00150A  5E6D               	subwf	printf@prec,f,c
  1961  00150C  0E00               	movlw	0
  1962  00150E  BE7C               	btfsc	printf@c,7,c
  1963  001510  0EFF               	movlw	255
  1964  001512  5A6E               	subwfb	printf@prec+1,f,c
  1965                           
  1966                           ;doprnt.c: 1219: if(c)
  1967  001514  507C               	movf	printf@c,w,c
  1968  001516  B4D8               	btfsc	status,2,c
  1969  001518  D004               	goto	l2522
  1970                           
  1971                           ;doprnt.c: 1221: (putch('.') );
  1972  00151A  0E2E               	movlw	46
  1973  00151C  EC0C  F016         	call	_putch
  1974  001520  D000               	goto	l2522
  1975  001522                     l2522:
  1976                           
  1977                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1978  001522  507C               	movf	printf@c,w,c
  1979  001524  EC54  F00B         	call	_scale
  1980  001528  C03F  F066         	movff	?_scale,_printf$1189
  1981  00152C  C040  F067         	movff	?_scale+1,_printf$1189+1
  1982  001530  C041  F068         	movff	?_scale+2,_printf$1189+2
  1983                           
  1984                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1985  001534  C079  F010         	movff	printf@fval,___ftmul@f2
  1986  001538  C07A  F011         	movff	printf@fval+1,___ftmul@f2+1
  1987  00153C  C07B  F012         	movff	printf@fval+2,___ftmul@f2+2
  1988  001540  C066  F00D         	movff	_printf$1189,___ftmul@f1
  1989  001544  C067  F00E         	movff	_printf$1189+1,___ftmul@f1+1
  1990  001548  C068  F00F         	movff	_printf$1189+2,___ftmul@f1+2
  1991  00154C  ECD9  F011         	call	___ftmul	;wreg free
  1992  001550  C00D  F01C         	movff	?___ftmul,___fttol@f1
  1993  001554  C00E  F01D         	movff	?___ftmul+1,___fttol@f1+1
  1994  001558  C00F  F01E         	movff	?___ftmul+2,___fttol@f1+2
  1995  00155C  EC55  F012         	call	___fttol	;wreg free
  1996  001560  C01C  F06F         	movff	?___fttol,printf@val
  1997  001564  C01D  F070         	movff	?___fttol+1,printf@val+1
  1998  001568  C01E  F071         	movff	?___fttol+2,printf@val+2
  1999  00156C  C01F  F072         	movff	?___fttol+3,printf@val+3
  2000                           
  2001                           ;doprnt.c: 1228: while(c--) {
  2002  001570  D06B               	goto	l2532
  2003  001572                     l2526:
  2004                           
  2005                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2006  001572  C06F  F001         	movff	printf@val,___lldiv@dividend
  2007  001576  C070  F002         	movff	printf@val+1,___lldiv@dividend+1
  2008  00157A  C071  F003         	movff	printf@val+2,___lldiv@dividend+2
  2009  00157E  C072  F004         	movff	printf@val+3,___lldiv@dividend+3
  2010  001582  507C               	movf	printf@c,w,c
  2011  001584  0D04               	mullw	4
  2012  001586  0E01               	movlw	low _dpowers
  2013  001588  24F3               	addwf	prodl,w,c
  2014  00158A  6EF6               	movwf	tblptrl,c
  2015  00158C  0E10               	movlw	high _dpowers
  2016  00158E  20F4               	addwfc	prodh,w,c
  2017  001590  6EF7               	movwf	tblptrh,c
  2018  001592                     	if	0	;There are less than 3 active tblptr bytes
  2019  001592                     	endif
  2020  001592  0009               	tblrd		*+
  2021  001594  CFF5 F005          	movff	tablat,___lldiv@divisor
  2022  001598  0009               	tblrd		*+
  2023  00159A  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2024  00159E  0009               	tblrd		*+
  2025  0015A0  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2026  0015A4  000A               	tblrd		*-
  2027  0015A6  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2028  0015AA  EC32  F014         	call	___lldiv	;wreg free
  2029  0015AE  C001  F075         	movff	?___lldiv,printf@tmpval
  2030  0015B2  C002  F076         	movff	?___lldiv+1,printf@tmpval+1
  2031  0015B6  C003  F077         	movff	?___lldiv+2,printf@tmpval+2
  2032  0015BA  C004  F078         	movff	?___lldiv+3,printf@tmpval+3
  2033                           
  2034                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2035  0015BE  C075  F001         	movff	printf@tmpval,___llmod@dividend
  2036  0015C2  C076  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  2037  0015C6  C077  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  2038  0015CA  C078  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  2039  0015CE  0E0A               	movlw	10
  2040  0015D0  6E05               	movwf	___llmod@divisor,c
  2041  0015D2  0E00               	movlw	0
  2042  0015D4  6E06               	movwf	___llmod@divisor+1,c
  2043  0015D6  0E00               	movlw	0
  2044  0015D8  6E07               	movwf	___llmod@divisor+2,c
  2045  0015DA  0E00               	movlw	0
  2046  0015DC  6E08               	movwf	___llmod@divisor+3,c
  2047  0015DE  ECB9  F014         	call	___llmod	;wreg free
  2048  0015E2  C001  F075         	movff	?___llmod,printf@tmpval
  2049  0015E6  C002  F076         	movff	?___llmod+1,printf@tmpval+1
  2050  0015EA  C003  F077         	movff	?___llmod+2,printf@tmpval+2
  2051  0015EE  C004  F078         	movff	?___llmod+3,printf@tmpval+3
  2052                           
  2053                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  2054  0015F2  5075               	movf	printf@tmpval,w,c
  2055  0015F4  0F30               	addlw	48
  2056  0015F6  EC0C  F016         	call	_putch
  2057                           
  2058                           ;doprnt.c: 1232: val %= dpowers[c];
  2059  0015FA  C06F  F001         	movff	printf@val,___llmod@dividend
  2060  0015FE  C070  F002         	movff	printf@val+1,___llmod@dividend+1
  2061  001602  C071  F003         	movff	printf@val+2,___llmod@dividend+2
  2062  001606  C072  F004         	movff	printf@val+3,___llmod@dividend+3
  2063  00160A  507C               	movf	printf@c,w,c
  2064  00160C  0D04               	mullw	4
  2065  00160E  0E01               	movlw	low _dpowers
  2066  001610  24F3               	addwf	prodl,w,c
  2067  001612  6EF6               	movwf	tblptrl,c
  2068  001614  0E10               	movlw	high _dpowers
  2069  001616  20F4               	addwfc	prodh,w,c
  2070  001618  6EF7               	movwf	tblptrh,c
  2071  00161A                     	if	0	;There are less than 3 active tblptr bytes
  2072  00161A                     	endif
  2073  00161A  0009               	tblrd		*+
  2074  00161C  CFF5 F005          	movff	tablat,___llmod@divisor
  2075  001620  0009               	tblrd		*+
  2076  001622  CFF5 F006          	movff	tablat,___llmod@divisor+1
  2077  001626  0009               	tblrd		*+
  2078  001628  CFF5 F007          	movff	tablat,___llmod@divisor+2
  2079  00162C  000A               	tblrd		*-
  2080  00162E  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2081  001632  ECB9  F014         	call	___llmod	;wreg free
  2082  001636  C001  F06F         	movff	?___llmod,printf@val
  2083  00163A  C002  F070         	movff	?___llmod+1,printf@val+1
  2084  00163E  C003  F071         	movff	?___llmod+2,printf@val+2
  2085  001642  C004  F072         	movff	?___llmod+3,printf@val+3
  2086  001646  D000               	goto	l2532
  2087  001648                     l2532:
  2088  001648  067C               	decf	printf@c,f,c
  2089  00164A  287C               	incf	printf@c,w,c
  2090  00164C  B4D8               	btfsc	status,2,c
  2091  00164E  D009               	goto	l2538
  2092  001650  D790               	goto	l2526
  2093                           
  2094                           ;doprnt.c: 1233: }
  2095                           ;doprnt.c: 1235: while(prec) {
  2096  001652  D007               	goto	l2538
  2097  001654                     l2534:
  2098                           
  2099                           ;doprnt.c: 1236: (putch('0') );
  2100  001654  0E30               	movlw	48
  2101  001656  EC0C  F016         	call	_putch
  2102                           
  2103                           ;doprnt.c: 1237: prec--;
  2104  00165A  066D               	decf	printf@prec,f,c
  2105  00165C  A0D8               	btfss	status,0,c
  2106  00165E  066E               	decf	printf@prec+1,f,c
  2107  001660  D000               	goto	l2538
  2108  001662                     l2538:
  2109  001662  506D               	movf	printf@prec,w,c
  2110  001664  106E               	iorwf	printf@prec+1,w,c
  2111  001666  B4D8               	btfsc	status,2,c
  2112  001668  D010               	goto	l2544
  2113  00166A  D7F4               	goto	l2534
  2114                           
  2115                           ;doprnt.c: 1238: }
  2116                           ;doprnt.c: 1245: continue;
  2117  00166C  D00E               	goto	l2544
  2118  00166E                     l2540:
  2119                           
  2120                           ;doprnt.c: 1246: }
  2121                           ;doprnt.c: 1422: {
  2122                           ;doprnt.c: 1438: if(flag & 0x03)
  2123  00166E  0E03               	movlw	3
  2124  001670  146B               	andwf	printf@flag,w,c
  2125  001672  6E60               	movwf	??_printf& (0+255),c
  2126  001674  0E00               	movlw	0
  2127  001676  146C               	andwf	printf@flag+1,w,c
  2128  001678  6E61               	movwf	(??_printf+1)& (0+255),c
  2129  00167A  5060               	movf	??_printf,w,c
  2130  00167C  1061               	iorwf	??_printf+1,w,c
  2131  00167E  B4D8               	btfsc	status,2,c
  2132  001680  D004               	goto	l2544
  2133                           
  2134                           ;doprnt.c: 1439: (putch('-') );
  2135  001682  0E2D               	movlw	45
  2136  001684  EC0C  F016         	call	_putch
  2137  001688  D000               	goto	l2544
  2138  00168A                     l2544:
  2139  00168A  C05B  FFF6         	movff	printf@f,tblptrl
  2140  00168E  C05C  FFF7         	movff	printf@f+1,tblptrh
  2141  001692  4A5B               	infsnz	printf@f,f,c
  2142  001694  2A5C               	incf	printf@f+1,f,c
  2143  001696                     	if	0	;tblptru may be non-zero
  2144  001696                     	endif
  2145  001696                     	if	0	;tblptru may be non-zero
  2146  001696                     	endif
  2147  001696  0008               	tblrd		*
  2148  001698  CFF5 F07C          	movff	tablat,printf@c
  2149  00169C  507C               	movf	printf@c,w,c
  2150  00169E  B4D8               	btfsc	status,2,c
  2151  0016A0  D002               	goto	l195
  2152  0016A2  D4F4               	goto	l2396
  2153  0016A4  D000               	goto	l195
  2154  0016A6                     l195:
  2155  0016A6  0012               	return		;funcret
  2156  0016A8                     __end_of_printf:
  2157                           	opt stack 0
  2158                           tblptru	equ	0xFF8
  2159                           tblptrh	equ	0xFF7
  2160                           tblptrl	equ	0xFF6
  2161                           tablat	equ	0xFF5
  2162                           prodh	equ	0xFF4
  2163                           prodl	equ	0xFF3
  2164                           postinc0	equ	0xFEE
  2165                           wreg	equ	0xFE8
  2166                           postdec1	equ	0xFE5
  2167                           plusw1	equ	0xFE3
  2168                           fsr1l	equ	0xFE1
  2169                           indf2	equ	0xFDF
  2170                           postinc2	equ	0xFDE
  2171                           postdec2	equ	0xFDD
  2172                           plusw2	equ	0xFDB
  2173                           fsr2h	equ	0xFDA
  2174                           fsr2l	equ	0xFD9
  2175                           status	equ	0xFD8
  2176                           
  2177 ;; *************** function _scale *****************
  2178 ;; Defined at:
  2179 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2180 ;; Parameters:    Size  Location     Type
  2181 ;;  scl             1    wreg     char 
  2182 ;; Auto vars:     Size  Location     Type
  2183 ;;  scl             1   68[COMRAM] char 
  2184 ;; Return value:  Size  Location     Type
  2185 ;;                  3   62[COMRAM] char 
  2186 ;; Registers used:
  2187 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2188 ;; Tracked objects:
  2189 ;;		On entry : 0/0
  2190 ;;		On exit  : 0/0
  2191 ;;		Unchanged: 0/0
  2192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2193 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2194 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2196 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2197 ;;Total ram usage:        7 bytes
  2198 ;; Hardware stack levels used:    1
  2199 ;; Hardware stack levels required when called:    2
  2200 ;; This function calls:
  2201 ;;		___awdiv
  2202 ;;		___awmod
  2203 ;;		___ftmul
  2204 ;;		___wmul
  2205 ;; This function is called by:
  2206 ;;		_printf
  2207 ;; This function uses a non-reentrant model
  2208 ;;
  2209                           
  2210                           	psect	text2
  2211  0016A8                     __ptext2:
  2212                           	opt stack 0
  2213  0016A8                     _scale:
  2214                           	opt stack 27
  2215                           
  2216                           ;incstack = 0
  2217                           ;scale@scl stored from wreg
  2218  0016A8  6E45               	movwf	scale@scl,c
  2219                           
  2220                           ;doprnt.c: 428: if(scl < 0) {
  2221  0016AA  AE45               	btfss	scale@scl,7,c
  2222  0016AC  D0EF               	goto	l2120
  2223                           
  2224                           ;doprnt.c: 429: scl = -scl;
  2225  0016AE  6C45               	negf	scale@scl,c
  2226                           
  2227                           ;doprnt.c: 430: if(scl>=110)
  2228  0016B0  5045               	movf	scale@scl,w,c
  2229  0016B2  0A80               	xorlw	128
  2230  0016B4  0F12               	addlw	-238
  2231  0016B6  A0D8               	btfss	status,0,c
  2232  0016B8  D08D               	goto	l2110
  2233                           
  2234                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2235  0016BA  0E00               	movlw	0
  2236  0016BC  6E3C               	movwf	___wmul@multiplicand+1,c
  2237  0016BE  0E03               	movlw	3
  2238  0016C0  6E3B               	movwf	___wmul@multiplicand,c
  2239  0016C2  0E00               	movlw	0
  2240  0016C4  6E34               	movwf	___awdiv@divisor+1,c
  2241  0016C6  0E0A               	movlw	10
  2242  0016C8  6E33               	movwf	___awdiv@divisor,c
  2243  0016CA  0E00               	movlw	0
  2244  0016CC  6E2E               	movwf	___awmod@divisor+1,c
  2245  0016CE  0E64               	movlw	100
  2246  0016D0  6E2D               	movwf	___awmod@divisor,c
  2247  0016D2  5045               	movf	scale@scl,w,c
  2248  0016D4  6E2B               	movwf	___awmod@dividend,c
  2249  0016D6  6A2C               	clrf	___awmod@dividend+1,c
  2250  0016D8  BE2B               	btfsc	___awmod@dividend,7,c
  2251  0016DA  062C               	decf	___awmod@dividend+1,f,c
  2252  0016DC  EC78  F014         	call	___awmod	;wreg free
  2253  0016E0  C02B  F031         	movff	?___awmod,___awdiv@dividend
  2254  0016E4  C02C  F032         	movff	?___awmod+1,___awdiv@dividend+1
  2255  0016E8  EC9C  F013         	call	___awdiv	;wreg free
  2256  0016EC  0E09               	movlw	9
  2257  0016EE  2431               	addwf	?___awdiv,w,c
  2258  0016F0  6E39               	movwf	___wmul@multiplier,c
  2259  0016F2  0E00               	movlw	0
  2260  0016F4  2032               	addwfc	?___awdiv+1,w,c
  2261  0016F6  6E3A               	movwf	___wmul@multiplier+1,c
  2262  0016F8  ECAE  F015         	call	___wmul	;wreg free
  2263  0016FC  0E29               	movlw	low __npowers_
  2264  0016FE  2439               	addwf	?___wmul,w,c
  2265  001700  6EF6               	movwf	tblptrl,c
  2266  001702  0E10               	movlw	high __npowers_
  2267  001704  203A               	addwfc	?___wmul+1,w,c
  2268  001706  6EF7               	movwf	tblptrh,c
  2269  001708                     	if	0	;There are less than 3 active tblptr bytes
  2270  001708                     	endif
  2271  001708  0009               	tblrd		*+
  2272  00170A  CFF5 F010          	movff	tablat,___ftmul@f2
  2273  00170E  0009               	tblrd		*+
  2274  001710  CFF5 F011          	movff	tablat,___ftmul@f2+1
  2275  001714  000A               	tblrd		*-
  2276  001716  CFF5 F012          	movff	tablat,___ftmul@f2+2
  2277  00171A  0E00               	movlw	0
  2278  00171C  6E34               	movwf	___awdiv@divisor+1,c
  2279  00171E  0E64               	movlw	100
  2280  001720  6E33               	movwf	___awdiv@divisor,c
  2281  001722  5045               	movf	scale@scl,w,c
  2282  001724  6E31               	movwf	___awdiv@dividend,c
  2283  001726  6A32               	clrf	___awdiv@dividend+1,c
  2284  001728  BE31               	btfsc	___awdiv@dividend,7,c
  2285  00172A  0632               	decf	___awdiv@dividend+1,f,c
  2286  00172C  EC9C  F013         	call	___awdiv	;wreg free
  2287  001730  0E12               	movlw	18
  2288  001732  2431               	addwf	?___awdiv,w,c
  2289  001734  6E39               	movwf	___wmul@multiplier,c
  2290  001736  0E00               	movlw	0
  2291  001738  2032               	addwfc	?___awdiv+1,w,c
  2292  00173A  6E3A               	movwf	___wmul@multiplier+1,c
  2293  00173C  0E00               	movlw	0
  2294  00173E  6E3C               	movwf	___wmul@multiplicand+1,c
  2295  001740  0E03               	movlw	3
  2296  001742  6E3B               	movwf	___wmul@multiplicand,c
  2297  001744  ECAE  F015         	call	___wmul	;wreg free
  2298  001748  0E29               	movlw	low __npowers_
  2299  00174A  2439               	addwf	?___wmul,w,c
  2300  00174C  6EF6               	movwf	tblptrl,c
  2301  00174E  0E10               	movlw	high __npowers_
  2302  001750  203A               	addwfc	?___wmul+1,w,c
  2303  001752  6EF7               	movwf	tblptrh,c
  2304  001754                     	if	0	;There are less than 3 active tblptr bytes
  2305  001754                     	endif
  2306  001754  0009               	tblrd		*+
  2307  001756  CFF5 F00D          	movff	tablat,___ftmul@f1
  2308  00175A  0009               	tblrd		*+
  2309  00175C  CFF5 F00E          	movff	tablat,___ftmul@f1+1
  2310  001760  000A               	tblrd		*-
  2311  001762  CFF5 F00F          	movff	tablat,___ftmul@f1+2
  2312  001766  ECD9  F011         	call	___ftmul	;wreg free
  2313  00176A  C00D  F042         	movff	?___ftmul,_scale$1188
  2314  00176E  C00E  F043         	movff	?___ftmul+1,_scale$1188+1
  2315  001772  C00F  F044         	movff	?___ftmul+2,_scale$1188+2
  2316                           
  2317                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2318  001776  C042  F00D         	movff	_scale$1188,___ftmul@f1
  2319  00177A  C043  F00E         	movff	_scale$1188+1,___ftmul@f1+1
  2320  00177E  C044  F00F         	movff	_scale$1188+2,___ftmul@f1+2
  2321  001782  0E00               	movlw	0
  2322  001784  6E3C               	movwf	___wmul@multiplicand+1,c
  2323  001786  0E03               	movlw	3
  2324  001788  6E3B               	movwf	___wmul@multiplicand,c
  2325  00178A  0E00               	movlw	0
  2326  00178C  6E2E               	movwf	___awmod@divisor+1,c
  2327  00178E  0E0A               	movlw	10
  2328  001790  6E2D               	movwf	___awmod@divisor,c
  2329  001792  5045               	movf	scale@scl,w,c
  2330  001794  6E2B               	movwf	___awmod@dividend,c
  2331  001796  6A2C               	clrf	___awmod@dividend+1,c
  2332  001798  BE2B               	btfsc	___awmod@dividend,7,c
  2333  00179A  062C               	decf	___awmod@dividend+1,f,c
  2334  00179C  EC78  F014         	call	___awmod	;wreg free
  2335  0017A0  C02B  F039         	movff	?___awmod,___wmul@multiplier
  2336  0017A4  C02C  F03A         	movff	?___awmod+1,___wmul@multiplier+1
  2337  0017A8  ECAE  F015         	call	___wmul	;wreg free
  2338  0017AC  0E29               	movlw	low __npowers_
  2339  0017AE  2439               	addwf	?___wmul,w,c
  2340  0017B0  6EF6               	movwf	tblptrl,c
  2341  0017B2  0E10               	movlw	high __npowers_
  2342  0017B4  203A               	addwfc	?___wmul+1,w,c
  2343  0017B6  6EF7               	movwf	tblptrh,c
  2344  0017B8                     	if	0	;There are less than 3 active tblptr bytes
  2345  0017B8                     	endif
  2346  0017B8  0009               	tblrd		*+
  2347  0017BA  CFF5 F010          	movff	tablat,___ftmul@f2
  2348  0017BE  0009               	tblrd		*+
  2349  0017C0  CFF5 F011          	movff	tablat,___ftmul@f2+1
  2350  0017C4  000A               	tblrd		*-
  2351  0017C6  CFF5 F012          	movff	tablat,___ftmul@f2+2
  2352  0017CA  ECD9  F011         	call	___ftmul	;wreg free
  2353  0017CE  D141               	goto	L5
  2354  0017D0  D15A               	goto	l139
  2355  0017D2  D054               	goto	l2116
  2356  0017D4                     l2110:
  2357                           
  2358                           ;doprnt.c: 432: else if(scl > 10)
  2359  0017D4  5045               	movf	scale@scl,w,c
  2360  0017D6  0A80               	xorlw	128
  2361  0017D8  0F75               	addlw	-139
  2362  0017DA  A0D8               	btfss	status,0,c
  2363  0017DC  D04F               	goto	l2116
  2364                           
  2365                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2366  0017DE  0E00               	movlw	0
  2367  0017E0  6E34               	movwf	___awdiv@divisor+1,c
  2368  0017E2  0E0A               	movlw	10
  2369  0017E4  6E33               	movwf	___awdiv@divisor,c
  2370  0017E6  5045               	movf	scale@scl,w,c
  2371  0017E8  6E31               	movwf	___awdiv@dividend,c
  2372  0017EA  6A32               	clrf	___awdiv@dividend+1,c
  2373  0017EC  BE31               	btfsc	___awdiv@dividend,7,c
  2374  0017EE  0632               	decf	___awdiv@dividend+1,f,c
  2375  0017F0  EC9C  F013         	call	___awdiv	;wreg free
  2376  0017F4  0E09               	movlw	9
  2377  0017F6  2431               	addwf	?___awdiv,w,c
  2378  0017F8  6E39               	movwf	___wmul@multiplier,c
  2379  0017FA  0E00               	movlw	0
  2380  0017FC  2032               	addwfc	?___awdiv+1,w,c
  2381  0017FE  6E3A               	movwf	___wmul@multiplier+1,c
  2382  001800  0E00               	movlw	0
  2383  001802  6E3C               	movwf	___wmul@multiplicand+1,c
  2384  001804  0E03               	movlw	3
  2385  001806  6E3B               	movwf	___wmul@multiplicand,c
  2386  001808  ECAE  F015         	call	___wmul	;wreg free
  2387  00180C  0E29               	movlw	low __npowers_
  2388  00180E  2439               	addwf	?___wmul,w,c
  2389  001810  6EF6               	movwf	tblptrl,c
  2390  001812  0E10               	movlw	high __npowers_
  2391  001814  203A               	addwfc	?___wmul+1,w,c
  2392  001816  6EF7               	movwf	tblptrh,c
  2393  001818                     	if	0	;There are less than 3 active tblptr bytes
  2394  001818                     	endif
  2395  001818  0009               	tblrd		*+
  2396  00181A  CFF5 F00D          	movff	tablat,___ftmul@f1
  2397  00181E  0009               	tblrd		*+
  2398  001820  CFF5 F00E          	movff	tablat,___ftmul@f1+1
  2399  001824  000A               	tblrd		*-
  2400  001826  CFF5 F00F          	movff	tablat,___ftmul@f1+2
  2401  00182A  0E00               	movlw	0
  2402  00182C  6E3C               	movwf	___wmul@multiplicand+1,c
  2403  00182E  0E03               	movlw	3
  2404  001830  6E3B               	movwf	___wmul@multiplicand,c
  2405  001832  0E00               	movlw	0
  2406  001834  6E2E               	movwf	___awmod@divisor+1,c
  2407  001836  0E0A               	movlw	10
  2408  001838  6E2D               	movwf	___awmod@divisor,c
  2409  00183A  5045               	movf	scale@scl,w,c
  2410  00183C  6E2B               	movwf	___awmod@dividend,c
  2411  00183E  6A2C               	clrf	___awmod@dividend+1,c
  2412  001840  BE2B               	btfsc	___awmod@dividend,7,c
  2413  001842  062C               	decf	___awmod@dividend+1,f,c
  2414  001844  EC78  F014         	call	___awmod	;wreg free
  2415  001848  C02B  F039         	movff	?___awmod,___wmul@multiplier
  2416  00184C  C02C  F03A         	movff	?___awmod+1,___wmul@multiplier+1
  2417  001850  ECAE  F015         	call	___wmul	;wreg free
  2418  001854  0E29               	movlw	low __npowers_
  2419  001856  2439               	addwf	?___wmul,w,c
  2420  001858  6EF6               	movwf	tblptrl,c
  2421  00185A  0E10               	movlw	high __npowers_
  2422  00185C  203A               	addwfc	?___wmul+1,w,c
  2423  00185E  6EF7               	movwf	tblptrh,c
  2424  001860                     	if	0	;There are less than 3 active tblptr bytes
  2425  001860                     	endif
  2426  001860  0009               	tblrd		*+
  2427  001862  CFF5 F010          	movff	tablat,___ftmul@f2
  2428  001866  0009               	tblrd		*+
  2429  001868  CFF5 F011          	movff	tablat,___ftmul@f2+1
  2430  00186C  000A               	tblrd		*-
  2431  00186E  CFF5 F012          	movff	tablat,___ftmul@f2+2
  2432  001872  ECD9  F011         	call	___ftmul	;wreg free
  2433  001876  D0ED               	goto	L5
  2434  001878  D106               	goto	l139
  2435  00187A  D000               	goto	l2116
  2436  00187C                     l2116:
  2437                           
  2438                           ;doprnt.c: 434: return _npowers_[scl];
  2439  00187C  5045               	movf	scale@scl,w,c
  2440  00187E  0D03               	mullw	3
  2441  001880  0E29               	movlw	low __npowers_
  2442  001882  24F3               	addwf	prodl,w,c
  2443  001884  6EF6               	movwf	tblptrl,c
  2444  001886  0E10               	movlw	high __npowers_
  2445  001888  D0F2               	goto	L4
  2446  00188A  D0FD               	goto	l139
  2447  00188C                     l2120:
  2448                           
  2449                           ;doprnt.c: 435: }
  2450                           ;doprnt.c: 436: if(scl>=110)
  2451  00188C  5045               	movf	scale@scl,w,c
  2452  00188E  0A80               	xorlw	128
  2453  001890  0F12               	addlw	-238
  2454  001892  A0D8               	btfss	status,0,c
  2455  001894  D08D               	goto	l2128
  2456                           
  2457                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2458  001896  0E00               	movlw	0
  2459  001898  6E3C               	movwf	___wmul@multiplicand+1,c
  2460  00189A  0E03               	movlw	3
  2461  00189C  6E3B               	movwf	___wmul@multiplicand,c
  2462  00189E  0E00               	movlw	0
  2463  0018A0  6E34               	movwf	___awdiv@divisor+1,c
  2464  0018A2  0E0A               	movlw	10
  2465  0018A4  6E33               	movwf	___awdiv@divisor,c
  2466  0018A6  0E00               	movlw	0
  2467  0018A8  6E2E               	movwf	___awmod@divisor+1,c
  2468  0018AA  0E64               	movlw	100
  2469  0018AC  6E2D               	movwf	___awmod@divisor,c
  2470  0018AE  5045               	movf	scale@scl,w,c
  2471  0018B0  6E2B               	movwf	___awmod@dividend,c
  2472  0018B2  6A2C               	clrf	___awmod@dividend+1,c
  2473  0018B4  BE2B               	btfsc	___awmod@dividend,7,c
  2474  0018B6  062C               	decf	___awmod@dividend+1,f,c
  2475  0018B8  EC78  F014         	call	___awmod	;wreg free
  2476  0018BC  C02B  F031         	movff	?___awmod,___awdiv@dividend
  2477  0018C0  C02C  F032         	movff	?___awmod+1,___awdiv@dividend+1
  2478  0018C4  EC9C  F013         	call	___awdiv	;wreg free
  2479  0018C8  0E09               	movlw	9
  2480  0018CA  2431               	addwf	?___awdiv,w,c
  2481  0018CC  6E39               	movwf	___wmul@multiplier,c
  2482  0018CE  0E00               	movlw	0
  2483  0018D0  2032               	addwfc	?___awdiv+1,w,c
  2484  0018D2  6E3A               	movwf	___wmul@multiplier+1,c
  2485  0018D4  ECAE  F015         	call	___wmul	;wreg free
  2486  0018D8  0E50               	movlw	low __powers_
  2487  0018DA  2439               	addwf	?___wmul,w,c
  2488  0018DC  6EF6               	movwf	tblptrl,c
  2489  0018DE  0E10               	movlw	high __powers_
  2490  0018E0  203A               	addwfc	?___wmul+1,w,c
  2491  0018E2  6EF7               	movwf	tblptrh,c
  2492  0018E4                     	if	0	;There are less than 3 active tblptr bytes
  2493  0018E4                     	endif
  2494  0018E4  0009               	tblrd		*+
  2495  0018E6  CFF5 F010          	movff	tablat,___ftmul@f2
  2496  0018EA  0009               	tblrd		*+
  2497  0018EC  CFF5 F011          	movff	tablat,___ftmul@f2+1
  2498  0018F0  000A               	tblrd		*-
  2499  0018F2  CFF5 F012          	movff	tablat,___ftmul@f2+2
  2500  0018F6  0E00               	movlw	0
  2501  0018F8  6E34               	movwf	___awdiv@divisor+1,c
  2502  0018FA  0E64               	movlw	100
  2503  0018FC  6E33               	movwf	___awdiv@divisor,c
  2504  0018FE  5045               	movf	scale@scl,w,c
  2505  001900  6E31               	movwf	___awdiv@dividend,c
  2506  001902  6A32               	clrf	___awdiv@dividend+1,c
  2507  001904  BE31               	btfsc	___awdiv@dividend,7,c
  2508  001906  0632               	decf	___awdiv@dividend+1,f,c
  2509  001908  EC9C  F013         	call	___awdiv	;wreg free
  2510  00190C  0E12               	movlw	18
  2511  00190E  2431               	addwf	?___awdiv,w,c
  2512  001910  6E39               	movwf	___wmul@multiplier,c
  2513  001912  0E00               	movlw	0
  2514  001914  2032               	addwfc	?___awdiv+1,w,c
  2515  001916  6E3A               	movwf	___wmul@multiplier+1,c
  2516  001918  0E00               	movlw	0
  2517  00191A  6E3C               	movwf	___wmul@multiplicand+1,c
  2518  00191C  0E03               	movlw	3
  2519  00191E  6E3B               	movwf	___wmul@multiplicand,c
  2520  001920  ECAE  F015         	call	___wmul	;wreg free
  2521  001924  0E50               	movlw	low __powers_
  2522  001926  2439               	addwf	?___wmul,w,c
  2523  001928  6EF6               	movwf	tblptrl,c
  2524  00192A  0E10               	movlw	high __powers_
  2525  00192C  203A               	addwfc	?___wmul+1,w,c
  2526  00192E  6EF7               	movwf	tblptrh,c
  2527  001930                     	if	0	;There are less than 3 active tblptr bytes
  2528  001930                     	endif
  2529  001930  0009               	tblrd		*+
  2530  001932  CFF5 F00D          	movff	tablat,___ftmul@f1
  2531  001936  0009               	tblrd		*+
  2532  001938  CFF5 F00E          	movff	tablat,___ftmul@f1+1
  2533  00193C  000A               	tblrd		*-
  2534  00193E  CFF5 F00F          	movff	tablat,___ftmul@f1+2
  2535  001942  ECD9  F011         	call	___ftmul	;wreg free
  2536  001946  C00D  F042         	movff	?___ftmul,_scale$1188
  2537  00194A  C00E  F043         	movff	?___ftmul+1,_scale$1188+1
  2538  00194E  C00F  F044         	movff	?___ftmul+2,_scale$1188+2
  2539                           
  2540                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2541  001952  C042  F00D         	movff	_scale$1188,___ftmul@f1
  2542  001956  C043  F00E         	movff	_scale$1188+1,___ftmul@f1+1
  2543  00195A  C044  F00F         	movff	_scale$1188+2,___ftmul@f1+2
  2544  00195E  0E00               	movlw	0
  2545  001960  6E3C               	movwf	___wmul@multiplicand+1,c
  2546  001962  0E03               	movlw	3
  2547  001964  6E3B               	movwf	___wmul@multiplicand,c
  2548  001966  0E00               	movlw	0
  2549  001968  6E2E               	movwf	___awmod@divisor+1,c
  2550  00196A  0E0A               	movlw	10
  2551  00196C  6E2D               	movwf	___awmod@divisor,c
  2552  00196E  5045               	movf	scale@scl,w,c
  2553  001970  6E2B               	movwf	___awmod@dividend,c
  2554  001972  6A2C               	clrf	___awmod@dividend+1,c
  2555  001974  BE2B               	btfsc	___awmod@dividend,7,c
  2556  001976  062C               	decf	___awmod@dividend+1,f,c
  2557  001978  EC78  F014         	call	___awmod	;wreg free
  2558  00197C  C02B  F039         	movff	?___awmod,___wmul@multiplier
  2559  001980  C02C  F03A         	movff	?___awmod+1,___wmul@multiplier+1
  2560  001984  ECAE  F015         	call	___wmul	;wreg free
  2561  001988  0E50               	movlw	low __powers_
  2562  00198A  2439               	addwf	?___wmul,w,c
  2563  00198C  6EF6               	movwf	tblptrl,c
  2564  00198E  0E10               	movlw	high __powers_
  2565  001990  203A               	addwfc	?___wmul+1,w,c
  2566  001992  6EF7               	movwf	tblptrh,c
  2567  001994                     	if	0	;There are less than 3 active tblptr bytes
  2568  001994                     	endif
  2569  001994  0009               	tblrd		*+
  2570  001996  CFF5 F010          	movff	tablat,___ftmul@f2
  2571  00199A  0009               	tblrd		*+
  2572  00199C  CFF5 F011          	movff	tablat,___ftmul@f2+1
  2573  0019A0  000A               	tblrd		*-
  2574  0019A2  CFF5 F012          	movff	tablat,___ftmul@f2+2
  2575  0019A6  ECD9  F011         	call	___ftmul	;wreg free
  2576  0019AA  D053               	goto	L5
  2577  0019AC  D06C               	goto	l139
  2578  0019AE  D059               	goto	l2134
  2579  0019B0                     l2128:
  2580                           
  2581                           ;doprnt.c: 438: else if(scl > 10)
  2582  0019B0  5045               	movf	scale@scl,w,c
  2583  0019B2  0A80               	xorlw	128
  2584  0019B4  0F75               	addlw	-139
  2585  0019B6  A0D8               	btfss	status,0,c
  2586  0019B8  D054               	goto	l2134
  2587                           
  2588                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2589  0019BA  0E00               	movlw	0
  2590  0019BC  6E34               	movwf	___awdiv@divisor+1,c
  2591  0019BE  0E0A               	movlw	10
  2592  0019C0  6E33               	movwf	___awdiv@divisor,c
  2593  0019C2  5045               	movf	scale@scl,w,c
  2594  0019C4  6E31               	movwf	___awdiv@dividend,c
  2595  0019C6  6A32               	clrf	___awdiv@dividend+1,c
  2596  0019C8  BE31               	btfsc	___awdiv@dividend,7,c
  2597  0019CA  0632               	decf	___awdiv@dividend+1,f,c
  2598  0019CC  EC9C  F013         	call	___awdiv	;wreg free
  2599  0019D0  0E09               	movlw	9
  2600  0019D2  2431               	addwf	?___awdiv,w,c
  2601  0019D4  6E39               	movwf	___wmul@multiplier,c
  2602  0019D6  0E00               	movlw	0
  2603  0019D8  2032               	addwfc	?___awdiv+1,w,c
  2604  0019DA  6E3A               	movwf	___wmul@multiplier+1,c
  2605  0019DC  0E00               	movlw	0
  2606  0019DE  6E3C               	movwf	___wmul@multiplicand+1,c
  2607  0019E0  0E03               	movlw	3
  2608  0019E2  6E3B               	movwf	___wmul@multiplicand,c
  2609  0019E4  ECAE  F015         	call	___wmul	;wreg free
  2610  0019E8  0E50               	movlw	low __powers_
  2611  0019EA  2439               	addwf	?___wmul,w,c
  2612  0019EC  6EF6               	movwf	tblptrl,c
  2613  0019EE  0E10               	movlw	high __powers_
  2614  0019F0  203A               	addwfc	?___wmul+1,w,c
  2615  0019F2  6EF7               	movwf	tblptrh,c
  2616  0019F4                     	if	0	;There are less than 3 active tblptr bytes
  2617  0019F4                     	endif
  2618  0019F4  0009               	tblrd		*+
  2619  0019F6  CFF5 F00D          	movff	tablat,___ftmul@f1
  2620  0019FA  0009               	tblrd		*+
  2621  0019FC  CFF5 F00E          	movff	tablat,___ftmul@f1+1
  2622  001A00  000A               	tblrd		*-
  2623  001A02  CFF5 F00F          	movff	tablat,___ftmul@f1+2
  2624  001A06  0E00               	movlw	0
  2625  001A08  6E3C               	movwf	___wmul@multiplicand+1,c
  2626  001A0A  0E03               	movlw	3
  2627  001A0C  6E3B               	movwf	___wmul@multiplicand,c
  2628  001A0E  0E00               	movlw	0
  2629  001A10  6E2E               	movwf	___awmod@divisor+1,c
  2630  001A12  0E0A               	movlw	10
  2631  001A14  6E2D               	movwf	___awmod@divisor,c
  2632  001A16  5045               	movf	scale@scl,w,c
  2633  001A18  6E2B               	movwf	___awmod@dividend,c
  2634  001A1A  6A2C               	clrf	___awmod@dividend+1,c
  2635  001A1C  BE2B               	btfsc	___awmod@dividend,7,c
  2636  001A1E  062C               	decf	___awmod@dividend+1,f,c
  2637  001A20  EC78  F014         	call	___awmod	;wreg free
  2638  001A24  C02B  F039         	movff	?___awmod,___wmul@multiplier
  2639  001A28  C02C  F03A         	movff	?___awmod+1,___wmul@multiplier+1
  2640  001A2C  ECAE  F015         	call	___wmul	;wreg free
  2641  001A30  0E50               	movlw	low __powers_
  2642  001A32  2439               	addwf	?___wmul,w,c
  2643  001A34  6EF6               	movwf	tblptrl,c
  2644  001A36  0E10               	movlw	high __powers_
  2645  001A38  203A               	addwfc	?___wmul+1,w,c
  2646  001A3A  6EF7               	movwf	tblptrh,c
  2647  001A3C                     	if	0	;There are less than 3 active tblptr bytes
  2648  001A3C                     	endif
  2649  001A3C  0009               	tblrd		*+
  2650  001A3E  CFF5 F010          	movff	tablat,___ftmul@f2
  2651  001A42  0009               	tblrd		*+
  2652  001A44  CFF5 F011          	movff	tablat,___ftmul@f2+1
  2653  001A48  000A               	tblrd		*-
  2654  001A4A  CFF5 F012          	movff	tablat,___ftmul@f2+2
  2655  001A4E  ECD9  F011         	call	___ftmul	;wreg free
  2656  001A52                     L5:
  2657  001A52  C00D  F03F         	movff	?___ftmul,?_scale
  2658  001A56  C00E  F040         	movff	?___ftmul+1,?_scale+1
  2659  001A5A  C00F  F041         	movff	?___ftmul+2,?_scale+2
  2660  001A5E  D013               	goto	l139
  2661  001A60  D000               	goto	l2134
  2662  001A62                     l2134:
  2663                           
  2664                           ;doprnt.c: 440: return _powers_[scl];
  2665  001A62  5045               	movf	scale@scl,w,c
  2666  001A64  0D03               	mullw	3
  2667  001A66  0E50               	movlw	low __powers_
  2668  001A68  24F3               	addwf	prodl,w,c
  2669  001A6A  6EF6               	movwf	tblptrl,c
  2670  001A6C  0E10               	movlw	high __powers_
  2671  001A6E                     L4:
  2672  001A6E  20F4               	addwfc	prodh,w,c
  2673  001A70  6EF7               	movwf	tblptrh,c
  2674  001A72                     	if	0	;There are less than 3 active tblptr bytes
  2675  001A72                     	endif
  2676  001A72  0009               	tblrd		*+
  2677  001A74  CFF5 F03F          	movff	tablat,?_scale
  2678  001A78  0009               	tblrd		*+
  2679  001A7A  CFF5 F040          	movff	tablat,?_scale+1
  2680  001A7E  000A               	tblrd		*-
  2681  001A80  CFF5 F041          	movff	tablat,?_scale+2
  2682  001A84  D000               	goto	l139
  2683  001A86                     l139:
  2684  001A86  0012               	return		;funcret
  2685  001A88                     __end_of_scale:
  2686                           	opt stack 0
  2687                           tblptru	equ	0xFF8
  2688                           tblptrh	equ	0xFF7
  2689                           tblptrl	equ	0xFF6
  2690                           tablat	equ	0xFF5
  2691                           prodh	equ	0xFF4
  2692                           prodl	equ	0xFF3
  2693                           postinc0	equ	0xFEE
  2694                           wreg	equ	0xFE8
  2695                           postdec1	equ	0xFE5
  2696                           plusw1	equ	0xFE3
  2697                           fsr1l	equ	0xFE1
  2698                           indf2	equ	0xFDF
  2699                           postinc2	equ	0xFDE
  2700                           postdec2	equ	0xFDD
  2701                           plusw2	equ	0xFDB
  2702                           fsr2h	equ	0xFDA
  2703                           fsr2l	equ	0xFD9
  2704                           status	equ	0xFD8
  2705                           
  2706 ;; *************** function _putch *****************
  2707 ;; Defined at:
  2708 ;;		line 31 in file "Lab6pB2.c"
  2709 ;; Parameters:    Size  Location     Type
  2710 ;;  c               1    wreg     unsigned char 
  2711 ;; Auto vars:     Size  Location     Type
  2712 ;;  c               1    0[COMRAM] unsigned char 
  2713 ;; Return value:  Size  Location     Type
  2714 ;;		None               void
  2715 ;; Registers used:
  2716 ;;		wreg
  2717 ;; Tracked objects:
  2718 ;;		On entry : 0/0
  2719 ;;		On exit  : 0/0
  2720 ;;		Unchanged: 0/0
  2721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2723 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2725 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2726 ;;Total ram usage:        1 bytes
  2727 ;; Hardware stack levels used:    1
  2728 ;; This function calls:
  2729 ;;		Nothing
  2730 ;; This function is called by:
  2731 ;;		_printf
  2732 ;; This function uses a non-reentrant model
  2733 ;;
  2734                           
  2735                           	psect	text3
  2736  002C18                     __ptext3:
  2737                           	opt stack 0
  2738  002C18                     _putch:
  2739                           	opt stack 29
  2740                           
  2741                           ;incstack = 0
  2742                           ;putch@c stored from wreg
  2743  002C18  6E01               	movwf	putch@c,c
  2744                           
  2745                           ;Lab6pB2.c: 33: while (!TRMT);
  2746  002C1A  D000               	goto	l70
  2747  002C1C                     l70:
  2748  002C1C  A2AC               	btfss	4012,1,c	;volatile
  2749  002C1E  D7FE               	goto	l70
  2750                           
  2751                           ;Lab6pB2.c: 34: TXREG = c;
  2752  002C20  C001  FFAD         	movff	putch@c,4013	;volatile
  2753  002C24  0012               	return		;funcret
  2754  002C26                     __end_of_putch:
  2755                           	opt stack 0
  2756                           tblptru	equ	0xFF8
  2757                           tblptrh	equ	0xFF7
  2758                           tblptrl	equ	0xFF6
  2759                           tablat	equ	0xFF5
  2760                           prodh	equ	0xFF4
  2761                           prodl	equ	0xFF3
  2762                           postinc0	equ	0xFEE
  2763                           wreg	equ	0xFE8
  2764                           postdec1	equ	0xFE5
  2765                           plusw1	equ	0xFE3
  2766                           fsr1l	equ	0xFE1
  2767                           indf2	equ	0xFDF
  2768                           postinc2	equ	0xFDE
  2769                           postdec2	equ	0xFDD
  2770                           plusw2	equ	0xFDB
  2771                           fsr2h	equ	0xFDA
  2772                           fsr2l	equ	0xFD9
  2773                           status	equ	0xFD8
  2774                           
  2775 ;; *************** function _fround *****************
  2776 ;; Defined at:
  2777 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2778 ;; Parameters:    Size  Location     Type
  2779 ;;  prec            1    wreg     unsigned char 
  2780 ;; Auto vars:     Size  Location     Type
  2781 ;;  prec            1   71[COMRAM] unsigned char 
  2782 ;; Return value:  Size  Location     Type
  2783 ;;                  3   62[COMRAM] unsigned char 
  2784 ;; Registers used:
  2785 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2786 ;; Tracked objects:
  2787 ;;		On entry : 0/0
  2788 ;;		On exit  : 0/0
  2789 ;;		Unchanged: 0/0
  2790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2791 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2792 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2794 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2795 ;;Total ram usage:       10 bytes
  2796 ;; Hardware stack levels used:    1
  2797 ;; Hardware stack levels required when called:    2
  2798 ;; This function calls:
  2799 ;;		___awdiv
  2800 ;;		___awmod
  2801 ;;		___ftmul
  2802 ;;		___wmul
  2803 ;; This function is called by:
  2804 ;;		_printf
  2805 ;; This function uses a non-reentrant model
  2806 ;;
  2807                           
  2808                           	psect	text4
  2809  001D90                     __ptext4:
  2810                           	opt stack 0
  2811  001D90                     _fround:
  2812                           	opt stack 27
  2813                           
  2814                           ;incstack = 0
  2815                           ;fround@prec stored from wreg
  2816  001D90  6E48               	movwf	fround@prec,c
  2817                           
  2818                           ;doprnt.c: 413: if(prec>=110)
  2819  001D92  0E6D               	movlw	109
  2820  001D94  6448               	cpfsgt	fround@prec,c
  2821  001D96  D09B               	goto	l2088
  2822                           
  2823                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2824  001D98  0E00               	movlw	0
  2825  001D9A  6E3C               	movwf	___wmul@multiplicand+1,c
  2826  001D9C  0E03               	movlw	3
  2827  001D9E  6E3B               	movwf	___wmul@multiplicand,c
  2828  001DA0  0E00               	movlw	0
  2829  001DA2  6E34               	movwf	___awdiv@divisor+1,c
  2830  001DA4  0E0A               	movlw	10
  2831  001DA6  6E33               	movwf	___awdiv@divisor,c
  2832  001DA8  0E00               	movlw	0
  2833  001DAA  6E2E               	movwf	___awmod@divisor+1,c
  2834  001DAC  0E64               	movlw	100
  2835  001DAE  6E2D               	movwf	___awmod@divisor,c
  2836  001DB0  C048  F02B         	movff	fround@prec,___awmod@dividend
  2837  001DB4  6A2C               	clrf	___awmod@dividend+1,c
  2838  001DB6  EC78  F014         	call	___awmod	;wreg free
  2839  001DBA  C02B  F031         	movff	?___awmod,___awdiv@dividend
  2840  001DBE  C02C  F032         	movff	?___awmod+1,___awdiv@dividend+1
  2841  001DC2  EC9C  F013         	call	___awdiv	;wreg free
  2842  001DC6  0E09               	movlw	9
  2843  001DC8  2431               	addwf	?___awdiv,w,c
  2844  001DCA  6E39               	movwf	___wmul@multiplier,c
  2845  001DCC  0E00               	movlw	0
  2846  001DCE  2032               	addwfc	?___awdiv+1,w,c
  2847  001DD0  6E3A               	movwf	___wmul@multiplier+1,c
  2848  001DD2  ECAE  F015         	call	___wmul	;wreg free
  2849  001DD6  0E29               	movlw	low __npowers_
  2850  001DD8  2439               	addwf	?___wmul,w,c
  2851  001DDA  6EF6               	movwf	tblptrl,c
  2852  001DDC  0E10               	movlw	high __npowers_
  2853  001DDE  203A               	addwfc	?___wmul+1,w,c
  2854  001DE0  6EF7               	movwf	tblptrh,c
  2855  001DE2                     	if	0	;There are less than 3 active tblptr bytes
  2856  001DE2                     	endif
  2857  001DE2  0009               	tblrd		*+
  2858  001DE4  CFF5 F010          	movff	tablat,___ftmul@f2
  2859  001DE8  0009               	tblrd		*+
  2860  001DEA  CFF5 F011          	movff	tablat,___ftmul@f2+1
  2861  001DEE  000A               	tblrd		*-
  2862  001DF0  CFF5 F012          	movff	tablat,___ftmul@f2+2
  2863  001DF4  0E00               	movlw	0
  2864  001DF6  6E34               	movwf	___awdiv@divisor+1,c
  2865  001DF8  0E64               	movlw	100
  2866  001DFA  6E33               	movwf	___awdiv@divisor,c
  2867  001DFC  C048  F031         	movff	fround@prec,___awdiv@dividend
  2868  001E00  6A32               	clrf	___awdiv@dividend+1,c
  2869  001E02  EC9C  F013         	call	___awdiv	;wreg free
  2870  001E06  0E12               	movlw	18
  2871  001E08  2431               	addwf	?___awdiv,w,c
  2872  001E0A  6E39               	movwf	___wmul@multiplier,c
  2873  001E0C  0E00               	movlw	0
  2874  001E0E  2032               	addwfc	?___awdiv+1,w,c
  2875  001E10  6E3A               	movwf	___wmul@multiplier+1,c
  2876  001E12  0E00               	movlw	0
  2877  001E14  6E3C               	movwf	___wmul@multiplicand+1,c
  2878  001E16  0E03               	movlw	3
  2879  001E18  6E3B               	movwf	___wmul@multiplicand,c
  2880  001E1A  ECAE  F015         	call	___wmul	;wreg free
  2881  001E1E  0E29               	movlw	low __npowers_
  2882  001E20  2439               	addwf	?___wmul,w,c
  2883  001E22  6EF6               	movwf	tblptrl,c
  2884  001E24  0E10               	movlw	high __npowers_
  2885  001E26  203A               	addwfc	?___wmul+1,w,c
  2886  001E28  6EF7               	movwf	tblptrh,c
  2887  001E2A                     	if	0	;There are less than 3 active tblptr bytes
  2888  001E2A                     	endif
  2889  001E2A  0009               	tblrd		*+
  2890  001E2C  CFF5 F00D          	movff	tablat,___ftmul@f1
  2891  001E30  0009               	tblrd		*+
  2892  001E32  CFF5 F00E          	movff	tablat,___ftmul@f1+1
  2893  001E36  000A               	tblrd		*-
  2894  001E38  CFF5 F00F          	movff	tablat,___ftmul@f1+2
  2895  001E3C  ECD9  F011         	call	___ftmul	;wreg free
  2896  001E40  C00D  F045         	movff	?___ftmul,_fround$1186
  2897  001E44  C00E  F046         	movff	?___ftmul+1,_fround$1186+1
  2898  001E48  C00F  F047         	movff	?___ftmul+2,_fround$1186+2
  2899                           
  2900                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2901  001E4C  0E00               	movlw	0
  2902  001E4E  6E3C               	movwf	___wmul@multiplicand+1,c
  2903  001E50  0E03               	movlw	3
  2904  001E52  6E3B               	movwf	___wmul@multiplicand,c
  2905  001E54  0E00               	movlw	0
  2906  001E56  6E2E               	movwf	___awmod@divisor+1,c
  2907  001E58  0E0A               	movlw	10
  2908  001E5A  6E2D               	movwf	___awmod@divisor,c
  2909  001E5C  C048  F02B         	movff	fround@prec,___awmod@dividend
  2910  001E60  6A2C               	clrf	___awmod@dividend+1,c
  2911  001E62  EC78  F014         	call	___awmod	;wreg free
  2912  001E66  C02B  F039         	movff	?___awmod,___wmul@multiplier
  2913  001E6A  C02C  F03A         	movff	?___awmod+1,___wmul@multiplier+1
  2914  001E6E  ECAE  F015         	call	___wmul	;wreg free
  2915  001E72  0E29               	movlw	low __npowers_
  2916  001E74  2439               	addwf	?___wmul,w,c
  2917  001E76  6EF6               	movwf	tblptrl,c
  2918  001E78  0E10               	movlw	high __npowers_
  2919  001E7A  203A               	addwfc	?___wmul+1,w,c
  2920  001E7C  6EF7               	movwf	tblptrh,c
  2921  001E7E                     	if	0	;There are less than 3 active tblptr bytes
  2922  001E7E                     	endif
  2923  001E7E  0009               	tblrd		*+
  2924  001E80  CFF5 F010          	movff	tablat,___ftmul@f2
  2925  001E84  0009               	tblrd		*+
  2926  001E86  CFF5 F011          	movff	tablat,___ftmul@f2+1
  2927  001E8A  000A               	tblrd		*-
  2928  001E8C  CFF5 F012          	movff	tablat,___ftmul@f2+2
  2929  001E90  C045  F00D         	movff	_fround$1186,___ftmul@f1
  2930  001E94  C046  F00E         	movff	_fround$1186+1,___ftmul@f1+1
  2931  001E98  C047  F00F         	movff	_fround$1186+2,___ftmul@f1+2
  2932  001E9C  ECD9  F011         	call	___ftmul	;wreg free
  2933  001EA0  C00D  F042         	movff	?___ftmul,_fround$1187
  2934  001EA4  C00E  F043         	movff	?___ftmul+1,_fround$1187+1
  2935  001EA8  C00F  F044         	movff	?___ftmul+2,_fround$1187+2
  2936                           
  2937                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2938  001EAC  C042  F00D         	movff	_fround$1187,___ftmul@f1
  2939  001EB0  C043  F00E         	movff	_fround$1187+1,___ftmul@f1+1
  2940  001EB4  C044  F00F         	movff	_fround$1187+2,___ftmul@f1+2
  2941  001EB8  0E00               	movlw	0
  2942  001EBA  6E10               	movwf	___ftmul@f2,c
  2943  001EBC  0E00               	movlw	0
  2944  001EBE  6E11               	movwf	___ftmul@f2+1,c
  2945  001EC0  0E3F               	movlw	63
  2946  001EC2  6E12               	movwf	___ftmul@f2+2,c
  2947  001EC4  ECD9  F011         	call	___ftmul	;wreg free
  2948  001EC8  D07D               	goto	L7
  2949  001ECA  D083               	goto	l132
  2950  001ECC  D062               	goto	l2096
  2951  001ECE                     l2088:
  2952                           
  2953                           ;doprnt.c: 415: else if(prec > 10)
  2954  001ECE  0E0A               	movlw	10
  2955  001ED0  6448               	cpfsgt	fround@prec,c
  2956  001ED2  D05F               	goto	l2096
  2957                           
  2958                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2959  001ED4  0E00               	movlw	0
  2960  001ED6  6E3C               	movwf	___wmul@multiplicand+1,c
  2961  001ED8  0E03               	movlw	3
  2962  001EDA  6E3B               	movwf	___wmul@multiplicand,c
  2963  001EDC  0E00               	movlw	0
  2964  001EDE  6E2E               	movwf	___awmod@divisor+1,c
  2965  001EE0  0E0A               	movlw	10
  2966  001EE2  6E2D               	movwf	___awmod@divisor,c
  2967  001EE4  C048  F02B         	movff	fround@prec,___awmod@dividend
  2968  001EE8  6A2C               	clrf	___awmod@dividend+1,c
  2969  001EEA  EC78  F014         	call	___awmod	;wreg free
  2970  001EEE  C02B  F039         	movff	?___awmod,___wmul@multiplier
  2971  001EF2  C02C  F03A         	movff	?___awmod+1,___wmul@multiplier+1
  2972  001EF6  ECAE  F015         	call	___wmul	;wreg free
  2973  001EFA  0E29               	movlw	low __npowers_
  2974  001EFC  2439               	addwf	?___wmul,w,c
  2975  001EFE  6EF6               	movwf	tblptrl,c
  2976  001F00  0E10               	movlw	high __npowers_
  2977  001F02  203A               	addwfc	?___wmul+1,w,c
  2978  001F04  6EF7               	movwf	tblptrh,c
  2979  001F06                     	if	0	;There are less than 3 active tblptr bytes
  2980  001F06                     	endif
  2981  001F06  0009               	tblrd		*+
  2982  001F08  CFF5 F010          	movff	tablat,___ftmul@f2
  2983  001F0C  0009               	tblrd		*+
  2984  001F0E  CFF5 F011          	movff	tablat,___ftmul@f2+1
  2985  001F12  000A               	tblrd		*-
  2986  001F14  CFF5 F012          	movff	tablat,___ftmul@f2+2
  2987  001F18  0E00               	movlw	0
  2988  001F1A  6E34               	movwf	___awdiv@divisor+1,c
  2989  001F1C  0E0A               	movlw	10
  2990  001F1E  6E33               	movwf	___awdiv@divisor,c
  2991  001F20  C048  F031         	movff	fround@prec,___awdiv@dividend
  2992  001F24  6A32               	clrf	___awdiv@dividend+1,c
  2993  001F26  EC9C  F013         	call	___awdiv	;wreg free
  2994  001F2A  0E09               	movlw	9
  2995  001F2C  2431               	addwf	?___awdiv,w,c
  2996  001F2E  6E39               	movwf	___wmul@multiplier,c
  2997  001F30  0E00               	movlw	0
  2998  001F32  2032               	addwfc	?___awdiv+1,w,c
  2999  001F34  6E3A               	movwf	___wmul@multiplier+1,c
  3000  001F36  0E00               	movlw	0
  3001  001F38  6E3C               	movwf	___wmul@multiplicand+1,c
  3002  001F3A  0E03               	movlw	3
  3003  001F3C  6E3B               	movwf	___wmul@multiplicand,c
  3004  001F3E  ECAE  F015         	call	___wmul	;wreg free
  3005  001F42  0E29               	movlw	low __npowers_
  3006  001F44  2439               	addwf	?___wmul,w,c
  3007  001F46  6EF6               	movwf	tblptrl,c
  3008  001F48  0E10               	movlw	high __npowers_
  3009  001F4A  203A               	addwfc	?___wmul+1,w,c
  3010  001F4C  6EF7               	movwf	tblptrh,c
  3011  001F4E                     	if	0	;There are less than 3 active tblptr bytes
  3012  001F4E                     	endif
  3013  001F4E  0009               	tblrd		*+
  3014  001F50  CFF5 F00D          	movff	tablat,___ftmul@f1
  3015  001F54  0009               	tblrd		*+
  3016  001F56  CFF5 F00E          	movff	tablat,___ftmul@f1+1
  3017  001F5A  000A               	tblrd		*-
  3018  001F5C  CFF5 F00F          	movff	tablat,___ftmul@f1+2
  3019  001F60  ECD9  F011         	call	___ftmul	;wreg free
  3020  001F64  C00D  F045         	movff	?___ftmul,_fround$1186
  3021  001F68  C00E  F046         	movff	?___ftmul+1,_fround$1186+1
  3022  001F6C  C00F  F047         	movff	?___ftmul+2,_fround$1186+2
  3023                           
  3024                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3025  001F70  C045  F00D         	movff	_fround$1186,___ftmul@f1
  3026  001F74  C046  F00E         	movff	_fround$1186+1,___ftmul@f1+1
  3027  001F78  C047  F00F         	movff	_fround$1186+2,___ftmul@f1+2
  3028  001F7C  0E00               	movlw	0
  3029  001F7E  6E10               	movwf	___ftmul@f2,c
  3030  001F80  0E00               	movlw	0
  3031  001F82  6E11               	movwf	___ftmul@f2+1,c
  3032  001F84  0E3F               	movlw	63
  3033  001F86  6E12               	movwf	___ftmul@f2+2,c
  3034  001F88  ECD9  F011         	call	___ftmul	;wreg free
  3035  001F8C  D01B               	goto	L7
  3036  001F8E  D021               	goto	l132
  3037  001F90  D000               	goto	l2096
  3038  001F92                     l2096:
  3039                           
  3040                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3041  001F92  5048               	movf	fround@prec,w,c
  3042  001F94  0D03               	mullw	3
  3043  001F96  0E29               	movlw	low __npowers_
  3044  001F98  24F3               	addwf	prodl,w,c
  3045  001F9A  6EF6               	movwf	tblptrl,c
  3046  001F9C  0E10               	movlw	high __npowers_
  3047  001F9E  20F4               	addwfc	prodh,w,c
  3048  001FA0  6EF7               	movwf	tblptrh,c
  3049  001FA2                     	if	0	;There are less than 3 active tblptr bytes
  3050  001FA2                     	endif
  3051  001FA2  0009               	tblrd		*+
  3052  001FA4  CFF5 F00D          	movff	tablat,___ftmul@f1
  3053  001FA8  0009               	tblrd		*+
  3054  001FAA  CFF5 F00E          	movff	tablat,___ftmul@f1+1
  3055  001FAE  000A               	tblrd		*-
  3056  001FB0  CFF5 F00F          	movff	tablat,___ftmul@f1+2
  3057  001FB4  0E00               	movlw	0
  3058  001FB6  6E10               	movwf	___ftmul@f2,c
  3059  001FB8  0E00               	movlw	0
  3060  001FBA  6E11               	movwf	___ftmul@f2+1,c
  3061  001FBC  0E3F               	movlw	63
  3062  001FBE  6E12               	movwf	___ftmul@f2+2,c
  3063  001FC0  ECD9  F011         	call	___ftmul	;wreg free
  3064  001FC4                     L7:
  3065  001FC4  C00D  F03F         	movff	?___ftmul,?_fround
  3066  001FC8  C00E  F040         	movff	?___ftmul+1,?_fround+1
  3067  001FCC  C00F  F041         	movff	?___ftmul+2,?_fround+2
  3068  001FD0  D000               	goto	l132
  3069  001FD2                     l132:
  3070  001FD2  0012               	return		;funcret
  3071  001FD4                     __end_of_fround:
  3072                           	opt stack 0
  3073                           tblptru	equ	0xFF8
  3074                           tblptrh	equ	0xFF7
  3075                           tblptrl	equ	0xFF6
  3076                           tablat	equ	0xFF5
  3077                           prodh	equ	0xFF4
  3078                           prodl	equ	0xFF3
  3079                           postinc0	equ	0xFEE
  3080                           wreg	equ	0xFE8
  3081                           postdec1	equ	0xFE5
  3082                           plusw1	equ	0xFE3
  3083                           fsr1l	equ	0xFE1
  3084                           indf2	equ	0xFDF
  3085                           postinc2	equ	0xFDE
  3086                           postdec2	equ	0xFDD
  3087                           plusw2	equ	0xFDB
  3088                           fsr2h	equ	0xFDA
  3089                           fsr2l	equ	0xFD9
  3090                           status	equ	0xFD8
  3091                           
  3092 ;; *************** function ___wmul *****************
  3093 ;; Defined at:
  3094 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  3095 ;; Parameters:    Size  Location     Type
  3096 ;;  multiplier      2   56[COMRAM] unsigned int 
  3097 ;;  multiplicand    2   58[COMRAM] unsigned int 
  3098 ;; Auto vars:     Size  Location     Type
  3099 ;;  product         2   60[COMRAM] unsigned int 
  3100 ;; Return value:  Size  Location     Type
  3101 ;;                  2   56[COMRAM] unsigned int 
  3102 ;; Registers used:
  3103 ;;		wreg, status,2, status,0, prodl, prodh
  3104 ;; Tracked objects:
  3105 ;;		On entry : 0/0
  3106 ;;		On exit  : 0/0
  3107 ;;		Unchanged: 0/0
  3108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3109 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3110 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3112 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3113 ;;Total ram usage:        6 bytes
  3114 ;; Hardware stack levels used:    1
  3115 ;; This function calls:
  3116 ;;		Nothing
  3117 ;; This function is called by:
  3118 ;;		_fround
  3119 ;;		_scale
  3120 ;;		_printf
  3121 ;; This function uses a non-reentrant model
  3122 ;;
  3123                           
  3124                           	psect	text5
  3125  002B5C                     __ptext5:
  3126                           	opt stack 0
  3127  002B5C                     ___wmul:
  3128                           	opt stack 28
  3129                           
  3130                           ;incstack = 0
  3131  002B5C  5039               	movf	___wmul@multiplier,w,c
  3132  002B5E  023B               	mulwf	___wmul@multiplicand,c
  3133  002B60  CFF3 F03D          	movff	prodl,___wmul@product
  3134  002B64  CFF4 F03E          	movff	prodh,___wmul@product+1
  3135  002B68  5039               	movf	___wmul@multiplier,w,c
  3136  002B6A  023C               	mulwf	___wmul@multiplicand+1,c
  3137  002B6C  50F3               	movf	prodl,w,c
  3138  002B6E  263E               	addwf	___wmul@product+1,f,c
  3139  002B70  503A               	movf	___wmul@multiplier+1,w,c
  3140  002B72  023B               	mulwf	___wmul@multiplicand,c
  3141  002B74  50F3               	movf	prodl,w,c
  3142  002B76  263E               	addwf	___wmul@product+1,f,c
  3143  002B78  C03D  F039         	movff	___wmul@product,?___wmul
  3144  002B7C  C03E  F03A         	movff	___wmul@product+1,?___wmul+1
  3145  002B80  D000               	goto	l231
  3146  002B82                     l231:
  3147  002B82  0012               	return		;funcret
  3148  002B84                     __end_of___wmul:
  3149                           	opt stack 0
  3150                           tblptru	equ	0xFF8
  3151                           tblptrh	equ	0xFF7
  3152                           tblptrl	equ	0xFF6
  3153                           tablat	equ	0xFF5
  3154                           prodh	equ	0xFF4
  3155                           prodl	equ	0xFF3
  3156                           postinc0	equ	0xFEE
  3157                           wreg	equ	0xFE8
  3158                           postdec1	equ	0xFE5
  3159                           plusw1	equ	0xFE3
  3160                           fsr1l	equ	0xFE1
  3161                           indf2	equ	0xFDF
  3162                           postinc2	equ	0xFDE
  3163                           postdec2	equ	0xFDD
  3164                           plusw2	equ	0xFDB
  3165                           fsr2h	equ	0xFDA
  3166                           fsr2l	equ	0xFD9
  3167                           status	equ	0xFD8
  3168                           
  3169 ;; *************** function ___ftmul *****************
  3170 ;; Defined at:
  3171 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  3172 ;; Parameters:    Size  Location     Type
  3173 ;;  f1              3   12[COMRAM] float 
  3174 ;;  f2              3   15[COMRAM] float 
  3175 ;; Auto vars:     Size  Location     Type
  3176 ;;  f3_as_produc    3   22[COMRAM] unsigned um
  3177 ;;  sign            1   26[COMRAM] unsigned char 
  3178 ;;  cntr            1   25[COMRAM] unsigned char 
  3179 ;;  exp             1   21[COMRAM] unsigned char 
  3180 ;; Return value:  Size  Location     Type
  3181 ;;                  3   12[COMRAM] float 
  3182 ;; Registers used:
  3183 ;;		wreg, status,2, status,0, cstack
  3184 ;; Tracked objects:
  3185 ;;		On entry : 0/0
  3186 ;;		On exit  : 0/0
  3187 ;;		Unchanged: 0/0
  3188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3189 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3190 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3191 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3192 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3193 ;;Total ram usage:       15 bytes
  3194 ;; Hardware stack levels used:    1
  3195 ;; Hardware stack levels required when called:    1
  3196 ;; This function calls:
  3197 ;;		___ftpack
  3198 ;; This function is called by:
  3199 ;;		_main
  3200 ;;		_fround
  3201 ;;		_scale
  3202 ;;		_printf
  3203 ;; This function uses a non-reentrant model
  3204 ;;
  3205                           
  3206                           	psect	text6
  3207  0023B2                     __ptext6:
  3208                           	opt stack 0
  3209  0023B2                     ___ftmul:
  3210                           	opt stack 27
  3211                           
  3212                           ;incstack = 0
  3213  0023B2  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
  3214  0023B6  6A14               	clrf	(??___ftmul+1)& (0+255),c
  3215  0023B8  6A15               	clrf	(??___ftmul+2)& (0+255),c
  3216  0023BA  340E               	rlcf	___ftmul@f1+1,w,c
  3217  0023BC  3613               	rlcf	??___ftmul& (0+255),f,c
  3218  0023BE  E301               	bnc	u1721
  3219  0023C0  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  3220  0023C2                     u1721:
  3221  0023C2  5013               	movf	??___ftmul,w,c
  3222  0023C4  6E16               	movwf	___ftmul@exp,c
  3223  0023C6  5016               	movf	___ftmul@exp,w,c
  3224  0023C8  A4D8               	btfss	status,2,c
  3225  0023CA  D002               	goto	l1902
  3226  0023CC  D00E               	goto	l1904
  3227  0023CE  D06C               	goto	l660
  3228  0023D0                     l1902:
  3229  0023D0  C012  F013         	movff	___ftmul@f2+2,??___ftmul
  3230  0023D4  6A14               	clrf	(??___ftmul+1)& (0+255),c
  3231  0023D6  6A15               	clrf	(??___ftmul+2)& (0+255),c
  3232  0023D8  3411               	rlcf	___ftmul@f2+1,w,c
  3233  0023DA  3613               	rlcf	??___ftmul& (0+255),f,c
  3234  0023DC  E301               	bnc	u1741
  3235  0023DE  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  3236  0023E0                     u1741:
  3237  0023E0  5013               	movf	??___ftmul,w,c
  3238  0023E2  6E1B               	movwf	___ftmul@sign,c
  3239  0023E4  501B               	movf	___ftmul@sign,w,c
  3240  0023E6  A4D8               	btfss	status,2,c
  3241  0023E8  D007               	goto	l1908
  3242  0023EA                     l1904:
  3243  0023EA  0E00               	movlw	0
  3244  0023EC  6E0D               	movwf	?___ftmul,c
  3245  0023EE  0E00               	movlw	0
  3246  0023F0  6E0E               	movwf	?___ftmul+1,c
  3247  0023F2  0E00               	movlw	0
  3248  0023F4  6E0F               	movwf	?___ftmul+2,c
  3249  0023F6  D058               	goto	l660
  3250  0023F8                     l1908:
  3251  0023F8  501B               	movf	___ftmul@sign,w,c
  3252  0023FA  0F7B               	addlw	123
  3253  0023FC  2616               	addwf	___ftmul@exp,f,c
  3254  0023FE  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
  3255  002402  5012               	movf	___ftmul@f2+2,w,c
  3256  002404  1A1B               	xorwf	___ftmul@sign,f,c
  3257  002406  0E80               	movlw	128
  3258  002408  161B               	andwf	___ftmul@sign,f,c
  3259  00240A  8E0E               	bsf	___ftmul@f1+1,7,c
  3260  00240C  8E11               	bsf	___ftmul@f2+1,7,c
  3261  00240E  0EFF               	movlw	255
  3262  002410  1610               	andwf	___ftmul@f2,f,c
  3263  002412  0EFF               	movlw	255
  3264  002414  1611               	andwf	___ftmul@f2+1,f,c
  3265  002416  0E00               	movlw	0
  3266  002418  1612               	andwf	___ftmul@f2+2,f,c
  3267  00241A  0E00               	movlw	0
  3268  00241C  6E17               	movwf	___ftmul@f3_as_product,c
  3269  00241E  0E00               	movlw	0
  3270  002420  6E18               	movwf	___ftmul@f3_as_product+1,c
  3271  002422  0E00               	movlw	0
  3272  002424  6E19               	movwf	___ftmul@f3_as_product+2,c
  3273  002426  0E07               	movlw	7
  3274  002428  6E1A               	movwf	___ftmul@cntr,c
  3275  00242A  D000               	goto	l1922
  3276  00242C                     l1922:
  3277  00242C  A00D               	btfss	___ftmul@f1,0,c
  3278  00242E  D007               	goto	l1926
  3279  002430  5010               	movf	___ftmul@f2,w,c
  3280  002432  2617               	addwf	___ftmul@f3_as_product,f,c
  3281  002434  5011               	movf	___ftmul@f2+1,w,c
  3282  002436  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  3283  002438  5012               	movf	___ftmul@f2+2,w,c
  3284  00243A  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  3285  00243C  D000               	goto	l1926
  3286  00243E                     l1926:
  3287  00243E  90D8               	bcf	status,0,c
  3288  002440  320F               	rrcf	___ftmul@f1+2,f,c
  3289  002442  320E               	rrcf	___ftmul@f1+1,f,c
  3290  002444  320D               	rrcf	___ftmul@f1,f,c
  3291  002446  90D8               	bcf	status,0,c
  3292  002448  3610               	rlcf	___ftmul@f2,f,c
  3293  00244A  3611               	rlcf	___ftmul@f2+1,f,c
  3294  00244C  3612               	rlcf	___ftmul@f2+2,f,c
  3295  00244E  2E1A               	decfsz	___ftmul@cntr,f,c
  3296  002450  D7ED               	goto	l1922
  3297  002452  D000               	goto	l1930
  3298  002454                     l1930:
  3299  002454  0E09               	movlw	9
  3300  002456  6E1A               	movwf	___ftmul@cntr,c
  3301  002458  D000               	goto	l1932
  3302  00245A                     l1932:
  3303  00245A  A00D               	btfss	___ftmul@f1,0,c
  3304  00245C  D007               	goto	l1936
  3305  00245E  5010               	movf	___ftmul@f2,w,c
  3306  002460  2617               	addwf	___ftmul@f3_as_product,f,c
  3307  002462  5011               	movf	___ftmul@f2+1,w,c
  3308  002464  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  3309  002466  5012               	movf	___ftmul@f2+2,w,c
  3310  002468  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  3311  00246A  D000               	goto	l1936
  3312  00246C                     l1936:
  3313  00246C  90D8               	bcf	status,0,c
  3314  00246E  320F               	rrcf	___ftmul@f1+2,f,c
  3315  002470  320E               	rrcf	___ftmul@f1+1,f,c
  3316  002472  320D               	rrcf	___ftmul@f1,f,c
  3317  002474  90D8               	bcf	status,0,c
  3318  002476  3219               	rrcf	___ftmul@f3_as_product+2,f,c
  3319  002478  3218               	rrcf	___ftmul@f3_as_product+1,f,c
  3320  00247A  3217               	rrcf	___ftmul@f3_as_product,f,c
  3321  00247C  2E1A               	decfsz	___ftmul@cntr,f,c
  3322  00247E  D7ED               	goto	l1932
  3323  002480  D000               	goto	l1940
  3324  002482                     l1940:
  3325  002482  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3326  002486  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3327  00248A  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3328  00248E  C016  F004         	movff	___ftmul@exp,___ftpack@exp
  3329  002492  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
  3330  002496  EC39  F013         	call	___ftpack	;wreg free
  3331  00249A  C001  F00D         	movff	?___ftpack,?___ftmul
  3332  00249E  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
  3333  0024A2  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
  3334  0024A6  D000               	goto	l660
  3335  0024A8                     l660:
  3336  0024A8  0012               	return		;funcret
  3337  0024AA                     __end_of___ftmul:
  3338                           	opt stack 0
  3339                           tblptru	equ	0xFF8
  3340                           tblptrh	equ	0xFF7
  3341                           tblptrl	equ	0xFF6
  3342                           tablat	equ	0xFF5
  3343                           prodh	equ	0xFF4
  3344                           prodl	equ	0xFF3
  3345                           postinc0	equ	0xFEE
  3346                           wreg	equ	0xFE8
  3347                           postdec1	equ	0xFE5
  3348                           plusw1	equ	0xFE3
  3349                           fsr1l	equ	0xFE1
  3350                           indf2	equ	0xFDF
  3351                           postinc2	equ	0xFDE
  3352                           postdec2	equ	0xFDD
  3353                           plusw2	equ	0xFDB
  3354                           fsr2h	equ	0xFDA
  3355                           fsr2l	equ	0xFD9
  3356                           status	equ	0xFD8
  3357                           
  3358 ;; *************** function ___awmod *****************
  3359 ;; Defined at:
  3360 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  3361 ;; Parameters:    Size  Location     Type
  3362 ;;  dividend        2   42[COMRAM] int 
  3363 ;;  divisor         2   44[COMRAM] int 
  3364 ;; Auto vars:     Size  Location     Type
  3365 ;;  sign            1   47[COMRAM] unsigned char 
  3366 ;;  counter         1   46[COMRAM] unsigned char 
  3367 ;; Return value:  Size  Location     Type
  3368 ;;                  2   42[COMRAM] int 
  3369 ;; Registers used:
  3370 ;;		wreg, status,2, status,0
  3371 ;; Tracked objects:
  3372 ;;		On entry : 0/0
  3373 ;;		On exit  : 0/0
  3374 ;;		Unchanged: 0/0
  3375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3376 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3377 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3379 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3380 ;;Total ram usage:        6 bytes
  3381 ;; Hardware stack levels used:    1
  3382 ;; This function calls:
  3383 ;;		Nothing
  3384 ;; This function is called by:
  3385 ;;		_main
  3386 ;;		_fround
  3387 ;;		_scale
  3388 ;; This function uses a non-reentrant model
  3389 ;;
  3390                           
  3391                           	psect	text7
  3392  0028F0                     __ptext7:
  3393                           	opt stack 0
  3394  0028F0                     ___awmod:
  3395                           	opt stack 28
  3396                           
  3397                           ;incstack = 0
  3398  0028F0  0E00               	movlw	0
  3399  0028F2  6E30               	movwf	___awmod@sign,c
  3400  0028F4  AE2C               	btfss	___awmod@dividend+1,7,c
  3401  0028F6  D007               	goto	l1996
  3402  0028F8  6C2B               	negf	___awmod@dividend,c
  3403  0028FA  1E2C               	comf	___awmod@dividend+1,f,c
  3404  0028FC  B0D8               	btfsc	status,0,c
  3405  0028FE  2A2C               	incf	___awmod@dividend+1,f,c
  3406  002900  0E01               	movlw	1
  3407  002902  6E30               	movwf	___awmod@sign,c
  3408  002904  D000               	goto	l1996
  3409  002906                     l1996:
  3410  002906  AE2E               	btfss	___awmod@divisor+1,7,c
  3411  002908  D005               	goto	l2000
  3412  00290A  6C2D               	negf	___awmod@divisor,c
  3413  00290C  1E2E               	comf	___awmod@divisor+1,f,c
  3414  00290E  B0D8               	btfsc	status,0,c
  3415  002910  2A2E               	incf	___awmod@divisor+1,f,c
  3416  002912  D000               	goto	l2000
  3417  002914                     l2000:
  3418  002914  502D               	movf	___awmod@divisor,w,c
  3419  002916  102E               	iorwf	___awmod@divisor+1,w,c
  3420  002918  B4D8               	btfsc	status,2,c
  3421  00291A  D01D               	goto	l2016
  3422  00291C  0E01               	movlw	1
  3423  00291E  6E2F               	movwf	___awmod@counter,c
  3424  002920  D005               	goto	l2006
  3425  002922                     l2004:
  3426  002922  90D8               	bcf	status,0,c
  3427  002924  362D               	rlcf	___awmod@divisor,f,c
  3428  002926  362E               	rlcf	___awmod@divisor+1,f,c
  3429  002928  2A2F               	incf	___awmod@counter,f,c
  3430  00292A  D000               	goto	l2006
  3431  00292C                     l2006:
  3432  00292C  BE2E               	btfsc	___awmod@divisor+1,7,c
  3433  00292E  D002               	goto	l2008
  3434  002930  D7F8               	goto	l2004
  3435  002932  D000               	goto	l2008
  3436  002934                     l2008:
  3437  002934  502D               	movf	___awmod@divisor,w,c
  3438  002936  5C2B               	subwf	___awmod@dividend,w,c
  3439  002938  502E               	movf	___awmod@divisor+1,w,c
  3440  00293A  582C               	subwfb	___awmod@dividend+1,w,c
  3441  00293C  A0D8               	btfss	status,0,c
  3442  00293E  D005               	goto	l2012
  3443  002940  502D               	movf	___awmod@divisor,w,c
  3444  002942  5E2B               	subwf	___awmod@dividend,f,c
  3445  002944  502E               	movf	___awmod@divisor+1,w,c
  3446  002946  5A2C               	subwfb	___awmod@dividend+1,f,c
  3447  002948  D000               	goto	l2012
  3448  00294A                     l2012:
  3449  00294A  90D8               	bcf	status,0,c
  3450  00294C  322E               	rrcf	___awmod@divisor+1,f,c
  3451  00294E  322D               	rrcf	___awmod@divisor,f,c
  3452  002950  2E2F               	decfsz	___awmod@counter,f,c
  3453  002952  D7F0               	goto	l2008
  3454  002954  D000               	goto	l2016
  3455  002956                     l2016:
  3456  002956  5030               	movf	___awmod@sign,w,c
  3457  002958  B4D8               	btfsc	status,2,c
  3458  00295A  D005               	goto	l2020
  3459  00295C  6C2B               	negf	___awmod@dividend,c
  3460  00295E  1E2C               	comf	___awmod@dividend+1,f,c
  3461  002960  B0D8               	btfsc	status,0,c
  3462  002962  2A2C               	incf	___awmod@dividend+1,f,c
  3463  002964  D000               	goto	l2020
  3464  002966                     l2020:
  3465  002966  C02B  F02B         	movff	___awmod@dividend,?___awmod
  3466  00296A  C02C  F02C         	movff	___awmod@dividend+1,?___awmod+1
  3467  00296E  D000               	goto	l437
  3468  002970                     l437:
  3469  002970  0012               	return		;funcret
  3470  002972                     __end_of___awmod:
  3471                           	opt stack 0
  3472                           tblptru	equ	0xFF8
  3473                           tblptrh	equ	0xFF7
  3474                           tblptrl	equ	0xFF6
  3475                           tablat	equ	0xFF5
  3476                           prodh	equ	0xFF4
  3477                           prodl	equ	0xFF3
  3478                           postinc0	equ	0xFEE
  3479                           wreg	equ	0xFE8
  3480                           postdec1	equ	0xFE5
  3481                           plusw1	equ	0xFE3
  3482                           fsr1l	equ	0xFE1
  3483                           indf2	equ	0xFDF
  3484                           postinc2	equ	0xFDE
  3485                           postdec2	equ	0xFDD
  3486                           plusw2	equ	0xFDB
  3487                           fsr2h	equ	0xFDA
  3488                           fsr2l	equ	0xFD9
  3489                           status	equ	0xFD8
  3490                           
  3491 ;; *************** function ___awdiv *****************
  3492 ;; Defined at:
  3493 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  3494 ;; Parameters:    Size  Location     Type
  3495 ;;  dividend        2   48[COMRAM] int 
  3496 ;;  divisor         2   50[COMRAM] int 
  3497 ;; Auto vars:     Size  Location     Type
  3498 ;;  quotient        2   54[COMRAM] int 
  3499 ;;  sign            1   53[COMRAM] unsigned char 
  3500 ;;  counter         1   52[COMRAM] unsigned char 
  3501 ;; Return value:  Size  Location     Type
  3502 ;;                  2   48[COMRAM] int 
  3503 ;; Registers used:
  3504 ;;		wreg, status,2, status,0
  3505 ;; Tracked objects:
  3506 ;;		On entry : 0/0
  3507 ;;		On exit  : 0/0
  3508 ;;		Unchanged: 0/0
  3509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3510 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3511 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3513 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3514 ;;Total ram usage:        8 bytes
  3515 ;; Hardware stack levels used:    1
  3516 ;; This function calls:
  3517 ;;		Nothing
  3518 ;; This function is called by:
  3519 ;;		_main
  3520 ;;		_fround
  3521 ;;		_scale
  3522 ;;		_printf
  3523 ;; This function uses a non-reentrant model
  3524 ;;
  3525                           
  3526                           	psect	text8
  3527  002738                     __ptext8:
  3528                           	opt stack 0
  3529  002738                     ___awdiv:
  3530                           	opt stack 28
  3531                           
  3532                           ;incstack = 0
  3533  002738  0E00               	movlw	0
  3534  00273A  6E36               	movwf	___awdiv@sign,c
  3535  00273C  AE34               	btfss	___awdiv@divisor+1,7,c
  3536  00273E  D007               	goto	l1952
  3537  002740  6C33               	negf	___awdiv@divisor,c
  3538  002742  1E34               	comf	___awdiv@divisor+1,f,c
  3539  002744  B0D8               	btfsc	status,0,c
  3540  002746  2A34               	incf	___awdiv@divisor+1,f,c
  3541  002748  0E01               	movlw	1
  3542  00274A  6E36               	movwf	___awdiv@sign,c
  3543  00274C  D000               	goto	l1952
  3544  00274E                     l1952:
  3545  00274E  AE32               	btfss	___awdiv@dividend+1,7,c
  3546  002750  D007               	goto	l1958
  3547  002752  6C31               	negf	___awdiv@dividend,c
  3548  002754  1E32               	comf	___awdiv@dividend+1,f,c
  3549  002756  B0D8               	btfsc	status,0,c
  3550  002758  2A32               	incf	___awdiv@dividend+1,f,c
  3551  00275A  0E01               	movlw	1
  3552  00275C  1A36               	xorwf	___awdiv@sign,f,c
  3553  00275E  D000               	goto	l1958
  3554  002760                     l1958:
  3555  002760  0E00               	movlw	0
  3556  002762  6E38               	movwf	___awdiv@quotient+1,c
  3557  002764  0E00               	movlw	0
  3558  002766  6E37               	movwf	___awdiv@quotient,c
  3559  002768  5033               	movf	___awdiv@divisor,w,c
  3560  00276A  1034               	iorwf	___awdiv@divisor+1,w,c
  3561  00276C  B4D8               	btfsc	status,2,c
  3562  00276E  D021               	goto	l1980
  3563  002770  0E01               	movlw	1
  3564  002772  6E35               	movwf	___awdiv@counter,c
  3565  002774  D005               	goto	l1966
  3566  002776                     l1964:
  3567  002776  90D8               	bcf	status,0,c
  3568  002778  3633               	rlcf	___awdiv@divisor,f,c
  3569  00277A  3634               	rlcf	___awdiv@divisor+1,f,c
  3570  00277C  2A35               	incf	___awdiv@counter,f,c
  3571  00277E  D000               	goto	l1966
  3572  002780                     l1966:
  3573  002780  BE34               	btfsc	___awdiv@divisor+1,7,c
  3574  002782  D002               	goto	l1968
  3575  002784  D7F8               	goto	l1964
  3576  002786  D000               	goto	l1968
  3577  002788                     l1968:
  3578  002788  90D8               	bcf	status,0,c
  3579  00278A  3637               	rlcf	___awdiv@quotient,f,c
  3580  00278C  3638               	rlcf	___awdiv@quotient+1,f,c
  3581  00278E  5033               	movf	___awdiv@divisor,w,c
  3582  002790  5C31               	subwf	___awdiv@dividend,w,c
  3583  002792  5034               	movf	___awdiv@divisor+1,w,c
  3584  002794  5832               	subwfb	___awdiv@dividend+1,w,c
  3585  002796  A0D8               	btfss	status,0,c
  3586  002798  D006               	goto	l1976
  3587  00279A  5033               	movf	___awdiv@divisor,w,c
  3588  00279C  5E31               	subwf	___awdiv@dividend,f,c
  3589  00279E  5034               	movf	___awdiv@divisor+1,w,c
  3590  0027A0  5A32               	subwfb	___awdiv@dividend+1,f,c
  3591  0027A2  8037               	bsf	___awdiv@quotient,0,c
  3592  0027A4  D000               	goto	l1976
  3593  0027A6                     l1976:
  3594  0027A6  90D8               	bcf	status,0,c
  3595  0027A8  3234               	rrcf	___awdiv@divisor+1,f,c
  3596  0027AA  3233               	rrcf	___awdiv@divisor,f,c
  3597  0027AC  2E35               	decfsz	___awdiv@counter,f,c
  3598  0027AE  D7EC               	goto	l1968
  3599  0027B0  D000               	goto	l1980
  3600  0027B2                     l1980:
  3601  0027B2  5036               	movf	___awdiv@sign,w,c
  3602  0027B4  B4D8               	btfsc	status,2,c
  3603  0027B6  D005               	goto	l1984
  3604  0027B8  6C37               	negf	___awdiv@quotient,c
  3605  0027BA  1E38               	comf	___awdiv@quotient+1,f,c
  3606  0027BC  B0D8               	btfsc	status,0,c
  3607  0027BE  2A38               	incf	___awdiv@quotient+1,f,c
  3608  0027C0  D000               	goto	l1984
  3609  0027C2                     l1984:
  3610  0027C2  C037  F031         	movff	___awdiv@quotient,?___awdiv
  3611  0027C6  C038  F032         	movff	___awdiv@quotient+1,?___awdiv+1
  3612  0027CA  D000               	goto	l424
  3613  0027CC                     l424:
  3614  0027CC  0012               	return		;funcret
  3615  0027CE                     __end_of___awdiv:
  3616                           	opt stack 0
  3617                           tblptru	equ	0xFF8
  3618                           tblptrh	equ	0xFF7
  3619                           tblptrl	equ	0xFF6
  3620                           tablat	equ	0xFF5
  3621                           prodh	equ	0xFF4
  3622                           prodl	equ	0xFF3
  3623                           postinc0	equ	0xFEE
  3624                           wreg	equ	0xFE8
  3625                           postdec1	equ	0xFE5
  3626                           plusw1	equ	0xFE3
  3627                           fsr1l	equ	0xFE1
  3628                           indf2	equ	0xFDF
  3629                           postinc2	equ	0xFDE
  3630                           postdec2	equ	0xFDD
  3631                           plusw2	equ	0xFDB
  3632                           fsr2h	equ	0xFDA
  3633                           fsr2l	equ	0xFD9
  3634                           status	equ	0xFD8
  3635                           
  3636 ;; *************** function __tdiv_to_l_ *****************
  3637 ;; Defined at:
  3638 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdivl.c"
  3639 ;; Parameters:    Size  Location     Type
  3640 ;;  f1              3    0[COMRAM] float 
  3641 ;;  f2              3    3[COMRAM] float 
  3642 ;; Auto vars:     Size  Location     Type
  3643 ;;  quot            4    9[COMRAM] unsigned long 
  3644 ;;  exp1            1   14[COMRAM] unsigned char 
  3645 ;;  cntr            1   13[COMRAM] unsigned char 
  3646 ;; Return value:  Size  Location     Type
  3647 ;;                  4    0[COMRAM] unsigned long 
  3648 ;; Registers used:
  3649 ;;		wreg, status,2, status,0
  3650 ;; Tracked objects:
  3651 ;;		On entry : 0/0
  3652 ;;		On exit  : 0/0
  3653 ;;		Unchanged: 0/0
  3654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3655 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3656 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3657 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3658 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3659 ;;Total ram usage:       15 bytes
  3660 ;; Hardware stack levels used:    1
  3661 ;; This function calls:
  3662 ;;		Nothing
  3663 ;; This function is called by:
  3664 ;;		_printf
  3665 ;; This function uses a non-reentrant model
  3666 ;;
  3667                           
  3668                           	psect	text9
  3669  002198                     __ptext9:
  3670                           	opt stack 0
  3671  002198                     __tdiv_to_l_:
  3672                           	opt stack 29
  3673                           
  3674                           ;incstack = 0
  3675  002198  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3676  00219C  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3677  00219E  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3678  0021A0  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3679  0021A2  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3680  0021A4  E301               	bnc	u2081
  3681  0021A6  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3682  0021A8                     u2081:
  3683  0021A8  5007               	movf	??__tdiv_to_l_,w,c
  3684  0021AA  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3685  0021AC  500F               	movf	__tdiv_to_l_@exp1,w,c
  3686  0021AE  A4D8               	btfss	status,2,c
  3687  0021B0  D002               	goto	l2144
  3688  0021B2  D05D               	goto	l2186
  3689  0021B4  D078               	goto	l636
  3690  0021B6                     l2144:
  3691  0021B6  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3692  0021BA  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3693  0021BC  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3694  0021BE  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  3695  0021C0  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3696  0021C2  E301               	bnc	u2101
  3697  0021C4  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3698  0021C6                     u2101:
  3699  0021C6  5007               	movf	??__tdiv_to_l_,w,c
  3700  0021C8  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3701  0021CA  500E               	movf	__tdiv_to_l_@cntr,w,c
  3702  0021CC  A4D8               	btfss	status,2,c
  3703  0021CE  D002               	goto	l2150
  3704  0021D0  D04E               	goto	l2186
  3705  0021D2  D069               	goto	l636
  3706  0021D4                     l2150:
  3707  0021D4  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  3708  0021D6  0EFF               	movlw	255
  3709  0021D8  1601               	andwf	__tdiv_to_l_@f1,f,c
  3710  0021DA  0EFF               	movlw	255
  3711  0021DC  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  3712  0021DE  0E00               	movlw	0
  3713  0021E0  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  3714  0021E2  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  3715  0021E4  0EFF               	movlw	255
  3716  0021E6  1604               	andwf	__tdiv_to_l_@f2,f,c
  3717  0021E8  0EFF               	movlw	255
  3718  0021EA  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  3719  0021EC  0E00               	movlw	0
  3720  0021EE  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  3721  0021F0  0E00               	movlw	0
  3722  0021F2  6E0A               	movwf	__tdiv_to_l_@quot,c
  3723  0021F4  0E00               	movlw	0
  3724  0021F6  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  3725  0021F8  0E00               	movlw	0
  3726  0021FA  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  3727  0021FC  0E00               	movlw	0
  3728  0021FE  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  3729  002200  0E7F               	movlw	127
  3730  002202  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3731  002204  500E               	movf	__tdiv_to_l_@cntr,w,c
  3732  002206  0F98               	addlw	152
  3733  002208  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3734  00220A  0E18               	movlw	24
  3735  00220C  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3736  00220E                     l638:
  3737  00220E  90D8               	bcf	status,0,c
  3738  002210  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3739  002212  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3740  002214  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3741  002216  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3742  002218  5004               	movf	__tdiv_to_l_@f2,w,c
  3743  00221A  5C01               	subwf	__tdiv_to_l_@f1,w,c
  3744  00221C  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3745  00221E  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  3746  002220  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3747  002222  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  3748  002224  A0D8               	btfss	status,0,c
  3749  002226  D007               	goto	l639
  3750  002228  5004               	movf	__tdiv_to_l_@f2,w,c
  3751  00222A  5E01               	subwf	__tdiv_to_l_@f1,f,c
  3752  00222C  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3753  00222E  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  3754  002230  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3755  002232  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  3756  002234  800A               	bsf	__tdiv_to_l_@quot,0,c
  3757  002236                     l639:
  3758  002236  90D8               	bcf	status,0,c
  3759  002238  3601               	rlcf	__tdiv_to_l_@f1,f,c
  3760  00223A  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  3761  00223C  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  3762  00223E  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  3763  002240  D7E6               	goto	l638
  3764  002242  D000               	goto	l2172
  3765  002244                     l2172:
  3766  002244  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  3767  002246  D010               	goto	l2184
  3768  002248  500F               	movf	__tdiv_to_l_@exp1,w,c
  3769  00224A  0A80               	xorlw	128
  3770  00224C  0F97               	addlw	151
  3771  00224E  B0D8               	btfsc	status,0,c
  3772  002250  D003               	goto	l2180
  3773  002252  D00D               	goto	l2186
  3774  002254  D028               	goto	l636
  3775  002256  D000               	goto	l2180
  3776  002258                     l2180:
  3777  002258  90D8               	bcf	status,0,c
  3778  00225A  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  3779  00225C  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  3780  00225E  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  3781  002260  320A               	rrcf	__tdiv_to_l_@quot,f,c
  3782  002262  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  3783  002264  D7F9               	goto	l2180
  3784  002266  D017               	goto	l645
  3785  002268                     l2184:
  3786  002268  0E17               	movlw	23
  3787  00226A  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  3788  00226C  D011               	goto	l2192
  3789  00226E                     l2186:
  3790  00226E  0E00               	movlw	0
  3791  002270  6E01               	movwf	?__tdiv_to_l_,c
  3792  002272  0E00               	movlw	0
  3793  002274  6E02               	movwf	?__tdiv_to_l_+1,c
  3794  002276  0E00               	movlw	0
  3795  002278  6E03               	movwf	?__tdiv_to_l_+2,c
  3796  00227A  0E00               	movlw	0
  3797  00227C  6E04               	movwf	?__tdiv_to_l_+3,c
  3798  00227E  D013               	goto	l636
  3799  002280  D007               	goto	l2192
  3800  002282                     l2190:
  3801  002282  90D8               	bcf	status,0,c
  3802  002284  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3803  002286  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3804  002288  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3805  00228A  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3806  00228C  060F               	decf	__tdiv_to_l_@exp1,f,c
  3807  00228E  D000               	goto	l2192
  3808  002290                     l2192:
  3809  002290  500F               	movf	__tdiv_to_l_@exp1,w,c
  3810  002292  A4D8               	btfss	status,2,c
  3811  002294  D7F6               	goto	l2190
  3812  002296                     l645:
  3813  002296  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  3814  00229A  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  3815  00229E  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  3816  0022A2  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  3817  0022A6                     l636:
  3818  0022A6  0012               	return		;funcret
  3819  0022A8                     __end_of__tdiv_to_l_:
  3820                           	opt stack 0
  3821                           tblptru	equ	0xFF8
  3822                           tblptrh	equ	0xFF7
  3823                           tblptrl	equ	0xFF6
  3824                           tablat	equ	0xFF5
  3825                           prodh	equ	0xFF4
  3826                           prodl	equ	0xFF3
  3827                           postinc0	equ	0xFEE
  3828                           wreg	equ	0xFE8
  3829                           postdec1	equ	0xFE5
  3830                           plusw1	equ	0xFE3
  3831                           fsr1l	equ	0xFE1
  3832                           indf2	equ	0xFDF
  3833                           postinc2	equ	0xFDE
  3834                           postdec2	equ	0xFDD
  3835                           plusw2	equ	0xFDB
  3836                           fsr2h	equ	0xFDA
  3837                           fsr2l	equ	0xFD9
  3838                           status	equ	0xFD8
  3839                           
  3840 ;; *************** function __div_to_l_ *****************
  3841 ;; Defined at:
  3842 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldivl.c"
  3843 ;; Parameters:    Size  Location     Type
  3844 ;;  f1              3    0[COMRAM] unsigned long 
  3845 ;;  f2              3    3[COMRAM] unsigned long 
  3846 ;; Auto vars:     Size  Location     Type
  3847 ;;  quot            4    6[COMRAM] unsigned long 
  3848 ;;  exp1            1   11[COMRAM] unsigned char 
  3849 ;;  cntr            1   10[COMRAM] unsigned char 
  3850 ;; Return value:  Size  Location     Type
  3851 ;;                  4    0[COMRAM] unsigned long 
  3852 ;; Registers used:
  3853 ;;		wreg, status,2, status,0
  3854 ;; Tracked objects:
  3855 ;;		On entry : 0/0
  3856 ;;		On exit  : 0/0
  3857 ;;		Unchanged: 0/0
  3858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3859 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3860 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3862 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3863 ;;Total ram usage:       12 bytes
  3864 ;; Hardware stack levels used:    1
  3865 ;; This function calls:
  3866 ;;		Nothing
  3867 ;; This function is called by:
  3868 ;;		_printf
  3869 ;; This function uses a non-reentrant model
  3870 ;;
  3871                           
  3872                           	psect	text10
  3873  0022A8                     __ptext10:
  3874                           	opt stack 0
  3875  0022A8                     __div_to_l_:
  3876                           	opt stack 29
  3877                           
  3878                           ;incstack = 0
  3879  0022A8  3403               	rlcf	__div_to_l_@f1+2,w,c
  3880  0022AA  3404               	rlcf	__div_to_l_@f1+3,w,c
  3881  0022AC  6E0C               	movwf	__div_to_l_@exp1,c
  3882  0022AE  500C               	movf	__div_to_l_@exp1,w,c
  3883  0022B0  A4D8               	btfss	status,2,c
  3884  0022B2  D002               	goto	l2200
  3885  0022B4  D061               	goto	l2246
  3886  0022B6  D07C               	goto	l515
  3887  0022B8                     l2200:
  3888  0022B8  3406               	rlcf	__div_to_l_@f2+2,w,c
  3889  0022BA  3407               	rlcf	__div_to_l_@f2+3,w,c
  3890  0022BC  6E0B               	movwf	__div_to_l_@cntr,c
  3891  0022BE  500B               	movf	__div_to_l_@cntr,w,c
  3892  0022C0  A4D8               	btfss	status,2,c
  3893  0022C2  D002               	goto	l2206
  3894  0022C4  D059               	goto	l2246
  3895  0022C6  D074               	goto	l515
  3896  0022C8                     l2206:
  3897  0022C8  8E03               	bsf	__div_to_l_@f1+2,7,c
  3898  0022CA  0EFF               	movlw	255
  3899  0022CC  1601               	andwf	__div_to_l_@f1,f,c
  3900  0022CE  0EFF               	movlw	255
  3901  0022D0  1602               	andwf	__div_to_l_@f1+1,f,c
  3902  0022D2  0EFF               	movlw	255
  3903  0022D4  1603               	andwf	__div_to_l_@f1+2,f,c
  3904  0022D6  0E00               	movlw	0
  3905  0022D8  1604               	andwf	__div_to_l_@f1+3,f,c
  3906  0022DA  8E06               	bsf	__div_to_l_@f2+2,7,c
  3907  0022DC  0EFF               	movlw	255
  3908  0022DE  1604               	andwf	__div_to_l_@f2,f,c
  3909  0022E0  0EFF               	movlw	255
  3910  0022E2  1605               	andwf	__div_to_l_@f2+1,f,c
  3911  0022E4  0EFF               	movlw	255
  3912  0022E6  1606               	andwf	__div_to_l_@f2+2,f,c
  3913  0022E8  0E00               	movlw	0
  3914  0022EA  1607               	andwf	__div_to_l_@f2+3,f,c
  3915  0022EC  0E00               	movlw	0
  3916  0022EE  6E07               	movwf	__div_to_l_@quot,c
  3917  0022F0  0E00               	movlw	0
  3918  0022F2  6E08               	movwf	__div_to_l_@quot+1,c
  3919  0022F4  0E00               	movlw	0
  3920  0022F6  6E09               	movwf	__div_to_l_@quot+2,c
  3921  0022F8  0E00               	movlw	0
  3922  0022FA  6E0A               	movwf	__div_to_l_@quot+3,c
  3923  0022FC  0E7F               	movlw	127
  3924  0022FE  5E0C               	subwf	__div_to_l_@exp1,f,c
  3925  002300  500B               	movf	__div_to_l_@cntr,w,c
  3926  002302  0FA0               	addlw	160
  3927  002304  5E0C               	subwf	__div_to_l_@exp1,f,c
  3928  002306  0E20               	movlw	32
  3929  002308  6E0B               	movwf	__div_to_l_@cntr,c
  3930  00230A  D000               	goto	l2220
  3931  00230C                     l2220:
  3932  00230C  90D8               	bcf	status,0,c
  3933  00230E  3607               	rlcf	__div_to_l_@quot,f,c
  3934  002310  3608               	rlcf	__div_to_l_@quot+1,f,c
  3935  002312  3609               	rlcf	__div_to_l_@quot+2,f,c
  3936  002314  360A               	rlcf	__div_to_l_@quot+3,f,c
  3937  002316  5004               	movf	__div_to_l_@f2,w,c
  3938  002318  5C01               	subwf	__div_to_l_@f1,w,c
  3939  00231A  5005               	movf	__div_to_l_@f2+1,w,c
  3940  00231C  5802               	subwfb	__div_to_l_@f1+1,w,c
  3941  00231E  5006               	movf	__div_to_l_@f2+2,w,c
  3942  002320  5803               	subwfb	__div_to_l_@f1+2,w,c
  3943  002322  5007               	movf	__div_to_l_@f2+3,w,c
  3944  002324  5804               	subwfb	__div_to_l_@f1+3,w,c
  3945  002326  A0D8               	btfss	status,0,c
  3946  002328  D00A               	goto	l2228
  3947  00232A  5004               	movf	__div_to_l_@f2,w,c
  3948  00232C  5E01               	subwf	__div_to_l_@f1,f,c
  3949  00232E  5005               	movf	__div_to_l_@f2+1,w,c
  3950  002330  5A02               	subwfb	__div_to_l_@f1+1,f,c
  3951  002332  5006               	movf	__div_to_l_@f2+2,w,c
  3952  002334  5A03               	subwfb	__div_to_l_@f1+2,f,c
  3953  002336  5007               	movf	__div_to_l_@f2+3,w,c
  3954  002338  5A04               	subwfb	__div_to_l_@f1+3,f,c
  3955  00233A  8007               	bsf	__div_to_l_@quot,0,c
  3956  00233C  D000               	goto	l2228
  3957  00233E                     l2228:
  3958  00233E  90D8               	bcf	status,0,c
  3959  002340  3601               	rlcf	__div_to_l_@f1,f,c
  3960  002342  3602               	rlcf	__div_to_l_@f1+1,f,c
  3961  002344  3603               	rlcf	__div_to_l_@f1+2,f,c
  3962  002346  3604               	rlcf	__div_to_l_@f1+3,f,c
  3963  002348  2E0B               	decfsz	__div_to_l_@cntr,f,c
  3964  00234A  D7E0               	goto	l2220
  3965  00234C  D000               	goto	l2232
  3966  00234E                     l2232:
  3967  00234E  AE0C               	btfss	__div_to_l_@exp1,7,c
  3968  002350  D010               	goto	l2244
  3969  002352  500C               	movf	__div_to_l_@exp1,w,c
  3970  002354  0A80               	xorlw	128
  3971  002356  0F9F               	addlw	159
  3972  002358  B0D8               	btfsc	status,0,c
  3973  00235A  D003               	goto	l2240
  3974  00235C  D00D               	goto	l2246
  3975  00235E  D028               	goto	l515
  3976  002360  D000               	goto	l2240
  3977  002362                     l2240:
  3978  002362  90D8               	bcf	status,0,c
  3979  002364  320A               	rrcf	__div_to_l_@quot+3,f,c
  3980  002366  3209               	rrcf	__div_to_l_@quot+2,f,c
  3981  002368  3208               	rrcf	__div_to_l_@quot+1,f,c
  3982  00236A  3207               	rrcf	__div_to_l_@quot,f,c
  3983  00236C  3E0C               	incfsz	__div_to_l_@exp1,f,c
  3984  00236E  D7F9               	goto	l2240
  3985  002370  D017               	goto	l524
  3986  002372                     l2244:
  3987  002372  0E1F               	movlw	31
  3988  002374  640C               	cpfsgt	__div_to_l_@exp1,c
  3989  002376  D011               	goto	l2252
  3990  002378                     l2246:
  3991  002378  0E00               	movlw	0
  3992  00237A  6E01               	movwf	?__div_to_l_,c
  3993  00237C  0E00               	movlw	0
  3994  00237E  6E02               	movwf	?__div_to_l_+1,c
  3995  002380  0E00               	movlw	0
  3996  002382  6E03               	movwf	?__div_to_l_+2,c
  3997  002384  0E00               	movlw	0
  3998  002386  6E04               	movwf	?__div_to_l_+3,c
  3999  002388  D013               	goto	l515
  4000  00238A  D007               	goto	l2252
  4001  00238C                     l2250:
  4002  00238C  90D8               	bcf	status,0,c
  4003  00238E  3607               	rlcf	__div_to_l_@quot,f,c
  4004  002390  3608               	rlcf	__div_to_l_@quot+1,f,c
  4005  002392  3609               	rlcf	__div_to_l_@quot+2,f,c
  4006  002394  360A               	rlcf	__div_to_l_@quot+3,f,c
  4007  002396  060C               	decf	__div_to_l_@exp1,f,c
  4008  002398  D000               	goto	l2252
  4009  00239A                     l2252:
  4010  00239A  500C               	movf	__div_to_l_@exp1,w,c
  4011  00239C  A4D8               	btfss	status,2,c
  4012  00239E  D7F6               	goto	l2250
  4013  0023A0                     l524:
  4014  0023A0  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4015  0023A4  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4016  0023A8  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4017  0023AC  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4018  0023B0                     l515:
  4019  0023B0  0012               	return		;funcret
  4020  0023B2                     __end_of__div_to_l_:
  4021                           	opt stack 0
  4022                           tblptru	equ	0xFF8
  4023                           tblptrh	equ	0xFF7
  4024                           tblptrl	equ	0xFF6
  4025                           tablat	equ	0xFF5
  4026                           prodh	equ	0xFF4
  4027                           prodl	equ	0xFF3
  4028                           postinc0	equ	0xFEE
  4029                           wreg	equ	0xFE8
  4030                           postdec1	equ	0xFE5
  4031                           plusw1	equ	0xFE3
  4032                           fsr1l	equ	0xFE1
  4033                           indf2	equ	0xFDF
  4034                           postinc2	equ	0xFDE
  4035                           postdec2	equ	0xFDD
  4036                           plusw2	equ	0xFDB
  4037                           fsr2h	equ	0xFDA
  4038                           fsr2l	equ	0xFD9
  4039                           status	equ	0xFD8
  4040                           
  4041 ;; *************** function ___lltoft *****************
  4042 ;; Defined at:
  4043 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  4044 ;; Parameters:    Size  Location     Type
  4045 ;;  c               4    8[COMRAM] unsigned long 
  4046 ;; Auto vars:     Size  Location     Type
  4047 ;;  exp             1   16[COMRAM] unsigned char 
  4048 ;; Return value:  Size  Location     Type
  4049 ;;                  3    8[COMRAM] float 
  4050 ;; Registers used:
  4051 ;;		wreg, status,2, status,0, cstack
  4052 ;; Tracked objects:
  4053 ;;		On entry : 0/0
  4054 ;;		On exit  : 0/0
  4055 ;;		Unchanged: 0/0
  4056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4057 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4058 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4059 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4060 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4061 ;;Total ram usage:        9 bytes
  4062 ;; Hardware stack levels used:    1
  4063 ;; Hardware stack levels required when called:    1
  4064 ;; This function calls:
  4065 ;;		___ftpack
  4066 ;; This function is called by:
  4067 ;;		_printf
  4068 ;; This function uses a non-reentrant model
  4069 ;;
  4070                           
  4071                           	psect	text11
  4072  002A52                     __ptext11:
  4073                           	opt stack 0
  4074  002A52                     ___lltoft:
  4075                           	opt stack 28
  4076                           
  4077                           ;incstack = 0
  4078  002A52  0E8E               	movlw	142
  4079  002A54  6E11               	movwf	___lltoft@exp,c
  4080  002A56  D007               	goto	l2372
  4081  002A58                     l2370:
  4082  002A58  90D8               	bcf	status,0,c
  4083  002A5A  320C               	rrcf	___lltoft@c+3,f,c
  4084  002A5C  320B               	rrcf	___lltoft@c+2,f,c
  4085  002A5E  320A               	rrcf	___lltoft@c+1,f,c
  4086  002A60  3209               	rrcf	___lltoft@c,f,c
  4087  002A62  2A11               	incf	___lltoft@exp,f,c
  4088  002A64  D000               	goto	l2372
  4089  002A66                     l2372:
  4090  002A66  0E00               	movlw	0
  4091  002A68  1409               	andwf	___lltoft@c,w,c
  4092  002A6A  6E0D               	movwf	??___lltoft& (0+255),c
  4093  002A6C  0E00               	movlw	0
  4094  002A6E  140A               	andwf	___lltoft@c+1,w,c
  4095  002A70  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4096  002A72  0E00               	movlw	0
  4097  002A74  140B               	andwf	___lltoft@c+2,w,c
  4098  002A76  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4099  002A78  0EFF               	movlw	255
  4100  002A7A  140C               	andwf	___lltoft@c+3,w,c
  4101  002A7C  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4102  002A7E  500D               	movf	??___lltoft,w,c
  4103  002A80  100E               	iorwf	??___lltoft+1,w,c
  4104  002A82  100F               	iorwf	??___lltoft+2,w,c
  4105  002A84  1010               	iorwf	??___lltoft+3,w,c
  4106  002A86  A4D8               	btfss	status,2,c
  4107  002A88  D7E7               	goto	l2370
  4108  002A8A  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4109  002A8E  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4110  002A92  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4111  002A96  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4112  002A9A  0E00               	movlw	0
  4113  002A9C  6E05               	movwf	___ftpack@sign,c
  4114  002A9E  EC39  F013         	call	___ftpack	;wreg free
  4115  002AA2  C001  F009         	movff	?___ftpack,?___lltoft
  4116  002AA6  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4117  002AAA  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4118  002AAE  D000               	goto	l750
  4119  002AB0                     l750:
  4120  002AB0  0012               	return		;funcret
  4121  002AB2                     __end_of___lltoft:
  4122                           	opt stack 0
  4123                           tblptru	equ	0xFF8
  4124                           tblptrh	equ	0xFF7
  4125                           tblptrl	equ	0xFF6
  4126                           tablat	equ	0xFF5
  4127                           prodh	equ	0xFF4
  4128                           prodl	equ	0xFF3
  4129                           postinc0	equ	0xFEE
  4130                           wreg	equ	0xFE8
  4131                           postdec1	equ	0xFE5
  4132                           plusw1	equ	0xFE3
  4133                           fsr1l	equ	0xFE1
  4134                           indf2	equ	0xFDF
  4135                           postinc2	equ	0xFDE
  4136                           postdec2	equ	0xFDD
  4137                           plusw2	equ	0xFDB
  4138                           fsr2h	equ	0xFDA
  4139                           fsr2l	equ	0xFD9
  4140                           status	equ	0xFD8
  4141                           
  4142 ;; *************** function ___llmod *****************
  4143 ;; Defined at:
  4144 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  4145 ;; Parameters:    Size  Location     Type
  4146 ;;  dividend        4    0[COMRAM] unsigned long 
  4147 ;;  divisor         4    4[COMRAM] unsigned long 
  4148 ;; Auto vars:     Size  Location     Type
  4149 ;;  counter         1    8[COMRAM] unsigned char 
  4150 ;; Return value:  Size  Location     Type
  4151 ;;                  4    0[COMRAM] unsigned long 
  4152 ;; Registers used:
  4153 ;;		wreg, status,2, status,0
  4154 ;; Tracked objects:
  4155 ;;		On entry : 0/0
  4156 ;;		On exit  : 0/0
  4157 ;;		Unchanged: 0/0
  4158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4159 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4160 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4162 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4163 ;;Total ram usage:        9 bytes
  4164 ;; Hardware stack levels used:    1
  4165 ;; This function calls:
  4166 ;;		Nothing
  4167 ;; This function is called by:
  4168 ;;		_printf
  4169 ;; This function uses a non-reentrant model
  4170 ;;
  4171                           
  4172                           	psect	text12
  4173  002972                     __ptext12:
  4174                           	opt stack 0
  4175  002972                     ___llmod:
  4176                           	opt stack 29
  4177                           
  4178                           ;incstack = 0
  4179  002972  5005               	movf	___llmod@divisor,w,c
  4180  002974  1006               	iorwf	___llmod@divisor+1,w,c
  4181  002976  1007               	iorwf	___llmod@divisor+2,w,c
  4182  002978  1008               	iorwf	___llmod@divisor+3,w,c
  4183  00297A  B4D8               	btfsc	status,2,c
  4184  00297C  D029               	goto	l730
  4185  00297E  0E01               	movlw	1
  4186  002980  6E09               	movwf	___llmod@counter,c
  4187  002982  D007               	goto	l2358
  4188  002984                     l2356:
  4189  002984  90D8               	bcf	status,0,c
  4190  002986  3605               	rlcf	___llmod@divisor,f,c
  4191  002988  3606               	rlcf	___llmod@divisor+1,f,c
  4192  00298A  3607               	rlcf	___llmod@divisor+2,f,c
  4193  00298C  3608               	rlcf	___llmod@divisor+3,f,c
  4194  00298E  2A09               	incf	___llmod@counter,f,c
  4195  002990  D000               	goto	l2358
  4196  002992                     l2358:
  4197  002992  BE08               	btfsc	___llmod@divisor+3,7,c
  4198  002994  D002               	goto	l2360
  4199  002996  D7F6               	goto	l2356
  4200  002998  D000               	goto	l2360
  4201  00299A                     l2360:
  4202  00299A  5005               	movf	___llmod@divisor,w,c
  4203  00299C  5C01               	subwf	___llmod@dividend,w,c
  4204  00299E  5006               	movf	___llmod@divisor+1,w,c
  4205  0029A0  5802               	subwfb	___llmod@dividend+1,w,c
  4206  0029A2  5007               	movf	___llmod@divisor+2,w,c
  4207  0029A4  5803               	subwfb	___llmod@dividend+2,w,c
  4208  0029A6  5008               	movf	___llmod@divisor+3,w,c
  4209  0029A8  5804               	subwfb	___llmod@dividend+3,w,c
  4210  0029AA  A0D8               	btfss	status,0,c
  4211  0029AC  D009               	goto	l2364
  4212  0029AE  5005               	movf	___llmod@divisor,w,c
  4213  0029B0  5E01               	subwf	___llmod@dividend,f,c
  4214  0029B2  5006               	movf	___llmod@divisor+1,w,c
  4215  0029B4  5A02               	subwfb	___llmod@dividend+1,f,c
  4216  0029B6  5007               	movf	___llmod@divisor+2,w,c
  4217  0029B8  5A03               	subwfb	___llmod@dividend+2,f,c
  4218  0029BA  5008               	movf	___llmod@divisor+3,w,c
  4219  0029BC  5A04               	subwfb	___llmod@dividend+3,f,c
  4220  0029BE  D000               	goto	l2364
  4221  0029C0                     l2364:
  4222  0029C0  90D8               	bcf	status,0,c
  4223  0029C2  3208               	rrcf	___llmod@divisor+3,f,c
  4224  0029C4  3207               	rrcf	___llmod@divisor+2,f,c
  4225  0029C6  3206               	rrcf	___llmod@divisor+1,f,c
  4226  0029C8  3205               	rrcf	___llmod@divisor,f,c
  4227  0029CA  2E09               	decfsz	___llmod@counter,f,c
  4228  0029CC  D7E6               	goto	l2360
  4229  0029CE  D000               	goto	l730
  4230  0029D0                     l730:
  4231  0029D0  C001  F001         	movff	___llmod@dividend,?___llmod
  4232  0029D4  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4233  0029D8  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4234  0029DC  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4235  0029E0  0012               	return		;funcret
  4236  0029E2                     __end_of___llmod:
  4237                           	opt stack 0
  4238                           tblptru	equ	0xFF8
  4239                           tblptrh	equ	0xFF7
  4240                           tblptrl	equ	0xFF6
  4241                           tablat	equ	0xFF5
  4242                           prodh	equ	0xFF4
  4243                           prodl	equ	0xFF3
  4244                           postinc0	equ	0xFEE
  4245                           wreg	equ	0xFE8
  4246                           postdec1	equ	0xFE5
  4247                           plusw1	equ	0xFE3
  4248                           fsr1l	equ	0xFE1
  4249                           indf2	equ	0xFDF
  4250                           postinc2	equ	0xFDE
  4251                           postdec2	equ	0xFDD
  4252                           plusw2	equ	0xFDB
  4253                           fsr2h	equ	0xFDA
  4254                           fsr2l	equ	0xFD9
  4255                           status	equ	0xFD8
  4256                           
  4257 ;; *************** function ___lldiv *****************
  4258 ;; Defined at:
  4259 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  4260 ;; Parameters:    Size  Location     Type
  4261 ;;  dividend        4    0[COMRAM] unsigned long 
  4262 ;;  divisor         4    4[COMRAM] unsigned long 
  4263 ;; Auto vars:     Size  Location     Type
  4264 ;;  quotient        4    8[COMRAM] unsigned long 
  4265 ;;  counter         1   12[COMRAM] unsigned char 
  4266 ;; Return value:  Size  Location     Type
  4267 ;;                  4    0[COMRAM] unsigned long 
  4268 ;; Registers used:
  4269 ;;		wreg, status,2, status,0
  4270 ;; Tracked objects:
  4271 ;;		On entry : 0/0
  4272 ;;		On exit  : 0/0
  4273 ;;		Unchanged: 0/0
  4274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4275 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4276 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4278 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4279 ;;Total ram usage:       13 bytes
  4280 ;; Hardware stack levels used:    1
  4281 ;; This function calls:
  4282 ;;		Nothing
  4283 ;; This function is called by:
  4284 ;;		_printf
  4285 ;; This function uses a non-reentrant model
  4286 ;;
  4287                           
  4288                           	psect	text13
  4289  002864                     __ptext13:
  4290                           	opt stack 0
  4291  002864                     ___lldiv:
  4292                           	opt stack 29
  4293                           
  4294                           ;incstack = 0
  4295  002864  0E00               	movlw	0
  4296  002866  6E09               	movwf	___lldiv@quotient,c
  4297  002868  0E00               	movlw	0
  4298  00286A  6E0A               	movwf	___lldiv@quotient+1,c
  4299  00286C  0E00               	movlw	0
  4300  00286E  6E0B               	movwf	___lldiv@quotient+2,c
  4301  002870  0E00               	movlw	0
  4302  002872  6E0C               	movwf	___lldiv@quotient+3,c
  4303  002874  5005               	movf	___lldiv@divisor,w,c
  4304  002876  1006               	iorwf	___lldiv@divisor+1,w,c
  4305  002878  1007               	iorwf	___lldiv@divisor+2,w,c
  4306  00287A  1008               	iorwf	___lldiv@divisor+3,w,c
  4307  00287C  B4D8               	btfsc	status,2,c
  4308  00287E  D02F               	goto	l720
  4309  002880  0E01               	movlw	1
  4310  002882  6E0D               	movwf	___lldiv@counter,c
  4311  002884  D007               	goto	l2338
  4312  002886                     l2336:
  4313  002886  90D8               	bcf	status,0,c
  4314  002888  3605               	rlcf	___lldiv@divisor,f,c
  4315  00288A  3606               	rlcf	___lldiv@divisor+1,f,c
  4316  00288C  3607               	rlcf	___lldiv@divisor+2,f,c
  4317  00288E  3608               	rlcf	___lldiv@divisor+3,f,c
  4318  002890  2A0D               	incf	___lldiv@counter,f,c
  4319  002892  D000               	goto	l2338
  4320  002894                     l2338:
  4321  002894  BE08               	btfsc	___lldiv@divisor+3,7,c
  4322  002896  D002               	goto	l2340
  4323  002898  D7F6               	goto	l2336
  4324  00289A  D000               	goto	l2340
  4325  00289C                     l2340:
  4326  00289C  90D8               	bcf	status,0,c
  4327  00289E  3609               	rlcf	___lldiv@quotient,f,c
  4328  0028A0  360A               	rlcf	___lldiv@quotient+1,f,c
  4329  0028A2  360B               	rlcf	___lldiv@quotient+2,f,c
  4330  0028A4  360C               	rlcf	___lldiv@quotient+3,f,c
  4331  0028A6  5005               	movf	___lldiv@divisor,w,c
  4332  0028A8  5C01               	subwf	___lldiv@dividend,w,c
  4333  0028AA  5006               	movf	___lldiv@divisor+1,w,c
  4334  0028AC  5802               	subwfb	___lldiv@dividend+1,w,c
  4335  0028AE  5007               	movf	___lldiv@divisor+2,w,c
  4336  0028B0  5803               	subwfb	___lldiv@dividend+2,w,c
  4337  0028B2  5008               	movf	___lldiv@divisor+3,w,c
  4338  0028B4  5804               	subwfb	___lldiv@dividend+3,w,c
  4339  0028B6  A0D8               	btfss	status,0,c
  4340  0028B8  D00A               	goto	l2348
  4341  0028BA  5005               	movf	___lldiv@divisor,w,c
  4342  0028BC  5E01               	subwf	___lldiv@dividend,f,c
  4343  0028BE  5006               	movf	___lldiv@divisor+1,w,c
  4344  0028C0  5A02               	subwfb	___lldiv@dividend+1,f,c
  4345  0028C2  5007               	movf	___lldiv@divisor+2,w,c
  4346  0028C4  5A03               	subwfb	___lldiv@dividend+2,f,c
  4347  0028C6  5008               	movf	___lldiv@divisor+3,w,c
  4348  0028C8  5A04               	subwfb	___lldiv@dividend+3,f,c
  4349  0028CA  8009               	bsf	___lldiv@quotient,0,c
  4350  0028CC  D000               	goto	l2348
  4351  0028CE                     l2348:
  4352  0028CE  90D8               	bcf	status,0,c
  4353  0028D0  3208               	rrcf	___lldiv@divisor+3,f,c
  4354  0028D2  3207               	rrcf	___lldiv@divisor+2,f,c
  4355  0028D4  3206               	rrcf	___lldiv@divisor+1,f,c
  4356  0028D6  3205               	rrcf	___lldiv@divisor,f,c
  4357  0028D8  2E0D               	decfsz	___lldiv@counter,f,c
  4358  0028DA  D7E0               	goto	l2340
  4359  0028DC  D000               	goto	l720
  4360  0028DE                     l720:
  4361  0028DE  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4362  0028E2  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4363  0028E6  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4364  0028EA  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4365  0028EE  0012               	return		;funcret
  4366  0028F0                     __end_of___lldiv:
  4367                           	opt stack 0
  4368                           tblptru	equ	0xFF8
  4369                           tblptrh	equ	0xFF7
  4370                           tblptrl	equ	0xFF6
  4371                           tablat	equ	0xFF5
  4372                           prodh	equ	0xFF4
  4373                           prodl	equ	0xFF3
  4374                           postinc0	equ	0xFEE
  4375                           wreg	equ	0xFE8
  4376                           postdec1	equ	0xFE5
  4377                           plusw1	equ	0xFE3
  4378                           fsr1l	equ	0xFE1
  4379                           indf2	equ	0xFDF
  4380                           postinc2	equ	0xFDE
  4381                           postdec2	equ	0xFDD
  4382                           plusw2	equ	0xFDB
  4383                           fsr2h	equ	0xFDA
  4384                           fsr2l	equ	0xFD9
  4385                           status	equ	0xFD8
  4386                           
  4387 ;; *************** function ___fttol *****************
  4388 ;; Defined at:
  4389 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  4390 ;; Parameters:    Size  Location     Type
  4391 ;;  f1              3   27[COMRAM] float 
  4392 ;; Auto vars:     Size  Location     Type
  4393 ;;  lval            4   37[COMRAM] unsigned long 
  4394 ;;  exp1            1   41[COMRAM] unsigned char 
  4395 ;;  sign1           1   36[COMRAM] unsigned char 
  4396 ;; Return value:  Size  Location     Type
  4397 ;;                  4   27[COMRAM] long 
  4398 ;; Registers used:
  4399 ;;		wreg, status,2, status,0
  4400 ;; Tracked objects:
  4401 ;;		On entry : 0/0
  4402 ;;		On exit  : 0/0
  4403 ;;		Unchanged: 0/0
  4404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4405 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4406 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4407 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4408 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4409 ;;Total ram usage:       15 bytes
  4410 ;; Hardware stack levels used:    1
  4411 ;; This function calls:
  4412 ;;		Nothing
  4413 ;; This function is called by:
  4414 ;;		_main
  4415 ;;		_printf
  4416 ;; This function uses a non-reentrant model
  4417 ;;
  4418                           
  4419                           	psect	text14
  4420  0024AA                     __ptext14:
  4421                           	opt stack 0
  4422  0024AA                     ___fttol:
  4423                           	opt stack 29
  4424                           
  4425                           ;incstack = 0
  4426  0024AA  C01E  F020         	movff	___fttol@f1+2,??___fttol
  4427  0024AE  6A21               	clrf	(??___fttol+1)& (0+255),c
  4428  0024B0  6A22               	clrf	(??___fttol+2)& (0+255),c
  4429  0024B2  341D               	rlcf	___fttol@f1+1,w,c
  4430  0024B4  3620               	rlcf	??___fttol& (0+255),f,c
  4431  0024B6  E301               	bnc	u2291
  4432  0024B8  8021               	bsf	(??___fttol+1)& (0+255),0,c
  4433  0024BA                     u2291:
  4434  0024BA  5020               	movf	??___fttol,w,c
  4435  0024BC  6E2A               	movwf	___fttol@exp1,c
  4436  0024BE  502A               	movf	___fttol@exp1,w,c
  4437  0024C0  A4D8               	btfss	status,2,c
  4438  0024C2  D002               	goto	l2290
  4439  0024C4  D039               	goto	l2314
  4440  0024C6  D063               	goto	l681
  4441  0024C8                     l2290:
  4442  0024C8  0E17               	movlw	23
  4443  0024CA  6E20               	movwf	??___fttol& (0+255),c
  4444  0024CC  C01C  F021         	movff	___fttol@f1,??___fttol+1
  4445  0024D0  C01D  F022         	movff	___fttol@f1+1,??___fttol+2
  4446  0024D4  C01E  F023         	movff	___fttol@f1+2,??___fttol+3
  4447  0024D8  2820               	incf	??___fttol,w,c
  4448  0024DA  6E24               	movwf	(??___fttol+4)& (0+255),c
  4449  0024DC  D004               	goto	u2310
  4450  0024DE                     u2315:
  4451  0024DE  90D8               	bcf	status,0,c
  4452  0024E0  3223               	rrcf	??___fttol+3,f,c
  4453  0024E2  3222               	rrcf	??___fttol+2,f,c
  4454  0024E4  3221               	rrcf	??___fttol+1,f,c
  4455  0024E6                     u2310:
  4456  0024E6  2E24               	decfsz	(??___fttol+4)& (0+255),f,c
  4457  0024E8  D7FA               	goto	u2315
  4458  0024EA  5021               	movf	??___fttol+1,w,c
  4459  0024EC  6E25               	movwf	___fttol@sign1,c
  4460  0024EE  8E1D               	bsf	___fttol@f1+1,7,c
  4461  0024F0  0EFF               	movlw	255
  4462  0024F2  161C               	andwf	___fttol@f1,f,c
  4463  0024F4  0EFF               	movlw	255
  4464  0024F6  161D               	andwf	___fttol@f1+1,f,c
  4465  0024F8  0E00               	movlw	0
  4466  0024FA  161E               	andwf	___fttol@f1+2,f,c
  4467  0024FC  501C               	movf	___fttol@f1,w,c
  4468  0024FE  6E26               	movwf	___fttol@lval,c
  4469  002500  501D               	movf	___fttol@f1+1,w,c
  4470  002502  6E27               	movwf	___fttol@lval+1,c
  4471  002504  501E               	movf	___fttol@f1+2,w,c
  4472  002506  6E28               	movwf	___fttol@lval+2,c
  4473  002508  6A29               	clrf	___fttol@lval+3,c
  4474  00250A  0E8E               	movlw	142
  4475  00250C  5E2A               	subwf	___fttol@exp1,f,c
  4476  00250E  AE2A               	btfss	___fttol@exp1,7,c
  4477  002510  D010               	goto	l2312
  4478  002512  502A               	movf	___fttol@exp1,w,c
  4479  002514  0A80               	xorlw	128
  4480  002516  0F8F               	addlw	143
  4481  002518  B0D8               	btfsc	status,0,c
  4482  00251A  D003               	goto	l2308
  4483  00251C  D00D               	goto	l2314
  4484  00251E  D037               	goto	l681
  4485  002520  D000               	goto	l2308
  4486  002522                     l2308:
  4487  002522  90D8               	bcf	status,0,c
  4488  002524  3229               	rrcf	___fttol@lval+3,f,c
  4489  002526  3228               	rrcf	___fttol@lval+2,f,c
  4490  002528  3227               	rrcf	___fttol@lval+1,f,c
  4491  00252A  3226               	rrcf	___fttol@lval,f,c
  4492  00252C  3E2A               	incfsz	___fttol@exp1,f,c
  4493  00252E  D7F9               	goto	l2308
  4494  002530  D019               	goto	l2322
  4495  002532                     l2312:
  4496  002532  0E17               	movlw	23
  4497  002534  642A               	cpfsgt	___fttol@exp1,c
  4498  002536  D011               	goto	l2320
  4499  002538                     l2314:
  4500  002538  0E00               	movlw	0
  4501  00253A  6E1C               	movwf	?___fttol,c
  4502  00253C  0E00               	movlw	0
  4503  00253E  6E1D               	movwf	?___fttol+1,c
  4504  002540  0E00               	movlw	0
  4505  002542  6E1E               	movwf	?___fttol+2,c
  4506  002544  0E00               	movlw	0
  4507  002546  6E1F               	movwf	?___fttol+3,c
  4508  002548  D022               	goto	l681
  4509  00254A  D007               	goto	l2320
  4510  00254C                     l2318:
  4511  00254C  90D8               	bcf	status,0,c
  4512  00254E  3626               	rlcf	___fttol@lval,f,c
  4513  002550  3627               	rlcf	___fttol@lval+1,f,c
  4514  002552  3628               	rlcf	___fttol@lval+2,f,c
  4515  002554  3629               	rlcf	___fttol@lval+3,f,c
  4516  002556  062A               	decf	___fttol@exp1,f,c
  4517  002558  D000               	goto	l2320
  4518  00255A                     l2320:
  4519  00255A  502A               	movf	___fttol@exp1,w,c
  4520  00255C  B4D8               	btfsc	status,2,c
  4521  00255E  D002               	goto	l2322
  4522  002560  D7F5               	goto	l2318
  4523  002562  D000               	goto	l2322
  4524  002564                     l2322:
  4525  002564  5025               	movf	___fttol@sign1,w,c
  4526  002566  B4D8               	btfsc	status,2,c
  4527  002568  D009               	goto	l2326
  4528  00256A  1E29               	comf	___fttol@lval+3,f,c
  4529  00256C  1E28               	comf	___fttol@lval+2,f,c
  4530  00256E  1E27               	comf	___fttol@lval+1,f,c
  4531  002570  6C26               	negf	___fttol@lval,c
  4532  002572  0E00               	movlw	0
  4533  002574  2227               	addwfc	___fttol@lval+1,f,c
  4534  002576  2228               	addwfc	___fttol@lval+2,f,c
  4535  002578  2229               	addwfc	___fttol@lval+3,f,c
  4536  00257A  D000               	goto	l2326
  4537  00257C                     l2326:
  4538  00257C  C026  F01C         	movff	___fttol@lval,?___fttol
  4539  002580  C027  F01D         	movff	___fttol@lval+1,?___fttol+1
  4540  002584  C028  F01E         	movff	___fttol@lval+2,?___fttol+2
  4541  002588  C029  F01F         	movff	___fttol@lval+3,?___fttol+3
  4542  00258C  D000               	goto	l681
  4543  00258E                     l681:
  4544  00258E  0012               	return		;funcret
  4545  002590                     __end_of___fttol:
  4546                           	opt stack 0
  4547                           tblptru	equ	0xFF8
  4548                           tblptrh	equ	0xFF7
  4549                           tblptrl	equ	0xFF6
  4550                           tablat	equ	0xFF5
  4551                           prodh	equ	0xFF4
  4552                           prodl	equ	0xFF3
  4553                           postinc0	equ	0xFEE
  4554                           wreg	equ	0xFE8
  4555                           postdec1	equ	0xFE5
  4556                           plusw1	equ	0xFE3
  4557                           fsr1l	equ	0xFE1
  4558                           indf2	equ	0xFDF
  4559                           postinc2	equ	0xFDE
  4560                           postdec2	equ	0xFDD
  4561                           plusw2	equ	0xFDB
  4562                           fsr2h	equ	0xFDA
  4563                           fsr2l	equ	0xFD9
  4564                           status	equ	0xFD8
  4565                           
  4566 ;; *************** function ___ftsub *****************
  4567 ;; Defined at:
  4568 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  4569 ;; Parameters:    Size  Location     Type
  4570 ;;  f1              3   84[COMRAM] float 
  4571 ;;  f2              3   87[COMRAM] float 
  4572 ;; Auto vars:     Size  Location     Type
  4573 ;;		None
  4574 ;; Return value:  Size  Location     Type
  4575 ;;                  3   84[COMRAM] float 
  4576 ;; Registers used:
  4577 ;;		wreg, status,2, status,0, cstack
  4578 ;; Tracked objects:
  4579 ;;		On entry : 0/0
  4580 ;;		On exit  : 0/0
  4581 ;;		Unchanged: 0/0
  4582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4583 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4586 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4587 ;;Total ram usage:        6 bytes
  4588 ;; Hardware stack levels used:    1
  4589 ;; Hardware stack levels required when called:    2
  4590 ;; This function calls:
  4591 ;;		___ftadd
  4592 ;; This function is called by:
  4593 ;;		_printf
  4594 ;; This function uses a non-reentrant model
  4595 ;;
  4596                           
  4597                           	psect	text15
  4598  002AB2                     __ptext15:
  4599                           	opt stack 0
  4600  002AB2                     ___ftsub:
  4601                           	opt stack 27
  4602                           
  4603                           ;incstack = 0
  4604  002AB2  5058               	movf	___ftsub@f2,w,c
  4605  002AB4  1059               	iorwf	___ftsub@f2+1,w,c
  4606  002AB6  105A               	iorwf	___ftsub@f2+2,w,c
  4607  002AB8  B4D8               	btfsc	status,2,c
  4608  002ABA  D007               	goto	l2258
  4609  002ABC  0E00               	movlw	0
  4610  002ABE  1A58               	xorwf	___ftsub@f2,f,c
  4611  002AC0  0E00               	movlw	0
  4612  002AC2  1A59               	xorwf	___ftsub@f2+1,f,c
  4613  002AC4  0E80               	movlw	128
  4614  002AC6  1A5A               	xorwf	___ftsub@f2+2,f,c
  4615  002AC8  D000               	goto	l2258
  4616  002ACA                     l2258:
  4617  002ACA  C055  F049         	movff	___ftsub@f1,___ftadd@f1
  4618  002ACE  C056  F04A         	movff	___ftsub@f1+1,___ftadd@f1+1
  4619  002AD2  C057  F04B         	movff	___ftsub@f1+2,___ftadd@f1+2
  4620  002AD6  C058  F04C         	movff	___ftsub@f2,___ftadd@f2
  4621  002ADA  C059  F04D         	movff	___ftsub@f2+1,___ftadd@f2+1
  4622  002ADE  C05A  F04E         	movff	___ftsub@f2+2,___ftadd@f2+2
  4623  002AE2  ECEA  F00F         	call	___ftadd	;wreg free
  4624  002AE6  C049  F055         	movff	?___ftadd,?___ftsub
  4625  002AEA  C04A  F056         	movff	?___ftadd+1,?___ftsub+1
  4626  002AEE  C04B  F057         	movff	?___ftadd+2,?___ftsub+2
  4627  002AF2  D000               	goto	l677
  4628  002AF4                     l677:
  4629  002AF4  0012               	return		;funcret
  4630  002AF6                     __end_of___ftsub:
  4631                           	opt stack 0
  4632                           tblptru	equ	0xFF8
  4633                           tblptrh	equ	0xFF7
  4634                           tblptrl	equ	0xFF6
  4635                           tablat	equ	0xFF5
  4636                           prodh	equ	0xFF4
  4637                           prodl	equ	0xFF3
  4638                           postinc0	equ	0xFEE
  4639                           wreg	equ	0xFE8
  4640                           postdec1	equ	0xFE5
  4641                           plusw1	equ	0xFE3
  4642                           fsr1l	equ	0xFE1
  4643                           indf2	equ	0xFDF
  4644                           postinc2	equ	0xFDE
  4645                           postdec2	equ	0xFDD
  4646                           plusw2	equ	0xFDB
  4647                           fsr2h	equ	0xFDA
  4648                           fsr2l	equ	0xFD9
  4649                           status	equ	0xFD8
  4650                           
  4651 ;; *************** function ___ftadd *****************
  4652 ;; Defined at:
  4653 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  4654 ;; Parameters:    Size  Location     Type
  4655 ;;  f1              3   72[COMRAM] float 
  4656 ;;  f2              3   75[COMRAM] float 
  4657 ;; Auto vars:     Size  Location     Type
  4658 ;;  exp1            1   83[COMRAM] unsigned char 
  4659 ;;  exp2            1   82[COMRAM] unsigned char 
  4660 ;;  sign            1   81[COMRAM] unsigned char 
  4661 ;; Return value:  Size  Location     Type
  4662 ;;                  3   72[COMRAM] float 
  4663 ;; Registers used:
  4664 ;;		wreg, status,2, status,0, cstack
  4665 ;; Tracked objects:
  4666 ;;		On entry : 0/0
  4667 ;;		On exit  : 0/0
  4668 ;;		Unchanged: 0/0
  4669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4670 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4671 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4672 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4673 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4674 ;;Total ram usage:       12 bytes
  4675 ;; Hardware stack levels used:    1
  4676 ;; Hardware stack levels required when called:    1
  4677 ;; This function calls:
  4678 ;;		___ftpack
  4679 ;; This function is called by:
  4680 ;;		_main
  4681 ;;		_printf
  4682 ;;		___ftsub
  4683 ;; This function uses a non-reentrant model
  4684 ;;
  4685                           
  4686                           	psect	text16
  4687  001FD4                     __ptext16:
  4688                           	opt stack 0
  4689  001FD4                     ___ftadd:
  4690                           	opt stack 27
  4691                           
  4692                           ;incstack = 0
  4693  001FD4  C04B  F04F         	movff	___ftadd@f1+2,??___ftadd
  4694  001FD8  6A50               	clrf	(??___ftadd+1)& (0+255),c
  4695  001FDA  6A51               	clrf	(??___ftadd+2)& (0+255),c
  4696  001FDC  344A               	rlcf	___ftadd@f1+1,w,c
  4697  001FDE  364F               	rlcf	??___ftadd& (0+255),f,c
  4698  001FE0  E301               	bnc	u1511
  4699  001FE2  8050               	bsf	(??___ftadd+1)& (0+255),0,c
  4700  001FE4                     u1511:
  4701  001FE4  504F               	movf	??___ftadd,w,c
  4702  001FE6  6E54               	movwf	___ftadd@exp1,c
  4703  001FE8  C04E  F04F         	movff	___ftadd@f2+2,??___ftadd
  4704  001FEC  6A50               	clrf	(??___ftadd+1)& (0+255),c
  4705  001FEE  6A51               	clrf	(??___ftadd+2)& (0+255),c
  4706  001FF0  344D               	rlcf	___ftadd@f2+1,w,c
  4707  001FF2  364F               	rlcf	??___ftadd& (0+255),f,c
  4708  001FF4  E301               	bnc	u1521
  4709  001FF6  8050               	bsf	(??___ftadd+1)& (0+255),0,c
  4710  001FF8                     u1521:
  4711  001FF8  504F               	movf	??___ftadd,w,c
  4712  001FFA  6E53               	movwf	___ftadd@exp2,c
  4713  001FFC  5054               	movf	___ftadd@exp1,w,c
  4714  001FFE  B4D8               	btfsc	status,2,c
  4715  002000  D00B               	goto	l596
  4716  002002  5053               	movf	___ftadd@exp2,w,c
  4717  002004  5C54               	subwf	___ftadd@exp1,w,c
  4718  002006  B0D8               	btfsc	status,0,c
  4719  002008  D00E               	goto	l1834
  4720  00200A  5054               	movf	___ftadd@exp1,w,c
  4721  00200C  0800               	sublw	0
  4722  00200E  2453               	addwf	___ftadd@exp2,w,c
  4723  002010  6E4F               	movwf	??___ftadd& (0+255),c
  4724  002012  0E18               	movlw	24
  4725  002014  644F               	cpfsgt	??___ftadd,c
  4726  002016  D007               	goto	l1834
  4727  002018                     l596:
  4728  002018  C04C  F049         	movff	___ftadd@f2,?___ftadd
  4729  00201C  C04D  F04A         	movff	___ftadd@f2+1,?___ftadd+1
  4730  002020  C04E  F04B         	movff	___ftadd@f2+2,?___ftadd+2
  4731  002024  D0B8               	goto	l597
  4732  002026                     l1834:
  4733  002026  5053               	movf	___ftadd@exp2,w,c
  4734  002028  B4D8               	btfsc	status,2,c
  4735  00202A  D00B               	goto	l600
  4736  00202C  5054               	movf	___ftadd@exp1,w,c
  4737  00202E  5C53               	subwf	___ftadd@exp2,w,c
  4738  002030  B0D8               	btfsc	status,0,c
  4739  002032  D00E               	goto	l1840
  4740  002034  5053               	movf	___ftadd@exp2,w,c
  4741  002036  0800               	sublw	0
  4742  002038  2454               	addwf	___ftadd@exp1,w,c
  4743  00203A  6E4F               	movwf	??___ftadd& (0+255),c
  4744  00203C  0E18               	movlw	24
  4745  00203E  644F               	cpfsgt	??___ftadd,c
  4746  002040  D007               	goto	l1840
  4747  002042                     l600:
  4748  002042  C049  F049         	movff	___ftadd@f1,?___ftadd
  4749  002046  C04A  F04A         	movff	___ftadd@f1+1,?___ftadd+1
  4750  00204A  C04B  F04B         	movff	___ftadd@f1+2,?___ftadd+2
  4751  00204E  D0A3               	goto	l597
  4752  002050                     l1840:
  4753  002050  0E06               	movlw	6
  4754  002052  6E52               	movwf	___ftadd@sign,c
  4755  002054  AE4B               	btfss	___ftadd@f1+2,7,c
  4756  002056  D002               	goto	l1846
  4757  002058  8E52               	bsf	___ftadd@sign,7,c
  4758  00205A  D000               	goto	l1846
  4759  00205C                     l1846:
  4760  00205C  BE4E               	btfsc	___ftadd@f2+2,7,c
  4761  00205E  8C52               	bsf	___ftadd@sign,6,c
  4762  002060  8E4A               	bsf	___ftadd@f1+1,7,c
  4763  002062  0EFF               	movlw	255
  4764  002064  1649               	andwf	___ftadd@f1,f,c
  4765  002066  0EFF               	movlw	255
  4766  002068  164A               	andwf	___ftadd@f1+1,f,c
  4767  00206A  0E00               	movlw	0
  4768  00206C  164B               	andwf	___ftadd@f1+2,f,c
  4769  00206E  8E4D               	bsf	___ftadd@f2+1,7,c
  4770  002070  0EFF               	movlw	255
  4771  002072  164C               	andwf	___ftadd@f2,f,c
  4772  002074  0EFF               	movlw	255
  4773  002076  164D               	andwf	___ftadd@f2+1,f,c
  4774  002078  0E00               	movlw	0
  4775  00207A  164E               	andwf	___ftadd@f2+2,f,c
  4776  00207C  5053               	movf	___ftadd@exp2,w,c
  4777  00207E  5C54               	subwf	___ftadd@exp1,w,c
  4778  002080  B0D8               	btfsc	status,0,c
  4779  002082  D01E               	goto	l1866
  4780  002084                     l1856:
  4781  002084  90D8               	bcf	status,0,c
  4782  002086  364C               	rlcf	___ftadd@f2,f,c
  4783  002088  364D               	rlcf	___ftadd@f2+1,f,c
  4784  00208A  364E               	rlcf	___ftadd@f2+2,f,c
  4785  00208C  0653               	decf	___ftadd@exp2,f,c
  4786  00208E  5054               	movf	___ftadd@exp1,w,c
  4787  002090  1853               	xorwf	___ftadd@exp2,w,c
  4788  002092  B4D8               	btfsc	status,2,c
  4789  002094  D00F               	goto	l1864
  4790  002096  0652               	decf	___ftadd@sign,f,c
  4791  002098  C052  F04F         	movff	___ftadd@sign,??___ftadd
  4792  00209C  0E07               	movlw	7
  4793  00209E  164F               	andwf	??___ftadd,f,c
  4794  0020A0  B4D8               	btfsc	status,2,c
  4795  0020A2  D008               	goto	l1864
  4796  0020A4  D7EF               	goto	l1856
  4797  0020A6  D006               	goto	l1864
  4798  0020A8                     l1862:
  4799  0020A8  90D8               	bcf	status,0,c
  4800  0020AA  324B               	rrcf	___ftadd@f1+2,f,c
  4801  0020AC  324A               	rrcf	___ftadd@f1+1,f,c
  4802  0020AE  3249               	rrcf	___ftadd@f1,f,c
  4803  0020B0  2A54               	incf	___ftadd@exp1,f,c
  4804  0020B2  D000               	goto	l1864
  4805  0020B4                     l1864:
  4806  0020B4  5053               	movf	___ftadd@exp2,w,c
  4807  0020B6  1854               	xorwf	___ftadd@exp1,w,c
  4808  0020B8  B4D8               	btfsc	status,2,c
  4809  0020BA  D024               	goto	l611
  4810  0020BC  D7F5               	goto	l1862
  4811  0020BE  D022               	goto	l611
  4812  0020C0                     l1866:
  4813  0020C0  5054               	movf	___ftadd@exp1,w,c
  4814  0020C2  5C53               	subwf	___ftadd@exp2,w,c
  4815  0020C4  B0D8               	btfsc	status,0,c
  4816  0020C6  D01E               	goto	l611
  4817  0020C8                     l1868:
  4818  0020C8  90D8               	bcf	status,0,c
  4819  0020CA  3649               	rlcf	___ftadd@f1,f,c
  4820  0020CC  364A               	rlcf	___ftadd@f1+1,f,c
  4821  0020CE  364B               	rlcf	___ftadd@f1+2,f,c
  4822  0020D0  0654               	decf	___ftadd@exp1,f,c
  4823  0020D2  5054               	movf	___ftadd@exp1,w,c
  4824  0020D4  1853               	xorwf	___ftadd@exp2,w,c
  4825  0020D6  B4D8               	btfsc	status,2,c
  4826  0020D8  D00F               	goto	l1876
  4827  0020DA  0652               	decf	___ftadd@sign,f,c
  4828  0020DC  C052  F04F         	movff	___ftadd@sign,??___ftadd
  4829  0020E0  0E07               	movlw	7
  4830  0020E2  164F               	andwf	??___ftadd,f,c
  4831  0020E4  B4D8               	btfsc	status,2,c
  4832  0020E6  D008               	goto	l1876
  4833  0020E8  D7EF               	goto	l1868
  4834  0020EA  D006               	goto	l1876
  4835  0020EC                     l1874:
  4836  0020EC  90D8               	bcf	status,0,c
  4837  0020EE  324E               	rrcf	___ftadd@f2+2,f,c
  4838  0020F0  324D               	rrcf	___ftadd@f2+1,f,c
  4839  0020F2  324C               	rrcf	___ftadd@f2,f,c
  4840  0020F4  2A53               	incf	___ftadd@exp2,f,c
  4841  0020F6  D000               	goto	l1876
  4842  0020F8                     l1876:
  4843  0020F8  5053               	movf	___ftadd@exp2,w,c
  4844  0020FA  1854               	xorwf	___ftadd@exp1,w,c
  4845  0020FC  B4D8               	btfsc	status,2,c
  4846  0020FE  D002               	goto	l611
  4847  002100  D7F5               	goto	l1874
  4848  002102  D000               	goto	l611
  4849  002104                     l611:
  4850  002104  AE52               	btfss	___ftadd@sign,7,c
  4851  002106  D00C               	goto	l620
  4852  002108  0EFF               	movlw	255
  4853  00210A  1A49               	xorwf	___ftadd@f1,f,c
  4854  00210C  0EFF               	movlw	255
  4855  00210E  1A4A               	xorwf	___ftadd@f1+1,f,c
  4856  002110  0EFF               	movlw	255
  4857  002112  1A4B               	xorwf	___ftadd@f1+2,f,c
  4858  002114  0E01               	movlw	1
  4859  002116  2649               	addwf	___ftadd@f1,f,c
  4860  002118  0E00               	movlw	0
  4861  00211A  224A               	addwfc	___ftadd@f1+1,f,c
  4862  00211C  0E00               	movlw	0
  4863  00211E  224B               	addwfc	___ftadd@f1+2,f,c
  4864  002120                     l620:
  4865  002120  AC52               	btfss	___ftadd@sign,6,c
  4866  002122  D00D               	goto	l1882
  4867  002124  0EFF               	movlw	255
  4868  002126  1A4C               	xorwf	___ftadd@f2,f,c
  4869  002128  0EFF               	movlw	255
  4870  00212A  1A4D               	xorwf	___ftadd@f2+1,f,c
  4871  00212C  0EFF               	movlw	255
  4872  00212E  1A4E               	xorwf	___ftadd@f2+2,f,c
  4873  002130  0E01               	movlw	1
  4874  002132  264C               	addwf	___ftadd@f2,f,c
  4875  002134  0E00               	movlw	0
  4876  002136  224D               	addwfc	___ftadd@f2+1,f,c
  4877  002138  0E00               	movlw	0
  4878  00213A  224E               	addwfc	___ftadd@f2+2,f,c
  4879  00213C  D000               	goto	l1882
  4880  00213E                     l1882:
  4881  00213E  0E00               	movlw	0
  4882  002140  6E52               	movwf	___ftadd@sign,c
  4883  002142  5049               	movf	___ftadd@f1,w,c
  4884  002144  264C               	addwf	___ftadd@f2,f,c
  4885  002146  504A               	movf	___ftadd@f1+1,w,c
  4886  002148  224D               	addwfc	___ftadd@f2+1,f,c
  4887  00214A  504B               	movf	___ftadd@f1+2,w,c
  4888  00214C  224E               	addwfc	___ftadd@f2+2,f,c
  4889  00214E  AE4E               	btfss	___ftadd@f2+2,7,c
  4890  002150  D00F               	goto	l1892
  4891  002152  0EFF               	movlw	255
  4892  002154  1A4C               	xorwf	___ftadd@f2,f,c
  4893  002156  0EFF               	movlw	255
  4894  002158  1A4D               	xorwf	___ftadd@f2+1,f,c
  4895  00215A  0EFF               	movlw	255
  4896  00215C  1A4E               	xorwf	___ftadd@f2+2,f,c
  4897  00215E  0E01               	movlw	1
  4898  002160  264C               	addwf	___ftadd@f2,f,c
  4899  002162  0E00               	movlw	0
  4900  002164  224D               	addwfc	___ftadd@f2+1,f,c
  4901  002166  0E00               	movlw	0
  4902  002168  224E               	addwfc	___ftadd@f2+2,f,c
  4903  00216A  0E01               	movlw	1
  4904  00216C  6E52               	movwf	___ftadd@sign,c
  4905  00216E  D000               	goto	l1892
  4906  002170                     l1892:
  4907  002170  C04C  F001         	movff	___ftadd@f2,___ftpack@arg
  4908  002174  C04D  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  4909  002178  C04E  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  4910  00217C  C054  F004         	movff	___ftadd@exp1,___ftpack@exp
  4911  002180  C052  F005         	movff	___ftadd@sign,___ftpack@sign
  4912  002184  EC39  F013         	call	___ftpack	;wreg free
  4913  002188  C001  F049         	movff	?___ftpack,?___ftadd
  4914  00218C  C002  F04A         	movff	?___ftpack+1,?___ftadd+1
  4915  002190  C003  F04B         	movff	?___ftpack+2,?___ftadd+2
  4916  002194  D000               	goto	l597
  4917  002196                     l597:
  4918  002196  0012               	return		;funcret
  4919  002198                     __end_of___ftadd:
  4920                           	opt stack 0
  4921                           tblptru	equ	0xFF8
  4922                           tblptrh	equ	0xFF7
  4923                           tblptrl	equ	0xFF6
  4924                           tablat	equ	0xFF5
  4925                           prodh	equ	0xFF4
  4926                           prodl	equ	0xFF3
  4927                           postinc0	equ	0xFEE
  4928                           wreg	equ	0xFE8
  4929                           postdec1	equ	0xFE5
  4930                           plusw1	equ	0xFE3
  4931                           fsr1l	equ	0xFE1
  4932                           indf2	equ	0xFDF
  4933                           postinc2	equ	0xFDE
  4934                           postdec2	equ	0xFDD
  4935                           plusw2	equ	0xFDB
  4936                           fsr2h	equ	0xFDA
  4937                           fsr2l	equ	0xFD9
  4938                           status	equ	0xFD8
  4939                           
  4940 ;; *************** function ___ftneg *****************
  4941 ;; Defined at:
  4942 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
  4943 ;; Parameters:    Size  Location     Type
  4944 ;;  f1              3    0[COMRAM] float 
  4945 ;; Auto vars:     Size  Location     Type
  4946 ;;		None
  4947 ;; Return value:  Size  Location     Type
  4948 ;;                  3    0[COMRAM] float 
  4949 ;; Registers used:
  4950 ;;		wreg, status,2, status,0
  4951 ;; Tracked objects:
  4952 ;;		On entry : 0/0
  4953 ;;		On exit  : 0/0
  4954 ;;		Unchanged: 0/0
  4955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4956 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4959 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4960 ;;Total ram usage:        3 bytes
  4961 ;; Hardware stack levels used:    1
  4962 ;; This function calls:
  4963 ;;		Nothing
  4964 ;; This function is called by:
  4965 ;;		_main
  4966 ;;		_printf
  4967 ;; This function uses a non-reentrant model
  4968 ;;
  4969                           
  4970                           	psect	text17
  4971  002BAA                     __ptext17:
  4972                           	opt stack 0
  4973  002BAA                     ___ftneg:
  4974                           	opt stack 29
  4975                           
  4976                           ;incstack = 0
  4977  002BAA  5001               	movf	___ftneg@f1,w,c
  4978  002BAC  1002               	iorwf	___ftneg@f1+1,w,c
  4979  002BAE  1003               	iorwf	___ftneg@f1+2,w,c
  4980  002BB0  B4D8               	btfsc	status,2,c
  4981  002BB2  D006               	goto	l670
  4982  002BB4  0E00               	movlw	0
  4983  002BB6  1A01               	xorwf	___ftneg@f1,f,c
  4984  002BB8  0E00               	movlw	0
  4985  002BBA  1A02               	xorwf	___ftneg@f1+1,f,c
  4986  002BBC  0E80               	movlw	128
  4987  002BBE  1A03               	xorwf	___ftneg@f1+2,f,c
  4988  002BC0                     l670:
  4989  002BC0  C001  F001         	movff	___ftneg@f1,?___ftneg
  4990  002BC4  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  4991  002BC8  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  4992  002BCC  0012               	return		;funcret
  4993  002BCE                     __end_of___ftneg:
  4994                           	opt stack 0
  4995                           tblptru	equ	0xFF8
  4996                           tblptrh	equ	0xFF7
  4997                           tblptrl	equ	0xFF6
  4998                           tablat	equ	0xFF5
  4999                           prodh	equ	0xFF4
  5000                           prodl	equ	0xFF3
  5001                           postinc0	equ	0xFEE
  5002                           wreg	equ	0xFE8
  5003                           postdec1	equ	0xFE5
  5004                           plusw1	equ	0xFE3
  5005                           fsr1l	equ	0xFE1
  5006                           indf2	equ	0xFDF
  5007                           postinc2	equ	0xFDE
  5008                           postdec2	equ	0xFDD
  5009                           plusw2	equ	0xFDB
  5010                           fsr2h	equ	0xFDA
  5011                           fsr2l	equ	0xFD9
  5012                           status	equ	0xFD8
  5013                           
  5014 ;; *************** function ___ftge *****************
  5015 ;; Defined at:
  5016 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  5017 ;; Parameters:    Size  Location     Type
  5018 ;;  ff1             3    0[COMRAM] float 
  5019 ;;  ff2             3    3[COMRAM] float 
  5020 ;; Auto vars:     Size  Location     Type
  5021 ;;		None
  5022 ;; Return value:  Size  Location     Type
  5023 ;;		None               void
  5024 ;; Registers used:
  5025 ;;		wreg, status,2, status,0
  5026 ;; Tracked objects:
  5027 ;;		On entry : 0/0
  5028 ;;		On exit  : 0/0
  5029 ;;		Unchanged: 0/0
  5030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5031 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5033 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5034 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5035 ;;Total ram usage:        9 bytes
  5036 ;; Hardware stack levels used:    1
  5037 ;; This function calls:
  5038 ;;		Nothing
  5039 ;; This function is called by:
  5040 ;;		_main
  5041 ;;		_printf
  5042 ;; This function uses a non-reentrant model
  5043 ;;
  5044                           
  5045                           	psect	text18
  5046  0027CE                     __ptext18:
  5047                           	opt stack 0
  5048  0027CE                     ___ftge:
  5049                           	opt stack 29
  5050                           
  5051                           ;incstack = 0
  5052  0027CE  AE03               	btfss	___ftge@ff1+2,7,c
  5053  0027D0  D017               	goto	l2266
  5054  0027D2  C001  F007         	movff	___ftge@ff1,??___ftge
  5055  0027D6  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5056  0027DA  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5057  0027DE  1E07               	comf	??___ftge,f,c
  5058  0027E0  1E08               	comf	??___ftge+1,f,c
  5059  0027E2  1E09               	comf	??___ftge+2,f,c
  5060  0027E4  2A07               	incf	??___ftge,f,c
  5061  0027E6  0E00               	movlw	0
  5062  0027E8  2208               	addwfc	??___ftge+1,f,c
  5063  0027EA  2209               	addwfc	??___ftge+2,f,c
  5064  0027EC  0E00               	movlw	0
  5065  0027EE  2407               	addwf	??___ftge,w,c
  5066  0027F0  6E01               	movwf	___ftge@ff1,c
  5067  0027F2  0E00               	movlw	0
  5068  0027F4  2008               	addwfc	??___ftge+1,w,c
  5069  0027F6  6E02               	movwf	___ftge@ff1+1,c
  5070  0027F8  0E80               	movlw	128
  5071  0027FA  2009               	addwfc	??___ftge+2,w,c
  5072  0027FC  6E03               	movwf	___ftge@ff1+2,c
  5073  0027FE  D000               	goto	l2266
  5074  002800                     l2266:
  5075  002800  AE06               	btfss	___ftge@ff2+2,7,c
  5076  002802  D017               	goto	l2270
  5077  002804  C004  F007         	movff	___ftge@ff2,??___ftge
  5078  002808  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5079  00280C  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5080  002810  1E07               	comf	??___ftge,f,c
  5081  002812  1E08               	comf	??___ftge+1,f,c
  5082  002814  1E09               	comf	??___ftge+2,f,c
  5083  002816  2A07               	incf	??___ftge,f,c
  5084  002818  0E00               	movlw	0
  5085  00281A  2208               	addwfc	??___ftge+1,f,c
  5086  00281C  2209               	addwfc	??___ftge+2,f,c
  5087  00281E  0E00               	movlw	0
  5088  002820  2407               	addwf	??___ftge,w,c
  5089  002822  6E04               	movwf	___ftge@ff2,c
  5090  002824  0E00               	movlw	0
  5091  002826  2008               	addwfc	??___ftge+1,w,c
  5092  002828  6E05               	movwf	___ftge@ff2+1,c
  5093  00282A  0E80               	movlw	128
  5094  00282C  2009               	addwfc	??___ftge+2,w,c
  5095  00282E  6E06               	movwf	___ftge@ff2+2,c
  5096  002830  D000               	goto	l2270
  5097  002832                     l2270:
  5098  002832  0E00               	movlw	0
  5099  002834  1A01               	xorwf	___ftge@ff1,f,c
  5100  002836  0E00               	movlw	0
  5101  002838  1A02               	xorwf	___ftge@ff1+1,f,c
  5102  00283A  0E80               	movlw	128
  5103  00283C  1A03               	xorwf	___ftge@ff1+2,f,c
  5104  00283E  0E00               	movlw	0
  5105  002840  1A04               	xorwf	___ftge@ff2,f,c
  5106  002842  0E00               	movlw	0
  5107  002844  1A05               	xorwf	___ftge@ff2+1,f,c
  5108  002846  0E80               	movlw	128
  5109  002848  1A06               	xorwf	___ftge@ff2+2,f,c
  5110  00284A  5004               	movf	___ftge@ff2,w,c
  5111  00284C  5C01               	subwf	___ftge@ff1,w,c
  5112  00284E  5005               	movf	___ftge@ff2+1,w,c
  5113  002850  5802               	subwfb	___ftge@ff1+1,w,c
  5114  002852  5006               	movf	___ftge@ff2+2,w,c
  5115  002854  5803               	subwfb	___ftge@ff1+2,w,c
  5116  002856  B0D8               	btfsc	status,0,c
  5117  002858  D002               	goto	l2276
  5118  00285A  90D8               	bcf	status,0,c
  5119  00285C  D002               	goto	l654
  5120  00285E                     l2276:
  5121  00285E  80D8               	bsf	status,0,c
  5122  002860  D000               	goto	l654
  5123  002862                     l654:
  5124  002862  0012               	return		;funcret
  5125  002864                     __end_of___ftge:
  5126                           	opt stack 0
  5127                           tblptru	equ	0xFF8
  5128                           tblptrh	equ	0xFF7
  5129                           tblptrl	equ	0xFF6
  5130                           tablat	equ	0xFF5
  5131                           prodh	equ	0xFF4
  5132                           prodl	equ	0xFF3
  5133                           postinc0	equ	0xFEE
  5134                           wreg	equ	0xFE8
  5135                           postdec1	equ	0xFE5
  5136                           plusw1	equ	0xFE3
  5137                           fsr1l	equ	0xFE1
  5138                           indf2	equ	0xFDF
  5139                           postinc2	equ	0xFDE
  5140                           postdec2	equ	0xFDD
  5141                           plusw2	equ	0xFDB
  5142                           fsr2h	equ	0xFDA
  5143                           fsr2l	equ	0xFD9
  5144                           status	equ	0xFD8
  5145                           
  5146 ;; *************** function _get_full_ADC *****************
  5147 ;; Defined at:
  5148 ;;		line 115 in file "Lab6pB2.c"
  5149 ;; Parameters:    Size  Location     Type
  5150 ;;		None
  5151 ;; Auto vars:     Size  Location     Type
  5152 ;;  result          2    4[COMRAM] int 
  5153 ;; Return value:  Size  Location     Type
  5154 ;;                  2    0[COMRAM] unsigned int 
  5155 ;; Registers used:
  5156 ;;		wreg, status,2, status,0
  5157 ;; Tracked objects:
  5158 ;;		On entry : 0/0
  5159 ;;		On exit  : 0/0
  5160 ;;		Unchanged: 0/0
  5161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5162 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5163 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5164 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5165 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5166 ;;Total ram usage:        6 bytes
  5167 ;; Hardware stack levels used:    1
  5168 ;; This function calls:
  5169 ;;		Nothing
  5170 ;; This function is called by:
  5171 ;;		_main
  5172 ;; This function uses a non-reentrant model
  5173 ;;
  5174                           
  5175                           	psect	text19
  5176  002B84                     __ptext19:
  5177                           	opt stack 0
  5178  002B84                     _get_full_ADC:
  5179                           	opt stack 30
  5180                           
  5181                           ;Lab6pB2.c: 117: int result;
  5182                           ;Lab6pB2.c: 118: ADCON0bits.GO=1;
  5183                           
  5184                           ;incstack = 0
  5185  002B84  82C2               	bsf	4034,1,c	;volatile
  5186                           
  5187                           ;Lab6pB2.c: 119: while(ADCON0bits.DONE==1);
  5188  002B86  D000               	goto	l100
  5189  002B88                     l100:
  5190  002B88  B2C2               	btfsc	4034,1,c	;volatile
  5191  002B8A  D7FE               	goto	l100
  5192                           
  5193                           ;Lab6pB2.c: 120: result = (ADRESH * 0x100) + ADRESL;
  5194  002B8C  50C4               	movf	4036,w,c	;volatile
  5195  002B8E  6E04               	movwf	(??_get_full_ADC+1)& (0+255),c
  5196  002B90  6A03               	clrf	??_get_full_ADC& (0+255),c
  5197  002B92  50C3               	movf	4035,w,c	;volatile
  5198  002B94  2403               	addwf	??_get_full_ADC,w,c
  5199  002B96  6E05               	movwf	get_full_ADC@result,c
  5200  002B98  0E00               	movlw	0
  5201  002B9A  2004               	addwfc	??_get_full_ADC+1,w,c
  5202  002B9C  6E06               	movwf	get_full_ADC@result+1,c
  5203                           
  5204                           ;Lab6pB2.c: 122: return result;
  5205  002B9E  C005  F001         	movff	get_full_ADC@result,?_get_full_ADC
  5206  002BA2  C006  F002         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  5207  002BA6  D000               	goto	l103
  5208  002BA8                     l103:
  5209  002BA8  0012               	return		;funcret
  5210  002BAA                     __end_of_get_full_ADC:
  5211                           	opt stack 0
  5212                           tblptru	equ	0xFF8
  5213                           tblptrh	equ	0xFF7
  5214                           tblptrl	equ	0xFF6
  5215                           tablat	equ	0xFF5
  5216                           prodh	equ	0xFF4
  5217                           prodl	equ	0xFF3
  5218                           postinc0	equ	0xFEE
  5219                           wreg	equ	0xFE8
  5220                           postdec1	equ	0xFE5
  5221                           plusw1	equ	0xFE3
  5222                           fsr1l	equ	0xFE1
  5223                           indf2	equ	0xFDF
  5224                           postinc2	equ	0xFDE
  5225                           postdec2	equ	0xFDD
  5226                           plusw2	equ	0xFDB
  5227                           fsr2h	equ	0xFDA
  5228                           fsr2l	equ	0xFD9
  5229                           status	equ	0xFD8
  5230                           
  5231 ;; *************** function ___ftdiv *****************
  5232 ;; Defined at:
  5233 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  5234 ;; Parameters:    Size  Location     Type
  5235 ;;  f1              3   84[COMRAM] float 
  5236 ;;  f2              3   87[COMRAM] float 
  5237 ;; Auto vars:     Size  Location     Type
  5238 ;;  f3              3   94[COMRAM] float 
  5239 ;;  sign            1   98[COMRAM] unsigned char 
  5240 ;;  exp             1   97[COMRAM] unsigned char 
  5241 ;;  cntr            1   93[COMRAM] unsigned char 
  5242 ;; Return value:  Size  Location     Type
  5243 ;;                  3   84[COMRAM] float 
  5244 ;; Registers used:
  5245 ;;		wreg, status,2, status,0, cstack
  5246 ;; Tracked objects:
  5247 ;;		On entry : 0/0
  5248 ;;		On exit  : 0/0
  5249 ;;		Unchanged: 0/0
  5250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5251 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5252 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5253 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5254 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5255 ;;Total ram usage:       15 bytes
  5256 ;; Hardware stack levels used:    1
  5257 ;; Hardware stack levels required when called:    1
  5258 ;; This function calls:
  5259 ;;		___ftpack
  5260 ;; This function is called by:
  5261 ;;		_main
  5262 ;; This function uses a non-reentrant model
  5263 ;;
  5264                           
  5265                           	psect	text20
  5266  002590                     __ptext20:
  5267                           	opt stack 0
  5268  002590                     ___ftdiv:
  5269                           	opt stack 29
  5270                           
  5271                           ;incstack = 0
  5272  002590  C057  F05B         	movff	___ftdiv@f1+2,??___ftdiv
  5273  002594  6A5C               	clrf	(??___ftdiv+1)& (0+255),c
  5274  002596  6A5D               	clrf	(??___ftdiv+2)& (0+255),c
  5275  002598  3456               	rlcf	___ftdiv@f1+1,w,c
  5276  00259A  365B               	rlcf	??___ftdiv& (0+255),f,c
  5277  00259C  E301               	bnc	u2731
  5278  00259E  805C               	bsf	(??___ftdiv+1)& (0+255),0,c
  5279  0025A0                     u2731:
  5280  0025A0  505B               	movf	??___ftdiv,w,c
  5281  0025A2  6E62               	movwf	___ftdiv@exp,c
  5282  0025A4  5062               	movf	___ftdiv@exp,w,c
  5283  0025A6  A4D8               	btfss	status,2,c
  5284  0025A8  D002               	goto	l2568
  5285  0025AA  D00E               	goto	l2570
  5286  0025AC  D061               	goto	l628
  5287  0025AE                     l2568:
  5288  0025AE  C05A  F05B         	movff	___ftdiv@f2+2,??___ftdiv
  5289  0025B2  6A5C               	clrf	(??___ftdiv+1)& (0+255),c
  5290  0025B4  6A5D               	clrf	(??___ftdiv+2)& (0+255),c
  5291  0025B6  3459               	rlcf	___ftdiv@f2+1,w,c
  5292  0025B8  365B               	rlcf	??___ftdiv& (0+255),f,c
  5293  0025BA  E301               	bnc	u2751
  5294  0025BC  805C               	bsf	(??___ftdiv+1)& (0+255),0,c
  5295  0025BE                     u2751:
  5296  0025BE  505B               	movf	??___ftdiv,w,c
  5297  0025C0  6E63               	movwf	___ftdiv@sign,c
  5298  0025C2  5063               	movf	___ftdiv@sign,w,c
  5299  0025C4  A4D8               	btfss	status,2,c
  5300  0025C6  D007               	goto	l2574
  5301  0025C8                     l2570:
  5302  0025C8  0E00               	movlw	0
  5303  0025CA  6E55               	movwf	?___ftdiv,c
  5304  0025CC  0E00               	movlw	0
  5305  0025CE  6E56               	movwf	?___ftdiv+1,c
  5306  0025D0  0E00               	movlw	0
  5307  0025D2  6E57               	movwf	?___ftdiv+2,c
  5308  0025D4  D04D               	goto	l628
  5309  0025D6                     l2574:
  5310  0025D6  0E00               	movlw	0
  5311  0025D8  6E5F               	movwf	___ftdiv@f3,c
  5312  0025DA  0E00               	movlw	0
  5313  0025DC  6E60               	movwf	___ftdiv@f3+1,c
  5314  0025DE  0E00               	movlw	0
  5315  0025E0  6E61               	movwf	___ftdiv@f3+2,c
  5316  0025E2  5063               	movf	___ftdiv@sign,w,c
  5317  0025E4  0F89               	addlw	137
  5318  0025E6  5E62               	subwf	___ftdiv@exp,f,c
  5319  0025E8  C057  F063         	movff	___ftdiv@f1+2,___ftdiv@sign
  5320  0025EC  505A               	movf	___ftdiv@f2+2,w,c
  5321  0025EE  1A63               	xorwf	___ftdiv@sign,f,c
  5322  0025F0  0E80               	movlw	128
  5323  0025F2  1663               	andwf	___ftdiv@sign,f,c
  5324  0025F4  8E56               	bsf	___ftdiv@f1+1,7,c
  5325  0025F6  0EFF               	movlw	255
  5326  0025F8  1655               	andwf	___ftdiv@f1,f,c
  5327  0025FA  0EFF               	movlw	255
  5328  0025FC  1656               	andwf	___ftdiv@f1+1,f,c
  5329  0025FE  0E00               	movlw	0
  5330  002600  1657               	andwf	___ftdiv@f1+2,f,c
  5331  002602  8E59               	bsf	___ftdiv@f2+1,7,c
  5332  002604  0EFF               	movlw	255
  5333  002606  1658               	andwf	___ftdiv@f2,f,c
  5334  002608  0EFF               	movlw	255
  5335  00260A  1659               	andwf	___ftdiv@f2+1,f,c
  5336  00260C  0E00               	movlw	0
  5337  00260E  165A               	andwf	___ftdiv@f2+2,f,c
  5338  002610  0E18               	movlw	24
  5339  002612  6E5E               	movwf	___ftdiv@cntr,c
  5340  002614  D000               	goto	l2594
  5341  002616                     l2594:
  5342  002616  90D8               	bcf	status,0,c
  5343  002618  365F               	rlcf	___ftdiv@f3,f,c
  5344  00261A  3660               	rlcf	___ftdiv@f3+1,f,c
  5345  00261C  3661               	rlcf	___ftdiv@f3+2,f,c
  5346  00261E  5058               	movf	___ftdiv@f2,w,c
  5347  002620  5C55               	subwf	___ftdiv@f1,w,c
  5348  002622  5059               	movf	___ftdiv@f2+1,w,c
  5349  002624  5856               	subwfb	___ftdiv@f1+1,w,c
  5350  002626  505A               	movf	___ftdiv@f2+2,w,c
  5351  002628  5857               	subwfb	___ftdiv@f1+2,w,c
  5352  00262A  A0D8               	btfss	status,0,c
  5353  00262C  D007               	goto	l631
  5354  00262E  5058               	movf	___ftdiv@f2,w,c
  5355  002630  5E55               	subwf	___ftdiv@f1,f,c
  5356  002632  5059               	movf	___ftdiv@f2+1,w,c
  5357  002634  5A56               	subwfb	___ftdiv@f1+1,f,c
  5358  002636  505A               	movf	___ftdiv@f2+2,w,c
  5359  002638  5A57               	subwfb	___ftdiv@f1+2,f,c
  5360  00263A  805F               	bsf	___ftdiv@f3,0,c
  5361  00263C                     l631:
  5362  00263C  90D8               	bcf	status,0,c
  5363  00263E  3655               	rlcf	___ftdiv@f1,f,c
  5364  002640  3656               	rlcf	___ftdiv@f1+1,f,c
  5365  002642  3657               	rlcf	___ftdiv@f1+2,f,c
  5366  002644  2E5E               	decfsz	___ftdiv@cntr,f,c
  5367  002646  D7E7               	goto	l2594
  5368  002648  D000               	goto	l2604
  5369  00264A                     l2604:
  5370  00264A  C05F  F001         	movff	___ftdiv@f3,___ftpack@arg
  5371  00264E  C060  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5372  002652  C061  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5373  002656  C062  F004         	movff	___ftdiv@exp,___ftpack@exp
  5374  00265A  C063  F005         	movff	___ftdiv@sign,___ftpack@sign
  5375  00265E  EC39  F013         	call	___ftpack	;wreg free
  5376  002662  C001  F055         	movff	?___ftpack,?___ftdiv
  5377  002666  C002  F056         	movff	?___ftpack+1,?___ftdiv+1
  5378  00266A  C003  F057         	movff	?___ftpack+2,?___ftdiv+2
  5379  00266E  D000               	goto	l628
  5380  002670                     l628:
  5381  002670  0012               	return		;funcret
  5382  002672                     __end_of___ftdiv:
  5383                           	opt stack 0
  5384                           tblptru	equ	0xFF8
  5385                           tblptrh	equ	0xFF7
  5386                           tblptrl	equ	0xFF6
  5387                           tablat	equ	0xFF5
  5388                           prodh	equ	0xFF4
  5389                           prodl	equ	0xFF3
  5390                           postinc0	equ	0xFEE
  5391                           wreg	equ	0xFE8
  5392                           postdec1	equ	0xFE5
  5393                           plusw1	equ	0xFE3
  5394                           fsr1l	equ	0xFE1
  5395                           indf2	equ	0xFDF
  5396                           postinc2	equ	0xFDE
  5397                           postdec2	equ	0xFDD
  5398                           plusw2	equ	0xFDB
  5399                           fsr2h	equ	0xFDA
  5400                           fsr2l	equ	0xFD9
  5401                           status	equ	0xFD8
  5402                           
  5403 ;; *************** function ___awtoft *****************
  5404 ;; Defined at:
  5405 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  5406 ;; Parameters:    Size  Location     Type
  5407 ;;  c               2    8[COMRAM] int 
  5408 ;; Auto vars:     Size  Location     Type
  5409 ;;  sign            1   11[COMRAM] unsigned char 
  5410 ;; Return value:  Size  Location     Type
  5411 ;;                  3    8[COMRAM] float 
  5412 ;; Registers used:
  5413 ;;		wreg, status,2, status,0, cstack
  5414 ;; Tracked objects:
  5415 ;;		On entry : 0/0
  5416 ;;		On exit  : 0/0
  5417 ;;		Unchanged: 0/0
  5418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5419 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5420 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5422 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5423 ;;Total ram usage:        4 bytes
  5424 ;; Hardware stack levels used:    1
  5425 ;; Hardware stack levels required when called:    1
  5426 ;; This function calls:
  5427 ;;		___ftpack
  5428 ;; This function is called by:
  5429 ;;		_main
  5430 ;; This function uses a non-reentrant model
  5431 ;;
  5432                           
  5433                           	psect	text21
  5434  002AF6                     __ptext21:
  5435                           	opt stack 0
  5436  002AF6                     ___awtoft:
  5437                           	opt stack 29
  5438                           
  5439                           ;incstack = 0
  5440  002AF6  0E00               	movlw	0
  5441  002AF8  6E0C               	movwf	___awtoft@sign,c
  5442  002AFA  AE0A               	btfss	___awtoft@c+1,7,c
  5443  002AFC  D007               	goto	l2616
  5444  002AFE  6C09               	negf	___awtoft@c,c
  5445  002B00  1E0A               	comf	___awtoft@c+1,f,c
  5446  002B02  B0D8               	btfsc	status,0,c
  5447  002B04  2A0A               	incf	___awtoft@c+1,f,c
  5448  002B06  0E01               	movlw	1
  5449  002B08  6E0C               	movwf	___awtoft@sign,c
  5450  002B0A  D000               	goto	l2616
  5451  002B0C                     l2616:
  5452  002B0C  C009  F001         	movff	___awtoft@c,___ftpack@arg
  5453  002B10  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  5454  002B14  6A03               	clrf	___ftpack@arg+2,c
  5455  002B16  0E8E               	movlw	142
  5456  002B18  6E04               	movwf	___ftpack@exp,c
  5457  002B1A  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  5458  002B1E  EC39  F013         	call	___ftpack	;wreg free
  5459  002B22  C001  F009         	movff	?___ftpack,?___awtoft
  5460  002B26  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  5461  002B2A  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  5462  002B2E  D000               	goto	l449
  5463  002B30                     l449:
  5464  002B30  0012               	return		;funcret
  5465  002B32                     __end_of___awtoft:
  5466                           	opt stack 0
  5467                           tblptru	equ	0xFF8
  5468                           tblptrh	equ	0xFF7
  5469                           tblptrl	equ	0xFF6
  5470                           tablat	equ	0xFF5
  5471                           prodh	equ	0xFF4
  5472                           prodl	equ	0xFF3
  5473                           postinc0	equ	0xFEE
  5474                           wreg	equ	0xFE8
  5475                           postdec1	equ	0xFE5
  5476                           plusw1	equ	0xFE3
  5477                           fsr1l	equ	0xFE1
  5478                           indf2	equ	0xFDF
  5479                           postinc2	equ	0xFDE
  5480                           postdec2	equ	0xFDD
  5481                           plusw2	equ	0xFDB
  5482                           fsr2h	equ	0xFDA
  5483                           fsr2l	equ	0xFD9
  5484                           status	equ	0xFD8
  5485                           
  5486 ;; *************** function ___ftpack *****************
  5487 ;; Defined at:
  5488 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  5489 ;; Parameters:    Size  Location     Type
  5490 ;;  arg             3    0[COMRAM] unsigned um
  5491 ;;  exp             1    3[COMRAM] unsigned char 
  5492 ;;  sign            1    4[COMRAM] unsigned char 
  5493 ;; Auto vars:     Size  Location     Type
  5494 ;;		None
  5495 ;; Return value:  Size  Location     Type
  5496 ;;                  3    0[COMRAM] float 
  5497 ;; Registers used:
  5498 ;;		wreg, status,2, status,0
  5499 ;; Tracked objects:
  5500 ;;		On entry : 0/0
  5501 ;;		On exit  : 0/0
  5502 ;;		Unchanged: 0/0
  5503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5504 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5506 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5507 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5508 ;;Total ram usage:        8 bytes
  5509 ;; Hardware stack levels used:    1
  5510 ;; This function calls:
  5511 ;;		Nothing
  5512 ;; This function is called by:
  5513 ;;		___awtoft
  5514 ;;		___ftadd
  5515 ;;		___ftdiv
  5516 ;;		___ftmul
  5517 ;;		___lltoft
  5518 ;; This function uses a non-reentrant model
  5519 ;;
  5520                           
  5521                           	psect	text22
  5522  002672                     __ptext22:
  5523                           	opt stack 0
  5524  002672                     ___ftpack:
  5525                           	opt stack 27
  5526                           
  5527                           ;incstack = 0
  5528  002672  5004               	movf	___ftpack@exp,w,c
  5529  002674  B4D8               	btfsc	status,2,c
  5530  002676  D005               	goto	l1788
  5531  002678  5001               	movf	___ftpack@arg,w,c
  5532  00267A  1002               	iorwf	___ftpack@arg+1,w,c
  5533  00267C  1003               	iorwf	___ftpack@arg+2,w,c
  5534  00267E  A4D8               	btfss	status,2,c
  5535  002680  D00E               	goto	l1794
  5536  002682                     l1788:
  5537  002682  0E00               	movlw	0
  5538  002684  6E01               	movwf	?___ftpack,c
  5539  002686  0E00               	movlw	0
  5540  002688  6E02               	movwf	?___ftpack+1,c
  5541  00268A  0E00               	movlw	0
  5542  00268C  6E03               	movwf	?___ftpack+2,c
  5543  00268E  D053               	goto	l556
  5544  002690  D006               	goto	l1794
  5545  002692                     l1792:
  5546  002692  2A04               	incf	___ftpack@exp,f,c
  5547  002694  90D8               	bcf	status,0,c
  5548  002696  3203               	rrcf	___ftpack@arg+2,f,c
  5549  002698  3202               	rrcf	___ftpack@arg+1,f,c
  5550  00269A  3201               	rrcf	___ftpack@arg,f,c
  5551  00269C  D000               	goto	l1794
  5552  00269E                     l1794:
  5553  00269E  0E00               	movlw	0
  5554  0026A0  1401               	andwf	___ftpack@arg,w,c
  5555  0026A2  6E06               	movwf	??___ftpack& (0+255),c
  5556  0026A4  0E00               	movlw	0
  5557  0026A6  1402               	andwf	___ftpack@arg+1,w,c
  5558  0026A8  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5559  0026AA  0EFE               	movlw	254
  5560  0026AC  1403               	andwf	___ftpack@arg+2,w,c
  5561  0026AE  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5562  0026B0  5006               	movf	??___ftpack,w,c
  5563  0026B2  1007               	iorwf	??___ftpack+1,w,c
  5564  0026B4  1008               	iorwf	??___ftpack+2,w,c
  5565  0026B6  B4D8               	btfsc	status,2,c
  5566  0026B8  D00E               	goto	l1800
  5567  0026BA  D7EB               	goto	l1792
  5568  0026BC  D00C               	goto	l1800
  5569  0026BE                     l1796:
  5570  0026BE  2A04               	incf	___ftpack@exp,f,c
  5571  0026C0  0E01               	movlw	1
  5572  0026C2  2601               	addwf	___ftpack@arg,f,c
  5573  0026C4  0E00               	movlw	0
  5574  0026C6  2202               	addwfc	___ftpack@arg+1,f,c
  5575  0026C8  0E00               	movlw	0
  5576  0026CA  2203               	addwfc	___ftpack@arg+2,f,c
  5577  0026CC  90D8               	bcf	status,0,c
  5578  0026CE  3203               	rrcf	___ftpack@arg+2,f,c
  5579  0026D0  3202               	rrcf	___ftpack@arg+1,f,c
  5580  0026D2  3201               	rrcf	___ftpack@arg,f,c
  5581  0026D4  D000               	goto	l1800
  5582  0026D6                     l1800:
  5583  0026D6  0E00               	movlw	0
  5584  0026D8  1401               	andwf	___ftpack@arg,w,c
  5585  0026DA  6E06               	movwf	??___ftpack& (0+255),c
  5586  0026DC  0E00               	movlw	0
  5587  0026DE  1402               	andwf	___ftpack@arg+1,w,c
  5588  0026E0  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5589  0026E2  0EFF               	movlw	255
  5590  0026E4  1403               	andwf	___ftpack@arg+2,w,c
  5591  0026E6  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5592  0026E8  5006               	movf	??___ftpack,w,c
  5593  0026EA  1007               	iorwf	??___ftpack+1,w,c
  5594  0026EC  1008               	iorwf	??___ftpack+2,w,c
  5595  0026EE  B4D8               	btfsc	status,2,c
  5596  0026F0  D008               	goto	l1804
  5597  0026F2  D7E5               	goto	l1796
  5598  0026F4  D006               	goto	l1804
  5599  0026F6                     l1802:
  5600  0026F6  0604               	decf	___ftpack@exp,f,c
  5601  0026F8  90D8               	bcf	status,0,c
  5602  0026FA  3601               	rlcf	___ftpack@arg,f,c
  5603  0026FC  3602               	rlcf	___ftpack@arg+1,f,c
  5604  0026FE  3603               	rlcf	___ftpack@arg+2,f,c
  5605  002700  D000               	goto	l1804
  5606  002702                     l1804:
  5607  002702  BE02               	btfsc	___ftpack@arg+1,7,c
  5608  002704  D004               	goto	l567
  5609  002706  0E02               	movlw	2
  5610  002708  6004               	cpfslt	___ftpack@exp,c
  5611  00270A  D7F5               	goto	l1802
  5612  00270C  D000               	goto	l567
  5613  00270E                     l567:
  5614  00270E  B004               	btfsc	___ftpack@exp,0,c
  5615  002710  D002               	goto	l1810
  5616  002712  9E02               	bcf	___ftpack@arg+1,7,c
  5617  002714  D000               	goto	l1810
  5618  002716                     l1810:
  5619  002716  90D8               	bcf	status,0,c
  5620  002718  3204               	rrcf	___ftpack@exp,f,c
  5621  00271A  5004               	movf	___ftpack@exp,w,c
  5622  00271C  1203               	iorwf	___ftpack@arg+2,f,c
  5623  00271E  5005               	movf	___ftpack@sign,w,c
  5624  002720  B4D8               	btfsc	status,2,c
  5625  002722  D002               	goto	l1816
  5626  002724  8E03               	bsf	___ftpack@arg+2,7,c
  5627  002726  D000               	goto	l1816
  5628  002728                     l1816:
  5629  002728  C001  F001         	movff	___ftpack@arg,?___ftpack
  5630  00272C  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5631  002730  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5632  002734  D000               	goto	l556
  5633  002736                     l556:
  5634  002736  0012               	return		;funcret
  5635  002738                     __end_of___ftpack:
  5636                           	opt stack 0
  5637                           tblptru	equ	0xFF8
  5638                           tblptrh	equ	0xFF7
  5639                           tblptrl	equ	0xFF6
  5640                           tablat	equ	0xFF5
  5641                           prodh	equ	0xFF4
  5642                           prodl	equ	0xFF3
  5643                           postinc0	equ	0xFEE
  5644                           wreg	equ	0xFE8
  5645                           postdec1	equ	0xFE5
  5646                           plusw1	equ	0xFE3
  5647                           fsr1l	equ	0xFE1
  5648                           indf2	equ	0xFDF
  5649                           postinc2	equ	0xFDE
  5650                           postdec2	equ	0xFDD
  5651                           plusw2	equ	0xFDB
  5652                           fsr2h	equ	0xFDA
  5653                           fsr2l	equ	0xFD9
  5654                           status	equ	0xFD8
  5655                           
  5656 ;; *************** function _Select_ADC_Channel *****************
  5657 ;; Defined at:
  5658 ;;		line 109 in file "Lab6pB2.c"
  5659 ;; Parameters:    Size  Location     Type
  5660 ;;  channel         1    wreg     unsigned char 
  5661 ;; Auto vars:     Size  Location     Type
  5662 ;;  channel         1    0[COMRAM] unsigned char 
  5663 ;; Return value:  Size  Location     Type
  5664 ;;		None               void
  5665 ;; Registers used:
  5666 ;;		wreg, status,2, status,0, prodl, prodh
  5667 ;; Tracked objects:
  5668 ;;		On entry : 0/0
  5669 ;;		On exit  : 0/0
  5670 ;;		Unchanged: 0/0
  5671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5673 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5675 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5676 ;;Total ram usage:        1 bytes
  5677 ;; Hardware stack levels used:    1
  5678 ;; This function calls:
  5679 ;;		Nothing
  5680 ;; This function is called by:
  5681 ;;		_main
  5682 ;; This function uses a non-reentrant model
  5683 ;;
  5684                           
  5685                           	psect	text23
  5686  002C34                     __ptext23:
  5687                           	opt stack 0
  5688  002C34                     _Select_ADC_Channel:
  5689                           	opt stack 30
  5690                           
  5691                           ;incstack = 0
  5692                           ;Select_ADC_Channel@channel stored from wreg
  5693  002C34  6E01               	movwf	Select_ADC_Channel@channel,c
  5694                           
  5695                           ;Lab6pB2.c: 111: ADCON0 = channel *4 + 1;
  5696  002C36  5001               	movf	Select_ADC_Channel@channel,w,c
  5697  002C38  0D04               	mullw	4
  5698  002C3A  28F3               	incf	prodl,w,c
  5699  002C3C  6EC2               	movwf	4034,c	;volatile
  5700  002C3E  0012               	return		;funcret
  5701  002C40                     __end_of_Select_ADC_Channel:
  5702                           	opt stack 0
  5703                           tblptru	equ	0xFF8
  5704                           tblptrh	equ	0xFF7
  5705                           tblptrl	equ	0xFF6
  5706                           tablat	equ	0xFF5
  5707                           prodh	equ	0xFF4
  5708                           prodl	equ	0xFF3
  5709                           postinc0	equ	0xFEE
  5710                           wreg	equ	0xFE8
  5711                           postdec1	equ	0xFE5
  5712                           plusw1	equ	0xFE3
  5713                           fsr1l	equ	0xFE1
  5714                           indf2	equ	0xFDF
  5715                           postinc2	equ	0xFDE
  5716                           postdec2	equ	0xFDD
  5717                           plusw2	equ	0xFDB
  5718                           fsr2h	equ	0xFDA
  5719                           fsr2l	equ	0xFD9
  5720                           status	equ	0xFD8
  5721                           
  5722 ;; *************** function _Init_UART *****************
  5723 ;; Defined at:
  5724 ;;		line 24 in file "Lab6pB2.c"
  5725 ;; Parameters:    Size  Location     Type
  5726 ;;		None
  5727 ;; Auto vars:     Size  Location     Type
  5728 ;;		None
  5729 ;; Return value:  Size  Location     Type
  5730 ;;		None               void
  5731 ;; Registers used:
  5732 ;;		wreg, status,2, cstack
  5733 ;; Tracked objects:
  5734 ;;		On entry : 0/0
  5735 ;;		On exit  : 0/0
  5736 ;;		Unchanged: 0/0
  5737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5741 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5742 ;;Total ram usage:        0 bytes
  5743 ;; Hardware stack levels used:    1
  5744 ;; Hardware stack levels required when called:    1
  5745 ;; This function calls:
  5746 ;;		_OpenUSART
  5747 ;; This function is called by:
  5748 ;;		_main
  5749 ;; This function uses a non-reentrant model
  5750 ;;
  5751                           
  5752                           	psect	text24
  5753  002BF2                     __ptext24:
  5754                           	opt stack 0
  5755  002BF2                     _Init_UART:
  5756                           	opt stack 29
  5757                           
  5758                           ;Lab6pB2.c: 26: OpenUSART (0b01111111 & 0b10111111 &
  5759                           ;Lab6pB2.c: 27: 0b11111110 & 0b11111101 & 0b11111111 &
  5760                           ;Lab6pB2.c: 28: 0b11111111, 25);
  5761                           
  5762                           ;incstack = 0
  5763  002BF2  0E00               	movlw	0
  5764  002BF4  6E02               	movwf	OpenUSART@spbrg+1,c
  5765  002BF6  0E19               	movlw	25
  5766  002BF8  6E01               	movwf	OpenUSART@spbrg,c
  5767  002BFA  0E3C               	movlw	60
  5768  002BFC  ECF1  F014         	call	_OpenUSART
  5769                           
  5770                           ;Lab6pB2.c: 29: OSCCON = 0x60;
  5771  002C00  0E60               	movlw	96
  5772  002C02  6ED3               	movwf	4051,c	;volatile
  5773  002C04  0012               	return		;funcret
  5774  002C06                     __end_of_Init_UART:
  5775                           	opt stack 0
  5776                           tblptru	equ	0xFF8
  5777                           tblptrh	equ	0xFF7
  5778                           tblptrl	equ	0xFF6
  5779                           tablat	equ	0xFF5
  5780                           prodh	equ	0xFF4
  5781                           prodl	equ	0xFF3
  5782                           postinc0	equ	0xFEE
  5783                           wreg	equ	0xFE8
  5784                           postdec1	equ	0xFE5
  5785                           plusw1	equ	0xFE3
  5786                           fsr1l	equ	0xFE1
  5787                           indf2	equ	0xFDF
  5788                           postinc2	equ	0xFDE
  5789                           postdec2	equ	0xFDD
  5790                           plusw2	equ	0xFDB
  5791                           fsr2h	equ	0xFDA
  5792                           fsr2l	equ	0xFD9
  5793                           status	equ	0xFD8
  5794                           
  5795 ;; *************** function _OpenUSART *****************
  5796 ;; Defined at:
  5797 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  5798 ;; Parameters:    Size  Location     Type
  5799 ;;  config          1    wreg     unsigned char 
  5800 ;;  spbrg           2    0[COMRAM] unsigned int 
  5801 ;; Auto vars:     Size  Location     Type
  5802 ;;  config          1    2[COMRAM] unsigned char 
  5803 ;; Return value:  Size  Location     Type
  5804 ;;		None               void
  5805 ;; Registers used:
  5806 ;;		wreg, status,2
  5807 ;; Tracked objects:
  5808 ;;		On entry : 0/0
  5809 ;;		On exit  : 0/0
  5810 ;;		Unchanged: 0/0
  5811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5812 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5813 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5815 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5816 ;;Total ram usage:        3 bytes
  5817 ;; Hardware stack levels used:    1
  5818 ;; This function calls:
  5819 ;;		Nothing
  5820 ;; This function is called by:
  5821 ;;		_Init_UART
  5822 ;; This function uses a non-reentrant model
  5823 ;;
  5824                           
  5825                           	psect	text25
  5826  0029E2                     __ptext25:
  5827                           	opt stack 0
  5828  0029E2                     _OpenUSART:
  5829                           	opt stack 29
  5830                           
  5831                           ;incstack = 0
  5832                           ;OpenUSART@config stored from wreg
  5833  0029E2  6E03               	movwf	OpenUSART@config,c
  5834  0029E4  0E00               	movlw	0
  5835  0029E6  6EAC               	movwf	4012,c	;volatile
  5836  0029E8  0E00               	movlw	0
  5837  0029EA  6EAB               	movwf	4011,c	;volatile
  5838  0029EC  A003               	btfss	OpenUSART@config,0,c
  5839  0029EE  D002               	goto	l2030
  5840  0029F0  88AC               	bsf	4012,4,c	;volatile
  5841  0029F2  D000               	goto	l2030
  5842  0029F4                     l2030:
  5843  0029F4  A203               	btfss	OpenUSART@config,1,c
  5844  0029F6  D003               	goto	l2034
  5845  0029F8  8CAC               	bsf	4012,6,c	;volatile
  5846  0029FA  8CAB               	bsf	4011,6,c	;volatile
  5847  0029FC  D000               	goto	l2034
  5848  0029FE                     l2034:
  5849  0029FE  A403               	btfss	OpenUSART@config,2,c
  5850  002A00  D002               	goto	l2038
  5851  002A02  8EAC               	bsf	4012,7,c	;volatile
  5852  002A04  D000               	goto	l2038
  5853  002A06                     l2038:
  5854  002A06  A603               	btfss	OpenUSART@config,3,c
  5855  002A08  D002               	goto	l219
  5856  002A0A  88AB               	bsf	4011,4,c	;volatile
  5857  002A0C  D002               	goto	l2042
  5858  002A0E                     l219:
  5859  002A0E  8AAB               	bsf	4011,5,c	;volatile
  5860  002A10  D000               	goto	l2042
  5861  002A12                     l2042:
  5862  002A12  B803               	btfsc	OpenUSART@config,4,c
  5863  002A14  84AC               	bsf	4012,2,c	;volatile
  5864  002A16  989E               	bcf	3998,4,c	;volatile
  5865  002A18  AA03               	btfss	OpenUSART@config,5,c
  5866  002A1A  D002               	goto	l2050
  5867  002A1C  86AB               	bsf	4011,3,c	;volatile
  5868  002A1E  D000               	goto	l2050
  5869  002A20                     l2050:
  5870  002A20  AC03               	btfss	OpenUSART@config,6,c
  5871  002A22  D002               	goto	l223
  5872  002A24  8A9D               	bsf	3997,5,c	;volatile
  5873  002A26  D001               	goto	l224
  5874  002A28                     l223:
  5875  002A28  9A9D               	bcf	3997,5,c	;volatile
  5876  002A2A                     l224:
  5877  002A2A  9A9E               	bcf	3998,5,c	;volatile
  5878  002A2C  AE03               	btfss	OpenUSART@config,7,c
  5879  002A2E  D002               	goto	l225
  5880  002A30  889D               	bsf	3997,4,c	;volatile
  5881  002A32  D001               	goto	l226
  5882  002A34                     l225:
  5883  002A34  989D               	bcf	3997,4,c	;volatile
  5884  002A36                     l226:
  5885  002A36  C001  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  5886  002A3A  5002               	movf	OpenUSART@spbrg+1,w,c
  5887  002A3C  6EB0               	movwf	4016,c	;volatile
  5888  002A3E  8AAC               	bsf	4012,5,c	;volatile
  5889  002A40  8EAB               	bsf	4011,7,c	;volatile
  5890  002A42  9C94               	bcf	3988,6,c	;volatile
  5891  002A44  8E94               	bsf	3988,7,c	;volatile
  5892  002A46  B8AC               	btfsc	4012,4,c	;volatile
  5893  002A48  BEAC               	btfsc	4012,7,c	;volatile
  5894  002A4A  D002               	goto	l228
  5895  002A4C  8C94               	bsf	3988,6,c	;volatile
  5896  002A4E  D000               	goto	l228
  5897  002A50                     l228:
  5898  002A50  0012               	return		;funcret
  5899  002A52                     __end_of_OpenUSART:
  5900                           	opt stack 0
  5901                           tblptru	equ	0xFF8
  5902                           tblptrh	equ	0xFF7
  5903                           tblptrl	equ	0xFF6
  5904                           tablat	equ	0xFF5
  5905                           prodh	equ	0xFF4
  5906                           prodl	equ	0xFF3
  5907                           postinc0	equ	0xFEE
  5908                           wreg	equ	0xFE8
  5909                           postdec1	equ	0xFE5
  5910                           plusw1	equ	0xFE3
  5911                           fsr1l	equ	0xFE1
  5912                           indf2	equ	0xFDF
  5913                           postinc2	equ	0xFDE
  5914                           postdec2	equ	0xFDD
  5915                           plusw2	equ	0xFDB
  5916                           fsr2h	equ	0xFDA
  5917                           fsr2l	equ	0xFD9
  5918                           status	equ	0xFD8
  5919                           
  5920 ;; *************** function _Init_ADC *****************
  5921 ;; Defined at:
  5922 ;;		line 125 in file "Lab6pB2.c"
  5923 ;; Parameters:    Size  Location     Type
  5924 ;;		None
  5925 ;; Auto vars:     Size  Location     Type
  5926 ;;		None
  5927 ;; Return value:  Size  Location     Type
  5928 ;;		None               void
  5929 ;; Registers used:
  5930 ;;		wreg, status,2
  5931 ;; Tracked objects:
  5932 ;;		On entry : 0/0
  5933 ;;		On exit  : 0/0
  5934 ;;		Unchanged: 0/0
  5935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5940 ;;Total ram usage:        0 bytes
  5941 ;; Hardware stack levels used:    1
  5942 ;; This function calls:
  5943 ;;		Nothing
  5944 ;; This function is called by:
  5945 ;;		_main
  5946 ;; This function uses a non-reentrant model
  5947 ;;
  5948                           
  5949                           	psect	text26
  5950  002C26                     __ptext26:
  5951                           	opt stack 0
  5952  002C26                     _Init_ADC:
  5953                           	opt stack 30
  5954                           
  5955                           ;Lab6pB2.c: 127: ADCON0 = 0x01;
  5956                           
  5957                           ;incstack = 0
  5958  002C26  0E01               	movlw	1
  5959  002C28  6EC2               	movwf	4034,c	;volatile
  5960                           
  5961                           ;Lab6pB2.c: 128: ADCON1 = 0x1E;
  5962  002C2A  0E1E               	movlw	30
  5963  002C2C  6EC1               	movwf	4033,c	;volatile
  5964                           
  5965                           ;Lab6pB2.c: 129: ADCON2=0xA9;
  5966  002C2E  0EA9               	movlw	169
  5967  002C30  6EC0               	movwf	4032,c	;volatile
  5968  002C32  0012               	return		;funcret
  5969  002C34                     __end_of_Init_ADC:
  5970                           	opt stack 0
  5971                           tblptru	equ	0xFF8
  5972                           tblptrh	equ	0xFF7
  5973                           tblptrl	equ	0xFF6
  5974                           tablat	equ	0xFF5
  5975                           prodh	equ	0xFF4
  5976                           prodl	equ	0xFF3
  5977                           postinc0	equ	0xFEE
  5978                           wreg	equ	0xFE8
  5979                           postdec1	equ	0xFE5
  5980                           plusw1	equ	0xFE3
  5981                           fsr1l	equ	0xFE1
  5982                           indf2	equ	0xFDF
  5983                           postinc2	equ	0xFDE
  5984                           postdec2	equ	0xFDD
  5985                           plusw2	equ	0xFDB
  5986                           fsr2h	equ	0xFDA
  5987                           fsr2l	equ	0xFD9
  5988                           status	equ	0xFD8
  5989                           
  5990 ;; *************** function _Delay_One_Sec *****************
  5991 ;; Defined at:
  5992 ;;		line 103 in file "Lab6pB2.c"
  5993 ;; Parameters:    Size  Location     Type
  5994 ;;		None
  5995 ;; Auto vars:     Size  Location     Type
  5996 ;;  I               2    0[COMRAM] int 
  5997 ;; Return value:  Size  Location     Type
  5998 ;;		None               void
  5999 ;; Registers used:
  6000 ;;		wreg, status,2, status,0
  6001 ;; Tracked objects:
  6002 ;;		On entry : 0/0
  6003 ;;		On exit  : 0/0
  6004 ;;		Unchanged: 0/0
  6005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6007 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6009 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6010 ;;Total ram usage:        2 bytes
  6011 ;; Hardware stack levels used:    1
  6012 ;; This function calls:
  6013 ;;		Nothing
  6014 ;; This function is called by:
  6015 ;;		_main
  6016 ;; This function uses a non-reentrant model
  6017 ;;
  6018                           
  6019                           	psect	text27
  6020  002BCE                     __ptext27:
  6021                           	opt stack 0
  6022  002BCE                     _Delay_One_Sec:
  6023                           	opt stack 30
  6024                           
  6025                           ;Lab6pB2.c: 105: for(int I=0; I <17000; I++);
  6026                           
  6027                           ;incstack = 0
  6028  002BCE  0E00               	movlw	0
  6029  002BD0  6E02               	movwf	Delay_One_Sec@I+1,c
  6030  002BD2  0E00               	movlw	0
  6031  002BD4  6E01               	movwf	Delay_One_Sec@I,c
  6032  002BD6                     l2554:
  6033  002BD6  BE02               	btfsc	Delay_One_Sec@I+1,7,c
  6034  002BD8  D008               	goto	l2558
  6035  002BDA  0E68               	movlw	104
  6036  002BDC  5C01               	subwf	Delay_One_Sec@I,w,c
  6037  002BDE  0E42               	movlw	66
  6038  002BE0  5802               	subwfb	Delay_One_Sec@I+1,w,c
  6039  002BE2  B0D8               	btfsc	status,0,c
  6040  002BE4  D005               	goto	l94
  6041  002BE6  D001               	goto	l2558
  6042  002BE8  D003               	goto	l94
  6043  002BEA                     l2558:
  6044  002BEA  4A01               	infsnz	Delay_One_Sec@I,f,c
  6045  002BEC  2A02               	incf	Delay_One_Sec@I+1,f,c
  6046  002BEE  D7F3               	goto	l2554
  6047  002BF0                     l94:
  6048  002BF0  0012               	return		;funcret
  6049  002BF2                     __end_of_Delay_One_Sec:
  6050                           	opt stack 0
  6051                           tblptru	equ	0xFF8
  6052                           tblptrh	equ	0xFF7
  6053                           tblptrl	equ	0xFF6
  6054                           tablat	equ	0xFF5
  6055                           prodh	equ	0xFF4
  6056                           prodl	equ	0xFF3
  6057                           postinc0	equ	0xFEE
  6058                           wreg	equ	0xFE8
  6059                           postdec1	equ	0xFE5
  6060                           plusw1	equ	0xFE3
  6061                           fsr1l	equ	0xFE1
  6062                           indf2	equ	0xFDF
  6063                           postinc2	equ	0xFDE
  6064                           postdec2	equ	0xFDD
  6065                           plusw2	equ	0xFDB
  6066                           fsr2h	equ	0xFDA
  6067                           fsr2l	equ	0xFD9
  6068                           status	equ	0xFD8
  6069                           
  6070 ;; *************** function _Deactivate_Buzzer *****************
  6071 ;; Defined at:
  6072 ;;		line 140 in file "Lab6pB2.c"
  6073 ;; Parameters:    Size  Location     Type
  6074 ;;		None
  6075 ;; Auto vars:     Size  Location     Type
  6076 ;;		None
  6077 ;; Return value:  Size  Location     Type
  6078 ;;		None               void
  6079 ;; Registers used:
  6080 ;;		wreg, status,2
  6081 ;; Tracked objects:
  6082 ;;		On entry : 0/0
  6083 ;;		On exit  : 0/0
  6084 ;;		Unchanged: 0/0
  6085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6090 ;;Total ram usage:        0 bytes
  6091 ;; Hardware stack levels used:    1
  6092 ;; This function calls:
  6093 ;;		Nothing
  6094 ;; This function is called by:
  6095 ;;		_main
  6096 ;; This function uses a non-reentrant model
  6097 ;;
  6098                           
  6099                           	psect	text28
  6100  002C4A                     __ptext28:
  6101                           	opt stack 0
  6102  002C4A                     _Deactivate_Buzzer:
  6103                           	opt stack 30
  6104                           
  6105                           ;Lab6pB2.c: 142: CCP2CON = 0x0;
  6106                           
  6107                           ;incstack = 0
  6108  002C4A  0E00               	movlw	0
  6109  002C4C  6EBA               	movwf	4026,c	;volatile
  6110                           
  6111                           ;Lab6pB2.c: 143: PORTBbits.RB3 = 0;
  6112  002C4E  9681               	bcf	3969,3,c	;volatile
  6113  002C50  0012               	return		;funcret
  6114  002C52                     __end_of_Deactivate_Buzzer:
  6115                           	opt stack 0
  6116                           tblptru	equ	0xFF8
  6117                           tblptrh	equ	0xFF7
  6118                           tblptrl	equ	0xFF6
  6119                           tablat	equ	0xFF5
  6120                           prodh	equ	0xFF4
  6121                           prodl	equ	0xFF3
  6122                           postinc0	equ	0xFEE
  6123                           wreg	equ	0xFE8
  6124                           postdec1	equ	0xFE5
  6125                           plusw1	equ	0xFE3
  6126                           fsr1l	equ	0xFE1
  6127                           indf2	equ	0xFDF
  6128                           postinc2	equ	0xFDE
  6129                           postdec2	equ	0xFDD
  6130                           plusw2	equ	0xFDB
  6131                           fsr2h	equ	0xFDA
  6132                           fsr2l	equ	0xFD9
  6133                           status	equ	0xFD8
  6134                           
  6135 ;; *************** function _Activate_Buzzer *****************
  6136 ;; Defined at:
  6137 ;;		line 132 in file "Lab6pB2.c"
  6138 ;; Parameters:    Size  Location     Type
  6139 ;;		None
  6140 ;; Auto vars:     Size  Location     Type
  6141 ;;		None
  6142 ;; Return value:  Size  Location     Type
  6143 ;;		None               void
  6144 ;; Registers used:
  6145 ;;		wreg, status,2
  6146 ;; Tracked objects:
  6147 ;;		On entry : 0/0
  6148 ;;		On exit  : 0/0
  6149 ;;		Unchanged: 0/0
  6150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6155 ;;Total ram usage:        0 bytes
  6156 ;; Hardware stack levels used:    1
  6157 ;; This function calls:
  6158 ;;		Nothing
  6159 ;; This function is called by:
  6160 ;;		_main
  6161 ;; This function uses a non-reentrant model
  6162 ;;
  6163                           
  6164                           	psect	text29
  6165  002C06                     __ptext29:
  6166                           	opt stack 0
  6167  002C06                     _Activate_Buzzer:
  6168                           	opt stack 30
  6169                           
  6170                           ;Lab6pB2.c: 134: PR2 = 0b11111001 ;
  6171                           
  6172                           ;incstack = 0
  6173  002C06  0EF9               	movlw	249
  6174  002C08  6ECB               	movwf	4043,c	;volatile
  6175                           
  6176                           ;Lab6pB2.c: 135: T2CON = 0b00000101 ;
  6177  002C0A  0E05               	movlw	5
  6178  002C0C  6ECA               	movwf	4042,c	;volatile
  6179                           
  6180                           ;Lab6pB2.c: 136: CCPR2L = 0b01001010 ;
  6181  002C0E  0E4A               	movlw	74
  6182  002C10  6EBB               	movwf	4027,c	;volatile
  6183                           
  6184                           ;Lab6pB2.c: 137: CCP2CON = 0b00111100 ;
  6185  002C12  0E3C               	movlw	60
  6186  002C14  6EBA               	movwf	4026,c	;volatile
  6187  002C16  0012               	return		;funcret
  6188  002C18                     __end_of_Activate_Buzzer:
  6189                           	opt stack 0
  6190                           tblptru	equ	0xFF8
  6191                           tblptrh	equ	0xFF7
  6192                           tblptrl	equ	0xFF6
  6193                           tablat	equ	0xFF5
  6194                           prodh	equ	0xFF4
  6195                           prodl	equ	0xFF3
  6196                           postinc0	equ	0xFEE
  6197                           wreg	equ	0xFE8
  6198                           postdec1	equ	0xFE5
  6199                           plusw1	equ	0xFE3
  6200                           fsr1l	equ	0xFE1
  6201                           indf2	equ	0xFDF
  6202                           postinc2	equ	0xFDE
  6203                           postdec2	equ	0xFDD
  6204                           plusw2	equ	0xFDB
  6205                           fsr2h	equ	0xFDA
  6206                           fsr2l	equ	0xFD9
  6207                           status	equ	0xFD8
  6208                           tblptru	equ	0xFF8
  6209                           tblptrh	equ	0xFF7
  6210                           tblptrl	equ	0xFF6
  6211                           tablat	equ	0xFF5
  6212                           prodh	equ	0xFF4
  6213                           prodl	equ	0xFF3
  6214                           postinc0	equ	0xFEE
  6215                           wreg	equ	0xFE8
  6216                           postdec1	equ	0xFE5
  6217                           plusw1	equ	0xFE3
  6218                           fsr1l	equ	0xFE1
  6219                           indf2	equ	0xFDF
  6220                           postinc2	equ	0xFDE
  6221                           postdec2	equ	0xFDD
  6222                           plusw2	equ	0xFDB
  6223                           fsr2h	equ	0xFDA
  6224                           fsr2l	equ	0xFD9
  6225                           status	equ	0xFD8
  6226                           
  6227                           	psect	rparam
  6228  0000                     tblptru	equ	0xFF8
  6229                           tblptrh	equ	0xFF7
  6230                           tblptrl	equ	0xFF6
  6231                           tablat	equ	0xFF5
  6232                           prodh	equ	0xFF4
  6233                           prodl	equ	0xFF3
  6234                           postinc0	equ	0xFEE
  6235                           wreg	equ	0xFE8
  6236                           postdec1	equ	0xFE5
  6237                           plusw1	equ	0xFE3
  6238                           fsr1l	equ	0xFE1
  6239                           indf2	equ	0xFDF
  6240                           postinc2	equ	0xFDE
  6241                           postdec2	equ	0xFDD
  6242                           plusw2	equ	0xFDB
  6243                           fsr2h	equ	0xFDA
  6244                           fsr2l	equ	0xFD9
  6245                           status	equ	0xFD8


Data Sizes:
    Strings     9
    Constant    118
    Data        10
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    124     124
    BANK0           128     31      41
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___ftsub
    _scale->___wmul
    _fround->___wmul
    ___wmul->___awdiv
    ___ftmul->___awtoft
    ___awmod->___fttol
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftdiv->___ftadd
    ___awtoft->___ftpack
    _Init_UART->_OpenUSART

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                31    31      0   55297
                                              0 BANK0     31    31      0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                      _Delay_One_Sec
                           _Init_ADC
                          _Init_UART
                 _Select_ADC_Channel
                            ___awdiv
                            ___awmod
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                       _get_full_ADC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              42    37      5   38703
                                             90 COMRAM    34    29      5
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3    9332
                                             62 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3    9134
                                             62 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1855
                                             56 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    3954
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1462
                                             42 COMRAM     6     2      4
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1572
                                             48 COMRAM     8     4      4
                            ___awmod (ARG)
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     409
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     552
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    1868
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     477
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     374
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     623
                                             27 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3237
                                             84 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    2984
                                             72 COMRAM    12     6      6
                            ___ftneg (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     151
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     666
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _get_full_ADC                                         6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2318
                                             84 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    1890
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1746
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _Select_ADC_Channel                                   1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     273
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Delay_One_Sec                                        2     2      0      46
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Activate_Buzzer
   _Deactivate_Buzzer
   _Delay_One_Sec
   _Init_ADC
   _Init_UART
     _OpenUSART
   _Select_ADC_Channel
   ___awdiv
     ___awmod (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___fttol (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
   ___awmod
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___fttol (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
   ___awtoft
     ___ftpack
   ___ftadd
     ___ftneg (ARG)
     ___ftpack (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
       ___awmod
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         ___awmod (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         ___awmod
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
           ___awmod (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftneg (ARG)
     ___ftpack (ARG)
   ___ftge
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___ftneg
   ___fttol
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
   _get_full_ADC
   _printf
     ___awdiv
       ___awmod (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
     ___ftadd
       ___ftneg (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         ___awmod
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
           ___awmod (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
           ___awmod
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
             ___awmod (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
       ___awmod (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
       ___awmod
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         ___awmod (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
     _putch
     _scale
       ___awdiv
         ___awmod (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
       ___awmod
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         ___awmod (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     1F      29       5       32.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     7C      7C       1       97.6%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A5      34        0.0%
DATA                 0      0      A5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Oct 06 18:27:16 2022

                         l70 2C1C                           l83 1D4C                           l85 1D7C  
                         l94 2BF0                 ___awdiv@sign 0036          ___wmul@multiplicand 003B  
               ___ftadd@exp1 0054                 ___ftadd@exp2 0053                 ___ftadd@sign 0052  
                        l100 2B88                          l103 2BA8                          l132 1FD2  
                        l223 2A28                          l231 2B82                          l224 2A2A  
                        l225 2A34                          l226 2A36                          l219 2A0E  
                        l139 1A86                          l228 2A50                          l600 2042  
                        l424 27CC                          l184 1502                          l611 2104  
                        l515 23B0                          l195 16A6                          l620 2120  
                        l524 23A0                          l437 2970                          l631 263C  
                        l720 28DE                          l449 2B30                          l730 29D0  
                        l556 2736                          l628 2670                          l636 22A6  
                        l660 24A8                          l645 2296                          l654 2862  
                        l670 2BC0                          l750 2AB0                          l638 220E  
                        l567 270E                          l639 2236                          l681 258E  
                        l596 2018                          l597 2196                          l677 2AF4  
                        _PR2 000FCB            _Deactivate_Buzzer 2C4A                 ___awmod@sign 0030  
                        wreg 000FE8           ?_Deactivate_Buzzer 0001                 __CFG_LVP$OFF 000000  
               ___ftdiv@cntr 005E                 ___ftdiv@sign 0063                 __CFG_WDT$OFF 000000  
                       l2000 2914                         l2020 2966                         l2012 294A  
                       l2004 2922                         l2030 29F4                         l2006 292C  
                       l2110 17D4                         l2200 22B8                         l2008 2934  
                       l2016 2956                         l2120 188C                         l2050 2A20  
                       l2042 2A12                         l2034 29FE                         l2220 230C  
                       l2116 187C                         l2038 2A06                         l2206 22C8  
                       l2150 21D4                         l2134 1A62                         l2320 255A  
                       l2312 2532                         l2240 2362                         l2232 234E  
                       l2144 21B6                         l2128 19B0                         l2400 109C  
                       l2314 2538                         l2322 2564                         l2250 238C  
                       l2402 10A8                         l2308 2522                         l2340 289C  
                       l2252 239A                         l2244 2372                         l2228 233E  
                       l2180 2258                         l2172 2244                         l2270 2832  
                       l2326 257C                         l2318 254C                         l2246 2378  
                       l2190 2282                         l2510 14DE                         l2422 1124  
                       l2406 10B0                         l1800 26D6                         l2336 2886  
                       l2360 299A                         l2192 2290                         l2184 2268  
                       l2096 1F92                         l2088 1ECE                         l2512 14EC  
                       l2504 14C4                         l2408 10D2                         l1810 2716  
                       l1802 26F6                         l2266 2800                         l2258 2ACA  
                       l2290 24C8                         l2338 2894                         l2370 2A58  
                       l2186 226E                         l2522 1522                         l2506 14D0  
                       l2450 1240                         l1804 2702                         l2604 264A  
                       l2276 285E                         l2348 28CE                         l2364 29C0  
                       l2356 2984                         l2372 2A66                         l2532 1648  
                       l2516 1508                         l2452 1250                         l2540 166E  
                       l2358 2992                         l1902 23D0                         l2534 1654  
                       l2526 1572                         l2462 12C8                         l2454 1280  
                       l2446 121A                         l2438 11B6                         l1816 2728  
                       l2616 2B0C                         l1840 2050                         l1904 23EA  
                       l2480 13DA                         l2472 1338                         l2456 1290  
                       l2544 168A                         l2554 2BD6                         l2570 25C8  
                       l1834 2026                         l1930 2454                         l1922 242C  
                       l2538 1662                         l2490 141A                         l2482 13DE  
                       l2474 1366                         l2466 12EC                         l2634 1AB6  
                       l1940 2482                         l1932 245A                         l1908 23F8  
                       l2468 12F6                         l2476 1374                         l2396 108C  
                       l2558 2BEA                         l2574 25D6                         l1862 20A8  
                       l1846 205C                         l1926 243E                         l2494 141E  
                       l2486 13EA                         l2662 1C66                         l1792 2692  
                       l2568 25AE                         l1864 20B4                         l1856 2084  
                       l1952 274E                         l1936 246C                         l2680 1D14  
                       l1794 269E                         l2594 2616                         l1882 213E  
                       l1874 20EC                         l1866 20C0                         l2498 143A  
                       l2658 1C4A                         l1796 26BE                         l1788 2682  
                       l1892 2170                         l1876 20F8                         l1868 20C8  
                       l1964 2776                         l1980 27B2                         l2676 1CF8  
                       l1966 2780                         l1958 2760                         l2694 1D86  
                       l2686 1D52                         l1984 27C2                         l1976 27A6  
                       l1968 2788                         l1996 2906                         STR_1 1077  
                       STR_2 1077                         u2101 21C6                         u2310 24E6  
                       u1511 1FE4                         u1521 1FF8                         u2081 21A8  
                       u2315 24DE                         u1721 23C2                         u2291 24BA  
                       u1741 23E0                         u2650 14FC                         u2490 115C  
                       u2731 25A0                 printf@tmpval 0075                         u2751 25BE  
                       u2495 1152                         u2791 1A9A                         _TRMT 007D61  
        ??_Deactivate_Buzzer 0001                         _main 1A88                 ___ftpack@arg 0001  
               ___ftpack@exp 0004               ??_get_full_ADC 0003                         fsr2h 000FDA  
                       fsr1l 000FE1                         indf2 000FDF                         fsr2l 000FD9  
                       prodh 000FF4                         prodl 000FF3                         start 0000  
               ___ftmul@cntr 001A                 ___param_bank 000010                 ___ftmul@sign 001B  
               ___fttol@exp1 002A                 ___fttol@lval 0026    __end_of_Deactivate_Buzzer 2C52  
                      ?_main 0001              __end_of___awdiv 27CE              __end_of___ftadd 2198  
            __end_of___awmod 2972              __end_of___ftdiv 2672              __end_of___ftneg 2BCE  
            __end_of___lldiv 28F0              __end_of___ftmul 24AA              ___awdiv@divisor 0033  
            __end_of___llmod 29E2              __end_of___ftsub 2AF6              __end_of___fttol 2590  
                      _T2CON 000FCA              ___awdiv@counter 0035                        _RCSTA 000FAB  
                      _SPBRG 000FAF                        _PORTB 000F81                        _PORTC 000F82  
                      _PORTD 000F83                        _PORTE 000F84                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TRISD 000F95  
                      _TRISE 000F96                        _TXREG 000FAD                        _TXSTA 000FAC  
               ___lltoft@exp 0011                ___awtoft@sign 000C              __end_of_dpowers 1029  
                      _scale 16A8                ___ftpack@sign 0005                        _putch 2C18  
                      main@l 008E                        main@t 0099                        main@u 008C  
               main@num_step 008A               __CFG_BOREN$OFF 000000                        tablat 000FF5  
                      plusw1 000FE3                        plusw2 000FDB                        status 000FD8  
            __initialization 2B32                 __end_of_main 1D90             __end_of_Init_ADC 2C34  
                     ??_main 007D                ___fttol@sign1 0025                __activetblptr 000002  
       __size_of__tdiv_to_l_ 0110                       _ADCON0 000FC2                       _ADCON1 000FC1  
                     _ADCON2 000FC0             ___llmod@dividend 0001                       ?_scale 003F  
                     _ADRESH 000FC4                       _ADRESL 000FC3                       _CCPR2L 000FBB  
           ___awdiv@dividend 0031             __end_of___awtoft 2B32                       ?_putch 0001  
           __end_of___ftpack 2738             __end_of___lltoft 2AB2                       _OSCCON 000FD3  
         __size_of_Init_UART 0014                       _SPBRGH 000FB0             __end_of__powers_ 1077  
         __size_of_OpenUSART 0070                       ___ftge 27CE     __size_of_Activate_Buzzer 0012  
                     ___wmul 2B5C                    ??___awdiv 0035                    ??___ftadd 004F  
                  ??___awmod 002F                    ??___ftdiv 005B                    ??___ftneg 0004  
                  ??___lldiv 0009                    ??___ftmul 0013                    ??___llmod 0009  
                  ??___ftsub 005B                    ??___fttol 0020                       _fround 1D90  
           ___awdiv@quotient 0037              ___awmod@divisor 002D   __size_of_Deactivate_Buzzer 0008  
            ___awmod@counter 002F                       _printf 1082                       main@RL 009C  
      ___ftmul@f3_as_product 0017         __end_of_get_full_ADC 2BAA                 __mediumconst 0000  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
                     putch@c 0001                   __accesstop 0080      __end_of__initialization 2B52  
                 ___ftadd@f1 0049                   ___ftadd@f2 004C                   ___ftge@ff1 0001  
                 ___ftge@ff2 0004                ___rparam_used 000001                   ___ftdiv@f1 0055  
                 ___ftdiv@f2 0058                   ___ftdiv@f3 005F                   ___ftneg@f1 0001  
                 ___awtoft@c 0009                   ___ftmul@f1 000D                   ___ftmul@f2 0010  
                 ___ftsub@f1 0055                   ___ftsub@f2 0058                   ___fttol@f1 001C  
             __pcstackCOMRAM 0001                 __pidataBANK0 2C40                   ___lltoft@c 0009  
              __end_of_scale 1A88                __end_of_putch 2C26            __end_of_Init_UART 2C06  
                 __div_to_l_ 22A8            __end_of_OpenUSART 2A52              __div_to_l_@exp1 000C  
            __div_to_l_@cntr 000B                      ??_scale 0042              __div_to_l_@quot 0007  
                    ??_putch 0001                    ?_Init_ADC 0001               Delay_One_Sec@I 0001  
 __end_of_Select_ADC_Channel 2C40                __div_to_l_@f1 0001                __div_to_l_@f2 0004  
         __CFG_CCP2MX$PORTBE 000000                      ?___ftge 0001                      ?___wmul 0039  
                    _CCP2CON 000FBA       __size_of_Delay_One_Sec 0024                      ?_fround 003F  
                  ?___awtoft 0009                    ?___ftpack 0001                      ?_printf 005B  
  Select_ADC_Channel@channel 0001                    ?___lltoft 0009            ??_Activate_Buzzer 0001  
                 ??_Init_ADC 0001            __end_of__npowers_ 1050                      __Hparam 0000  
                 _scale$1188 0042                      __Lparam 0000              __size_of___ftge 0096  
                    ___awdiv 2738                      ___ftadd 1FD4                      ___awmod 28F0  
                    ___ftdiv 2590                      ___ftneg 2BAA                      ___lldiv 2864  
            __size_of___wmul 0028                      ___ftmul 23B2                      ___llmod 2972  
                    ___ftsub 2AB2                      ___fttol 24AA        __size_of_get_full_ADC 0026  
               __psmallconst 1000                      __pcinit 2B32                   ??___awtoft 000C  
                 ??___ftpack 0006              __size_of_fround 0244                      __ramtop 1000  
                 ??___lltoft 000D                      __ptext0 1A88                      __ptext1 1082  
                    __ptext2 16A8                      __ptext3 2C18                      __ptext4 1D90  
                    __ptext5 2B5C                      __ptext6 23B2                      __ptext7 28F0  
                    __ptext8 2738                      __ptext9 2198              __size_of_printf 0626  
                ?__div_to_l_ 0001                      _dpowers 1001             ___awmod@dividend 002B  
       end_of_initialization 2B52                _Delay_One_Sec 2BCE                __Lmediumconst 0000  
               _get_full_ADC 2B84              ___lldiv@divisor 0005              ___lldiv@counter 000D  
                  _RCSTAbits 000FAB                      printf@c 007C                      printf@f 005B  
                    postdec1 000FE5                      postdec2 000FDD                      postinc0 000FEE  
                    postinc2 000FDE               __tdiv_to_l_@f1 0001               __tdiv_to_l_@f2 0004  
              ??__tdiv_to_l_ 0007                    _PORTBbits 000F81                    _PORTDbits 000F83  
                  _TRISCbits 000F94               main@voltage_mv 0094               ?_Delay_One_Sec 0001  
                ___ftdiv@exp 0062                    _TXSTAbits 000FAC           get_full_ADC@result 0005  
        __size_of__div_to_l_ 010A                  ___ftmul@exp 0016               __end_of___ftge 2864  
             __end_of___wmul 2B84               __end_of_fround 1FD4               __end_of_printf 16A8  
        start_initialization 2B32                    _Init_UART 2BF2          __end_of__tdiv_to_l_ 22A8  
                  _OpenUSART 29E2              ___llmod@divisor 0005             __CFG_OSC$INTIO67 000000  
          __size_of_Init_ADC 000E              ___llmod@counter 0009              _Activate_Buzzer 2C06  
                   ??___ftge 0007                     ??___wmul 003D                  __pdataBANK0 009F  
         _Select_ADC_Channel 2C34                     ??_fround 0042                     ??_printf 0060  
                 fround@prec 0048            __size_of___awtoft 003C            __size_of___ftpack 00C6  
        ?_Select_ADC_Channel 0001            __size_of___lltoft 0060                   ?_Init_UART 0001  
              __pcstackBANK0 0080              ??_Delay_One_Sec 0001                   ?_OpenUSART 0001  
       ??_Select_ADC_Channel 0001                     ?___awdiv 0031                     ?___ftadd 0049  
                   ?___awmod 002B                     ?___ftdiv 0055                     ?___ftneg 0001  
                   ?___lldiv 0001                     ?___ftmul 000D                     ?___llmod 0001  
                   ?___ftsub 0055                    __npowers_ 1029                     ?___fttol 001C  
                __tdiv_to_l_ 2198                 ??__div_to_l_ 0007                  __smallconst 1000  
             __size_of_scale 03E0               __size_of_putch 000E      __end_of_Activate_Buzzer 2C18  
             ___wmul@product 003D                     _PIE1bits 000F9D                     _PIR1bits 000F9E  
         __end_of__div_to_l_ 23B2                    main@F4283 009F                    main@RLint 0097  
                 _ADCON0bits 000FC2            ___wmul@multiplier 0039                    main@l_301 0092  
                  main@t_302 009A                    main@u_300 0090                   printf@flag 006B  
                 printf@fval 0079                   printf@prec 006D                  ??_Init_UART 0004  
                  copy_data0 2B46                     _Init_ADC 2C26                  ??_OpenUSART 0003  
            OpenUSART@config 0003                     __Hrparam 0000                     __Lrparam 0000  
           __size_of___awdiv 0096             __size_of___ftadd 01C4             __size_of___awmod 0082  
           __size_of___ftdiv 00E2             __size_of___ftneg 0024             __size_of___lldiv 008C  
           __size_of___ftmul 00F8             __size_of___llmod 0070             __size_of___ftsub 0044  
           __size_of___fttol 00E6                     ___awtoft 2AF6                     ___ftpack 2672  
                _fround$1186 0045                  _fround$1187 0042                     ___lltoft 2A52  
                   __ptext10 22A8                     __ptext11 2A52                     __ptext20 2590  
                   __ptext12 2972                     __ptext21 2AF6                     __ptext13 2864  
                   __ptext22 2672                     __ptext14 24AA                     __ptext23 2C34  
                   __ptext15 2AB2                     __ptext24 2BF2                     __ptext16 1FD4  
                   __ptext25 29E2                     __ptext17 2BAA                     __ptext26 2C26  
                   __ptext18 27CE                     __ptext27 2BCE                     __ptext19 2B84  
                   __ptext28 2C4A                     __ptext29 2C06                     __powers_ 1050  
           ?_Activate_Buzzer 0001                __size_of_main 0308                    printf@exp 0073  
                  printf@val 006F                     main@temp 009B               OpenUSART@spbrg 0001  
                   scale@scl 0045             __tdiv_to_l_@exp1 000F             __tdiv_to_l_@cntr 000E  
           __tdiv_to_l_@quot 000A             ___lldiv@dividend 0001                     printf@ap 0069  
               ?__tdiv_to_l_ 0001                  _printf$1189 0066             ___lldiv@quotient 0009  
               main@LED_7seg 0080        __end_of_Delay_One_Sec 2BF2                ?_get_full_ADC 0001  
__size_of_Select_ADC_Channel 000C  
