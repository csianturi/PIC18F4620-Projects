

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Nov 10 17:02:22 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    79                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    80  0000                     
    81                           	psect	idataCOMRAM
    82  0019DE                     __pidataCOMRAM:
    83                           	opt stack 0
    84                           
    85                           ;initializer for _tempSecond
    86  0019DE  FF                 	db	255
    87                           
    88                           ;initializer for _wrap
    89  0019DF  01                 	db	1
    90                           
    91                           	psect	idataBANK0
    92  0013C6                     __pidataBANK0:
    93                           	opt stack 0
    94                           
    95                           ;initializer for _D1
    96  0013C6  01                 	db	1
    97  0013C7  01                 	db	1
    98  0013C8  01                 	db	1
    99  0013C9  06                 	db	6
   100  0013CA  06                 	db	6
   101  0013CB  02                 	db	2
   102  0013CC  04                 	db	4
   103  0013CD  00                 	db	0
   104  0013CE  00                 	db	0
   105  0013CF  00                 	db	0
   106  0013D0  00                 	db	0
   107  0013D1  00                 	db	0
   108  0013D2  00                 	db	0
   109  0013D3  00                 	db	0
   110  0013D4  00                 	db	0
   111  0013D5  00                 	db	0
   112  0013D6  00                 	db	0
   113  0013D7  00                 	db	0
   114  0013D8  00                 	db	0
   115  0013D9  00                 	db	0
   116  0013DA  00                 	db	0
   117                           
   118                           ;initializer for _D2
   119  0013DB  00                 	db	0
   120  0013DC  00                 	db	0
   121  0013DD  00                 	db	0
   122  0013DE  00                 	db	0
   123  0013DF  00                 	db	0
   124  0013E0  00                 	db	0
   125  0013E1  00                 	db	0
   126  0013E2  04                 	db	4
   127  0013E3  05                 	db	5
   128  0013E4  07                 	db	7
   129  0013E5  07                 	db	7
   130  0013E6  07                 	db	7
   131  0013E7  07                 	db	7
   132  0013E8  07                 	db	7
   133  0013E9  00                 	db	0
   134  0013EA  00                 	db	0
   135  0013EB  00                 	db	0
   136  0013EC  00                 	db	0
   137  0013ED  00                 	db	0
   138  0013EE  00                 	db	0
   139  0013EF  00                 	db	0
   140                           
   141                           ;initializer for _D3
   142  0013F0  00                 	db	0
   143  0013F1  00                 	db	0
   144  0013F2  00                 	db	0
   145  0013F3  00                 	db	0
   146  0013F4  00                 	db	0
   147  0013F5  00                 	db	0
   148  0013F6  00                 	db	0
   149  0013F7  00                 	db	0
   150  0013F8  00                 	db	0
   151  0013F9  00                 	db	0
   152  0013FA  00                 	db	0
   153  0013FB  00                 	db	0
   154  0013FC  00                 	db	0
   155  0013FD  00                 	db	0
   156  0013FE  38                 	db	56
   157  0013FF  38                 	db	56
   158  001400  38                 	db	56
   159  001401  38                 	db	56
   160  001402  38                 	db	56
   161  001403  38                 	db	56
   162  001404  38                 	db	56
   163                           
   164                           ;initializer for _array1
   165  001405  A2                 	db	162
   166  001406  62                 	db	98
   167  001407  E2                 	db	226
   168  001408  22                 	db	34
   169  001409  02                 	db	2
   170  00140A  C2                 	db	194
   171  00140B  E0                 	db	224
   172  00140C  A8                 	db	168
   173  00140D  90                 	db	144
   174  00140E  68                 	db	104
   175  00140F  98                 	db	152
   176  001410  B0                 	db	176
   177  001411  30                 	db	48
   178  001412  18                 	db	24
   179  001413  7A                 	db	122
   180  001414  10                 	db	16
   181  001415  38                 	db	56
   182  001416  5A                 	db	90
   183  001417  42                 	db	66
   184  001418  4A                 	db	74
   185  001419  52                 	db	82
   186                           
   187                           	psect	idataBANK1
   188  0010BC                     __pidataBANK1:
   189                           	opt stack 0
   190                           
   191                           ;initializer for _color
   192  0010BC  F800               	dw	63488
   193  0010BE  F800               	dw	63488
   194  0010C0  F800               	dw	63488
   195  0010C2  07FF               	dw	2047
   196  0010C4  07FF               	dw	2047
   197  0010C6  07E0               	dw	2016
   198  0010C8  001F               	dw	31
   199  0010CA  001F               	dw	31
   200  0010CC  F81F               	dw	63519
   201  0010CE  FFFF               	dw	65535
   202  0010D0  FFFF               	dw	65535
   203  0010D2  FFFF               	dw	65535
   204  0010D4  FFFF               	dw	65535
   205  0010D6  FFFF               	dw	65535
   206  0010D8  FFFF               	dw	65535
   207  0010DA  FFFF               	dw	65535
   208  0010DC  FFFF               	dw	65535
   209  0010DE  FFFF               	dw	65535
   210  0010E0  FFFF               	dw	65535
   211  0010E2  FFFF               	dw	65535
   212  0010E4  FFFF               	dw	65535
   213                           
   214                           ;initializer for _txt1
   215  0010E6  43                 	db	67
   216  0010E7  48                 	db	72
   217  0010E8  2D                 	db	45
   218  0010E9  00                 	db	0
   219  0010EA  43                 	db	67
   220  0010EB  48                 	db	72
   221  0010EC  20                 	db	32
   222  0010ED  00                 	db	0
   223  0010EE  43                 	db	67
   224  0010EF  48                 	db	72
   225  0010F0  2B                 	db	43
   226  0010F1  00                 	db	0
   227  0010F2  7C                 	db	124
   228  0010F3  3C                 	db	60
   229  0010F4  3C                 	db	60
   230  0010F5  00                 	db	0
   231  0010F6  3E                 	db	62
   232  0010F7  3E                 	db	62
   233  0010F8  7C                 	db	124
   234  0010F9  00                 	db	0
   235  0010FA  3E                 	db	62
   236  0010FB  7C                 	db	124
   237  0010FC  7C                 	db	124
   238  0010FD  00                 	db	0
   239  0010FE  20                 	db	32
   240  0010FF  2D                 	db	45
   241  001100  20                 	db	32
   242  001101  00                 	db	0
   243  001102  20                 	db	32
   244  001103  2B                 	db	43
   245  001104  20                 	db	32
   246  001105  00                 	db	0
   247  001106  45                 	db	69
   248  001107  51                 	db	81
   249  001108  20                 	db	32
   250  001109  00                 	db	0
   251  00110A  20                 	db	32
   252  00110B  30                 	db	48
   253  00110C  20                 	db	32
   254  00110D  00                 	db	0
   255  00110E  31                 	db	49
   256  00110F  30                 	db	48
   257  001110  30                 	db	48
   258  001111  00                 	db	0
   259  001112  32                 	db	50
   260  001113  30                 	db	48
   261  001114  30                 	db	48
   262  001115  00                 	db	0
   263  001116  20                 	db	32
   264  001117  31                 	db	49
   265  001118  20                 	db	32
   266  001119  00                 	db	0
   267  00111A  20                 	db	32
   268  00111B  32                 	db	50
   269  00111C  20                 	db	32
   270  00111D  00                 	db	0
   271  00111E  20                 	db	32
   272  00111F  33                 	db	51
   273  001120  20                 	db	32
   274  001121  00                 	db	0
   275  001122  20                 	db	32
   276  001123  34                 	db	52
   277  001124  20                 	db	32
   278  001125  00                 	db	0
   279  001126  20                 	db	32
   280  001127  35                 	db	53
   281  001128  20                 	db	32
   282  001129  00                 	db	0
   283  00112A  20                 	db	32
   284  00112B  36                 	db	54
   285  00112C  20                 	db	32
   286  00112D  00                 	db	0
   287  00112E  20                 	db	32
   288  00112F  37                 	db	55
   289  001130  20                 	db	32
   290  001131  00                 	db	0
   291  001132  20                 	db	32
   292  001133  38                 	db	56
   293  001134  20                 	db	32
   294  001135  00                 	db	0
   295  001136  20                 	db	32
   296  001137  39                 	db	57
   297  001138  20                 	db	32
   298  001139  00                 	db	0
   299                           
   300                           	psect	mediumconst
   301  00FD8A                     __pmediumconst:
   302                           	opt stack 0
   303  00FD8A  00                 	db	0
   304  00FD8B                     _font:
   305                           	opt stack 0
   306  00FD8B  00                 	db	0
   307  00FD8C  00                 	db	0
   308  00FD8D  00                 	db	0
   309  00FD8E  00                 	db	0
   310  00FD8F  00                 	db	0
   311  00FD90  00                 	db	0
   312  00FD91  00                 	db	0
   313  00FD92  5F                 	db	95
   314  00FD93  00                 	db	0
   315  00FD94  00                 	db	0
   316  00FD95  00                 	db	0
   317  00FD96  07                 	db	7
   318  00FD97  00                 	db	0
   319  00FD98  07                 	db	7
   320  00FD99  00                 	db	0
   321  00FD9A  14                 	db	20
   322  00FD9B  7F                 	db	127
   323  00FD9C  14                 	db	20
   324  00FD9D  7F                 	db	127
   325  00FD9E  14                 	db	20
   326  00FD9F  24                 	db	36
   327  00FDA0  2A                 	db	42
   328  00FDA1  7F                 	db	127
   329  00FDA2  2A                 	db	42
   330  00FDA3  12                 	db	18
   331  00FDA4  23                 	db	35
   332  00FDA5  13                 	db	19
   333  00FDA6  08                 	db	8
   334  00FDA7  64                 	db	100
   335  00FDA8  62                 	db	98
   336  00FDA9  36                 	db	54
   337  00FDAA  49                 	db	73
   338  00FDAB  56                 	db	86
   339  00FDAC  20                 	db	32
   340  00FDAD  50                 	db	80
   341  00FDAE  00                 	db	0
   342  00FDAF  08                 	db	8
   343  00FDB0  07                 	db	7
   344  00FDB1  03                 	db	3
   345  00FDB2  00                 	db	0
   346  00FDB3  00                 	db	0
   347  00FDB4  1C                 	db	28
   348  00FDB5  22                 	db	34
   349  00FDB6  41                 	db	65
   350  00FDB7  00                 	db	0
   351  00FDB8  00                 	db	0
   352  00FDB9  41                 	db	65
   353  00FDBA  22                 	db	34
   354  00FDBB  1C                 	db	28
   355  00FDBC  00                 	db	0
   356  00FDBD  2A                 	db	42
   357  00FDBE  1C                 	db	28
   358  00FDBF  7F                 	db	127
   359  00FDC0  1C                 	db	28
   360  00FDC1  2A                 	db	42
   361  00FDC2  08                 	db	8
   362  00FDC3  08                 	db	8
   363  00FDC4  3E                 	db	62
   364  00FDC5  08                 	db	8
   365  00FDC6  08                 	db	8
   366  00FDC7  00                 	db	0
   367  00FDC8  80                 	db	128
   368  00FDC9  70                 	db	112
   369  00FDCA  30                 	db	48
   370  00FDCB  00                 	db	0
   371  00FDCC  08                 	db	8
   372  00FDCD  08                 	db	8
   373  00FDCE  08                 	db	8
   374  00FDCF  08                 	db	8
   375  00FDD0  08                 	db	8
   376  00FDD1  00                 	db	0
   377  00FDD2  00                 	db	0
   378  00FDD3  60                 	db	96
   379  00FDD4  60                 	db	96
   380  00FDD5  00                 	db	0
   381  00FDD6  20                 	db	32
   382  00FDD7  10                 	db	16
   383  00FDD8  08                 	db	8
   384  00FDD9  04                 	db	4
   385  00FDDA  02                 	db	2
   386  00FDDB  3E                 	db	62
   387  00FDDC  51                 	db	81
   388  00FDDD  49                 	db	73
   389  00FDDE  45                 	db	69
   390  00FDDF  3E                 	db	62
   391  00FDE0  00                 	db	0
   392  00FDE1  42                 	db	66
   393  00FDE2  7F                 	db	127
   394  00FDE3  40                 	db	64
   395  00FDE4  00                 	db	0
   396  00FDE5  72                 	db	114
   397  00FDE6  49                 	db	73
   398  00FDE7  49                 	db	73
   399  00FDE8  49                 	db	73
   400  00FDE9  46                 	db	70
   401  00FDEA  21                 	db	33
   402  00FDEB  41                 	db	65
   403  00FDEC  49                 	db	73
   404  00FDED  4D                 	db	77
   405  00FDEE  33                 	db	51
   406  00FDEF  18                 	db	24
   407  00FDF0  14                 	db	20
   408  00FDF1  12                 	db	18
   409  00FDF2  7F                 	db	127
   410  00FDF3  10                 	db	16
   411  00FDF4  27                 	db	39
   412  00FDF5  45                 	db	69
   413  00FDF6  45                 	db	69
   414  00FDF7  45                 	db	69
   415  00FDF8  39                 	db	57
   416  00FDF9  3C                 	db	60
   417  00FDFA  4A                 	db	74
   418  00FDFB  49                 	db	73
   419  00FDFC  49                 	db	73
   420  00FDFD  31                 	db	49
   421  00FDFE  41                 	db	65
   422  00FDFF  21                 	db	33
   423  00FE00  11                 	db	17
   424  00FE01  09                 	db	9
   425  00FE02  07                 	db	7
   426  00FE03  36                 	db	54
   427  00FE04  49                 	db	73
   428  00FE05  49                 	db	73
   429  00FE06  49                 	db	73
   430  00FE07  36                 	db	54
   431  00FE08  46                 	db	70
   432  00FE09  49                 	db	73
   433  00FE0A  49                 	db	73
   434  00FE0B  29                 	db	41
   435  00FE0C  1E                 	db	30
   436  00FE0D  00                 	db	0
   437  00FE0E  00                 	db	0
   438  00FE0F  14                 	db	20
   439  00FE10  00                 	db	0
   440  00FE11  00                 	db	0
   441  00FE12  00                 	db	0
   442  00FE13  40                 	db	64
   443  00FE14  34                 	db	52
   444  00FE15  00                 	db	0
   445  00FE16  00                 	db	0
   446  00FE17  00                 	db	0
   447  00FE18  08                 	db	8
   448  00FE19  14                 	db	20
   449  00FE1A  22                 	db	34
   450  00FE1B  41                 	db	65
   451  00FE1C  14                 	db	20
   452  00FE1D  14                 	db	20
   453  00FE1E  14                 	db	20
   454  00FE1F  14                 	db	20
   455  00FE20  14                 	db	20
   456  00FE21  00                 	db	0
   457  00FE22  41                 	db	65
   458  00FE23  22                 	db	34
   459  00FE24  14                 	db	20
   460  00FE25  08                 	db	8
   461  00FE26  02                 	db	2
   462  00FE27  01                 	db	1
   463  00FE28  59                 	db	89
   464  00FE29  09                 	db	9
   465  00FE2A  06                 	db	6
   466  00FE2B  3E                 	db	62
   467  00FE2C  41                 	db	65
   468  00FE2D  5D                 	db	93
   469  00FE2E  59                 	db	89
   470  00FE2F  4E                 	db	78
   471  00FE30  7C                 	db	124
   472  00FE31  12                 	db	18
   473  00FE32  11                 	db	17
   474  00FE33  12                 	db	18
   475  00FE34  7C                 	db	124
   476  00FE35  7F                 	db	127
   477  00FE36  49                 	db	73
   478  00FE37  49                 	db	73
   479  00FE38  49                 	db	73
   480  00FE39  36                 	db	54
   481  00FE3A  3E                 	db	62
   482  00FE3B  41                 	db	65
   483  00FE3C  41                 	db	65
   484  00FE3D  41                 	db	65
   485  00FE3E  22                 	db	34
   486  00FE3F  7F                 	db	127
   487  00FE40  41                 	db	65
   488  00FE41  41                 	db	65
   489  00FE42  41                 	db	65
   490  00FE43  3E                 	db	62
   491  00FE44  7F                 	db	127
   492  00FE45  49                 	db	73
   493  00FE46  49                 	db	73
   494  00FE47  49                 	db	73
   495  00FE48  41                 	db	65
   496  00FE49  7F                 	db	127
   497  00FE4A  09                 	db	9
   498  00FE4B  09                 	db	9
   499  00FE4C  09                 	db	9
   500  00FE4D  01                 	db	1
   501  00FE4E  3E                 	db	62
   502  00FE4F  41                 	db	65
   503  00FE50  41                 	db	65
   504  00FE51  51                 	db	81
   505  00FE52  73                 	db	115
   506  00FE53  7F                 	db	127
   507  00FE54  08                 	db	8
   508  00FE55  08                 	db	8
   509  00FE56  08                 	db	8
   510  00FE57  7F                 	db	127
   511  00FE58  00                 	db	0
   512  00FE59  41                 	db	65
   513  00FE5A  7F                 	db	127
   514  00FE5B  41                 	db	65
   515  00FE5C  00                 	db	0
   516  00FE5D  20                 	db	32
   517  00FE5E  40                 	db	64
   518  00FE5F  41                 	db	65
   519  00FE60  3F                 	db	63
   520  00FE61  01                 	db	1
   521  00FE62  7F                 	db	127
   522  00FE63  08                 	db	8
   523  00FE64  14                 	db	20
   524  00FE65  22                 	db	34
   525  00FE66  41                 	db	65
   526  00FE67  7F                 	db	127
   527  00FE68  40                 	db	64
   528  00FE69  40                 	db	64
   529  00FE6A  40                 	db	64
   530  00FE6B  40                 	db	64
   531  00FE6C  7F                 	db	127
   532  00FE6D  02                 	db	2
   533  00FE6E  1C                 	db	28
   534  00FE6F  02                 	db	2
   535  00FE70  7F                 	db	127
   536  00FE71  7F                 	db	127
   537  00FE72  04                 	db	4
   538  00FE73  08                 	db	8
   539  00FE74  10                 	db	16
   540  00FE75  7F                 	db	127
   541  00FE76  3E                 	db	62
   542  00FE77  41                 	db	65
   543  00FE78  41                 	db	65
   544  00FE79  41                 	db	65
   545  00FE7A  3E                 	db	62
   546  00FE7B  7F                 	db	127
   547  00FE7C  09                 	db	9
   548  00FE7D  09                 	db	9
   549  00FE7E  09                 	db	9
   550  00FE7F  06                 	db	6
   551  00FE80  3E                 	db	62
   552  00FE81  41                 	db	65
   553  00FE82  51                 	db	81
   554  00FE83  21                 	db	33
   555  00FE84  5E                 	db	94
   556  00FE85  7F                 	db	127
   557  00FE86  09                 	db	9
   558  00FE87  19                 	db	25
   559  00FE88  29                 	db	41
   560  00FE89  46                 	db	70
   561  00FE8A                     __end_of_font:
   562                           	opt stack 0
   563  00FE8A                     _font2:
   564                           	opt stack 0
   565  00FE8A  26                 	db	38
   566  00FE8B  49                 	db	73
   567  00FE8C  49                 	db	73
   568  00FE8D  49                 	db	73
   569  00FE8E  32                 	db	50
   570  00FE8F  03                 	db	3
   571  00FE90  01                 	db	1
   572  00FE91  7F                 	db	127
   573  00FE92  01                 	db	1
   574  00FE93  03                 	db	3
   575  00FE94  3F                 	db	63
   576  00FE95  40                 	db	64
   577  00FE96  40                 	db	64
   578  00FE97  40                 	db	64
   579  00FE98  3F                 	db	63
   580  00FE99  1F                 	db	31
   581  00FE9A  20                 	db	32
   582  00FE9B  40                 	db	64
   583  00FE9C  20                 	db	32
   584  00FE9D  1F                 	db	31
   585  00FE9E  3F                 	db	63
   586  00FE9F  40                 	db	64
   587  00FEA0  38                 	db	56
   588  00FEA1  40                 	db	64
   589  00FEA2  3F                 	db	63
   590  00FEA3  63                 	db	99
   591  00FEA4  14                 	db	20
   592  00FEA5  08                 	db	8
   593  00FEA6  14                 	db	20
   594  00FEA7  63                 	db	99
   595  00FEA8  03                 	db	3
   596  00FEA9  04                 	db	4
   597  00FEAA  78                 	db	120
   598  00FEAB  04                 	db	4
   599  00FEAC  03                 	db	3
   600  00FEAD  61                 	db	97
   601  00FEAE  59                 	db	89
   602  00FEAF  49                 	db	73
   603  00FEB0  4D                 	db	77
   604  00FEB1  43                 	db	67
   605  00FEB2  00                 	db	0
   606  00FEB3  7F                 	db	127
   607  00FEB4  41                 	db	65
   608  00FEB5  41                 	db	65
   609  00FEB6  41                 	db	65
   610  00FEB7  02                 	db	2
   611  00FEB8  04                 	db	4
   612  00FEB9  08                 	db	8
   613  00FEBA  10                 	db	16
   614  00FEBB  20                 	db	32
   615  00FEBC  00                 	db	0
   616  00FEBD  41                 	db	65
   617  00FEBE  41                 	db	65
   618  00FEBF  41                 	db	65
   619  00FEC0  7F                 	db	127
   620  00FEC1  04                 	db	4
   621  00FEC2  02                 	db	2
   622  00FEC3  01                 	db	1
   623  00FEC4  02                 	db	2
   624  00FEC5  04                 	db	4
   625  00FEC6  40                 	db	64
   626  00FEC7  40                 	db	64
   627  00FEC8  40                 	db	64
   628  00FEC9  40                 	db	64
   629  00FECA  40                 	db	64
   630  00FECB  00                 	db	0
   631  00FECC  03                 	db	3
   632  00FECD  07                 	db	7
   633  00FECE  08                 	db	8
   634  00FECF  00                 	db	0
   635  00FED0  20                 	db	32
   636  00FED1  54                 	db	84
   637  00FED2  54                 	db	84
   638  00FED3  78                 	db	120
   639  00FED4  40                 	db	64
   640  00FED5  7F                 	db	127
   641  00FED6  28                 	db	40
   642  00FED7  44                 	db	68
   643  00FED8  44                 	db	68
   644  00FED9  38                 	db	56
   645  00FEDA  38                 	db	56
   646  00FEDB  44                 	db	68
   647  00FEDC  44                 	db	68
   648  00FEDD  44                 	db	68
   649  00FEDE  28                 	db	40
   650  00FEDF  38                 	db	56
   651  00FEE0  44                 	db	68
   652  00FEE1  44                 	db	68
   653  00FEE2  28                 	db	40
   654  00FEE3  7F                 	db	127
   655  00FEE4  38                 	db	56
   656  00FEE5  54                 	db	84
   657  00FEE6  54                 	db	84
   658  00FEE7  54                 	db	84
   659  00FEE8  18                 	db	24
   660  00FEE9  00                 	db	0
   661  00FEEA  08                 	db	8
   662  00FEEB  7E                 	db	126
   663  00FEEC  09                 	db	9
   664  00FEED  02                 	db	2
   665  00FEEE  18                 	db	24
   666  00FEEF  A4                 	db	164
   667  00FEF0  A4                 	db	164
   668  00FEF1  9C                 	db	156
   669  00FEF2  78                 	db	120
   670  00FEF3  7F                 	db	127
   671  00FEF4  08                 	db	8
   672  00FEF5  04                 	db	4
   673  00FEF6  04                 	db	4
   674  00FEF7  78                 	db	120
   675  00FEF8  00                 	db	0
   676  00FEF9  44                 	db	68
   677  00FEFA  7D                 	db	125
   678  00FEFB  40                 	db	64
   679  00FEFC  00                 	db	0
   680  00FEFD  20                 	db	32
   681  00FEFE  40                 	db	64
   682  00FEFF  40                 	db	64
   683  00FF00  3D                 	db	61
   684  00FF01  00                 	db	0
   685  00FF02  7F                 	db	127
   686  00FF03  10                 	db	16
   687  00FF04  28                 	db	40
   688  00FF05  44                 	db	68
   689  00FF06  00                 	db	0
   690  00FF07  00                 	db	0
   691  00FF08  41                 	db	65
   692  00FF09  7F                 	db	127
   693  00FF0A  40                 	db	64
   694  00FF0B  00                 	db	0
   695  00FF0C  7C                 	db	124
   696  00FF0D  04                 	db	4
   697  00FF0E  78                 	db	120
   698  00FF0F  04                 	db	4
   699  00FF10  78                 	db	120
   700  00FF11  7C                 	db	124
   701  00FF12  08                 	db	8
   702  00FF13  04                 	db	4
   703  00FF14  04                 	db	4
   704  00FF15  78                 	db	120
   705  00FF16  38                 	db	56
   706  00FF17  44                 	db	68
   707  00FF18  44                 	db	68
   708  00FF19  44                 	db	68
   709  00FF1A  38                 	db	56
   710  00FF1B  FC                 	db	252
   711  00FF1C  18                 	db	24
   712  00FF1D  24                 	db	36
   713  00FF1E  24                 	db	36
   714  00FF1F  18                 	db	24
   715  00FF20  18                 	db	24
   716  00FF21  24                 	db	36
   717  00FF22  24                 	db	36
   718  00FF23  18                 	db	24
   719  00FF24  FC                 	db	252
   720  00FF25  7C                 	db	124
   721  00FF26  08                 	db	8
   722  00FF27  04                 	db	4
   723  00FF28  04                 	db	4
   724  00FF29  08                 	db	8
   725  00FF2A  48                 	db	72
   726  00FF2B  54                 	db	84
   727  00FF2C  54                 	db	84
   728  00FF2D  54                 	db	84
   729  00FF2E  24                 	db	36
   730  00FF2F  04                 	db	4
   731  00FF30  04                 	db	4
   732  00FF31  3F                 	db	63
   733  00FF32  44                 	db	68
   734  00FF33  24                 	db	36
   735  00FF34  3C                 	db	60
   736  00FF35  40                 	db	64
   737  00FF36  40                 	db	64
   738  00FF37  20                 	db	32
   739  00FF38  7C                 	db	124
   740  00FF39  1C                 	db	28
   741  00FF3A  20                 	db	32
   742  00FF3B  40                 	db	64
   743  00FF3C  20                 	db	32
   744  00FF3D  1C                 	db	28
   745  00FF3E  3C                 	db	60
   746  00FF3F  40                 	db	64
   747  00FF40  30                 	db	48
   748  00FF41  40                 	db	64
   749  00FF42  3C                 	db	60
   750  00FF43  44                 	db	68
   751  00FF44  28                 	db	40
   752  00FF45  10                 	db	16
   753  00FF46  28                 	db	40
   754  00FF47  44                 	db	68
   755  00FF48  4C                 	db	76
   756  00FF49  90                 	db	144
   757  00FF4A  90                 	db	144
   758  00FF4B  90                 	db	144
   759  00FF4C  7C                 	db	124
   760  00FF4D  44                 	db	68
   761  00FF4E  64                 	db	100
   762  00FF4F  54                 	db	84
   763  00FF50  4C                 	db	76
   764  00FF51  44                 	db	68
   765  00FF52  00                 	db	0
   766  00FF53  08                 	db	8
   767  00FF54  36                 	db	54
   768  00FF55  41                 	db	65
   769  00FF56  00                 	db	0
   770  00FF57  00                 	db	0
   771  00FF58  00                 	db	0
   772  00FF59  77                 	db	119
   773  00FF5A  00                 	db	0
   774  00FF5B  00                 	db	0
   775  00FF5C  00                 	db	0
   776  00FF5D  41                 	db	65
   777  00FF5E  36                 	db	54
   778  00FF5F  08                 	db	8
   779  00FF60  00                 	db	0
   780  00FF61  02                 	db	2
   781  00FF62  01                 	db	1
   782  00FF63  02                 	db	2
   783  00FF64  04                 	db	4
   784  00FF65  02                 	db	2
   785  00FF66                     __end_of_font2:
   786                           	opt stack 0
   787  00FF66                     _dpowers:
   788                           	opt stack 0
   789  00FF66  0001               	dw	1
   790  00FF68  000A               	dw	10
   791  00FF6A  0064               	dw	100
   792  00FF6C  03E8               	dw	1000
   793  00FF6E  2710               	dw	10000
   794  00FF70                     __end_of_dpowers:
   795                           	opt stack 0
   796  00FF70                     _hexpowers:
   797                           	opt stack 0
   798  00FF70  0001               	dw	1
   799  00FF72  0010               	dw	16
   800  00FF74  0100               	dw	256
   801  00FF76  1000               	dw	4096
   802  00FF78                     __end_of_hexpowers:
   803                           	opt stack 0
   804  0000                     _ADCON1	set	4033
   805  0000                     _CCP2CON	set	4026
   806  0000                     _CCPR2L	set	4027
   807  0000                     _INTCON2bits	set	4081
   808  0000                     _INTCONbits	set	4082
   809  0000                     _OSCCON	set	4051
   810  0000                     _PIE1bits	set	3997
   811  0000                     _PIR1bits	set	3998
   812  0000                     _PIR2bits	set	4001
   813  0000                     _PORTAbits	set	3968
   814  0000                     _PORTBbits	set	3969
   815  0000                     _PORTCbits	set	3970
   816  0000                     _PORTD	set	3971
   817  0000                     _PORTE	set	3972
   818  0000                     _PR2	set	4043
   819  0000                     _RCSTA	set	4011
   820  0000                     _RCSTAbits	set	4011
   821  0000                     _SPBRG	set	4015
   822  0000                     _SPBRGH	set	4016
   823  0000                     _SSPBUF	set	4041
   824  0000                     _SSPCON1	set	4038
   825  0000                     _SSPSTAT	set	4039
   826  0000                     _SSPSTATbits	set	4039
   827  0000                     _T1CON	set	4045
   828  0000                     _T1CONbits	set	4045
   829  0000                     _T2CON	set	4042
   830  0000                     _T3CON	set	4017
   831  0000                     _T3CONbits	set	4017
   832  0000                     _TMR1H	set	4047
   833  0000                     _TMR1L	set	4046
   834  0000                     _TMR3H	set	4019
   835  0000                     _TMR3L	set	4018
   836  0000                     _TRISA	set	3986
   837  0000                     _TRISAbits	set	3986
   838  0000                     _TRISB	set	3987
   839  0000                     _TRISC	set	3988
   840  0000                     _TRISCbits	set	3988
   841  0000                     _TRISD	set	3989
   842  0000                     _TRISE	set	3990
   843  0000                     _TXREG	set	4013
   844  0000                     _TXSTA	set	4012
   845  0000                     _TXSTAbits	set	4012
   846  0000                     _RBPU	set	32655
   847  0000                     _TRMT	set	32097
   848  00FF78                     STR_2:
   849  00FF78  20                 	db	32
   850  00FF79  54                 	db	84	;'T'
   851  00FF7A  65                 	db	101	;'e'
   852  00FF7B  6D                 	db	109	;'m'
   853  00FF7C  70                 	db	112	;'p'
   854  00FF7D  65                 	db	101	;'e'
   855  00FF7E  72                 	db	114	;'r'
   856  00FF7F  61                 	db	97	;'a'
   857  00FF80  74                 	db	116	;'t'
   858  00FF81  75                 	db	117	;'u'
   859  00FF82  72                 	db	114	;'r'
   860  00FF83  65                 	db	101	;'e'
   861  00FF84  20                 	db	32
   862  00FF85  3D                 	db	61	;'='
   863  00FF86  20                 	db	32
   864  00FF87  25                 	db	37
   865  00FF88  64                 	db	100	;'d'
   866  00FF89  20                 	db	32
   867  00FF8A  64                 	db	100	;'d'
   868  00FF8B  65                 	db	101	;'e'
   869  00FF8C  67                 	db	103	;'g'
   870  00FF8D  72                 	db	114	;'r'
   871  00FF8E  65                 	db	101	;'e'
   872  00FF8F  65                 	db	101	;'e'
   873  00FF90  73                 	db	115	;'s'
   874  00FF91  43                 	db	67	;'C'
   875  00FF92  20                 	db	32
   876  00FF93  3D                 	db	61	;'='
   877  00FF94  20                 	db	32
   878  00FF95  25                 	db	37
   879  00FF96  64                 	db	100	;'d'
   880  00FF97  20                 	db	32
   881  00FF98  64                 	db	100	;'d'
   882  00FF99  65                 	db	101	;'e'
   883  00FF9A  67                 	db	103	;'g'
   884  00FF9B  72                 	db	114	;'r'
   885  00FF9C  65                 	db	101	;'e'
   886  00FF9D  65                 	db	101	;'e'
   887  00FF9E  73                 	db	115	;'s'
   888  00FF9F  46                 	db	70	;'F'
   889  00FFA0  0D                 	db	13
   890  00FFA1  0A                 	db	10
   891  00FFA2  00                 	db	0
   892  00FFA3                     STR_1:
   893  00FFA3  25                 	db	37
   894  00FFA4  30                 	db	48	;'0'
   895  00FFA5  32                 	db	50	;'2'
   896  00FFA6  78                 	db	120	;'x'
   897  00FFA7  3A                 	db	58	;':'
   898  00FFA8  25                 	db	37
   899  00FFA9  30                 	db	48	;'0'
   900  00FFAA  32                 	db	50	;'2'
   901  00FFAB  78                 	db	120	;'x'
   902  00FFAC  3A                 	db	58	;':'
   903  00FFAD  25                 	db	37
   904  00FFAE  30                 	db	48	;'0'
   905  00FFAF  32                 	db	50	;'2'
   906  00FFB0  78                 	db	120	;'x'
   907  00FFB1  20                 	db	32
   908  00FFB2  25                 	db	37
   909  00FFB3  30                 	db	48	;'0'
   910  00FFB4  32                 	db	50	;'2'
   911  00FFB5  78                 	db	120	;'x'
   912  00FFB6  2F                 	db	47
   913  00FFB7  25                 	db	37
   914  00FFB8  30                 	db	48	;'0'
   915  00FFB9  32                 	db	50	;'2'
   916  00FFBA  78                 	db	120	;'x'
   917  00FFBB  2F                 	db	47
   918  00FFBC  25                 	db	37
   919  00FFBD  30                 	db	48	;'0'
   920  00FFBE  32                 	db	50	;'2'
   921  00FFBF  78                 	db	120	;'x'
   922  00FFC0  00                 	db	0
   923  00FFC1                     STR_4:
   924  00FFC1  45                 	db	69	;'E'
   925  00FFC2  43                 	db	67	;'C'
   926  00FFC3  45                 	db	69	;'E'
   927  00FFC4  33                 	db	51	;'3'
   928  00FFC5  33                 	db	51	;'3'
   929  00FFC6  30                 	db	48	;'0'
   930  00FFC7  31                 	db	49	;'1'
   931  00FFC8  4C                 	db	76	;'L'
   932  00FFC9  20                 	db	32
   933  00FFCA  46                 	db	70	;'F'
   934  00FFCB  61                 	db	97	;'a'
   935  00FFCC  6C                 	db	108	;'l'
   936  00FFCD  6C                 	db	108	;'l'
   937  00FFCE  20                 	db	32
   938  00FFCF  32                 	db	50	;'2'
   939  00FFD0  32                 	db	50	;'2'
   940  00FFD1  2D                 	db	45
   941  00FFD2  53                 	db	83	;'S'
   942  00FFD3  33                 	db	51	;'3'
   943  00FFD4  00                 	db	0
   944  00FFD5                     STR_6:
   945  00FFD5  30                 	db	48	;'0'
   946  00FFD6  31                 	db	49	;'1'
   947  00FFD7  32                 	db	50	;'2'
   948  00FFD8  33                 	db	51	;'3'
   949  00FFD9  34                 	db	52	;'4'
   950  00FFDA  35                 	db	53	;'5'
   951  00FFDB  36                 	db	54	;'6'
   952  00FFDC  37                 	db	55	;'7'
   953  00FFDD  38                 	db	56	;'8'
   954  00FFDE  39                 	db	57	;'9'
   955  00FFDF  61                 	db	97	;'a'
   956  00FFE0  62                 	db	98	;'b'
   957  00FFE1  63                 	db	99	;'c'
   958  00FFE2  64                 	db	100	;'d'
   959  00FFE3  65                 	db	101	;'e'
   960  00FFE4  66                 	db	102	;'f'
   961  00FFE5  00                 	db	0
   962  00FFE6                     STR_3:
   963  00FFE6  4E                 	db	78	;'N'
   964  00FFE7  45                 	db	69	;'E'
   965  00FFE8  43                 	db	67	;'C'
   966  00FFE9  5F                 	db	95	;'_'
   967  00FFEA  43                 	db	67	;'C'
   968  00FFEB  6F                 	db	111	;'o'
   969  00FFEC  64                 	db	100	;'d'
   970  00FFED  65                 	db	101	;'e'
   971  00FFEE  20                 	db	32
   972  00FFEF  3D                 	db	61	;'='
   973  00FFF0  20                 	db	32
   974  00FFF1  20                 	db	32
   975  00FFF2  25                 	db	37
   976  00FFF3  78                 	db	120	;'x'
   977  00FFF4  0D                 	db	13
   978  00FFF5  0A                 	db	10
   979  00FFF6  00                 	db	0
   980  00FFF7                     STR_5:
   981  00FFF7  4C                 	db	76	;'L'
   982  00FFF8  41                 	db	65	;'A'
   983  00FFF9  42                 	db	66	;'B'
   984  00FFFA  20                 	db	32
   985  00FFFB  31                 	db	49	;'1'
   986  00FFFC  30                 	db	48	;'0'
   987  00FFFD  20                 	db	32
   988  00FFFE  00                 	db	0
   989                           
   990                           ; #config settings
   991  00FFFF  00                 	db	0	; dummy byte at the end
   992  0000                     
   993                           	psect	cinit
   994  0011B6                     __pcinit:
   995                           	opt stack 0
   996  0011B6                     start_initialization:
   997                           	opt stack 0
   998  0011B6                     __initialization:
   999                           	opt stack 0
  1000                           
  1001                           ; Clear objects allocated to BANK0 (31 bytes)
  1002  0011B6  EE00  F0D4         	lfsr	0,__pbssBANK0
  1003  0011BA  0E1F               	movlw	31
  1004  0011BC                     clear_0:
  1005  0011BC  6AEE               	clrf	postinc0,c
  1006  0011BE  06E8               	decf	wreg,f,c
  1007  0011C0  E1FD               	bnz	clear_0
  1008                           
  1009                           ; Clear objects allocated to COMRAM (41 bytes)
  1010  0011C2  EE00  F044         	lfsr	0,__pbssCOMRAM
  1011  0011C6  0E29               	movlw	41
  1012  0011C8                     clear_1:
  1013  0011C8  6AEE               	clrf	postinc0,c
  1014  0011CA  06E8               	decf	wreg,f,c
  1015  0011CC  E1FD               	bnz	clear_1
  1016                           
  1017                           ; Initialize objects allocated to BANK1 (126 bytes)
  1018                           ; load TBLPTR registers with __pidataBANK1
  1019  0011CE  0EBC               	movlw	low __pidataBANK1
  1020  0011D0  6EF6               	movwf	tblptrl,c
  1021  0011D2  0E10               	movlw	high __pidataBANK1
  1022  0011D4  6EF7               	movwf	tblptrh,c
  1023  0011D6  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1024  0011D8  6EF8               	movwf	tblptru,c
  1025  0011DA  EE01  F000         	lfsr	0,__pdataBANK1
  1026  0011DE  EE10 F07E          	lfsr	1,126
  1027  0011E2                     copy_data0:
  1028  0011E2  0009               	tblrd		*+
  1029  0011E4  CFF5 FFEE          	movff	tablat,postinc0
  1030  0011E8  50E5               	movf	postdec1,w,c
  1031  0011EA  50E1               	movf	fsr1l,w,c
  1032  0011EC  E1FA               	bnz	copy_data0
  1033                           
  1034                           ; Initialize objects allocated to BANK0 (84 bytes)
  1035                           ; load TBLPTR registers with __pidataBANK0
  1036  0011EE  0EC6               	movlw	low __pidataBANK0
  1037  0011F0  6EF6               	movwf	tblptrl,c
  1038  0011F2  0E13               	movlw	high __pidataBANK0
  1039  0011F4  6EF7               	movwf	tblptrh,c
  1040  0011F6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1041  0011F8  6EF8               	movwf	tblptru,c
  1042  0011FA  EE00  F080         	lfsr	0,__pdataBANK0
  1043  0011FE  EE10 F054          	lfsr	1,84
  1044  001202                     copy_data1:
  1045  001202  0009               	tblrd		*+
  1046  001204  CFF5 FFEE          	movff	tablat,postinc0
  1047  001208  50E5               	movf	postdec1,w,c
  1048  00120A  50E1               	movf	fsr1l,w,c
  1049  00120C  E1FA               	bnz	copy_data1
  1050                           
  1051                           ; Initialize objects allocated to COMRAM (2 bytes)
  1052                           ; load TBLPTR registers with __pidataCOMRAM
  1053  00120E  0EDE               	movlw	low __pidataCOMRAM
  1054  001210  6EF6               	movwf	tblptrl,c
  1055  001212  0E19               	movlw	high __pidataCOMRAM
  1056  001214  6EF7               	movwf	tblptrh,c
  1057  001216  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1058  001218  6EF8               	movwf	tblptru,c
  1059  00121A  0009               	tblrd		*+	;fetch initializer
  1060  00121C  CFF5 F06D          	movff	tablat,__pdataCOMRAM
  1061  001220  0009               	tblrd		*+	;fetch initializer
  1062  001222  CFF5 F06E          	movff	tablat,__pdataCOMRAM+1
  1063  001226                     end_of_initialization:
  1064                           	opt stack 0
  1065  001226                     __end_of__initialization:
  1066                           	opt stack 0
  1067  001226  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1068  001228  6EF8               	movwf	tblptru,c
  1069  00122A  0100               	movlb	0
  1070  00122C  EFBB  F001         	goto	_main	;jump to C main() function
  1071                           tblptru	equ	0xFF8
  1072                           tblptrh	equ	0xFF7
  1073                           tblptrl	equ	0xFF6
  1074                           tablat	equ	0xFF5
  1075                           postinc0	equ	0xFEE
  1076                           wreg	equ	0xFE8
  1077                           postdec1	equ	0xFE5
  1078                           fsr1l	equ	0xFE1
  1079                           
  1080                           	psect	bssCOMRAM
  1081  000044                     __pbssCOMRAM:
  1082                           	opt stack 0
  1083  000044                     _Nec_code:
  1084                           	opt stack 0
  1085  000044                     	ds	4
  1086  000048                     _Time_Elapsed:
  1087                           	opt stack 0
  1088  000048                     	ds	2
  1089  00004A                     _nbr:
  1090                           	opt stack 0
  1091  00004A                     	ds	2
  1092  00004C                     _nec_ok:
  1093                           	opt stack 0
  1094  00004C                     	ds	2
  1095  00004E                     _txt:
  1096                           	opt stack 0
  1097  00004E                     	ds	2
  1098  000050                     _Nec_code1:
  1099                           	opt stack 0
  1100  000050                     	ds	1
  1101  000051                     _Nec_state:
  1102                           	opt stack 0
  1103  000051                     	ds	1
  1104  000052                     _TempSecond:
  1105                           	opt stack 0
  1106  000052                     	ds	1
  1107  000053                     __tft_type:
  1108                           	opt stack 0
  1109  000053                     	ds	1
  1110  000054                     _alarm_date:
  1111                           	opt stack 0
  1112  000054                     	ds	1
  1113  000055                     _alarm_hour:
  1114                           	opt stack 0
  1115  000055                     	ds	1
  1116  000056                     _alarm_minute:
  1117                           	opt stack 0
  1118  000056                     	ds	1
  1119  000057                     _alarm_second:
  1120                           	opt stack 0
  1121  000057                     	ds	1
  1122  000058                     _bit_count:
  1123                           	opt stack 0
  1124  000058                     	ds	1
  1125  000059                     _colstart:
  1126                           	opt stack 0
  1127  000059                     	ds	1
  1128  00005A                     _day:
  1129                           	opt stack 0
  1130  00005A                     	ds	1
  1131  00005B                     _dow:
  1132                           	opt stack 0
  1133  00005B                     	ds	1
  1134  00005C                     _found:
  1135                           	opt stack 0
  1136  00005C                     	ds	1
  1137  00005D                     _hour:
  1138                           	opt stack 0
  1139  00005D                     	ds	1
  1140  00005E                     _i:
  1141                           	opt stack 0
  1142  00005E                     	ds	1
  1143  00005F                     _minute:
  1144                           	opt stack 0
  1145  00005F                     	ds	1
  1146  000060                     _month:
  1147                           	opt stack 0
  1148  000060                     	ds	1
  1149  000061                     _rowstart:
  1150                           	opt stack 0
  1151  000061                     	ds	1
  1152  000062                     _second:
  1153                           	opt stack 0
  1154  000062                     	ds	1
  1155  000063                     _setup_alarm_hour:
  1156                           	opt stack 0
  1157  000063                     	ds	1
  1158  000064                     _setup_alarm_minute:
  1159                           	opt stack 0
  1160  000064                     	ds	1
  1161  000065                     _setup_alarm_second:
  1162                           	opt stack 0
  1163  000065                     	ds	1
  1164  000066                     _setup_day:
  1165                           	opt stack 0
  1166  000066                     	ds	1
  1167  000067                     _setup_hour:
  1168                           	opt stack 0
  1169  000067                     	ds	1
  1170  000068                     _setup_minute:
  1171                           	opt stack 0
  1172  000068                     	ds	1
  1173  000069                     _setup_month:
  1174                           	opt stack 0
  1175  000069                     	ds	1
  1176  00006A                     _setup_second:
  1177                           	opt stack 0
  1178  00006A                     	ds	1
  1179  00006B                     _setup_year:
  1180                           	opt stack 0
  1181  00006B                     	ds	1
  1182  00006C                     _year:
  1183                           	opt stack 0
  1184  00006C                     	ds	1
  1185                           tblptru	equ	0xFF8
  1186                           tblptrh	equ	0xFF7
  1187                           tblptrl	equ	0xFF6
  1188                           tablat	equ	0xFF5
  1189                           postinc0	equ	0xFEE
  1190                           wreg	equ	0xFE8
  1191                           postdec1	equ	0xFE5
  1192                           fsr1l	equ	0xFE1
  1193                           
  1194                           	psect	dataCOMRAM
  1195  00006D                     __pdataCOMRAM:
  1196                           	opt stack 0
  1197  00006D                     _tempSecond:
  1198                           	opt stack 0
  1199  00006D                     	ds	1
  1200  00006E                     _wrap:
  1201                           	opt stack 0
  1202  00006E                     	ds	1
  1203                           tblptru	equ	0xFF8
  1204                           tblptrh	equ	0xFF7
  1205                           tblptrl	equ	0xFF6
  1206                           tablat	equ	0xFF5
  1207                           postinc0	equ	0xFEE
  1208                           wreg	equ	0xFE8
  1209                           postdec1	equ	0xFE5
  1210                           fsr1l	equ	0xFE1
  1211                           
  1212                           	psect	bssBANK0
  1213  0000D4                     __pbssBANK0:
  1214                           	opt stack 0
  1215  0000D4                     _buffer:
  1216                           	opt stack 0
  1217  0000D4                     	ds	31
  1218                           tblptru	equ	0xFF8
  1219                           tblptrh	equ	0xFF7
  1220                           tblptrl	equ	0xFF6
  1221                           tablat	equ	0xFF5
  1222                           postinc0	equ	0xFEE
  1223                           wreg	equ	0xFE8
  1224                           postdec1	equ	0xFE5
  1225                           fsr1l	equ	0xFE1
  1226                           
  1227                           	psect	dataBANK0
  1228  000080                     __pdataBANK0:
  1229                           	opt stack 0
  1230  000080                     _D1:
  1231                           	opt stack 0
  1232  000080                     	ds	21
  1233  000095                     _D2:
  1234                           	opt stack 0
  1235  000095                     	ds	21
  1236  0000AA                     _D3:
  1237                           	opt stack 0
  1238  0000AA                     	ds	21
  1239  0000BF                     _array1:
  1240                           	opt stack 0
  1241  0000BF                     	ds	21
  1242                           tblptru	equ	0xFF8
  1243                           tblptrh	equ	0xFF7
  1244                           tblptrl	equ	0xFF6
  1245                           tablat	equ	0xFF5
  1246                           postinc0	equ	0xFEE
  1247                           wreg	equ	0xFE8
  1248                           postdec1	equ	0xFE5
  1249                           fsr1l	equ	0xFE1
  1250                           
  1251                           	psect	dataBANK1
  1252  000100                     __pdataBANK1:
  1253                           	opt stack 0
  1254  000100                     _color:
  1255                           	opt stack 0
  1256  000100                     	ds	42
  1257  00012A                     _txt1:
  1258                           	opt stack 0
  1259  00012A                     	ds	84
  1260                           tblptru	equ	0xFF8
  1261                           tblptrh	equ	0xFF7
  1262                           tblptrl	equ	0xFF6
  1263                           tablat	equ	0xFF5
  1264                           postinc0	equ	0xFEE
  1265                           wreg	equ	0xFE8
  1266                           postdec1	equ	0xFE5
  1267                           fsr1l	equ	0xFE1
  1268                           
  1269                           	psect	cstackBANK0
  1270  0000F3                     __pcstackBANK0:
  1271                           	opt stack 0
  1272  0000F3                     drawtext@x:
  1273                           	opt stack 0
  1274                           
  1275                           ; 1 bytes @ 0x0
  1276  0000F3                     	ds	1
  1277  0000F4                     drawtext@textsize:
  1278                           	opt stack 0
  1279                           
  1280                           ; 2 bytes @ 0x1
  1281  0000F4                     	ds	2
  1282  0000F6                     drawtext@i:
  1283                           	opt stack 0
  1284                           
  1285                           ; 2 bytes @ 0x3
  1286  0000F6                     	ds	2
  1287  0000F8                     drawtext@cursor_y:
  1288                           	opt stack 0
  1289                           
  1290                           ; 1 bytes @ 0x5
  1291  0000F8                     	ds	1
  1292  0000F9                     drawtext@cursor_x:
  1293                           	opt stack 0
  1294                           
  1295                           ; 1 bytes @ 0x6
  1296  0000F9                     	ds	1
  1297  0000FA                     main@tempF:
  1298                           	opt stack 0
  1299                           
  1300                           ; 1 bytes @ 0x7
  1301  0000FA                     	ds	1
  1302  0000FB                     main@tempC:
  1303                           	opt stack 0
  1304                           
  1305                           ; 1 bytes @ 0x8
  1306  0000FB                     	ds	1
  1307  0000FC                     main@i:
  1308                           	opt stack 0
  1309                           
  1310                           ; 2 bytes @ 0x9
  1311  0000FC                     	ds	2
  1312  0000FE                     main@found:
  1313                           	opt stack 0
  1314                           
  1315                           ; 1 bytes @ 0xB
  1316  0000FE                     	ds	1
  1317                           tblptru	equ	0xFF8
  1318                           tblptrh	equ	0xFF7
  1319                           tblptrl	equ	0xFF6
  1320                           tablat	equ	0xFF5
  1321                           postinc0	equ	0xFEE
  1322                           wreg	equ	0xFE8
  1323                           postdec1	equ	0xFE5
  1324                           fsr1l	equ	0xFE1
  1325                           
  1326                           	psect	cstackCOMRAM
  1327  000001                     __pcstackCOMRAM:
  1328                           	opt stack 0
  1329  000001                     ??_INT0_isr:
  1330  000001                     
  1331                           ; 1 bytes @ 0x0
  1332  000001                     	ds	2
  1333  000003                     ??_chkisr:
  1334                           
  1335                           ; 0 bytes @ 0x2
  1336  000003                     	ds	14
  1337  000011                     ??_isdigit:
  1338  000011                     ?_strlen:
  1339                           	opt stack 0
  1340  000011                     ?___wmul:
  1341                           	opt stack 0
  1342  000011                     ?___lwdiv:
  1343                           	opt stack 0
  1344  000011                     spiwrite@x:
  1345                           	opt stack 0
  1346  000011                     I2C_Read@ack:
  1347                           	opt stack 0
  1348  000011                     I2C_Write@outByte:
  1349                           	opt stack 0
  1350  000011                     putch@c:
  1351                           	opt stack 0
  1352  000011                     Wait_One_Sec@i:
  1353                           	opt stack 0
  1354  000011                     OpenUSART@spbrg:
  1355                           	opt stack 0
  1356  000011                     ___wmul@multiplier:
  1357                           	opt stack 0
  1358  000011                     ___lwdiv@dividend:
  1359                           	opt stack 0
  1360  000011                     strcpy@to:
  1361                           	opt stack 0
  1362  000011                     strlen@s:
  1363                           	opt stack 0
  1364  000011                     I2C_Init@c:
  1365                           	opt stack 0
  1366                           
  1367                           ; 4 bytes @ 0x10
  1368  000011                     	ds	1
  1369  000012                     spiwrite@spidata:
  1370                           	opt stack 0
  1371  000012                     I2C_Read@n:
  1372                           	opt stack 0
  1373  000012                     I2C_Write@n:
  1374                           	opt stack 0
  1375  000012                     _isdigit$1939:
  1376                           	opt stack 0
  1377                           
  1378                           ; 1 bytes @ 0x11
  1379  000012                     	ds	1
  1380  000013                     ??_strlen:
  1381  000013                     write_command@cmd_:
  1382                           	opt stack 0
  1383  000013                     write_data@data_:
  1384                           	opt stack 0
  1385  000013                     I2C_Read@inByte:
  1386                           	opt stack 0
  1387  000013                     I2C_Write_Cmd_Only@Cmd:
  1388                           	opt stack 0
  1389  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1390                           	opt stack 0
  1391  000013                     DS3231_Setup_Time@Device:
  1392                           	opt stack 0
  1393  000013                     OpenUSART@config:
  1394                           	opt stack 0
  1395  000013                     isdigit@c:
  1396                           	opt stack 0
  1397  000013                     ___wmul@multiplicand:
  1398                           	opt stack 0
  1399  000013                     ___lwdiv@divisor:
  1400                           	opt stack 0
  1401  000013                     strcpy@from:
  1402                           	opt stack 0
  1403                           
  1404                           ; 2 bytes @ 0x12
  1405  000013                     	ds	1
  1406  000014                     ?_DS1621_Read_Temp:
  1407                           	opt stack 0
  1408  000014                     setAddrWindow@y0:
  1409                           	opt stack 0
  1410  000014                     I2C_Write_Cmd_Only@Device:
  1411                           	opt stack 0
  1412  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1413                           	opt stack 0
  1414  000014                     DS3231_Read_Time@Address:
  1415                           	opt stack 0
  1416  000014                     DS3231_Setup_Time@Address:
  1417                           	opt stack 0
  1418                           
  1419                           ; 1 bytes @ 0x13
  1420  000014                     	ds	1
  1421  000015                     setAddrWindow@x1:
  1422                           	opt stack 0
  1423  000015                     I2C_Write_Cmd_Write_Data@Device:
  1424                           	opt stack 0
  1425  000015                     DS3231_Read_Time@Device:
  1426                           	opt stack 0
  1427  000015                     ___lwdiv@counter:
  1428                           	opt stack 0
  1429  000015                     ___wmul@product:
  1430                           	opt stack 0
  1431  000015                     strcpy@cp:
  1432                           	opt stack 0
  1433  000015                     strlen@cp:
  1434                           	opt stack 0
  1435                           
  1436                           ; 2 bytes @ 0x14
  1437  000015                     	ds	1
  1438  000016                     setAddrWindow@y1:
  1439                           	opt stack 0
  1440  000016                     DS1621_Init@Device:
  1441                           	opt stack 0
  1442  000016                     DS1621_Read_Temp@Cmd:
  1443                           	opt stack 0
  1444  000016                     ___lwdiv@quotient:
  1445                           	opt stack 0
  1446                           
  1447                           ; 2 bytes @ 0x15
  1448  000016                     	ds	1
  1449  000017                     ?___awdiv:
  1450                           	opt stack 0
  1451  000017                     setAddrWindow@x0:
  1452                           	opt stack 0
  1453  000017                     DS1621_Read_Temp@Data_Ret:
  1454                           	opt stack 0
  1455  000017                     delay_ms@ms:
  1456                           	opt stack 0
  1457  000017                     ___awdiv@dividend:
  1458                           	opt stack 0
  1459                           
  1460                           ; 2 bytes @ 0x16
  1461  000017                     	ds	1
  1462  000018                     ?___lwmod:
  1463                           	opt stack 0
  1464  000018                     drawPixel@y:
  1465                           	opt stack 0
  1466  000018                     drawFastVLine@y:
  1467                           	opt stack 0
  1468  000018                     fillRectangle@y:
  1469                           	opt stack 0
  1470  000018                     DS1621_Read_Temp@Device:
  1471                           	opt stack 0
  1472  000018                     ___lwmod@dividend:
  1473                           	opt stack 0
  1474                           
  1475                           ; 2 bytes @ 0x17
  1476  000018                     	ds	1
  1477  000019                     ??_delay_ms:
  1478  000019                     drawFastVLine@h:
  1479                           	opt stack 0
  1480  000019                     fillRectangle@w:
  1481                           	opt stack 0
  1482  000019                     drawPixel@color:
  1483                           	opt stack 0
  1484  000019                     ___awdiv@divisor:
  1485                           	opt stack 0
  1486                           
  1487                           ; 2 bytes @ 0x18
  1488  000019                     	ds	1
  1489  00001A                     fillRectangle@h:
  1490                           	opt stack 0
  1491  00001A                     drawFastVLine@color:
  1492                           	opt stack 0
  1493  00001A                     ___lwmod@divisor:
  1494                           	opt stack 0
  1495                           
  1496                           ; 2 bytes @ 0x19
  1497  00001A                     	ds	1
  1498  00001B                     drawPixel@x:
  1499                           	opt stack 0
  1500  00001B                     ___awdiv@counter:
  1501                           	opt stack 0
  1502  00001B                     delay_ms@count:
  1503                           	opt stack 0
  1504  00001B                     fillRectangle@color:
  1505                           	opt stack 0
  1506                           
  1507                           ; 2 bytes @ 0x1A
  1508  00001B                     	ds	1
  1509  00001C                     ??_drawFastVLine:
  1510  00001C                     ___awdiv@sign:
  1511                           	opt stack 0
  1512  00001C                     ___lwmod@counter:
  1513                           	opt stack 0
  1514  00001C                     drawCircle@x0:
  1515                           	opt stack 0
  1516                           
  1517                           ; 2 bytes @ 0x1B
  1518  00001C                     	ds	1
  1519  00001D                     ??_fillRectangle:
  1520  00001D                     ?_printf:
  1521                           	opt stack 0
  1522  00001D                     printf@f:
  1523                           	opt stack 0
  1524  00001D                     ___awdiv@quotient:
  1525                           	opt stack 0
  1526                           
  1527                           ; 2 bytes @ 0x1C
  1528  00001D                     	ds	1
  1529  00001E                     drawCircle@y0:
  1530                           	opt stack 0
  1531                           
  1532                           ; 2 bytes @ 0x1D
  1533  00001E                     	ds	2
  1534  000020                     drawFastVLine@hi:
  1535                           	opt stack 0
  1536  000020                     drawCircle@r:
  1537                           	opt stack 0
  1538                           
  1539                           ; 2 bytes @ 0x1F
  1540  000020                     	ds	1
  1541  000021                     drawFastVLine@lo:
  1542                           	opt stack 0
  1543  000021                     fillRectangle@hi:
  1544                           	opt stack 0
  1545                           
  1546                           ; 1 bytes @ 0x20
  1547  000021                     	ds	1
  1548  000022                     drawFastVLine@x:
  1549                           	opt stack 0
  1550  000022                     fillRectangle@lo:
  1551                           	opt stack 0
  1552  000022                     drawCircle@color:
  1553                           	opt stack 0
  1554                           
  1555                           ; 2 bytes @ 0x21
  1556  000022                     	ds	1
  1557  000023                     fillRect@y:
  1558                           	opt stack 0
  1559  000023                     fillRectangle@x:
  1560                           	opt stack 0
  1561  000023                     fillCircleHelper@x0:
  1562                           	opt stack 0
  1563                           
  1564                           ; 2 bytes @ 0x22
  1565  000023                     	ds	1
  1566  000024                     ??_drawCircle:
  1567  000024                     fillRect@w:
  1568                           	opt stack 0
  1569  000024                     fillScreen@color:
  1570                           	opt stack 0
  1571                           
  1572                           ; 2 bytes @ 0x23
  1573  000024                     	ds	1
  1574  000025                     fillRect@h:
  1575                           	opt stack 0
  1576  000025                     fillCircleHelper@y0:
  1577                           	opt stack 0
  1578                           
  1579                           ; 2 bytes @ 0x24
  1580  000025                     	ds	1
  1581  000026                     fillRect@color:
  1582                           	opt stack 0
  1583  000026                     drawCircle@ddF_x:
  1584                           	opt stack 0
  1585                           
  1586                           ; 2 bytes @ 0x25
  1587  000026                     	ds	1
  1588  000027                     fillCircleHelper@r:
  1589                           	opt stack 0
  1590                           
  1591                           ; 2 bytes @ 0x26
  1592  000027                     	ds	1
  1593  000028                     ??_fillRect:
  1594  000028                     drawCircle@ddF_y:
  1595                           	opt stack 0
  1596                           
  1597                           ; 2 bytes @ 0x27
  1598  000028                     	ds	1
  1599  000029                     fillCircleHelper@cornername:
  1600                           	opt stack 0
  1601                           
  1602                           ; 2 bytes @ 0x28
  1603  000029                     	ds	1
  1604  00002A                     drawCircle@f:
  1605                           	opt stack 0
  1606                           
  1607                           ; 2 bytes @ 0x29
  1608  00002A                     	ds	1
  1609  00002B                     ??_printf:
  1610  00002B                     fillRect@x:
  1611                           	opt stack 0
  1612  00002B                     fillCircleHelper@delta:
  1613                           	opt stack 0
  1614                           
  1615                           ; 2 bytes @ 0x2A
  1616  00002B                     	ds	1
  1617  00002C                     fillRect@i:
  1618                           	opt stack 0
  1619  00002C                     drawCircle@x:
  1620                           	opt stack 0
  1621                           
  1622                           ; 2 bytes @ 0x2B
  1623  00002C                     	ds	1
  1624  00002D                     fillCircleHelper@color:
  1625                           	opt stack 0
  1626                           
  1627                           ; 2 bytes @ 0x2C
  1628  00002D                     	ds	1
  1629  00002E                     drawChar@y:
  1630                           	opt stack 0
  1631  00002E                     drawCircle@y:
  1632                           	opt stack 0
  1633                           
  1634                           ; 2 bytes @ 0x2D
  1635  00002E                     	ds	1
  1636  00002F                     ??_fillCircleHelper:
  1637  00002F                     drawChar@c:
  1638                           	opt stack 0
  1639  00002F                     printf@idx:
  1640                           	opt stack 0
  1641                           
  1642                           ; 1 bytes @ 0x2E
  1643  00002F                     	ds	1
  1644  000030                     drawChar@color:
  1645                           	opt stack 0
  1646  000030                     printf@ap:
  1647                           	opt stack 0
  1648                           
  1649                           ; 2 bytes @ 0x2F
  1650  000030                     	ds	1
  1651  000031                     fillCircleHelper@ddF_x:
  1652                           	opt stack 0
  1653                           
  1654                           ; 2 bytes @ 0x30
  1655  000031                     	ds	1
  1656  000032                     printf@prec:
  1657                           	opt stack 0
  1658  000032                     drawChar@bg:
  1659                           	opt stack 0
  1660                           
  1661                           ; 2 bytes @ 0x31
  1662  000032                     	ds	1
  1663  000033                     fillCircleHelper@ddF_y:
  1664                           	opt stack 0
  1665  000033                     printf@val:
  1666                           	opt stack 0
  1667                           
  1668                           ; 2 bytes @ 0x32
  1669  000033                     	ds	1
  1670  000034                     drawChar@size:
  1671                           	opt stack 0
  1672                           
  1673                           ; 1 bytes @ 0x33
  1674  000034                     	ds	1
  1675  000035                     drawChar@line:
  1676                           	opt stack 0
  1677  000035                     printf@flag:
  1678                           	opt stack 0
  1679  000035                     fillCircleHelper@f:
  1680                           	opt stack 0
  1681                           
  1682                           ; 2 bytes @ 0x34
  1683  000035                     	ds	1
  1684  000036                     drawChar@x:
  1685                           	opt stack 0
  1686  000036                     printf@width:
  1687                           	opt stack 0
  1688                           
  1689                           ; 2 bytes @ 0x35
  1690  000036                     	ds	1
  1691  000037                     drawChar@j:
  1692                           	opt stack 0
  1693  000037                     fillCircleHelper@x:
  1694                           	opt stack 0
  1695                           
  1696                           ; 2 bytes @ 0x36
  1697  000037                     	ds	1
  1698  000038                     drawChar@i:
  1699                           	opt stack 0
  1700  000038                     printf@c:
  1701                           	opt stack 0
  1702                           
  1703                           ; 1 bytes @ 0x37
  1704  000038                     	ds	1
  1705  000039                     drawtext@y:
  1706                           	opt stack 0
  1707  000039                     fillCircleHelper@y:
  1708                           	opt stack 0
  1709                           
  1710                           ; 2 bytes @ 0x38
  1711  000039                     	ds	1
  1712  00003A                     drawtext@_text:
  1713                           	opt stack 0
  1714                           
  1715                           ; 2 bytes @ 0x39
  1716  00003A                     	ds	1
  1717  00003B                     fillCircle@x0:
  1718                           	opt stack 0
  1719                           
  1720                           ; 2 bytes @ 0x3A
  1721  00003B                     	ds	1
  1722  00003C                     drawtext@color:
  1723                           	opt stack 0
  1724                           
  1725                           ; 2 bytes @ 0x3B
  1726  00003C                     	ds	1
  1727  00003D                     fillCircle@y0:
  1728                           	opt stack 0
  1729                           
  1730                           ; 2 bytes @ 0x3C
  1731  00003D                     	ds	1
  1732  00003E                     drawtext@bg:
  1733                           	opt stack 0
  1734                           
  1735                           ; 2 bytes @ 0x3D
  1736  00003E                     	ds	1
  1737  00003F                     fillCircle@r:
  1738                           	opt stack 0
  1739                           
  1740                           ; 2 bytes @ 0x3E
  1741  00003F                     	ds	1
  1742  000040                     drawtext@size:
  1743                           	opt stack 0
  1744                           
  1745                           ; 1 bytes @ 0x3F
  1746  000040                     	ds	1
  1747  000041                     ??_drawtext:
  1748  000041                     fillCircle@color:
  1749                           	opt stack 0
  1750                           
  1751                           ; 2 bytes @ 0x40
  1752  000041                     	ds	2
  1753  000043                     ??_main:
  1754                           
  1755                           ; 0 bytes @ 0x42
  1756  000043                     	ds	1
  1757                           tblptru	equ	0xFF8
  1758                           tblptrh	equ	0xFF7
  1759                           tblptrl	equ	0xFF6
  1760                           tablat	equ	0xFF5
  1761                           postinc0	equ	0xFEE
  1762                           wreg	equ	0xFE8
  1763                           postdec1	equ	0xFE5
  1764                           fsr1l	equ	0xFE1
  1765                           
  1766 ;;
  1767 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1768 ;;
  1769 ;; *************** function _main *****************
  1770 ;; Defined at:
  1771 ;;		line 139 in file "Lab11p4.c"
  1772 ;; Parameters:    Size  Location     Type
  1773 ;;		None
  1774 ;; Auto vars:     Size  Location     Type
  1775 ;;  i               2    9[BANK0 ] int 
  1776 ;;  found           1   11[BANK0 ] unsigned char 
  1777 ;;  tempC           1    8[BANK0 ] char 
  1778 ;;  tempF           1    7[BANK0 ] char 
  1779 ;; Return value:  Size  Location     Type
  1780 ;;		None               void
  1781 ;; Registers used:
  1782 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1783 ;; Tracked objects:
  1784 ;;		On entry : 0/0
  1785 ;;		On exit  : 0/0
  1786 ;;		Unchanged: 0/0
  1787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1789 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1790 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1791 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1792 ;;Total ram usage:        6 bytes
  1793 ;; Hardware stack levels required when called:   12
  1794 ;; This function calls:
  1795 ;;		_Activate_Buzzer
  1796 ;;		_DS1621_Read_Temp
  1797 ;;		_DS3231_Read_Time
  1798 ;;		_DS3231_Setup_Time
  1799 ;;		_Deactivate_Buzzer
  1800 ;;		_Do_Init
  1801 ;;		_Wait_One_Sec
  1802 ;;		___awdiv
  1803 ;;		___wmul
  1804 ;;		_drawCircle
  1805 ;;		_drawtext
  1806 ;;		_fillCircle
  1807 ;;		_printf
  1808 ;; This function is called by:
  1809 ;;		Startup code after reset
  1810 ;; This function uses a non-reentrant model
  1811 ;;
  1812                           
  1813                           	psect	text0
  1814  000376                     __ptext0:
  1815                           	opt stack 0
  1816  000376                     _main:
  1817                           	opt stack 19
  1818                           
  1819                           ;Lab11p4.c: 141: Do_Init();
  1820                           
  1821                           ;incstack = 0
  1822  000376  ECF5  F00A         	call	_Do_Init	;wreg free
  1823  00037A  D000               	goto	l5347
  1824  00037C                     l5347:
  1825                           
  1826                           ;Lab11p4.c: 153: {
  1827                           ;Lab11p4.c: 155: DS3231_Read_Time();
  1828  00037C  EC83  F009         	call	_DS3231_Read_Time	;wreg free
  1829                           
  1830                           ;Lab11p4.c: 156: if(tempSecond != second)
  1831  000380  5062               	movf	_second,w,c
  1832  000382  186D               	xorwf	_tempSecond,w,c
  1833  000384  B4D8               	btfsc	status,2,c
  1834  000386  D04C               	goto	l5361
  1835                           
  1836                           ;Lab11p4.c: 157: {
  1837                           ;Lab11p4.c: 158: tempSecond = second;
  1838  000388  C062  F06D         	movff	_second,_tempSecond
  1839                           
  1840                           ;Lab11p4.c: 159: signed char tempC = DS1621_Read_Temp();
  1841  00038C  EC74  F00B         	call	_DS1621_Read_Temp	;wreg free
  1842  000390  5014               	movf	?_DS1621_Read_Temp,w,c
  1843  000392  0100               	movlb	0	; () banked
  1844  000394  6FFB               	movwf	main@tempC& (0+255),b
  1845                           
  1846                           ; BSR set to: 0
  1847                           ;Lab11p4.c: 160: signed char tempF = (tempC * 9 / 5) + 32;
  1848  000396  0100               	movlb	0	; () banked
  1849  000398  51FB               	movf	main@tempC& (0+255),w,b
  1850  00039A  6E11               	movwf	___wmul@multiplier,c
  1851  00039C  6A12               	clrf	___wmul@multiplier+1,c
  1852  00039E  BE11               	btfsc	___wmul@multiplier,7,c
  1853  0003A0  0612               	decf	___wmul@multiplier+1,f,c
  1854  0003A2  0E00               	movlw	0
  1855  0003A4  6E14               	movwf	___wmul@multiplicand+1,c
  1856  0003A6  0E09               	movlw	9
  1857  0003A8  6E13               	movwf	___wmul@multiplicand,c
  1858  0003AA  ECF0  F00B         	call	___wmul	;wreg free
  1859  0003AE  C011  F017         	movff	?___wmul,___awdiv@dividend
  1860  0003B2  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  1861  0003B6  0E00               	movlw	0
  1862  0003B8  6E1A               	movwf	___awdiv@divisor+1,c
  1863  0003BA  0E05               	movlw	5
  1864  0003BC  6E19               	movwf	___awdiv@divisor,c
  1865  0003BE  EC88  F007         	call	___awdiv	;wreg free
  1866  0003C2  5017               	movf	?___awdiv,w,c
  1867  0003C4  0F20               	addlw	32
  1868  0003C6  0100               	movlb	0	; () banked
  1869  0003C8  6FFA               	movwf	main@tempF& (0+255),b
  1870                           
  1871                           ; BSR set to: 0
  1872                           ;Lab11p4.c: 161: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,ye
      +                          ar);
  1873  0003CA  0EA3               	movlw	low STR_1
  1874  0003CC  6E1D               	movwf	printf@f,c
  1875  0003CE  0EFF               	movlw	high STR_1
  1876  0003D0  6E1E               	movwf	printf@f+1,c
  1877  0003D2  C05D  F01F         	movff	_hour,?_printf+2
  1878  0003D6  6A20               	clrf	?_printf+3,c
  1879  0003D8  C05F  F021         	movff	_minute,?_printf+4
  1880  0003DC  6A22               	clrf	?_printf+5,c
  1881  0003DE  C062  F023         	movff	_second,?_printf+6
  1882  0003E2  6A24               	clrf	?_printf+7,c
  1883  0003E4  C060  F025         	movff	_month,?_printf+8
  1884  0003E8  6A26               	clrf	?_printf+9,c
  1885  0003EA  C05A  F027         	movff	_day,?_printf+10
  1886  0003EE  6A28               	clrf	?_printf+11,c
  1887  0003F0  C06C  F029         	movff	_year,?_printf+12
  1888  0003F4  6A2A               	clrf	?_printf+13,c
  1889  0003F6  EC0E  F000         	call	_printf	;wreg free
  1890                           
  1891                           ;Lab11p4.c: 162: printf (" Temperature = %d degreesC = %d degreesF\r\n", tempC, tempF);
  1892  0003FA  0E78               	movlw	low STR_2
  1893  0003FC  6E1D               	movwf	printf@f,c
  1894  0003FE  0EFF               	movlw	high STR_2
  1895  000400  6E1E               	movwf	printf@f+1,c
  1896  000402  0100               	movlb	0	; () banked
  1897  000404  51FB               	movf	main@tempC& (0+255),w,b
  1898  000406  6E1F               	movwf	?_printf+2,c
  1899  000408  6A20               	clrf	?_printf+3,c
  1900  00040A  BE1F               	btfsc	?_printf+2,7,c
  1901  00040C  0620               	decf	?_printf+3,f,c
  1902  00040E  0100               	movlb	0	; () banked
  1903  000410  51FA               	movf	main@tempF& (0+255),w,b
  1904  000412  6E21               	movwf	?_printf+4,c
  1905  000414  6A22               	clrf	?_printf+5,c
  1906  000416  BE21               	btfsc	?_printf+4,7,c
  1907  000418  0622               	decf	?_printf+5,f,c
  1908  00041A  EC0E  F000         	call	_printf	;wreg free
  1909  00041E  D000               	goto	l5361
  1910  000420                     l5361:
  1911                           
  1912                           ;Lab11p4.c: 163: }
  1913                           ;Lab11p4.c: 165: if (nec_ok == 1)
  1914  000420  044C               	decf	_nec_ok,w,c
  1915  000422  104D               	iorwf	_nec_ok+1,w,c
  1916  000424  A4D8               	btfss	status,2,c
  1917  000426  D7AA               	goto	l5347
  1918                           
  1919                           ;Lab11p4.c: 166: {
  1920                           ;Lab11p4.c: 168: nec_ok = 0;
  1921  000428  0E00               	movlw	0
  1922  00042A  6E4D               	movwf	_nec_ok+1,c
  1923  00042C  0E00               	movlw	0
  1924  00042E  6E4C               	movwf	_nec_ok,c
  1925                           
  1926                           ;Lab11p4.c: 171: printf ("NEC_Code =  %x\r\n", Nec_code1);
  1927  000430  0EE6               	movlw	low STR_3
  1928  000432  6E1D               	movwf	printf@f,c
  1929  000434  0EFF               	movlw	high STR_3
  1930  000436  6E1E               	movwf	printf@f+1,c
  1931  000438  C050  F01F         	movff	_Nec_code1,?_printf+2
  1932  00043C  6A20               	clrf	?_printf+3,c
  1933  00043E  EC0E  F000         	call	_printf	;wreg free
  1934                           
  1935                           ;Lab11p4.c: 172: INTCONbits.INT0IE = 1;
  1936  000442  88F2               	bsf	intcon,4,c	;volatile
  1937                           
  1938                           ;Lab11p4.c: 173: INTCON2bits.INTEDG0 = 0;
  1939  000444  9CF1               	bcf	intcon2,6,c	;volatile
  1940                           
  1941                           ;Lab11p4.c: 175: if(Nec_code1== 0x7a) DS3231_Setup_Time();
  1942  000446  0E7A               	movlw	122
  1943  000448  1850               	xorwf	_Nec_code1,w,c
  1944  00044A  A4D8               	btfss	status,2,c
  1945  00044C  D003               	goto	l5375
  1946  00044E  EC50  F009         	call	_DS3231_Setup_Time	;wreg free
  1947  000452  D000               	goto	l5375
  1948  000454                     l5375:
  1949                           
  1950                           ;Lab11p4.c: 177: char found = 0xff;
  1951  000454  0100               	movlb	0	; () banked
  1952  000456  69FE               	setf	main@found& (0+255),b
  1953                           
  1954                           ; BSR set to: 0
  1955                           ;Lab11p4.c: 179: for (int i = 0; i < 21; i++)
  1956  000458  0E00               	movlw	0
  1957  00045A  0100               	movlb	0	; () banked
  1958  00045C  6FFD               	movwf	(main@i+1)& (0+255),b
  1959  00045E  0E00               	movlw	0
  1960  000460  6FFC               	movwf	main@i& (0+255),b
  1961  000462                     l5379:
  1962                           
  1963                           ; BSR set to: 0
  1964  000462  0100               	movlb	0	; () banked
  1965  000464  BFFD               	btfsc	(main@i+1)& (0+255),7,b
  1966  000466  D00A               	goto	l5383
  1967  000468  0100               	movlb	0	; () banked
  1968  00046A  51FD               	movf	(main@i+1)& (0+255),w,b
  1969  00046C  E11B               	bnz	l5391
  1970  00046E  0E15               	movlw	21
  1971  000470  0100               	movlb	0	; () banked
  1972  000472  5DFC               	subwf	main@i& (0+255),w,b
  1973  000474  B0D8               	btfsc	status,0,c
  1974  000476  D016               	goto	l5391
  1975  000478  D001               	goto	l5383
  1976                           
  1977                           ; BSR set to: 0
  1978  00047A  D014               	goto	l5391
  1979  00047C                     l5383:
  1980                           
  1981                           ; BSR set to: 0
  1982                           ;Lab11p4.c: 180: {
  1983                           ;Lab11p4.c: 181: if (array1[i] == Nec_code1)
  1984  00047C  0EBF               	movlw	low _array1
  1985  00047E  0100               	movlb	0	; () banked
  1986  000480  25FC               	addwf	main@i& (0+255),w,b
  1987  000482  6ED9               	movwf	fsr2l,c
  1988  000484  0E00               	movlw	high _array1
  1989  000486  0100               	movlb	0	; () banked
  1990  000488  21FD               	addwfc	(main@i+1)& (0+255),w,b
  1991  00048A  6EDA               	movwf	fsr2h,c
  1992  00048C  5050               	movf	_Nec_code1,w,c
  1993  00048E  18DE               	xorwf	postinc2,w,c
  1994  000490  A4D8               	btfss	status,2,c
  1995  000492  D003               	goto	l5387
  1996                           
  1997                           ; BSR set to: 0
  1998                           ;Lab11p4.c: 182: {
  1999                           ;Lab11p4.c: 183: found = i;
  2000  000494  C0FC  F0FE         	movff	main@i,main@found
  2001                           
  2002                           ;Lab11p4.c: 184: break;
  2003  000498  D005               	goto	l5391
  2004  00049A                     l5387:
  2005                           
  2006                           ; BSR set to: 0
  2007  00049A  0100               	movlb	0	; () banked
  2008  00049C  4BFC               	infsnz	main@i& (0+255),f,b
  2009  00049E  2BFD               	incf	(main@i+1)& (0+255),f,b
  2010  0004A0  D7E0               	goto	l5379
  2011                           
  2012                           ; BSR set to: 0
  2013  0004A2  D000               	goto	l5391
  2014  0004A4                     l5391:
  2015                           
  2016                           ; BSR set to: 0
  2017                           ;Lab11p4.c: 185: }
  2018                           ;Lab11p4.c: 187: }
  2019                           ;Lab11p4.c: 189: if (found != 0xff)
  2020  0004A4  0100               	movlb	0	; () banked
  2021  0004A6  29FE               	incf	main@found& (0+255),w,b
  2022  0004A8  B4D8               	btfsc	status,2,c
  2023  0004AA  D768               	goto	l5347
  2024                           
  2025                           ; BSR set to: 0
  2026                           ;Lab11p4.c: 190: {
  2027                           ;Lab11p4.c: 192: PORTE = D2[found];
  2028  0004AC  0100               	movlb	0	; () banked
  2029  0004AE  51FE               	movf	main@found& (0+255),w,b
  2030  0004B0  0D01               	mullw	1
  2031  0004B2  0E95               	movlw	low _D2
  2032  0004B4  24F3               	addwf	prodl,w,c
  2033  0004B6  6ED9               	movwf	fsr2l,c
  2034  0004B8  0E00               	movlw	high _D2
  2035  0004BA  20F4               	addwfc	prodh,w,c
  2036  0004BC  6EDA               	movwf	fsr2h,c
  2037  0004BE  50DF               	movf	indf2,w,c
  2038  0004C0  6E84               	movwf	3972,c	;volatile
  2039                           
  2040                           ;Lab11p4.c: 193: PORTD = D3[found] | D1[found];
  2041  0004C2  0100               	movlb	0	; () banked
  2042  0004C4  51FE               	movf	main@found& (0+255),w,b
  2043  0004C6  0D01               	mullw	1
  2044  0004C8  0E80               	movlw	low _D1
  2045  0004CA  24F3               	addwf	prodl,w,c
  2046  0004CC  6ED9               	movwf	fsr2l,c
  2047  0004CE  0E00               	movlw	high _D1
  2048  0004D0  20F4               	addwfc	prodh,w,c
  2049  0004D2  6EDA               	movwf	fsr2h,c
  2050  0004D4  50DF               	movf	indf2,w,c
  2051  0004D6  6E43               	movwf	??_main& (0+255),c
  2052  0004D8  0100               	movlb	0	; () banked
  2053  0004DA  51FE               	movf	main@found& (0+255),w,b
  2054  0004DC  0D01               	mullw	1
  2055  0004DE  0EAA               	movlw	low _D3
  2056  0004E0  24F3               	addwf	prodl,w,c
  2057  0004E2  6ED9               	movwf	fsr2l,c
  2058  0004E4  0E00               	movlw	high _D3
  2059  0004E6  20F4               	addwfc	prodh,w,c
  2060  0004E8  6EDA               	movwf	fsr2h,c
  2061  0004EA  50DF               	movf	indf2,w,c
  2062  0004EC  1043               	iorwf	??_main,w,c
  2063  0004EE  6E83               	movwf	3971,c	;volatile
  2064                           
  2065                           ; BSR set to: 0
  2066                           ;Lab11p4.c: 198: fillCircle(60, 80, 20, color[found]);
  2067  0004F0  0E00               	movlw	0
  2068  0004F2  6E3C               	movwf	fillCircle@x0+1,c
  2069  0004F4  0E3C               	movlw	60
  2070  0004F6  6E3B               	movwf	fillCircle@x0,c
  2071  0004F8  0E00               	movlw	0
  2072  0004FA  6E3E               	movwf	fillCircle@y0+1,c
  2073  0004FC  0E50               	movlw	80
  2074  0004FE  6E3D               	movwf	fillCircle@y0,c
  2075  000500  0E00               	movlw	0
  2076  000502  6E40               	movwf	fillCircle@r+1,c
  2077  000504  0E14               	movlw	20
  2078  000506  6E3F               	movwf	fillCircle@r,c
  2079  000508  0100               	movlb	0	; () banked
  2080  00050A  51FE               	movf	main@found& (0+255),w,b
  2081  00050C  0D02               	mullw	2
  2082  00050E  0E00               	movlw	low _color
  2083  000510  24F3               	addwf	prodl,w,c
  2084  000512  6ED9               	movwf	fsr2l,c
  2085  000514  0E01               	movlw	high _color
  2086  000516  20F4               	addwfc	prodh,w,c
  2087  000518  6EDA               	movwf	fsr2h,c
  2088  00051A  CFDE F041          	movff	postinc2,fillCircle@color
  2089  00051E  CFDD F042          	movff	postdec2,fillCircle@color+1
  2090  000522  EC0D  F00A         	call	_fillCircle	;wreg free
  2091                           
  2092                           ;Lab11p4.c: 199: drawCircle(60, 80, 20, 0xFFFF);
  2093  000526  0E00               	movlw	0
  2094  000528  6E1D               	movwf	drawCircle@x0+1,c
  2095  00052A  0E3C               	movlw	60
  2096  00052C  6E1C               	movwf	drawCircle@x0,c
  2097  00052E  0E00               	movlw	0
  2098  000530  6E1F               	movwf	drawCircle@y0+1,c
  2099  000532  0E50               	movlw	80
  2100  000534  6E1E               	movwf	drawCircle@y0,c
  2101  000536  0E00               	movlw	0
  2102  000538  6E21               	movwf	drawCircle@r+1,c
  2103  00053A  0E14               	movlw	20
  2104  00053C  6E20               	movwf	drawCircle@r,c
  2105  00053E  0EFF               	movlw	255
  2106  000540  6E23               	movwf	drawCircle@color+1,c
  2107  000542  6822               	setf	drawCircle@color,c
  2108  000544  ECC4  F002         	call	_drawCircle	;wreg free
  2109                           
  2110                           ;Lab11p4.c: 200: drawtext(52, 77, txt1[found],
  2111                           ;Lab11p4.c: 201: 0xFFFF, 0x0000,1);
  2112  000548  0E4D               	movlw	77
  2113  00054A  6E39               	movwf	drawtext@y,c
  2114  00054C  0100               	movlb	0	; () banked
  2115  00054E  51FE               	movf	main@found& (0+255),w,b
  2116  000550  0D04               	mullw	4
  2117  000552  0E2A               	movlw	low _txt1
  2118  000554  24F3               	addwf	prodl,w,c
  2119  000556  6E3A               	movwf	drawtext@_text,c
  2120  000558  0E01               	movlw	high _txt1
  2121  00055A  20F4               	addwfc	prodh,w,c
  2122  00055C  6E3B               	movwf	drawtext@_text+1,c
  2123  00055E  0EFF               	movlw	255
  2124  000560  6E3D               	movwf	drawtext@color+1,c
  2125  000562  683C               	setf	drawtext@color,c
  2126  000564  0E00               	movlw	0
  2127  000566  6E3F               	movwf	drawtext@bg+1,c
  2128  000568  0E00               	movlw	0
  2129  00056A  6E3E               	movwf	drawtext@bg,c
  2130  00056C  0E01               	movlw	1
  2131  00056E  6E40               	movwf	drawtext@size,c
  2132  000570  0E34               	movlw	52
  2133  000572  EC1C  F006         	call	_drawtext
  2134                           
  2135                           ;Lab11p4.c: 203: Activate_Buzzer();
  2136  000576  ECA4  F00C         	call	_Activate_Buzzer	;wreg free
  2137                           
  2138                           ;Lab11p4.c: 204: Wait_One_Sec();
  2139  00057A  EC04  F00C         	call	_Wait_One_Sec	;wreg free
  2140                           
  2141                           ;Lab11p4.c: 205: Deactivate_Buzzer();
  2142  00057E  ECDF  F00C         	call	_Deactivate_Buzzer	;wreg free
  2143  000582  D6FC               	goto	l5347
  2144  000584  EF0C  F000         	goto	start
  2145  000588                     __end_of_main:
  2146                           	opt stack 0
  2147                           tblptru	equ	0xFF8
  2148                           tblptrh	equ	0xFF7
  2149                           tblptrl	equ	0xFF6
  2150                           tablat	equ	0xFF5
  2151                           prodh	equ	0xFF4
  2152                           prodl	equ	0xFF3
  2153                           intcon	equ	0xFF2
  2154                           intcon2	equ	0xFF1
  2155                           postinc0	equ	0xFEE
  2156                           wreg	equ	0xFE8
  2157                           postdec1	equ	0xFE5
  2158                           fsr1l	equ	0xFE1
  2159                           indf2	equ	0xFDF
  2160                           postinc2	equ	0xFDE
  2161                           postdec2	equ	0xFDD
  2162                           fsr2h	equ	0xFDA
  2163                           fsr2l	equ	0xFD9
  2164                           status	equ	0xFD8
  2165                           
  2166 ;; *************** function _printf *****************
  2167 ;; Defined at:
  2168 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2169 ;; Parameters:    Size  Location     Type
  2170 ;;  f               2   28[COMRAM] PTR const unsigned char 
  2171 ;;		 -> STR_3(17), STR_2(43), STR_1(30), 
  2172 ;; Auto vars:     Size  Location     Type
  2173 ;;  idx             1   46[COMRAM] unsigned char 
  2174 ;;  tmpval          4    0        struct .
  2175 ;;  cp              3    0        PTR const unsigned char 
  2176 ;;  width           2   53[COMRAM] int 
  2177 ;;  val             2   50[COMRAM] unsigned int 
  2178 ;;  ap              2   47[COMRAM] PTR void [1]
  2179 ;;		 -> ?_printf(2), 
  2180 ;;  len             2    0        unsigned int 
  2181 ;;  c               1   55[COMRAM] char 
  2182 ;;  flag            1   52[COMRAM] unsigned char 
  2183 ;;  prec            1   49[COMRAM] char 
  2184 ;; Return value:  Size  Location     Type
  2185 ;;                  2   28[COMRAM] int 
  2186 ;; Registers used:
  2187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2188 ;; Tracked objects:
  2189 ;;		On entry : 0/0
  2190 ;;		On exit  : 0/0
  2191 ;;		Unchanged: 0/0
  2192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2193 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2194 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2195 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2196 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2197 ;;Total ram usage:       28 bytes
  2198 ;; Hardware stack levels used:    1
  2199 ;; Hardware stack levels required when called:    4
  2200 ;; This function calls:
  2201 ;;		___lwdiv
  2202 ;;		___lwmod
  2203 ;;		___wmul
  2204 ;;		_isdigit
  2205 ;;		_putch
  2206 ;; This function is called by:
  2207 ;;		_main
  2208 ;; This function uses a non-reentrant model
  2209 ;;
  2210                           
  2211                           	psect	text1
  2212  00001C                     __ptext1:
  2213                           	opt stack 0
  2214  00001C                     _printf:
  2215                           	opt stack 26
  2216                           
  2217                           ;doprnt.c: 466: va_list ap;
  2218                           ;doprnt.c: 499: signed char c;
  2219                           ;doprnt.c: 501: int width;
  2220                           ;doprnt.c: 506: signed char prec;
  2221                           ;doprnt.c: 508: unsigned char flag;
  2222                           ;doprnt.c: 523: union {
  2223                           ;doprnt.c: 524: unsigned long vd;
  2224                           ;doprnt.c: 525: double integ;
  2225                           ;doprnt.c: 526: } tmpval;
  2226                           ;doprnt.c: 528: unsigned int val;
  2227                           ;doprnt.c: 529: unsigned len;
  2228                           ;doprnt.c: 530: const char * cp;
  2229                           ;doprnt.c: 533: *ap = __va_start();
  2230                           
  2231                           ;incstack = 0
  2232  00001C  0E1F               	movlw	low (?_printf+2)
  2233  00001E  6E30               	movwf	printf@ap,c
  2234  000020  0E00               	movlw	high (?_printf+2)
  2235  000022  6E31               	movwf	printf@ap+1,c
  2236                           
  2237                           ;doprnt.c: 536: while(c = *f++) {
  2238  000024  D199               	goto	l5021
  2239  000026                     l4895:
  2240                           
  2241                           ;doprnt.c: 538: if(c != '%')
  2242  000026  0E25               	movlw	37
  2243  000028  1838               	xorwf	printf@c,w,c
  2244  00002A  B4D8               	btfsc	status,2,c
  2245  00002C  D004               	goto	l4899
  2246                           
  2247                           ;doprnt.c: 540: {
  2248                           ;doprnt.c: 541: (putch(c) );
  2249  00002E  5038               	movf	printf@c,w,c
  2250  000030  ECBD  F00C         	call	_putch
  2251                           
  2252                           ;doprnt.c: 542: continue;
  2253  000034  D191               	goto	l5021
  2254  000036                     l4899:
  2255                           
  2256                           ;doprnt.c: 543: }
  2257                           ;doprnt.c: 546: width = 0;
  2258  000036  0E00               	movlw	0
  2259  000038  6E37               	movwf	printf@width+1,c
  2260  00003A  0E00               	movlw	0
  2261  00003C  6E36               	movwf	printf@width,c
  2262                           
  2263                           ;doprnt.c: 548: flag = 0;
  2264  00003E  0E00               	movlw	0
  2265  000040  6E35               	movwf	printf@flag,c
  2266                           
  2267                           ;doprnt.c: 551: switch(*f) {
  2268                           
  2269                           ;doprnt.c: 550: for(;;) {
  2270  000042  D005               	goto	l4905
  2271  000044                     l4901:
  2272                           
  2273                           ;doprnt.c: 580: flag |= 0x04;
  2274  000044  8435               	bsf	printf@flag,2,c
  2275                           
  2276                           ;doprnt.c: 581: f++;
  2277  000046  4A1D               	infsnz	printf@f,f,c
  2278  000048  2A1E               	incf	printf@f+1,f,c
  2279                           
  2280                           ;doprnt.c: 582: continue;
  2281  00004A  D001               	goto	l4905
  2282                           
  2283                           ;doprnt.c: 584: }
  2284  00004C  D00B               	goto	l4907
  2285  00004E                     l4905:
  2286  00004E  C01D  FFF6         	movff	printf@f,tblptrl
  2287  000052  C01E  FFF7         	movff	printf@f+1,tblptrh
  2288  000056                     	if	0	;tblptru may be non-zero
  2289  000056                     	endif
  2290  000056                     	if	0	;tblptru may be non-zero
  2291  000056                     	endif
  2292  000056  0008               	tblrd		*
  2293  000058  50F5               	movf	tablat,w,c
  2294                           
  2295                           ; Switch size 1, requested type "space"
  2296                           ; Number of cases is 1, Range of values is 48 to 48
  2297                           ; switch strategies available:
  2298                           ; Name         Instructions Cycles
  2299                           ; simple_byte            4     3 (average)
  2300                           ;	Chosen strategy is simple_byte
  2301  00005A  0A30               	xorlw	48	; case 48
  2302  00005C  B4D8               	btfsc	status,2,c
  2303  00005E  D7F2               	goto	l4901
  2304                           
  2305                           ;doprnt.c: 585: break;
  2306  000060  D001               	goto	l4907
  2307                           
  2308                           ;doprnt.c: 586: }
  2309  000062  D7F5               	goto	l4905
  2310  000064                     l4907:
  2311                           
  2312                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2313  000064  C01D  FFF6         	movff	printf@f,tblptrl
  2314  000068  C01E  FFF7         	movff	printf@f+1,tblptrh
  2315  00006C                     	if	0	;tblptru may be non-zero
  2316  00006C                     	endif
  2317  00006C                     	if	0	;tblptru may be non-zero
  2318  00006C                     	endif
  2319  00006C  0008               	tblrd		*
  2320  00006E  50F5               	movf	tablat,w,c
  2321  000070  EC16  F00C         	call	_isdigit
  2322  000074  A0D8               	btfss	status,0,c
  2323  000076  D03B               	goto	l4923
  2324                           
  2325                           ;doprnt.c: 598: width = 0;
  2326  000078  0E00               	movlw	0
  2327  00007A  6E37               	movwf	printf@width+1,c
  2328  00007C  0E00               	movlw	0
  2329  00007E  6E36               	movwf	printf@width,c
  2330  000080  D000               	goto	l4911
  2331  000082                     l4911:
  2332                           
  2333                           ;doprnt.c: 600: width *= 10;
  2334  000082  C036  F011         	movff	printf@width,___wmul@multiplier
  2335  000086  C037  F012         	movff	printf@width+1,___wmul@multiplier+1
  2336  00008A  0E00               	movlw	0
  2337  00008C  6E14               	movwf	___wmul@multiplicand+1,c
  2338  00008E  0E0A               	movlw	10
  2339  000090  6E13               	movwf	___wmul@multiplicand,c
  2340  000092  ECF0  F00B         	call	___wmul	;wreg free
  2341  000096  C011  F036         	movff	?___wmul,printf@width
  2342  00009A  C012  F037         	movff	?___wmul+1,printf@width+1
  2343                           
  2344                           ;doprnt.c: 601: width += *f++ - '0';
  2345  00009E  0ED0               	movlw	208
  2346  0000A0  6E2B               	movwf	??_printf& (0+255),c
  2347  0000A2  0EFF               	movlw	255
  2348  0000A4  6E2C               	movwf	(??_printf+1)& (0+255),c
  2349  0000A6  C01D  FFF6         	movff	printf@f,tblptrl
  2350  0000AA  C01E  FFF7         	movff	printf@f+1,tblptrh
  2351  0000AE                     	if	0	;tblptru may be non-zero
  2352  0000AE                     	endif
  2353  0000AE                     	if	0	;tblptru may be non-zero
  2354  0000AE                     	endif
  2355  0000AE  0008               	tblrd		*
  2356  0000B0  50F5               	movf	tablat,w,c
  2357  0000B2  6E2D               	movwf	(??_printf+2)& (0+255),c
  2358  0000B4  6A2E               	clrf	(??_printf+3)& (0+255),c
  2359  0000B6  502B               	movf	??_printf,w,c
  2360  0000B8  262D               	addwf	??_printf+2,f,c
  2361  0000BA  502C               	movf	??_printf+1,w,c
  2362  0000BC  222E               	addwfc	??_printf+3,f,c
  2363  0000BE  502D               	movf	??_printf+2,w,c
  2364  0000C0  2636               	addwf	printf@width,f,c
  2365  0000C2  502E               	movf	??_printf+3,w,c
  2366  0000C4  2237               	addwfc	printf@width+1,f,c
  2367  0000C6  4A1D               	infsnz	printf@f,f,c
  2368  0000C8  2A1E               	incf	printf@f+1,f,c
  2369                           
  2370                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2371  0000CA  C01D  FFF6         	movff	printf@f,tblptrl
  2372  0000CE  C01E  FFF7         	movff	printf@f+1,tblptrh
  2373  0000D2                     	if	0	;tblptru may be non-zero
  2374  0000D2                     	endif
  2375  0000D2                     	if	0	;tblptru may be non-zero
  2376  0000D2                     	endif
  2377  0000D2  0008               	tblrd		*
  2378  0000D4  50F5               	movf	tablat,w,c
  2379  0000D6  EC16  F00C         	call	_isdigit
  2380  0000DA  A0D8               	btfss	status,0,c
  2381  0000DC  D008               	goto	l4923
  2382  0000DE  D7D1               	goto	l4911
  2383                           
  2384                           ;doprnt.c: 608: }
  2385                           ;doprnt.c: 635: switch(c = *f++) {
  2386  0000E0  D006               	goto	l4923
  2387                           
  2388                           ;doprnt.c: 638: goto alldone;
  2389                           
  2390                           ;doprnt.c: 637: case 0:
  2391  0000E2  D148               	goto	l647
  2392                           
  2393                           ;doprnt.c: 698: case 'i':
  2394                           ;doprnt.c: 699: break;
  2395                           
  2396                           ;doprnt.c: 697: case 'd':
  2397  0000E4  D01B               	goto	l610
  2398  0000E6                     l4919:
  2399                           
  2400                           ;doprnt.c: 721: flag |= 0x80;
  2401  0000E6  8E35               	bsf	printf@flag,7,c
  2402                           
  2403                           ;doprnt.c: 723: break;
  2404  0000E8  D019               	goto	l610
  2405                           
  2406                           ;doprnt.c: 813: continue;
  2407                           
  2408                           ;doprnt.c: 802: default:
  2409  0000EA  D136               	goto	l5021
  2410                           
  2411                           ;doprnt.c: 822: }
  2412  0000EC  D017               	goto	l610
  2413  0000EE                     l4923:
  2414  0000EE  C01D  FFF6         	movff	printf@f,tblptrl
  2415  0000F2  C01E  FFF7         	movff	printf@f+1,tblptrh
  2416  0000F6  4A1D               	infsnz	printf@f,f,c
  2417  0000F8  2A1E               	incf	printf@f+1,f,c
  2418  0000FA                     	if	0	;tblptru may be non-zero
  2419  0000FA                     	endif
  2420  0000FA                     	if	0	;tblptru may be non-zero
  2421  0000FA                     	endif
  2422  0000FA  0008               	tblrd		*
  2423  0000FC  CFF5 F038          	movff	tablat,printf@c
  2424  000100  5038               	movf	printf@c,w,c
  2425                           
  2426                           ; Switch size 1, requested type "space"
  2427                           ; Number of cases is 4, Range of values is 0 to 120
  2428                           ; switch strategies available:
  2429                           ; Name         Instructions Cycles
  2430                           ; simple_byte           13     7 (average)
  2431                           ;	Chosen strategy is simple_byte
  2432  000102  0A00               	xorlw	0	; case 0
  2433  000104  B4D8               	btfsc	status,2,c
  2434  000106  D136               	goto	l647
  2435  000108  0A64               	xorlw	100	; case 100
  2436  00010A  B4D8               	btfsc	status,2,c
  2437  00010C  D007               	goto	l610
  2438  00010E  0A0D               	xorlw	13	; case 105
  2439  000110  B4D8               	btfsc	status,2,c
  2440  000112  D004               	goto	l610
  2441  000114  0A11               	xorlw	17	; case 120
  2442  000116  B4D8               	btfsc	status,2,c
  2443  000118  D7E6               	goto	l4919
  2444  00011A  D11E               	goto	l5021
  2445  00011C                     l610:
  2446                           
  2447                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2448  00011C  BE35               	btfsc	printf@flag,7,c
  2449  00011E  D015               	goto	l4935
  2450                           
  2451                           ;doprnt.c: 1253: {
  2452                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2453  000120  C030  FFD9         	movff	printf@ap,fsr2l
  2454  000124  C031  FFDA         	movff	printf@ap+1,fsr2h
  2455  000128  CFDE F033          	movff	postinc2,printf@val
  2456  00012C  CFDD F034          	movff	postdec2,printf@val+1
  2457  000130  0E02               	movlw	2
  2458  000132  2630               	addwf	printf@ap,f,c
  2459  000134  0E00               	movlw	0
  2460  000136  2231               	addwfc	printf@ap+1,f,c
  2461                           
  2462                           ;doprnt.c: 1261: if((int)val < 0) {
  2463  000138  AE34               	btfss	printf@val+1,7,c
  2464  00013A  D04E               	goto	l4969
  2465                           
  2466                           ;doprnt.c: 1262: flag |= 0x03;
  2467  00013C  0E03               	movlw	3
  2468  00013E  1235               	iorwf	printf@flag,f,c
  2469                           
  2470                           ;doprnt.c: 1263: val = -val;
  2471  000140  6C33               	negf	printf@val,c
  2472  000142  1E34               	comf	printf@val+1,f,c
  2473  000144  B0D8               	btfsc	status,0,c
  2474  000146  2A34               	incf	printf@val+1,f,c
  2475                           
  2476                           ;doprnt.c: 1264: }
  2477                           ;doprnt.c: 1266: }
  2478  000148  D047               	goto	l4969
  2479  00014A                     l4935:
  2480                           
  2481                           ;doprnt.c: 1268: else
  2482                           ;doprnt.c: 1273: {
  2483                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2484  00014A  C030  FFD9         	movff	printf@ap,fsr2l
  2485  00014E  C031  FFDA         	movff	printf@ap+1,fsr2h
  2486  000152  CFDE F033          	movff	postinc2,printf@val
  2487  000156  CFDD F034          	movff	postdec2,printf@val+1
  2488  00015A  0E02               	movlw	2
  2489  00015C  2630               	addwf	printf@ap,f,c
  2490  00015E  0E00               	movlw	0
  2491  000160  2231               	addwfc	printf@ap+1,f,c
  2492                           
  2493                           ;doprnt.c: 1287: }
  2494                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2495  000162  D03A               	goto	l4969
  2496  000164                     l4939:
  2497                           
  2498                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2499  000164  0E01               	movlw	1
  2500  000166  6E38               	movwf	printf@c,c
  2501  000168                     l4941:
  2502  000168  0E05               	movlw	5
  2503  00016A  1838               	xorwf	printf@c,w,c
  2504  00016C  B4D8               	btfsc	status,2,c
  2505  00016E  D03D               	goto	l4971
  2506  000170  D001               	goto	l4945
  2507  000172  D03B               	goto	l4971
  2508  000174                     l4945:
  2509                           
  2510                           ;doprnt.c: 1306: if(val < dpowers[c])
  2511  000174  5038               	movf	printf@c,w,c
  2512  000176  0D02               	mullw	2
  2513  000178  0E66               	movlw	low _dpowers
  2514  00017A  24F3               	addwf	prodl,w,c
  2515  00017C  6EF6               	movwf	tblptrl,c
  2516  00017E  0EFF               	movlw	high _dpowers
  2517  000180  20F4               	addwfc	prodh,w,c
  2518  000182  6EF7               	movwf	tblptrh,c
  2519  000184                     	if	0	;There are less than 3 active tblptr bytes
  2520  000184                     	endif
  2521  000184  0009               	tblrd		*+
  2522  000186  50F5               	movf	tablat,w,c
  2523  000188  5C33               	subwf	printf@val,w,c
  2524  00018A  0009               	tblrd		*+
  2525  00018C  50F5               	movf	tablat,w,c
  2526  00018E  5834               	subwfb	printf@val+1,w,c
  2527  000190  A0D8               	btfss	status,0,c
  2528  000192  D02B               	goto	l4971
  2529  000194  D001               	goto	l4949
  2530                           
  2531                           ;doprnt.c: 1307: break;
  2532  000196  D029               	goto	l4971
  2533  000198                     l4949:
  2534  000198  2A38               	incf	printf@c,f,c
  2535  00019A  D7E6               	goto	l4941
  2536                           
  2537                           ;doprnt.c: 1309: break;
  2538  00019C  D026               	goto	l4971
  2539  00019E                     l4953:
  2540                           
  2541                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2542  00019E  0E01               	movlw	1
  2543  0001A0  6E38               	movwf	printf@c,c
  2544  0001A2                     l4955:
  2545  0001A2  0E04               	movlw	4
  2546  0001A4  1838               	xorwf	printf@c,w,c
  2547  0001A6  B4D8               	btfsc	status,2,c
  2548  0001A8  D020               	goto	l4971
  2549  0001AA  D001               	goto	l4959
  2550  0001AC  D01E               	goto	l4971
  2551  0001AE                     l4959:
  2552                           
  2553                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2554  0001AE  5038               	movf	printf@c,w,c
  2555  0001B0  0D02               	mullw	2
  2556  0001B2  0E70               	movlw	low _hexpowers
  2557  0001B4  24F3               	addwf	prodl,w,c
  2558  0001B6  6EF6               	movwf	tblptrl,c
  2559  0001B8  0EFF               	movlw	high _hexpowers
  2560  0001BA  20F4               	addwfc	prodh,w,c
  2561  0001BC  6EF7               	movwf	tblptrh,c
  2562  0001BE                     	if	0	;There are less than 3 active tblptr bytes
  2563  0001BE                     	endif
  2564  0001BE  0009               	tblrd		*+
  2565  0001C0  50F5               	movf	tablat,w,c
  2566  0001C2  5C33               	subwf	printf@val,w,c
  2567  0001C4  0009               	tblrd		*+
  2568  0001C6  50F5               	movf	tablat,w,c
  2569  0001C8  5834               	subwfb	printf@val+1,w,c
  2570  0001CA  A0D8               	btfss	status,0,c
  2571  0001CC  D00E               	goto	l4971
  2572  0001CE  D001               	goto	l4963
  2573                           
  2574                           ;doprnt.c: 1318: break;
  2575  0001D0  D00C               	goto	l4971
  2576  0001D2                     l4963:
  2577  0001D2  2A38               	incf	printf@c,f,c
  2578  0001D4  D7E6               	goto	l4955
  2579                           
  2580                           ;doprnt.c: 1336: }
  2581                           
  2582                           ;doprnt.c: 1320: break;
  2583  0001D6  D009               	goto	l4971
  2584  0001D8                     l4969:
  2585  0001D8  5035               	movf	printf@flag,w,c
  2586  0001DA  0B80               	andlw	128
  2587                           
  2588                           ; Switch size 1, requested type "space"
  2589                           ; Number of cases is 2, Range of values is 0 to 128
  2590                           ; switch strategies available:
  2591                           ; Name         Instructions Cycles
  2592                           ; simple_byte            7     4 (average)
  2593                           ;	Chosen strategy is simple_byte
  2594  0001DC  0A00               	xorlw	0	; case 0
  2595  0001DE  B4D8               	btfsc	status,2,c
  2596  0001E0  D7C1               	goto	l4939
  2597  0001E2  0A80               	xorlw	128	; case 128
  2598  0001E4  B4D8               	btfsc	status,2,c
  2599  0001E6  D7DB               	goto	l4953
  2600  0001E8  D000               	goto	l4971
  2601  0001EA                     l4971:
  2602                           
  2603                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2604  0001EA  5036               	movf	printf@width,w,c
  2605  0001EC  1037               	iorwf	printf@width+1,w,c
  2606  0001EE  B4D8               	btfsc	status,2,c
  2607  0001F0  D00A               	goto	l4977
  2608  0001F2  C035  F02B         	movff	printf@flag,??_printf
  2609  0001F6  0E03               	movlw	3
  2610  0001F8  162B               	andwf	??_printf,f,c
  2611  0001FA  B4D8               	btfsc	status,2,c
  2612  0001FC  D004               	goto	l4977
  2613                           
  2614                           ;doprnt.c: 1346: width--;
  2615  0001FE  0636               	decf	printf@width,f,c
  2616  000200  A0D8               	btfss	status,0,c
  2617  000202  0637               	decf	printf@width+1,f,c
  2618  000204  D000               	goto	l4977
  2619  000206                     l4977:
  2620                           
  2621                           ;doprnt.c: 1381: if(width > c)
  2622  000206  0E80               	movlw	128
  2623  000208  BE38               	btfsc	printf@c,7,c
  2624  00020A  0E7F               	movlw	127
  2625  00020C  6E2B               	movwf	??_printf& (0+255),c
  2626  00020E  5036               	movf	printf@width,w,c
  2627  000210  5C38               	subwf	printf@c,w,c
  2628  000212  5037               	movf	printf@width+1,w,c
  2629  000214  0A80               	xorlw	128
  2630  000216  582B               	subwfb	??_printf& (0+255),w,c
  2631  000218  B0D8               	btfsc	status,0,c
  2632  00021A  D007               	goto	l4981
  2633                           
  2634                           ;doprnt.c: 1382: width -= c;
  2635  00021C  5038               	movf	printf@c,w,c
  2636  00021E  5E36               	subwf	printf@width,f,c
  2637  000220  0E00               	movlw	0
  2638  000222  BE38               	btfsc	printf@c,7,c
  2639  000224  0EFF               	movlw	255
  2640  000226  5A37               	subwfb	printf@width+1,f,c
  2641  000228  D005               	goto	l4983
  2642  00022A                     l4981:
  2643                           
  2644                           ;doprnt.c: 1383: else
  2645                           ;doprnt.c: 1384: width = 0;
  2646  00022A  0E00               	movlw	0
  2647  00022C  6E37               	movwf	printf@width+1,c
  2648  00022E  0E00               	movlw	0
  2649  000230  6E36               	movwf	printf@width,c
  2650  000232  D000               	goto	l4983
  2651  000234                     l4983:
  2652                           
  2653                           ;doprnt.c: 1387: if(flag & 0x04) {
  2654  000234  A435               	btfss	printf@flag,2,c
  2655  000236  D01A               	goto	l4995
  2656                           
  2657                           ;doprnt.c: 1392: if(flag & 0x03)
  2658  000238  C035  F02B         	movff	printf@flag,??_printf
  2659  00023C  0E03               	movlw	3
  2660  00023E  162B               	andwf	??_printf,f,c
  2661  000240  B4D8               	btfsc	status,2,c
  2662  000242  D004               	goto	l4989
  2663                           
  2664                           ;doprnt.c: 1393: (putch('-') );
  2665  000244  0E2D               	movlw	45
  2666  000246  ECBD  F00C         	call	_putch
  2667  00024A  D000               	goto	l4989
  2668  00024C                     l4989:
  2669                           
  2670                           ;doprnt.c: 1415: if(width)
  2671  00024C  5036               	movf	printf@width,w,c
  2672  00024E  1037               	iorwf	printf@width+1,w,c
  2673  000250  B4D8               	btfsc	status,2,c
  2674  000252  D026               	goto	l5005
  2675  000254                     l4991:
  2676                           
  2677                           ;doprnt.c: 1417: (putch('0') );
  2678  000254  0E30               	movlw	48
  2679  000256  ECBD  F00C         	call	_putch
  2680                           
  2681                           ;doprnt.c: 1418: while(--width);
  2682  00025A  0636               	decf	printf@width,f,c
  2683  00025C  A0D8               	btfss	status,0,c
  2684  00025E  0637               	decf	printf@width+1,f,c
  2685  000260  5036               	movf	printf@width,w,c
  2686  000262  1037               	iorwf	printf@width+1,w,c
  2687  000264  B4D8               	btfsc	status,2,c
  2688  000266  D01C               	goto	l5005
  2689  000268  D7F5               	goto	l4991
  2690                           
  2691                           ;doprnt.c: 1420: } else
  2692  00026A  D01A               	goto	l5005
  2693  00026C                     l4995:
  2694                           
  2695                           ;doprnt.c: 1422: {
  2696                           ;doprnt.c: 1424: if(width
  2697                           ;doprnt.c: 1428: )
  2698  00026C  5036               	movf	printf@width,w,c
  2699  00026E  1037               	iorwf	printf@width+1,w,c
  2700  000270  B4D8               	btfsc	status,2,c
  2701  000272  D00C               	goto	l5001
  2702  000274                     l4997:
  2703                           
  2704                           ;doprnt.c: 1430: (putch(' ') );
  2705  000274  0E20               	movlw	32
  2706  000276  ECBD  F00C         	call	_putch
  2707                           
  2708                           ;doprnt.c: 1431: while(--width);
  2709  00027A  0636               	decf	printf@width,f,c
  2710  00027C  A0D8               	btfss	status,0,c
  2711  00027E  0637               	decf	printf@width+1,f,c
  2712  000280  5036               	movf	printf@width,w,c
  2713  000282  1037               	iorwf	printf@width+1,w,c
  2714  000284  B4D8               	btfsc	status,2,c
  2715  000286  D002               	goto	l5001
  2716  000288  D7F5               	goto	l4997
  2717  00028A  D000               	goto	l5001
  2718  00028C                     l5001:
  2719                           
  2720                           ;doprnt.c: 1438: if(flag & 0x03)
  2721  00028C  C035  F02B         	movff	printf@flag,??_printf
  2722  000290  0E03               	movlw	3
  2723  000292  162B               	andwf	??_printf,f,c
  2724  000294  B4D8               	btfsc	status,2,c
  2725  000296  D004               	goto	l5005
  2726                           
  2727                           ;doprnt.c: 1439: (putch('-') );
  2728  000298  0E2D               	movlw	45
  2729  00029A  ECBD  F00C         	call	_putch
  2730  00029E  D000               	goto	l5005
  2731  0002A0                     l5005:
  2732                           
  2733                           ;doprnt.c: 1469: }
  2734                           ;doprnt.c: 1472: prec = c;
  2735  0002A0  C038  F032         	movff	printf@c,printf@prec
  2736                           
  2737                           ;doprnt.c: 1474: while(prec--) {
  2738  0002A4  D053               	goto	l5019
  2739                           
  2740                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  2741  0002A6  D045               	goto	l5015
  2742  0002A8                     l5007:
  2743                           
  2744                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2745  0002A8  5032               	movf	printf@prec,w,c
  2746  0002AA  0D02               	mullw	2
  2747  0002AC  0E66               	movlw	low _dpowers
  2748  0002AE  24F3               	addwf	prodl,w,c
  2749  0002B0  6EF6               	movwf	tblptrl,c
  2750  0002B2  0EFF               	movlw	high _dpowers
  2751  0002B4  20F4               	addwfc	prodh,w,c
  2752  0002B6  6EF7               	movwf	tblptrh,c
  2753  0002B8                     	if	0	;There are less than 3 active tblptr bytes
  2754  0002B8                     	endif
  2755  0002B8  0009               	tblrd		*+
  2756  0002BA  CFF5 F013          	movff	tablat,___lwdiv@divisor
  2757  0002BE  000A               	tblrd		*-
  2758  0002C0  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  2759  0002C4  C033  F011         	movff	printf@val,___lwdiv@dividend
  2760  0002C8  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  2761  0002CC  ECB5  F009         	call	___lwdiv	;wreg free
  2762  0002D0  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  2763  0002D4  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  2764  0002D8  0E00               	movlw	0
  2765  0002DA  6E1B               	movwf	___lwmod@divisor+1,c
  2766  0002DC  0E0A               	movlw	10
  2767  0002DE  6E1A               	movwf	___lwmod@divisor,c
  2768  0002E0  EC86  F00A         	call	___lwmod	;wreg free
  2769  0002E4  5018               	movf	?___lwmod,w,c
  2770  0002E6  0F30               	addlw	48
  2771  0002E8  6E38               	movwf	printf@c,c
  2772                           
  2773                           ;doprnt.c: 1491: break;
  2774  0002EA  D02C               	goto	l5017
  2775  0002EC                     l5009:
  2776                           
  2777                           ;doprnt.c: 1499: {
  2778                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2779  0002EC  C033  F011         	movff	printf@val,___lwdiv@dividend
  2780  0002F0  C034  F012         	movff	printf@val+1,___lwdiv@dividend+1
  2781  0002F4  5032               	movf	printf@prec,w,c
  2782  0002F6  0D02               	mullw	2
  2783  0002F8  0E70               	movlw	low _hexpowers
  2784  0002FA  24F3               	addwf	prodl,w,c
  2785  0002FC  6EF6               	movwf	tblptrl,c
  2786  0002FE  0EFF               	movlw	high _hexpowers
  2787  000300  20F4               	addwfc	prodh,w,c
  2788  000302  6EF7               	movwf	tblptrh,c
  2789  000304                     	if	0	;There are less than 3 active tblptr bytes
  2790  000304                     	endif
  2791  000304  0009               	tblrd		*+
  2792  000306  CFF5 F013          	movff	tablat,___lwdiv@divisor
  2793  00030A  000A               	tblrd		*-
  2794  00030C  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  2795  000310  ECB5  F009         	call	___lwdiv	;wreg free
  2796  000314  5011               	movf	?___lwdiv,w,c
  2797  000316  0B0F               	andlw	15
  2798  000318  6E2F               	movwf	printf@idx,c
  2799                           
  2800                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2801  00031A  502F               	movf	printf@idx,w,c
  2802  00031C  0D01               	mullw	1
  2803  00031E  0ED5               	movlw	low STR_6
  2804  000320  24F3               	addwf	prodl,w,c
  2805  000322  6EF6               	movwf	tblptrl,c
  2806  000324  0EFF               	movlw	high STR_6
  2807  000326  20F4               	addwfc	prodh,w,c
  2808  000328  6EF7               	movwf	tblptrh,c
  2809  00032A                     	if	0	;There are less than 3 active tblptr bytes
  2810  00032A                     	endif
  2811  00032A  0008               	tblrd		*
  2812  00032C  CFF5 F038          	movff	tablat,printf@c
  2813                           
  2814                           ;doprnt.c: 1523: }
  2815                           
  2816                           ;doprnt.c: 1508: }
  2817                           ;doprnt.c: 1510: break;
  2818  000330  D009               	goto	l5017
  2819  000332                     l5015:
  2820  000332  5035               	movf	printf@flag,w,c
  2821  000334  0B80               	andlw	128
  2822                           
  2823                           ; Switch size 1, requested type "space"
  2824                           ; Number of cases is 2, Range of values is 0 to 128
  2825                           ; switch strategies available:
  2826                           ; Name         Instructions Cycles
  2827                           ; simple_byte            7     4 (average)
  2828                           ;	Chosen strategy is simple_byte
  2829  000336  0A00               	xorlw	0	; case 0
  2830  000338  B4D8               	btfsc	status,2,c
  2831  00033A  D7B6               	goto	l5007
  2832  00033C  0A80               	xorlw	128	; case 128
  2833  00033E  B4D8               	btfsc	status,2,c
  2834  000340  D7D5               	goto	l5009
  2835  000342  D000               	goto	l5017
  2836  000344                     l5017:
  2837                           
  2838                           ;doprnt.c: 1524: (putch(c) );
  2839  000344  5038               	movf	printf@c,w,c
  2840  000346  ECBD  F00C         	call	_putch
  2841  00034A  D000               	goto	l5019
  2842  00034C                     l5019:
  2843  00034C  0632               	decf	printf@prec,f,c
  2844  00034E  2832               	incf	printf@prec,w,c
  2845  000350  B4D8               	btfsc	status,2,c
  2846  000352  D002               	goto	l5021
  2847  000354  D7EE               	goto	l5015
  2848  000356  D000               	goto	l5021
  2849  000358                     l5021:
  2850  000358  C01D  FFF6         	movff	printf@f,tblptrl
  2851  00035C  C01E  FFF7         	movff	printf@f+1,tblptrh
  2852  000360  4A1D               	infsnz	printf@f,f,c
  2853  000362  2A1E               	incf	printf@f+1,f,c
  2854  000364                     	if	0	;tblptru may be non-zero
  2855  000364                     	endif
  2856  000364                     	if	0	;tblptru may be non-zero
  2857  000364                     	endif
  2858  000364  0008               	tblrd		*
  2859  000366  CFF5 F038          	movff	tablat,printf@c
  2860  00036A  5038               	movf	printf@c,w,c
  2861  00036C  B4D8               	btfsc	status,2,c
  2862  00036E  D002               	goto	l647
  2863  000370  D65A               	goto	l4895
  2864  000372  D000               	goto	l647
  2865  000374                     l647:
  2866  000374  0012               	return		;funcret
  2867  000376                     __end_of_printf:
  2868                           	opt stack 0
  2869                           tblptru	equ	0xFF8
  2870                           tblptrh	equ	0xFF7
  2871                           tblptrl	equ	0xFF6
  2872                           tablat	equ	0xFF5
  2873                           prodh	equ	0xFF4
  2874                           prodl	equ	0xFF3
  2875                           intcon	equ	0xFF2
  2876                           intcon2	equ	0xFF1
  2877                           postinc0	equ	0xFEE
  2878                           wreg	equ	0xFE8
  2879                           postdec1	equ	0xFE5
  2880                           fsr1l	equ	0xFE1
  2881                           indf2	equ	0xFDF
  2882                           postinc2	equ	0xFDE
  2883                           postdec2	equ	0xFDD
  2884                           fsr2h	equ	0xFDA
  2885                           fsr2l	equ	0xFD9
  2886                           status	equ	0xFD8
  2887                           
  2888 ;; *************** function _putch *****************
  2889 ;; Defined at:
  2890 ;;		line 98 in file "Lab11p4.c"
  2891 ;; Parameters:    Size  Location     Type
  2892 ;;  c               1    wreg     unsigned char 
  2893 ;; Auto vars:     Size  Location     Type
  2894 ;;  c               1   16[COMRAM] unsigned char 
  2895 ;; Return value:  Size  Location     Type
  2896 ;;		None               void
  2897 ;; Registers used:
  2898 ;;		wreg
  2899 ;; Tracked objects:
  2900 ;;		On entry : 0/0
  2901 ;;		On exit  : 0/0
  2902 ;;		Unchanged: 0/0
  2903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2905 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2907 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2908 ;;Total ram usage:        1 bytes
  2909 ;; Hardware stack levels used:    1
  2910 ;; Hardware stack levels required when called:    3
  2911 ;; This function calls:
  2912 ;;		Nothing
  2913 ;; This function is called by:
  2914 ;;		_printf
  2915 ;; This function uses a non-reentrant model
  2916 ;;
  2917                           
  2918                           	psect	text2
  2919  00197A                     __ptext2:
  2920                           	opt stack 0
  2921  00197A                     _putch:
  2922                           	opt stack 26
  2923                           
  2924                           ;incstack = 0
  2925                           ;putch@c stored from wreg
  2926  00197A  6E11               	movwf	putch@c,c
  2927                           
  2928                           ;Lab11p4.c: 100: while (!TRMT);
  2929  00197C  D000               	goto	l542
  2930  00197E                     l542:
  2931  00197E  A2AC               	btfss	4012,1,c	;volatile
  2932  001980  D7FE               	goto	l542
  2933                           
  2934                           ;Lab11p4.c: 101: TXREG = c;
  2935  001982  C011  FFAD         	movff	putch@c,4013	;volatile
  2936  001986  0012               	return		;funcret
  2937  001988                     __end_of_putch:
  2938                           	opt stack 0
  2939                           tblptru	equ	0xFF8
  2940                           tblptrh	equ	0xFF7
  2941                           tblptrl	equ	0xFF6
  2942                           tablat	equ	0xFF5
  2943                           prodh	equ	0xFF4
  2944                           prodl	equ	0xFF3
  2945                           intcon	equ	0xFF2
  2946                           intcon2	equ	0xFF1
  2947                           postinc0	equ	0xFEE
  2948                           wreg	equ	0xFE8
  2949                           postdec1	equ	0xFE5
  2950                           fsr1l	equ	0xFE1
  2951                           indf2	equ	0xFDF
  2952                           postinc2	equ	0xFDE
  2953                           postdec2	equ	0xFDD
  2954                           fsr2h	equ	0xFDA
  2955                           fsr2l	equ	0xFD9
  2956                           status	equ	0xFD8
  2957                           
  2958 ;; *************** function _isdigit *****************
  2959 ;; Defined at:
  2960 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2961 ;; Parameters:    Size  Location     Type
  2962 ;;  c               1    wreg     unsigned char 
  2963 ;; Auto vars:     Size  Location     Type
  2964 ;;  c               1   18[COMRAM] unsigned char 
  2965 ;; Return value:  Size  Location     Type
  2966 ;;		None               void
  2967 ;; Registers used:
  2968 ;;		wreg, status,2, status,0
  2969 ;; Tracked objects:
  2970 ;;		On entry : 0/0
  2971 ;;		On exit  : 0/0
  2972 ;;		Unchanged: 0/0
  2973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2975 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2976 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2977 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2978 ;;Total ram usage:        3 bytes
  2979 ;; Hardware stack levels used:    1
  2980 ;; Hardware stack levels required when called:    3
  2981 ;; This function calls:
  2982 ;;		Nothing
  2983 ;; This function is called by:
  2984 ;;		_printf
  2985 ;; This function uses a non-reentrant model
  2986 ;;
  2987                           
  2988                           	psect	text3
  2989  00182C                     __ptext3:
  2990                           	opt stack 0
  2991  00182C                     _isdigit:
  2992                           	opt stack 26
  2993                           
  2994                           ;incstack = 0
  2995                           ;isdigit@c stored from wreg
  2996  00182C  6E13               	movwf	isdigit@c,c
  2997  00182E  0E00               	movlw	0
  2998  001830  6E12               	movwf	_isdigit$1939,c
  2999  001832  0E3A               	movlw	58
  3000  001834  6013               	cpfslt	isdigit@c,c
  3001  001836  D006               	goto	l4671
  3002  001838  0E2F               	movlw	47
  3003  00183A  6413               	cpfsgt	isdigit@c,c
  3004  00183C  D003               	goto	l4671
  3005  00183E  0E01               	movlw	1
  3006  001840  6E12               	movwf	_isdigit$1939,c
  3007  001842  D000               	goto	l4671
  3008  001844                     l4671:
  3009  001844  C012  F011         	movff	_isdigit$1939,??_isdigit
  3010  001848  3011               	rrcf	??_isdigit,w,c
  3011  00184A  D000               	goto	l1114
  3012  00184C                     l1114:
  3013  00184C  0012               	return		;funcret
  3014  00184E                     __end_of_isdigit:
  3015                           	opt stack 0
  3016                           tblptru	equ	0xFF8
  3017                           tblptrh	equ	0xFF7
  3018                           tblptrl	equ	0xFF6
  3019                           tablat	equ	0xFF5
  3020                           prodh	equ	0xFF4
  3021                           prodl	equ	0xFF3
  3022                           intcon	equ	0xFF2
  3023                           intcon2	equ	0xFF1
  3024                           postinc0	equ	0xFEE
  3025                           wreg	equ	0xFE8
  3026                           postdec1	equ	0xFE5
  3027                           fsr1l	equ	0xFE1
  3028                           indf2	equ	0xFDF
  3029                           postinc2	equ	0xFDE
  3030                           postdec2	equ	0xFDD
  3031                           fsr2h	equ	0xFDA
  3032                           fsr2l	equ	0xFD9
  3033                           status	equ	0xFD8
  3034                           
  3035 ;; *************** function ___lwmod *****************
  3036 ;; Defined at:
  3037 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  3038 ;; Parameters:    Size  Location     Type
  3039 ;;  dividend        2   23[COMRAM] unsigned int 
  3040 ;;  divisor         2   25[COMRAM] unsigned int 
  3041 ;; Auto vars:     Size  Location     Type
  3042 ;;  counter         1   27[COMRAM] unsigned char 
  3043 ;; Return value:  Size  Location     Type
  3044 ;;                  2   23[COMRAM] unsigned int 
  3045 ;; Registers used:
  3046 ;;		wreg, status,2, status,0
  3047 ;; Tracked objects:
  3048 ;;		On entry : 0/0
  3049 ;;		On exit  : 0/0
  3050 ;;		Unchanged: 0/0
  3051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3052 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3053 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3055 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3056 ;;Total ram usage:        5 bytes
  3057 ;; Hardware stack levels used:    1
  3058 ;; Hardware stack levels required when called:    3
  3059 ;; This function calls:
  3060 ;;		Nothing
  3061 ;; This function is called by:
  3062 ;;		_printf
  3063 ;; This function uses a non-reentrant model
  3064 ;;
  3065                           
  3066                           	psect	text4
  3067  00150C                     __ptext4:
  3068                           	opt stack 0
  3069  00150C                     ___lwmod:
  3070                           	opt stack 26
  3071                           
  3072                           ;incstack = 0
  3073  00150C  501A               	movf	___lwmod@divisor,w,c
  3074  00150E  101B               	iorwf	___lwmod@divisor+1,w,c
  3075  001510  B4D8               	btfsc	status,2,c
  3076  001512  D01D               	goto	l1216
  3077  001514  0E01               	movlw	1
  3078  001516  6E1C               	movwf	___lwmod@counter,c
  3079  001518  D005               	goto	l4703
  3080  00151A                     l4701:
  3081  00151A  90D8               	bcf	status,0,c
  3082  00151C  361A               	rlcf	___lwmod@divisor,f,c
  3083  00151E  361B               	rlcf	___lwmod@divisor+1,f,c
  3084  001520  2A1C               	incf	___lwmod@counter,f,c
  3085  001522  D000               	goto	l4703
  3086  001524                     l4703:
  3087  001524  BE1B               	btfsc	___lwmod@divisor+1,7,c
  3088  001526  D002               	goto	l4705
  3089  001528  D7F8               	goto	l4701
  3090  00152A  D000               	goto	l4705
  3091  00152C                     l4705:
  3092  00152C  501A               	movf	___lwmod@divisor,w,c
  3093  00152E  5C18               	subwf	___lwmod@dividend,w,c
  3094  001530  501B               	movf	___lwmod@divisor+1,w,c
  3095  001532  5819               	subwfb	___lwmod@dividend+1,w,c
  3096  001534  A0D8               	btfss	status,0,c
  3097  001536  D005               	goto	l4709
  3098  001538  501A               	movf	___lwmod@divisor,w,c
  3099  00153A  5E18               	subwf	___lwmod@dividend,f,c
  3100  00153C  501B               	movf	___lwmod@divisor+1,w,c
  3101  00153E  5A19               	subwfb	___lwmod@dividend+1,f,c
  3102  001540  D000               	goto	l4709
  3103  001542                     l4709:
  3104  001542  90D8               	bcf	status,0,c
  3105  001544  321B               	rrcf	___lwmod@divisor+1,f,c
  3106  001546  321A               	rrcf	___lwmod@divisor,f,c
  3107  001548  2E1C               	decfsz	___lwmod@counter,f,c
  3108  00154A  D7F0               	goto	l4705
  3109  00154C  D000               	goto	l1216
  3110  00154E                     l1216:
  3111  00154E  C018  F018         	movff	___lwmod@dividend,?___lwmod
  3112  001552  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  3113  001556  0012               	return		;funcret
  3114  001558                     __end_of___lwmod:
  3115                           	opt stack 0
  3116                           tblptru	equ	0xFF8
  3117                           tblptrh	equ	0xFF7
  3118                           tblptrl	equ	0xFF6
  3119                           tablat	equ	0xFF5
  3120                           prodh	equ	0xFF4
  3121                           prodl	equ	0xFF3
  3122                           intcon	equ	0xFF2
  3123                           intcon2	equ	0xFF1
  3124                           postinc0	equ	0xFEE
  3125                           wreg	equ	0xFE8
  3126                           postdec1	equ	0xFE5
  3127                           fsr1l	equ	0xFE1
  3128                           indf2	equ	0xFDF
  3129                           postinc2	equ	0xFDE
  3130                           postdec2	equ	0xFDD
  3131                           fsr2h	equ	0xFDA
  3132                           fsr2l	equ	0xFD9
  3133                           status	equ	0xFD8
  3134                           
  3135 ;; *************** function ___lwdiv *****************
  3136 ;; Defined at:
  3137 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  3138 ;; Parameters:    Size  Location     Type
  3139 ;;  dividend        2   16[COMRAM] unsigned int 
  3140 ;;  divisor         2   18[COMRAM] unsigned int 
  3141 ;; Auto vars:     Size  Location     Type
  3142 ;;  quotient        2   21[COMRAM] unsigned int 
  3143 ;;  counter         1   20[COMRAM] unsigned char 
  3144 ;; Return value:  Size  Location     Type
  3145 ;;                  2   16[COMRAM] unsigned int 
  3146 ;; Registers used:
  3147 ;;		wreg, status,2, status,0
  3148 ;; Tracked objects:
  3149 ;;		On entry : 0/0
  3150 ;;		On exit  : 0/0
  3151 ;;		Unchanged: 0/0
  3152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3153 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3154 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3156 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3157 ;;Total ram usage:        7 bytes
  3158 ;; Hardware stack levels used:    1
  3159 ;; Hardware stack levels required when called:    3
  3160 ;; This function calls:
  3161 ;;		Nothing
  3162 ;; This function is called by:
  3163 ;;		_printf
  3164 ;; This function uses a non-reentrant model
  3165 ;;
  3166                           
  3167                           	psect	text5
  3168  00136A                     __ptext5:
  3169                           	opt stack 0
  3170  00136A                     ___lwdiv:
  3171                           	opt stack 26
  3172                           
  3173                           ;incstack = 0
  3174  00136A  0E00               	movlw	0
  3175  00136C  6E17               	movwf	___lwdiv@quotient+1,c
  3176  00136E  0E00               	movlw	0
  3177  001370  6E16               	movwf	___lwdiv@quotient,c
  3178  001372  5013               	movf	___lwdiv@divisor,w,c
  3179  001374  1014               	iorwf	___lwdiv@divisor+1,w,c
  3180  001376  B4D8               	btfsc	status,2,c
  3181  001378  D021               	goto	l1206
  3182  00137A  0E01               	movlw	1
  3183  00137C  6E15               	movwf	___lwdiv@counter,c
  3184  00137E  D005               	goto	l4683
  3185  001380                     l4681:
  3186  001380  90D8               	bcf	status,0,c
  3187  001382  3613               	rlcf	___lwdiv@divisor,f,c
  3188  001384  3614               	rlcf	___lwdiv@divisor+1,f,c
  3189  001386  2A15               	incf	___lwdiv@counter,f,c
  3190  001388  D000               	goto	l4683
  3191  00138A                     l4683:
  3192  00138A  BE14               	btfsc	___lwdiv@divisor+1,7,c
  3193  00138C  D002               	goto	l4685
  3194  00138E  D7F8               	goto	l4681
  3195  001390  D000               	goto	l4685
  3196  001392                     l4685:
  3197  001392  90D8               	bcf	status,0,c
  3198  001394  3616               	rlcf	___lwdiv@quotient,f,c
  3199  001396  3617               	rlcf	___lwdiv@quotient+1,f,c
  3200  001398  5013               	movf	___lwdiv@divisor,w,c
  3201  00139A  5C11               	subwf	___lwdiv@dividend,w,c
  3202  00139C  5014               	movf	___lwdiv@divisor+1,w,c
  3203  00139E  5812               	subwfb	___lwdiv@dividend+1,w,c
  3204  0013A0  A0D8               	btfss	status,0,c
  3205  0013A2  D006               	goto	l4693
  3206  0013A4  5013               	movf	___lwdiv@divisor,w,c
  3207  0013A6  5E11               	subwf	___lwdiv@dividend,f,c
  3208  0013A8  5014               	movf	___lwdiv@divisor+1,w,c
  3209  0013AA  5A12               	subwfb	___lwdiv@dividend+1,f,c
  3210  0013AC  8016               	bsf	___lwdiv@quotient,0,c
  3211  0013AE  D000               	goto	l4693
  3212  0013B0                     l4693:
  3213  0013B0  90D8               	bcf	status,0,c
  3214  0013B2  3214               	rrcf	___lwdiv@divisor+1,f,c
  3215  0013B4  3213               	rrcf	___lwdiv@divisor,f,c
  3216  0013B6  2E15               	decfsz	___lwdiv@counter,f,c
  3217  0013B8  D7EC               	goto	l4685
  3218  0013BA  D000               	goto	l1206
  3219  0013BC                     l1206:
  3220  0013BC  C016  F011         	movff	___lwdiv@quotient,?___lwdiv
  3221  0013C0  C017  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3222  0013C4  0012               	return		;funcret
  3223  0013C6                     __end_of___lwdiv:
  3224                           	opt stack 0
  3225                           tblptru	equ	0xFF8
  3226                           tblptrh	equ	0xFF7
  3227                           tblptrl	equ	0xFF6
  3228                           tablat	equ	0xFF5
  3229                           prodh	equ	0xFF4
  3230                           prodl	equ	0xFF3
  3231                           intcon	equ	0xFF2
  3232                           intcon2	equ	0xFF1
  3233                           postinc0	equ	0xFEE
  3234                           wreg	equ	0xFE8
  3235                           postdec1	equ	0xFE5
  3236                           fsr1l	equ	0xFE1
  3237                           indf2	equ	0xFDF
  3238                           postinc2	equ	0xFDE
  3239                           postdec2	equ	0xFDD
  3240                           fsr2h	equ	0xFDA
  3241                           fsr2l	equ	0xFD9
  3242                           status	equ	0xFD8
  3243                           
  3244 ;; *************** function _fillCircle *****************
  3245 ;; Defined at:
  3246 ;;		line 614 in file "ST7735_TFT.c"
  3247 ;; Parameters:    Size  Location     Type
  3248 ;;  x0              2   58[COMRAM] int 
  3249 ;;  y0              2   60[COMRAM] int 
  3250 ;;  r               2   62[COMRAM] int 
  3251 ;;  color           2   64[COMRAM] unsigned int 
  3252 ;; Auto vars:     Size  Location     Type
  3253 ;;		None
  3254 ;; Return value:  Size  Location     Type
  3255 ;;		None               void
  3256 ;; Registers used:
  3257 ;;		wreg, status,2, status,0, cstack
  3258 ;; Tracked objects:
  3259 ;;		On entry : 0/0
  3260 ;;		On exit  : 0/0
  3261 ;;		Unchanged: 0/0
  3262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3263 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3266 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3267 ;;Total ram usage:        8 bytes
  3268 ;; Hardware stack levels used:    1
  3269 ;; Hardware stack levels required when called:    8
  3270 ;; This function calls:
  3271 ;;		_drawFastVLine
  3272 ;;		_fillCircleHelper
  3273 ;; This function is called by:
  3274 ;;		_main
  3275 ;; This function uses a non-reentrant model
  3276 ;;
  3277                           
  3278                           	psect	text6
  3279  00141A                     __ptext6:
  3280                           	opt stack 0
  3281  00141A                     _fillCircle:
  3282                           	opt stack 22
  3283                           
  3284                           ;ST7735_TFT.c: 616: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  3285                           
  3286                           ;incstack = 0
  3287  00141A  503F               	movf	fillCircle@r,w,c
  3288  00141C  0800               	sublw	0
  3289  00141E  243D               	addwf	fillCircle@y0,w,c
  3290  001420  6E18               	movwf	drawFastVLine@y,c
  3291  001422  80D8               	bsf	status,0,c
  3292  001424  343F               	rlcf	fillCircle@r,w,c
  3293  001426  6E19               	movwf	drawFastVLine@h,c
  3294  001428  C041  F01A         	movff	fillCircle@color,drawFastVLine@color
  3295  00142C  C042  F01B         	movff	fillCircle@color+1,drawFastVLine@color+1
  3296  001430  503B               	movf	fillCircle@x0,w,c
  3297  001432  EC1A  F008         	call	_drawFastVLine
  3298                           
  3299                           ;ST7735_TFT.c: 617: fillCircleHelper(x0, y0, r, 3, 0, color);
  3300  001436  C03B  F023         	movff	fillCircle@x0,fillCircleHelper@x0
  3301  00143A  C03C  F024         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  3302  00143E  C03D  F025         	movff	fillCircle@y0,fillCircleHelper@y0
  3303  001442  C03E  F026         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  3304  001446  C03F  F027         	movff	fillCircle@r,fillCircleHelper@r
  3305  00144A  C040  F028         	movff	fillCircle@r+1,fillCircleHelper@r+1
  3306  00144E  0E00               	movlw	0
  3307  001450  6E2A               	movwf	fillCircleHelper@cornername+1,c
  3308  001452  0E03               	movlw	3
  3309  001454  6E29               	movwf	fillCircleHelper@cornername,c
  3310  001456  0E00               	movlw	0
  3311  001458  6E2C               	movwf	fillCircleHelper@delta+1,c
  3312  00145A  0E00               	movlw	0
  3313  00145C  6E2B               	movwf	fillCircleHelper@delta,c
  3314  00145E  C041  F02D         	movff	fillCircle@color,fillCircleHelper@color
  3315  001462  C042  F02E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  3316  001466  ECF8  F004         	call	_fillCircleHelper	;wreg free
  3317  00146A  0012               	return		;funcret
  3318  00146C                     __end_of_fillCircle:
  3319                           	opt stack 0
  3320                           tblptru	equ	0xFF8
  3321                           tblptrh	equ	0xFF7
  3322                           tblptrl	equ	0xFF6
  3323                           tablat	equ	0xFF5
  3324                           prodh	equ	0xFF4
  3325                           prodl	equ	0xFF3
  3326                           intcon	equ	0xFF2
  3327                           intcon2	equ	0xFF1
  3328                           postinc0	equ	0xFEE
  3329                           wreg	equ	0xFE8
  3330                           postdec1	equ	0xFE5
  3331                           fsr1l	equ	0xFE1
  3332                           indf2	equ	0xFDF
  3333                           postinc2	equ	0xFDE
  3334                           postdec2	equ	0xFDD
  3335                           fsr2h	equ	0xFDA
  3336                           fsr2l	equ	0xFD9
  3337                           status	equ	0xFD8
  3338                           
  3339 ;; *************** function _fillCircleHelper *****************
  3340 ;; Defined at:
  3341 ;;		line 589 in file "ST7735_TFT.c"
  3342 ;; Parameters:    Size  Location     Type
  3343 ;;  x0              2   34[COMRAM] int 
  3344 ;;  y0              2   36[COMRAM] int 
  3345 ;;  r               2   38[COMRAM] int 
  3346 ;;  cornername      2   40[COMRAM] unsigned int 
  3347 ;;  delta           2   42[COMRAM] int 
  3348 ;;  color           2   44[COMRAM] unsigned int 
  3349 ;; Auto vars:     Size  Location     Type
  3350 ;;  y               2   56[COMRAM] int 
  3351 ;;  x               2   54[COMRAM] int 
  3352 ;;  f               2   52[COMRAM] int 
  3353 ;;  ddF_y           2   50[COMRAM] int 
  3354 ;;  ddF_x           2   48[COMRAM] int 
  3355 ;; Return value:  Size  Location     Type
  3356 ;;		None               void
  3357 ;; Registers used:
  3358 ;;		wreg, status,2, status,0, cstack
  3359 ;; Tracked objects:
  3360 ;;		On entry : 0/0
  3361 ;;		On exit  : 0/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3364 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3365 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3366 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3367 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3368 ;;Total ram usage:       24 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; Hardware stack levels required when called:    7
  3371 ;; This function calls:
  3372 ;;		_drawFastVLine
  3373 ;; This function is called by:
  3374 ;;		_fillCircle
  3375 ;; This function uses a non-reentrant model
  3376 ;;
  3377                           
  3378                           	psect	text7
  3379  0009F0                     __ptext7:
  3380                           	opt stack 0
  3381  0009F0                     _fillCircleHelper:
  3382                           	opt stack 22
  3383                           
  3384                           ;ST7735_TFT.c: 591: signed int f, ddF_x, ddF_y, x, y;
  3385                           ;ST7735_TFT.c: 592: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3386                           
  3387                           ;incstack = 0
  3388  0009F0  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3389  0009F4  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3390  0009F8  1E2F               	comf	??_fillCircleHelper,f,c
  3391  0009FA  1E30               	comf	??_fillCircleHelper+1,f,c
  3392  0009FC  4A2F               	infsnz	??_fillCircleHelper,f,c
  3393  0009FE  2A30               	incf	??_fillCircleHelper+1,f,c
  3394  000A00  0E01               	movlw	1
  3395  000A02  242F               	addwf	??_fillCircleHelper,w,c
  3396  000A04  6E35               	movwf	fillCircleHelper@f,c
  3397  000A06  0E00               	movlw	0
  3398  000A08  2030               	addwfc	??_fillCircleHelper+1,w,c
  3399  000A0A  6E36               	movwf	fillCircleHelper@f+1,c
  3400  000A0C  0E00               	movlw	0
  3401  000A0E  6E32               	movwf	fillCircleHelper@ddF_x+1,c
  3402  000A10  0E01               	movlw	1
  3403  000A12  6E31               	movwf	fillCircleHelper@ddF_x,c
  3404  000A14  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3405  000A18  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3406  000A1C  90D8               	bcf	status,0,c
  3407  000A1E  362F               	rlcf	??_fillCircleHelper,f,c
  3408  000A20  3630               	rlcf	??_fillCircleHelper+1,f,c
  3409  000A22  1E2F               	comf	??_fillCircleHelper,f,c
  3410  000A24  1E30               	comf	??_fillCircleHelper+1,f,c
  3411  000A26  4A2F               	infsnz	??_fillCircleHelper,f,c
  3412  000A28  2A30               	incf	??_fillCircleHelper+1,f,c
  3413  000A2A  C02F  F033         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  3414  000A2E  C030  F034         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  3415  000A32  0E00               	movlw	0
  3416  000A34  6E38               	movwf	fillCircleHelper@x+1,c
  3417  000A36  0E00               	movlw	0
  3418  000A38  6E37               	movwf	fillCircleHelper@x,c
  3419  000A3A  C027  F039         	movff	fillCircleHelper@r,fillCircleHelper@y
  3420  000A3E  C028  F03A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  3421                           
  3422                           ;ST7735_TFT.c: 593: while (x<y) {
  3423  000A42  D067               	goto	l4577
  3424  000A44                     l4557:
  3425                           
  3426                           ;ST7735_TFT.c: 594: if (f >= 0) {
  3427  000A44  BE36               	btfsc	fillCircleHelper@f+1,7,c
  3428  000A46  D00B               	goto	l177
  3429                           
  3430                           ;ST7735_TFT.c: 595: y--;
  3431  000A48  0639               	decf	fillCircleHelper@y,f,c
  3432  000A4A  A0D8               	btfss	status,0,c
  3433  000A4C  063A               	decf	fillCircleHelper@y+1,f,c
  3434                           
  3435                           ;ST7735_TFT.c: 596: ddF_y += 2;
  3436  000A4E  0E02               	movlw	2
  3437  000A50  2633               	addwf	fillCircleHelper@ddF_y,f,c
  3438  000A52  0E00               	movlw	0
  3439  000A54  2234               	addwfc	fillCircleHelper@ddF_y+1,f,c
  3440                           
  3441                           ;ST7735_TFT.c: 597: f += ddF_y;
  3442  000A56  5033               	movf	fillCircleHelper@ddF_y,w,c
  3443  000A58  2635               	addwf	fillCircleHelper@f,f,c
  3444  000A5A  5034               	movf	fillCircleHelper@ddF_y+1,w,c
  3445  000A5C  2236               	addwfc	fillCircleHelper@f+1,f,c
  3446  000A5E                     l177:
  3447                           
  3448                           ;ST7735_TFT.c: 598: }
  3449                           ;ST7735_TFT.c: 599: x++;
  3450  000A5E  4A37               	infsnz	fillCircleHelper@x,f,c
  3451  000A60  2A38               	incf	fillCircleHelper@x+1,f,c
  3452                           
  3453                           ;ST7735_TFT.c: 600: ddF_x += 2;
  3454  000A62  0E02               	movlw	2
  3455  000A64  2631               	addwf	fillCircleHelper@ddF_x,f,c
  3456  000A66  0E00               	movlw	0
  3457  000A68  2232               	addwfc	fillCircleHelper@ddF_x+1,f,c
  3458                           
  3459                           ;ST7735_TFT.c: 601: f += ddF_x;
  3460  000A6A  5031               	movf	fillCircleHelper@ddF_x,w,c
  3461  000A6C  2635               	addwf	fillCircleHelper@f,f,c
  3462  000A6E  5032               	movf	fillCircleHelper@ddF_x+1,w,c
  3463  000A70  2236               	addwfc	fillCircleHelper@f+1,f,c
  3464                           
  3465                           ;ST7735_TFT.c: 603: if (cornername & 0x1) {
  3466  000A72  A029               	btfss	fillCircleHelper@cornername,0,c
  3467  000A74  D025               	goto	l4573
  3468                           
  3469                           ;ST7735_TFT.c: 604: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  3470  000A76  5039               	movf	fillCircleHelper@y,w,c
  3471  000A78  0800               	sublw	0
  3472  000A7A  2425               	addwf	fillCircleHelper@y0,w,c
  3473  000A7C  6E18               	movwf	drawFastVLine@y,c
  3474  000A7E  5039               	movf	fillCircleHelper@y,w,c
  3475  000A80  2439               	addwf	fillCircleHelper@y,w,c
  3476  000A82  242B               	addwf	fillCircleHelper@delta,w,c
  3477  000A84  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3478  000A86  282F               	incf	??_fillCircleHelper,w,c
  3479  000A88  6E19               	movwf	drawFastVLine@h,c
  3480  000A8A  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3481  000A8E  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3482  000A92  5023               	movf	fillCircleHelper@x0,w,c
  3483  000A94  2437               	addwf	fillCircleHelper@x,w,c
  3484  000A96  EC1A  F008         	call	_drawFastVLine
  3485                           
  3486                           ;ST7735_TFT.c: 605: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  3487  000A9A  5037               	movf	fillCircleHelper@x,w,c
  3488  000A9C  0800               	sublw	0
  3489  000A9E  2425               	addwf	fillCircleHelper@y0,w,c
  3490  000AA0  6E18               	movwf	drawFastVLine@y,c
  3491  000AA2  5037               	movf	fillCircleHelper@x,w,c
  3492  000AA4  2437               	addwf	fillCircleHelper@x,w,c
  3493  000AA6  242B               	addwf	fillCircleHelper@delta,w,c
  3494  000AA8  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3495  000AAA  282F               	incf	??_fillCircleHelper,w,c
  3496  000AAC  6E19               	movwf	drawFastVLine@h,c
  3497  000AAE  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3498  000AB2  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3499  000AB6  5023               	movf	fillCircleHelper@x0,w,c
  3500  000AB8  2439               	addwf	fillCircleHelper@y,w,c
  3501  000ABA  EC1A  F008         	call	_drawFastVLine
  3502  000ABE  D000               	goto	l4573
  3503  000AC0                     l4573:
  3504                           
  3505                           ;ST7735_TFT.c: 606: }
  3506                           ;ST7735_TFT.c: 607: if (cornername & 0x2) {
  3507  000AC0  A229               	btfss	fillCircleHelper@cornername,1,c
  3508  000AC2  D027               	goto	l4577
  3509                           
  3510                           ;ST7735_TFT.c: 608: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  3511  000AC4  5039               	movf	fillCircleHelper@y,w,c
  3512  000AC6  0800               	sublw	0
  3513  000AC8  2425               	addwf	fillCircleHelper@y0,w,c
  3514  000ACA  6E18               	movwf	drawFastVLine@y,c
  3515  000ACC  5039               	movf	fillCircleHelper@y,w,c
  3516  000ACE  2439               	addwf	fillCircleHelper@y,w,c
  3517  000AD0  242B               	addwf	fillCircleHelper@delta,w,c
  3518  000AD2  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3519  000AD4  282F               	incf	??_fillCircleHelper,w,c
  3520  000AD6  6E19               	movwf	drawFastVLine@h,c
  3521  000AD8  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3522  000ADC  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3523  000AE0  5037               	movf	fillCircleHelper@x,w,c
  3524  000AE2  0800               	sublw	0
  3525  000AE4  2423               	addwf	fillCircleHelper@x0,w,c
  3526  000AE6  EC1A  F008         	call	_drawFastVLine
  3527                           
  3528                           ;ST7735_TFT.c: 609: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  3529  000AEA  5037               	movf	fillCircleHelper@x,w,c
  3530  000AEC  0800               	sublw	0
  3531  000AEE  2425               	addwf	fillCircleHelper@y0,w,c
  3532  000AF0  6E18               	movwf	drawFastVLine@y,c
  3533  000AF2  5037               	movf	fillCircleHelper@x,w,c
  3534  000AF4  2437               	addwf	fillCircleHelper@x,w,c
  3535  000AF6  242B               	addwf	fillCircleHelper@delta,w,c
  3536  000AF8  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3537  000AFA  282F               	incf	??_fillCircleHelper,w,c
  3538  000AFC  6E19               	movwf	drawFastVLine@h,c
  3539  000AFE  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3540  000B02  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3541  000B06  5039               	movf	fillCircleHelper@y,w,c
  3542  000B08  0800               	sublw	0
  3543  000B0A  2423               	addwf	fillCircleHelper@x0,w,c
  3544  000B0C  EC1A  F008         	call	_drawFastVLine
  3545  000B10  D000               	goto	l4577
  3546  000B12                     l4577:
  3547  000B12  5039               	movf	fillCircleHelper@y,w,c
  3548  000B14  5C37               	subwf	fillCircleHelper@x,w,c
  3549  000B16  5038               	movf	fillCircleHelper@x+1,w,c
  3550  000B18  0A80               	xorlw	128
  3551  000B1A  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3552  000B1C  503A               	movf	fillCircleHelper@y+1,w,c
  3553  000B1E  0A80               	xorlw	128
  3554  000B20  582F               	subwfb	??_fillCircleHelper& (0+255),w,c
  3555  000B22  A0D8               	btfss	status,0,c
  3556  000B24  D78F               	goto	l4557
  3557  000B26  0012               	return		;funcret
  3558  000B28                     __end_of_fillCircleHelper:
  3559                           	opt stack 0
  3560                           tblptru	equ	0xFF8
  3561                           tblptrh	equ	0xFF7
  3562                           tblptrl	equ	0xFF6
  3563                           tablat	equ	0xFF5
  3564                           prodh	equ	0xFF4
  3565                           prodl	equ	0xFF3
  3566                           intcon	equ	0xFF2
  3567                           intcon2	equ	0xFF1
  3568                           postinc0	equ	0xFEE
  3569                           wreg	equ	0xFE8
  3570                           postdec1	equ	0xFE5
  3571                           fsr1l	equ	0xFE1
  3572                           indf2	equ	0xFDF
  3573                           postinc2	equ	0xFDE
  3574                           postdec2	equ	0xFDD
  3575                           fsr2h	equ	0xFDA
  3576                           fsr2l	equ	0xFD9
  3577                           status	equ	0xFD8
  3578                           
  3579 ;; *************** function _drawCircle *****************
  3580 ;; Defined at:
  3581 ;;		line 528 in file "ST7735_TFT.c"
  3582 ;; Parameters:    Size  Location     Type
  3583 ;;  x0              2   27[COMRAM] int 
  3584 ;;  y0              2   29[COMRAM] int 
  3585 ;;  r               2   31[COMRAM] int 
  3586 ;;  color           2   33[COMRAM] unsigned int 
  3587 ;; Auto vars:     Size  Location     Type
  3588 ;;  y               2   45[COMRAM] int 
  3589 ;;  x               2   43[COMRAM] int 
  3590 ;;  f               2   41[COMRAM] int 
  3591 ;;  ddF_y           2   39[COMRAM] int 
  3592 ;;  ddF_x           2   37[COMRAM] int 
  3593 ;; Return value:  Size  Location     Type
  3594 ;;		None               void
  3595 ;; Registers used:
  3596 ;;		wreg, status,2, status,0, cstack
  3597 ;; Tracked objects:
  3598 ;;		On entry : 0/0
  3599 ;;		On exit  : 0/0
  3600 ;;		Unchanged: 0/0
  3601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3602 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3603 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3604 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3605 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3606 ;;Total ram usage:       20 bytes
  3607 ;; Hardware stack levels used:    1
  3608 ;; Hardware stack levels required when called:    7
  3609 ;; This function calls:
  3610 ;;		_drawPixel
  3611 ;; This function is called by:
  3612 ;;		_main
  3613 ;; This function uses a non-reentrant model
  3614 ;;
  3615                           
  3616                           	psect	text8
  3617  000588                     __ptext8:
  3618                           	opt stack 0
  3619  000588                     _drawCircle:
  3620                           	opt stack 23
  3621                           
  3622                           ;ST7735_TFT.c: 530: signed int f, ddF_x, ddF_y, x, y;
  3623                           ;ST7735_TFT.c: 531: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3624                           
  3625                           ;incstack = 0
  3626  000588  C020  F024         	movff	drawCircle@r,??_drawCircle
  3627  00058C  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3628  000590  1E24               	comf	??_drawCircle,f,c
  3629  000592  1E25               	comf	??_drawCircle+1,f,c
  3630  000594  4A24               	infsnz	??_drawCircle,f,c
  3631  000596  2A25               	incf	??_drawCircle+1,f,c
  3632  000598  0E01               	movlw	1
  3633  00059A  2424               	addwf	??_drawCircle,w,c
  3634  00059C  6E2A               	movwf	drawCircle@f,c
  3635  00059E  0E00               	movlw	0
  3636  0005A0  2025               	addwfc	??_drawCircle+1,w,c
  3637  0005A2  6E2B               	movwf	drawCircle@f+1,c
  3638  0005A4  0E00               	movlw	0
  3639  0005A6  6E27               	movwf	drawCircle@ddF_x+1,c
  3640  0005A8  0E01               	movlw	1
  3641  0005AA  6E26               	movwf	drawCircle@ddF_x,c
  3642  0005AC  C020  F024         	movff	drawCircle@r,??_drawCircle
  3643  0005B0  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3644  0005B4  90D8               	bcf	status,0,c
  3645  0005B6  3624               	rlcf	??_drawCircle,f,c
  3646  0005B8  3625               	rlcf	??_drawCircle+1,f,c
  3647  0005BA  1E24               	comf	??_drawCircle,f,c
  3648  0005BC  1E25               	comf	??_drawCircle+1,f,c
  3649  0005BE  4A24               	infsnz	??_drawCircle,f,c
  3650  0005C0  2A25               	incf	??_drawCircle+1,f,c
  3651  0005C2  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  3652  0005C6  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  3653  0005CA  0E00               	movlw	0
  3654  0005CC  6E2D               	movwf	drawCircle@x+1,c
  3655  0005CE  0E00               	movlw	0
  3656  0005D0  6E2C               	movwf	drawCircle@x,c
  3657  0005D2  C020  F02E         	movff	drawCircle@r,drawCircle@y
  3658  0005D6  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  3659                           
  3660                           ;ST7735_TFT.c: 532: drawPixel(x0 , y0 + r, color);
  3661  0005DA  501E               	movf	drawCircle@y0,w,c
  3662  0005DC  2420               	addwf	drawCircle@r,w,c
  3663  0005DE  6E18               	movwf	drawPixel@y,c
  3664  0005E0  C022  F019         	movff	drawCircle@color,drawPixel@color
  3665  0005E4  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3666  0005E8  501C               	movf	drawCircle@x0,w,c
  3667  0005EA  ECC3  F00B         	call	_drawPixel
  3668                           
  3669                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 - r, color);
  3670  0005EE  5020               	movf	drawCircle@r,w,c
  3671  0005F0  0800               	sublw	0
  3672  0005F2  241E               	addwf	drawCircle@y0,w,c
  3673  0005F4  6E18               	movwf	drawPixel@y,c
  3674  0005F6  C022  F019         	movff	drawCircle@color,drawPixel@color
  3675  0005FA  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3676  0005FE  501C               	movf	drawCircle@x0,w,c
  3677  000600  ECC3  F00B         	call	_drawPixel
  3678                           
  3679                           ;ST7735_TFT.c: 534: drawPixel(x0+r, y0 , color);
  3680  000604  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3681  000608  C022  F019         	movff	drawCircle@color,drawPixel@color
  3682  00060C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3683  000610  501C               	movf	drawCircle@x0,w,c
  3684  000612  2420               	addwf	drawCircle@r,w,c
  3685  000614  ECC3  F00B         	call	_drawPixel
  3686                           
  3687                           ;ST7735_TFT.c: 535: drawPixel(x0-r, y0 , color);
  3688  000618  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3689  00061C  C022  F019         	movff	drawCircle@color,drawPixel@color
  3690  000620  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3691  000624  5020               	movf	drawCircle@r,w,c
  3692  000626  0800               	sublw	0
  3693  000628  241C               	addwf	drawCircle@x0,w,c
  3694  00062A  ECC3  F00B         	call	_drawPixel
  3695                           
  3696                           ;ST7735_TFT.c: 536: while (x < y) {
  3697  00062E  D078               	goto	l4761
  3698  000630                     l4733:
  3699                           
  3700                           ;ST7735_TFT.c: 537: if (f >= 0) {
  3701  000630  BE2B               	btfsc	drawCircle@f+1,7,c
  3702  000632  D00B               	goto	l159
  3703                           
  3704                           ;ST7735_TFT.c: 538: y--;
  3705  000634  062E               	decf	drawCircle@y,f,c
  3706  000636  A0D8               	btfss	status,0,c
  3707  000638  062F               	decf	drawCircle@y+1,f,c
  3708                           
  3709                           ;ST7735_TFT.c: 539: ddF_y += 2;
  3710  00063A  0E02               	movlw	2
  3711  00063C  2628               	addwf	drawCircle@ddF_y,f,c
  3712  00063E  0E00               	movlw	0
  3713  000640  2229               	addwfc	drawCircle@ddF_y+1,f,c
  3714                           
  3715                           ;ST7735_TFT.c: 540: f += ddF_y;
  3716  000642  5028               	movf	drawCircle@ddF_y,w,c
  3717  000644  262A               	addwf	drawCircle@f,f,c
  3718  000646  5029               	movf	drawCircle@ddF_y+1,w,c
  3719  000648  222B               	addwfc	drawCircle@f+1,f,c
  3720  00064A                     l159:
  3721                           
  3722                           ;ST7735_TFT.c: 541: }
  3723                           ;ST7735_TFT.c: 542: x++;
  3724  00064A  4A2C               	infsnz	drawCircle@x,f,c
  3725  00064C  2A2D               	incf	drawCircle@x+1,f,c
  3726                           
  3727                           ;ST7735_TFT.c: 543: ddF_x += 2;
  3728  00064E  0E02               	movlw	2
  3729  000650  2626               	addwf	drawCircle@ddF_x,f,c
  3730  000652  0E00               	movlw	0
  3731  000654  2227               	addwfc	drawCircle@ddF_x+1,f,c
  3732                           
  3733                           ;ST7735_TFT.c: 544: f += ddF_x;
  3734  000656  5026               	movf	drawCircle@ddF_x,w,c
  3735  000658  262A               	addwf	drawCircle@f,f,c
  3736  00065A  5027               	movf	drawCircle@ddF_x+1,w,c
  3737  00065C  222B               	addwfc	drawCircle@f+1,f,c
  3738                           
  3739                           ;ST7735_TFT.c: 545: drawPixel(x0 + x, y0 + y, color);
  3740  00065E  501E               	movf	drawCircle@y0,w,c
  3741  000660  242E               	addwf	drawCircle@y,w,c
  3742  000662  6E18               	movwf	drawPixel@y,c
  3743  000664  C022  F019         	movff	drawCircle@color,drawPixel@color
  3744  000668  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3745  00066C  501C               	movf	drawCircle@x0,w,c
  3746  00066E  242C               	addwf	drawCircle@x,w,c
  3747  000670  ECC3  F00B         	call	_drawPixel
  3748                           
  3749                           ;ST7735_TFT.c: 546: drawPixel(x0 - x, y0 + y, color);
  3750  000674  501E               	movf	drawCircle@y0,w,c
  3751  000676  242E               	addwf	drawCircle@y,w,c
  3752  000678  6E18               	movwf	drawPixel@y,c
  3753  00067A  C022  F019         	movff	drawCircle@color,drawPixel@color
  3754  00067E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3755  000682  502C               	movf	drawCircle@x,w,c
  3756  000684  0800               	sublw	0
  3757  000686  241C               	addwf	drawCircle@x0,w,c
  3758  000688  ECC3  F00B         	call	_drawPixel
  3759                           
  3760                           ;ST7735_TFT.c: 547: drawPixel(x0 + x, y0 - y, color);
  3761  00068C  502E               	movf	drawCircle@y,w,c
  3762  00068E  0800               	sublw	0
  3763  000690  241E               	addwf	drawCircle@y0,w,c
  3764  000692  6E18               	movwf	drawPixel@y,c
  3765  000694  C022  F019         	movff	drawCircle@color,drawPixel@color
  3766  000698  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3767  00069C  501C               	movf	drawCircle@x0,w,c
  3768  00069E  242C               	addwf	drawCircle@x,w,c
  3769  0006A0  ECC3  F00B         	call	_drawPixel
  3770                           
  3771                           ;ST7735_TFT.c: 548: drawPixel(x0 - x, y0 - y, color);
  3772  0006A4  502E               	movf	drawCircle@y,w,c
  3773  0006A6  0800               	sublw	0
  3774  0006A8  241E               	addwf	drawCircle@y0,w,c
  3775  0006AA  6E18               	movwf	drawPixel@y,c
  3776  0006AC  C022  F019         	movff	drawCircle@color,drawPixel@color
  3777  0006B0  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3778  0006B4  502C               	movf	drawCircle@x,w,c
  3779  0006B6  0800               	sublw	0
  3780  0006B8  241C               	addwf	drawCircle@x0,w,c
  3781  0006BA  ECC3  F00B         	call	_drawPixel
  3782                           
  3783                           ;ST7735_TFT.c: 549: drawPixel(x0 + y, y0 + x, color);
  3784  0006BE  501E               	movf	drawCircle@y0,w,c
  3785  0006C0  242C               	addwf	drawCircle@x,w,c
  3786  0006C2  6E18               	movwf	drawPixel@y,c
  3787  0006C4  C022  F019         	movff	drawCircle@color,drawPixel@color
  3788  0006C8  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3789  0006CC  501C               	movf	drawCircle@x0,w,c
  3790  0006CE  242E               	addwf	drawCircle@y,w,c
  3791  0006D0  ECC3  F00B         	call	_drawPixel
  3792                           
  3793                           ;ST7735_TFT.c: 550: drawPixel(x0 - y, y0 + x, color);
  3794  0006D4  501E               	movf	drawCircle@y0,w,c
  3795  0006D6  242C               	addwf	drawCircle@x,w,c
  3796  0006D8  6E18               	movwf	drawPixel@y,c
  3797  0006DA  C022  F019         	movff	drawCircle@color,drawPixel@color
  3798  0006DE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3799  0006E2  502E               	movf	drawCircle@y,w,c
  3800  0006E4  0800               	sublw	0
  3801  0006E6  241C               	addwf	drawCircle@x0,w,c
  3802  0006E8  ECC3  F00B         	call	_drawPixel
  3803                           
  3804                           ;ST7735_TFT.c: 551: drawPixel(x0 + y, y0 - x, color);
  3805  0006EC  502C               	movf	drawCircle@x,w,c
  3806  0006EE  0800               	sublw	0
  3807  0006F0  241E               	addwf	drawCircle@y0,w,c
  3808  0006F2  6E18               	movwf	drawPixel@y,c
  3809  0006F4  C022  F019         	movff	drawCircle@color,drawPixel@color
  3810  0006F8  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3811  0006FC  501C               	movf	drawCircle@x0,w,c
  3812  0006FE  242E               	addwf	drawCircle@y,w,c
  3813  000700  ECC3  F00B         	call	_drawPixel
  3814                           
  3815                           ;ST7735_TFT.c: 552: drawPixel(x0 - y, y0 - x, color);
  3816  000704  502C               	movf	drawCircle@x,w,c
  3817  000706  0800               	sublw	0
  3818  000708  241E               	addwf	drawCircle@y0,w,c
  3819  00070A  6E18               	movwf	drawPixel@y,c
  3820  00070C  C022  F019         	movff	drawCircle@color,drawPixel@color
  3821  000710  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3822  000714  502E               	movf	drawCircle@y,w,c
  3823  000716  0800               	sublw	0
  3824  000718  241C               	addwf	drawCircle@x0,w,c
  3825  00071A  ECC3  F00B         	call	_drawPixel
  3826  00071E  D000               	goto	l4761
  3827  000720                     l4761:
  3828  000720  502E               	movf	drawCircle@y,w,c
  3829  000722  5C2C               	subwf	drawCircle@x,w,c
  3830  000724  502D               	movf	drawCircle@x+1,w,c
  3831  000726  0A80               	xorlw	128
  3832  000728  6E24               	movwf	??_drawCircle& (0+255),c
  3833  00072A  502F               	movf	drawCircle@y+1,w,c
  3834  00072C  0A80               	xorlw	128
  3835  00072E  5824               	subwfb	??_drawCircle& (0+255),w,c
  3836  000730  A0D8               	btfss	status,0,c
  3837  000732  D77E               	goto	l4733
  3838  000734  0012               	return		;funcret
  3839  000736                     __end_of_drawCircle:
  3840                           	opt stack 0
  3841                           tblptru	equ	0xFF8
  3842                           tblptrh	equ	0xFF7
  3843                           tblptrl	equ	0xFF6
  3844                           tablat	equ	0xFF5
  3845                           prodh	equ	0xFF4
  3846                           prodl	equ	0xFF3
  3847                           intcon	equ	0xFF2
  3848                           intcon2	equ	0xFF1
  3849                           postinc0	equ	0xFEE
  3850                           wreg	equ	0xFE8
  3851                           postdec1	equ	0xFE5
  3852                           fsr1l	equ	0xFE1
  3853                           indf2	equ	0xFDF
  3854                           postinc2	equ	0xFDE
  3855                           postdec2	equ	0xFDD
  3856                           fsr2h	equ	0xFDA
  3857                           fsr2l	equ	0xFD9
  3858                           status	equ	0xFD8
  3859                           
  3860 ;; *************** function ___awdiv *****************
  3861 ;; Defined at:
  3862 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  3863 ;; Parameters:    Size  Location     Type
  3864 ;;  dividend        2   22[COMRAM] int 
  3865 ;;  divisor         2   24[COMRAM] int 
  3866 ;; Auto vars:     Size  Location     Type
  3867 ;;  quotient        2   28[COMRAM] int 
  3868 ;;  sign            1   27[COMRAM] unsigned char 
  3869 ;;  counter         1   26[COMRAM] unsigned char 
  3870 ;; Return value:  Size  Location     Type
  3871 ;;                  2   22[COMRAM] int 
  3872 ;; Registers used:
  3873 ;;		wreg, status,2, status,0
  3874 ;; Tracked objects:
  3875 ;;		On entry : 0/0
  3876 ;;		On exit  : 0/0
  3877 ;;		Unchanged: 0/0
  3878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3879 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3880 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3882 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3883 ;;Total ram usage:        8 bytes
  3884 ;; Hardware stack levels used:    1
  3885 ;; Hardware stack levels required when called:    3
  3886 ;; This function calls:
  3887 ;;		Nothing
  3888 ;; This function is called by:
  3889 ;;		_main
  3890 ;; This function uses a non-reentrant model
  3891 ;;
  3892                           
  3893                           	psect	text9
  3894  000F10                     __ptext9:
  3895                           	opt stack 0
  3896  000F10                     ___awdiv:
  3897                           	opt stack 27
  3898                           
  3899                           ;incstack = 0
  3900  000F10  0E00               	movlw	0
  3901  000F12  6E1C               	movwf	___awdiv@sign,c
  3902  000F14  AE1A               	btfss	___awdiv@divisor+1,7,c
  3903  000F16  D007               	goto	l5037
  3904  000F18  6C19               	negf	___awdiv@divisor,c
  3905  000F1A  1E1A               	comf	___awdiv@divisor+1,f,c
  3906  000F1C  B0D8               	btfsc	status,0,c
  3907  000F1E  2A1A               	incf	___awdiv@divisor+1,f,c
  3908  000F20  0E01               	movlw	1
  3909  000F22  6E1C               	movwf	___awdiv@sign,c
  3910  000F24  D000               	goto	l5037
  3911  000F26                     l5037:
  3912  000F26  AE18               	btfss	___awdiv@dividend+1,7,c
  3913  000F28  D007               	goto	l5043
  3914  000F2A  6C17               	negf	___awdiv@dividend,c
  3915  000F2C  1E18               	comf	___awdiv@dividend+1,f,c
  3916  000F2E  B0D8               	btfsc	status,0,c
  3917  000F30  2A18               	incf	___awdiv@dividend+1,f,c
  3918  000F32  0E01               	movlw	1
  3919  000F34  1A1C               	xorwf	___awdiv@sign,f,c
  3920  000F36  D000               	goto	l5043
  3921  000F38                     l5043:
  3922  000F38  0E00               	movlw	0
  3923  000F3A  6E1E               	movwf	___awdiv@quotient+1,c
  3924  000F3C  0E00               	movlw	0
  3925  000F3E  6E1D               	movwf	___awdiv@quotient,c
  3926  000F40  5019               	movf	___awdiv@divisor,w,c
  3927  000F42  101A               	iorwf	___awdiv@divisor+1,w,c
  3928  000F44  B4D8               	btfsc	status,2,c
  3929  000F46  D021               	goto	l5065
  3930  000F48  0E01               	movlw	1
  3931  000F4A  6E1B               	movwf	___awdiv@counter,c
  3932  000F4C  D005               	goto	l5051
  3933  000F4E                     l5049:
  3934  000F4E  90D8               	bcf	status,0,c
  3935  000F50  3619               	rlcf	___awdiv@divisor,f,c
  3936  000F52  361A               	rlcf	___awdiv@divisor+1,f,c
  3937  000F54  2A1B               	incf	___awdiv@counter,f,c
  3938  000F56  D000               	goto	l5051
  3939  000F58                     l5051:
  3940  000F58  BE1A               	btfsc	___awdiv@divisor+1,7,c
  3941  000F5A  D002               	goto	l5053
  3942  000F5C  D7F8               	goto	l5049
  3943  000F5E  D000               	goto	l5053
  3944  000F60                     l5053:
  3945  000F60  90D8               	bcf	status,0,c
  3946  000F62  361D               	rlcf	___awdiv@quotient,f,c
  3947  000F64  361E               	rlcf	___awdiv@quotient+1,f,c
  3948  000F66  5019               	movf	___awdiv@divisor,w,c
  3949  000F68  5C17               	subwf	___awdiv@dividend,w,c
  3950  000F6A  501A               	movf	___awdiv@divisor+1,w,c
  3951  000F6C  5818               	subwfb	___awdiv@dividend+1,w,c
  3952  000F6E  A0D8               	btfss	status,0,c
  3953  000F70  D006               	goto	l5061
  3954  000F72  5019               	movf	___awdiv@divisor,w,c
  3955  000F74  5E17               	subwf	___awdiv@dividend,f,c
  3956  000F76  501A               	movf	___awdiv@divisor+1,w,c
  3957  000F78  5A18               	subwfb	___awdiv@dividend+1,f,c
  3958  000F7A  801D               	bsf	___awdiv@quotient,0,c
  3959  000F7C  D000               	goto	l5061
  3960  000F7E                     l5061:
  3961  000F7E  90D8               	bcf	status,0,c
  3962  000F80  321A               	rrcf	___awdiv@divisor+1,f,c
  3963  000F82  3219               	rrcf	___awdiv@divisor,f,c
  3964  000F84  2E1B               	decfsz	___awdiv@counter,f,c
  3965  000F86  D7EC               	goto	l5053
  3966  000F88  D000               	goto	l5065
  3967  000F8A                     l5065:
  3968  000F8A  501C               	movf	___awdiv@sign,w,c
  3969  000F8C  B4D8               	btfsc	status,2,c
  3970  000F8E  D005               	goto	l5069
  3971  000F90  6C1D               	negf	___awdiv@quotient,c
  3972  000F92  1E1E               	comf	___awdiv@quotient+1,f,c
  3973  000F94  B0D8               	btfsc	status,0,c
  3974  000F96  2A1E               	incf	___awdiv@quotient+1,f,c
  3975  000F98  D000               	goto	l5069
  3976  000F9A                     l5069:
  3977  000F9A  C01D  F017         	movff	___awdiv@quotient,?___awdiv
  3978  000F9E  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
  3979  000FA2  D000               	goto	l876
  3980  000FA4                     l876:
  3981  000FA4  0012               	return		;funcret
  3982  000FA6                     __end_of___awdiv:
  3983                           	opt stack 0
  3984                           tblptru	equ	0xFF8
  3985                           tblptrh	equ	0xFF7
  3986                           tblptrl	equ	0xFF6
  3987                           tablat	equ	0xFF5
  3988                           prodh	equ	0xFF4
  3989                           prodl	equ	0xFF3
  3990                           intcon	equ	0xFF2
  3991                           intcon2	equ	0xFF1
  3992                           postinc0	equ	0xFEE
  3993                           wreg	equ	0xFE8
  3994                           postdec1	equ	0xFE5
  3995                           fsr1l	equ	0xFE1
  3996                           indf2	equ	0xFDF
  3997                           postinc2	equ	0xFDE
  3998                           postdec2	equ	0xFDD
  3999                           fsr2h	equ	0xFDA
  4000                           fsr2l	equ	0xFD9
  4001                           status	equ	0xFD8
  4002                           
  4003 ;; *************** function _Wait_One_Sec *****************
  4004 ;; Defined at:
  4005 ;;		line 111 in file "Lab11p4.c"
  4006 ;; Parameters:    Size  Location     Type
  4007 ;;		None
  4008 ;; Auto vars:     Size  Location     Type
  4009 ;;  i               2   16[COMRAM] int 
  4010 ;; Return value:  Size  Location     Type
  4011 ;;		None               void
  4012 ;; Registers used:
  4013 ;;		wreg, status,2, status,0
  4014 ;; Tracked objects:
  4015 ;;		On entry : 0/0
  4016 ;;		On exit  : 0/0
  4017 ;;		Unchanged: 0/0
  4018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4020 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4022 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4023 ;;Total ram usage:        2 bytes
  4024 ;; Hardware stack levels used:    1
  4025 ;; Hardware stack levels required when called:    3
  4026 ;; This function calls:
  4027 ;;		Nothing
  4028 ;; This function is called by:
  4029 ;;		_main
  4030 ;; This function uses a non-reentrant model
  4031 ;;
  4032                           
  4033                           	psect	text10
  4034  001808                     __ptext10:
  4035                           	opt stack 0
  4036  001808                     _Wait_One_Sec:
  4037                           	opt stack 27
  4038                           
  4039                           ;Lab11p4.c: 113: for(int i=0; i <17000; i++);
  4040                           
  4041                           ;incstack = 0
  4042  001808  0E00               	movlw	0
  4043  00180A  6E12               	movwf	Wait_One_Sec@i+1,c
  4044  00180C  0E00               	movlw	0
  4045  00180E  6E11               	movwf	Wait_One_Sec@i,c
  4046  001810                     l4861:
  4047  001810  BE12               	btfsc	Wait_One_Sec@i+1,7,c
  4048  001812  D008               	goto	l4865
  4049  001814  0E68               	movlw	104
  4050  001816  5C11               	subwf	Wait_One_Sec@i,w,c
  4051  001818  0E42               	movlw	66
  4052  00181A  5812               	subwfb	Wait_One_Sec@i+1,w,c
  4053  00181C  B0D8               	btfsc	status,0,c
  4054  00181E  D005               	goto	l553
  4055  001820  D001               	goto	l4865
  4056  001822  D003               	goto	l553
  4057  001824                     l4865:
  4058  001824  4A11               	infsnz	Wait_One_Sec@i,f,c
  4059  001826  2A12               	incf	Wait_One_Sec@i+1,f,c
  4060  001828  D7F3               	goto	l4861
  4061  00182A                     l553:
  4062  00182A  0012               	return		;funcret
  4063  00182C                     __end_of_Wait_One_Sec:
  4064                           	opt stack 0
  4065                           tblptru	equ	0xFF8
  4066                           tblptrh	equ	0xFF7
  4067                           tblptrl	equ	0xFF6
  4068                           tablat	equ	0xFF5
  4069                           prodh	equ	0xFF4
  4070                           prodl	equ	0xFF3
  4071                           intcon	equ	0xFF2
  4072                           intcon2	equ	0xFF1
  4073                           postinc0	equ	0xFEE
  4074                           wreg	equ	0xFE8
  4075                           postdec1	equ	0xFE5
  4076                           fsr1l	equ	0xFE1
  4077                           indf2	equ	0xFDF
  4078                           postinc2	equ	0xFDE
  4079                           postdec2	equ	0xFDD
  4080                           fsr2h	equ	0xFDA
  4081                           fsr2l	equ	0xFD9
  4082                           status	equ	0xFD8
  4083                           
  4084 ;; *************** function _Do_Init *****************
  4085 ;; Defined at:
  4086 ;;		line 117 in file "Lab11p4.c"
  4087 ;; Parameters:    Size  Location     Type
  4088 ;;		None
  4089 ;; Auto vars:     Size  Location     Type
  4090 ;;		None
  4091 ;; Return value:  Size  Location     Type
  4092 ;;		None               void
  4093 ;; Registers used:
  4094 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4095 ;; Tracked objects:
  4096 ;;		On entry : 0/0
  4097 ;;		On exit  : 0/0
  4098 ;;		Unchanged: 0/0
  4099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4103 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4104 ;;Total ram usage:        0 bytes
  4105 ;; Hardware stack levels used:    1
  4106 ;; Hardware stack levels required when called:   11
  4107 ;; This function calls:
  4108 ;;		_DS1621_Init
  4109 ;;		_I2C_Init
  4110 ;;		_Initialize_Screen
  4111 ;;		_init_INTERRUPT
  4112 ;;		_init_UART
  4113 ;; This function is called by:
  4114 ;;		_main
  4115 ;; This function uses a non-reentrant model
  4116 ;;
  4117                           
  4118                           	psect	text11
  4119  0015EA                     __ptext11:
  4120                           	opt stack 0
  4121  0015EA                     _Do_Init:
  4122                           	opt stack 19
  4123                           
  4124                           ;Lab11p4.c: 119: init_UART();
  4125                           
  4126                           ;incstack = 0
  4127  0015EA  EC6C  F00C         	call	_init_UART	;wreg free
  4128                           
  4129                           ;Lab11p4.c: 120: init_INTERRUPT();
  4130  0015EE  ECAB  F00B         	call	_init_INTERRUPT	;wreg free
  4131                           
  4132                           ;Lab11p4.c: 121: OSCCON=0x70;
  4133  0015F2  0E70               	movlw	112
  4134  0015F4  6ED3               	movwf	4051,c	;volatile
  4135                           
  4136                           ;Lab11p4.c: 123: ADCON1= 0x0F;
  4137  0015F6  0E0F               	movlw	15
  4138  0015F8  6EC1               	movwf	4033,c	;volatile
  4139                           
  4140                           ;Lab11p4.c: 124: TRISA = 0x14;
  4141  0015FA  0E14               	movlw	20
  4142  0015FC  6E92               	movwf	3986,c	;volatile
  4143                           
  4144                           ;Lab11p4.c: 125: TRISB = 0x01;
  4145  0015FE  0E01               	movlw	1
  4146  001600  6E93               	movwf	3987,c	;volatile
  4147                           
  4148                           ;Lab11p4.c: 126: TRISC = 0x00;
  4149  001602  0E00               	movlw	0
  4150  001604  6E94               	movwf	3988,c	;volatile
  4151                           
  4152                           ;Lab11p4.c: 127: TRISD = 0x00;
  4153  001606  0E00               	movlw	0
  4154  001608  6E95               	movwf	3989,c	;volatile
  4155                           
  4156                           ;Lab11p4.c: 128: TRISE = 0x00;
  4157  00160A  0E00               	movlw	0
  4158  00160C  6E96               	movwf	3990,c	;volatile
  4159                           
  4160                           ;Lab11p4.c: 129: RBPU=0;
  4161  00160E  9EF1               	bcf	intcon2,7,c	;volatile
  4162                           
  4163                           ;Lab11p4.c: 130: I2C_Init(100000);
  4164  001610  0EA0               	movlw	160
  4165  001612  6E11               	movwf	I2C_Init@c,c
  4166  001614  0E86               	movlw	134
  4167  001616  6E12               	movwf	I2C_Init@c+1,c
  4168  001618  0E01               	movlw	1
  4169  00161A  6E13               	movwf	I2C_Init@c+2,c
  4170  00161C  0E00               	movlw	0
  4171  00161E  6E14               	movwf	I2C_Init@c+3,c
  4172  001620  ECD0  F00C         	call	_I2C_Init	;wreg free
  4173                           
  4174                           ;Lab11p4.c: 132: Initialize_Screen();
  4175  001624  ECD3  F007         	call	_Initialize_Screen	;wreg free
  4176                           
  4177                           ;Lab11p4.c: 133: DS1621_Init();
  4178  001628  EC37  F00C         	call	_DS1621_Init	;wreg free
  4179  00162C  0012               	return		;funcret
  4180  00162E                     __end_of_Do_Init:
  4181                           	opt stack 0
  4182                           tblptru	equ	0xFF8
  4183                           tblptrh	equ	0xFF7
  4184                           tblptrl	equ	0xFF6
  4185                           tablat	equ	0xFF5
  4186                           prodh	equ	0xFF4
  4187                           prodl	equ	0xFF3
  4188                           intcon	equ	0xFF2
  4189                           intcon2	equ	0xFF1
  4190                           postinc0	equ	0xFEE
  4191                           wreg	equ	0xFE8
  4192                           postdec1	equ	0xFE5
  4193                           fsr1l	equ	0xFE1
  4194                           indf2	equ	0xFDF
  4195                           postinc2	equ	0xFDE
  4196                           postdec2	equ	0xFDD
  4197                           fsr2h	equ	0xFDA
  4198                           fsr2l	equ	0xFD9
  4199                           status	equ	0xFD8
  4200                           
  4201 ;; *************** function _init_UART *****************
  4202 ;; Defined at:
  4203 ;;		line 104 in file "Lab11p4.c"
  4204 ;; Parameters:    Size  Location     Type
  4205 ;;		None
  4206 ;; Auto vars:     Size  Location     Type
  4207 ;;		None
  4208 ;; Return value:  Size  Location     Type
  4209 ;;		None               void
  4210 ;; Registers used:
  4211 ;;		wreg, status,2, cstack
  4212 ;; Tracked objects:
  4213 ;;		On entry : 0/0
  4214 ;;		On exit  : 0/0
  4215 ;;		Unchanged: 0/0
  4216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4221 ;;Total ram usage:        0 bytes
  4222 ;; Hardware stack levels used:    1
  4223 ;; Hardware stack levels required when called:    4
  4224 ;; This function calls:
  4225 ;;		_OpenUSART
  4226 ;; This function is called by:
  4227 ;;		_Do_Init
  4228 ;; This function uses a non-reentrant model
  4229 ;;
  4230                           
  4231                           	psect	text12
  4232  0018D8                     __ptext12:
  4233                           	opt stack 0
  4234  0018D8                     _init_UART:
  4235                           	opt stack 25
  4236                           
  4237                           ;Lab11p4.c: 106: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b111111
      +                          11 & 0b11111111, 25);
  4238                           
  4239                           ;incstack = 0
  4240  0018D8  0E00               	movlw	0
  4241  0018DA  6E12               	movwf	OpenUSART@spbrg+1,c
  4242  0018DC  0E19               	movlw	25
  4243  0018DE  6E11               	movwf	OpenUSART@spbrg,c
  4244  0018E0  0E3C               	movlw	60
  4245  0018E2  EC18  F009         	call	_OpenUSART
  4246                           
  4247                           ;Lab11p4.c: 107: OSCCON = 0x70;
  4248  0018E6  0E70               	movlw	112
  4249  0018E8  6ED3               	movwf	4051,c	;volatile
  4250  0018EA  0012               	return		;funcret
  4251  0018EC                     __end_of_init_UART:
  4252                           	opt stack 0
  4253                           tblptru	equ	0xFF8
  4254                           tblptrh	equ	0xFF7
  4255                           tblptrl	equ	0xFF6
  4256                           tablat	equ	0xFF5
  4257                           prodh	equ	0xFF4
  4258                           prodl	equ	0xFF3
  4259                           intcon	equ	0xFF2
  4260                           intcon2	equ	0xFF1
  4261                           postinc0	equ	0xFEE
  4262                           wreg	equ	0xFE8
  4263                           postdec1	equ	0xFE5
  4264                           fsr1l	equ	0xFE1
  4265                           indf2	equ	0xFDF
  4266                           postinc2	equ	0xFDE
  4267                           postdec2	equ	0xFDD
  4268                           fsr2h	equ	0xFDA
  4269                           fsr2l	equ	0xFD9
  4270                           status	equ	0xFD8
  4271                           
  4272 ;; *************** function _OpenUSART *****************
  4273 ;; Defined at:
  4274 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  4275 ;; Parameters:    Size  Location     Type
  4276 ;;  config          1    wreg     unsigned char 
  4277 ;;  spbrg           2   16[COMRAM] unsigned int 
  4278 ;; Auto vars:     Size  Location     Type
  4279 ;;  config          1   18[COMRAM] unsigned char 
  4280 ;; Return value:  Size  Location     Type
  4281 ;;		None               void
  4282 ;; Registers used:
  4283 ;;		wreg, status,2
  4284 ;; Tracked objects:
  4285 ;;		On entry : 0/0
  4286 ;;		On exit  : 0/0
  4287 ;;		Unchanged: 0/0
  4288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4289 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4290 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4292 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4293 ;;Total ram usage:        3 bytes
  4294 ;; Hardware stack levels used:    1
  4295 ;; Hardware stack levels required when called:    3
  4296 ;; This function calls:
  4297 ;;		Nothing
  4298 ;; This function is called by:
  4299 ;;		_init_UART
  4300 ;; This function uses a non-reentrant model
  4301 ;;
  4302                           
  4303                           	psect	text13
  4304  001230                     __ptext13:
  4305                           	opt stack 0
  4306  001230                     _OpenUSART:
  4307                           	opt stack 25
  4308                           
  4309                           ;incstack = 0
  4310                           ;OpenUSART@config stored from wreg
  4311  001230  6E13               	movwf	OpenUSART@config,c
  4312  001232  0E00               	movlw	0
  4313  001234  6EAC               	movwf	4012,c	;volatile
  4314  001236  0E00               	movlw	0
  4315  001238  6EAB               	movwf	4011,c	;volatile
  4316  00123A  A013               	btfss	OpenUSART@config,0,c
  4317  00123C  D002               	goto	l4497
  4318  00123E  88AC               	bsf	4012,4,c	;volatile
  4319  001240  D000               	goto	l4497
  4320  001242                     l4497:
  4321  001242  A213               	btfss	OpenUSART@config,1,c
  4322  001244  D003               	goto	l4501
  4323  001246  8CAC               	bsf	4012,6,c	;volatile
  4324  001248  8CAB               	bsf	4011,6,c	;volatile
  4325  00124A  D000               	goto	l4501
  4326  00124C                     l4501:
  4327  00124C  A413               	btfss	OpenUSART@config,2,c
  4328  00124E  D002               	goto	l4505
  4329  001250  8EAC               	bsf	4012,7,c	;volatile
  4330  001252  D000               	goto	l4505
  4331  001254                     l4505:
  4332  001254  A613               	btfss	OpenUSART@config,3,c
  4333  001256  D002               	goto	l671
  4334  001258  88AB               	bsf	4011,4,c	;volatile
  4335  00125A  D002               	goto	l4509
  4336  00125C                     l671:
  4337  00125C  8AAB               	bsf	4011,5,c	;volatile
  4338  00125E  D000               	goto	l4509
  4339  001260                     l4509:
  4340  001260  B813               	btfsc	OpenUSART@config,4,c
  4341  001262  84AC               	bsf	4012,2,c	;volatile
  4342  001264  989E               	bcf	3998,4,c	;volatile
  4343  001266  AA13               	btfss	OpenUSART@config,5,c
  4344  001268  D002               	goto	l4517
  4345  00126A  86AB               	bsf	4011,3,c	;volatile
  4346  00126C  D000               	goto	l4517
  4347  00126E                     l4517:
  4348  00126E  AC13               	btfss	OpenUSART@config,6,c
  4349  001270  D002               	goto	l675
  4350  001272  8A9D               	bsf	3997,5,c	;volatile
  4351  001274  D001               	goto	l676
  4352  001276                     l675:
  4353  001276  9A9D               	bcf	3997,5,c	;volatile
  4354  001278                     l676:
  4355  001278  9A9E               	bcf	3998,5,c	;volatile
  4356  00127A  AE13               	btfss	OpenUSART@config,7,c
  4357  00127C  D002               	goto	l677
  4358  00127E  889D               	bsf	3997,4,c	;volatile
  4359  001280  D001               	goto	l678
  4360  001282                     l677:
  4361  001282  989D               	bcf	3997,4,c	;volatile
  4362  001284                     l678:
  4363  001284  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  4364  001288  5012               	movf	OpenUSART@spbrg+1,w,c
  4365  00128A  6EB0               	movwf	4016,c	;volatile
  4366  00128C  8AAC               	bsf	4012,5,c	;volatile
  4367  00128E  8EAB               	bsf	4011,7,c	;volatile
  4368  001290  9C94               	bcf	3988,6,c	;volatile
  4369  001292  8E94               	bsf	3988,7,c	;volatile
  4370  001294  B8AC               	btfsc	4012,4,c	;volatile
  4371  001296  BEAC               	btfsc	4012,7,c	;volatile
  4372  001298  D002               	goto	l680
  4373  00129A  8C94               	bsf	3988,6,c	;volatile
  4374  00129C  D000               	goto	l680
  4375  00129E                     l680:
  4376  00129E  0012               	return		;funcret
  4377  0012A0                     __end_of_OpenUSART:
  4378                           	opt stack 0
  4379                           tblptru	equ	0xFF8
  4380                           tblptrh	equ	0xFF7
  4381                           tblptrl	equ	0xFF6
  4382                           tablat	equ	0xFF5
  4383                           prodh	equ	0xFF4
  4384                           prodl	equ	0xFF3
  4385                           intcon	equ	0xFF2
  4386                           intcon2	equ	0xFF1
  4387                           postinc0	equ	0xFEE
  4388                           wreg	equ	0xFE8
  4389                           postdec1	equ	0xFE5
  4390                           fsr1l	equ	0xFE1
  4391                           indf2	equ	0xFDF
  4392                           postinc2	equ	0xFDE
  4393                           postdec2	equ	0xFDD
  4394                           fsr2h	equ	0xFDA
  4395                           fsr2l	equ	0xFD9
  4396                           status	equ	0xFD8
  4397                           
  4398 ;; *************** function _init_INTERRUPT *****************
  4399 ;; Defined at:
  4400 ;;		line 14 in file "Interrupt.c"
  4401 ;; Parameters:    Size  Location     Type
  4402 ;;		None
  4403 ;; Auto vars:     Size  Location     Type
  4404 ;;		None
  4405 ;; Return value:  Size  Location     Type
  4406 ;;		None               void
  4407 ;; Registers used:
  4408 ;;		wreg, status,2
  4409 ;; Tracked objects:
  4410 ;;		On entry : 0/0
  4411 ;;		On exit  : 0/0
  4412 ;;		Unchanged: 0/0
  4413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4417 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4418 ;;Total ram usage:        0 bytes
  4419 ;; Hardware stack levels used:    1
  4420 ;; Hardware stack levels required when called:    3
  4421 ;; This function calls:
  4422 ;;		Nothing
  4423 ;; This function is called by:
  4424 ;;		_Do_Init
  4425 ;; This function uses a non-reentrant model
  4426 ;;
  4427                           
  4428                           	psect	text14
  4429  001756                     __ptext14:
  4430                           	opt stack 0
  4431  001756                     _init_INTERRUPT:
  4432                           	opt stack 26
  4433                           
  4434                           ;Interrupt.c: 16: INTCONbits.INT0IF = 0;
  4435                           
  4436                           ;incstack = 0
  4437  001756  92F2               	bcf	intcon,1,c	;volatile
  4438                           
  4439                           ;Interrupt.c: 17: INTCON2bits.INTEDG0 = 0;
  4440  001758  9CF1               	bcf	intcon2,6,c	;volatile
  4441                           
  4442                           ;Interrupt.c: 18: INTCONbits.INT0IE = 1;
  4443  00175A  88F2               	bsf	intcon,4,c	;volatile
  4444                           
  4445                           ;Interrupt.c: 19: TMR1H = 0;
  4446  00175C  0E00               	movlw	0
  4447  00175E  6ECF               	movwf	4047,c	;volatile
  4448                           
  4449                           ;Interrupt.c: 20: TMR1L = 0;
  4450  001760  0E00               	movlw	0
  4451  001762  6ECE               	movwf	4046,c	;volatile
  4452                           
  4453                           ;Interrupt.c: 21: PIR1bits.TMR1IF = 0;
  4454  001764  909E               	bcf	3998,0,c	;volatile
  4455                           
  4456                           ;Interrupt.c: 22: PIE1bits.TMR1IE = 1;
  4457  001766  809D               	bsf	3997,0,c	;volatile
  4458                           
  4459                           ;Interrupt.c: 23: INTCONbits.PEIE = 1;
  4460  001768  8CF2               	bsf	intcon,6,c	;volatile
  4461                           
  4462                           ;Interrupt.c: 24: INTCONbits.GIE = 1;
  4463  00176A  8EF2               	bsf	intcon,7,c	;volatile
  4464                           
  4465                           ;Interrupt.c: 25: nec_ok = 0;
  4466  00176C  0E00               	movlw	0
  4467  00176E  6E4D               	movwf	_nec_ok+1,c
  4468  001770  0E00               	movlw	0
  4469  001772  6E4C               	movwf	_nec_ok,c
  4470                           
  4471                           ;Interrupt.c: 26: Nec_code = 0x0;
  4472  001774  0E00               	movlw	0
  4473  001776  6E44               	movwf	_Nec_code,c
  4474  001778  0E00               	movlw	0
  4475  00177A  6E45               	movwf	_Nec_code+1,c
  4476  00177C  0E00               	movlw	0
  4477  00177E  6E46               	movwf	_Nec_code+2,c
  4478  001780  0E00               	movlw	0
  4479  001782  6E47               	movwf	_Nec_code+3,c
  4480  001784  0012               	return		;funcret
  4481  001786                     __end_of_init_INTERRUPT:
  4482                           	opt stack 0
  4483                           tblptru	equ	0xFF8
  4484                           tblptrh	equ	0xFF7
  4485                           tblptrl	equ	0xFF6
  4486                           tablat	equ	0xFF5
  4487                           prodh	equ	0xFF4
  4488                           prodl	equ	0xFF3
  4489                           intcon	equ	0xFF2
  4490                           intcon2	equ	0xFF1
  4491                           postinc0	equ	0xFEE
  4492                           wreg	equ	0xFE8
  4493                           postdec1	equ	0xFE5
  4494                           fsr1l	equ	0xFE1
  4495                           indf2	equ	0xFDF
  4496                           postinc2	equ	0xFDE
  4497                           postdec2	equ	0xFDD
  4498                           fsr2h	equ	0xFDA
  4499                           fsr2l	equ	0xFD9
  4500                           status	equ	0xFD8
  4501                           
  4502 ;; *************** function _Initialize_Screen *****************
  4503 ;; Defined at:
  4504 ;;		line 233 in file "Lab11p4.c"
  4505 ;; Parameters:    Size  Location     Type
  4506 ;;		None
  4507 ;; Auto vars:     Size  Location     Type
  4508 ;;		None
  4509 ;; Return value:  Size  Location     Type
  4510 ;;		None               void
  4511 ;; Registers used:
  4512 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4513 ;; Tracked objects:
  4514 ;;		On entry : 0/0
  4515 ;;		On exit  : 0/0
  4516 ;;		Unchanged: 0/0
  4517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4522 ;;Total ram usage:        0 bytes
  4523 ;; Hardware stack levels used:    1
  4524 ;; Hardware stack levels required when called:   10
  4525 ;; This function calls:
  4526 ;;		_LCD_Reset
  4527 ;;		_TFT_GreenTab_Initialize
  4528 ;;		_drawtext
  4529 ;;		_fillScreen
  4530 ;;		_strcpy
  4531 ;; This function is called by:
  4532 ;;		_Do_Init
  4533 ;; This function uses a non-reentrant model
  4534 ;;
  4535                           
  4536                           	psect	text15
  4537  000FA6                     __ptext15:
  4538                           	opt stack 0
  4539  000FA6                     _Initialize_Screen:
  4540                           	opt stack 19
  4541                           
  4542                           ;Lab11p4.c: 235: LCD_Reset();
  4543                           
  4544                           ;incstack = 0
  4545  000FA6  EC80  F00C         	call	_LCD_Reset	;wreg free
  4546                           
  4547                           ;Lab11p4.c: 236: TFT_GreenTab_Initialize();
  4548  000FAA  ECDB  F00B         	call	_TFT_GreenTab_Initialize	;wreg free
  4549                           
  4550                           ;Lab11p4.c: 237: fillScreen(0x0000);
  4551  000FAE  0E00               	movlw	0
  4552  000FB0  6E25               	movwf	fillScreen@color+1,c
  4553  000FB2  0E00               	movlw	0
  4554  000FB4  6E24               	movwf	fillScreen@color,c
  4555  000FB6  EC46  F00C         	call	_fillScreen	;wreg free
  4556                           
  4557                           ;Lab11p4.c: 240: txt = buffer;
  4558  000FBA  0ED4               	movlw	low _buffer
  4559  000FBC  6E4E               	movwf	_txt,c
  4560  000FBE  0E00               	movlw	high _buffer
  4561  000FC0  6E4F               	movwf	_txt+1,c
  4562                           
  4563                           ;Lab11p4.c: 241: strcpy(txt, "ECE3301L Fall 22-S3");
  4564  000FC2  C04E  F011         	movff	_txt,strcpy@to
  4565  000FC6  C04F  F012         	movff	_txt+1,strcpy@to+1
  4566  000FCA  0EC1               	movlw	low STR_4
  4567  000FCC  6E13               	movwf	strcpy@from,c
  4568  000FCE  0EFF               	movlw	high STR_4
  4569  000FD0  6E14               	movwf	strcpy@from+1,c
  4570  000FD2  EC92  F00B         	call	_strcpy	;wreg free
  4571                           
  4572                           ;Lab11p4.c: 242: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  4573  000FD6  0E02               	movlw	2
  4574  000FD8  6E39               	movwf	drawtext@y,c
  4575  000FDA  C04E  F03A         	movff	_txt,drawtext@_text
  4576  000FDE  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  4577  000FE2  0EFF               	movlw	255
  4578  000FE4  6E3D               	movwf	drawtext@color+1,c
  4579  000FE6  683C               	setf	drawtext@color,c
  4580  000FE8  0E00               	movlw	0
  4581  000FEA  6E3F               	movwf	drawtext@bg+1,c
  4582  000FEC  0E00               	movlw	0
  4583  000FEE  6E3E               	movwf	drawtext@bg,c
  4584  000FF0  0E01               	movlw	1
  4585  000FF2  6E40               	movwf	drawtext@size,c
  4586  000FF4  0E02               	movlw	2
  4587  000FF6  EC1C  F006         	call	_drawtext
  4588                           
  4589                           ;Lab11p4.c: 244: strcpy(txt, "LAB 10 ");
  4590  000FFA  C04E  F011         	movff	_txt,strcpy@to
  4591  000FFE  C04F  F012         	movff	_txt+1,strcpy@to+1
  4592  001002  0EF7               	movlw	low STR_5
  4593  001004  6E13               	movwf	strcpy@from,c
  4594  001006  0EFF               	movlw	high STR_5
  4595  001008  6E14               	movwf	strcpy@from+1,c
  4596  00100A  EC92  F00B         	call	_strcpy	;wreg free
  4597                           
  4598                           ;Lab11p4.c: 245: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  4599  00100E  0E0A               	movlw	10
  4600  001010  6E39               	movwf	drawtext@y,c
  4601  001012  C04E  F03A         	movff	_txt,drawtext@_text
  4602  001016  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  4603  00101A  0EFF               	movlw	255
  4604  00101C  6E3D               	movwf	drawtext@color+1,c
  4605  00101E  683C               	setf	drawtext@color,c
  4606  001020  0E00               	movlw	0
  4607  001022  6E3F               	movwf	drawtext@bg+1,c
  4608  001024  0E00               	movlw	0
  4609  001026  6E3E               	movwf	drawtext@bg,c
  4610  001028  0E01               	movlw	1
  4611  00102A  6E40               	movwf	drawtext@size,c
  4612  00102C  0E32               	movlw	50
  4613  00102E  EC1C  F006         	call	_drawtext
  4614  001032  0012               	return		;funcret
  4615  001034                     __end_of_Initialize_Screen:
  4616                           	opt stack 0
  4617                           tblptru	equ	0xFF8
  4618                           tblptrh	equ	0xFF7
  4619                           tblptrl	equ	0xFF6
  4620                           tablat	equ	0xFF5
  4621                           prodh	equ	0xFF4
  4622                           prodl	equ	0xFF3
  4623                           intcon	equ	0xFF2
  4624                           intcon2	equ	0xFF1
  4625                           postinc0	equ	0xFEE
  4626                           wreg	equ	0xFE8
  4627                           postdec1	equ	0xFE5
  4628                           fsr1l	equ	0xFE1
  4629                           indf2	equ	0xFDF
  4630                           postinc2	equ	0xFDE
  4631                           postdec2	equ	0xFDD
  4632                           fsr2h	equ	0xFDA
  4633                           fsr2l	equ	0xFD9
  4634                           status	equ	0xFD8
  4635                           
  4636 ;; *************** function _strcpy *****************
  4637 ;; Defined at:
  4638 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  4639 ;; Parameters:    Size  Location     Type
  4640 ;;  to              2   16[COMRAM] PTR unsigned char 
  4641 ;;		 -> NULL(0), buffer(31), 
  4642 ;;  from            2   18[COMRAM] PTR const unsigned char 
  4643 ;;		 -> STR_5(8), STR_4(20), 
  4644 ;; Auto vars:     Size  Location     Type
  4645 ;;  cp              2   20[COMRAM] PTR unsigned char 
  4646 ;;		 -> NULL(0), buffer(31), 
  4647 ;; Return value:  Size  Location     Type
  4648 ;;                  2   16[COMRAM] PTR unsigned char 
  4649 ;; Registers used:
  4650 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4651 ;; Tracked objects:
  4652 ;;		On entry : 0/0
  4653 ;;		On exit  : 0/0
  4654 ;;		Unchanged: 0/0
  4655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4656 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4657 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4659 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4660 ;;Total ram usage:        6 bytes
  4661 ;; Hardware stack levels used:    1
  4662 ;; Hardware stack levels required when called:    3
  4663 ;; This function calls:
  4664 ;;		Nothing
  4665 ;; This function is called by:
  4666 ;;		_Initialize_Screen
  4667 ;; This function uses a non-reentrant model
  4668 ;;
  4669                           
  4670                           	psect	text16
  4671  001724                     __ptext16:
  4672                           	opt stack 0
  4673  001724                     _strcpy:
  4674                           	opt stack 25
  4675                           
  4676                           ;incstack = 0
  4677  001724  C011  F015         	movff	strcpy@to,strcpy@cp
  4678  001728  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  4679  00172C  D005               	goto	l4545
  4680  00172E                     l4543:
  4681  00172E  4A15               	infsnz	strcpy@cp,f,c
  4682  001730  2A16               	incf	strcpy@cp+1,f,c
  4683  001732  4A13               	infsnz	strcpy@from,f,c
  4684  001734  2A14               	incf	strcpy@from+1,f,c
  4685  001736  D000               	goto	l4545
  4686  001738                     l4545:
  4687  001738  C013  FFF6         	movff	strcpy@from,tblptrl
  4688  00173C  C014  FFF7         	movff	strcpy@from+1,tblptrh
  4689  001740                     	if	0	;tblptru may be non-zero
  4690  001740                     	endif
  4691  001740                     	if	0	;tblptru may be non-zero
  4692  001740                     	endif
  4693  001740  C015  FFD9         	movff	strcpy@cp,fsr2l
  4694  001744  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  4695  001748  0008               	tblrd		*
  4696  00174A  CFF5 FFDF          	movff	tablat,indf2
  4697  00174E  50DF               	movf	indf2,w,c
  4698  001750  A4D8               	btfss	status,2,c
  4699  001752  D7ED               	goto	l4543
  4700                           
  4701                           ;	Return value of _strcpy is never used
  4702  001754  0012               	return		;funcret
  4703  001756                     __end_of_strcpy:
  4704                           	opt stack 0
  4705                           tblptru	equ	0xFF8
  4706                           tblptrh	equ	0xFF7
  4707                           tblptrl	equ	0xFF6
  4708                           tablat	equ	0xFF5
  4709                           prodh	equ	0xFF4
  4710                           prodl	equ	0xFF3
  4711                           intcon	equ	0xFF2
  4712                           intcon2	equ	0xFF1
  4713                           postinc0	equ	0xFEE
  4714                           wreg	equ	0xFE8
  4715                           postdec1	equ	0xFE5
  4716                           fsr1l	equ	0xFE1
  4717                           indf2	equ	0xFDF
  4718                           postinc2	equ	0xFDE
  4719                           postdec2	equ	0xFDD
  4720                           fsr2h	equ	0xFDA
  4721                           fsr2l	equ	0xFD9
  4722                           status	equ	0xFD8
  4723                           
  4724 ;; *************** function _fillScreen *****************
  4725 ;; Defined at:
  4726 ;;		line 619 in file "ST7735_TFT.c"
  4727 ;; Parameters:    Size  Location     Type
  4728 ;;  color           2   35[COMRAM] unsigned int 
  4729 ;; Auto vars:     Size  Location     Type
  4730 ;;		None
  4731 ;; Return value:  Size  Location     Type
  4732 ;;		None               void
  4733 ;; Registers used:
  4734 ;;		wreg, status,2, status,0, cstack
  4735 ;; Tracked objects:
  4736 ;;		On entry : 0/0
  4737 ;;		On exit  : 0/0
  4738 ;;		Unchanged: 0/0
  4739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4740 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4743 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4744 ;;Total ram usage:        2 bytes
  4745 ;; Hardware stack levels used:    1
  4746 ;; Hardware stack levels required when called:    7
  4747 ;; This function calls:
  4748 ;;		_fillRectangle
  4749 ;; This function is called by:
  4750 ;;		_Initialize_Screen
  4751 ;; This function uses a non-reentrant model
  4752 ;;
  4753                           
  4754                           	psect	text17
  4755  00188C                     __ptext17:
  4756                           	opt stack 0
  4757  00188C                     _fillScreen:
  4758                           	opt stack 21
  4759                           
  4760                           ;ST7735_TFT.c: 621: fillRectangle(0, 0, 128, 160, color);
  4761                           
  4762                           ;incstack = 0
  4763  00188C  0E00               	movlw	0
  4764  00188E  6E18               	movwf	fillRectangle@y,c
  4765  001890  0E80               	movlw	128
  4766  001892  6E19               	movwf	fillRectangle@w,c
  4767  001894  0EA0               	movlw	160
  4768  001896  6E1A               	movwf	fillRectangle@h,c
  4769  001898  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  4770  00189C  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  4771  0018A0  0E00               	movlw	0
  4772  0018A2  EC1A  F007         	call	_fillRectangle
  4773  0018A6  0012               	return		;funcret
  4774  0018A8                     __end_of_fillScreen:
  4775                           	opt stack 0
  4776                           tblptru	equ	0xFF8
  4777                           tblptrh	equ	0xFF7
  4778                           tblptrl	equ	0xFF6
  4779                           tablat	equ	0xFF5
  4780                           prodh	equ	0xFF4
  4781                           prodl	equ	0xFF3
  4782                           intcon	equ	0xFF2
  4783                           intcon2	equ	0xFF1
  4784                           postinc0	equ	0xFEE
  4785                           wreg	equ	0xFE8
  4786                           postdec1	equ	0xFE5
  4787                           fsr1l	equ	0xFE1
  4788                           indf2	equ	0xFDF
  4789                           postinc2	equ	0xFDE
  4790                           postdec2	equ	0xFDD
  4791                           fsr2h	equ	0xFDA
  4792                           fsr2l	equ	0xFD9
  4793                           status	equ	0xFD8
  4794                           
  4795 ;; *************** function _fillRectangle *****************
  4796 ;; Defined at:
  4797 ;;		line 503 in file "ST7735_TFT.c"
  4798 ;; Parameters:    Size  Location     Type
  4799 ;;  x               1    wreg     unsigned char 
  4800 ;;  y               1   23[COMRAM] unsigned char 
  4801 ;;  w               1   24[COMRAM] unsigned char 
  4802 ;;  h               1   25[COMRAM] unsigned char 
  4803 ;;  color           2   26[COMRAM] unsigned int 
  4804 ;; Auto vars:     Size  Location     Type
  4805 ;;  x               1   34[COMRAM] unsigned char 
  4806 ;;  lo              1   33[COMRAM] unsigned char 
  4807 ;;  hi              1   32[COMRAM] unsigned char 
  4808 ;; Return value:  Size  Location     Type
  4809 ;;		None               void
  4810 ;; Registers used:
  4811 ;;		wreg, status,2, status,0, cstack
  4812 ;; Tracked objects:
  4813 ;;		On entry : 0/0
  4814 ;;		On exit  : 0/0
  4815 ;;		Unchanged: 0/0
  4816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4817 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4818 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4819 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4820 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4821 ;;Total ram usage:       12 bytes
  4822 ;; Hardware stack levels used:    1
  4823 ;; Hardware stack levels required when called:    6
  4824 ;; This function calls:
  4825 ;;		_setAddrWindow
  4826 ;;		_spiwrite
  4827 ;; This function is called by:
  4828 ;;		_fillScreen
  4829 ;; This function uses a non-reentrant model
  4830 ;;
  4831                           
  4832                           	psect	text18
  4833  000E34                     __ptext18:
  4834                           	opt stack 0
  4835  000E34                     _fillRectangle:
  4836                           	opt stack 21
  4837                           
  4838                           ;incstack = 0
  4839                           ;fillRectangle@x stored from wreg
  4840  000E34  6E23               	movwf	fillRectangle@x,c
  4841                           
  4842                           ;ST7735_TFT.c: 505: unsigned char hi, lo;
  4843                           ;ST7735_TFT.c: 506: if((x >= 128) || (y >= 160))
  4844  000E36  0E80               	movlw	128
  4845  000E38  6023               	cpfslt	fillRectangle@x,c
  4846  000E3A  D069               	goto	l148
  4847  000E3C  0E9F               	movlw	159
  4848  000E3E  6418               	cpfsgt	fillRectangle@y,c
  4849  000E40  D001               	goto	l4327
  4850                           
  4851                           ;ST7735_TFT.c: 507: return;
  4852  000E42  D065               	goto	l148
  4853  000E44                     l4327:
  4854                           
  4855                           ;ST7735_TFT.c: 508: if((x + w - 1) >= 128)
  4856  000E44  0EFF               	movlw	255
  4857  000E46  6E1D               	movwf	??_fillRectangle& (0+255),c
  4858  000E48  0EFF               	movlw	255
  4859  000E4A  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4860  000E4C  5019               	movf	fillRectangle@w,w,c
  4861  000E4E  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  4862  000E52  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4863  000E54  261F               	addwf	??_fillRectangle+2,f,c
  4864  000E56  0E00               	movlw	0
  4865  000E58  2220               	addwfc	??_fillRectangle+3,f,c
  4866  000E5A  501D               	movf	??_fillRectangle,w,c
  4867  000E5C  261F               	addwf	??_fillRectangle+2,f,c
  4868  000E5E  501E               	movf	??_fillRectangle+1,w,c
  4869  000E60  2220               	addwfc	??_fillRectangle+3,f,c
  4870  000E62  BE20               	btfsc	??_fillRectangle+3,7,c
  4871  000E64  D00A               	goto	l149
  4872  000E66  5020               	movf	??_fillRectangle+3,w,c
  4873  000E68  E104               	bnz	u2920
  4874  000E6A  0E80               	movlw	128
  4875  000E6C  5C1F               	subwf	??_fillRectangle+2,w,c
  4876  000E6E  A0D8               	btfss	status,0,c
  4877  000E70  D004               	goto	l149
  4878  000E72                     u2920:
  4879                           
  4880                           ;ST7735_TFT.c: 509: w = 128 - x;
  4881  000E72  5023               	movf	fillRectangle@x,w,c
  4882  000E74  0800               	sublw	0
  4883  000E76  0F80               	addlw	128
  4884  000E78  6E19               	movwf	fillRectangle@w,c
  4885  000E7A                     l149:
  4886                           
  4887                           ;ST7735_TFT.c: 510: if((y + h - 1) >= 160)
  4888  000E7A  0EFF               	movlw	255
  4889  000E7C  6E1D               	movwf	??_fillRectangle& (0+255),c
  4890  000E7E  0EFF               	movlw	255
  4891  000E80  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4892  000E82  501A               	movf	fillRectangle@h,w,c
  4893  000E84  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  4894  000E88  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4895  000E8A  261F               	addwf	??_fillRectangle+2,f,c
  4896  000E8C  0E00               	movlw	0
  4897  000E8E  2220               	addwfc	??_fillRectangle+3,f,c
  4898  000E90  501D               	movf	??_fillRectangle,w,c
  4899  000E92  261F               	addwf	??_fillRectangle+2,f,c
  4900  000E94  501E               	movf	??_fillRectangle+1,w,c
  4901  000E96  2220               	addwfc	??_fillRectangle+3,f,c
  4902  000E98  BE20               	btfsc	??_fillRectangle+3,7,c
  4903  000E9A  D00B               	goto	l4333
  4904  000E9C  5020               	movf	??_fillRectangle+3,w,c
  4905  000E9E  E104               	bnz	u2930
  4906  000EA0  0EA0               	movlw	160
  4907  000EA2  5C1F               	subwf	??_fillRectangle+2,w,c
  4908  000EA4  A0D8               	btfss	status,0,c
  4909  000EA6  D005               	goto	l4333
  4910  000EA8                     u2930:
  4911                           
  4912                           ;ST7735_TFT.c: 511: h = 160 - y;
  4913  000EA8  5018               	movf	fillRectangle@y,w,c
  4914  000EAA  0800               	sublw	0
  4915  000EAC  0FA0               	addlw	160
  4916  000EAE  6E1A               	movwf	fillRectangle@h,c
  4917  000EB0  D000               	goto	l4333
  4918  000EB2                     l4333:
  4919                           
  4920                           ;ST7735_TFT.c: 512: setAddrWindow(x, y, x+w-1, y+h-1);
  4921  000EB2  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  4922  000EB6  5023               	movf	fillRectangle@x,w,c
  4923  000EB8  2419               	addwf	fillRectangle@w,w,c
  4924  000EBA  6E1D               	movwf	??_fillRectangle& (0+255),c
  4925  000EBC  041D               	decf	??_fillRectangle,w,c
  4926  000EBE  6E15               	movwf	setAddrWindow@x1,c
  4927  000EC0  5018               	movf	fillRectangle@y,w,c
  4928  000EC2  241A               	addwf	fillRectangle@h,w,c
  4929  000EC4  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4930  000EC6  041E               	decf	??_fillRectangle+1,w,c
  4931  000EC8  6E16               	movwf	setAddrWindow@y1,c
  4932  000ECA  5023               	movf	fillRectangle@x,w,c
  4933  000ECC  EC5F  F00A         	call	_setAddrWindow
  4934                           
  4935                           ;ST7735_TFT.c: 513: hi = color >> 8; lo = color;
  4936  000ED0  501C               	movf	fillRectangle@color+1,w,c
  4937  000ED2  6E21               	movwf	fillRectangle@hi,c
  4938  000ED4  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  4939                           
  4940                           ;ST7735_TFT.c: 514: PORTCbits.RC0 = 1;
  4941  000ED8  8082               	bsf	3970,0,c	;volatile
  4942                           
  4943                           ;ST7735_TFT.c: 515: PORTCbits.RC1 = 0;
  4944  000EDA  9282               	bcf	3970,1,c	;volatile
  4945                           
  4946                           ;ST7735_TFT.c: 517: for(y=h; y>0; y--) {
  4947  000EDC  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  4948  000EE0                     l4345:
  4949  000EE0  5018               	movf	fillRectangle@y,w,c
  4950  000EE2  B4D8               	btfsc	status,2,c
  4951  000EE4  D013               	goto	l152
  4952  000EE6  D001               	goto	l151
  4953  000EE8  D011               	goto	l152
  4954  000EEA                     l151:
  4955                           
  4956                           ;ST7735_TFT.c: 518: for(x = w; x > 0; x--) {
  4957  000EEA  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  4958  000EEE                     l4349:
  4959  000EEE  5023               	movf	fillRectangle@x,w,c
  4960  000EF0  B4D8               	btfsc	status,2,c
  4961  000EF2  D00A               	goto	l4359
  4962  000EF4  D001               	goto	l4353
  4963  000EF6  D008               	goto	l4359
  4964  000EF8                     l4353:
  4965                           
  4966                           ;ST7735_TFT.c: 519: spiwrite(hi);
  4967  000EF8  5021               	movf	fillRectangle@hi,w,c
  4968  000EFA  EC76  F00C         	call	_spiwrite
  4969                           
  4970                           ;ST7735_TFT.c: 520: spiwrite(lo);
  4971  000EFE  5022               	movf	fillRectangle@lo,w,c
  4972  000F00  EC76  F00C         	call	_spiwrite
  4973  000F04  0623               	decf	fillRectangle@x,f,c
  4974  000F06  D7F3               	goto	l4349
  4975  000F08                     l4359:
  4976  000F08  0618               	decf	fillRectangle@y,f,c
  4977  000F0A  D7EA               	goto	l4345
  4978  000F0C                     l152:
  4979                           
  4980                           ;ST7735_TFT.c: 521: }
  4981                           ;ST7735_TFT.c: 522: }
  4982                           ;ST7735_TFT.c: 523: PORTCbits.RC1 = 1;
  4983  000F0C  8282               	bsf	3970,1,c	;volatile
  4984  000F0E                     l148:
  4985  000F0E  0012               	return		;funcret
  4986  000F10                     __end_of_fillRectangle:
  4987                           	opt stack 0
  4988                           tblptru	equ	0xFF8
  4989                           tblptrh	equ	0xFF7
  4990                           tblptrl	equ	0xFF6
  4991                           tablat	equ	0xFF5
  4992                           prodh	equ	0xFF4
  4993                           prodl	equ	0xFF3
  4994                           intcon	equ	0xFF2
  4995                           intcon2	equ	0xFF1
  4996                           postinc0	equ	0xFEE
  4997                           wreg	equ	0xFE8
  4998                           postdec1	equ	0xFE5
  4999                           fsr1l	equ	0xFE1
  5000                           indf2	equ	0xFDF
  5001                           postinc2	equ	0xFDE
  5002                           postdec2	equ	0xFDD
  5003                           fsr2h	equ	0xFDA
  5004                           fsr2l	equ	0xFD9
  5005                           status	equ	0xFD8
  5006                           
  5007 ;; *************** function _drawtext *****************
  5008 ;; Defined at:
  5009 ;;		line 474 in file "ST7735_TFT.c"
  5010 ;; Parameters:    Size  Location     Type
  5011 ;;  x               1    wreg     unsigned char 
  5012 ;;  y               1   56[COMRAM] unsigned char 
  5013 ;;  _text           2   57[COMRAM] PTR unsigned char 
  5014 ;;		 -> NULL(0), buffer(31), txt1(84), 
  5015 ;;  color           2   59[COMRAM] unsigned int 
  5016 ;;  bg              2   61[COMRAM] unsigned int 
  5017 ;;  size            1   63[COMRAM] unsigned char 
  5018 ;; Auto vars:     Size  Location     Type
  5019 ;;  x               1    0[BANK0 ] unsigned char 
  5020 ;;  i               2    3[BANK0 ] unsigned int 
  5021 ;;  textsize        2    1[BANK0 ] unsigned int 
  5022 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  5023 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  5024 ;; Return value:  Size  Location     Type
  5025 ;;		None               void
  5026 ;; Registers used:
  5027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5028 ;; Tracked objects:
  5029 ;;		On entry : 0/0
  5030 ;;		On exit  : 0/0
  5031 ;;		Unchanged: 0/0
  5032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5033 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5034 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5035 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5036 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5037 ;;Total ram usage:       17 bytes
  5038 ;; Hardware stack levels used:    1
  5039 ;; Hardware stack levels required when called:    9
  5040 ;; This function calls:
  5041 ;;		_drawChar
  5042 ;;		_strlen
  5043 ;; This function is called by:
  5044 ;;		_main
  5045 ;;		_Initialize_Screen
  5046 ;; This function uses a non-reentrant model
  5047 ;;
  5048                           
  5049                           	psect	text19
  5050  000C38                     __ptext19:
  5051                           	opt stack 0
  5052  000C38                     _drawtext:
  5053                           	opt stack 21
  5054                           
  5055                           ;incstack = 0
  5056                           ;drawtext@x stored from wreg
  5057  000C38  0100               	movlb	0	; () banked
  5058  000C3A  6FF3               	movwf	drawtext@x& (0+255),b
  5059                           
  5060                           ; BSR set to: 0
  5061                           ;ST7735_TFT.c: 476: unsigned char cursor_x, cursor_y;
  5062                           ;ST7735_TFT.c: 477: unsigned int textsize, i;
  5063                           ;ST7735_TFT.c: 478: cursor_x = x, cursor_y = y;
  5064  000C3C  C0F3  F0F9         	movff	drawtext@x,drawtext@cursor_x
  5065                           
  5066                           ; BSR set to: 0
  5067  000C40  C039  F0F8         	movff	drawtext@y,drawtext@cursor_y
  5068                           
  5069                           ; BSR set to: 0
  5070                           ;ST7735_TFT.c: 479: textsize = strlen(_text);
  5071  000C44  C03A  F011         	movff	drawtext@_text,strlen@s
  5072  000C48  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  5073  000C4C  EC17  F00B         	call	_strlen	;wreg free
  5074  000C50  C011  F0F4         	movff	?_strlen,drawtext@textsize
  5075  000C54  C012  F0F5         	movff	?_strlen+1,drawtext@textsize+1
  5076                           
  5077                           ;ST7735_TFT.c: 480: for(i = 0; i < textsize; i++){
  5078  000C58  0E00               	movlw	0
  5079  000C5A  0100               	movlb	0	; () banked
  5080  000C5C  6FF7               	movwf	(drawtext@i+1)& (0+255),b
  5081  000C5E  0E00               	movlw	0
  5082  000C60  6FF6               	movwf	drawtext@i& (0+255),b
  5083  000C62  D064               	goto	l4443
  5084  000C64                     l4417:
  5085                           
  5086                           ; BSR set to: 0
  5087                           ;ST7735_TFT.c: 481: if(wrap && ((cursor_x + size * 5) > 128)){
  5088  000C64  506E               	movf	_wrap,w,c
  5089  000C66  B4D8               	btfsc	status,2,c
  5090  000C68  D034               	goto	l4433
  5091                           
  5092                           ; BSR set to: 0
  5093  000C6A  5040               	movf	drawtext@size,w,c
  5094  000C6C  0D05               	mullw	5
  5095  000C6E  0100               	movlb	0	; () banked
  5096  000C70  51F9               	movf	drawtext@cursor_x& (0+255),w,b
  5097  000C72  6E41               	movwf	??_drawtext& (0+255),c
  5098  000C74  6A42               	clrf	(??_drawtext+1)& (0+255),c
  5099  000C76  50F3               	movf	prodl,w,c
  5100  000C78  2641               	addwf	??_drawtext,f,c
  5101  000C7A  50F4               	movf	prodh,w,c
  5102  000C7C  2242               	addwfc	??_drawtext+1,f,c
  5103  000C7E  BE42               	btfsc	??_drawtext+1,7,c
  5104  000C80  D028               	goto	l4433
  5105  000C82  5042               	movf	??_drawtext+1,w,c
  5106  000C84  E104               	bnz	u3020
  5107  000C86  0E81               	movlw	129
  5108  000C88  5C41               	subwf	??_drawtext,w,c
  5109  000C8A  A0D8               	btfss	status,0,c
  5110  000C8C  D022               	goto	l4433
  5111  000C8E                     u3020:
  5112                           
  5113                           ; BSR set to: 0
  5114                           ;ST7735_TFT.c: 482: cursor_x = 0;
  5115  000C8E  0E00               	movlw	0
  5116  000C90  0100               	movlb	0	; () banked
  5117  000C92  6FF9               	movwf	drawtext@cursor_x& (0+255),b
  5118                           
  5119                           ; BSR set to: 0
  5120                           ;ST7735_TFT.c: 483: cursor_y = cursor_y + size * 7 + 3 ;
  5121  000C94  5040               	movf	drawtext@size,w,c
  5122  000C96  0D07               	mullw	7
  5123  000C98  50F3               	movf	prodl,w,c
  5124  000C9A  0100               	movlb	0	; () banked
  5125  000C9C  25F8               	addwf	drawtext@cursor_y& (0+255),w,b
  5126  000C9E  0F03               	addlw	3
  5127  000CA0  0100               	movlb	0	; () banked
  5128  000CA2  6FF8               	movwf	drawtext@cursor_y& (0+255),b
  5129                           
  5130                           ; BSR set to: 0
  5131                           ;ST7735_TFT.c: 484: if(cursor_y > 160) cursor_y = 160;
  5132  000CA4  0EA0               	movlw	160
  5133  000CA6  0100               	movlb	0	; () banked
  5134  000CA8  65F8               	cpfsgt	drawtext@cursor_y& (0+255),b
  5135  000CAA  D004               	goto	l4429
  5136                           
  5137                           ; BSR set to: 0
  5138  000CAC  0EA0               	movlw	160
  5139  000CAE  0100               	movlb	0	; () banked
  5140  000CB0  6FF8               	movwf	drawtext@cursor_y& (0+255),b
  5141  000CB2  D000               	goto	l4429
  5142  000CB4                     l4429:
  5143                           
  5144                           ; BSR set to: 0
  5145                           ;ST7735_TFT.c: 485: if(_text[i] == 0x20) goto _skip; }
  5146  000CB4  0100               	movlb	0	; () banked
  5147  000CB6  51F6               	movf	drawtext@i& (0+255),w,b
  5148  000CB8  243A               	addwf	drawtext@_text,w,c
  5149  000CBA  6ED9               	movwf	fsr2l,c
  5150  000CBC  0100               	movlb	0	; () banked
  5151  000CBE  51F7               	movf	(drawtext@i+1)& (0+255),w,b
  5152  000CC0  203B               	addwfc	drawtext@_text+1,w,c
  5153  000CC2  6EDA               	movwf	fsr2h,c
  5154  000CC4  0E20               	movlw	32
  5155  000CC6  18DE               	xorwf	postinc2,w,c
  5156  000CC8  B4D8               	btfsc	status,2,c
  5157  000CCA  D02C               	goto	l4441
  5158  000CCC  D002               	goto	l4433
  5159                           
  5160                           ; BSR set to: 0
  5161  000CCE  D02A               	goto	l4441
  5162                           
  5163                           ; BSR set to: 0
  5164  000CD0  D000               	goto	l4433
  5165  000CD2                     l4433:
  5166                           
  5167                           ; BSR set to: 0
  5168                           ;ST7735_TFT.c: 486: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  5169  000CD2  C0F8  F02E         	movff	drawtext@cursor_y,drawChar@y
  5170  000CD6  0100               	movlb	0	; () banked
  5171  000CD8  51F6               	movf	drawtext@i& (0+255),w,b
  5172  000CDA  243A               	addwf	drawtext@_text,w,c
  5173  000CDC  6ED9               	movwf	fsr2l,c
  5174  000CDE  0100               	movlb	0	; () banked
  5175  000CE0  51F7               	movf	(drawtext@i+1)& (0+255),w,b
  5176  000CE2  203B               	addwfc	drawtext@_text+1,w,c
  5177  000CE4  6EDA               	movwf	fsr2h,c
  5178  000CE6  50DF               	movf	indf2,w,c
  5179  000CE8  6E2F               	movwf	drawChar@c,c
  5180  000CEA  C03C  F030         	movff	drawtext@color,drawChar@color
  5181  000CEE  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  5182  000CF2  C03E  F032         	movff	drawtext@bg,drawChar@bg
  5183  000CF6  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  5184  000CFA  C040  F034         	movff	drawtext@size,drawChar@size
  5185  000CFE  0100               	movlb	0	; () banked
  5186  000D00  51F9               	movf	drawtext@cursor_x& (0+255),w,b
  5187  000D02  EC4D  F004         	call	_drawChar
  5188                           
  5189                           ;ST7735_TFT.c: 487: cursor_x = cursor_x + size * 6;
  5190  000D06  5040               	movf	drawtext@size,w,c
  5191  000D08  0D06               	mullw	6
  5192  000D0A  50F3               	movf	prodl,w,c
  5193  000D0C  0100               	movlb	0	; () banked
  5194  000D0E  25F9               	addwf	drawtext@cursor_x& (0+255),w,b
  5195  000D10  0100               	movlb	0	; () banked
  5196  000D12  6FF9               	movwf	drawtext@cursor_x& (0+255),b
  5197                           
  5198                           ; BSR set to: 0
  5199                           ;ST7735_TFT.c: 488: if(cursor_x > 128) cursor_x = 128;
  5200  000D14  0E80               	movlw	128
  5201  000D16  0100               	movlb	0	; () banked
  5202  000D18  65F9               	cpfsgt	drawtext@cursor_x& (0+255),b
  5203  000D1A  D004               	goto	l4441
  5204                           
  5205                           ; BSR set to: 0
  5206  000D1C  0E80               	movlw	128
  5207  000D1E  0100               	movlb	0	; () banked
  5208  000D20  6FF9               	movwf	drawtext@cursor_x& (0+255),b
  5209                           
  5210                           ; BSR set to: 0
  5211  000D22  D000               	goto	l4441
  5212  000D24                     l4441:
  5213                           
  5214                           ; BSR set to: 0
  5215  000D24  0100               	movlb	0	; () banked
  5216  000D26  4BF6               	infsnz	drawtext@i& (0+255),f,b
  5217  000D28  2BF7               	incf	(drawtext@i+1)& (0+255),f,b
  5218  000D2A  D000               	goto	l4443
  5219  000D2C                     l4443:
  5220                           
  5221                           ; BSR set to: 0
  5222  000D2C  0100               	movlb	0	; () banked
  5223  000D2E  51F4               	movf	drawtext@textsize& (0+255),w,b
  5224  000D30  0100               	movlb	0	; () banked
  5225  000D32  5DF6               	subwf	drawtext@i& (0+255),w,b
  5226  000D34  0100               	movlb	0	; () banked
  5227  000D36  51F5               	movf	(drawtext@textsize+1)& (0+255),w,b
  5228  000D38  0100               	movlb	0	; () banked
  5229  000D3A  59F7               	subwfb	(drawtext@i+1)& (0+255),w,b
  5230  000D3C  A0D8               	btfss	status,0,c
  5231  000D3E  D792               	goto	l4417
  5232                           
  5233                           ; BSR set to: 0
  5234                           
  5235                           ; BSR set to: 0
  5236  000D40  0012               	return		;funcret
  5237  000D42                     __end_of_drawtext:
  5238                           	opt stack 0
  5239                           tblptru	equ	0xFF8
  5240                           tblptrh	equ	0xFF7
  5241                           tblptrl	equ	0xFF6
  5242                           tablat	equ	0xFF5
  5243                           prodh	equ	0xFF4
  5244                           prodl	equ	0xFF3
  5245                           intcon	equ	0xFF2
  5246                           intcon2	equ	0xFF1
  5247                           postinc0	equ	0xFEE
  5248                           wreg	equ	0xFE8
  5249                           postdec1	equ	0xFE5
  5250                           fsr1l	equ	0xFE1
  5251                           indf2	equ	0xFDF
  5252                           postinc2	equ	0xFDE
  5253                           postdec2	equ	0xFDD
  5254                           fsr2h	equ	0xFDA
  5255                           fsr2l	equ	0xFD9
  5256                           status	equ	0xFD8
  5257                           
  5258 ;; *************** function _strlen *****************
  5259 ;; Defined at:
  5260 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  5261 ;; Parameters:    Size  Location     Type
  5262 ;;  s               2   16[COMRAM] PTR const unsigned char 
  5263 ;;		 -> NULL(0), buffer(31), txt1(84), 
  5264 ;; Auto vars:     Size  Location     Type
  5265 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  5266 ;;		 -> NULL(0), buffer(31), txt1(84), 
  5267 ;; Return value:  Size  Location     Type
  5268 ;;                  2   16[COMRAM] unsigned int 
  5269 ;; Registers used:
  5270 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5271 ;; Tracked objects:
  5272 ;;		On entry : 0/0
  5273 ;;		On exit  : 0/0
  5274 ;;		Unchanged: 0/0
  5275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5276 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5277 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5278 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5279 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5280 ;;Total ram usage:        6 bytes
  5281 ;; Hardware stack levels used:    1
  5282 ;; Hardware stack levels required when called:    3
  5283 ;; This function calls:
  5284 ;;		Nothing
  5285 ;; This function is called by:
  5286 ;;		_drawtext
  5287 ;; This function uses a non-reentrant model
  5288 ;;
  5289                           
  5290                           	psect	text20
  5291  00162E                     __ptext20:
  5292                           	opt stack 0
  5293  00162E                     _strlen:
  5294                           	opt stack 26
  5295                           
  5296                           ; BSR set to: 0
  5297                           ;incstack = 0
  5298  00162E  C011  F015         	movff	strlen@s,strlen@cp
  5299  001632  C012  F016         	movff	strlen@s+1,strlen@cp+1
  5300  001636  D003               	goto	l4317
  5301  001638                     l4315:
  5302  001638  4A15               	infsnz	strlen@cp,f,c
  5303  00163A  2A16               	incf	strlen@cp+1,f,c
  5304  00163C  D000               	goto	l4317
  5305  00163E                     l4317:
  5306  00163E  C015  FFD9         	movff	strlen@cp,fsr2l
  5307  001642  C016  FFDA         	movff	strlen@cp+1,fsr2h
  5308  001646  50DF               	movf	indf2,w,c
  5309  001648  A4D8               	btfss	status,2,c
  5310  00164A  D7F6               	goto	l4315
  5311  00164C  C011  F013         	movff	strlen@s,??_strlen
  5312  001650  C012  F014         	movff	strlen@s+1,??_strlen+1
  5313  001654  1E13               	comf	??_strlen,f,c
  5314  001656  1E14               	comf	??_strlen+1,f,c
  5315  001658  4A13               	infsnz	??_strlen,f,c
  5316  00165A  2A14               	incf	??_strlen+1,f,c
  5317  00165C  5015               	movf	strlen@cp,w,c
  5318  00165E  2413               	addwf	??_strlen,w,c
  5319  001660  6E11               	movwf	?_strlen,c
  5320  001662  5016               	movf	strlen@cp+1,w,c
  5321  001664  2014               	addwfc	??_strlen+1,w,c
  5322  001666  6E12               	movwf	?_strlen+1,c
  5323  001668  D000               	goto	l1245
  5324  00166A                     l1245:
  5325  00166A  0012               	return		;funcret
  5326  00166C                     __end_of_strlen:
  5327                           	opt stack 0
  5328                           tblptru	equ	0xFF8
  5329                           tblptrh	equ	0xFF7
  5330                           tblptrl	equ	0xFF6
  5331                           tablat	equ	0xFF5
  5332                           prodh	equ	0xFF4
  5333                           prodl	equ	0xFF3
  5334                           intcon	equ	0xFF2
  5335                           intcon2	equ	0xFF1
  5336                           postinc0	equ	0xFEE
  5337                           wreg	equ	0xFE8
  5338                           postdec1	equ	0xFE5
  5339                           fsr1l	equ	0xFE1
  5340                           indf2	equ	0xFDF
  5341                           postinc2	equ	0xFDE
  5342                           postdec2	equ	0xFDD
  5343                           fsr2h	equ	0xFDA
  5344                           fsr2l	equ	0xFD9
  5345                           status	equ	0xFD8
  5346                           
  5347 ;; *************** function _drawChar *****************
  5348 ;; Defined at:
  5349 ;;		line 447 in file "ST7735_TFT.c"
  5350 ;; Parameters:    Size  Location     Type
  5351 ;;  x               1    wreg     unsigned char 
  5352 ;;  y               1   45[COMRAM] unsigned char 
  5353 ;;  c               1   46[COMRAM] unsigned char 
  5354 ;;  color           2   47[COMRAM] unsigned int 
  5355 ;;  bg              2   49[COMRAM] unsigned int 
  5356 ;;  size            1   51[COMRAM] unsigned char 
  5357 ;; Auto vars:     Size  Location     Type
  5358 ;;  x               1   53[COMRAM] unsigned char 
  5359 ;;  line            1   52[COMRAM] unsigned char 
  5360 ;;  i               1   55[COMRAM] unsigned char 
  5361 ;;  j               1   54[COMRAM] unsigned char 
  5362 ;; Return value:  Size  Location     Type
  5363 ;;		None               void
  5364 ;; Registers used:
  5365 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5366 ;; Tracked objects:
  5367 ;;		On entry : 0/0
  5368 ;;		On exit  : 0/0
  5369 ;;		Unchanged: 0/0
  5370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5371 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5372 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5374 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5375 ;;Total ram usage:       11 bytes
  5376 ;; Hardware stack levels used:    1
  5377 ;; Hardware stack levels required when called:    8
  5378 ;; This function calls:
  5379 ;;		___wmul
  5380 ;;		_drawPixel
  5381 ;;		_fillRect
  5382 ;; This function is called by:
  5383 ;;		_drawtext
  5384 ;; This function uses a non-reentrant model
  5385 ;;
  5386                           
  5387                           	psect	text21
  5388  00089A                     __ptext21:
  5389                           	opt stack 0
  5390  00089A                     _drawChar:
  5391                           	opt stack 21
  5392                           
  5393                           ;incstack = 0
  5394                           ;drawChar@x stored from wreg
  5395  00089A  6E36               	movwf	drawChar@x,c
  5396                           
  5397                           ;ST7735_TFT.c: 449: char i, j;
  5398                           ;ST7735_TFT.c: 450: if((x >= 128) || (y >= 160))
  5399  00089C  0E80               	movlw	128
  5400  00089E  6036               	cpfslt	drawChar@x,c
  5401  0008A0  D0A6               	goto	l111
  5402  0008A2  0E9F               	movlw	159
  5403  0008A4  642E               	cpfsgt	drawChar@y,c
  5404  0008A6  D001               	goto	l4263
  5405                           
  5406                           ;ST7735_TFT.c: 451: return;
  5407  0008A8  D0A2               	goto	l111
  5408  0008AA                     l4263:
  5409                           
  5410                           ;ST7735_TFT.c: 452: if(size < 1) size = 1;
  5411  0008AA  5034               	movf	drawChar@size,w,c
  5412  0008AC  A4D8               	btfss	status,2,c
  5413  0008AE  D003               	goto	l4267
  5414  0008B0  0E01               	movlw	1
  5415  0008B2  6E34               	movwf	drawChar@size,c
  5416  0008B4  D000               	goto	l4267
  5417  0008B6                     l4267:
  5418                           
  5419                           ;ST7735_TFT.c: 453: if((c < ' ') || (c > '~'))
  5420  0008B6  0E1F               	movlw	31
  5421  0008B8  642F               	cpfsgt	drawChar@c,c
  5422  0008BA  D004               	goto	l4271
  5423  0008BC  0E7E               	movlw	126
  5424  0008BE  642F               	cpfsgt	drawChar@c,c
  5425  0008C0  D003               	goto	l113
  5426  0008C2  D000               	goto	l4271
  5427  0008C4                     l4271:
  5428                           
  5429                           ;ST7735_TFT.c: 454: c = '?';
  5430  0008C4  0E3F               	movlw	63
  5431  0008C6  6E2F               	movwf	drawChar@c,c
  5432  0008C8                     l113:
  5433                           
  5434                           ;ST7735_TFT.c: 455: for(i=0; i<5; i++ ) {
  5435  0008C8  0E00               	movlw	0
  5436  0008CA  6E38               	movwf	drawChar@i,c
  5437  0008CC                     l4273:
  5438  0008CC  0E04               	movlw	4
  5439  0008CE  6438               	cpfsgt	drawChar@i,c
  5440  0008D0  D001               	goto	l4277
  5441  0008D2  D08D               	goto	l111
  5442  0008D4                     l4277:
  5443                           
  5444                           ;ST7735_TFT.c: 456: unsigned char line;
  5445                           ;ST7735_TFT.c: 457: if(c < 'S')
  5446  0008D4  0E53               	movlw	83
  5447  0008D6  602F               	cpfslt	drawChar@c,c
  5448  0008D8  D015               	goto	l4281
  5449                           
  5450                           ;ST7735_TFT.c: 458: line = font[(c - 32)*5 + i];
  5451  0008DA  0EE0               	movlw	224
  5452  0008DC  242F               	addwf	drawChar@c,w,c
  5453  0008DE  6E11               	movwf	___wmul@multiplier,c
  5454  0008E0  6A12               	clrf	___wmul@multiplier+1,c
  5455  0008E2  0EFF               	movlw	255
  5456  0008E4  2212               	addwfc	___wmul@multiplier+1,f,c
  5457  0008E6  0E00               	movlw	0
  5458  0008E8  6E14               	movwf	___wmul@multiplicand+1,c
  5459  0008EA  0E05               	movlw	5
  5460  0008EC  6E13               	movwf	___wmul@multiplicand,c
  5461  0008EE  ECF0  F00B         	call	___wmul	;wreg free
  5462  0008F2  5038               	movf	drawChar@i,w,c
  5463  0008F4  2611               	addwf	?___wmul,f,c
  5464  0008F6  0E00               	movlw	0
  5465  0008F8  2212               	addwfc	?___wmul+1,f,c
  5466  0008FA  0E8B               	movlw	low _font
  5467  0008FC  2411               	addwf	?___wmul,w,c
  5468  0008FE  6EF6               	movwf	tblptrl,c
  5469  000900  0EFD               	movlw	high _font
  5470  000902  D014               	goto	L1
  5471  000904                     l4281:
  5472                           
  5473                           ;ST7735_TFT.c: 459: else
  5474                           ;ST7735_TFT.c: 460: line = font2[(c - 'S')*5 + i];
  5475  000904  0EAD               	movlw	173
  5476  000906  242F               	addwf	drawChar@c,w,c
  5477  000908  6E11               	movwf	___wmul@multiplier,c
  5478  00090A  6A12               	clrf	___wmul@multiplier+1,c
  5479  00090C  0EFF               	movlw	255
  5480  00090E  2212               	addwfc	___wmul@multiplier+1,f,c
  5481  000910  0E00               	movlw	0
  5482  000912  6E14               	movwf	___wmul@multiplicand+1,c
  5483  000914  0E05               	movlw	5
  5484  000916  6E13               	movwf	___wmul@multiplicand,c
  5485  000918  ECF0  F00B         	call	___wmul	;wreg free
  5486  00091C  5038               	movf	drawChar@i,w,c
  5487  00091E  2611               	addwf	?___wmul,f,c
  5488  000920  0E00               	movlw	0
  5489  000922  2212               	addwfc	?___wmul+1,f,c
  5490  000924  0E8A               	movlw	low _font2
  5491  000926  2411               	addwf	?___wmul,w,c
  5492  000928  6EF6               	movwf	tblptrl,c
  5493  00092A  0EFE               	movlw	high _font2
  5494  00092C                     L1:
  5495  00092C  2012               	addwfc	?___wmul+1,w,c
  5496  00092E  6EF7               	movwf	tblptrh,c
  5497  000930                     	if	0	;There are less than 3 active tblptr bytes
  5498  000930                     	endif
  5499  000930  0008               	tblrd		*
  5500  000932  CFF5 F035          	movff	tablat,drawChar@line
  5501  000936  D000               	goto	l4283
  5502  000938                     l4283:
  5503                           
  5504                           ;ST7735_TFT.c: 461: for(j=0; j<7; j++, line >>= 1) {
  5505  000938  0E00               	movlw	0
  5506  00093A  6E37               	movwf	drawChar@j,c
  5507  00093C                     l4285:
  5508  00093C  0E06               	movlw	6
  5509  00093E  6437               	cpfsgt	drawChar@j,c
  5510  000940  D001               	goto	l120
  5511  000942  D053               	goto	l4309
  5512  000944                     l120:
  5513                           
  5514                           ;ST7735_TFT.c: 462: if(line & 0x01) {
  5515  000944  A035               	btfss	drawChar@line,0,c
  5516  000946  D023               	goto	l4295
  5517                           
  5518                           ;ST7735_TFT.c: 463: if(size == 1) drawPixel(x+i, y+j, color);
  5519  000948  0434               	decf	drawChar@size,w,c
  5520  00094A  A4D8               	btfss	status,2,c
  5521  00094C  D00C               	goto	l4293
  5522  00094E  502E               	movf	drawChar@y,w,c
  5523  000950  2437               	addwf	drawChar@j,w,c
  5524  000952  6E18               	movwf	drawPixel@y,c
  5525  000954  C030  F019         	movff	drawChar@color,drawPixel@color
  5526  000958  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  5527  00095C  5036               	movf	drawChar@x,w,c
  5528  00095E  2438               	addwf	drawChar@i,w,c
  5529  000960  ECC3  F00B         	call	_drawPixel
  5530  000964  D03E               	goto	l4303
  5531  000966                     l4293:
  5532                           
  5533                           ;ST7735_TFT.c: 464: else fillRect(x+(i*size), y+(j*size), size, size, color);
  5534  000966  5037               	movf	drawChar@j,w,c
  5535  000968  0234               	mulwf	drawChar@size,c
  5536  00096A  50F3               	movf	prodl,w,c
  5537  00096C  242E               	addwf	drawChar@y,w,c
  5538  00096E  6E23               	movwf	fillRect@y,c
  5539  000970  C034  F024         	movff	drawChar@size,fillRect@w
  5540  000974  C034  F025         	movff	drawChar@size,fillRect@h
  5541  000978  C030  F026         	movff	drawChar@color,fillRect@color
  5542  00097C  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  5543  000980  5038               	movf	drawChar@i,w,c
  5544  000982  0234               	mulwf	drawChar@size,c
  5545  000984  50F3               	movf	prodl,w,c
  5546  000986  2436               	addwf	drawChar@x,w,c
  5547  000988  ECAC  F00A         	call	_fillRect
  5548                           
  5549                           ;ST7735_TFT.c: 465: }
  5550  00098C  D02A               	goto	l4303
  5551  00098E                     l4295:
  5552                           
  5553                           ;ST7735_TFT.c: 466: else if(bg != color) {
  5554  00098E  5030               	movf	drawChar@color,w,c
  5555  000990  1832               	xorwf	drawChar@bg,w,c
  5556  000992  E104               	bnz	u2850
  5557  000994  5031               	movf	drawChar@color+1,w,c
  5558  000996  1833               	xorwf	drawChar@bg+1,w,c
  5559  000998  B4D8               	btfsc	status,2,c
  5560  00099A  D023               	goto	l4303
  5561  00099C                     u2850:
  5562                           
  5563                           ;ST7735_TFT.c: 467: if(size == 1) drawPixel(x+i, y+j, bg);
  5564  00099C  0434               	decf	drawChar@size,w,c
  5565  00099E  A4D8               	btfss	status,2,c
  5566  0009A0  D00C               	goto	l4301
  5567  0009A2  502E               	movf	drawChar@y,w,c
  5568  0009A4  2437               	addwf	drawChar@j,w,c
  5569  0009A6  6E18               	movwf	drawPixel@y,c
  5570  0009A8  C032  F019         	movff	drawChar@bg,drawPixel@color
  5571  0009AC  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  5572  0009B0  5036               	movf	drawChar@x,w,c
  5573  0009B2  2438               	addwf	drawChar@i,w,c
  5574  0009B4  ECC3  F00B         	call	_drawPixel
  5575  0009B8  D014               	goto	l4303
  5576  0009BA                     l4301:
  5577                           
  5578                           ;ST7735_TFT.c: 468: else fillRect(x+i*size, y+j*size, size, size, bg);
  5579  0009BA  5037               	movf	drawChar@j,w,c
  5580  0009BC  0234               	mulwf	drawChar@size,c
  5581  0009BE  50F3               	movf	prodl,w,c
  5582  0009C0  242E               	addwf	drawChar@y,w,c
  5583  0009C2  6E23               	movwf	fillRect@y,c
  5584  0009C4  C034  F024         	movff	drawChar@size,fillRect@w
  5585  0009C8  C034  F025         	movff	drawChar@size,fillRect@h
  5586  0009CC  C032  F026         	movff	drawChar@bg,fillRect@color
  5587  0009D0  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  5588  0009D4  5038               	movf	drawChar@i,w,c
  5589  0009D6  0234               	mulwf	drawChar@size,c
  5590  0009D8  50F3               	movf	prodl,w,c
  5591  0009DA  2436               	addwf	drawChar@x,w,c
  5592  0009DC  ECAC  F00A         	call	_fillRect
  5593  0009E0  D000               	goto	l4303
  5594  0009E2                     l4303:
  5595  0009E2  2A37               	incf	drawChar@j,f,c
  5596  0009E4  90D8               	bcf	status,0,c
  5597  0009E6  3235               	rrcf	drawChar@line,f,c
  5598  0009E8  D7A9               	goto	l4285
  5599  0009EA                     l4309:
  5600  0009EA  2A38               	incf	drawChar@i,f,c
  5601  0009EC  D76F               	goto	l4273
  5602  0009EE                     l111:
  5603  0009EE  0012               	return		;funcret
  5604  0009F0                     __end_of_drawChar:
  5605                           	opt stack 0
  5606                           tblptru	equ	0xFF8
  5607                           tblptrh	equ	0xFF7
  5608                           tblptrl	equ	0xFF6
  5609                           tablat	equ	0xFF5
  5610                           prodh	equ	0xFF4
  5611                           prodl	equ	0xFF3
  5612                           intcon	equ	0xFF2
  5613                           intcon2	equ	0xFF1
  5614                           postinc0	equ	0xFEE
  5615                           wreg	equ	0xFE8
  5616                           postdec1	equ	0xFE5
  5617                           fsr1l	equ	0xFE1
  5618                           indf2	equ	0xFDF
  5619                           postinc2	equ	0xFDE
  5620                           postdec2	equ	0xFDD
  5621                           fsr2h	equ	0xFDA
  5622                           fsr2l	equ	0xFD9
  5623                           status	equ	0xFD8
  5624                           
  5625 ;; *************** function _fillRect *****************
  5626 ;; Defined at:
  5627 ;;		line 437 in file "ST7735_TFT.c"
  5628 ;; Parameters:    Size  Location     Type
  5629 ;;  x               1    wreg     unsigned char 
  5630 ;;  y               1   34[COMRAM] unsigned char 
  5631 ;;  w               1   35[COMRAM] unsigned char 
  5632 ;;  h               1   36[COMRAM] unsigned char 
  5633 ;;  color           2   37[COMRAM] unsigned int 
  5634 ;; Auto vars:     Size  Location     Type
  5635 ;;  x               1   42[COMRAM] unsigned char 
  5636 ;;  i               2   43[COMRAM] int 
  5637 ;; Return value:  Size  Location     Type
  5638 ;;		None               void
  5639 ;; Registers used:
  5640 ;;		wreg, status,2, status,0, cstack
  5641 ;; Tracked objects:
  5642 ;;		On entry : 0/0
  5643 ;;		On exit  : 0/0
  5644 ;;		Unchanged: 0/0
  5645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5646 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5647 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5648 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5649 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5650 ;;Total ram usage:       11 bytes
  5651 ;; Hardware stack levels used:    1
  5652 ;; Hardware stack levels required when called:    7
  5653 ;; This function calls:
  5654 ;;		_drawFastVLine
  5655 ;; This function is called by:
  5656 ;;		_drawChar
  5657 ;; This function uses a non-reentrant model
  5658 ;;
  5659                           
  5660                           	psect	text22
  5661  001558                     __ptext22:
  5662                           	opt stack 0
  5663  001558                     _fillRect:
  5664                           	opt stack 21
  5665                           
  5666                           ;incstack = 0
  5667                           ;fillRect@x stored from wreg
  5668  001558  6E2B               	movwf	fillRect@x,c
  5669                           
  5670                           ;ST7735_TFT.c: 439: signed int i;
  5671                           ;ST7735_TFT.c: 441: for (i = x; i < x + w; i++)
  5672  00155A  C02B  F02C         	movff	fillRect@x,fillRect@i
  5673  00155E  6A2D               	clrf	fillRect@i+1,c
  5674  001560  D00E               	goto	l4155
  5675  001562                     l4151:
  5676                           
  5677                           ;ST7735_TFT.c: 442: {
  5678                           ;ST7735_TFT.c: 443: drawFastVLine(i, y, h, color);
  5679  001562  C023  F018         	movff	fillRect@y,drawFastVLine@y
  5680  001566  C025  F019         	movff	fillRect@h,drawFastVLine@h
  5681  00156A  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  5682  00156E  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  5683  001572  502C               	movf	fillRect@i,w,c
  5684  001574  EC1A  F008         	call	_drawFastVLine
  5685  001578  4A2C               	infsnz	fillRect@i,f,c
  5686  00157A  2A2D               	incf	fillRect@i+1,f,c
  5687  00157C  D000               	goto	l4155
  5688  00157E                     l4155:
  5689  00157E  5024               	movf	fillRect@w,w,c
  5690  001580  C02B  F028         	movff	fillRect@x,??_fillRect
  5691  001584  6A29               	clrf	(??_fillRect+1)& (0+255),c
  5692  001586  2628               	addwf	??_fillRect,f,c
  5693  001588  0E00               	movlw	0
  5694  00158A  2229               	addwfc	??_fillRect+1,f,c
  5695  00158C  5028               	movf	??_fillRect,w,c
  5696  00158E  5C2C               	subwf	fillRect@i,w,c
  5697  001590  502D               	movf	fillRect@i+1,w,c
  5698  001592  0A80               	xorlw	128
  5699  001594  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  5700  001596  5029               	movf	??_fillRect+1,w,c
  5701  001598  0A80               	xorlw	128
  5702  00159A  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  5703  00159C  A0D8               	btfss	status,0,c
  5704  00159E  D7E1               	goto	l4151
  5705  0015A0  0012               	return		;funcret
  5706  0015A2                     __end_of_fillRect:
  5707                           	opt stack 0
  5708                           tblptru	equ	0xFF8
  5709                           tblptrh	equ	0xFF7
  5710                           tblptrl	equ	0xFF6
  5711                           tablat	equ	0xFF5
  5712                           prodh	equ	0xFF4
  5713                           prodl	equ	0xFF3
  5714                           intcon	equ	0xFF2
  5715                           intcon2	equ	0xFF1
  5716                           postinc0	equ	0xFEE
  5717                           wreg	equ	0xFE8
  5718                           postdec1	equ	0xFE5
  5719                           fsr1l	equ	0xFE1
  5720                           indf2	equ	0xFDF
  5721                           postinc2	equ	0xFDE
  5722                           postdec2	equ	0xFDD
  5723                           fsr2h	equ	0xFDA
  5724                           fsr2l	equ	0xFD9
  5725                           status	equ	0xFD8
  5726                           
  5727 ;; *************** function _drawFastVLine *****************
  5728 ;; Defined at:
  5729 ;;		line 416 in file "ST7735_TFT.c"
  5730 ;; Parameters:    Size  Location     Type
  5731 ;;  x               1    wreg     unsigned char 
  5732 ;;  y               1   23[COMRAM] unsigned char 
  5733 ;;  h               1   24[COMRAM] unsigned char 
  5734 ;;  color           2   25[COMRAM] unsigned int 
  5735 ;; Auto vars:     Size  Location     Type
  5736 ;;  x               1   33[COMRAM] unsigned char 
  5737 ;;  lo              1   32[COMRAM] unsigned char 
  5738 ;;  hi              1   31[COMRAM] unsigned char 
  5739 ;; Return value:  Size  Location     Type
  5740 ;;		None               void
  5741 ;; Registers used:
  5742 ;;		wreg, status,2, status,0, cstack
  5743 ;; Tracked objects:
  5744 ;;		On entry : 0/0
  5745 ;;		On exit  : 0/0
  5746 ;;		Unchanged: 0/0
  5747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5748 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5749 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5750 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5751 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5752 ;;Total ram usage:       11 bytes
  5753 ;; Hardware stack levels used:    1
  5754 ;; Hardware stack levels required when called:    6
  5755 ;; This function calls:
  5756 ;;		_setAddrWindow
  5757 ;;		_spiwrite
  5758 ;; This function is called by:
  5759 ;;		_fillRect
  5760 ;;		_fillCircleHelper
  5761 ;;		_fillCircle
  5762 ;;		_drawRect
  5763 ;; This function uses a non-reentrant model
  5764 ;;
  5765                           
  5766                           	psect	text23
  5767  001034                     __ptext23:
  5768                           	opt stack 0
  5769  001034                     _drawFastVLine:
  5770                           	opt stack 22
  5771                           
  5772                           ;incstack = 0
  5773                           ;drawFastVLine@x stored from wreg
  5774  001034  6E22               	movwf	drawFastVLine@x,c
  5775                           
  5776                           ;ST7735_TFT.c: 418: unsigned char hi, lo;
  5777                           ;ST7735_TFT.c: 419: if((x >= 128) || (y >= 160))
  5778  001036  0E80               	movlw	128
  5779  001038  6022               	cpfslt	drawFastVLine@x,c
  5780  00103A  D03F               	goto	l95
  5781  00103C  0E9F               	movlw	159
  5782  00103E  6418               	cpfsgt	drawFastVLine@y,c
  5783  001040  D001               	goto	l4101
  5784                           
  5785                           ;ST7735_TFT.c: 420: return;
  5786  001042  D03B               	goto	l95
  5787  001044                     l4101:
  5788                           
  5789                           ;ST7735_TFT.c: 421: if((y + h - 1) >= 160)
  5790  001044  0EFF               	movlw	255
  5791  001046  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5792  001048  0EFF               	movlw	255
  5793  00104A  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  5794  00104C  5019               	movf	drawFastVLine@h,w,c
  5795  00104E  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  5796  001052  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  5797  001054  261E               	addwf	??_drawFastVLine+2,f,c
  5798  001056  0E00               	movlw	0
  5799  001058  221F               	addwfc	??_drawFastVLine+3,f,c
  5800  00105A  501C               	movf	??_drawFastVLine,w,c
  5801  00105C  261E               	addwf	??_drawFastVLine+2,f,c
  5802  00105E  501D               	movf	??_drawFastVLine+1,w,c
  5803  001060  221F               	addwfc	??_drawFastVLine+3,f,c
  5804  001062  BE1F               	btfsc	??_drawFastVLine+3,7,c
  5805  001064  D00B               	goto	l4105
  5806  001066  501F               	movf	??_drawFastVLine+3,w,c
  5807  001068  E104               	bnz	u2690
  5808  00106A  0EA0               	movlw	160
  5809  00106C  5C1E               	subwf	??_drawFastVLine+2,w,c
  5810  00106E  A0D8               	btfss	status,0,c
  5811  001070  D005               	goto	l4105
  5812  001072                     u2690:
  5813                           
  5814                           ;ST7735_TFT.c: 422: h = 160 - y;
  5815  001072  5018               	movf	drawFastVLine@y,w,c
  5816  001074  0800               	sublw	0
  5817  001076  0FA0               	addlw	160
  5818  001078  6E19               	movwf	drawFastVLine@h,c
  5819  00107A  D000               	goto	l4105
  5820  00107C                     l4105:
  5821                           
  5822                           ;ST7735_TFT.c: 423: hi = color >> 8; lo = color;
  5823  00107C  501B               	movf	drawFastVLine@color+1,w,c
  5824  00107E  6E20               	movwf	drawFastVLine@hi,c
  5825  001080  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  5826                           
  5827                           ;ST7735_TFT.c: 424: setAddrWindow(x, y, x, y + h - 1);
  5828  001084  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  5829  001088  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  5830  00108C  5018               	movf	drawFastVLine@y,w,c
  5831  00108E  2419               	addwf	drawFastVLine@h,w,c
  5832  001090  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5833  001092  041C               	decf	??_drawFastVLine,w,c
  5834  001094  6E16               	movwf	setAddrWindow@y1,c
  5835  001096  5022               	movf	drawFastVLine@x,w,c
  5836  001098  EC5F  F00A         	call	_setAddrWindow
  5837                           
  5838                           ;ST7735_TFT.c: 425: PORTCbits.RC0 = 1;
  5839  00109C  8082               	bsf	3970,0,c	;volatile
  5840                           
  5841                           ;ST7735_TFT.c: 426: PORTCbits.RC1 = 0;
  5842  00109E  9282               	bcf	3970,1,c	;volatile
  5843                           
  5844                           ;ST7735_TFT.c: 428: while (h--) {
  5845  0010A0  D007               	goto	l4117
  5846  0010A2                     l4115:
  5847                           
  5848                           ;ST7735_TFT.c: 429: spiwrite(hi);
  5849  0010A2  5020               	movf	drawFastVLine@hi,w,c
  5850  0010A4  EC76  F00C         	call	_spiwrite
  5851                           
  5852                           ;ST7735_TFT.c: 430: spiwrite(lo);
  5853  0010A8  5021               	movf	drawFastVLine@lo,w,c
  5854  0010AA  EC76  F00C         	call	_spiwrite
  5855  0010AE  D000               	goto	l4117
  5856  0010B0                     l4117:
  5857  0010B0  0619               	decf	drawFastVLine@h,f,c
  5858  0010B2  2819               	incf	drawFastVLine@h,w,c
  5859  0010B4  A4D8               	btfss	status,2,c
  5860  0010B6  D7F5               	goto	l4115
  5861                           
  5862                           ;ST7735_TFT.c: 431: }
  5863                           ;ST7735_TFT.c: 432: PORTCbits.RC1 = 1;
  5864  0010B8  8282               	bsf	3970,1,c	;volatile
  5865  0010BA                     l95:
  5866  0010BA  0012               	return		;funcret
  5867  0010BC                     __end_of_drawFastVLine:
  5868                           	opt stack 0
  5869                           tblptru	equ	0xFF8
  5870                           tblptrh	equ	0xFF7
  5871                           tblptrl	equ	0xFF6
  5872                           tablat	equ	0xFF5
  5873                           prodh	equ	0xFF4
  5874                           prodl	equ	0xFF3
  5875                           intcon	equ	0xFF2
  5876                           intcon2	equ	0xFF1
  5877                           postinc0	equ	0xFEE
  5878                           wreg	equ	0xFE8
  5879                           postdec1	equ	0xFE5
  5880                           fsr1l	equ	0xFE1
  5881                           indf2	equ	0xFDF
  5882                           postinc2	equ	0xFDE
  5883                           postdec2	equ	0xFDD
  5884                           fsr2h	equ	0xFDA
  5885                           fsr2l	equ	0xFD9
  5886                           status	equ	0xFD8
  5887                           
  5888 ;; *************** function _drawPixel *****************
  5889 ;; Defined at:
  5890 ;;		line 407 in file "ST7735_TFT.c"
  5891 ;; Parameters:    Size  Location     Type
  5892 ;;  x               1    wreg     unsigned char 
  5893 ;;  y               1   23[COMRAM] unsigned char 
  5894 ;;  color           2   24[COMRAM] unsigned int 
  5895 ;; Auto vars:     Size  Location     Type
  5896 ;;  x               1   26[COMRAM] unsigned char 
  5897 ;; Return value:  Size  Location     Type
  5898 ;;		None               void
  5899 ;; Registers used:
  5900 ;;		wreg, status,2, status,0, cstack
  5901 ;; Tracked objects:
  5902 ;;		On entry : 0/0
  5903 ;;		On exit  : 0/0
  5904 ;;		Unchanged: 0/0
  5905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5906 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5907 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5909 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5910 ;;Total ram usage:        4 bytes
  5911 ;; Hardware stack levels used:    1
  5912 ;; Hardware stack levels required when called:    6
  5913 ;; This function calls:
  5914 ;;		_setAddrWindow
  5915 ;;		_write_data
  5916 ;; This function is called by:
  5917 ;;		_drawChar
  5918 ;;		_drawCircle
  5919 ;;		_drawCircleHelper
  5920 ;; This function uses a non-reentrant model
  5921 ;;
  5922                           
  5923                           	psect	text24
  5924  001786                     __ptext24:
  5925                           	opt stack 0
  5926  001786                     _drawPixel:
  5927                           	opt stack 22
  5928                           
  5929                           ;incstack = 0
  5930                           ;drawPixel@x stored from wreg
  5931  001786  6E1B               	movwf	drawPixel@x,c
  5932                           
  5933                           ;ST7735_TFT.c: 409: if((x >= 128) || (y >= 160))
  5934  001788  0E80               	movlw	128
  5935  00178A  601B               	cpfslt	drawPixel@x,c
  5936  00178C  D013               	goto	l89
  5937  00178E  0E9F               	movlw	159
  5938  001790  6418               	cpfsgt	drawPixel@y,c
  5939  001792  D001               	goto	l4143
  5940                           
  5941                           ;ST7735_TFT.c: 410: return;
  5942  001794  D00F               	goto	l89
  5943  001796                     l4143:
  5944                           
  5945                           ;ST7735_TFT.c: 411: setAddrWindow(x,y,x+1,y+1);
  5946  001796  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  5947  00179A  281B               	incf	drawPixel@x,w,c
  5948  00179C  6E15               	movwf	setAddrWindow@x1,c
  5949  00179E  2818               	incf	drawPixel@y,w,c
  5950  0017A0  6E16               	movwf	setAddrWindow@y1,c
  5951  0017A2  501B               	movf	drawPixel@x,w,c
  5952  0017A4  EC5F  F00A         	call	_setAddrWindow
  5953                           
  5954                           ;ST7735_TFT.c: 412: write_data(color >> 8);
  5955  0017A8  501A               	movf	drawPixel@color+1,w,c
  5956  0017AA  ECAD  F00C         	call	_write_data
  5957                           
  5958                           ;ST7735_TFT.c: 413: write_data(color & 0xFF);
  5959  0017AE  5019               	movf	drawPixel@color,w,c
  5960  0017B0  ECAD  F00C         	call	_write_data
  5961  0017B4                     l89:
  5962  0017B4  0012               	return		;funcret
  5963  0017B6                     __end_of_drawPixel:
  5964                           	opt stack 0
  5965                           tblptru	equ	0xFF8
  5966                           tblptrh	equ	0xFF7
  5967                           tblptrl	equ	0xFF6
  5968                           tablat	equ	0xFF5
  5969                           prodh	equ	0xFF4
  5970                           prodl	equ	0xFF3
  5971                           intcon	equ	0xFF2
  5972                           intcon2	equ	0xFF1
  5973                           postinc0	equ	0xFEE
  5974                           wreg	equ	0xFE8
  5975                           postdec1	equ	0xFE5
  5976                           fsr1l	equ	0xFE1
  5977                           indf2	equ	0xFDF
  5978                           postinc2	equ	0xFDE
  5979                           postdec2	equ	0xFDD
  5980                           fsr2h	equ	0xFDA
  5981                           fsr2l	equ	0xFD9
  5982                           status	equ	0xFD8
  5983                           
  5984 ;; *************** function _setAddrWindow *****************
  5985 ;; Defined at:
  5986 ;;		line 392 in file "ST7735_TFT.c"
  5987 ;; Parameters:    Size  Location     Type
  5988 ;;  x0              1    wreg     unsigned char 
  5989 ;;  y0              1   19[COMRAM] unsigned char 
  5990 ;;  x1              1   20[COMRAM] unsigned char 
  5991 ;;  y1              1   21[COMRAM] unsigned char 
  5992 ;; Auto vars:     Size  Location     Type
  5993 ;;  x0              1   22[COMRAM] unsigned char 
  5994 ;; Return value:  Size  Location     Type
  5995 ;;		None               void
  5996 ;; Registers used:
  5997 ;;		wreg, status,2, status,0, cstack
  5998 ;; Tracked objects:
  5999 ;;		On entry : 0/0
  6000 ;;		On exit  : 0/0
  6001 ;;		Unchanged: 0/0
  6002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6003 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6004 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6006 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6007 ;;Total ram usage:        4 bytes
  6008 ;; Hardware stack levels used:    1
  6009 ;; Hardware stack levels required when called:    5
  6010 ;; This function calls:
  6011 ;;		_write_command
  6012 ;;		_write_data
  6013 ;; This function is called by:
  6014 ;;		_drawPixel
  6015 ;;		_drawFastVLine
  6016 ;;		_fillRectangle
  6017 ;;		_drawFastHLine
  6018 ;; This function uses a non-reentrant model
  6019 ;;
  6020                           
  6021                           	psect	text25
  6022  0014BE                     __ptext25:
  6023                           	opt stack 0
  6024  0014BE                     _setAddrWindow:
  6025                           	opt stack 22
  6026                           
  6027                           ;incstack = 0
  6028                           ;setAddrWindow@x0 stored from wreg
  6029  0014BE  6E17               	movwf	setAddrWindow@x0,c
  6030                           
  6031                           ;ST7735_TFT.c: 394: write_command(0x2A);
  6032  0014C0  0E2A               	movlw	42
  6033  0014C2  ECB5  F00C         	call	_write_command
  6034                           
  6035                           ;ST7735_TFT.c: 395: write_data(0);
  6036  0014C6  0E00               	movlw	0
  6037  0014C8  ECAD  F00C         	call	_write_data
  6038                           
  6039                           ;ST7735_TFT.c: 396: write_data(x0 + colstart);
  6040  0014CC  5017               	movf	setAddrWindow@x0,w,c
  6041  0014CE  2459               	addwf	_colstart,w,c
  6042  0014D0  ECAD  F00C         	call	_write_data
  6043                           
  6044                           ;ST7735_TFT.c: 397: write_data(0);
  6045  0014D4  0E00               	movlw	0
  6046  0014D6  ECAD  F00C         	call	_write_data
  6047                           
  6048                           ;ST7735_TFT.c: 398: write_data(x1 + colstart);
  6049  0014DA  5015               	movf	setAddrWindow@x1,w,c
  6050  0014DC  2459               	addwf	_colstart,w,c
  6051  0014DE  ECAD  F00C         	call	_write_data
  6052                           
  6053                           ;ST7735_TFT.c: 399: write_command(0x2B);
  6054  0014E2  0E2B               	movlw	43
  6055  0014E4  ECB5  F00C         	call	_write_command
  6056                           
  6057                           ;ST7735_TFT.c: 400: write_data(0);
  6058  0014E8  0E00               	movlw	0
  6059  0014EA  ECAD  F00C         	call	_write_data
  6060                           
  6061                           ;ST7735_TFT.c: 401: write_data(y0 + rowstart);
  6062  0014EE  5014               	movf	setAddrWindow@y0,w,c
  6063  0014F0  2461               	addwf	_rowstart,w,c
  6064  0014F2  ECAD  F00C         	call	_write_data
  6065                           
  6066                           ;ST7735_TFT.c: 402: write_data(0);
  6067  0014F6  0E00               	movlw	0
  6068  0014F8  ECAD  F00C         	call	_write_data
  6069                           
  6070                           ;ST7735_TFT.c: 403: write_data(y1 + rowstart);
  6071  0014FC  5016               	movf	setAddrWindow@y1,w,c
  6072  0014FE  2461               	addwf	_rowstart,w,c
  6073  001500  ECAD  F00C         	call	_write_data
  6074                           
  6075                           ;ST7735_TFT.c: 404: write_command(0x2C);
  6076  001504  0E2C               	movlw	44
  6077  001506  ECB5  F00C         	call	_write_command
  6078  00150A  0012               	return		;funcret
  6079  00150C                     __end_of_setAddrWindow:
  6080                           	opt stack 0
  6081                           tblptru	equ	0xFF8
  6082                           tblptrh	equ	0xFF7
  6083                           tblptrl	equ	0xFF6
  6084                           tablat	equ	0xFF5
  6085                           prodh	equ	0xFF4
  6086                           prodl	equ	0xFF3
  6087                           intcon	equ	0xFF2
  6088                           intcon2	equ	0xFF1
  6089                           postinc0	equ	0xFEE
  6090                           wreg	equ	0xFE8
  6091                           postdec1	equ	0xFE5
  6092                           fsr1l	equ	0xFE1
  6093                           indf2	equ	0xFDF
  6094                           postinc2	equ	0xFDE
  6095                           postdec2	equ	0xFDD
  6096                           fsr2h	equ	0xFDA
  6097                           fsr2l	equ	0xFD9
  6098                           status	equ	0xFD8
  6099                           
  6100 ;; *************** function _TFT_GreenTab_Initialize *****************
  6101 ;; Defined at:
  6102 ;;		line 644 in file "ST7735_TFT.c"
  6103 ;; Parameters:    Size  Location     Type
  6104 ;;		None
  6105 ;; Auto vars:     Size  Location     Type
  6106 ;;		None
  6107 ;; Return value:  Size  Location     Type
  6108 ;;		None               void
  6109 ;; Registers used:
  6110 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6111 ;; Tracked objects:
  6112 ;;		On entry : 0/0
  6113 ;;		On exit  : 0/0
  6114 ;;		Unchanged: 0/0
  6115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6119 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6120 ;;Total ram usage:        0 bytes
  6121 ;; Hardware stack levels used:    1
  6122 ;; Hardware stack levels required when called:    6
  6123 ;; This function calls:
  6124 ;;		_Rcmd1
  6125 ;;		_Rcmd2red
  6126 ;;		_Rcmd3
  6127 ;;		_write_command
  6128 ;;		_write_data
  6129 ;; This function is called by:
  6130 ;;		_Initialize_Screen
  6131 ;; This function uses a non-reentrant model
  6132 ;;
  6133                           
  6134                           	psect	text26
  6135  0017B6                     __ptext26:
  6136                           	opt stack 0
  6137  0017B6                     _TFT_GreenTab_Initialize:
  6138                           	opt stack 22
  6139                           
  6140                           ;ST7735_TFT.c: 646: PORTCbits.RC1 = 1;
  6141                           
  6142                           ;incstack = 0
  6143  0017B6  8282               	bsf	3970,1,c	;volatile
  6144                           
  6145                           ;ST7735_TFT.c: 647: PORTCbits.RC0 = 0;
  6146  0017B8  9082               	bcf	3970,0,c	;volatile
  6147                           
  6148                           ;ST7735_TFT.c: 649: SSPSTAT=0x80;
  6149  0017BA  0E80               	movlw	128
  6150  0017BC  6EC7               	movwf	4039,c	;volatile
  6151                           
  6152                           ;ST7735_TFT.c: 650: SSPCON1=0x30;
  6153  0017BE  0E30               	movlw	48
  6154  0017C0  6EC6               	movwf	4038,c	;volatile
  6155                           
  6156                           ;ST7735_TFT.c: 653: Rcmd1();
  6157  0017C2  EC94  F005         	call	_Rcmd1	;wreg free
  6158                           
  6159                           ;ST7735_TFT.c: 654: Rcmd2red();
  6160  0017C6  EC36  F00B         	call	_Rcmd2red	;wreg free
  6161                           
  6162                           ;ST7735_TFT.c: 655: Rcmd3();
  6163  0017CA  ECA1  F006         	call	_Rcmd3	;wreg free
  6164                           
  6165                           ;ST7735_TFT.c: 656: write_command(0x36);
  6166  0017CE  0E36               	movlw	54
  6167  0017D0  ECB5  F00C         	call	_write_command
  6168                           
  6169                           ;ST7735_TFT.c: 657: write_data(0xC0);
  6170  0017D4  0EC0               	movlw	192
  6171  0017D6  ECAD  F00C         	call	_write_data
  6172                           
  6173                           ;ST7735_TFT.c: 658: _tft_type = 1;
  6174  0017DA  0E01               	movlw	1
  6175  0017DC  6E53               	movwf	__tft_type,c
  6176  0017DE  0012               	return		;funcret
  6177  0017E0                     __end_of_TFT_GreenTab_Initialize:
  6178                           	opt stack 0
  6179                           tblptru	equ	0xFF8
  6180                           tblptrh	equ	0xFF7
  6181                           tblptrl	equ	0xFF6
  6182                           tablat	equ	0xFF5
  6183                           prodh	equ	0xFF4
  6184                           prodl	equ	0xFF3
  6185                           intcon	equ	0xFF2
  6186                           intcon2	equ	0xFF1
  6187                           postinc0	equ	0xFEE
  6188                           wreg	equ	0xFE8
  6189                           postdec1	equ	0xFE5
  6190                           fsr1l	equ	0xFE1
  6191                           indf2	equ	0xFDF
  6192                           postinc2	equ	0xFDE
  6193                           postdec2	equ	0xFDD
  6194                           fsr2h	equ	0xFDA
  6195                           fsr2l	equ	0xFD9
  6196                           status	equ	0xFD8
  6197                           
  6198 ;; *************** function _Rcmd3 *****************
  6199 ;; Defined at:
  6200 ;;		line 338 in file "ST7735_TFT.c"
  6201 ;; Parameters:    Size  Location     Type
  6202 ;;		None
  6203 ;; Auto vars:     Size  Location     Type
  6204 ;;		None
  6205 ;; Return value:  Size  Location     Type
  6206 ;;		None               void
  6207 ;; Registers used:
  6208 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6209 ;; Tracked objects:
  6210 ;;		On entry : 0/0
  6211 ;;		On exit  : 0/0
  6212 ;;		Unchanged: 0/0
  6213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6217 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6218 ;;Total ram usage:        0 bytes
  6219 ;; Hardware stack levels used:    1
  6220 ;; Hardware stack levels required when called:    5
  6221 ;; This function calls:
  6222 ;;		_delay_ms
  6223 ;;		_write_command
  6224 ;;		_write_data
  6225 ;; This function is called by:
  6226 ;;		_TFT_GreenTab_Initialize
  6227 ;;		_TFT_BlackTab_Initialize
  6228 ;; This function uses a non-reentrant model
  6229 ;;
  6230                           
  6231                           	psect	text27
  6232  000D42                     __ptext27:
  6233                           	opt stack 0
  6234  000D42                     _Rcmd3:
  6235                           	opt stack 22
  6236                           
  6237                           ;ST7735_TFT.c: 340: write_command(0xE0);
  6238                           
  6239                           ;incstack = 0
  6240  000D42  0EE0               	movlw	224
  6241  000D44  ECB5  F00C         	call	_write_command
  6242                           
  6243                           ;ST7735_TFT.c: 341: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  6244  000D48  0E02               	movlw	2
  6245  000D4A  ECAD  F00C         	call	_write_data
  6246  000D4E  0E1C               	movlw	28
  6247  000D50  ECAD  F00C         	call	_write_data
  6248  000D54  0E07               	movlw	7
  6249  000D56  ECAD  F00C         	call	_write_data
  6250  000D5A  0E12               	movlw	18
  6251  000D5C  ECAD  F00C         	call	_write_data
  6252                           
  6253                           ;ST7735_TFT.c: 342: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  6254  000D60  0E37               	movlw	55
  6255  000D62  ECAD  F00C         	call	_write_data
  6256  000D66  0E32               	movlw	50
  6257  000D68  ECAD  F00C         	call	_write_data
  6258  000D6C  0E29               	movlw	41
  6259  000D6E  ECAD  F00C         	call	_write_data
  6260  000D72  0E2D               	movlw	45
  6261  000D74  ECAD  F00C         	call	_write_data
  6262                           
  6263                           ;ST7735_TFT.c: 343: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  6264  000D78  0E29               	movlw	41
  6265  000D7A  ECAD  F00C         	call	_write_data
  6266  000D7E  0E25               	movlw	37
  6267  000D80  ECAD  F00C         	call	_write_data
  6268  000D84  0E2B               	movlw	43
  6269  000D86  ECAD  F00C         	call	_write_data
  6270  000D8A  0E39               	movlw	57
  6271  000D8C  ECAD  F00C         	call	_write_data
  6272                           
  6273                           ;ST7735_TFT.c: 344: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  6274  000D90  0E00               	movlw	0
  6275  000D92  ECAD  F00C         	call	_write_data
  6276  000D96  0E01               	movlw	1
  6277  000D98  ECAD  F00C         	call	_write_data
  6278  000D9C  0E03               	movlw	3
  6279  000D9E  ECAD  F00C         	call	_write_data
  6280  000DA2  0E10               	movlw	16
  6281  000DA4  ECAD  F00C         	call	_write_data
  6282                           
  6283                           ;ST7735_TFT.c: 345: write_command(0xE1);
  6284  000DA8  0EE1               	movlw	225
  6285  000DAA  ECB5  F00C         	call	_write_command
  6286                           
  6287                           ;ST7735_TFT.c: 346: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  6288  000DAE  0E03               	movlw	3
  6289  000DB0  ECAD  F00C         	call	_write_data
  6290  000DB4  0E1D               	movlw	29
  6291  000DB6  ECAD  F00C         	call	_write_data
  6292  000DBA  0E07               	movlw	7
  6293  000DBC  ECAD  F00C         	call	_write_data
  6294  000DC0  0E06               	movlw	6
  6295  000DC2  ECAD  F00C         	call	_write_data
  6296                           
  6297                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  6298  000DC6  0E2E               	movlw	46
  6299  000DC8  ECAD  F00C         	call	_write_data
  6300  000DCC  0E2C               	movlw	44
  6301  000DCE  ECAD  F00C         	call	_write_data
  6302  000DD2  0E29               	movlw	41
  6303  000DD4  ECAD  F00C         	call	_write_data
  6304  000DD8  0E2D               	movlw	45
  6305  000DDA  ECAD  F00C         	call	_write_data
  6306                           
  6307                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  6308  000DDE  0E2E               	movlw	46
  6309  000DE0  ECAD  F00C         	call	_write_data
  6310  000DE4  0E2E               	movlw	46
  6311  000DE6  ECAD  F00C         	call	_write_data
  6312  000DEA  0E37               	movlw	55
  6313  000DEC  ECAD  F00C         	call	_write_data
  6314  000DF0  0E3F               	movlw	63
  6315  000DF2  ECAD  F00C         	call	_write_data
  6316                           
  6317                           ;ST7735_TFT.c: 349: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  6318  000DF6  0E00               	movlw	0
  6319  000DF8  ECAD  F00C         	call	_write_data
  6320  000DFC  0E00               	movlw	0
  6321  000DFE  ECAD  F00C         	call	_write_data
  6322  000E02  0E02               	movlw	2
  6323  000E04  ECAD  F00C         	call	_write_data
  6324  000E08  0E10               	movlw	16
  6325  000E0A  ECAD  F00C         	call	_write_data
  6326                           
  6327                           ;ST7735_TFT.c: 350: write_command(0x13);
  6328  000E0E  0E13               	movlw	19
  6329  000E10  ECB5  F00C         	call	_write_command
  6330                           
  6331                           ;ST7735_TFT.c: 351: delay_ms(10);
  6332  000E14  0E00               	movlw	0
  6333  000E16  6E18               	movwf	delay_ms@ms+1,c
  6334  000E18  0E0A               	movlw	10
  6335  000E1A  6E17               	movwf	delay_ms@ms,c
  6336  000E1C  EC36  F00A         	call	_delay_ms	;wreg free
  6337                           
  6338                           ;ST7735_TFT.c: 352: write_command(0x29);
  6339  000E20  0E29               	movlw	41
  6340  000E22  ECB5  F00C         	call	_write_command
  6341                           
  6342                           ;ST7735_TFT.c: 353: delay_ms(100);
  6343  000E26  0E00               	movlw	0
  6344  000E28  6E18               	movwf	delay_ms@ms+1,c
  6345  000E2A  0E64               	movlw	100
  6346  000E2C  6E17               	movwf	delay_ms@ms,c
  6347  000E2E  EC36  F00A         	call	_delay_ms	;wreg free
  6348  000E32  0012               	return		;funcret
  6349  000E34                     __end_of_Rcmd3:
  6350                           	opt stack 0
  6351                           tblptru	equ	0xFF8
  6352                           tblptrh	equ	0xFF7
  6353                           tblptrl	equ	0xFF6
  6354                           tablat	equ	0xFF5
  6355                           prodh	equ	0xFF4
  6356                           prodl	equ	0xFF3
  6357                           intcon	equ	0xFF2
  6358                           intcon2	equ	0xFF1
  6359                           postinc0	equ	0xFEE
  6360                           wreg	equ	0xFE8
  6361                           postdec1	equ	0xFE5
  6362                           fsr1l	equ	0xFE1
  6363                           indf2	equ	0xFDF
  6364                           postinc2	equ	0xFDE
  6365                           postdec2	equ	0xFDD
  6366                           fsr2h	equ	0xFDA
  6367                           fsr2l	equ	0xFD9
  6368                           status	equ	0xFD8
  6369                           
  6370 ;; *************** function _Rcmd2red *****************
  6371 ;; Defined at:
  6372 ;;		line 328 in file "ST7735_TFT.c"
  6373 ;; Parameters:    Size  Location     Type
  6374 ;;		None
  6375 ;; Auto vars:     Size  Location     Type
  6376 ;;		None
  6377 ;; Return value:  Size  Location     Type
  6378 ;;		None               void
  6379 ;; Registers used:
  6380 ;;		wreg, status,2, cstack
  6381 ;; Tracked objects:
  6382 ;;		On entry : 0/0
  6383 ;;		On exit  : 0/0
  6384 ;;		Unchanged: 0/0
  6385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6390 ;;Total ram usage:        0 bytes
  6391 ;; Hardware stack levels used:    1
  6392 ;; Hardware stack levels required when called:    5
  6393 ;; This function calls:
  6394 ;;		_write_command
  6395 ;;		_write_data
  6396 ;; This function is called by:
  6397 ;;		_TFT_GreenTab_Initialize
  6398 ;; This function uses a non-reentrant model
  6399 ;;
  6400                           
  6401                           	psect	text28
  6402  00166C                     __ptext28:
  6403                           	opt stack 0
  6404  00166C                     _Rcmd2red:
  6405                           	opt stack 22
  6406                           
  6407                           ;ST7735_TFT.c: 330: write_command(0x2A);
  6408                           
  6409                           ;incstack = 0
  6410  00166C  0E2A               	movlw	42
  6411  00166E  ECB5  F00C         	call	_write_command
  6412                           
  6413                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x00);
  6414  001672  0E00               	movlw	0
  6415  001674  ECAD  F00C         	call	_write_data
  6416  001678  0E00               	movlw	0
  6417  00167A  ECAD  F00C         	call	_write_data
  6418                           
  6419                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x7F);
  6420  00167E  0E00               	movlw	0
  6421  001680  ECAD  F00C         	call	_write_data
  6422  001684  0E7F               	movlw	127
  6423  001686  ECAD  F00C         	call	_write_data
  6424                           
  6425                           ;ST7735_TFT.c: 333: write_command(0x2B);
  6426  00168A  0E2B               	movlw	43
  6427  00168C  ECB5  F00C         	call	_write_command
  6428                           
  6429                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x00);
  6430  001690  0E00               	movlw	0
  6431  001692  ECAD  F00C         	call	_write_data
  6432  001696  0E00               	movlw	0
  6433  001698  ECAD  F00C         	call	_write_data
  6434                           
  6435                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x9F);
  6436  00169C  0E00               	movlw	0
  6437  00169E  ECAD  F00C         	call	_write_data
  6438  0016A2  0E9F               	movlw	159
  6439  0016A4  ECAD  F00C         	call	_write_data
  6440  0016A8  0012               	return		;funcret
  6441  0016AA                     __end_of_Rcmd2red:
  6442                           	opt stack 0
  6443                           tblptru	equ	0xFF8
  6444                           tblptrh	equ	0xFF7
  6445                           tblptrl	equ	0xFF6
  6446                           tablat	equ	0xFF5
  6447                           prodh	equ	0xFF4
  6448                           prodl	equ	0xFF3
  6449                           intcon	equ	0xFF2
  6450                           intcon2	equ	0xFF1
  6451                           postinc0	equ	0xFEE
  6452                           wreg	equ	0xFE8
  6453                           postdec1	equ	0xFE5
  6454                           fsr1l	equ	0xFE1
  6455                           indf2	equ	0xFDF
  6456                           postinc2	equ	0xFDE
  6457                           postdec2	equ	0xFDD
  6458                           fsr2h	equ	0xFDA
  6459                           fsr2l	equ	0xFD9
  6460                           status	equ	0xFD8
  6461                           
  6462 ;; *************** function _Rcmd1 *****************
  6463 ;; Defined at:
  6464 ;;		line 281 in file "ST7735_TFT.c"
  6465 ;; Parameters:    Size  Location     Type
  6466 ;;		None
  6467 ;; Auto vars:     Size  Location     Type
  6468 ;;		None
  6469 ;; Return value:  Size  Location     Type
  6470 ;;		None               void
  6471 ;; Registers used:
  6472 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6473 ;; Tracked objects:
  6474 ;;		On entry : 0/0
  6475 ;;		On exit  : 0/0
  6476 ;;		Unchanged: 0/0
  6477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6481 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6482 ;;Total ram usage:        0 bytes
  6483 ;; Hardware stack levels used:    1
  6484 ;; Hardware stack levels required when called:    5
  6485 ;; This function calls:
  6486 ;;		_delay_ms
  6487 ;;		_write_command
  6488 ;;		_write_data
  6489 ;; This function is called by:
  6490 ;;		_TFT_GreenTab_Initialize
  6491 ;;		_TFT_BlackTab_Initialize
  6492 ;; This function uses a non-reentrant model
  6493 ;;
  6494                           
  6495                           	psect	text29
  6496  000B28                     __ptext29:
  6497                           	opt stack 0
  6498  000B28                     _Rcmd1:
  6499                           	opt stack 22
  6500                           
  6501                           ;ST7735_TFT.c: 283: write_command(0x01);
  6502                           
  6503                           ;incstack = 0
  6504  000B28  0E01               	movlw	1
  6505  000B2A  ECB5  F00C         	call	_write_command
  6506                           
  6507                           ;ST7735_TFT.c: 284: delay_ms(150);
  6508  000B2E  0E00               	movlw	0
  6509  000B30  6E18               	movwf	delay_ms@ms+1,c
  6510  000B32  0E96               	movlw	150
  6511  000B34  6E17               	movwf	delay_ms@ms,c
  6512  000B36  EC36  F00A         	call	_delay_ms	;wreg free
  6513                           
  6514                           ;ST7735_TFT.c: 285: write_command(0x11);
  6515  000B3A  0E11               	movlw	17
  6516  000B3C  ECB5  F00C         	call	_write_command
  6517                           
  6518                           ;ST7735_TFT.c: 286: delay_ms(500);
  6519  000B40  0E01               	movlw	1
  6520  000B42  6E18               	movwf	delay_ms@ms+1,c
  6521  000B44  0EF4               	movlw	244
  6522  000B46  6E17               	movwf	delay_ms@ms,c
  6523  000B48  EC36  F00A         	call	_delay_ms	;wreg free
  6524                           
  6525                           ;ST7735_TFT.c: 287: write_command(0xB1);
  6526  000B4C  0EB1               	movlw	177
  6527  000B4E  ECB5  F00C         	call	_write_command
  6528                           
  6529                           ;ST7735_TFT.c: 288: write_data(0x01);
  6530  000B52  0E01               	movlw	1
  6531  000B54  ECAD  F00C         	call	_write_data
  6532                           
  6533                           ;ST7735_TFT.c: 289: write_data(0x2C);
  6534  000B58  0E2C               	movlw	44
  6535  000B5A  ECAD  F00C         	call	_write_data
  6536                           
  6537                           ;ST7735_TFT.c: 290: write_data(0x2D);
  6538  000B5E  0E2D               	movlw	45
  6539  000B60  ECAD  F00C         	call	_write_data
  6540                           
  6541                           ;ST7735_TFT.c: 291: write_command(0xB2);
  6542  000B64  0EB2               	movlw	178
  6543  000B66  ECB5  F00C         	call	_write_command
  6544                           
  6545                           ;ST7735_TFT.c: 292: write_data(0x01);
  6546  000B6A  0E01               	movlw	1
  6547  000B6C  ECAD  F00C         	call	_write_data
  6548                           
  6549                           ;ST7735_TFT.c: 293: write_data(0x2C);
  6550  000B70  0E2C               	movlw	44
  6551  000B72  ECAD  F00C         	call	_write_data
  6552                           
  6553                           ;ST7735_TFT.c: 294: write_data(0x2D);
  6554  000B76  0E2D               	movlw	45
  6555  000B78  ECAD  F00C         	call	_write_data
  6556                           
  6557                           ;ST7735_TFT.c: 295: write_command(0xB3);
  6558  000B7C  0EB3               	movlw	179
  6559  000B7E  ECB5  F00C         	call	_write_command
  6560                           
  6561                           ;ST7735_TFT.c: 296: write_data(0x01);
  6562  000B82  0E01               	movlw	1
  6563  000B84  ECAD  F00C         	call	_write_data
  6564                           
  6565                           ;ST7735_TFT.c: 297: write_data(0x2C);
  6566  000B88  0E2C               	movlw	44
  6567  000B8A  ECAD  F00C         	call	_write_data
  6568                           
  6569                           ;ST7735_TFT.c: 298: write_data(0x2D);
  6570  000B8E  0E2D               	movlw	45
  6571  000B90  ECAD  F00C         	call	_write_data
  6572                           
  6573                           ;ST7735_TFT.c: 299: write_data(0x01);
  6574  000B94  0E01               	movlw	1
  6575  000B96  ECAD  F00C         	call	_write_data
  6576                           
  6577                           ;ST7735_TFT.c: 300: write_data(0x2C);
  6578  000B9A  0E2C               	movlw	44
  6579  000B9C  ECAD  F00C         	call	_write_data
  6580                           
  6581                           ;ST7735_TFT.c: 301: write_data(0x2D);
  6582  000BA0  0E2D               	movlw	45
  6583  000BA2  ECAD  F00C         	call	_write_data
  6584                           
  6585                           ;ST7735_TFT.c: 302: write_command(0xB4);
  6586  000BA6  0EB4               	movlw	180
  6587  000BA8  ECB5  F00C         	call	_write_command
  6588                           
  6589                           ;ST7735_TFT.c: 303: write_data(0x07);
  6590  000BAC  0E07               	movlw	7
  6591  000BAE  ECAD  F00C         	call	_write_data
  6592                           
  6593                           ;ST7735_TFT.c: 304: write_command(0xC0);
  6594  000BB2  0EC0               	movlw	192
  6595  000BB4  ECB5  F00C         	call	_write_command
  6596                           
  6597                           ;ST7735_TFT.c: 305: write_data(0xA2);
  6598  000BB8  0EA2               	movlw	162
  6599  000BBA  ECAD  F00C         	call	_write_data
  6600                           
  6601                           ;ST7735_TFT.c: 306: write_data(0x02);
  6602  000BBE  0E02               	movlw	2
  6603  000BC0  ECAD  F00C         	call	_write_data
  6604                           
  6605                           ;ST7735_TFT.c: 307: write_data(0x84);
  6606  000BC4  0E84               	movlw	132
  6607  000BC6  ECAD  F00C         	call	_write_data
  6608                           
  6609                           ;ST7735_TFT.c: 308: write_command(0xC1);
  6610  000BCA  0EC1               	movlw	193
  6611  000BCC  ECB5  F00C         	call	_write_command
  6612                           
  6613                           ;ST7735_TFT.c: 309: write_data(0xC5);
  6614  000BD0  0EC5               	movlw	197
  6615  000BD2  ECAD  F00C         	call	_write_data
  6616                           
  6617                           ;ST7735_TFT.c: 310: write_command(0xC2);
  6618  000BD6  0EC2               	movlw	194
  6619  000BD8  ECB5  F00C         	call	_write_command
  6620                           
  6621                           ;ST7735_TFT.c: 311: write_data(0x0A);
  6622  000BDC  0E0A               	movlw	10
  6623  000BDE  ECAD  F00C         	call	_write_data
  6624                           
  6625                           ;ST7735_TFT.c: 312: write_data(0x00);
  6626  000BE2  0E00               	movlw	0
  6627  000BE4  ECAD  F00C         	call	_write_data
  6628                           
  6629                           ;ST7735_TFT.c: 313: write_command(0xC3);
  6630  000BE8  0EC3               	movlw	195
  6631  000BEA  ECB5  F00C         	call	_write_command
  6632                           
  6633                           ;ST7735_TFT.c: 314: write_data(0x8A);
  6634  000BEE  0E8A               	movlw	138
  6635  000BF0  ECAD  F00C         	call	_write_data
  6636                           
  6637                           ;ST7735_TFT.c: 315: write_data(0x2A);
  6638  000BF4  0E2A               	movlw	42
  6639  000BF6  ECAD  F00C         	call	_write_data
  6640                           
  6641                           ;ST7735_TFT.c: 316: write_command(0xC4);
  6642  000BFA  0EC4               	movlw	196
  6643  000BFC  ECB5  F00C         	call	_write_command
  6644                           
  6645                           ;ST7735_TFT.c: 317: write_data(0x8A);
  6646  000C00  0E8A               	movlw	138
  6647  000C02  ECAD  F00C         	call	_write_data
  6648                           
  6649                           ;ST7735_TFT.c: 318: write_data(0xEE);
  6650  000C06  0EEE               	movlw	238
  6651  000C08  ECAD  F00C         	call	_write_data
  6652                           
  6653                           ;ST7735_TFT.c: 319: write_command(0xC5);
  6654  000C0C  0EC5               	movlw	197
  6655  000C0E  ECB5  F00C         	call	_write_command
  6656                           
  6657                           ;ST7735_TFT.c: 320: write_data(0x0E);
  6658  000C12  0E0E               	movlw	14
  6659  000C14  ECAD  F00C         	call	_write_data
  6660                           
  6661                           ;ST7735_TFT.c: 321: write_command(0x20);
  6662  000C18  0E20               	movlw	32
  6663  000C1A  ECB5  F00C         	call	_write_command
  6664                           
  6665                           ;ST7735_TFT.c: 322: write_command(0x36);
  6666  000C1E  0E36               	movlw	54
  6667  000C20  ECB5  F00C         	call	_write_command
  6668                           
  6669                           ;ST7735_TFT.c: 323: write_data(0xC8);
  6670  000C24  0EC8               	movlw	200
  6671  000C26  ECAD  F00C         	call	_write_data
  6672                           
  6673                           ;ST7735_TFT.c: 324: write_command(0x3A);
  6674  000C2A  0E3A               	movlw	58
  6675  000C2C  ECB5  F00C         	call	_write_command
  6676                           
  6677                           ;ST7735_TFT.c: 325: write_data(0x05);
  6678  000C30  0E05               	movlw	5
  6679  000C32  ECAD  F00C         	call	_write_data
  6680  000C36  0012               	return		;funcret
  6681  000C38                     __end_of_Rcmd1:
  6682                           	opt stack 0
  6683                           tblptru	equ	0xFF8
  6684                           tblptrh	equ	0xFF7
  6685                           tblptrl	equ	0xFF6
  6686                           tablat	equ	0xFF5
  6687                           prodh	equ	0xFF4
  6688                           prodl	equ	0xFF3
  6689                           intcon	equ	0xFF2
  6690                           intcon2	equ	0xFF1
  6691                           postinc0	equ	0xFEE
  6692                           wreg	equ	0xFE8
  6693                           postdec1	equ	0xFE5
  6694                           fsr1l	equ	0xFE1
  6695                           indf2	equ	0xFDF
  6696                           postinc2	equ	0xFDE
  6697                           postdec2	equ	0xFDD
  6698                           fsr2h	equ	0xFDA
  6699                           fsr2l	equ	0xFD9
  6700                           status	equ	0xFD8
  6701                           
  6702 ;; *************** function _write_data *****************
  6703 ;; Defined at:
  6704 ;;		line 209 in file "ST7735_TFT.c"
  6705 ;; Parameters:    Size  Location     Type
  6706 ;;  data_           1    wreg     unsigned char 
  6707 ;; Auto vars:     Size  Location     Type
  6708 ;;  data_           1   18[COMRAM] unsigned char 
  6709 ;; Return value:  Size  Location     Type
  6710 ;;		None               void
  6711 ;; Registers used:
  6712 ;;		wreg, status,2, cstack
  6713 ;; Tracked objects:
  6714 ;;		On entry : 0/0
  6715 ;;		On exit  : 0/0
  6716 ;;		Unchanged: 0/0
  6717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6719 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6721 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6722 ;;Total ram usage:        1 bytes
  6723 ;; Hardware stack levels used:    1
  6724 ;; Hardware stack levels required when called:    4
  6725 ;; This function calls:
  6726 ;;		_spiwrite
  6727 ;; This function is called by:
  6728 ;;		_Rcmd1
  6729 ;;		_Rcmd2red
  6730 ;;		_Rcmd3
  6731 ;;		_setAddrWindow
  6732 ;;		_drawPixel
  6733 ;;		_TFT_GreenTab_Initialize
  6734 ;;		_Bcmd
  6735 ;;		_setScrollDefinition
  6736 ;;		_Rcmd2green
  6737 ;;		_VerticalScroll
  6738 ;; This function uses a non-reentrant model
  6739 ;;
  6740                           
  6741                           	psect	text30
  6742  00195A                     __ptext30:
  6743                           	opt stack 0
  6744  00195A                     _write_data:
  6745                           	opt stack 22
  6746                           
  6747                           ;incstack = 0
  6748                           ;write_data@data_ stored from wreg
  6749  00195A  6E13               	movwf	write_data@data_,c
  6750                           
  6751                           ;ST7735_TFT.c: 211: PORTCbits.RC1 = 0;
  6752  00195C  9282               	bcf	3970,1,c	;volatile
  6753                           
  6754                           ;ST7735_TFT.c: 212: PORTCbits.RC0 = 1;
  6755  00195E  8082               	bsf	3970,0,c	;volatile
  6756                           
  6757                           ;ST7735_TFT.c: 213: spiwrite(data_);
  6758  001960  5013               	movf	write_data@data_,w,c
  6759  001962  EC76  F00C         	call	_spiwrite
  6760                           
  6761                           ;ST7735_TFT.c: 214: PORTCbits.RC1 = 1;
  6762  001966  8282               	bsf	3970,1,c	;volatile
  6763  001968  0012               	return		;funcret
  6764  00196A                     __end_of_write_data:
  6765                           	opt stack 0
  6766                           tblptru	equ	0xFF8
  6767                           tblptrh	equ	0xFF7
  6768                           tblptrl	equ	0xFF6
  6769                           tablat	equ	0xFF5
  6770                           prodh	equ	0xFF4
  6771                           prodl	equ	0xFF3
  6772                           intcon	equ	0xFF2
  6773                           intcon2	equ	0xFF1
  6774                           postinc0	equ	0xFEE
  6775                           wreg	equ	0xFE8
  6776                           postdec1	equ	0xFE5
  6777                           fsr1l	equ	0xFE1
  6778                           indf2	equ	0xFDF
  6779                           postinc2	equ	0xFDE
  6780                           postdec2	equ	0xFDD
  6781                           fsr2h	equ	0xFDA
  6782                           fsr2l	equ	0xFD9
  6783                           status	equ	0xFD8
  6784                           
  6785 ;; *************** function _write_command *****************
  6786 ;; Defined at:
  6787 ;;		line 198 in file "ST7735_TFT.c"
  6788 ;; Parameters:    Size  Location     Type
  6789 ;;  cmd_            1    wreg     unsigned char 
  6790 ;; Auto vars:     Size  Location     Type
  6791 ;;  cmd_            1   18[COMRAM] unsigned char 
  6792 ;; Return value:  Size  Location     Type
  6793 ;;		None               void
  6794 ;; Registers used:
  6795 ;;		wreg, status,2, cstack
  6796 ;; Tracked objects:
  6797 ;;		On entry : 0/0
  6798 ;;		On exit  : 0/0
  6799 ;;		Unchanged: 0/0
  6800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6802 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6804 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6805 ;;Total ram usage:        1 bytes
  6806 ;; Hardware stack levels used:    1
  6807 ;; Hardware stack levels required when called:    4
  6808 ;; This function calls:
  6809 ;;		_spiwrite
  6810 ;; This function is called by:
  6811 ;;		_Rcmd1
  6812 ;;		_Rcmd2red
  6813 ;;		_Rcmd3
  6814 ;;		_setAddrWindow
  6815 ;;		_TFT_GreenTab_Initialize
  6816 ;;		_Bcmd
  6817 ;;		_setScrollDefinition
  6818 ;;		_Rcmd2green
  6819 ;;		_VerticalScroll
  6820 ;; This function uses a non-reentrant model
  6821 ;;
  6822                           
  6823                           	psect	text31
  6824  00196A                     __ptext31:
  6825                           	opt stack 0
  6826  00196A                     _write_command:
  6827                           	opt stack 22
  6828                           
  6829                           ;incstack = 0
  6830                           ;write_command@cmd_ stored from wreg
  6831  00196A  6E13               	movwf	write_command@cmd_,c
  6832                           
  6833                           ;ST7735_TFT.c: 200: PORTCbits.RC1 = 0;
  6834  00196C  9282               	bcf	3970,1,c	;volatile
  6835                           
  6836                           ;ST7735_TFT.c: 202: PORTCbits.RC0 = 0;
  6837  00196E  9082               	bcf	3970,0,c	;volatile
  6838                           
  6839                           ;ST7735_TFT.c: 203: spiwrite(cmd_);
  6840  001970  5013               	movf	write_command@cmd_,w,c
  6841  001972  EC76  F00C         	call	_spiwrite
  6842                           
  6843                           ;ST7735_TFT.c: 205: PORTCbits.RC1 = 1;
  6844  001976  8282               	bsf	3970,1,c	;volatile
  6845  001978  0012               	return		;funcret
  6846  00197A                     __end_of_write_command:
  6847                           	opt stack 0
  6848                           tblptru	equ	0xFF8
  6849                           tblptrh	equ	0xFF7
  6850                           tblptrl	equ	0xFF6
  6851                           tablat	equ	0xFF5
  6852                           prodh	equ	0xFF4
  6853                           prodl	equ	0xFF3
  6854                           intcon	equ	0xFF2
  6855                           intcon2	equ	0xFF1
  6856                           postinc0	equ	0xFEE
  6857                           wreg	equ	0xFE8
  6858                           postdec1	equ	0xFE5
  6859                           fsr1l	equ	0xFE1
  6860                           indf2	equ	0xFDF
  6861                           postinc2	equ	0xFDE
  6862                           postdec2	equ	0xFDD
  6863                           fsr2h	equ	0xFDA
  6864                           fsr2l	equ	0xFD9
  6865                           status	equ	0xFD8
  6866                           
  6867 ;; *************** function _spiwrite *****************
  6868 ;; Defined at:
  6869 ;;		line 189 in file "ST7735_TFT.c"
  6870 ;; Parameters:    Size  Location     Type
  6871 ;;  spidata         1    wreg     unsigned char 
  6872 ;; Auto vars:     Size  Location     Type
  6873 ;;  spidata         1   17[COMRAM] unsigned char 
  6874 ;;  x               1   16[COMRAM] unsigned char 
  6875 ;; Return value:  Size  Location     Type
  6876 ;;		None               void
  6877 ;; Registers used:
  6878 ;;		wreg
  6879 ;; Tracked objects:
  6880 ;;		On entry : 0/0
  6881 ;;		On exit  : 0/0
  6882 ;;		Unchanged: 0/0
  6883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6885 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6887 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6888 ;;Total ram usage:        2 bytes
  6889 ;; Hardware stack levels used:    1
  6890 ;; Hardware stack levels required when called:    3
  6891 ;; This function calls:
  6892 ;;		Nothing
  6893 ;; This function is called by:
  6894 ;;		_write_command
  6895 ;;		_write_data
  6896 ;;		_drawFastVLine
  6897 ;;		_fillRectangle
  6898 ;;		_drawFastHLine
  6899 ;; This function uses a non-reentrant model
  6900 ;;
  6901                           
  6902                           	psect	text32
  6903  0018EC                     __ptext32:
  6904                           	opt stack 0
  6905  0018EC                     _spiwrite:
  6906                           	opt stack 24
  6907                           
  6908                           ;incstack = 0
  6909                           ;spiwrite@spidata stored from wreg
  6910  0018EC  6E12               	movwf	spiwrite@spidata,c
  6911                           
  6912                           ;ST7735_TFT.c: 191: char x;
  6913                           ;ST7735_TFT.c: 192: PIR1bits.SSPIF = 0;
  6914  0018EE  969E               	bcf	3998,3,c	;volatile
  6915                           
  6916                           ;ST7735_TFT.c: 193: x = SSPBUF;
  6917  0018F0  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  6918                           
  6919                           ;ST7735_TFT.c: 194: SSPBUF = spidata;
  6920  0018F4  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  6921                           
  6922                           ;ST7735_TFT.c: 195: while (!SSPSTATbits.BF);
  6923  0018F8  D000               	goto	l45
  6924  0018FA                     l45:
  6925  0018FA  A0C7               	btfss	4039,0,c	;volatile
  6926  0018FC  D7FE               	goto	l45
  6927  0018FE  0012               	return		;funcret
  6928  001900                     __end_of_spiwrite:
  6929                           	opt stack 0
  6930                           tblptru	equ	0xFF8
  6931                           tblptrh	equ	0xFF7
  6932                           tblptrl	equ	0xFF6
  6933                           tablat	equ	0xFF5
  6934                           prodh	equ	0xFF4
  6935                           prodl	equ	0xFF3
  6936                           intcon	equ	0xFF2
  6937                           intcon2	equ	0xFF1
  6938                           postinc0	equ	0xFEE
  6939                           wreg	equ	0xFE8
  6940                           postdec1	equ	0xFE5
  6941                           fsr1l	equ	0xFE1
  6942                           indf2	equ	0xFDF
  6943                           postinc2	equ	0xFDE
  6944                           postdec2	equ	0xFDD
  6945                           fsr2h	equ	0xFDA
  6946                           fsr2l	equ	0xFD9
  6947                           status	equ	0xFD8
  6948                           
  6949 ;; *************** function _LCD_Reset *****************
  6950 ;; Defined at:
  6951 ;;		line 217 in file "ST7735_TFT.c"
  6952 ;; Parameters:    Size  Location     Type
  6953 ;;		None
  6954 ;; Auto vars:     Size  Location     Type
  6955 ;;		None
  6956 ;; Return value:  Size  Location     Type
  6957 ;;		None               void
  6958 ;; Registers used:
  6959 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6960 ;; Tracked objects:
  6961 ;;		On entry : 0/0
  6962 ;;		On exit  : 0/0
  6963 ;;		Unchanged: 0/0
  6964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6968 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6969 ;;Total ram usage:        0 bytes
  6970 ;; Hardware stack levels used:    1
  6971 ;; Hardware stack levels required when called:    5
  6972 ;; This function calls:
  6973 ;;		_delay_ms
  6974 ;; This function is called by:
  6975 ;;		_Initialize_Screen
  6976 ;; This function uses a non-reentrant model
  6977 ;;
  6978                           
  6979                           	psect	text33
  6980  001900                     __ptext33:
  6981                           	opt stack 0
  6982  001900                     _LCD_Reset:
  6983                           	opt stack 23
  6984                           
  6985                           ;ST7735_TFT.c: 219: PORTCbits.RC4 = 0;
  6986                           
  6987                           ;incstack = 0
  6988  001900  9882               	bcf	3970,4,c	;volatile
  6989                           
  6990                           ;ST7735_TFT.c: 220: delay_ms(100);
  6991  001902  0E00               	movlw	0
  6992  001904  6E18               	movwf	delay_ms@ms+1,c
  6993  001906  0E64               	movlw	100
  6994  001908  6E17               	movwf	delay_ms@ms,c
  6995  00190A  EC36  F00A         	call	_delay_ms	;wreg free
  6996                           
  6997                           ;ST7735_TFT.c: 221: PORTCbits.RC4 = 1;
  6998  00190E  8882               	bsf	3970,4,c	;volatile
  6999  001910  0012               	return		;funcret
  7000  001912                     __end_of_LCD_Reset:
  7001                           	opt stack 0
  7002                           tblptru	equ	0xFF8
  7003                           tblptrh	equ	0xFF7
  7004                           tblptrl	equ	0xFF6
  7005                           tablat	equ	0xFF5
  7006                           prodh	equ	0xFF4
  7007                           prodl	equ	0xFF3
  7008                           intcon	equ	0xFF2
  7009                           intcon2	equ	0xFF1
  7010                           postinc0	equ	0xFEE
  7011                           wreg	equ	0xFE8
  7012                           postdec1	equ	0xFE5
  7013                           fsr1l	equ	0xFE1
  7014                           indf2	equ	0xFDF
  7015                           postinc2	equ	0xFDE
  7016                           postdec2	equ	0xFDD
  7017                           fsr2h	equ	0xFDA
  7018                           fsr2l	equ	0xFD9
  7019                           status	equ	0xFD8
  7020                           
  7021 ;; *************** function _delay_ms *****************
  7022 ;; Defined at:
  7023 ;;		line 64 in file "ST7735_TFT.c"
  7024 ;; Parameters:    Size  Location     Type
  7025 ;;  ms              2   22[COMRAM] int 
  7026 ;; Auto vars:     Size  Location     Type
  7027 ;;  count           2   26[COMRAM] int 
  7028 ;; Return value:  Size  Location     Type
  7029 ;;		None               void
  7030 ;; Registers used:
  7031 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7032 ;; Tracked objects:
  7033 ;;		On entry : 0/0
  7034 ;;		On exit  : 0/0
  7035 ;;		Unchanged: 0/0
  7036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7037 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7038 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7039 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7040 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7041 ;;Total ram usage:        6 bytes
  7042 ;; Hardware stack levels used:    1
  7043 ;; Hardware stack levels required when called:    4
  7044 ;; This function calls:
  7045 ;;		___wmul
  7046 ;; This function is called by:
  7047 ;;		_LCD_Reset
  7048 ;;		_Rcmd1
  7049 ;;		_Rcmd3
  7050 ;;		_Bcmd
  7051 ;; This function uses a non-reentrant model
  7052 ;;
  7053                           
  7054                           	psect	text34
  7055  00146C                     __ptext34:
  7056                           	opt stack 0
  7057  00146C                     _delay_ms:
  7058                           	opt stack 22
  7059                           
  7060                           ;ST7735_TFT.c: 70: int count;
  7061                           ;ST7735_TFT.c: 71: count = 8000000/4000/8 * ms;
  7062                           
  7063                           ;incstack = 0
  7064  00146C  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  7065  001470  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  7066  001474  0E00               	movlw	0
  7067  001476  6E14               	movwf	___wmul@multiplicand+1,c
  7068  001478  0EFA               	movlw	250
  7069  00147A  6E13               	movwf	___wmul@multiplicand,c
  7070  00147C  ECF0  F00B         	call	___wmul	;wreg free
  7071  001480  C011  F01B         	movff	?___wmul,delay_ms@count
  7072  001484  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  7073                           
  7074                           ;ST7735_TFT.c: 72: count = (0xffff - count);
  7075  001488  C01B  F019         	movff	delay_ms@count,??_delay_ms
  7076  00148C  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  7077  001490  1E19               	comf	??_delay_ms,f,c
  7078  001492  1E1A               	comf	??_delay_ms+1,f,c
  7079  001494  4A19               	infsnz	??_delay_ms,f,c
  7080  001496  2A1A               	incf	??_delay_ms+1,f,c
  7081  001498  0EFF               	movlw	255
  7082  00149A  2419               	addwf	??_delay_ms,w,c
  7083  00149C  6E1B               	movwf	delay_ms@count,c
  7084  00149E  0EFF               	movlw	255
  7085  0014A0  201A               	addwfc	??_delay_ms+1,w,c
  7086  0014A2  6E1C               	movwf	delay_ms@count+1,c
  7087                           
  7088                           ;ST7735_TFT.c: 74: T3CON = 0xb8;
  7089  0014A4  0EB8               	movlw	184
  7090  0014A6  6EB1               	movwf	4017,c	;volatile
  7091                           
  7092                           ;ST7735_TFT.c: 76: TMR3L = count & 0x00ff;
  7093  0014A8  C01B  FFB2         	movff	delay_ms@count,4018	;volatile
  7094                           
  7095                           ;ST7735_TFT.c: 77: TMR3H = count >> 8;
  7096  0014AC  501C               	movf	delay_ms@count+1,w,c
  7097  0014AE  6EB3               	movwf	4019,c	;volatile
  7098                           
  7099                           ;ST7735_TFT.c: 79: PIR2bits.TMR3IF = 0;
  7100  0014B0  92A1               	bcf	4001,1,c	;volatile
  7101                           
  7102                           ;ST7735_TFT.c: 80: T3CONbits.TMR3ON = 1;
  7103  0014B2  80B1               	bsf	4017,0,c	;volatile
  7104                           
  7105                           ;ST7735_TFT.c: 82: while (PIR2bits.TMR3IF == 0);
  7106  0014B4  D000               	goto	l35
  7107  0014B6                     l35:
  7108  0014B6  A2A1               	btfss	4001,1,c	;volatile
  7109  0014B8  D7FE               	goto	l35
  7110                           
  7111                           ;ST7735_TFT.c: 83: T3CONbits.TMR3ON = 0;
  7112  0014BA  90B1               	bcf	4017,0,c	;volatile
  7113  0014BC  0012               	return		;funcret
  7114  0014BE                     __end_of_delay_ms:
  7115                           	opt stack 0
  7116                           tblptru	equ	0xFF8
  7117                           tblptrh	equ	0xFF7
  7118                           tblptrl	equ	0xFF6
  7119                           tablat	equ	0xFF5
  7120                           prodh	equ	0xFF4
  7121                           prodl	equ	0xFF3
  7122                           intcon	equ	0xFF2
  7123                           intcon2	equ	0xFF1
  7124                           postinc0	equ	0xFEE
  7125                           wreg	equ	0xFE8
  7126                           postdec1	equ	0xFE5
  7127                           fsr1l	equ	0xFE1
  7128                           indf2	equ	0xFDF
  7129                           postinc2	equ	0xFDE
  7130                           postdec2	equ	0xFDD
  7131                           fsr2h	equ	0xFDA
  7132                           fsr2l	equ	0xFD9
  7133                           status	equ	0xFD8
  7134                           
  7135 ;; *************** function ___wmul *****************
  7136 ;; Defined at:
  7137 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  7138 ;; Parameters:    Size  Location     Type
  7139 ;;  multiplier      2   16[COMRAM] unsigned int 
  7140 ;;  multiplicand    2   18[COMRAM] unsigned int 
  7141 ;; Auto vars:     Size  Location     Type
  7142 ;;  product         2   20[COMRAM] unsigned int 
  7143 ;; Return value:  Size  Location     Type
  7144 ;;                  2   16[COMRAM] unsigned int 
  7145 ;; Registers used:
  7146 ;;		wreg, status,2, status,0, prodl, prodh
  7147 ;; Tracked objects:
  7148 ;;		On entry : 0/0
  7149 ;;		On exit  : 0/0
  7150 ;;		Unchanged: 0/0
  7151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7152 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7153 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7155 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7156 ;;Total ram usage:        6 bytes
  7157 ;; Hardware stack levels used:    1
  7158 ;; Hardware stack levels required when called:    3
  7159 ;; This function calls:
  7160 ;;		Nothing
  7161 ;; This function is called by:
  7162 ;;		_delay_ms
  7163 ;;		_drawChar
  7164 ;;		_main
  7165 ;;		_printf
  7166 ;; This function uses a non-reentrant model
  7167 ;;
  7168                           
  7169                           	psect	text35
  7170  0017E0                     __ptext35:
  7171                           	opt stack 0
  7172  0017E0                     ___wmul:
  7173                           	opt stack 26
  7174                           
  7175                           ;incstack = 0
  7176  0017E0  5011               	movf	___wmul@multiplier,w,c
  7177  0017E2  0213               	mulwf	___wmul@multiplicand,c
  7178  0017E4  CFF3 F015          	movff	prodl,___wmul@product
  7179  0017E8  CFF4 F016          	movff	prodh,___wmul@product+1
  7180  0017EC  5011               	movf	___wmul@multiplier,w,c
  7181  0017EE  0214               	mulwf	___wmul@multiplicand+1,c
  7182  0017F0  50F3               	movf	prodl,w,c
  7183  0017F2  2616               	addwf	___wmul@product+1,f,c
  7184  0017F4  5012               	movf	___wmul@multiplier+1,w,c
  7185  0017F6  0213               	mulwf	___wmul@multiplicand,c
  7186  0017F8  50F3               	movf	prodl,w,c
  7187  0017FA  2616               	addwf	___wmul@product+1,f,c
  7188  0017FC  C015  F011         	movff	___wmul@product,?___wmul
  7189  001800  C016  F012         	movff	___wmul@product+1,?___wmul+1
  7190  001804  D000               	goto	l683
  7191  001806                     l683:
  7192  001806  0012               	return		;funcret
  7193  001808                     __end_of___wmul:
  7194                           	opt stack 0
  7195                           tblptru	equ	0xFF8
  7196                           tblptrh	equ	0xFF7
  7197                           tblptrl	equ	0xFF6
  7198                           tablat	equ	0xFF5
  7199                           prodh	equ	0xFF4
  7200                           prodl	equ	0xFF3
  7201                           intcon	equ	0xFF2
  7202                           intcon2	equ	0xFF1
  7203                           postinc0	equ	0xFEE
  7204                           wreg	equ	0xFE8
  7205                           postdec1	equ	0xFE5
  7206                           fsr1l	equ	0xFE1
  7207                           indf2	equ	0xFDF
  7208                           postinc2	equ	0xFDE
  7209                           postdec2	equ	0xFDD
  7210                           fsr2h	equ	0xFDA
  7211                           fsr2l	equ	0xFD9
  7212                           status	equ	0xFD8
  7213                           
  7214 ;; *************** function _I2C_Init *****************
  7215 ;; Defined at:
  7216 ;;		line 10 in file "I2C_Soft.c"
  7217 ;; Parameters:    Size  Location     Type
  7218 ;;  c               4   16[COMRAM] unsigned long 
  7219 ;; Auto vars:     Size  Location     Type
  7220 ;;		None
  7221 ;; Return value:  Size  Location     Type
  7222 ;;		None               void
  7223 ;; Registers used:
  7224 ;;		wreg, cstack
  7225 ;; Tracked objects:
  7226 ;;		On entry : 0/0
  7227 ;;		On exit  : 0/0
  7228 ;;		Unchanged: 0/0
  7229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7230 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7233 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7234 ;;Total ram usage:        4 bytes
  7235 ;; Hardware stack levels used:    1
  7236 ;; Hardware stack levels required when called:    4
  7237 ;; This function calls:
  7238 ;;		_i2cHighScl
  7239 ;;		_i2cHighSda
  7240 ;; This function is called by:
  7241 ;;		_Do_Init
  7242 ;; This function uses a non-reentrant model
  7243 ;;
  7244                           
  7245                           	psect	text36
  7246  0019A0                     __ptext36:
  7247                           	opt stack 0
  7248  0019A0                     _I2C_Init:
  7249                           	opt stack 25
  7250                           
  7251                           ;I2C_Soft.c: 12: i2cHighScl();
  7252                           
  7253                           ;incstack = 0
  7254  0019A0  ECC4  F00C         	call	_i2cHighScl	;wreg free
  7255                           
  7256                           ;I2C_Soft.c: 13: i2cHighSda();
  7257  0019A4  ECE7  F00C         	call	_i2cHighSda	;wreg free
  7258  0019A8  0012               	return		;funcret
  7259  0019AA                     __end_of_I2C_Init:
  7260                           	opt stack 0
  7261                           tblptru	equ	0xFF8
  7262                           tblptrh	equ	0xFF7
  7263                           tblptrl	equ	0xFF6
  7264                           tablat	equ	0xFF5
  7265                           prodh	equ	0xFF4
  7266                           prodl	equ	0xFF3
  7267                           intcon	equ	0xFF2
  7268                           intcon2	equ	0xFF1
  7269                           postinc0	equ	0xFEE
  7270                           wreg	equ	0xFE8
  7271                           postdec1	equ	0xFE5
  7272                           fsr1l	equ	0xFE1
  7273                           indf2	equ	0xFDF
  7274                           postinc2	equ	0xFDE
  7275                           postdec2	equ	0xFDD
  7276                           fsr2h	equ	0xFDA
  7277                           fsr2l	equ	0xFD9
  7278                           status	equ	0xFD8
  7279                           
  7280 ;; *************** function _DS1621_Init *****************
  7281 ;; Defined at:
  7282 ;;		line 21 in file "I2C_Support.c"
  7283 ;; Parameters:    Size  Location     Type
  7284 ;;		None
  7285 ;; Auto vars:     Size  Location     Type
  7286 ;;  Device          1   21[COMRAM] unsigned char 
  7287 ;; Return value:  Size  Location     Type
  7288 ;;		None               void
  7289 ;; Registers used:
  7290 ;;		wreg, status,2, status,0, cstack
  7291 ;; Tracked objects:
  7292 ;;		On entry : 0/0
  7293 ;;		On exit  : 0/0
  7294 ;;		Unchanged: 0/0
  7295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7297 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7299 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7300 ;;Total ram usage:        1 bytes
  7301 ;; Hardware stack levels used:    1
  7302 ;; Hardware stack levels required when called:    6
  7303 ;; This function calls:
  7304 ;;		_I2C_Write_Cmd_Only
  7305 ;;		_I2C_Write_Cmd_Write_Data
  7306 ;; This function is called by:
  7307 ;;		_Do_Init
  7308 ;; This function uses a non-reentrant model
  7309 ;;
  7310                           
  7311                           	psect	text37
  7312  00186E                     __ptext37:
  7313                           	opt stack 0
  7314  00186E                     _DS1621_Init:
  7315                           	opt stack 23
  7316                           
  7317                           ;I2C_Support.c: 23: char Device = 0x48;
  7318                           
  7319                           ;incstack = 0
  7320  00186E  0E48               	movlw	72
  7321  001870  6E16               	movwf	DS1621_Init@Device,c
  7322                           
  7323                           ;I2C_Support.c: 24: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
  7324  001872  0EAC               	movlw	172
  7325  001874  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  7326  001876  0E02               	movlw	2
  7327  001878  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  7328  00187A  5016               	movf	DS1621_Init@Device,w,c
  7329  00187C  EC27  F00C         	call	_I2C_Write_Cmd_Write_Data
  7330                           
  7331                           ;I2C_Support.c: 25: I2C_Write_Cmd_Only(Device, 0xEE);
  7332  001880  0EEE               	movlw	238
  7333  001882  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
  7334  001884  5016               	movf	DS1621_Init@Device,w,c
  7335  001886  EC54  F00C         	call	_I2C_Write_Cmd_Only
  7336  00188A  0012               	return		;funcret
  7337  00188C                     __end_of_DS1621_Init:
  7338                           	opt stack 0
  7339                           tblptru	equ	0xFF8
  7340                           tblptrh	equ	0xFF7
  7341                           tblptrl	equ	0xFF6
  7342                           tablat	equ	0xFF5
  7343                           prodh	equ	0xFF4
  7344                           prodl	equ	0xFF3
  7345                           intcon	equ	0xFF2
  7346                           intcon2	equ	0xFF1
  7347                           postinc0	equ	0xFEE
  7348                           wreg	equ	0xFE8
  7349                           postdec1	equ	0xFE5
  7350                           fsr1l	equ	0xFE1
  7351                           indf2	equ	0xFDF
  7352                           postinc2	equ	0xFDE
  7353                           postdec2	equ	0xFDD
  7354                           fsr2h	equ	0xFDA
  7355                           fsr2l	equ	0xFD9
  7356                           status	equ	0xFD8
  7357                           
  7358 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  7359 ;; Defined at:
  7360 ;;		line 148 in file "I2C_Soft.c"
  7361 ;; Parameters:    Size  Location     Type
  7362 ;;  Device          1    wreg     unsigned char 
  7363 ;;  Cmd             1   18[COMRAM] unsigned char 
  7364 ;;  Data_Out        1   19[COMRAM] unsigned char 
  7365 ;; Auto vars:     Size  Location     Type
  7366 ;;  Device          1   20[COMRAM] unsigned char 
  7367 ;; Return value:  Size  Location     Type
  7368 ;;		None               void
  7369 ;; Registers used:
  7370 ;;		wreg, status,2, status,0, cstack
  7371 ;; Tracked objects:
  7372 ;;		On entry : 0/0
  7373 ;;		On exit  : 0/0
  7374 ;;		Unchanged: 0/0
  7375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7376 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7377 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7379 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7380 ;;Total ram usage:        3 bytes
  7381 ;; Hardware stack levels used:    1
  7382 ;; Hardware stack levels required when called:    5
  7383 ;; This function calls:
  7384 ;;		_I2C_Start
  7385 ;;		_I2C_Stop
  7386 ;;		_I2C_Write
  7387 ;; This function is called by:
  7388 ;;		_DS1621_Init
  7389 ;; This function uses a non-reentrant model
  7390 ;;
  7391                           
  7392                           	psect	text38
  7393  00184E                     __ptext38:
  7394                           	opt stack 0
  7395  00184E                     _I2C_Write_Cmd_Write_Data:
  7396                           	opt stack 23
  7397                           
  7398                           ;incstack = 0
  7399                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  7400  00184E  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  7401                           
  7402                           ;I2C_Soft.c: 150: I2C_Start();
  7403  001850  EC92  F00C         	call	_I2C_Start	;wreg free
  7404                           
  7405                           ;I2C_Soft.c: 151: I2C_Write((Device << 1) | 0);
  7406  001854  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  7407  001856  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  7408  001858  EC55  F00B         	call	_I2C_Write
  7409                           
  7410                           ;I2C_Soft.c: 152: I2C_Write(Cmd);
  7411  00185C  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  7412  00185E  EC55  F00B         	call	_I2C_Write
  7413                           
  7414                           ;I2C_Soft.c: 153: I2C_Write(Data_Out);
  7415  001862  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  7416  001864  EC55  F00B         	call	_I2C_Write
  7417                           
  7418                           ;I2C_Soft.c: 154: I2C_Stop();
  7419  001868  EC89  F00C         	call	_I2C_Stop	;wreg free
  7420  00186C  0012               	return		;funcret
  7421  00186E                     __end_of_I2C_Write_Cmd_Write_Data:
  7422                           	opt stack 0
  7423                           tblptru	equ	0xFF8
  7424                           tblptrh	equ	0xFF7
  7425                           tblptrl	equ	0xFF6
  7426                           tablat	equ	0xFF5
  7427                           prodh	equ	0xFF4
  7428                           prodl	equ	0xFF3
  7429                           intcon	equ	0xFF2
  7430                           intcon2	equ	0xFF1
  7431                           postinc0	equ	0xFEE
  7432                           wreg	equ	0xFE8
  7433                           postdec1	equ	0xFE5
  7434                           fsr1l	equ	0xFE1
  7435                           indf2	equ	0xFDF
  7436                           postinc2	equ	0xFDE
  7437                           postdec2	equ	0xFDD
  7438                           fsr2h	equ	0xFDA
  7439                           fsr2l	equ	0xFD9
  7440                           status	equ	0xFD8
  7441                           
  7442 ;; *************** function _I2C_Write_Cmd_Only *****************
  7443 ;; Defined at:
  7444 ;;		line 140 in file "I2C_Soft.c"
  7445 ;; Parameters:    Size  Location     Type
  7446 ;;  Device          1    wreg     unsigned char 
  7447 ;;  Cmd             1   18[COMRAM] unsigned char 
  7448 ;; Auto vars:     Size  Location     Type
  7449 ;;  Device          1   19[COMRAM] unsigned char 
  7450 ;; Return value:  Size  Location     Type
  7451 ;;		None               void
  7452 ;; Registers used:
  7453 ;;		wreg, status,2, status,0, cstack
  7454 ;; Tracked objects:
  7455 ;;		On entry : 0/0
  7456 ;;		On exit  : 0/0
  7457 ;;		Unchanged: 0/0
  7458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7459 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7460 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7462 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7463 ;;Total ram usage:        2 bytes
  7464 ;; Hardware stack levels used:    1
  7465 ;; Hardware stack levels required when called:    5
  7466 ;; This function calls:
  7467 ;;		_I2C_Start
  7468 ;;		_I2C_Stop
  7469 ;;		_I2C_Write
  7470 ;; This function is called by:
  7471 ;;		_DS1621_Init
  7472 ;; This function uses a non-reentrant model
  7473 ;;
  7474                           
  7475                           	psect	text39
  7476  0018A8                     __ptext39:
  7477                           	opt stack 0
  7478  0018A8                     _I2C_Write_Cmd_Only:
  7479                           	opt stack 23
  7480                           
  7481                           ;incstack = 0
  7482                           ;I2C_Write_Cmd_Only@Device stored from wreg
  7483  0018A8  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
  7484                           
  7485                           ;I2C_Soft.c: 142: I2C_Start();
  7486  0018AA  EC92  F00C         	call	_I2C_Start	;wreg free
  7487                           
  7488                           ;I2C_Soft.c: 143: I2C_Write((Device << 1) | 0);
  7489  0018AE  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
  7490  0018B0  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
  7491  0018B2  EC55  F00B         	call	_I2C_Write
  7492                           
  7493                           ;I2C_Soft.c: 144: I2C_Write(Cmd);
  7494  0018B6  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  7495  0018B8  EC55  F00B         	call	_I2C_Write
  7496                           
  7497                           ;I2C_Soft.c: 145: I2C_Stop();
  7498  0018BC  EC89  F00C         	call	_I2C_Stop	;wreg free
  7499  0018C0  0012               	return		;funcret
  7500  0018C2                     __end_of_I2C_Write_Cmd_Only:
  7501                           	opt stack 0
  7502                           tblptru	equ	0xFF8
  7503                           tblptrh	equ	0xFF7
  7504                           tblptrl	equ	0xFF6
  7505                           tablat	equ	0xFF5
  7506                           prodh	equ	0xFF4
  7507                           prodl	equ	0xFF3
  7508                           intcon	equ	0xFF2
  7509                           intcon2	equ	0xFF1
  7510                           postinc0	equ	0xFEE
  7511                           wreg	equ	0xFE8
  7512                           postdec1	equ	0xFE5
  7513                           fsr1l	equ	0xFE1
  7514                           indf2	equ	0xFDF
  7515                           postinc2	equ	0xFDE
  7516                           postdec2	equ	0xFDD
  7517                           fsr2h	equ	0xFDA
  7518                           fsr2l	equ	0xFD9
  7519                           status	equ	0xFD8
  7520                           
  7521 ;; *************** function _Deactivate_Buzzer *****************
  7522 ;; Defined at:
  7523 ;;		line 227 in file "Lab11p4.c"
  7524 ;; Parameters:    Size  Location     Type
  7525 ;;		None
  7526 ;; Auto vars:     Size  Location     Type
  7527 ;;		None
  7528 ;; Return value:  Size  Location     Type
  7529 ;;		None               void
  7530 ;; Registers used:
  7531 ;;		wreg, status,2
  7532 ;; Tracked objects:
  7533 ;;		On entry : 0/0
  7534 ;;		On exit  : 0/0
  7535 ;;		Unchanged: 0/0
  7536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7540 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7541 ;;Total ram usage:        0 bytes
  7542 ;; Hardware stack levels used:    1
  7543 ;; Hardware stack levels required when called:    3
  7544 ;; This function calls:
  7545 ;;		Nothing
  7546 ;; This function is called by:
  7547 ;;		_main
  7548 ;; This function uses a non-reentrant model
  7549 ;;
  7550                           
  7551                           	psect	text40
  7552  0019BE                     __ptext40:
  7553                           	opt stack 0
  7554  0019BE                     _Deactivate_Buzzer:
  7555                           	opt stack 27
  7556                           
  7557                           ;Lab11p4.c: 229: CCP2CON = 0x0;
  7558                           
  7559                           ;incstack = 0
  7560  0019BE  0E00               	movlw	0
  7561  0019C0  6EBA               	movwf	4026,c	;volatile
  7562                           
  7563                           ;Lab11p4.c: 230: PORTBbits.RB3 = 0;
  7564  0019C2  9681               	bcf	3969,3,c	;volatile
  7565  0019C4  0012               	return		;funcret
  7566  0019C6                     __end_of_Deactivate_Buzzer:
  7567                           	opt stack 0
  7568                           tblptru	equ	0xFF8
  7569                           tblptrh	equ	0xFF7
  7570                           tblptrl	equ	0xFF6
  7571                           tablat	equ	0xFF5
  7572                           prodh	equ	0xFF4
  7573                           prodl	equ	0xFF3
  7574                           intcon	equ	0xFF2
  7575                           intcon2	equ	0xFF1
  7576                           postinc0	equ	0xFEE
  7577                           wreg	equ	0xFE8
  7578                           postdec1	equ	0xFE5
  7579                           fsr1l	equ	0xFE1
  7580                           indf2	equ	0xFDF
  7581                           postinc2	equ	0xFDE
  7582                           postdec2	equ	0xFDD
  7583                           fsr2h	equ	0xFDA
  7584                           fsr2l	equ	0xFD9
  7585                           status	equ	0xFD8
  7586                           
  7587 ;; *************** function _DS3231_Setup_Time *****************
  7588 ;; Defined at:
  7589 ;;		line 65 in file "I2C_Support.c"
  7590 ;; Parameters:    Size  Location     Type
  7591 ;;		None
  7592 ;; Auto vars:     Size  Location     Type
  7593 ;;  Address         1   19[COMRAM] unsigned char 
  7594 ;;  Device          1   18[COMRAM] unsigned char 
  7595 ;; Return value:  Size  Location     Type
  7596 ;;		None               void
  7597 ;; Registers used:
  7598 ;;		wreg, status,2, status,0, cstack
  7599 ;; Tracked objects:
  7600 ;;		On entry : 0/0
  7601 ;;		On exit  : 0/0
  7602 ;;		Unchanged: 0/0
  7603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7605 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7607 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7608 ;;Total ram usage:        2 bytes
  7609 ;; Hardware stack levels used:    1
  7610 ;; Hardware stack levels required when called:    5
  7611 ;; This function calls:
  7612 ;;		_I2C_Start
  7613 ;;		_I2C_Stop
  7614 ;;		_I2C_Write
  7615 ;; This function is called by:
  7616 ;;		_main
  7617 ;; This function uses a non-reentrant model
  7618 ;;
  7619                           
  7620                           	psect	text41
  7621  0012A0                     __ptext41:
  7622                           	opt stack 0
  7623  0012A0                     _DS3231_Setup_Time:
  7624                           	opt stack 25
  7625                           
  7626                           ;I2C_Support.c: 67: char Device = 0x68;
  7627                           
  7628                           ;incstack = 0
  7629  0012A0  0E68               	movlw	104
  7630  0012A2  6E13               	movwf	DS3231_Setup_Time@Device,c
  7631                           
  7632                           ;I2C_Support.c: 68: char Address = 0x00;
  7633  0012A4  0E00               	movlw	0
  7634  0012A6  6E14               	movwf	DS3231_Setup_Time@Address,c
  7635                           
  7636                           ;I2C_Support.c: 70: second = 0x00;
  7637  0012A8  0E00               	movlw	0
  7638  0012AA  6E62               	movwf	_second,c
  7639                           
  7640                           ;I2C_Support.c: 71: minute = 0x00;
  7641  0012AC  0E00               	movlw	0
  7642  0012AE  6E5F               	movwf	_minute,c
  7643                           
  7644                           ;I2C_Support.c: 72: hour = 0x00;
  7645  0012B0  0E00               	movlw	0
  7646  0012B2  6E5D               	movwf	_hour,c
  7647                           
  7648                           ;I2C_Support.c: 73: dow = 0x04;
  7649  0012B4  0E04               	movlw	4
  7650  0012B6  6E5B               	movwf	_dow,c
  7651                           
  7652                           ;I2C_Support.c: 74: day = 0x10;
  7653  0012B8  0E10               	movlw	16
  7654  0012BA  6E5A               	movwf	_day,c
  7655                           
  7656                           ;I2C_Support.c: 75: month = 0x11;
  7657  0012BC  0E11               	movlw	17
  7658  0012BE  6E60               	movwf	_month,c
  7659                           
  7660                           ;I2C_Support.c: 76: year = 0x22;
  7661  0012C0  0E22               	movlw	34
  7662  0012C2  6E6C               	movwf	_year,c
  7663                           
  7664                           ;I2C_Support.c: 78: I2C_Start();
  7665  0012C4  EC92  F00C         	call	_I2C_Start	;wreg free
  7666                           
  7667                           ;I2C_Support.c: 79: I2C_Write((Device << 1) | 0);
  7668  0012C8  5013               	movf	DS3231_Setup_Time@Device,w,c
  7669  0012CA  2413               	addwf	DS3231_Setup_Time@Device,w,c
  7670  0012CC  EC55  F00B         	call	_I2C_Write
  7671                           
  7672                           ;I2C_Support.c: 80: I2C_Write(Address);
  7673  0012D0  5014               	movf	DS3231_Setup_Time@Address,w,c
  7674  0012D2  EC55  F00B         	call	_I2C_Write
  7675                           
  7676                           ;I2C_Support.c: 81: I2C_Write(second);
  7677  0012D6  5062               	movf	_second,w,c
  7678  0012D8  EC55  F00B         	call	_I2C_Write
  7679                           
  7680                           ;I2C_Support.c: 82: I2C_Write(minute);
  7681  0012DC  505F               	movf	_minute,w,c
  7682  0012DE  EC55  F00B         	call	_I2C_Write
  7683                           
  7684                           ;I2C_Support.c: 83: I2C_Write(hour);
  7685  0012E2  505D               	movf	_hour,w,c
  7686  0012E4  EC55  F00B         	call	_I2C_Write
  7687                           
  7688                           ;I2C_Support.c: 84: I2C_Write(dow);
  7689  0012E8  505B               	movf	_dow,w,c
  7690  0012EA  EC55  F00B         	call	_I2C_Write
  7691                           
  7692                           ;I2C_Support.c: 85: I2C_Write(day);
  7693  0012EE  505A               	movf	_day,w,c
  7694  0012F0  EC55  F00B         	call	_I2C_Write
  7695                           
  7696                           ;I2C_Support.c: 86: I2C_Write(month);
  7697  0012F4  5060               	movf	_month,w,c
  7698  0012F6  EC55  F00B         	call	_I2C_Write
  7699                           
  7700                           ;I2C_Support.c: 87: I2C_Write(year);
  7701  0012FA  506C               	movf	_year,w,c
  7702  0012FC  EC55  F00B         	call	_I2C_Write
  7703                           
  7704                           ;I2C_Support.c: 88: I2C_Stop();
  7705  001300  EC89  F00C         	call	_I2C_Stop	;wreg free
  7706  001304  0012               	return		;funcret
  7707  001306                     __end_of_DS3231_Setup_Time:
  7708                           	opt stack 0
  7709                           tblptru	equ	0xFF8
  7710                           tblptrh	equ	0xFF7
  7711                           tblptrl	equ	0xFF6
  7712                           tablat	equ	0xFF5
  7713                           prodh	equ	0xFF4
  7714                           prodl	equ	0xFF3
  7715                           intcon	equ	0xFF2
  7716                           intcon2	equ	0xFF1
  7717                           postinc0	equ	0xFEE
  7718                           wreg	equ	0xFE8
  7719                           postdec1	equ	0xFE5
  7720                           fsr1l	equ	0xFE1
  7721                           indf2	equ	0xFDF
  7722                           postinc2	equ	0xFDE
  7723                           postdec2	equ	0xFDD
  7724                           fsr2h	equ	0xFDA
  7725                           fsr2l	equ	0xFD9
  7726                           status	equ	0xFD8
  7727                           
  7728 ;; *************** function _DS3231_Read_Time *****************
  7729 ;; Defined at:
  7730 ;;		line 45 in file "I2C_Support.c"
  7731 ;; Parameters:    Size  Location     Type
  7732 ;;		None
  7733 ;; Auto vars:     Size  Location     Type
  7734 ;;  Device          1   20[COMRAM] unsigned char 
  7735 ;;  Address         1   19[COMRAM] unsigned char 
  7736 ;; Return value:  Size  Location     Type
  7737 ;;		None               void
  7738 ;; Registers used:
  7739 ;;		wreg, status,2, status,0, cstack
  7740 ;; Tracked objects:
  7741 ;;		On entry : 0/0
  7742 ;;		On exit  : 0/0
  7743 ;;		Unchanged: 0/0
  7744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7746 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7748 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7749 ;;Total ram usage:        2 bytes
  7750 ;; Hardware stack levels used:    1
  7751 ;; Hardware stack levels required when called:    6
  7752 ;; This function calls:
  7753 ;;		_I2C_ReStart
  7754 ;;		_I2C_Read
  7755 ;;		_I2C_Start
  7756 ;;		_I2C_Stop
  7757 ;;		_I2C_Write
  7758 ;; This function is called by:
  7759 ;;		_main
  7760 ;; This function uses a non-reentrant model
  7761 ;;
  7762                           
  7763                           	psect	text42
  7764  001306                     __ptext42:
  7765                           	opt stack 0
  7766  001306                     _DS3231_Read_Time:
  7767                           	opt stack 24
  7768                           
  7769                           ;I2C_Support.c: 47: char Device = 0x68;
  7770                           
  7771                           ;incstack = 0
  7772  001306  0E68               	movlw	104
  7773  001308  6E15               	movwf	DS3231_Read_Time@Device,c
  7774                           
  7775                           ;I2C_Support.c: 48: char Address = 0x00;
  7776  00130A  0E00               	movlw	0
  7777  00130C  6E14               	movwf	DS3231_Read_Time@Address,c
  7778                           
  7779                           ;I2C_Support.c: 50: I2C_Start();
  7780  00130E  EC92  F00C         	call	_I2C_Start	;wreg free
  7781                           
  7782                           ;I2C_Support.c: 51: I2C_Write((Device << 1) | 0);
  7783  001312  5015               	movf	DS3231_Read_Time@Device,w,c
  7784  001314  2415               	addwf	DS3231_Read_Time@Device,w,c
  7785  001316  EC55  F00B         	call	_I2C_Write
  7786                           
  7787                           ;I2C_Support.c: 52: I2C_Write(Address);
  7788  00131A  5014               	movf	DS3231_Read_Time@Address,w,c
  7789  00131C  EC55  F00B         	call	_I2C_Write
  7790                           
  7791                           ;I2C_Support.c: 53: I2C_ReStart();
  7792  001320  EC61  F00C         	call	_I2C_ReStart	;wreg free
  7793                           
  7794                           ;I2C_Support.c: 54: I2C_Write((Device << 1) | 1);
  7795  001324  80D8               	bsf	status,0,c
  7796  001326  3415               	rlcf	DS3231_Read_Time@Device,w,c
  7797  001328  EC55  F00B         	call	_I2C_Write
  7798                           
  7799                           ;I2C_Support.c: 55: second = I2C_Read(1);
  7800  00132C  0E01               	movlw	1
  7801  00132E  ECD1  F00A         	call	_I2C_Read
  7802  001332  6E62               	movwf	_second,c
  7803                           
  7804                           ;I2C_Support.c: 56: minute = I2C_Read(1);
  7805  001334  0E01               	movlw	1
  7806  001336  ECD1  F00A         	call	_I2C_Read
  7807  00133A  6E5F               	movwf	_minute,c
  7808                           
  7809                           ;I2C_Support.c: 57: hour = I2C_Read(1);
  7810  00133C  0E01               	movlw	1
  7811  00133E  ECD1  F00A         	call	_I2C_Read
  7812  001342  6E5D               	movwf	_hour,c
  7813                           
  7814                           ;I2C_Support.c: 58: dow = I2C_Read(1);
  7815  001344  0E01               	movlw	1
  7816  001346  ECD1  F00A         	call	_I2C_Read
  7817  00134A  6E5B               	movwf	_dow,c
  7818                           
  7819                           ;I2C_Support.c: 59: day = I2C_Read(1);
  7820  00134C  0E01               	movlw	1
  7821  00134E  ECD1  F00A         	call	_I2C_Read
  7822  001352  6E5A               	movwf	_day,c
  7823                           
  7824                           ;I2C_Support.c: 60: month = I2C_Read(1);
  7825  001354  0E01               	movlw	1
  7826  001356  ECD1  F00A         	call	_I2C_Read
  7827  00135A  6E60               	movwf	_month,c
  7828                           
  7829                           ;I2C_Support.c: 61: year = I2C_Read(0);
  7830  00135C  0E00               	movlw	0
  7831  00135E  ECD1  F00A         	call	_I2C_Read
  7832  001362  6E6C               	movwf	_year,c
  7833                           
  7834                           ;I2C_Support.c: 62: I2C_Stop();
  7835  001364  EC89  F00C         	call	_I2C_Stop	;wreg free
  7836  001368  0012               	return		;funcret
  7837  00136A                     __end_of_DS3231_Read_Time:
  7838                           	opt stack 0
  7839                           tblptru	equ	0xFF8
  7840                           tblptrh	equ	0xFF7
  7841                           tblptrl	equ	0xFF6
  7842                           tablat	equ	0xFF5
  7843                           prodh	equ	0xFF4
  7844                           prodl	equ	0xFF3
  7845                           intcon	equ	0xFF2
  7846                           intcon2	equ	0xFF1
  7847                           postinc0	equ	0xFEE
  7848                           wreg	equ	0xFE8
  7849                           postdec1	equ	0xFE5
  7850                           fsr1l	equ	0xFE1
  7851                           indf2	equ	0xFDF
  7852                           postinc2	equ	0xFDE
  7853                           postdec2	equ	0xFDD
  7854                           fsr2h	equ	0xFDA
  7855                           fsr2l	equ	0xFD9
  7856                           status	equ	0xFD8
  7857                           
  7858 ;; *************** function _DS1621_Read_Temp *****************
  7859 ;; Defined at:
  7860 ;;		line 30 in file "I2C_Support.c"
  7861 ;; Parameters:    Size  Location     Type
  7862 ;;		None
  7863 ;; Auto vars:     Size  Location     Type
  7864 ;;  Device          1   23[COMRAM] unsigned char 
  7865 ;;  Data_Ret        1   22[COMRAM] unsigned char 
  7866 ;;  Cmd             1   21[COMRAM] unsigned char 
  7867 ;; Return value:  Size  Location     Type
  7868 ;;                  2   19[COMRAM] int 
  7869 ;; Registers used:
  7870 ;;		wreg, status,2, status,0, cstack
  7871 ;; Tracked objects:
  7872 ;;		On entry : 0/0
  7873 ;;		On exit  : 0/0
  7874 ;;		Unchanged: 0/0
  7875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7876 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7877 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7879 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7880 ;;Total ram usage:        5 bytes
  7881 ;; Hardware stack levels used:    1
  7882 ;; Hardware stack levels required when called:    6
  7883 ;; This function calls:
  7884 ;;		_I2C_ReStart
  7885 ;;		_I2C_Read
  7886 ;;		_I2C_Start
  7887 ;;		_I2C_Stop
  7888 ;;		_I2C_Write
  7889 ;; This function is called by:
  7890 ;;		_main
  7891 ;; This function uses a non-reentrant model
  7892 ;;
  7893                           
  7894                           	psect	text43
  7895  0016E8                     __ptext43:
  7896                           	opt stack 0
  7897  0016E8                     _DS1621_Read_Temp:
  7898                           	opt stack 24
  7899                           
  7900                           ;I2C_Support.c: 32: char Device = 0x48;
  7901                           
  7902                           ;incstack = 0
  7903  0016E8  0E48               	movlw	72
  7904  0016EA  6E18               	movwf	DS1621_Read_Temp@Device,c
  7905                           
  7906                           ;I2C_Support.c: 33: char Cmd = 0xAA;
  7907  0016EC  0EAA               	movlw	170
  7908  0016EE  6E16               	movwf	DS1621_Read_Temp@Cmd,c
  7909                           
  7910                           ;I2C_Support.c: 34: char Data_Ret;
  7911                           ;I2C_Support.c: 35: I2C_Start();
  7912  0016F0  EC92  F00C         	call	_I2C_Start	;wreg free
  7913                           
  7914                           ;I2C_Support.c: 36: I2C_Write((Device << 1) | 0);
  7915  0016F4  5018               	movf	DS1621_Read_Temp@Device,w,c
  7916  0016F6  2418               	addwf	DS1621_Read_Temp@Device,w,c
  7917  0016F8  EC55  F00B         	call	_I2C_Write
  7918                           
  7919                           ;I2C_Support.c: 37: I2C_Write(Cmd);
  7920  0016FC  5016               	movf	DS1621_Read_Temp@Cmd,w,c
  7921  0016FE  EC55  F00B         	call	_I2C_Write
  7922                           
  7923                           ;I2C_Support.c: 38: I2C_ReStart();
  7924  001702  EC61  F00C         	call	_I2C_ReStart	;wreg free
  7925                           
  7926                           ;I2C_Support.c: 39: I2C_Write((Device << 1) | 1);
  7927  001706  80D8               	bsf	status,0,c
  7928  001708  3418               	rlcf	DS1621_Read_Temp@Device,w,c
  7929  00170A  EC55  F00B         	call	_I2C_Write
  7930                           
  7931                           ;I2C_Support.c: 40: Data_Ret = I2C_Read(0);
  7932  00170E  0E00               	movlw	0
  7933  001710  ECD1  F00A         	call	_I2C_Read
  7934  001714  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
  7935                           
  7936                           ;I2C_Support.c: 41: I2C_Stop();
  7937  001716  EC89  F00C         	call	_I2C_Stop	;wreg free
  7938                           
  7939                           ;I2C_Support.c: 42: return Data_Ret;
  7940  00171A  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
  7941  00171E  6A15               	clrf	?_DS1621_Read_Temp+1,c
  7942  001720  D000               	goto	l322
  7943  001722                     l322:
  7944  001722  0012               	return		;funcret
  7945  001724                     __end_of_DS1621_Read_Temp:
  7946                           	opt stack 0
  7947                           tblptru	equ	0xFF8
  7948                           tblptrh	equ	0xFF7
  7949                           tblptrl	equ	0xFF6
  7950                           tablat	equ	0xFF5
  7951                           prodh	equ	0xFF4
  7952                           prodl	equ	0xFF3
  7953                           intcon	equ	0xFF2
  7954                           intcon2	equ	0xFF1
  7955                           postinc0	equ	0xFEE
  7956                           wreg	equ	0xFE8
  7957                           postdec1	equ	0xFE5
  7958                           fsr1l	equ	0xFE1
  7959                           indf2	equ	0xFDF
  7960                           postinc2	equ	0xFDE
  7961                           postdec2	equ	0xFDD
  7962                           fsr2h	equ	0xFDA
  7963                           fsr2l	equ	0xFD9
  7964                           status	equ	0xFD8
  7965                           
  7966 ;; *************** function _I2C_Write *****************
  7967 ;; Defined at:
  7968 ;;		line 37 in file "I2C_Soft.c"
  7969 ;; Parameters:    Size  Location     Type
  7970 ;;  outByte         1    wreg     unsigned char 
  7971 ;; Auto vars:     Size  Location     Type
  7972 ;;  outByte         1   16[COMRAM] unsigned char 
  7973 ;;  n               1   17[COMRAM] unsigned char 
  7974 ;; Return value:  Size  Location     Type
  7975 ;;		None               void
  7976 ;; Registers used:
  7977 ;;		wreg, status,2, status,0, cstack
  7978 ;; Tracked objects:
  7979 ;;		On entry : 0/0
  7980 ;;		On exit  : 0/0
  7981 ;;		Unchanged: 0/0
  7982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7984 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7986 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7987 ;;Total ram usage:        2 bytes
  7988 ;; Hardware stack levels used:    1
  7989 ;; Hardware stack levels required when called:    4
  7990 ;; This function calls:
  7991 ;;		_i2cHighScl
  7992 ;;		_i2cHighSda
  7993 ;;		_i2cLowScl
  7994 ;;		_i2cLowSda
  7995 ;; This function is called by:
  7996 ;;		_I2C_Write_Cmd_Only
  7997 ;;		_I2C_Write_Cmd_Write_Data
  7998 ;;		_DS1621_Read_Temp
  7999 ;;		_DS3231_Read_Time
  8000 ;;		_DS3231_Setup_Time
  8001 ;;		_I2C_Write_Address_Read_One_Byte
  8002 ;;		_I2C_Write_Address_Write_One_Byte
  8003 ;;		_I2C_Write_Cmd_Read_One_Byte
  8004 ;; This function uses a non-reentrant model
  8005 ;;
  8006                           
  8007                           	psect	text44
  8008  0016AA                     __ptext44:
  8009                           	opt stack 0
  8010  0016AA                     _I2C_Write:
  8011                           	opt stack 23
  8012                           
  8013                           ;incstack = 0
  8014                           ;I2C_Write@outByte stored from wreg
  8015  0016AA  6E11               	movwf	I2C_Write@outByte,c
  8016                           
  8017                           ;I2C_Soft.c: 39: unsigned char n;
  8018                           ;I2C_Soft.c: 40: for(n=0; n<8; n++)
  8019  0016AC  0E00               	movlw	0
  8020  0016AE  6E12               	movwf	I2C_Write@n,c
  8021  0016B0                     l4365:
  8022  0016B0  0E07               	movlw	7
  8023  0016B2  6412               	cpfsgt	I2C_Write@n,c
  8024  0016B4  D001               	goto	l242
  8025  0016B6  D011               	goto	l4383
  8026  0016B8                     l242:
  8027                           
  8028                           ;I2C_Soft.c: 41: {
  8029                           ;I2C_Soft.c: 42: if(outByte&0x80) i2cHighSda();
  8030  0016B8  AE11               	btfss	I2C_Write@outByte,7,c
  8031  0016BA  D003               	goto	l4371
  8032  0016BC  ECE7  F00C         	call	_i2cHighSda	;wreg free
  8033  0016C0  D003               	goto	l4373
  8034  0016C2                     l4371:
  8035                           
  8036                           ;I2C_Soft.c: 43: else i2cLowSda();
  8037  0016C2  ECDA  F00C         	call	_i2cLowSda	;wreg free
  8038  0016C6  D000               	goto	l4373
  8039  0016C8                     l4373:
  8040                           
  8041                           ;I2C_Soft.c: 44: i2cHighScl();
  8042  0016C8  ECC4  F00C         	call	_i2cHighScl	;wreg free
  8043                           
  8044                           ;I2C_Soft.c: 45: i2cLowScl();
  8045  0016CC  ECE3  F00C         	call	_i2cLowScl	;wreg free
  8046                           
  8047                           ;I2C_Soft.c: 46: outByte = outByte << 1;
  8048  0016D0  5011               	movf	I2C_Write@outByte,w,c
  8049  0016D2  2411               	addwf	I2C_Write@outByte,w,c
  8050  0016D4  6E11               	movwf	I2C_Write@outByte,c
  8051  0016D6  2A12               	incf	I2C_Write@n,f,c
  8052  0016D8  D7EB               	goto	l4365
  8053  0016DA                     l4383:
  8054                           
  8055                           ;I2C_Soft.c: 47: }
  8056                           ;I2C_Soft.c: 48: i2cHighSda();
  8057  0016DA  ECE7  F00C         	call	_i2cHighSda	;wreg free
  8058                           
  8059                           ;I2C_Soft.c: 49: i2cHighScl();
  8060  0016DE  ECC4  F00C         	call	_i2cHighScl	;wreg free
  8061                           
  8062                           ;I2C_Soft.c: 50: i2cLowScl();
  8063  0016E2  ECE3  F00C         	call	_i2cLowScl	;wreg free
  8064  0016E6  0012               	return		;funcret
  8065  0016E8                     __end_of_I2C_Write:
  8066                           	opt stack 0
  8067                           tblptru	equ	0xFF8
  8068                           tblptrh	equ	0xFF7
  8069                           tblptrl	equ	0xFF6
  8070                           tablat	equ	0xFF5
  8071                           prodh	equ	0xFF4
  8072                           prodl	equ	0xFF3
  8073                           intcon	equ	0xFF2
  8074                           intcon2	equ	0xFF1
  8075                           postinc0	equ	0xFEE
  8076                           wreg	equ	0xFE8
  8077                           postdec1	equ	0xFE5
  8078                           fsr1l	equ	0xFE1
  8079                           indf2	equ	0xFDF
  8080                           postinc2	equ	0xFDE
  8081                           postdec2	equ	0xFDD
  8082                           fsr2h	equ	0xFDA
  8083                           fsr2l	equ	0xFD9
  8084                           status	equ	0xFD8
  8085                           
  8086 ;; *************** function _I2C_Stop *****************
  8087 ;; Defined at:
  8088 ;;		line 84 in file "I2C_Soft.c"
  8089 ;; Parameters:    Size  Location     Type
  8090 ;;		None
  8091 ;; Auto vars:     Size  Location     Type
  8092 ;;		None
  8093 ;; Return value:  Size  Location     Type
  8094 ;;		None               void
  8095 ;; Registers used:
  8096 ;;		wreg, cstack
  8097 ;; Tracked objects:
  8098 ;;		On entry : 0/0
  8099 ;;		On exit  : 0/0
  8100 ;;		Unchanged: 0/0
  8101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8105 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8106 ;;Total ram usage:        0 bytes
  8107 ;; Hardware stack levels used:    1
  8108 ;; Hardware stack levels required when called:    4
  8109 ;; This function calls:
  8110 ;;		_i2cHighScl
  8111 ;;		_i2cHighSda
  8112 ;;		_i2cLowScl
  8113 ;;		_i2cLowSda
  8114 ;; This function is called by:
  8115 ;;		_I2C_Write_Cmd_Only
  8116 ;;		_I2C_Write_Cmd_Write_Data
  8117 ;;		_DS1621_Read_Temp
  8118 ;;		_DS3231_Read_Time
  8119 ;;		_DS3231_Setup_Time
  8120 ;;		_I2C_Write_Address_Read_One_Byte
  8121 ;;		_I2C_Write_Address_Write_One_Byte
  8122 ;;		_I2C_Write_Cmd_Read_One_Byte
  8123 ;; This function uses a non-reentrant model
  8124 ;;
  8125                           
  8126                           	psect	text45
  8127  001912                     __ptext45:
  8128                           	opt stack 0
  8129  001912                     _I2C_Stop:
  8130                           	opt stack 23
  8131                           
  8132                           ;I2C_Soft.c: 86: i2cLowScl();
  8133                           
  8134                           ;incstack = 0
  8135  001912  ECE3  F00C         	call	_i2cLowScl	;wreg free
  8136                           
  8137                           ;I2C_Soft.c: 87: i2cLowSda();
  8138  001916  ECDA  F00C         	call	_i2cLowSda	;wreg free
  8139                           
  8140                           ;I2C_Soft.c: 88: i2cHighScl();
  8141  00191A  ECC4  F00C         	call	_i2cHighScl	;wreg free
  8142                           
  8143                           ;I2C_Soft.c: 89: i2cHighSda();
  8144  00191E  ECE7  F00C         	call	_i2cHighSda	;wreg free
  8145  001922  0012               	return		;funcret
  8146  001924                     __end_of_I2C_Stop:
  8147                           	opt stack 0
  8148                           tblptru	equ	0xFF8
  8149                           tblptrh	equ	0xFF7
  8150                           tblptrl	equ	0xFF6
  8151                           tablat	equ	0xFF5
  8152                           prodh	equ	0xFF4
  8153                           prodl	equ	0xFF3
  8154                           intcon	equ	0xFF2
  8155                           intcon2	equ	0xFF1
  8156                           postinc0	equ	0xFEE
  8157                           wreg	equ	0xFE8
  8158                           postdec1	equ	0xFE5
  8159                           fsr1l	equ	0xFE1
  8160                           indf2	equ	0xFDF
  8161                           postinc2	equ	0xFDE
  8162                           postdec2	equ	0xFDD
  8163                           fsr2h	equ	0xFDA
  8164                           fsr2l	equ	0xFD9
  8165                           status	equ	0xFD8
  8166                           
  8167 ;; *************** function _I2C_Start *****************
  8168 ;; Defined at:
  8169 ;;		line 67 in file "I2C_Soft.c"
  8170 ;; Parameters:    Size  Location     Type
  8171 ;;		None
  8172 ;; Auto vars:     Size  Location     Type
  8173 ;;		None
  8174 ;; Return value:  Size  Location     Type
  8175 ;;		None               void
  8176 ;; Registers used:
  8177 ;;		wreg, cstack
  8178 ;; Tracked objects:
  8179 ;;		On entry : 0/0
  8180 ;;		On exit  : 0/0
  8181 ;;		Unchanged: 0/0
  8182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8186 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8187 ;;Total ram usage:        0 bytes
  8188 ;; Hardware stack levels used:    1
  8189 ;; Hardware stack levels required when called:    4
  8190 ;; This function calls:
  8191 ;;		_i2cHighScl
  8192 ;;		_i2cHighSda
  8193 ;;		_i2cLowScl
  8194 ;;		_i2cLowSda
  8195 ;; This function is called by:
  8196 ;;		_I2C_Write_Cmd_Only
  8197 ;;		_I2C_Write_Cmd_Write_Data
  8198 ;;		_DS1621_Read_Temp
  8199 ;;		_DS3231_Read_Time
  8200 ;;		_DS3231_Setup_Time
  8201 ;;		_I2C_Write_Address_Read_One_Byte
  8202 ;;		_I2C_Write_Address_Write_One_Byte
  8203 ;;		_I2C_Write_Cmd_Read_One_Byte
  8204 ;; This function uses a non-reentrant model
  8205 ;;
  8206                           
  8207                           	psect	text46
  8208  001924                     __ptext46:
  8209                           	opt stack 0
  8210  001924                     _I2C_Start:
  8211                           	opt stack 23
  8212                           
  8213                           ;I2C_Soft.c: 69: i2cHighSda();
  8214                           
  8215                           ;incstack = 0
  8216  001924  ECE7  F00C         	call	_i2cHighSda	;wreg free
  8217                           
  8218                           ;I2C_Soft.c: 70: i2cHighScl();
  8219  001928  ECC4  F00C         	call	_i2cHighScl	;wreg free
  8220                           
  8221                           ;I2C_Soft.c: 71: i2cLowSda();
  8222  00192C  ECDA  F00C         	call	_i2cLowSda	;wreg free
  8223                           
  8224                           ;I2C_Soft.c: 72: i2cLowScl();
  8225  001930  ECE3  F00C         	call	_i2cLowScl	;wreg free
  8226  001934  0012               	return		;funcret
  8227  001936                     __end_of_I2C_Start:
  8228                           	opt stack 0
  8229                           tblptru	equ	0xFF8
  8230                           tblptrh	equ	0xFF7
  8231                           tblptrl	equ	0xFF6
  8232                           tablat	equ	0xFF5
  8233                           prodh	equ	0xFF4
  8234                           prodl	equ	0xFF3
  8235                           intcon	equ	0xFF2
  8236                           intcon2	equ	0xFF1
  8237                           postinc0	equ	0xFEE
  8238                           wreg	equ	0xFE8
  8239                           postdec1	equ	0xFE5
  8240                           fsr1l	equ	0xFE1
  8241                           indf2	equ	0xFDF
  8242                           postinc2	equ	0xFDE
  8243                           postdec2	equ	0xFDD
  8244                           fsr2h	equ	0xFDA
  8245                           fsr2l	equ	0xFD9
  8246                           status	equ	0xFD8
  8247                           
  8248 ;; *************** function _I2C_Read *****************
  8249 ;; Defined at:
  8250 ;;		line 16 in file "I2C_Soft.c"
  8251 ;; Parameters:    Size  Location     Type
  8252 ;;  ack             1    wreg     unsigned char 
  8253 ;; Auto vars:     Size  Location     Type
  8254 ;;  ack             1   16[COMRAM] unsigned char 
  8255 ;;  inByte          1   18[COMRAM] unsigned char 
  8256 ;;  n               1   17[COMRAM] unsigned char 
  8257 ;; Return value:  Size  Location     Type
  8258 ;;                  1    wreg      unsigned char 
  8259 ;; Registers used:
  8260 ;;		wreg, status,2, status,0, cstack
  8261 ;; Tracked objects:
  8262 ;;		On entry : 0/0
  8263 ;;		On exit  : 0/0
  8264 ;;		Unchanged: 0/0
  8265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8267 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8269 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8270 ;;Total ram usage:        3 bytes
  8271 ;; Hardware stack levels used:    1
  8272 ;; Hardware stack levels required when called:    5
  8273 ;; This function calls:
  8274 ;;		_i2cAck
  8275 ;;		_i2cHighScl
  8276 ;;		_i2cHighSda
  8277 ;;		_i2cLowScl
  8278 ;;		_i2cNack
  8279 ;; This function is called by:
  8280 ;;		_DS1621_Read_Temp
  8281 ;;		_DS3231_Read_Time
  8282 ;;		_I2C_Write_Address_Read_One_Byte
  8283 ;;		_I2C_Write_Cmd_Read_One_Byte
  8284 ;; This function uses a non-reentrant model
  8285 ;;
  8286                           
  8287                           	psect	text47
  8288  0015A2                     __ptext47:
  8289                           	opt stack 0
  8290  0015A2                     _I2C_Read:
  8291                           	opt stack 24
  8292                           
  8293                           ;incstack = 0
  8294                           ;I2C_Read@ack stored from wreg
  8295  0015A2  6E11               	movwf	I2C_Read@ack,c
  8296                           
  8297                           ;I2C_Soft.c: 18: unsigned char inByte, n;
  8298                           ;I2C_Soft.c: 19: i2cHighSda();
  8299  0015A4  ECE7  F00C         	call	_i2cHighSda	;wreg free
  8300                           
  8301                           ;I2C_Soft.c: 20: for (n=0; n<8; n++)
  8302  0015A8  0E00               	movlw	0
  8303  0015AA  6E12               	movwf	I2C_Read@n,c
  8304  0015AC                     l4587:
  8305  0015AC  0E07               	movlw	7
  8306  0015AE  6412               	cpfsgt	I2C_Read@n,c
  8307  0015B0  D001               	goto	l4591
  8308  0015B2  D00F               	goto	l4605
  8309  0015B4                     l4591:
  8310                           
  8311                           ;I2C_Soft.c: 21: {
  8312                           ;I2C_Soft.c: 22: i2cHighScl();
  8313  0015B4  ECC4  F00C         	call	_i2cHighScl	;wreg free
  8314                           
  8315                           ;I2C_Soft.c: 24: if (PORTAbits.RA2)
  8316  0015B8  A480               	btfss	3968,2,c	;volatile
  8317  0015BA  D003               	goto	l4597
  8318                           
  8319                           ;I2C_Soft.c: 25: inByte = (inByte << 1) | 0x01;
  8320  0015BC  80D8               	bsf	status,0,c
  8321  0015BE  3613               	rlcf	I2C_Read@inByte,f,c
  8322  0015C0  D004               	goto	l4599
  8323  0015C2                     l4597:
  8324                           
  8325                           ;I2C_Soft.c: 26: else
  8326                           ;I2C_Soft.c: 27: inByte = inByte << 1;
  8327  0015C2  5013               	movf	I2C_Read@inByte,w,c
  8328  0015C4  2413               	addwf	I2C_Read@inByte,w,c
  8329  0015C6  6E13               	movwf	I2C_Read@inByte,c
  8330  0015C8  D000               	goto	l4599
  8331  0015CA                     l4599:
  8332                           
  8333                           ;I2C_Soft.c: 28: i2cLowScl();
  8334  0015CA  ECE3  F00C         	call	_i2cLowScl	;wreg free
  8335  0015CE  2A12               	incf	I2C_Read@n,f,c
  8336  0015D0  D7ED               	goto	l4587
  8337  0015D2                     l4605:
  8338                           
  8339                           ;I2C_Soft.c: 29: }
  8340                           ;I2C_Soft.c: 30: if (ack) i2cAck();
  8341  0015D2  5011               	movf	I2C_Read@ack,w,c
  8342  0015D4  B4D8               	btfsc	status,2,c
  8343  0015D6  D003               	goto	l4609
  8344  0015D8  EC9B  F00C         	call	_i2cAck	;wreg free
  8345  0015DC  D003               	goto	l4611
  8346  0015DE                     l4609:
  8347                           
  8348                           ;I2C_Soft.c: 31: else i2cNack();
  8349  0015DE  ECD5  F00C         	call	_i2cNack	;wreg free
  8350  0015E2  D000               	goto	l4611
  8351  0015E4                     l4611:
  8352                           
  8353                           ;I2C_Soft.c: 34: return(inByte);
  8354  0015E4  5013               	movf	I2C_Read@inByte,w,c
  8355  0015E6  D000               	goto	l239
  8356  0015E8                     l239:
  8357  0015E8  0012               	return		;funcret
  8358  0015EA                     __end_of_I2C_Read:
  8359                           	opt stack 0
  8360                           tblptru	equ	0xFF8
  8361                           tblptrh	equ	0xFF7
  8362                           tblptrl	equ	0xFF6
  8363                           tablat	equ	0xFF5
  8364                           prodh	equ	0xFF4
  8365                           prodl	equ	0xFF3
  8366                           intcon	equ	0xFF2
  8367                           intcon2	equ	0xFF1
  8368                           postinc0	equ	0xFEE
  8369                           wreg	equ	0xFE8
  8370                           postdec1	equ	0xFE5
  8371                           fsr1l	equ	0xFE1
  8372                           indf2	equ	0xFDF
  8373                           postinc2	equ	0xFDE
  8374                           postdec2	equ	0xFDD
  8375                           fsr2h	equ	0xFDA
  8376                           fsr2l	equ	0xFD9
  8377                           status	equ	0xFD8
  8378                           
  8379 ;; *************** function _i2cNack *****************
  8380 ;; Defined at:
  8381 ;;		line 53 in file "I2C_Soft.c"
  8382 ;; Parameters:    Size  Location     Type
  8383 ;;		None
  8384 ;; Auto vars:     Size  Location     Type
  8385 ;;		None
  8386 ;; Return value:  Size  Location     Type
  8387 ;;		None               void
  8388 ;; Registers used:
  8389 ;;		wreg, cstack
  8390 ;; Tracked objects:
  8391 ;;		On entry : 0/0
  8392 ;;		On exit  : 0/0
  8393 ;;		Unchanged: 0/0
  8394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8399 ;;Total ram usage:        0 bytes
  8400 ;; Hardware stack levels used:    1
  8401 ;; Hardware stack levels required when called:    4
  8402 ;; This function calls:
  8403 ;;		_i2cHighScl
  8404 ;;		_i2cLowScl
  8405 ;; This function is called by:
  8406 ;;		_I2C_Read
  8407 ;; This function uses a non-reentrant model
  8408 ;;
  8409                           
  8410                           	psect	text48
  8411  0019AA                     __ptext48:
  8412                           	opt stack 0
  8413  0019AA                     _i2cNack:
  8414                           	opt stack 24
  8415                           
  8416                           ;I2C_Soft.c: 55: i2cHighScl();
  8417                           
  8418                           ;incstack = 0
  8419  0019AA  ECC4  F00C         	call	_i2cHighScl	;wreg free
  8420                           
  8421                           ;I2C_Soft.c: 56: i2cLowScl();
  8422  0019AE  ECE3  F00C         	call	_i2cLowScl	;wreg free
  8423  0019B2  0012               	return		;funcret
  8424  0019B4                     __end_of_i2cNack:
  8425                           	opt stack 0
  8426                           tblptru	equ	0xFF8
  8427                           tblptrh	equ	0xFF7
  8428                           tblptrl	equ	0xFF6
  8429                           tablat	equ	0xFF5
  8430                           prodh	equ	0xFF4
  8431                           prodl	equ	0xFF3
  8432                           intcon	equ	0xFF2
  8433                           intcon2	equ	0xFF1
  8434                           postinc0	equ	0xFEE
  8435                           wreg	equ	0xFE8
  8436                           postdec1	equ	0xFE5
  8437                           fsr1l	equ	0xFE1
  8438                           indf2	equ	0xFDF
  8439                           postinc2	equ	0xFDE
  8440                           postdec2	equ	0xFDD
  8441                           fsr2h	equ	0xFDA
  8442                           fsr2l	equ	0xFD9
  8443                           status	equ	0xFD8
  8444                           
  8445 ;; *************** function _i2cAck *****************
  8446 ;; Defined at:
  8447 ;;		line 59 in file "I2C_Soft.c"
  8448 ;; Parameters:    Size  Location     Type
  8449 ;;		None
  8450 ;; Auto vars:     Size  Location     Type
  8451 ;;		None
  8452 ;; Return value:  Size  Location     Type
  8453 ;;		None               void
  8454 ;; Registers used:
  8455 ;;		wreg, cstack
  8456 ;; Tracked objects:
  8457 ;;		On entry : 0/0
  8458 ;;		On exit  : 0/0
  8459 ;;		Unchanged: 0/0
  8460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8465 ;;Total ram usage:        0 bytes
  8466 ;; Hardware stack levels used:    1
  8467 ;; Hardware stack levels required when called:    4
  8468 ;; This function calls:
  8469 ;;		_i2cHighScl
  8470 ;;		_i2cHighSda
  8471 ;;		_i2cLowScl
  8472 ;;		_i2cLowSda
  8473 ;; This function is called by:
  8474 ;;		_I2C_Read
  8475 ;; This function uses a non-reentrant model
  8476 ;;
  8477                           
  8478                           	psect	text49
  8479  001936                     __ptext49:
  8480                           	opt stack 0
  8481  001936                     _i2cAck:
  8482                           	opt stack 24
  8483                           
  8484                           ;I2C_Soft.c: 61: i2cLowSda();
  8485                           
  8486                           ;incstack = 0
  8487  001936  ECDA  F00C         	call	_i2cLowSda	;wreg free
  8488                           
  8489                           ;I2C_Soft.c: 62: i2cHighScl();
  8490  00193A  ECC4  F00C         	call	_i2cHighScl	;wreg free
  8491                           
  8492                           ;I2C_Soft.c: 63: i2cLowScl();
  8493  00193E  ECE3  F00C         	call	_i2cLowScl	;wreg free
  8494                           
  8495                           ;I2C_Soft.c: 64: i2cHighSda();
  8496  001942  ECE7  F00C         	call	_i2cHighSda	;wreg free
  8497  001946  0012               	return		;funcret
  8498  001948                     __end_of_i2cAck:
  8499                           	opt stack 0
  8500                           tblptru	equ	0xFF8
  8501                           tblptrh	equ	0xFF7
  8502                           tblptrl	equ	0xFF6
  8503                           tablat	equ	0xFF5
  8504                           prodh	equ	0xFF4
  8505                           prodl	equ	0xFF3
  8506                           intcon	equ	0xFF2
  8507                           intcon2	equ	0xFF1
  8508                           postinc0	equ	0xFEE
  8509                           wreg	equ	0xFE8
  8510                           postdec1	equ	0xFE5
  8511                           fsr1l	equ	0xFE1
  8512                           indf2	equ	0xFDF
  8513                           postinc2	equ	0xFDE
  8514                           postdec2	equ	0xFDD
  8515                           fsr2h	equ	0xFDA
  8516                           fsr2l	equ	0xFD9
  8517                           status	equ	0xFD8
  8518                           
  8519 ;; *************** function _I2C_ReStart *****************
  8520 ;; Defined at:
  8521 ;;		line 75 in file "I2C_Soft.c"
  8522 ;; Parameters:    Size  Location     Type
  8523 ;;		None
  8524 ;; Auto vars:     Size  Location     Type
  8525 ;;		None
  8526 ;; Return value:  Size  Location     Type
  8527 ;;		None               void
  8528 ;; Registers used:
  8529 ;;		wreg, cstack
  8530 ;; Tracked objects:
  8531 ;;		On entry : 0/0
  8532 ;;		On exit  : 0/0
  8533 ;;		Unchanged: 0/0
  8534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8538 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8539 ;;Total ram usage:        0 bytes
  8540 ;; Hardware stack levels used:    1
  8541 ;; Hardware stack levels required when called:    4
  8542 ;; This function calls:
  8543 ;;		_i2cHighScl
  8544 ;;		_i2cHighSda
  8545 ;;		_i2cLowScl
  8546 ;;		_i2cLowSda
  8547 ;; This function is called by:
  8548 ;;		_DS1621_Read_Temp
  8549 ;;		_DS3231_Read_Time
  8550 ;;		_I2C_Write_Address_Read_One_Byte
  8551 ;;		_I2C_Write_Cmd_Read_One_Byte
  8552 ;; This function uses a non-reentrant model
  8553 ;;
  8554                           
  8555                           	psect	text50
  8556  0018C2                     __ptext50:
  8557                           	opt stack 0
  8558  0018C2                     _I2C_ReStart:
  8559                           	opt stack 25
  8560                           
  8561                           ;I2C_Soft.c: 77: i2cLowScl();
  8562                           
  8563                           ;incstack = 0
  8564  0018C2  ECE3  F00C         	call	_i2cLowScl	;wreg free
  8565                           
  8566                           ;I2C_Soft.c: 78: i2cHighSda();
  8567  0018C6  ECE7  F00C         	call	_i2cHighSda	;wreg free
  8568                           
  8569                           ;I2C_Soft.c: 79: i2cHighScl();
  8570  0018CA  ECC4  F00C         	call	_i2cHighScl	;wreg free
  8571                           
  8572                           ;I2C_Soft.c: 80: i2cLowSda();
  8573  0018CE  ECDA  F00C         	call	_i2cLowSda	;wreg free
  8574                           
  8575                           ;I2C_Soft.c: 81: i2cLowScl();
  8576  0018D2  ECE3  F00C         	call	_i2cLowScl	;wreg free
  8577  0018D6  0012               	return		;funcret
  8578  0018D8                     __end_of_I2C_ReStart:
  8579                           	opt stack 0
  8580                           tblptru	equ	0xFF8
  8581                           tblptrh	equ	0xFF7
  8582                           tblptrl	equ	0xFF6
  8583                           tablat	equ	0xFF5
  8584                           prodh	equ	0xFF4
  8585                           prodl	equ	0xFF3
  8586                           intcon	equ	0xFF2
  8587                           intcon2	equ	0xFF1
  8588                           postinc0	equ	0xFEE
  8589                           wreg	equ	0xFE8
  8590                           postdec1	equ	0xFE5
  8591                           fsr1l	equ	0xFE1
  8592                           indf2	equ	0xFDF
  8593                           postinc2	equ	0xFDE
  8594                           postdec2	equ	0xFDD
  8595                           fsr2h	equ	0xFDA
  8596                           fsr2l	equ	0xFD9
  8597                           status	equ	0xFD8
  8598                           
  8599 ;; *************** function _i2cLowSda *****************
  8600 ;; Defined at:
  8601 ;;		line 98 in file "I2C_Soft.c"
  8602 ;; Parameters:    Size  Location     Type
  8603 ;;		None
  8604 ;; Auto vars:     Size  Location     Type
  8605 ;;		None
  8606 ;; Return value:  Size  Location     Type
  8607 ;;		None               void
  8608 ;; Registers used:
  8609 ;;		None
  8610 ;; Tracked objects:
  8611 ;;		On entry : 0/0
  8612 ;;		On exit  : 0/0
  8613 ;;		Unchanged: 0/0
  8614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8618 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8619 ;;Total ram usage:        0 bytes
  8620 ;; Hardware stack levels used:    1
  8621 ;; Hardware stack levels required when called:    3
  8622 ;; This function calls:
  8623 ;;		Nothing
  8624 ;; This function is called by:
  8625 ;;		_I2C_Write
  8626 ;;		_i2cAck
  8627 ;;		_I2C_Start
  8628 ;;		_I2C_ReStart
  8629 ;;		_I2C_Stop
  8630 ;; This function uses a non-reentrant model
  8631 ;;
  8632                           
  8633                           	psect	text51
  8634  0019B4                     __ptext51:
  8635                           	opt stack 0
  8636  0019B4                     _i2cLowSda:
  8637                           	opt stack 23
  8638                           
  8639                           ;I2C_Soft.c: 100: PORTAbits.RA2 = 0;
  8640                           
  8641                           ;incstack = 0
  8642  0019B4  9480               	bcf	3968,2,c	;volatile
  8643                           
  8644                           ;I2C_Soft.c: 101: TRISAbits.RA2 = 0;
  8645  0019B6  9492               	bcf	3986,2,c	;volatile
  8646                           
  8647                           ;I2C_Soft.c: 102: _delay((unsigned long)((2)*(8000000/4000000.0)));
  8648  0019B8  D000               	nop2		;2 cycle nop
  8649  0019BA  D000               	nop2		;2 cycle nop
  8650  0019BC  0012               	return		;funcret
  8651  0019BE                     __end_of_i2cLowSda:
  8652                           	opt stack 0
  8653                           tblptru	equ	0xFF8
  8654                           tblptrh	equ	0xFF7
  8655                           tblptrl	equ	0xFF6
  8656                           tablat	equ	0xFF5
  8657                           prodh	equ	0xFF4
  8658                           prodl	equ	0xFF3
  8659                           intcon	equ	0xFF2
  8660                           intcon2	equ	0xFF1
  8661                           postinc0	equ	0xFEE
  8662                           wreg	equ	0xFE8
  8663                           postdec1	equ	0xFE5
  8664                           fsr1l	equ	0xFE1
  8665                           indf2	equ	0xFDF
  8666                           postinc2	equ	0xFDE
  8667                           postdec2	equ	0xFDD
  8668                           fsr2h	equ	0xFDA
  8669                           fsr2l	equ	0xFD9
  8670                           status	equ	0xFD8
  8671                           
  8672 ;; *************** function _i2cLowScl *****************
  8673 ;; Defined at:
  8674 ;;		line 111 in file "I2C_Soft.c"
  8675 ;; Parameters:    Size  Location     Type
  8676 ;;		None
  8677 ;; Auto vars:     Size  Location     Type
  8678 ;;		None
  8679 ;; Return value:  Size  Location     Type
  8680 ;;		None               void
  8681 ;; Registers used:
  8682 ;;		None
  8683 ;; Tracked objects:
  8684 ;;		On entry : 0/0
  8685 ;;		On exit  : 0/0
  8686 ;;		Unchanged: 0/0
  8687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8692 ;;Total ram usage:        0 bytes
  8693 ;; Hardware stack levels used:    1
  8694 ;; Hardware stack levels required when called:    3
  8695 ;; This function calls:
  8696 ;;		Nothing
  8697 ;; This function is called by:
  8698 ;;		_I2C_Read
  8699 ;;		_I2C_Write
  8700 ;;		_i2cNack
  8701 ;;		_i2cAck
  8702 ;;		_I2C_Start
  8703 ;;		_I2C_ReStart
  8704 ;;		_I2C_Stop
  8705 ;; This function uses a non-reentrant model
  8706 ;;
  8707                           
  8708                           	psect	text52
  8709  0019C6                     __ptext52:
  8710                           	opt stack 0
  8711  0019C6                     _i2cLowScl:
  8712                           	opt stack 23
  8713                           
  8714                           ;I2C_Soft.c: 113: PORTAbits.RA4 = 0;
  8715                           
  8716                           ;incstack = 0
  8717  0019C6  9880               	bcf	3968,4,c	;volatile
  8718                           
  8719                           ;I2C_Soft.c: 114: TRISAbits.RA4 = 0;
  8720  0019C8  9892               	bcf	3986,4,c	;volatile
  8721                           
  8722                           ;I2C_Soft.c: 115: _delay((unsigned long)((1)*(8000000/4000000.0)));
  8723  0019CA  D000               	nop2		;2 cycle nop
  8724  0019CC  0012               	return		;funcret
  8725  0019CE                     __end_of_i2cLowScl:
  8726                           	opt stack 0
  8727                           tblptru	equ	0xFF8
  8728                           tblptrh	equ	0xFF7
  8729                           tblptrl	equ	0xFF6
  8730                           tablat	equ	0xFF5
  8731                           prodh	equ	0xFF4
  8732                           prodl	equ	0xFF3
  8733                           intcon	equ	0xFF2
  8734                           intcon2	equ	0xFF1
  8735                           postinc0	equ	0xFEE
  8736                           wreg	equ	0xFE8
  8737                           postdec1	equ	0xFE5
  8738                           fsr1l	equ	0xFE1
  8739                           indf2	equ	0xFDF
  8740                           postinc2	equ	0xFDE
  8741                           postdec2	equ	0xFDD
  8742                           fsr2h	equ	0xFDA
  8743                           fsr2l	equ	0xFD9
  8744                           status	equ	0xFD8
  8745                           
  8746 ;; *************** function _i2cHighSda *****************
  8747 ;; Defined at:
  8748 ;;		line 92 in file "I2C_Soft.c"
  8749 ;; Parameters:    Size  Location     Type
  8750 ;;		None
  8751 ;; Auto vars:     Size  Location     Type
  8752 ;;		None
  8753 ;; Return value:  Size  Location     Type
  8754 ;;		None               void
  8755 ;; Registers used:
  8756 ;;		None
  8757 ;; Tracked objects:
  8758 ;;		On entry : 0/0
  8759 ;;		On exit  : 0/0
  8760 ;;		Unchanged: 0/0
  8761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8765 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8766 ;;Total ram usage:        0 bytes
  8767 ;; Hardware stack levels used:    1
  8768 ;; Hardware stack levels required when called:    3
  8769 ;; This function calls:
  8770 ;;		Nothing
  8771 ;; This function is called by:
  8772 ;;		_I2C_Init
  8773 ;;		_I2C_Read
  8774 ;;		_I2C_Write
  8775 ;;		_i2cAck
  8776 ;;		_I2C_Start
  8777 ;;		_I2C_ReStart
  8778 ;;		_I2C_Stop
  8779 ;; This function uses a non-reentrant model
  8780 ;;
  8781                           
  8782                           	psect	text53
  8783  0019CE                     __ptext53:
  8784                           	opt stack 0
  8785  0019CE                     _i2cHighSda:
  8786                           	opt stack 25
  8787                           
  8788                           ;I2C_Soft.c: 94: TRISAbits.RA2 = 1;
  8789                           
  8790                           ;incstack = 0
  8791  0019CE  8492               	bsf	3986,2,c	;volatile
  8792                           
  8793                           ;I2C_Soft.c: 95: _delay((unsigned long)((2)*(8000000/4000000.0)));
  8794  0019D0  D000               	nop2		;2 cycle nop
  8795  0019D2  D000               	nop2		;2 cycle nop
  8796  0019D4  0012               	return		;funcret
  8797  0019D6                     __end_of_i2cHighSda:
  8798                           	opt stack 0
  8799                           tblptru	equ	0xFF8
  8800                           tblptrh	equ	0xFF7
  8801                           tblptrl	equ	0xFF6
  8802                           tablat	equ	0xFF5
  8803                           prodh	equ	0xFF4
  8804                           prodl	equ	0xFF3
  8805                           intcon	equ	0xFF2
  8806                           intcon2	equ	0xFF1
  8807                           postinc0	equ	0xFEE
  8808                           wreg	equ	0xFE8
  8809                           postdec1	equ	0xFE5
  8810                           fsr1l	equ	0xFE1
  8811                           indf2	equ	0xFDF
  8812                           postinc2	equ	0xFDE
  8813                           postdec2	equ	0xFDD
  8814                           fsr2h	equ	0xFDA
  8815                           fsr2l	equ	0xFD9
  8816                           status	equ	0xFD8
  8817                           
  8818 ;; *************** function _i2cHighScl *****************
  8819 ;; Defined at:
  8820 ;;		line 105 in file "I2C_Soft.c"
  8821 ;; Parameters:    Size  Location     Type
  8822 ;;		None
  8823 ;; Auto vars:     Size  Location     Type
  8824 ;;		None
  8825 ;; Return value:  Size  Location     Type
  8826 ;;		None               void
  8827 ;; Registers used:
  8828 ;;		wreg
  8829 ;; Tracked objects:
  8830 ;;		On entry : 0/0
  8831 ;;		On exit  : 0/0
  8832 ;;		Unchanged: 0/0
  8833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8838 ;;Total ram usage:        0 bytes
  8839 ;; Hardware stack levels used:    1
  8840 ;; Hardware stack levels required when called:    3
  8841 ;; This function calls:
  8842 ;;		Nothing
  8843 ;; This function is called by:
  8844 ;;		_I2C_Init
  8845 ;;		_I2C_Read
  8846 ;;		_I2C_Write
  8847 ;;		_i2cNack
  8848 ;;		_i2cAck
  8849 ;;		_I2C_Start
  8850 ;;		_I2C_ReStart
  8851 ;;		_I2C_Stop
  8852 ;; This function uses a non-reentrant model
  8853 ;;
  8854                           
  8855                           	psect	text54
  8856  001988                     __ptext54:
  8857                           	opt stack 0
  8858  001988                     _i2cHighScl:
  8859                           	opt stack 25
  8860                           
  8861                           ;I2C_Soft.c: 107: TRISAbits.RA4 = 1;
  8862                           
  8863                           ;incstack = 0
  8864  001988  8892               	bsf	3986,4,c	;volatile
  8865                           
  8866                           ;I2C_Soft.c: 108: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8867  00198A  0E06               	movlw	6
  8868  00198C                     u3927:
  8869  00198C  2EE8               	decfsz	wreg,f,c
  8870  00198E  D7FE               	goto	u3927
  8871  001990  D000               	nop2		;nop
  8872  001992  0012               	return		;funcret
  8873  001994                     __end_of_i2cHighScl:
  8874                           	opt stack 0
  8875                           tblptru	equ	0xFF8
  8876                           tblptrh	equ	0xFF7
  8877                           tblptrl	equ	0xFF6
  8878                           tablat	equ	0xFF5
  8879                           prodh	equ	0xFF4
  8880                           prodl	equ	0xFF3
  8881                           intcon	equ	0xFF2
  8882                           intcon2	equ	0xFF1
  8883                           postinc0	equ	0xFEE
  8884                           wreg	equ	0xFE8
  8885                           postdec1	equ	0xFE5
  8886                           fsr1l	equ	0xFE1
  8887                           indf2	equ	0xFDF
  8888                           postinc2	equ	0xFDE
  8889                           postdec2	equ	0xFDD
  8890                           fsr2h	equ	0xFDA
  8891                           fsr2l	equ	0xFD9
  8892                           status	equ	0xFD8
  8893                           
  8894 ;; *************** function _Activate_Buzzer *****************
  8895 ;; Defined at:
  8896 ;;		line 219 in file "Lab11p4.c"
  8897 ;; Parameters:    Size  Location     Type
  8898 ;;		None
  8899 ;; Auto vars:     Size  Location     Type
  8900 ;;		None
  8901 ;; Return value:  Size  Location     Type
  8902 ;;		None               void
  8903 ;; Registers used:
  8904 ;;		wreg, status,2
  8905 ;; Tracked objects:
  8906 ;;		On entry : 0/0
  8907 ;;		On exit  : 0/0
  8908 ;;		Unchanged: 0/0
  8909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8914 ;;Total ram usage:        0 bytes
  8915 ;; Hardware stack levels used:    1
  8916 ;; Hardware stack levels required when called:    3
  8917 ;; This function calls:
  8918 ;;		Nothing
  8919 ;; This function is called by:
  8920 ;;		_main
  8921 ;; This function uses a non-reentrant model
  8922 ;;
  8923                           
  8924                           	psect	text55
  8925  001948                     __ptext55:
  8926                           	opt stack 0
  8927  001948                     _Activate_Buzzer:
  8928                           	opt stack 27
  8929                           
  8930                           ;Lab11p4.c: 221: PR2 = 0b11111001 ;
  8931                           
  8932                           ;incstack = 0
  8933  001948  0EF9               	movlw	249
  8934  00194A  6ECB               	movwf	4043,c	;volatile
  8935                           
  8936                           ;Lab11p4.c: 222: T2CON = 0b00000101 ;
  8937  00194C  0E05               	movlw	5
  8938  00194E  6ECA               	movwf	4042,c	;volatile
  8939                           
  8940                           ;Lab11p4.c: 223: CCPR2L = 0b01001010 ;
  8941  001950  0E4A               	movlw	74
  8942  001952  6EBB               	movwf	4027,c	;volatile
  8943                           
  8944                           ;Lab11p4.c: 224: CCP2CON = 0b00111100 ;
  8945  001954  0E3C               	movlw	60
  8946  001956  6EBA               	movwf	4026,c	;volatile
  8947  001958  0012               	return		;funcret
  8948  00195A                     __end_of_Activate_Buzzer:
  8949                           	opt stack 0
  8950                           tblptru	equ	0xFF8
  8951                           tblptrh	equ	0xFF7
  8952                           tblptrl	equ	0xFF6
  8953                           tablat	equ	0xFF5
  8954                           prodh	equ	0xFF4
  8955                           prodl	equ	0xFF3
  8956                           intcon	equ	0xFF2
  8957                           intcon2	equ	0xFF1
  8958                           postinc0	equ	0xFEE
  8959                           wreg	equ	0xFE8
  8960                           postdec1	equ	0xFE5
  8961                           fsr1l	equ	0xFE1
  8962                           indf2	equ	0xFDF
  8963                           postinc2	equ	0xFDE
  8964                           postdec2	equ	0xFDD
  8965                           fsr2h	equ	0xFDA
  8966                           fsr2l	equ	0xFD9
  8967                           status	equ	0xFD8
  8968                           
  8969 ;; *************** function _chkisr *****************
  8970 ;; Defined at:
  8971 ;;		line 30 in file "Interrupt.c"
  8972 ;; Parameters:    Size  Location     Type
  8973 ;;		None
  8974 ;; Auto vars:     Size  Location     Type
  8975 ;;		None
  8976 ;; Return value:  Size  Location     Type
  8977 ;;		None               void
  8978 ;; Registers used:
  8979 ;;		wreg, status,2, status,0, cstack
  8980 ;; Tracked objects:
  8981 ;;		On entry : 0/0
  8982 ;;		On exit  : 0/0
  8983 ;;		Unchanged: 0/0
  8984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8987 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8988 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8989 ;;Total ram usage:       14 bytes
  8990 ;; Hardware stack levels used:    1
  8991 ;; Hardware stack levels required when called:    2
  8992 ;; This function calls:
  8993 ;;		_INT0_isr
  8994 ;;		_TIMER1_isr
  8995 ;; This function is called by:
  8996 ;;		Interrupt level 2
  8997 ;; This function uses a non-reentrant model
  8998 ;;
  8999                           
  9000                           	psect	intcode
  9001  000008                     __pintcode:
  9002                           	opt stack 0
  9003  000008                     _chkisr:
  9004                           	opt stack 19
  9005                           
  9006                           ;incstack = 0
  9007  000008  CFFA F003          	movff	pclath,??_chkisr
  9008  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
  9009  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
  9010  000014  ED9D  F008         	call	int_func,f	;refresh shadow registers
  9011                           pclatu	equ	0xFFB
  9012                           pclath	equ	0xFFA
  9013                           tblptru	equ	0xFF8
  9014                           tblptrh	equ	0xFF7
  9015                           tblptrl	equ	0xFF6
  9016                           tablat	equ	0xFF5
  9017                           prodh	equ	0xFF4
  9018                           prodl	equ	0xFF3
  9019                           intcon	equ	0xFF2
  9020                           intcon2	equ	0xFF1
  9021                           postinc0	equ	0xFEE
  9022                           fsr0l	equ	0xFE9
  9023                           wreg	equ	0xFE8
  9024                           postdec1	equ	0xFE5
  9025                           fsr1l	equ	0xFE1
  9026                           indf2	equ	0xFDF
  9027                           postinc2	equ	0xFDE
  9028                           postdec2	equ	0xFDD
  9029                           fsr2h	equ	0xFDA
  9030                           fsr2l	equ	0xFD9
  9031                           status	equ	0xFD8
  9032                           
  9033                           	psect	intcode_body
  9034  00113A                     __pintcode_body:
  9035                           	opt stack 19
  9036  00113A                     int_func:
  9037                           	opt stack 19
  9038  00113A  0006               	pop		; remove dummy address from shadow register refresh
  9039  00113C  CFEA F006          	movff	fsr0h,??_chkisr+3
  9040  001140  CFE1 F007          	movff	fsr1l,??_chkisr+4
  9041  001144  CFE2 F008          	movff	fsr1h,??_chkisr+5
  9042  001148  CFD9 F009          	movff	fsr2l,??_chkisr+6
  9043  00114C  CFDA F00A          	movff	fsr2h,??_chkisr+7
  9044  001150  CFF3 F00B          	movff	prodl,??_chkisr+8
  9045  001154  CFF4 F00C          	movff	prodh,??_chkisr+9
  9046  001158  CFF6 F00D          	movff	tblptrl,??_chkisr+10
  9047  00115C  CFF7 F00E          	movff	tblptrh,??_chkisr+11
  9048  001160  CFF8 F00F          	movff	tblptru,??_chkisr+12
  9049  001164  CFF5 F010          	movff	tablat,??_chkisr+13
  9050                           
  9051                           ;Interrupt.c: 32: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
  9052  001168  A09E               	btfss	3998,0,c	;volatile
  9053  00116A  D003               	goto	i2l2661
  9054  00116C  ECCA  F00C         	call	_TIMER1_isr	;wreg free
  9055  001170  D000               	goto	i2l2661
  9056  001172                     i2l2661:
  9057                           
  9058                           ;Interrupt.c: 33: if (INTCONbits.INT0IF == 1) INT0_isr();
  9059  001172  A2F2               	btfss	intcon,1,c	;volatile
  9060  001174  D003               	goto	i2l370
  9061  001176  EC9B  F003         	call	_INT0_isr	;wreg free
  9062  00117A  D000               	goto	i2l370
  9063  00117C                     i2l370:
  9064  00117C  C010  FFF5         	movff	??_chkisr+13,tablat
  9065  001180  C00F  FFF8         	movff	??_chkisr+12,tblptru
  9066  001184  C00E  FFF7         	movff	??_chkisr+11,tblptrh
  9067  001188  C00D  FFF6         	movff	??_chkisr+10,tblptrl
  9068  00118C  C00C  FFF4         	movff	??_chkisr+9,prodh
  9069  001190  C00B  FFF3         	movff	??_chkisr+8,prodl
  9070  001194  C00A  FFDA         	movff	??_chkisr+7,fsr2h
  9071  001198  C009  FFD9         	movff	??_chkisr+6,fsr2l
  9072  00119C  C008  FFE2         	movff	??_chkisr+5,fsr1h
  9073  0011A0  C007  FFE1         	movff	??_chkisr+4,fsr1l
  9074  0011A4  C006  FFEA         	movff	??_chkisr+3,fsr0h
  9075  0011A8  C005  FFE9         	movff	??_chkisr+2,fsr0l
  9076  0011AC  C004  FFFB         	movff	??_chkisr+1,pclatu
  9077  0011B0  C003  FFFA         	movff	??_chkisr,pclath
  9078  0011B4  0011               	retfie		f
  9079  0011B6                     __end_of_chkisr:
  9080                           	opt stack 0
  9081                           pclatu	equ	0xFFB
  9082                           pclath	equ	0xFFA
  9083                           tblptru	equ	0xFF8
  9084                           tblptrh	equ	0xFF7
  9085                           tblptrl	equ	0xFF6
  9086                           tablat	equ	0xFF5
  9087                           prodh	equ	0xFF4
  9088                           prodl	equ	0xFF3
  9089                           intcon	equ	0xFF2
  9090                           intcon2	equ	0xFF1
  9091                           postinc0	equ	0xFEE
  9092                           fsr0h	equ	0xFEA
  9093                           fsr0l	equ	0xFE9
  9094                           wreg	equ	0xFE8
  9095                           postdec1	equ	0xFE5
  9096                           fsr1h	equ	0xFE2
  9097                           fsr1l	equ	0xFE1
  9098                           indf2	equ	0xFDF
  9099                           postinc2	equ	0xFDE
  9100                           postdec2	equ	0xFDD
  9101                           fsr2h	equ	0xFDA
  9102                           fsr2l	equ	0xFD9
  9103                           status	equ	0xFD8
  9104                           
  9105 ;; *************** function _TIMER1_isr *****************
  9106 ;; Defined at:
  9107 ;;		line 36 in file "Interrupt.c"
  9108 ;; Parameters:    Size  Location     Type
  9109 ;;		None
  9110 ;; Auto vars:     Size  Location     Type
  9111 ;;		None
  9112 ;; Return value:  Size  Location     Type
  9113 ;;		None               void
  9114 ;; Registers used:
  9115 ;;		wreg, status,2
  9116 ;; Tracked objects:
  9117 ;;		On entry : 0/0
  9118 ;;		On exit  : 0/0
  9119 ;;		Unchanged: 0/0
  9120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9124 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9125 ;;Total ram usage:        0 bytes
  9126 ;; Hardware stack levels used:    1
  9127 ;; This function calls:
  9128 ;;		Nothing
  9129 ;; This function is called by:
  9130 ;;		_chkisr
  9131 ;; This function uses a non-reentrant model
  9132 ;;
  9133                           
  9134                           	psect	text57
  9135  001994                     __ptext57:
  9136                           	opt stack 0
  9137  001994                     _TIMER1_isr:
  9138                           	opt stack 20
  9139                           
  9140                           ;Interrupt.c: 38: Nec_state = 0;
  9141                           
  9142                           ;incstack = 0
  9143  001994  0E00               	movlw	0
  9144  001996  6E51               	movwf	_Nec_state,c
  9145                           
  9146                           ;Interrupt.c: 39: INTCON2bits.INTEDG0 = 0;
  9147  001998  9CF1               	bcf	intcon2,6,c	;volatile
  9148                           
  9149                           ;Interrupt.c: 40: T1CONbits.TMR1ON = 0;
  9150  00199A  90CD               	bcf	4045,0,c	;volatile
  9151                           
  9152                           ;Interrupt.c: 41: PIR1bits.TMR1IF = 0;
  9153  00199C  909E               	bcf	3998,0,c	;volatile
  9154  00199E  0012               	return		;funcret
  9155  0019A0                     __end_of_TIMER1_isr:
  9156                           	opt stack 0
  9157                           pclatu	equ	0xFFB
  9158                           pclath	equ	0xFFA
  9159                           tblptru	equ	0xFF8
  9160                           tblptrh	equ	0xFF7
  9161                           tblptrl	equ	0xFF6
  9162                           tablat	equ	0xFF5
  9163                           prodh	equ	0xFF4
  9164                           prodl	equ	0xFF3
  9165                           intcon	equ	0xFF2
  9166                           intcon2	equ	0xFF1
  9167                           postinc0	equ	0xFEE
  9168                           fsr0h	equ	0xFEA
  9169                           fsr0l	equ	0xFE9
  9170                           wreg	equ	0xFE8
  9171                           postdec1	equ	0xFE5
  9172                           fsr1h	equ	0xFE2
  9173                           fsr1l	equ	0xFE1
  9174                           indf2	equ	0xFDF
  9175                           postinc2	equ	0xFDE
  9176                           postdec2	equ	0xFDD
  9177                           fsr2h	equ	0xFDA
  9178                           fsr2l	equ	0xFD9
  9179                           status	equ	0xFD8
  9180                           
  9181 ;; *************** function _INT0_isr *****************
  9182 ;; Defined at:
  9183 ;;		line 50 in file "Interrupt.c"
  9184 ;; Parameters:    Size  Location     Type
  9185 ;;		None
  9186 ;; Auto vars:     Size  Location     Type
  9187 ;;		None
  9188 ;; Return value:  Size  Location     Type
  9189 ;;		None               void
  9190 ;; Registers used:
  9191 ;;		wreg, status,2, status,0, cstack
  9192 ;; Tracked objects:
  9193 ;;		On entry : 0/0
  9194 ;;		On exit  : 0/0
  9195 ;;		Unchanged: 0/0
  9196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9199 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9200 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9201 ;;Total ram usage:        2 bytes
  9202 ;; Hardware stack levels used:    1
  9203 ;; Hardware stack levels required when called:    1
  9204 ;; This function calls:
  9205 ;;		_force_nec_state0
  9206 ;; This function is called by:
  9207 ;;		_chkisr
  9208 ;; This function uses a non-reentrant model
  9209 ;;
  9210                           
  9211                           	psect	text58
  9212  000736                     __ptext58:
  9213                           	opt stack 0
  9214  000736                     _INT0_isr:
  9215                           	opt stack 19
  9216                           
  9217                           ;Interrupt.c: 52: INTCONbits.INT0IF = 0;
  9218                           
  9219                           ;incstack = 0
  9220  000736  92F2               	bcf	intcon,1,c	;volatile
  9221                           
  9222                           ;Interrupt.c: 53: if (Nec_state != 0)
  9223  000738  5051               	movf	_Nec_state,w,c
  9224  00073A  B4D8               	btfsc	status,2,c
  9225  00073C  D09C               	goto	i2l2169
  9226                           
  9227                           ;Interrupt.c: 54: {
  9228                           ;Interrupt.c: 55: Time_Elapsed = (TMR1H << 8) | TMR1L;
  9229  00073E  50CE               	movf	4046,w,c	;volatile
  9230  000740  CFCF F001          	movff	4047,??_INT0_isr	;volatile
  9231  000744  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
  9232  000746  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
  9233  00074A  6A01               	clrf	??_INT0_isr,c
  9234  00074C  1001               	iorwf	??_INT0_isr,w,c
  9235  00074E  6E48               	movwf	_Time_Elapsed,c
  9236  000750  5002               	movf	??_INT0_isr+1,w,c
  9237  000752  6E49               	movwf	_Time_Elapsed+1,c
  9238                           
  9239                           ;Interrupt.c: 56: TMR1H = 0;
  9240  000754  0E00               	movlw	0
  9241  000756  6ECF               	movwf	4047,c	;volatile
  9242                           
  9243                           ;Interrupt.c: 57: TMR1L = 0;
  9244  000758  0E00               	movlw	0
  9245  00075A  6ECE               	movwf	4046,c	;volatile
  9246                           
  9247                           ;Interrupt.c: 58: }
  9248                           ;Interrupt.c: 60: switch(Nec_state)
  9249  00075C  D08C               	goto	i2l2169
  9250  00075E                     i2l2101:
  9251                           
  9252                           ;Interrupt.c: 63: {
  9253                           ;Interrupt.c: 65: TMR1H = 0;
  9254  00075E  0E00               	movlw	0
  9255  000760  6ECF               	movwf	4047,c	;volatile
  9256                           
  9257                           ;Interrupt.c: 66: TMR1L = 0;
  9258  000762  0E00               	movlw	0
  9259  000764  6ECE               	movwf	4046,c	;volatile
  9260                           
  9261                           ;Interrupt.c: 67: PIR1bits.TMR1IF = 0;
  9262  000766  909E               	bcf	3998,0,c	;volatile
  9263                           
  9264                           ;Interrupt.c: 68: T1CON= 0x90;
  9265  000768  0E90               	movlw	144
  9266  00076A  6ECD               	movwf	4045,c	;volatile
  9267                           
  9268                           ;Interrupt.c: 69: T1CONbits.TMR1ON = 1;
  9269  00076C  80CD               	bsf	4045,0,c	;volatile
  9270                           
  9271                           ;Interrupt.c: 70: bit_count = 0;
  9272  00076E  0E00               	movlw	0
  9273  000770  6E58               	movwf	_bit_count,c
  9274                           
  9275                           ;Interrupt.c: 71: Nec_code = 0;
  9276  000772  0E00               	movlw	0
  9277  000774  6E44               	movwf	_Nec_code,c
  9278  000776  0E00               	movlw	0
  9279  000778  6E45               	movwf	_Nec_code+1,c
  9280  00077A  0E00               	movlw	0
  9281  00077C  6E46               	movwf	_Nec_code+2,c
  9282  00077E  0E00               	movlw	0
  9283  000780  6E47               	movwf	_Nec_code+3,c
  9284                           
  9285                           ;Interrupt.c: 72: Nec_state = 1;
  9286  000782  0E01               	movlw	1
  9287  000784  6E51               	movwf	_Nec_state,c
  9288  000786  D075               	goto	i2l2163
  9289                           
  9290                           ;Interrupt.c: 74: return;
  9291                           
  9292                           ;Interrupt.c: 73: INTCON2bits.INTEDG0 = 1;
  9293  000788  D087               	goto	i2l382
  9294  00078A                     i2l2111:
  9295                           
  9296                           ;Interrupt.c: 78: {
  9297                           ;Interrupt.c: 79: if(Time_Elapsed > 8500 && Time_Elapsed < 9500) Nec_state = 2;
  9298  00078A  0E35               	movlw	53
  9299  00078C  5C48               	subwf	_Time_Elapsed,w,c
  9300  00078E  0E21               	movlw	33
  9301  000790  5849               	subwfb	_Time_Elapsed+1,w,c
  9302  000792  A0D8               	btfss	status,0,c
  9303  000794  D009               	goto	i2l2117
  9304  000796  0E1C               	movlw	28
  9305  000798  5C48               	subwf	_Time_Elapsed,w,c
  9306  00079A  0E25               	movlw	37
  9307  00079C  5849               	subwfb	_Time_Elapsed+1,w,c
  9308  00079E  B0D8               	btfsc	status,0,c
  9309  0007A0  D003               	goto	i2l2117
  9310  0007A2  0E02               	movlw	2
  9311  0007A4  6E51               	movwf	_Nec_state,c
  9312  0007A6  D02A               	goto	i2l2143
  9313  0007A8                     i2l2117:
  9314                           
  9315                           ;Interrupt.c: 80: else force_nec_state0();
  9316  0007A8  ECEB  F00C         	call	_force_nec_state0	;wreg free
  9317  0007AC  D027               	goto	i2l2143
  9318  0007AE  D026               	goto	i2l2143
  9319                           
  9320                           ;Interrupt.c: 82: return;
  9321                           
  9322                           ;Interrupt.c: 81: INTCON2bits.INTEDG0 = 0;
  9323  0007B0  D073               	goto	i2l382
  9324  0007B2                     i2l2123:
  9325                           
  9326                           ;Interrupt.c: 86: {
  9327                           ;Interrupt.c: 87: if(Time_Elapsed > 4000 && Time_Elapsed < 5000) Nec_state = 3;
  9328  0007B2  0EA1               	movlw	161
  9329  0007B4  5C48               	subwf	_Time_Elapsed,w,c
  9330  0007B6  0E0F               	movlw	15
  9331  0007B8  5849               	subwfb	_Time_Elapsed+1,w,c
  9332  0007BA  A0D8               	btfss	status,0,c
  9333  0007BC  D009               	goto	i2l2129
  9334  0007BE  0E88               	movlw	136
  9335  0007C0  5C48               	subwf	_Time_Elapsed,w,c
  9336  0007C2  0E13               	movlw	19
  9337  0007C4  5849               	subwfb	_Time_Elapsed+1,w,c
  9338  0007C6  B0D8               	btfsc	status,0,c
  9339  0007C8  D003               	goto	i2l2129
  9340  0007CA  0E03               	movlw	3
  9341  0007CC  6E51               	movwf	_Nec_state,c
  9342  0007CE  D051               	goto	i2l2163
  9343  0007D0                     i2l2129:
  9344                           
  9345                           ;Interrupt.c: 88: else force_nec_state0();
  9346  0007D0  ECEB  F00C         	call	_force_nec_state0	;wreg free
  9347  0007D4  D04E               	goto	i2l2163
  9348  0007D6  D04D               	goto	i2l2163
  9349                           
  9350                           ;Interrupt.c: 90: return;
  9351                           
  9352                           ;Interrupt.c: 89: INTCON2bits.INTEDG0 = 1;
  9353  0007D8  D05F               	goto	i2l382
  9354  0007DA                     i2l2135:
  9355                           
  9356                           ;Interrupt.c: 94: {
  9357                           ;Interrupt.c: 95: if(Time_Elapsed >= 400 && Time_Elapsed <= 700) Nec_state = 4;
  9358  0007DA  0E90               	movlw	144
  9359  0007DC  5C48               	subwf	_Time_Elapsed,w,c
  9360  0007DE  0E01               	movlw	1
  9361  0007E0  5849               	subwfb	_Time_Elapsed+1,w,c
  9362  0007E2  A0D8               	btfss	status,0,c
  9363  0007E4  D008               	goto	i2l2141
  9364  0007E6  0EBD               	movlw	189
  9365  0007E8  5C48               	subwf	_Time_Elapsed,w,c
  9366  0007EA  0E02               	movlw	2
  9367  0007EC  5849               	subwfb	_Time_Elapsed+1,w,c
  9368  0007EE  B0D8               	btfsc	status,0,c
  9369  0007F0  D002               	goto	i2l2141
  9370  0007F2  0E04               	movlw	4
  9371  0007F4  D7D7               	goto	L2
  9372  0007F6                     i2l2141:
  9373                           
  9374                           ;Interrupt.c: 96: else force_nec_state0();
  9375  0007F6  ECEB  F00C         	call	_force_nec_state0	;wreg free
  9376  0007FA  D000               	goto	i2l2143
  9377  0007FC                     i2l2143:
  9378                           
  9379                           ;Interrupt.c: 97: INTCON2bits.INTEDG0 = 0;
  9380  0007FC  9CF1               	bcf	intcon2,6,c	;volatile
  9381                           
  9382                           ;Interrupt.c: 98: return;
  9383  0007FE  D04C               	goto	i2l382
  9384  000800                     i2l2147:
  9385                           
  9386                           ;Interrupt.c: 102: {
  9387                           ;Interrupt.c: 103: if(Time_Elapsed > 400 && Time_Elapsed < 1800)
  9388  000800  0E91               	movlw	145
  9389  000802  5C48               	subwf	_Time_Elapsed,w,c
  9390  000804  0E01               	movlw	1
  9391  000806  5849               	subwfb	_Time_Elapsed+1,w,c
  9392  000808  A0D8               	btfss	status,0,c
  9393  00080A  D030               	goto	i2l2161
  9394  00080C  0E08               	movlw	8
  9395  00080E  5C48               	subwf	_Time_Elapsed,w,c
  9396  000810  0E07               	movlw	7
  9397  000812  5849               	subwfb	_Time_Elapsed+1,w,c
  9398  000814  B0D8               	btfsc	status,0,c
  9399  000816  D02A               	goto	i2l2161
  9400                           
  9401                           ;Interrupt.c: 104: {
  9402                           ;Interrupt.c: 105: Nec_code = Nec_code << 1;
  9403  000818  90D8               	bcf	status,0,c
  9404  00081A  3444               	rlcf	_Nec_code,w,c
  9405  00081C  6E44               	movwf	_Nec_code,c
  9406  00081E  3445               	rlcf	_Nec_code+1,w,c
  9407  000820  6E45               	movwf	_Nec_code+1,c
  9408  000822  3446               	rlcf	_Nec_code+2,w,c
  9409  000824  6E46               	movwf	_Nec_code+2,c
  9410  000826  3447               	rlcf	_Nec_code+3,w,c
  9411  000828  6E47               	movwf	_Nec_code+3,c
  9412                           
  9413                           ;Interrupt.c: 106: if(Time_Elapsed > 1000)
  9414  00082A  0EE9               	movlw	233
  9415  00082C  5C48               	subwf	_Time_Elapsed,w,c
  9416  00082E  0E03               	movlw	3
  9417  000830  5849               	subwfb	_Time_Elapsed+1,w,c
  9418  000832  A0D8               	btfss	status,0,c
  9419  000834  D00C               	goto	i2l394
  9420                           
  9421                           ;Interrupt.c: 107: {
  9422                           ;Interrupt.c: 108: Nec_code = Nec_code +1;
  9423  000836  0E01               	movlw	1
  9424  000838  2444               	addwf	_Nec_code,w,c
  9425  00083A  6E44               	movwf	_Nec_code,c
  9426  00083C  0E00               	movlw	0
  9427  00083E  2045               	addwfc	_Nec_code+1,w,c
  9428  000840  6E45               	movwf	_Nec_code+1,c
  9429  000842  0E00               	movlw	0
  9430  000844  2046               	addwfc	_Nec_code+2,w,c
  9431  000846  6E46               	movwf	_Nec_code+2,c
  9432  000848  0E00               	movlw	0
  9433  00084A  2047               	addwfc	_Nec_code+3,w,c
  9434  00084C  6E47               	movwf	_Nec_code+3,c
  9435  00084E                     i2l394:
  9436                           
  9437                           ;Interrupt.c: 109: }
  9438                           ;Interrupt.c: 110: bit_count = bit_count + 1;
  9439  00084E  2858               	incf	_bit_count,w,c
  9440  000850  6E58               	movwf	_bit_count,c
  9441                           
  9442                           ;Interrupt.c: 111: if (bit_count > 31)
  9443  000852  0E1F               	movlw	31
  9444  000854  6458               	cpfsgt	_bit_count,c
  9445  000856  D7B9               	goto	L3
  9446                           
  9447                           ;Interrupt.c: 112: {
  9448                           ;Interrupt.c: 113: nec_ok = 1;
  9449  000858  0E00               	movlw	0
  9450  00085A  6E4D               	movwf	_nec_ok+1,c
  9451  00085C  0E01               	movlw	1
  9452  00085E  6E4C               	movwf	_nec_ok,c
  9453                           
  9454                           ;Interrupt.c: 114: Nec_code1 = (char) ((Nec_code >> 8));
  9455  000860  C045  F050         	movff	_Nec_code+1,_Nec_code1
  9456                           
  9457                           ;Interrupt.c: 115: INTCONbits.INT0IE =0;
  9458  000864  98F2               	bcf	intcon,4,c	;volatile
  9459                           
  9460                           ;Interrupt.c: 116: Nec_state = 0;
  9461  000866  0E00               	movlw	0
  9462  000868  6E51               	movwf	_Nec_state,c
  9463  00086A  D7AF               	goto	L3
  9464  00086C                     i2l2161:
  9465                           
  9466                           ;Interrupt.c: 120: else force_nec_state0();
  9467  00086C  ECEB  F00C         	call	_force_nec_state0	;wreg free
  9468  000870  D000               	goto	i2l2163
  9469  000872                     i2l2163:
  9470                           
  9471                           ;Interrupt.c: 121: INTCON2bits.INTEDG0 = 1;
  9472  000872  8CF1               	bsf	intcon2,6,c	;volatile
  9473                           
  9474                           ;Interrupt.c: 123: }
  9475                           ;Interrupt.c: 124: }
  9476                           
  9477                           ;Interrupt.c: 122: return;
  9478  000874  D011               	goto	i2l382
  9479  000876                     i2l2169:
  9480  000876  5051               	movf	_Nec_state,w,c
  9481                           
  9482                           ; Switch size 1, requested type "space"
  9483                           ; Number of cases is 5, Range of values is 0 to 4
  9484                           ; switch strategies available:
  9485                           ; Name         Instructions Cycles
  9486                           ; simple_byte           16     9 (average)
  9487                           ;	Chosen strategy is simple_byte
  9488  000878  0A00               	xorlw	0	; case 0
  9489  00087A  B4D8               	btfsc	status,2,c
  9490  00087C  D770               	goto	i2l2101
  9491  00087E  0A01               	xorlw	1	; case 1
  9492  000880  B4D8               	btfsc	status,2,c
  9493  000882  D783               	goto	i2l2111
  9494  000884  0A03               	xorlw	3	; case 2
  9495  000886  B4D8               	btfsc	status,2,c
  9496  000888  D794               	goto	i2l2123
  9497  00088A  0A01               	xorlw	1	; case 3
  9498  00088C  B4D8               	btfsc	status,2,c
  9499  00088E  D7A5               	goto	i2l2135
  9500  000890  0A07               	xorlw	7	; case 4
  9501  000892  B4D8               	btfsc	status,2,c
  9502  000894  D7B5               	goto	i2l2147
  9503  000896  D000               	goto	i2l382
  9504  000898                     i2l382:
  9505  000898  0012               	return		;funcret
  9506  00089A                     __end_of_INT0_isr:
  9507                           	opt stack 0
  9508                           pclatu	equ	0xFFB
  9509                           pclath	equ	0xFFA
  9510                           tblptru	equ	0xFF8
  9511                           tblptrh	equ	0xFF7
  9512                           tblptrl	equ	0xFF6
  9513                           tablat	equ	0xFF5
  9514                           prodh	equ	0xFF4
  9515                           prodl	equ	0xFF3
  9516                           intcon	equ	0xFF2
  9517                           intcon2	equ	0xFF1
  9518                           postinc0	equ	0xFEE
  9519                           fsr0h	equ	0xFEA
  9520                           fsr0l	equ	0xFE9
  9521                           wreg	equ	0xFE8
  9522                           postdec1	equ	0xFE5
  9523                           fsr1h	equ	0xFE2
  9524                           fsr1l	equ	0xFE1
  9525                           indf2	equ	0xFDF
  9526                           postinc2	equ	0xFDE
  9527                           postdec2	equ	0xFDD
  9528                           fsr2h	equ	0xFDA
  9529                           fsr2l	equ	0xFD9
  9530                           status	equ	0xFD8
  9531                           
  9532 ;; *************** function _force_nec_state0 *****************
  9533 ;; Defined at:
  9534 ;;		line 44 in file "Interrupt.c"
  9535 ;; Parameters:    Size  Location     Type
  9536 ;;		None
  9537 ;; Auto vars:     Size  Location     Type
  9538 ;;		None
  9539 ;; Return value:  Size  Location     Type
  9540 ;;		None               void
  9541 ;; Registers used:
  9542 ;;		wreg, status,2
  9543 ;; Tracked objects:
  9544 ;;		On entry : 0/0
  9545 ;;		On exit  : 0/0
  9546 ;;		Unchanged: 0/0
  9547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9551 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9552 ;;Total ram usage:        0 bytes
  9553 ;; Hardware stack levels used:    1
  9554 ;; This function calls:
  9555 ;;		Nothing
  9556 ;; This function is called by:
  9557 ;;		_INT0_isr
  9558 ;; This function uses a non-reentrant model
  9559 ;;
  9560                           
  9561                           	psect	text59
  9562  0019D6                     __ptext59:
  9563                           	opt stack 0
  9564  0019D6                     _force_nec_state0:
  9565                           	opt stack 19
  9566                           
  9567                           ;Interrupt.c: 46: Nec_state=0;
  9568                           
  9569                           ;incstack = 0
  9570  0019D6  0E00               	movlw	0
  9571  0019D8  6E51               	movwf	_Nec_state,c
  9572                           
  9573                           ;Interrupt.c: 47: T1CONbits.TMR1ON = 0;
  9574  0019DA  90CD               	bcf	4045,0,c	;volatile
  9575  0019DC  0012               	return		;funcret
  9576  0019DE                     __end_of_force_nec_state0:
  9577                           	opt stack 0
  9578                           pclatu	equ	0xFFB
  9579                           pclath	equ	0xFFA
  9580                           tblptru	equ	0xFF8
  9581                           tblptrh	equ	0xFF7
  9582                           tblptrl	equ	0xFF6
  9583                           tablat	equ	0xFF5
  9584                           prodh	equ	0xFF4
  9585                           prodl	equ	0xFF3
  9586                           intcon	equ	0xFF2
  9587                           intcon2	equ	0xFF1
  9588                           postinc0	equ	0xFEE
  9589                           fsr0h	equ	0xFEA
  9590                           fsr0l	equ	0xFE9
  9591                           wreg	equ	0xFE8
  9592                           postdec1	equ	0xFE5
  9593                           fsr1h	equ	0xFE2
  9594                           fsr1l	equ	0xFE1
  9595                           indf2	equ	0xFDF
  9596                           postinc2	equ	0xFDE
  9597                           postdec2	equ	0xFDD
  9598                           fsr2h	equ	0xFDA
  9599                           fsr2l	equ	0xFD9
  9600                           status	equ	0xFD8
  9601                           pclatu	equ	0xFFB
  9602                           pclath	equ	0xFFA
  9603                           tblptru	equ	0xFF8
  9604                           tblptrh	equ	0xFF7
  9605                           tblptrl	equ	0xFF6
  9606                           tablat	equ	0xFF5
  9607                           prodh	equ	0xFF4
  9608                           prodl	equ	0xFF3
  9609                           intcon	equ	0xFF2
  9610                           intcon2	equ	0xFF1
  9611                           postinc0	equ	0xFEE
  9612                           fsr0h	equ	0xFEA
  9613                           fsr0l	equ	0xFE9
  9614                           wreg	equ	0xFE8
  9615                           postdec1	equ	0xFE5
  9616                           fsr1h	equ	0xFE2
  9617                           fsr1l	equ	0xFE1
  9618                           indf2	equ	0xFDF
  9619                           postinc2	equ	0xFDE
  9620                           postdec2	equ	0xFDD
  9621                           fsr2h	equ	0xFDA
  9622                           fsr2l	equ	0xFD9
  9623                           status	equ	0xFD8
  9624                           
  9625                           	psect	rparam
  9626  0000                     pclatu	equ	0xFFB
  9627                           pclath	equ	0xFFA
  9628                           tblptru	equ	0xFF8
  9629                           tblptrh	equ	0xFF7
  9630                           tblptrl	equ	0xFF6
  9631                           tablat	equ	0xFF5
  9632                           prodh	equ	0xFF4
  9633                           prodl	equ	0xFF3
  9634                           intcon	equ	0xFF2
  9635                           intcon2	equ	0xFF1
  9636                           postinc0	equ	0xFEE
  9637                           fsr0h	equ	0xFEA
  9638                           fsr0l	equ	0xFE9
  9639                           wreg	equ	0xFE8
  9640                           postdec1	equ	0xFE5
  9641                           fsr1h	equ	0xFE2
  9642                           fsr1l	equ	0xFE1
  9643                           indf2	equ	0xFDF
  9644                           postinc2	equ	0xFDE
  9645                           postdec2	equ	0xFDD
  9646                           fsr2h	equ	0xFDA
  9647                           fsr2l	equ	0xFD9
  9648                           status	equ	0xFD8


Data Sizes:
    Strings     135
    Constant    493
    Data        212
    BSS         72
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     67     110
    BANK0           128     12     127
    BANK1           256      0     126
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_5(CODE[8]), STR_4(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 43
		 -> STR_3(CODE[17]), STR_2(CODE[43]), STR_1(CODE[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 


Critical Paths under _main in COMRAM

    _main->_drawtext
    _main->_fillCircle
    _printf->___lwmod
    ___lwmod->___lwdiv
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    ___awdiv->___wmul
    _init_UART->_OpenUSART
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS3231_Setup_Time->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_drawtext
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   56670
                                             66 COMRAM     1     1      0
                                              7 BANK0      5     5      0
                    _Activate_Buzzer
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _DS3231_Setup_Time
                  _Deactivate_Buzzer
                            _Do_Init
                       _Wait_One_Sec
                            ___awdiv
                             ___wmul
                         _drawCircle
                           _drawtext
                         _fillCircle
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    3521
                                             28 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     501
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _fillCircle                                           8     0      8    8344
                                             58 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (2) _fillCircleHelper                                    24    12     12    4703
                                             34 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (1) _drawCircle                                          20    12      8    6484
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     575
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Wait_One_Sec                                         2     2      0      68
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0   22624
                        _DS1621_Init
                           _I2C_Init
                  _Initialize_Screen
                     _init_INTERRUPT
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     375
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Initialize_Screen                                    0     0      0   21503
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _strcpy                                               6     2      4     369
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (4) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (1) _drawtext                                            17     9      8   12656
                                             56 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _drawChar                                            11     4      7   10774
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (3) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _TFT_GreenTab_Initialize                              0     0      0    4364
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd3                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd1                                                0     0      0    2052
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _LCD_Reset                                            0     0      0    1922
                           _delay_ms
 ---------------------------------------------------------------------------------
 (5) _delay_ms                                             6     4      2    1922
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     882
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     681
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS3231_Setup_Time                                    2     2      0     201
                                             18 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     2     2      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     464
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0     133
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0     198
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _chkisr                                             14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (11) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (12) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Activate_Buzzer
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Setup_Time
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Deactivate_Buzzer
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _Initialize_Screen
       _LCD_Reset
         _delay_ms
           ___wmul
       _TFT_GreenTab_Initialize
         _Rcmd1
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd2red
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd3
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _init_INTERRUPT
     _init_UART
       _OpenUSART
   _Wait_One_Sec
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _drawCircle
     _drawPixel
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_data
         _spiwrite
   _drawtext
     _drawChar
       ___wmul
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _strlen
   _fillCircle
     _drawFastVLine
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _spiwrite
     _fillCircleHelper
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      7E       7       49.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      C      7F       5       99.2%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     43      6E       1       86.6%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     16B      34        0.0%
DATA                 0      0     16B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Nov 10 17:02:22 2022

                      drawCircle@f 002A                        drawCircle@r 0020  
                      drawCircle@x 002C                        drawCircle@y 002E  
                                _i 005E                 __size_of_I2C_Start 0012  
                      _SSPSTATbits 000FC7                 __size_of_I2C_Write 003E  
                     drawCircle@x0 001C                       drawCircle@y0 001E  
                               _D1 0080                                 _D2 0095  
                               _D3 00AA                                 l35 14B6  
                               l45 18FA                                 l95 10BA  
                               l89 17B4                       ___awdiv@sign 001C  
              ___wmul@multiplicand 0013                                l111 09EE  
                              l120 0944                                l113 08C8  
                              l151 0EEA                                l152 0F0C  
                              l242 16B8                                l322 1722  
                              l148 0F0E                                l149 0E7A  
                              l239 15E8                                l159 064A  
                              l177 0A5E                                l610 011C  
                              l542 197E                                l553 182A  
                              l671 125C                                l647 0374  
                              l680 129E                                l683 1806  
                              l675 1276                                l676 1278  
                              l677 1282                                l678 1284  
                              l876 0FA4                                _PR2 000FCB  
                              _day 005A                  _Deactivate_Buzzer 19BE  
             __size_of_I2C_ReStart 0016                                _dow 005B  
                              _nbr 004A                                _txt 004E  
                              prod 000FF3                                wreg 000FE8  
               ?_Deactivate_Buzzer 0001                    ??_fillRectangle 001D  
                     __CFG_LVP$OFF 000000            _TFT_GreenTab_Initialize 17B6  
                     __CFG_WDT$OFF 000000                               l1114 184C  
                   drawFastVLine@h 0019                               l1206 13BC  
                             l1216 154E                               l1245 166A  
                   drawFastVLine@x 0022                               l4101 1044  
                   drawFastVLine@y 0018                               l4105 107C  
                             l5001 028C                               l4115 10A2  
                             l4117 10B0                               l4301 09BA  
                             l5005 02A0                               l5021 0358  
                             l4143 1796                               l4151 1562  
                             l4303 09E2                               l5007 02A8  
                             l5015 0332                               l5009 02EC  
                             l5017 0344                               l4155 157E  
                             l4315 1638                               l5051 0F58  
                             l5043 0F38                               l5019 034C  
                             l4309 09EA                               l4317 163E  
                             l4333 0EB2                               l4501 124C  
                             l5061 0F7E                               l5053 0F60  
                             l5037 0F26                               l4271 08C4  
                             l4263 08AA                               l4327 0E44  
                             l4281 0904                               l4273 08CC  
                             l4441 0D24                               l4433 0CD2  
                             l4417 0C64                               l4353 0EF8  
                             l4345 0EE0                               l4505 1254  
                             l5049 0F4E                               l5065 0F8A  
                             l4611 15E4                               l4371 16C2  
                             l4283 0938                               l4267 08B6  
                             l4443 0D2C                               l4605 15D2  
                             l4373 16C8                               l4365 16B0  
                             l4293 0966                               l4285 093C  
                             l4277 08D4                               l4429 0CB4  
                             l4349 0EEE                               l4517 126E  
                             l4509 1260                               l5069 0F9A  
                             l4701 151A                               l4383 16DA  
                             l4295 098E                               l4359 0F08  
                             l4543 172E                               l4703 1524  
                             l4609 15DE                               l4545 1738  
                             l4705 152C                               l5361 0420  
                             l5347 037C                               l4733 0630  
                             l4573 0AC0                               l4557 0A44  
                             l4709 1542                               l4901 0044  
   I2C_Write_Cmd_Write_Data@Device 0015                               l4591 15B4  
                             l4671 1844                               l4911 0082  
                             l5391 04A4                               l5383 047C  
                             l5375 0454                               l4497 1242  
                             l4761 0720                               l4577 0B12  
                             l4681 1380                               l4905 004E  
                             l4587 15AC                               l4683 138A  
                             l4923 00EE                               l4907 0064  
                             l5387 049A                               l5379 0462  
                             l4597 15C2                               l4861 1810  
                             l4693 13B0                               l4685 1392  
                             l4941 0168                               l4599 15CA  
                             l4935 014A                               l4919 00E6  
                             l4865 1824                               l4953 019E  
                             l4945 0174                               l4963 01D2  
                             l4955 01A2                               l4971 01EA  
                             l4939 0164                               l4981 022A  
                             l4949 0198                               l4991 0254  
                             l4983 0234                               l4959 01AE  
                             l4895 0026                               l4977 0206  
                             l4969 01D8                               l4995 026C  
                             l4899 0036                               l4997 0274  
                             l4989 024C                               STR_1 FFA3  
                             STR_2 FF78                               STR_3 FFE6  
                             STR_4 FFC1                               STR_5 FFF7  
                             STR_6 FFD5                               u3020 0C8E  
                             u2920 0E72                               u2690 1072  
                             u2850 099C                               u2930 0EA8  
                             u3927 198C                               _RBPU 007F8F  
                             _TRMT 007D61                ??_Deactivate_Buzzer 0011  
                             _main 0376                               _font FD8B  
                             _hour 005D                   __end_of_I2C_Init 19AA  
                 __end_of_I2C_Read 15EA                               _year 006C  
                             fsr0h 000FEA                               _txt1 012A  
                             fsr1h 000FE2                               fsr0l 000FE9  
                             fsr2h 000FDA                               fsr1l 000FE1  
                             indf2 000FDF                               fsr2l 000FD9  
                             _wrap 006E                   __end_of_I2C_Stop 1924  
                             pclat 000FFA                 __size_of_LCD_Reset 0012  
                             prodh 000FF4                               prodl 000FF3  
                             start 0018        __size_of_I2C_Write_Cmd_Only 001A  
                  __end_of_Do_Init 162E                    ??_drawFastVLine 001C  
                  __end_of_i2cNack 19B4                       ___param_bank 000010  
                      ?_TIMER1_isr 0001                   __end_of_INT0_isr 089A  
        __end_of_Deactivate_Buzzer 19C6                    drawFastVLine@hi 0020  
                  drawFastVLine@lo 0021                              ?_main 0001  
                  __end_of___awdiv 0FA6                    drawCircle@ddF_x 0026  
                  drawCircle@ddF_y 0028                    ___awdiv@divisor 0019  
                            _T1CON 000FCD                              _T2CON 000FCA  
                            _T3CON 000FB1                    __end_of___lwdiv 13C6  
                  __end_of___lwmod 1558                              i2l370 117C  
                            i2l382 0898                              i2l394 084E  
                  ___awdiv@counter 001B                    drawCircle@color 0022  
                            _RCSTA 000FAB                              _TMR1H 000FCF  
                            _TMR3H 000FB3                              _TMR1L 000FCE  
                            _TMR3L 000FB2                              _SPBRG 000FAF  
                            _PORTD 000F83                              _PORTE 000F84  
                            _TRISA 000F92                              _TRISB 000F93  
                            _TRISC 000F94                              _TRISD 000F95  
                            _TRISE 000F96                              _TXREG 000FAD  
                            _TXSTA 000FAC                              _Rcmd1 0B28  
                            _Rcmd3 0D42                         _i2cHighSda 19CE  
                       _i2cHighScl 1988                    __end_of_dpowers FF70  
                            _color 0100                              _font2 FE8A  
            fillCircleHelper@ddF_x 0031              fillCircleHelper@ddF_y 0033  
                            _found 005C                    __end_of_isdigit 184E  
                            _month 0060              fillCircleHelper@delta 002B  
                            _putch 197A              fillCircleHelper@color 002D  
                            main@i 00FC                  __end_of_I2C_Start 1936  
                __end_of_I2C_Write 16E8                     __CFG_BOREN$OFF 000000  
                            tablat 000FF5                              status 000FD8  
                ?_DS1621_Read_Temp 0014                    write_data@data_ 0013  
               ??_DS1621_Read_Temp 0016                    __initialization 11B6  
                     __end_of_main 0588                       __end_of_font FE8A  
                 __end_of_Rcmd2red 16AA                             ??_main 0043  
                    __activetblptr 000002                  ?_DS3231_Read_Time 0001  
                __end_of_LCD_Reset 1912          ??_TFT_GreenTab_Initialize 001D  
               ??_DS3231_Read_Time 0014                             ?_Rcmd1 0001  
                           ?_Rcmd3 0001            __size_of_init_INTERRUPT 0030  
                        I2C_Init@c 0011                          I2C_Read@n 0012  
                           _ADCON1 000FC1                DS1621_Read_Temp@Cmd 0016  
                           _CCPR2L 000FBB                   ___awdiv@dividend 0017  
               __size_of_i2cLowSda 000A                 __size_of_i2cLowScl 0008  
                           ?_putch 0001                             i2l2101 075E  
                           i2l2111 078A                             i2l2123 07B2  
                           i2l2141 07F6                             i2l2117 07A8  
                           i2l2143 07FC                             i2l2135 07DA  
                           i2l2161 086C                             i2l2129 07D0  
                           i2l2163 0872                             i2l2147 0800  
                           i2l2169 0876                             i2l2661 1172  
                        ??_Do_Init 0043                             _OSCCON 000FD3  
              __size_of_TIMER1_isr 000C                             _SPBRGH 000FB0  
                           _SSPBUF 000FC9                          ??_i2cNack 0011  
                 _force_nec_state0 19D6                   __end_of_delay_ms 14BE  
                           _i2cAck 1936                         _TempSecond 0052  
                 __end_of_fillRect 15A2                   __end_of_drawChar 09F0  
               __size_of_OpenUSART 0070           __size_of_Activate_Buzzer 0012  
                           ___wmul 17E0                          ??___awdiv 001B  
        __size_of_fillCircleHelper 0138                   __end_of_drawtext 0D42  
                           _chkisr 0008                          ??___lwdiv 0015  
                           _array1 00BF                          ??___lwmod 001C  
                           _buffer 00D4                             _nec_ok 004C  
                           clear_0 11BC                             clear_1 11C8  
                 ___awdiv@quotient 001D                             _minute 005F  
                           _second 0062            DS3231_Setup_Time@Device 0013  
       __size_of_Deactivate_Buzzer 0008                             _printf 001C  
                     drawtext@size 0040                             _strcpy 1724  
                           _strlen 162E                       __pdataCOMRAM 006D  
                        ??_isdigit 0011                          ?_I2C_Init 0011  
                        ?_I2C_Read 0001                          ?_I2C_Stop 0001  
                     __mediumconst FD8A                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
 __end_of_I2C_Write_Cmd_Write_Data 186E                        ?_i2cHighSda 0001  
                      ?_i2cHighScl 0001                             putch@c 0011  
                 __end_of_spiwrite 1900                         __accesstop 0080  
          __end_of__initialization 1226                          ?_INT0_isr 0001  
               _setup_alarm_minute 0064                 _setup_alarm_second 0065  
                    ___rparam_used 000001                      __end_of_Rcmd1 0C38  
                    __end_of_Rcmd3 0E34                     __pcstackCOMRAM 0001  
                     __pidataBANK0 13C6                       __pidataBANK1 10BC  
                    __end_of_font2 FF66                  __end_of_i2cLowSda 19BE  
                __end_of_i2cLowScl 19CE                      __end_of_putch 1988  
                   drawPixel@color 0019             __size_of_write_command 0010  
                       ??_I2C_Init 0015                         ??_I2C_Read 0011  
                     _alarm_minute 0056                       _alarm_second 0057  
                       ??_I2C_Stop 0011         fillCircleHelper@cornername 0029  
                          ??_Rcmd1 001D                            ??_Rcmd3 001D  
               __size_of_drawPixel 0030                  __end_of_OpenUSART 12A0  
                          ??_putch 0011                         __pbssBANK0 00D4  
                 _setup_alarm_hour 0063                      ??_DS1621_Init 0016  
                        ?_Rcmd2red 0001                 __size_of_init_UART 0014  
                  spiwrite@spidata 0012                         _alarm_date 0054  
                       ??_INT0_isr 0001                         _alarm_hour 0055  
                    ?_Wait_One_Sec 0001                            ?_i2cAck 0001  
               __CFG_CCP2MX$PORTBE 000000                     I2C_Read@inByte 0013  
                          ?___wmul 0011                __size_of_i2cHighSda 0008  
              __size_of_i2cHighScl 000C                            ?_chkisr 0001  
           __size_of_setAddrWindow 004E   I2C_Write_Cmd_Write_Data@Data_Out 0014  
                          _CCP2CON 000FBA                       ??_TIMER1_isr 0001  
                    ??_I2C_ReStart 0011                         _fillCircle 141A  
                       I2C_Write@n 0012                            ?_printf 001D  
                          ?_strcpy 0011                            ?_strlen 0011  
                ??_Activate_Buzzer 0011                         _fillScreen 188C  
                       _drawCircle 0588                     _init_INTERRUPT 1756  
                        ?_delay_ms 0017                          ?_fillRect 0023  
                        ?_drawChar 002E                            _SSPCON1 000FC6  
                          _SSPSTAT 000FC7              __end_of_fillRectangle 0F10  
                        ?_drawtext 0039                  _DS3231_Setup_Time 12A0  
                          _Do_Init 15EA           _I2C_Write_Cmd_Write_Data 184E  
       __end_of_I2C_Write_Cmd_Only 18C2                         ??_Rcmd2red 0014  
           DS1621_Read_Temp@Device 0018                     ??_Wait_One_Sec 0011  
                          _i2cNack 19AA                 __end_of_TIMER1_isr 19A0  
               ?_DS3231_Setup_Time 0001                      _write_command 196A  
                        _I2C_Start 1924                          _I2C_Write 16AA  
                  __size_of_i2cAck 0012                            __Hparam 0000  
                          __Lparam 0000                __end_of_DS1621_Init 188C  
                __end_of_drawPixel 17B6                ??_DS3231_Setup_Time 0013  
            __end_of_drawFastVLine 10BC                   _fillCircleHelper 09F0  
                          ___awdiv 0F10                    __size_of___wmul 0028  
                          ___lwdiv 136A                            ___lwmod 150C  
                  __size_of_chkisr 11AE                          ?_spiwrite 0001  
                          __pcinit 11B6                            __ramtop 1000  
                          __ptext0 0376                            __ptext1 001C  
                          __ptext2 197A                            __ptext3 182C  
                          __ptext4 150C                            __ptext5 136A  
        __size_of_DS1621_Read_Temp 003C                            __ptext6 141A  
                          __ptext7 09F0                            __ptext8 0588  
                          __ptext9 0F10                    __size_of_printf 035A  
                __end_of_init_UART 18EC             __end_of_init_INTERRUPT 1786  
                  __size_of_strcpy 0032                    __size_of_strlen 003E  
                __end_of_hexpowers FF78           __end_of_force_nec_state0 19DE  
                        _T1CONbits 000FCD           DS3231_Setup_Time@Address 0014  
                          _dpowers FF66                            _isdigit 182C  
                        _T3CONbits 000FB1                         ??_delay_ms 0019  
              __end_of_I2C_ReStart 18D8                      drawtext@_text 003A  
                    drawtext@color 003C                         ??_fillRect 0028  
        __end_of_DS3231_Setup_Time 1306                         ??_drawChar 0035  
                        _LCD_Reset 1900                      _setAddrWindow 14BE  
                   __pintcode_body 113A                      Wait_One_Sec@i 0011  
                       delay_ms@ms 0017               end_of_initialization 1226  
                       ??_drawtext 0041                     ?_write_command 0001  
                    __Lmediumconst FD8A          __size_of_DS3231_Read_Time 0064  
                          int_func 113A            DS3231_Read_Time@Address 0014  
                       ?_I2C_Start 0001                         ?_I2C_Write 0001  
                       _tempSecond 006D                          _RCSTAbits 000FAB  
                          printf@c 0038                            printf@f 001D  
                          postdec1 000FE5                            postdec2 000FDD  
                          postinc0 000FEE                            postinc2 000FDE  
                       ??_spiwrite 0011                            strlen@s 0011  
                  fillCircle@color 0041        I2C_Write_Cmd_Write_Data@Cmd 0013  
                      ?_fillCircle 003B                          _PORTAbits 000F80  
                 drawtext@cursor_x 00F9                   drawtext@cursor_y 00F8  
                        _PORTBbits 000F81                          _PORTCbits 000F82  
                 I2C_Write@outByte 0011                    ?_init_INTERRUPT 0001  
                      ?_fillScreen 0024                         _setup_hour 0067  
                       _setup_year 006B                        ?_drawCircle 001C  
                       drawChar@bg 0032                          _TRISAbits 000F92  
                        _TRISCbits 000F94                       ??_i2cHighSda 0011  
                     ??_i2cHighScl 0011                  __size_of_I2C_Init 000A  
                __size_of_I2C_Read 0048                  __size_of_I2C_Stop 0012  
                   ?_setAddrWindow 0014                         ?_LCD_Reset 0001  
                 drawtext@textsize 00F4                         drawPixel@x 001B  
                       drawPixel@y 0018                        _DS1621_Init 186E  
                      printf@width 0036                          _TXSTAbits 000FAC  
                __size_of_INT0_isr 0164                     __end_of_i2cAck 1948  
         DS1621_Read_Temp@Data_Ret 0017                 __end_of_i2cHighSda 19D6  
               __end_of_i2cHighScl 1994                     __end_of___wmul 1808  
                    delay_ms@count 001B                         _write_data 195A  
                    __pidataCOMRAM 19DE                     __end_of_chkisr 11B6  
         ?_TFT_GreenTab_Initialize 0001                        _I2C_ReStart 18C2  
                       drawtext@bg 003E                          _Nec_code1 0050  
                        _i2cLowSda 19B4                          _i2cLowScl 19C6  
             __end_of_Wait_One_Sec 182C                     __end_of_printf 0376  
                   __end_of_strcpy 1756                     __end_of_strlen 166C  
                        _Nec_state 0051                start_initialization 11B6  
       __size_of_DS3231_Setup_Time 0066                    ??_write_command 0013  
                        _OpenUSART 1230                __size_of_fillCircle 0052  
                 __CFG_OSC$INTIO67 000000                        ??_I2C_Start 0011  
                      ??_I2C_Write 0011                           ??_i2cAck 0011  
                __size_of_Rcmd2red 003E                __size_of_fillScreen 001C  
              __size_of_drawCircle 01AE                    _Activate_Buzzer 1948  
                         ??___wmul 0015                           ??_chkisr 0003  
                      __pdataBANK0 0080                        __pdataBANK1 0100  
                  setAddrWindow@x0 0017                    setAddrWindow@x1 0015  
                  setAddrWindow@y0 0014                    setAddrWindow@y1 0016  
                         ??_printf 002B                   _DS1621_Read_Temp 16E8  
                         ??_strcpy 0015                           ??_strlen 0013  
                       ?_i2cLowSda 0001                         ?_i2cLowScl 0001  
                      __pbssCOMRAM 0044         ??_I2C_Write_Cmd_Write_Data 0015  
                  ??_setAddrWindow 0017                      __pcstackBANK0 00F3  
                      ??_LCD_Reset 001D                       _isdigit$1939 0012  
         __end_of_fillCircleHelper 0B28                  __size_of_delay_ms 0052  
                         ?_Do_Init 0001                  __size_of_fillRect 004A  
                __size_of_drawChar 0156                         ?_OpenUSART 0011  
                 _DS3231_Read_Time 1306                           ?_i2cNack 0001  
                __size_of_drawtext 010A                   ___lwdiv@dividend 0011  
                      I2C_Read@ack 0011                          _bit_count 0058  
                        __pintcode 0008    __end_of_TFT_GreenTab_Initialize 17E0  
                    __pmediumconst FD8A                           ?___awdiv 0017  
                        __tft_type 0053                           ?___lwdiv 0011  
               _I2C_Write_Cmd_Only 18A8                           ?___lwmod 0018  
               drawFastVLine@color 001A                        ?_write_data 0001  
                        _drawPixel 1786                  __size_of_spiwrite 0014  
              ?_I2C_Write_Cmd_Only 0013                  ?_force_nec_state0 0001  
                         ?_isdigit 0001                           _I2C_Init 19A0  
                         _I2C_Read 15A2                           _I2C_Stop 1912  
                _Initialize_Screen 0FA6                     __size_of_Rcmd1 0110  
                   __size_of_Rcmd3 00F2                          _init_UART 18D8  
               ??_force_nec_state0 0001           I2C_Write_Cmd_Only@Device 0014  
                        _hexpowers FF70                 ?_Initialize_Screen 0001  
                 ___lwdiv@quotient 0016                     __size_of_putch 000E  
          __end_of_Activate_Buzzer 195A                     ___wmul@product 0015  
              ??_Initialize_Screen 0043                           _INT0_isr 0736  
             ??_I2C_Write_Cmd_Only 0014                           _PIE1bits 000F9D  
           DS3231_Read_Time@Device 0015                           _PIR1bits 000F9E  
                         _PIR2bits 000FA1                   ??_init_INTERRUPT 0011  
            __size_of_Wait_One_Sec 0024                          _setup_day 0066  
                DS1621_Init@Device 0016                          fillRect@h 0025  
                        fillRect@i 002C                          fillRect@w 0024  
                        fillRect@x 002B                          fillRect@y 0023  
                        drawChar@c 002F                          drawChar@i 0038  
                        drawChar@j 0037                       ??_fillCircle 0043  
                        drawChar@x 0036                          drawChar@y 002E  
                       ?_drawPixel 0018             __size_of_fillRectangle 00DC  
                ___wmul@multiplier 0011          __end_of_Initialize_Screen 1034  
                      ??_i2cLowSda 0011                        ??_i2cLowScl 0011  
                     ??_fillScreen 0026                       ??_drawCircle 0024  
                       printf@flag 0035                         printf@prec 0032  
                        main@found 00FE                          main@tempC 00FB  
                        main@tempF 00FA                         ?_init_UART 0001  
                      _INTCON2bits 000FF1                          copy_data0 11E2  
                        copy_data1 1202                          drawtext@i 00F6  
           __size_of_drawFastVLine 0088                          drawtext@x 00F3  
                        drawtext@y 0039                           _Nec_code 0044  
                write_command@cmd_ 0013                        ??_OpenUSART 0013  
                     ?_DS1621_Init 0001                           _Rcmd2red 166C  
                 __size_of_Do_Init 0044                __size_of_write_data 0010  
                  OpenUSART@config 0013                       _Time_Elapsed 0048  
               __end_of_fillCircle 146C                   __size_of_i2cNack 000A  
                     _Wait_One_Sec 1808                           __Hrparam 0000  
               __end_of_fillScreen 18A8                           __Lrparam 0000  
               __end_of_drawCircle 0736                   __size_of___awdiv 0096  
                 __size_of___lwdiv 005C                   __size_of___lwmod 004C  
                     ?_I2C_ReStart 0001                   __size_of_isdigit 0022  
                         _delay_ms 146C                    ___lwdiv@divisor 0013  
                  ___lwdiv@counter 0015                           __ptext10 1808  
                         __ptext11 15EA                           __ptext20 162E  
                         __ptext12 18D8                           __ptext21 089A  
                         __ptext13 1230                           __ptext30 195A  
                         __ptext22 1558                           __ptext14 1756  
                         __ptext31 196A                           __ptext23 1034  
                         __ptext15 0FA6                           __ptext40 19BE  
                         __ptext32 18EC                           __ptext24 1786  
                         __ptext16 1724                           __ptext41 12A0  
                         __ptext33 1900                           __ptext25 14BE  
                         __ptext17 188C                           __ptext50 18C2  
                         __ptext42 1306                           __ptext34 146C  
                         __ptext26 17B6                           __ptext18 0E34  
                         __ptext51 19B4                           __ptext43 16E8  
                         __ptext35 17E0                           __ptext27 0D42  
                         __ptext19 0C38                           __ptext52 19C6  
                         __ptext44 16AA                           __ptext36 19A0  
                         __ptext28 166C                           __ptext53 19CE  
                         __ptext45 1912                           __ptext37 186E  
                         __ptext29 0B28                           __ptext54 1988  
                         __ptext46 1924                           __ptext38 184E  
                         __ptext55 1948                           __ptext47 15A2  
                         __ptext39 18A8                           __ptext48 19AA  
                         __ptext57 1994                           __ptext49 1936  
                         __ptext58 0736                           __ptext59 19D6  
                         _fillRect 1558                           _drawChar 089A  
 __size_of_TFT_GreenTab_Initialize 002A                           _colstart 0059  
                         _drawtext 0C38                         strcpy@from 0013  
                    _fillRectangle 0E34           __end_of_DS1621_Read_Temp 1724  
                 ?_Activate_Buzzer 0001                      __size_of_main 0212  
                  fillRectangle@hi 0021                    fillRectangle@lo 0022  
                    _drawFastVLine 1034                          printf@idx 002F  
                         _spiwrite 18EC                          printf@val 0033  
                      ??_drawPixel 001B                           _rowstart 0061  
         __end_of_DS3231_Read_Time 136A                 fillCircleHelper@x0 0023  
               fillCircleHelper@y0 0025         __size_of_Initialize_Screen 008E  
                       _INTCONbits 000FF2                     OpenUSART@spbrg 0011  
                      ??_init_UART 0014                           isdigit@c 0013  
                ?_fillCircleHelper 0023                          spiwrite@x 0011  
                         intlevel2 0000                     ?_fillRectangle 0018  
               ??_fillCircleHelper 002F                   ___lwmod@dividend 0018  
            __end_of_write_command 197A                    fillScreen@color 0024  
                     fillCircle@x0 003B                       fillCircle@y0 003D  
                   fillRectangle@h 001A                     fillRectangle@w 0019  
                   fillRectangle@x 0023                     fillRectangle@y 0018  
                   ?_drawFastVLine 0018                           printf@ap 0030  
                fillCircleHelper@f 0035                  fillCircleHelper@r 0027  
                fillCircleHelper@x 0037                  fillCircleHelper@y 0039  
                     ??_write_data 0013                         _TIMER1_isr 1994  
                    fillRect@color 0026                    ___lwmod@divisor 001A  
                         strcpy@cp 0015                           strlen@cp 0015  
                         strcpy@to 0011              I2C_Write_Cmd_Only@Cmd 0013  
                  ___lwmod@counter 001C                       _setup_minute 0068  
                     _setup_second 006A                        fillCircle@r 003F  
            __end_of_setAddrWindow 150C                 fillRectangle@color 001B  
                    drawChar@color 0030                        _setup_month 0069  
               __end_of_write_data 196A          __size_of_force_nec_state0 0008  
                     drawChar@line 0035                       drawChar@size 0034  
__size_of_I2C_Write_Cmd_Write_Data 0020               __size_of_DS1621_Init 001E  
        ?_I2C_Write_Cmd_Write_Data 0013  
