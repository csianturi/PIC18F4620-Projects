

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Nov 09 18:35:14 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    67                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    68  0000                     
    69                           	psect	idataCOMRAM
    70  000FC2                     __pidataCOMRAM:
    71                           	opt stack 0
    72                           
    73                           ;initializer for _tempSecond
    74  000FC2  FF                 	db	255
    75                           
    76                           ;initializer for _wrap
    77  000FC3  01                 	db	1
    78                           
    79                           	psect	idataBANK0
    80  000C52                     __pidataBANK0:
    81                           	opt stack 0
    82                           
    83                           ;initializer for _color
    84  000C52  F800               	dw	63488
    85  000C54  00                 	db	0
    86  000C55  00                 	db	0
    87  000C56  00                 	db	0
    88  000C57  00                 	db	0
    89  000C58  00                 	db	0
    90  000C59  00                 	db	0
    91  000C5A  00                 	db	0
    92  000C5B  00                 	db	0
    93  000C5C  00                 	db	0
    94  000C5D  00                 	db	0
    95  000C5E  00                 	db	0
    96  000C5F  00                 	db	0
    97  000C60  00                 	db	0
    98  000C61  00                 	db	0
    99  000C62  00                 	db	0
   100  000C63  00                 	db	0
   101  000C64  00                 	db	0
   102  000C65  00                 	db	0
   103  000C66  00                 	db	0
   104  000C67  00                 	db	0
   105  000C68  00                 	db	0
   106  000C69  00                 	db	0
   107  000C6A  00                 	db	0
   108  000C6B  00                 	db	0
   109  000C6C  00                 	db	0
   110  000C6D  00                 	db	0
   111  000C6E  00                 	db	0
   112  000C6F  00                 	db	0
   113  000C70  00                 	db	0
   114  000C71  00                 	db	0
   115  000C72  00                 	db	0
   116  000C73  00                 	db	0
   117  000C74  00                 	db	0
   118  000C75  00                 	db	0
   119  000C76  00                 	db	0
   120  000C77  00                 	db	0
   121  000C78  00                 	db	0
   122  000C79  00                 	db	0
   123  000C7A  00                 	db	0
   124  000C7B  00                 	db	0
   125                           
   126                           ;initializer for _array1
   127  000C7C  A2                 	db	162
   128  000C7D  00                 	db	0
   129  000C7E  00                 	db	0
   130  000C7F  00                 	db	0
   131  000C80  00                 	db	0
   132  000C81  00                 	db	0
   133  000C82  00                 	db	0
   134  000C83  00                 	db	0
   135  000C84  00                 	db	0
   136  000C85  00                 	db	0
   137  000C86  00                 	db	0
   138  000C87  00                 	db	0
   139  000C88  00                 	db	0
   140  000C89  00                 	db	0
   141  000C8A  00                 	db	0
   142  000C8B  00                 	db	0
   143  000C8C  00                 	db	0
   144  000C8D  00                 	db	0
   145  000C8E  00                 	db	0
   146  000C8F  00                 	db	0
   147  000C90  00                 	db	0
   148                           
   149                           	psect	idataBANK1
   150  0009F2                     __pidataBANK1:
   151                           	opt stack 0
   152                           
   153                           ;initializer for _txt1
   154  0009F2  43                 	db	67
   155  0009F3  48                 	db	72
   156  0009F4  2D                 	db	45
   157  0009F5  00                 	db	0
   158  0009F6  00                 	db	0
   159  0009F7  00                 	db	0
   160  0009F8  00                 	db	0
   161  0009F9  00                 	db	0
   162  0009FA  00                 	db	0
   163  0009FB  00                 	db	0
   164  0009FC  00                 	db	0
   165  0009FD  00                 	db	0
   166  0009FE  00                 	db	0
   167  0009FF  00                 	db	0
   168  000A00  00                 	db	0
   169  000A01  00                 	db	0
   170  000A02  00                 	db	0
   171  000A03  00                 	db	0
   172  000A04  00                 	db	0
   173  000A05  00                 	db	0
   174  000A06  00                 	db	0
   175  000A07  00                 	db	0
   176  000A08  00                 	db	0
   177  000A09  00                 	db	0
   178  000A0A  00                 	db	0
   179  000A0B  00                 	db	0
   180  000A0C  00                 	db	0
   181  000A0D  00                 	db	0
   182  000A0E  00                 	db	0
   183  000A0F  00                 	db	0
   184  000A10  00                 	db	0
   185  000A11  00                 	db	0
   186  000A12  00                 	db	0
   187  000A13  00                 	db	0
   188  000A14  00                 	db	0
   189  000A15  00                 	db	0
   190  000A16  00                 	db	0
   191  000A17  00                 	db	0
   192  000A18  00                 	db	0
   193  000A19  00                 	db	0
   194  000A1A  00                 	db	0
   195  000A1B  00                 	db	0
   196  000A1C  00                 	db	0
   197  000A1D  00                 	db	0
   198  000A1E  00                 	db	0
   199  000A1F  00                 	db	0
   200  000A20  00                 	db	0
   201  000A21  00                 	db	0
   202  000A22  00                 	db	0
   203  000A23  00                 	db	0
   204  000A24  00                 	db	0
   205  000A25  00                 	db	0
   206  000A26  00                 	db	0
   207  000A27  00                 	db	0
   208  000A28  00                 	db	0
   209  000A29  00                 	db	0
   210  000A2A  00                 	db	0
   211  000A2B  00                 	db	0
   212  000A2C  00                 	db	0
   213  000A2D  00                 	db	0
   214  000A2E  00                 	db	0
   215  000A2F  00                 	db	0
   216  000A30  00                 	db	0
   217  000A31  00                 	db	0
   218  000A32  00                 	db	0
   219  000A33  00                 	db	0
   220  000A34  00                 	db	0
   221  000A35  00                 	db	0
   222  000A36  00                 	db	0
   223  000A37  00                 	db	0
   224  000A38  00                 	db	0
   225  000A39  00                 	db	0
   226  000A3A  00                 	db	0
   227  000A3B  00                 	db	0
   228  000A3C  00                 	db	0
   229  000A3D  00                 	db	0
   230  000A3E  00                 	db	0
   231  000A3F  00                 	db	0
   232  000A40  00                 	db	0
   233  000A41  00                 	db	0
   234  000A42  00                 	db	0
   235  000A43  00                 	db	0
   236  000A44  00                 	db	0
   237  000A45  00                 	db	0
   238                           
   239                           	psect	mediumconst
   240  00FDD2                     __pmediumconst:
   241                           	opt stack 0
   242  00FDD2  00                 	db	0
   243  00FDD3                     _font:
   244                           	opt stack 0
   245  00FDD3  00                 	db	0
   246  00FDD4  00                 	db	0
   247  00FDD5  00                 	db	0
   248  00FDD6  00                 	db	0
   249  00FDD7  00                 	db	0
   250  00FDD8  00                 	db	0
   251  00FDD9  00                 	db	0
   252  00FDDA  5F                 	db	95
   253  00FDDB  00                 	db	0
   254  00FDDC  00                 	db	0
   255  00FDDD  00                 	db	0
   256  00FDDE  07                 	db	7
   257  00FDDF  00                 	db	0
   258  00FDE0  07                 	db	7
   259  00FDE1  00                 	db	0
   260  00FDE2  14                 	db	20
   261  00FDE3  7F                 	db	127
   262  00FDE4  14                 	db	20
   263  00FDE5  7F                 	db	127
   264  00FDE6  14                 	db	20
   265  00FDE7  24                 	db	36
   266  00FDE8  2A                 	db	42
   267  00FDE9  7F                 	db	127
   268  00FDEA  2A                 	db	42
   269  00FDEB  12                 	db	18
   270  00FDEC  23                 	db	35
   271  00FDED  13                 	db	19
   272  00FDEE  08                 	db	8
   273  00FDEF  64                 	db	100
   274  00FDF0  62                 	db	98
   275  00FDF1  36                 	db	54
   276  00FDF2  49                 	db	73
   277  00FDF3  56                 	db	86
   278  00FDF4  20                 	db	32
   279  00FDF5  50                 	db	80
   280  00FDF6  00                 	db	0
   281  00FDF7  08                 	db	8
   282  00FDF8  07                 	db	7
   283  00FDF9  03                 	db	3
   284  00FDFA  00                 	db	0
   285  00FDFB  00                 	db	0
   286  00FDFC  1C                 	db	28
   287  00FDFD  22                 	db	34
   288  00FDFE  41                 	db	65
   289  00FDFF  00                 	db	0
   290  00FE00  00                 	db	0
   291  00FE01  41                 	db	65
   292  00FE02  22                 	db	34
   293  00FE03  1C                 	db	28
   294  00FE04  00                 	db	0
   295  00FE05  2A                 	db	42
   296  00FE06  1C                 	db	28
   297  00FE07  7F                 	db	127
   298  00FE08  1C                 	db	28
   299  00FE09  2A                 	db	42
   300  00FE0A  08                 	db	8
   301  00FE0B  08                 	db	8
   302  00FE0C  3E                 	db	62
   303  00FE0D  08                 	db	8
   304  00FE0E  08                 	db	8
   305  00FE0F  00                 	db	0
   306  00FE10  80                 	db	128
   307  00FE11  70                 	db	112
   308  00FE12  30                 	db	48
   309  00FE13  00                 	db	0
   310  00FE14  08                 	db	8
   311  00FE15  08                 	db	8
   312  00FE16  08                 	db	8
   313  00FE17  08                 	db	8
   314  00FE18  08                 	db	8
   315  00FE19  00                 	db	0
   316  00FE1A  00                 	db	0
   317  00FE1B  60                 	db	96
   318  00FE1C  60                 	db	96
   319  00FE1D  00                 	db	0
   320  00FE1E  20                 	db	32
   321  00FE1F  10                 	db	16
   322  00FE20  08                 	db	8
   323  00FE21  04                 	db	4
   324  00FE22  02                 	db	2
   325  00FE23  3E                 	db	62
   326  00FE24  51                 	db	81
   327  00FE25  49                 	db	73
   328  00FE26  45                 	db	69
   329  00FE27  3E                 	db	62
   330  00FE28  00                 	db	0
   331  00FE29  42                 	db	66
   332  00FE2A  7F                 	db	127
   333  00FE2B  40                 	db	64
   334  00FE2C  00                 	db	0
   335  00FE2D  72                 	db	114
   336  00FE2E  49                 	db	73
   337  00FE2F  49                 	db	73
   338  00FE30  49                 	db	73
   339  00FE31  46                 	db	70
   340  00FE32  21                 	db	33
   341  00FE33  41                 	db	65
   342  00FE34  49                 	db	73
   343  00FE35  4D                 	db	77
   344  00FE36  33                 	db	51
   345  00FE37  18                 	db	24
   346  00FE38  14                 	db	20
   347  00FE39  12                 	db	18
   348  00FE3A  7F                 	db	127
   349  00FE3B  10                 	db	16
   350  00FE3C  27                 	db	39
   351  00FE3D  45                 	db	69
   352  00FE3E  45                 	db	69
   353  00FE3F  45                 	db	69
   354  00FE40  39                 	db	57
   355  00FE41  3C                 	db	60
   356  00FE42  4A                 	db	74
   357  00FE43  49                 	db	73
   358  00FE44  49                 	db	73
   359  00FE45  31                 	db	49
   360  00FE46  41                 	db	65
   361  00FE47  21                 	db	33
   362  00FE48  11                 	db	17
   363  00FE49  09                 	db	9
   364  00FE4A  07                 	db	7
   365  00FE4B  36                 	db	54
   366  00FE4C  49                 	db	73
   367  00FE4D  49                 	db	73
   368  00FE4E  49                 	db	73
   369  00FE4F  36                 	db	54
   370  00FE50  46                 	db	70
   371  00FE51  49                 	db	73
   372  00FE52  49                 	db	73
   373  00FE53  29                 	db	41
   374  00FE54  1E                 	db	30
   375  00FE55  00                 	db	0
   376  00FE56  00                 	db	0
   377  00FE57  14                 	db	20
   378  00FE58  00                 	db	0
   379  00FE59  00                 	db	0
   380  00FE5A  00                 	db	0
   381  00FE5B  40                 	db	64
   382  00FE5C  34                 	db	52
   383  00FE5D  00                 	db	0
   384  00FE5E  00                 	db	0
   385  00FE5F  00                 	db	0
   386  00FE60  08                 	db	8
   387  00FE61  14                 	db	20
   388  00FE62  22                 	db	34
   389  00FE63  41                 	db	65
   390  00FE64  14                 	db	20
   391  00FE65  14                 	db	20
   392  00FE66  14                 	db	20
   393  00FE67  14                 	db	20
   394  00FE68  14                 	db	20
   395  00FE69  00                 	db	0
   396  00FE6A  41                 	db	65
   397  00FE6B  22                 	db	34
   398  00FE6C  14                 	db	20
   399  00FE6D  08                 	db	8
   400  00FE6E  02                 	db	2
   401  00FE6F  01                 	db	1
   402  00FE70  59                 	db	89
   403  00FE71  09                 	db	9
   404  00FE72  06                 	db	6
   405  00FE73  3E                 	db	62
   406  00FE74  41                 	db	65
   407  00FE75  5D                 	db	93
   408  00FE76  59                 	db	89
   409  00FE77  4E                 	db	78
   410  00FE78  7C                 	db	124
   411  00FE79  12                 	db	18
   412  00FE7A  11                 	db	17
   413  00FE7B  12                 	db	18
   414  00FE7C  7C                 	db	124
   415  00FE7D  7F                 	db	127
   416  00FE7E  49                 	db	73
   417  00FE7F  49                 	db	73
   418  00FE80  49                 	db	73
   419  00FE81  36                 	db	54
   420  00FE82  3E                 	db	62
   421  00FE83  41                 	db	65
   422  00FE84  41                 	db	65
   423  00FE85  41                 	db	65
   424  00FE86  22                 	db	34
   425  00FE87  7F                 	db	127
   426  00FE88  41                 	db	65
   427  00FE89  41                 	db	65
   428  00FE8A  41                 	db	65
   429  00FE8B  3E                 	db	62
   430  00FE8C  7F                 	db	127
   431  00FE8D  49                 	db	73
   432  00FE8E  49                 	db	73
   433  00FE8F  49                 	db	73
   434  00FE90  41                 	db	65
   435  00FE91  7F                 	db	127
   436  00FE92  09                 	db	9
   437  00FE93  09                 	db	9
   438  00FE94  09                 	db	9
   439  00FE95  01                 	db	1
   440  00FE96  3E                 	db	62
   441  00FE97  41                 	db	65
   442  00FE98  41                 	db	65
   443  00FE99  51                 	db	81
   444  00FE9A  73                 	db	115
   445  00FE9B  7F                 	db	127
   446  00FE9C  08                 	db	8
   447  00FE9D  08                 	db	8
   448  00FE9E  08                 	db	8
   449  00FE9F  7F                 	db	127
   450  00FEA0  00                 	db	0
   451  00FEA1  41                 	db	65
   452  00FEA2  7F                 	db	127
   453  00FEA3  41                 	db	65
   454  00FEA4  00                 	db	0
   455  00FEA5  20                 	db	32
   456  00FEA6  40                 	db	64
   457  00FEA7  41                 	db	65
   458  00FEA8  3F                 	db	63
   459  00FEA9  01                 	db	1
   460  00FEAA  7F                 	db	127
   461  00FEAB  08                 	db	8
   462  00FEAC  14                 	db	20
   463  00FEAD  22                 	db	34
   464  00FEAE  41                 	db	65
   465  00FEAF  7F                 	db	127
   466  00FEB0  40                 	db	64
   467  00FEB1  40                 	db	64
   468  00FEB2  40                 	db	64
   469  00FEB3  40                 	db	64
   470  00FEB4  7F                 	db	127
   471  00FEB5  02                 	db	2
   472  00FEB6  1C                 	db	28
   473  00FEB7  02                 	db	2
   474  00FEB8  7F                 	db	127
   475  00FEB9  7F                 	db	127
   476  00FEBA  04                 	db	4
   477  00FEBB  08                 	db	8
   478  00FEBC  10                 	db	16
   479  00FEBD  7F                 	db	127
   480  00FEBE  3E                 	db	62
   481  00FEBF  41                 	db	65
   482  00FEC0  41                 	db	65
   483  00FEC1  41                 	db	65
   484  00FEC2  3E                 	db	62
   485  00FEC3  7F                 	db	127
   486  00FEC4  09                 	db	9
   487  00FEC5  09                 	db	9
   488  00FEC6  09                 	db	9
   489  00FEC7  06                 	db	6
   490  00FEC8  3E                 	db	62
   491  00FEC9  41                 	db	65
   492  00FECA  51                 	db	81
   493  00FECB  21                 	db	33
   494  00FECC  5E                 	db	94
   495  00FECD  7F                 	db	127
   496  00FECE  09                 	db	9
   497  00FECF  19                 	db	25
   498  00FED0  29                 	db	41
   499  00FED1  46                 	db	70
   500  00FED2                     __end_of_font:
   501                           	opt stack 0
   502  00FED2                     _font2:
   503                           	opt stack 0
   504  00FED2  26                 	db	38
   505  00FED3  49                 	db	73
   506  00FED4  49                 	db	73
   507  00FED5  49                 	db	73
   508  00FED6  32                 	db	50
   509  00FED7  03                 	db	3
   510  00FED8  01                 	db	1
   511  00FED9  7F                 	db	127
   512  00FEDA  01                 	db	1
   513  00FEDB  03                 	db	3
   514  00FEDC  3F                 	db	63
   515  00FEDD  40                 	db	64
   516  00FEDE  40                 	db	64
   517  00FEDF  40                 	db	64
   518  00FEE0  3F                 	db	63
   519  00FEE1  1F                 	db	31
   520  00FEE2  20                 	db	32
   521  00FEE3  40                 	db	64
   522  00FEE4  20                 	db	32
   523  00FEE5  1F                 	db	31
   524  00FEE6  3F                 	db	63
   525  00FEE7  40                 	db	64
   526  00FEE8  38                 	db	56
   527  00FEE9  40                 	db	64
   528  00FEEA  3F                 	db	63
   529  00FEEB  63                 	db	99
   530  00FEEC  14                 	db	20
   531  00FEED  08                 	db	8
   532  00FEEE  14                 	db	20
   533  00FEEF  63                 	db	99
   534  00FEF0  03                 	db	3
   535  00FEF1  04                 	db	4
   536  00FEF2  78                 	db	120
   537  00FEF3  04                 	db	4
   538  00FEF4  03                 	db	3
   539  00FEF5  61                 	db	97
   540  00FEF6  59                 	db	89
   541  00FEF7  49                 	db	73
   542  00FEF8  4D                 	db	77
   543  00FEF9  43                 	db	67
   544  00FEFA  00                 	db	0
   545  00FEFB  7F                 	db	127
   546  00FEFC  41                 	db	65
   547  00FEFD  41                 	db	65
   548  00FEFE  41                 	db	65
   549  00FEFF  02                 	db	2
   550  00FF00  04                 	db	4
   551  00FF01  08                 	db	8
   552  00FF02  10                 	db	16
   553  00FF03  20                 	db	32
   554  00FF04  00                 	db	0
   555  00FF05  41                 	db	65
   556  00FF06  41                 	db	65
   557  00FF07  41                 	db	65
   558  00FF08  7F                 	db	127
   559  00FF09  04                 	db	4
   560  00FF0A  02                 	db	2
   561  00FF0B  01                 	db	1
   562  00FF0C  02                 	db	2
   563  00FF0D  04                 	db	4
   564  00FF0E  40                 	db	64
   565  00FF0F  40                 	db	64
   566  00FF10  40                 	db	64
   567  00FF11  40                 	db	64
   568  00FF12  40                 	db	64
   569  00FF13  00                 	db	0
   570  00FF14  03                 	db	3
   571  00FF15  07                 	db	7
   572  00FF16  08                 	db	8
   573  00FF17  00                 	db	0
   574  00FF18  20                 	db	32
   575  00FF19  54                 	db	84
   576  00FF1A  54                 	db	84
   577  00FF1B  78                 	db	120
   578  00FF1C  40                 	db	64
   579  00FF1D  7F                 	db	127
   580  00FF1E  28                 	db	40
   581  00FF1F  44                 	db	68
   582  00FF20  44                 	db	68
   583  00FF21  38                 	db	56
   584  00FF22  38                 	db	56
   585  00FF23  44                 	db	68
   586  00FF24  44                 	db	68
   587  00FF25  44                 	db	68
   588  00FF26  28                 	db	40
   589  00FF27  38                 	db	56
   590  00FF28  44                 	db	68
   591  00FF29  44                 	db	68
   592  00FF2A  28                 	db	40
   593  00FF2B  7F                 	db	127
   594  00FF2C  38                 	db	56
   595  00FF2D  54                 	db	84
   596  00FF2E  54                 	db	84
   597  00FF2F  54                 	db	84
   598  00FF30  18                 	db	24
   599  00FF31  00                 	db	0
   600  00FF32  08                 	db	8
   601  00FF33  7E                 	db	126
   602  00FF34  09                 	db	9
   603  00FF35  02                 	db	2
   604  00FF36  18                 	db	24
   605  00FF37  A4                 	db	164
   606  00FF38  A4                 	db	164
   607  00FF39  9C                 	db	156
   608  00FF3A  78                 	db	120
   609  00FF3B  7F                 	db	127
   610  00FF3C  08                 	db	8
   611  00FF3D  04                 	db	4
   612  00FF3E  04                 	db	4
   613  00FF3F  78                 	db	120
   614  00FF40  00                 	db	0
   615  00FF41  44                 	db	68
   616  00FF42  7D                 	db	125
   617  00FF43  40                 	db	64
   618  00FF44  00                 	db	0
   619  00FF45  20                 	db	32
   620  00FF46  40                 	db	64
   621  00FF47  40                 	db	64
   622  00FF48  3D                 	db	61
   623  00FF49  00                 	db	0
   624  00FF4A  7F                 	db	127
   625  00FF4B  10                 	db	16
   626  00FF4C  28                 	db	40
   627  00FF4D  44                 	db	68
   628  00FF4E  00                 	db	0
   629  00FF4F  00                 	db	0
   630  00FF50  41                 	db	65
   631  00FF51  7F                 	db	127
   632  00FF52  40                 	db	64
   633  00FF53  00                 	db	0
   634  00FF54  7C                 	db	124
   635  00FF55  04                 	db	4
   636  00FF56  78                 	db	120
   637  00FF57  04                 	db	4
   638  00FF58  78                 	db	120
   639  00FF59  7C                 	db	124
   640  00FF5A  08                 	db	8
   641  00FF5B  04                 	db	4
   642  00FF5C  04                 	db	4
   643  00FF5D  78                 	db	120
   644  00FF5E  38                 	db	56
   645  00FF5F  44                 	db	68
   646  00FF60  44                 	db	68
   647  00FF61  44                 	db	68
   648  00FF62  38                 	db	56
   649  00FF63  FC                 	db	252
   650  00FF64  18                 	db	24
   651  00FF65  24                 	db	36
   652  00FF66  24                 	db	36
   653  00FF67  18                 	db	24
   654  00FF68  18                 	db	24
   655  00FF69  24                 	db	36
   656  00FF6A  24                 	db	36
   657  00FF6B  18                 	db	24
   658  00FF6C  FC                 	db	252
   659  00FF6D  7C                 	db	124
   660  00FF6E  08                 	db	8
   661  00FF6F  04                 	db	4
   662  00FF70  04                 	db	4
   663  00FF71  08                 	db	8
   664  00FF72  48                 	db	72
   665  00FF73  54                 	db	84
   666  00FF74  54                 	db	84
   667  00FF75  54                 	db	84
   668  00FF76  24                 	db	36
   669  00FF77  04                 	db	4
   670  00FF78  04                 	db	4
   671  00FF79  3F                 	db	63
   672  00FF7A  44                 	db	68
   673  00FF7B  24                 	db	36
   674  00FF7C  3C                 	db	60
   675  00FF7D  40                 	db	64
   676  00FF7E  40                 	db	64
   677  00FF7F  20                 	db	32
   678  00FF80  7C                 	db	124
   679  00FF81  1C                 	db	28
   680  00FF82  20                 	db	32
   681  00FF83  40                 	db	64
   682  00FF84  20                 	db	32
   683  00FF85  1C                 	db	28
   684  00FF86  3C                 	db	60
   685  00FF87  40                 	db	64
   686  00FF88  30                 	db	48
   687  00FF89  40                 	db	64
   688  00FF8A  3C                 	db	60
   689  00FF8B  44                 	db	68
   690  00FF8C  28                 	db	40
   691  00FF8D  10                 	db	16
   692  00FF8E  28                 	db	40
   693  00FF8F  44                 	db	68
   694  00FF90  4C                 	db	76
   695  00FF91  90                 	db	144
   696  00FF92  90                 	db	144
   697  00FF93  90                 	db	144
   698  00FF94  7C                 	db	124
   699  00FF95  44                 	db	68
   700  00FF96  64                 	db	100
   701  00FF97  54                 	db	84
   702  00FF98  4C                 	db	76
   703  00FF99  44                 	db	68
   704  00FF9A  00                 	db	0
   705  00FF9B  08                 	db	8
   706  00FF9C  36                 	db	54
   707  00FF9D  41                 	db	65
   708  00FF9E  00                 	db	0
   709  00FF9F  00                 	db	0
   710  00FFA0  00                 	db	0
   711  00FFA1  77                 	db	119
   712  00FFA2  00                 	db	0
   713  00FFA3  00                 	db	0
   714  00FFA4  00                 	db	0
   715  00FFA5  41                 	db	65
   716  00FFA6  36                 	db	54
   717  00FFA7  08                 	db	8
   718  00FFA8  00                 	db	0
   719  00FFA9  02                 	db	2
   720  00FFAA  01                 	db	1
   721  00FFAB  02                 	db	2
   722  00FFAC  04                 	db	4
   723  00FFAD  02                 	db	2
   724  00FFAE                     __end_of_font2:
   725                           	opt stack 0
   726  00FFAE                     _dpowers:
   727                           	opt stack 0
   728  00FFAE  0001               	dw	1
   729  00FFB0  000A               	dw	10
   730  00FFB2  0064               	dw	100
   731  00FFB4  03E8               	dw	1000
   732  00FFB6  2710               	dw	10000
   733  00FFB8                     __end_of_dpowers:
   734                           	opt stack 0
   735  0000                     _ADCON1	set	4033
   736  0000                     _OSCCON	set	4051
   737  0000                     _PIE1bits	set	3997
   738  0000                     _PIR1bits	set	3998
   739  0000                     _PIR2bits	set	4001
   740  0000                     _PORTCbits	set	3970
   741  0000                     _PORTDbits	set	3971
   742  0000                     _RCSTA	set	4011
   743  0000                     _RCSTAbits	set	4011
   744  0000                     _SPBRG	set	4015
   745  0000                     _SPBRGH	set	4016
   746  0000                     _SSPBUF	set	4041
   747  0000                     _SSPCON1	set	4038
   748  0000                     _SSPSTAT	set	4039
   749  0000                     _SSPSTATbits	set	4039
   750  0000                     _T3CON	set	4017
   751  0000                     _T3CONbits	set	4017
   752  0000                     _TMR3H	set	4019
   753  0000                     _TMR3L	set	4018
   754  0000                     _TRISA	set	3986
   755  0000                     _TRISB	set	3987
   756  0000                     _TRISC	set	3988
   757  0000                     _TRISCbits	set	3988
   758  0000                     _TRISD	set	3989
   759  0000                     _TRISDbits	set	3989
   760  0000                     _TRISE	set	3990
   761  0000                     _TXREG	set	4013
   762  0000                     _TXSTA	set	4012
   763  0000                     _TXSTAbits	set	4012
   764  0000                     _RBPU	set	32655
   765  0000                     _TRMT	set	32097
   766  00FFB8                     STR_1:
   767  00FFB8  20                 	db	32
   768  00FFB9  54                 	db	84	;'T'
   769  00FFBA  65                 	db	101	;'e'
   770  00FFBB  6D                 	db	109	;'m'
   771  00FFBC  70                 	db	112	;'p'
   772  00FFBD  65                 	db	101	;'e'
   773  00FFBE  72                 	db	114	;'r'
   774  00FFBF  61                 	db	97	;'a'
   775  00FFC0  74                 	db	116	;'t'
   776  00FFC1  75                 	db	117	;'u'
   777  00FFC2  72                 	db	114	;'r'
   778  00FFC3  65                 	db	101	;'e'
   779  00FFC4  20                 	db	32
   780  00FFC5  3D                 	db	61	;'='
   781  00FFC6  20                 	db	32
   782  00FFC7  25                 	db	37
   783  00FFC8  64                 	db	100	;'d'
   784  00FFC9  20                 	db	32
   785  00FFCA  64                 	db	100	;'d'
   786  00FFCB  65                 	db	101	;'e'
   787  00FFCC  67                 	db	103	;'g'
   788  00FFCD  72                 	db	114	;'r'
   789  00FFCE  65                 	db	101	;'e'
   790  00FFCF  65                 	db	101	;'e'
   791  00FFD0  73                 	db	115	;'s'
   792  00FFD1  43                 	db	67	;'C'
   793  00FFD2  20                 	db	32
   794  00FFD3  3D                 	db	61	;'='
   795  00FFD4  20                 	db	32
   796  00FFD5  25                 	db	37
   797  00FFD6  64                 	db	100	;'d'
   798  00FFD7  20                 	db	32
   799  00FFD8  64                 	db	100	;'d'
   800  00FFD9  65                 	db	101	;'e'
   801  00FFDA  67                 	db	103	;'g'
   802  00FFDB  72                 	db	114	;'r'
   803  00FFDC  65                 	db	101	;'e'
   804  00FFDD  65                 	db	101	;'e'
   805  00FFDE  73                 	db	115	;'s'
   806  00FFDF  46                 	db	70	;'F'
   807  00FFE0  0D                 	db	13
   808  00FFE1  0A                 	db	10
   809  00FFE2  00                 	db	0
   810  00FFE3                     STR_2:
   811  00FFE3  45                 	db	69	;'E'
   812  00FFE4  43                 	db	67	;'C'
   813  00FFE5  45                 	db	69	;'E'
   814  00FFE6  33                 	db	51	;'3'
   815  00FFE7  33                 	db	51	;'3'
   816  00FFE8  30                 	db	48	;'0'
   817  00FFE9  31                 	db	49	;'1'
   818  00FFEA  4C                 	db	76	;'L'
   819  00FFEB  20                 	db	32
   820  00FFEC  46                 	db	70	;'F'
   821  00FFED  61                 	db	97	;'a'
   822  00FFEE  6C                 	db	108	;'l'
   823  00FFEF  6C                 	db	108	;'l'
   824  00FFF0  20                 	db	32
   825  00FFF1  32                 	db	50	;'2'
   826  00FFF2  32                 	db	50	;'2'
   827  00FFF3  2D                 	db	45
   828  00FFF4  53                 	db	83	;'S'
   829  00FFF5  78                 	db	120	;'x'
   830  00FFF6  00                 	db	0
   831  00FFF7                     STR_3:
   832  00FFF7  4C                 	db	76	;'L'
   833  00FFF8  41                 	db	65	;'A'
   834  00FFF9  42                 	db	66	;'B'
   835  00FFFA  20                 	db	32
   836  00FFFB  31                 	db	49	;'1'
   837  00FFFC  30                 	db	48	;'0'
   838  00FFFD  20                 	db	32
   839  00FFFE  00                 	db	0
   840                           
   841                           ; #config settings
   842  00FFFF  00                 	db	0	; dummy byte at the end
   843  0000                     
   844                           	psect	cinit
   845  000844                     __pcinit:
   846                           	opt stack 0
   847  000844                     start_initialization:
   848                           	opt stack 0
   849  000844                     __initialization:
   850                           	opt stack 0
   851                           
   852                           ; Clear objects allocated to BANK0 (31 bytes)
   853  000844  EE00  F0BF         	lfsr	0,__pbssBANK0
   854  000848  0E1F               	movlw	31
   855  00084A                     clear_0:
   856  00084A  6AEE               	clrf	postinc0,c
   857  00084C  06E8               	decf	wreg,f,c
   858  00084E  E1FD               	bnz	clear_0
   859                           
   860                           ; Clear objects allocated to COMRAM (41 bytes)
   861  000850  EE00  F043         	lfsr	0,__pbssCOMRAM
   862  000854  0E29               	movlw	41
   863  000856                     clear_1:
   864  000856  6AEE               	clrf	postinc0,c
   865  000858  06E8               	decf	wreg,f,c
   866  00085A  E1FD               	bnz	clear_1
   867                           
   868                           ; Initialize objects allocated to BANK1 (84 bytes)
   869                           ; load TBLPTR registers with __pidataBANK1
   870  00085C  0EF2               	movlw	low __pidataBANK1
   871  00085E  6EF6               	movwf	tblptrl,c
   872  000860  0E09               	movlw	high __pidataBANK1
   873  000862  6EF7               	movwf	tblptrh,c
   874  000864  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   875  000866  6EF8               	movwf	tblptru,c
   876  000868  EE01  F000         	lfsr	0,__pdataBANK1
   877  00086C  EE10 F054          	lfsr	1,84
   878  000870                     copy_data0:
   879  000870  0009               	tblrd		*+
   880  000872  CFF5 FFEE          	movff	tablat,postinc0
   881  000876  50E5               	movf	postdec1,w,c
   882  000878  50E1               	movf	fsr1l,w,c
   883  00087A  E1FA               	bnz	copy_data0
   884                           
   885                           ; Initialize objects allocated to BANK0 (63 bytes)
   886                           ; load TBLPTR registers with __pidataBANK0
   887  00087C  0E52               	movlw	low __pidataBANK0
   888  00087E  6EF6               	movwf	tblptrl,c
   889  000880  0E0C               	movlw	high __pidataBANK0
   890  000882  6EF7               	movwf	tblptrh,c
   891  000884  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   892  000886  6EF8               	movwf	tblptru,c
   893  000888  EE00  F080         	lfsr	0,__pdataBANK0
   894  00088C  EE10 F03F          	lfsr	1,63
   895  000890                     copy_data1:
   896  000890  0009               	tblrd		*+
   897  000892  CFF5 FFEE          	movff	tablat,postinc0
   898  000896  50E5               	movf	postdec1,w,c
   899  000898  50E1               	movf	fsr1l,w,c
   900  00089A  E1FA               	bnz	copy_data1
   901                           
   902                           ; Initialize objects allocated to COMRAM (2 bytes)
   903                           ; load TBLPTR registers with __pidataCOMRAM
   904  00089C  0EC2               	movlw	low __pidataCOMRAM
   905  00089E  6EF6               	movwf	tblptrl,c
   906  0008A0  0E0F               	movlw	high __pidataCOMRAM
   907  0008A2  6EF7               	movwf	tblptrh,c
   908  0008A4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   909  0008A6  6EF8               	movwf	tblptru,c
   910  0008A8  0009               	tblrd		*+	;fetch initializer
   911  0008AA  CFF5 F06C          	movff	tablat,__pdataCOMRAM
   912  0008AE  0009               	tblrd		*+	;fetch initializer
   913  0008B0  CFF5 F06D          	movff	tablat,__pdataCOMRAM+1
   914  0008B4                     end_of_initialization:
   915                           	opt stack 0
   916  0008B4                     __end_of__initialization:
   917                           	opt stack 0
   918  0008B4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   919  0008B6  6EF8               	movwf	tblptru,c
   920  0008B8  0100               	movlb	0
   921  0008BA  EF4C  F005         	goto	_main	;jump to C main() function
   922                           tblptru	equ	0xFF8
   923                           tblptrh	equ	0xFF7
   924                           tblptrl	equ	0xFF6
   925                           tablat	equ	0xFF5
   926                           postinc0	equ	0xFEE
   927                           wreg	equ	0xFE8
   928                           postdec1	equ	0xFE5
   929                           fsr1l	equ	0xFE1
   930                           
   931                           	psect	bssCOMRAM
   932  000043                     __pbssCOMRAM:
   933                           	opt stack 0
   934  000043                     _Nec_code:
   935                           	opt stack 0
   936  000043                     	ds	4
   937  000047                     _Time_Elapsed:
   938                           	opt stack 0
   939  000047                     	ds	2
   940  000049                     _nbr:
   941                           	opt stack 0
   942  000049                     	ds	2
   943  00004B                     _nec_ok:
   944                           	opt stack 0
   945  00004B                     	ds	2
   946  00004D                     _txt:
   947                           	opt stack 0
   948  00004D                     	ds	2
   949  00004F                     _Nec_code1:
   950                           	opt stack 0
   951  00004F                     	ds	1
   952  000050                     _Nec_state:
   953                           	opt stack 0
   954  000050                     	ds	1
   955  000051                     _TempSecond:
   956                           	opt stack 0
   957  000051                     	ds	1
   958  000052                     __tft_type:
   959                           	opt stack 0
   960  000052                     	ds	1
   961  000053                     _alarm_date:
   962                           	opt stack 0
   963  000053                     	ds	1
   964  000054                     _alarm_hour:
   965                           	opt stack 0
   966  000054                     	ds	1
   967  000055                     _alarm_minute:
   968                           	opt stack 0
   969  000055                     	ds	1
   970  000056                     _alarm_second:
   971                           	opt stack 0
   972  000056                     	ds	1
   973  000057                     _bit_count:
   974                           	opt stack 0
   975  000057                     	ds	1
   976  000058                     _colstart:
   977                           	opt stack 0
   978  000058                     	ds	1
   979  000059                     _day:
   980                           	opt stack 0
   981  000059                     	ds	1
   982  00005A                     _dow:
   983                           	opt stack 0
   984  00005A                     	ds	1
   985  00005B                     _found:
   986                           	opt stack 0
   987  00005B                     	ds	1
   988  00005C                     _hour:
   989                           	opt stack 0
   990  00005C                     	ds	1
   991  00005D                     _i:
   992                           	opt stack 0
   993  00005D                     	ds	1
   994  00005E                     _minute:
   995                           	opt stack 0
   996  00005E                     	ds	1
   997  00005F                     _month:
   998                           	opt stack 0
   999  00005F                     	ds	1
  1000  000060                     _rowstart:
  1001                           	opt stack 0
  1002  000060                     	ds	1
  1003  000061                     _second:
  1004                           	opt stack 0
  1005  000061                     	ds	1
  1006  000062                     _setup_alarm_hour:
  1007                           	opt stack 0
  1008  000062                     	ds	1
  1009  000063                     _setup_alarm_minute:
  1010                           	opt stack 0
  1011  000063                     	ds	1
  1012  000064                     _setup_alarm_second:
  1013                           	opt stack 0
  1014  000064                     	ds	1
  1015  000065                     _setup_day:
  1016                           	opt stack 0
  1017  000065                     	ds	1
  1018  000066                     _setup_hour:
  1019                           	opt stack 0
  1020  000066                     	ds	1
  1021  000067                     _setup_minute:
  1022                           	opt stack 0
  1023  000067                     	ds	1
  1024  000068                     _setup_month:
  1025                           	opt stack 0
  1026  000068                     	ds	1
  1027  000069                     _setup_second:
  1028                           	opt stack 0
  1029  000069                     	ds	1
  1030  00006A                     _setup_year:
  1031                           	opt stack 0
  1032  00006A                     	ds	1
  1033  00006B                     _year:
  1034                           	opt stack 0
  1035  00006B                     	ds	1
  1036                           tblptru	equ	0xFF8
  1037                           tblptrh	equ	0xFF7
  1038                           tblptrl	equ	0xFF6
  1039                           tablat	equ	0xFF5
  1040                           postinc0	equ	0xFEE
  1041                           wreg	equ	0xFE8
  1042                           postdec1	equ	0xFE5
  1043                           fsr1l	equ	0xFE1
  1044                           
  1045                           	psect	dataCOMRAM
  1046  00006C                     __pdataCOMRAM:
  1047                           	opt stack 0
  1048  00006C                     _tempSecond:
  1049                           	opt stack 0
  1050  00006C                     	ds	1
  1051  00006D                     _wrap:
  1052                           	opt stack 0
  1053  00006D                     	ds	1
  1054                           tblptru	equ	0xFF8
  1055                           tblptrh	equ	0xFF7
  1056                           tblptrl	equ	0xFF6
  1057                           tablat	equ	0xFF5
  1058                           postinc0	equ	0xFEE
  1059                           wreg	equ	0xFE8
  1060                           postdec1	equ	0xFE5
  1061                           fsr1l	equ	0xFE1
  1062                           
  1063                           	psect	bssBANK0
  1064  0000BF                     __pbssBANK0:
  1065                           	opt stack 0
  1066  0000BF                     _buffer:
  1067                           	opt stack 0
  1068  0000BF                     	ds	31
  1069                           tblptru	equ	0xFF8
  1070                           tblptrh	equ	0xFF7
  1071                           tblptrl	equ	0xFF6
  1072                           tablat	equ	0xFF5
  1073                           postinc0	equ	0xFEE
  1074                           wreg	equ	0xFE8
  1075                           postdec1	equ	0xFE5
  1076                           fsr1l	equ	0xFE1
  1077                           
  1078                           	psect	dataBANK0
  1079  000080                     __pdataBANK0:
  1080                           	opt stack 0
  1081  000080                     _color:
  1082                           	opt stack 0
  1083  000080                     	ds	42
  1084  0000AA                     _array1:
  1085                           	opt stack 0
  1086  0000AA                     	ds	21
  1087                           tblptru	equ	0xFF8
  1088                           tblptrh	equ	0xFF7
  1089                           tblptrl	equ	0xFF6
  1090                           tablat	equ	0xFF5
  1091                           postinc0	equ	0xFEE
  1092                           wreg	equ	0xFE8
  1093                           postdec1	equ	0xFE5
  1094                           fsr1l	equ	0xFE1
  1095                           
  1096                           	psect	dataBANK1
  1097  000100                     __pdataBANK1:
  1098                           	opt stack 0
  1099  000100                     _txt1:
  1100                           	opt stack 0
  1101  000100                     	ds	84
  1102                           tblptru	equ	0xFF8
  1103                           tblptrh	equ	0xFF7
  1104                           tblptrl	equ	0xFF6
  1105                           tablat	equ	0xFF5
  1106                           postinc0	equ	0xFEE
  1107                           wreg	equ	0xFE8
  1108                           postdec1	equ	0xFE5
  1109                           fsr1l	equ	0xFE1
  1110                           
  1111                           	psect	cstackBANK0
  1112  0000DE                     __pcstackBANK0:
  1113                           	opt stack 0
  1114  0000DE                     drawtext@x:
  1115                           	opt stack 0
  1116                           
  1117                           ; 1 bytes @ 0x0
  1118  0000DE                     	ds	1
  1119  0000DF                     drawtext@textsize:
  1120                           	opt stack 0
  1121                           
  1122                           ; 2 bytes @ 0x1
  1123  0000DF                     	ds	2
  1124  0000E1                     drawtext@i:
  1125                           	opt stack 0
  1126                           
  1127                           ; 2 bytes @ 0x3
  1128  0000E1                     	ds	2
  1129  0000E3                     drawtext@cursor_y:
  1130                           	opt stack 0
  1131                           
  1132                           ; 1 bytes @ 0x5
  1133  0000E3                     	ds	1
  1134  0000E4                     drawtext@cursor_x:
  1135                           	opt stack 0
  1136                           
  1137                           ; 1 bytes @ 0x6
  1138  0000E4                     	ds	1
  1139                           tblptru	equ	0xFF8
  1140                           tblptrh	equ	0xFF7
  1141                           tblptrl	equ	0xFF6
  1142                           tablat	equ	0xFF5
  1143                           postinc0	equ	0xFEE
  1144                           wreg	equ	0xFE8
  1145                           postdec1	equ	0xFE5
  1146                           fsr1l	equ	0xFE1
  1147                           
  1148                           	psect	cstackCOMRAM
  1149  000001                     __pcstackCOMRAM:
  1150                           	opt stack 0
  1151  000001                     ??_chkisr:
  1152  000001                     
  1153                           ; 1 bytes @ 0x0
  1154  000001                     	ds	14
  1155  00000F                     ?_strlen:
  1156                           	opt stack 0
  1157  00000F                     ?___wmul:
  1158                           	opt stack 0
  1159  00000F                     ?___awdiv:
  1160                           	opt stack 0
  1161  00000F                     ?___lwdiv:
  1162                           	opt stack 0
  1163  00000F                     spiwrite@x:
  1164                           	opt stack 0
  1165  00000F                     putch@c:
  1166                           	opt stack 0
  1167  00000F                     I2C_Read@ack:
  1168                           	opt stack 0
  1169  00000F                     I2C_Write@outByte:
  1170                           	opt stack 0
  1171  00000F                     Wait_One_Sec@i:
  1172                           	opt stack 0
  1173  00000F                     OpenUSART@spbrg:
  1174                           	opt stack 0
  1175  00000F                     ___wmul@multiplier:
  1176                           	opt stack 0
  1177  00000F                     ___awdiv@dividend:
  1178                           	opt stack 0
  1179  00000F                     ___lwdiv@dividend:
  1180                           	opt stack 0
  1181  00000F                     strcpy@to:
  1182                           	opt stack 0
  1183  00000F                     strlen@s:
  1184                           	opt stack 0
  1185  00000F                     I2C_Init@c:
  1186                           	opt stack 0
  1187                           
  1188                           ; 4 bytes @ 0xE
  1189  00000F                     	ds	1
  1190  000010                     spiwrite@spidata:
  1191                           	opt stack 0
  1192  000010                     I2C_Read@n:
  1193                           	opt stack 0
  1194  000010                     I2C_Write@n:
  1195                           	opt stack 0
  1196                           
  1197                           ; 1 bytes @ 0xF
  1198  000010                     	ds	1
  1199  000011                     ??_strlen:
  1200  000011                     write_command@cmd_:
  1201                           	opt stack 0
  1202  000011                     write_data@data_:
  1203                           	opt stack 0
  1204  000011                     I2C_Read@inByte:
  1205                           	opt stack 0
  1206  000011                     I2C_Write_Cmd_Only@Cmd:
  1207                           	opt stack 0
  1208  000011                     I2C_Write_Cmd_Write_Data@Cmd:
  1209                           	opt stack 0
  1210  000011                     OpenUSART@config:
  1211                           	opt stack 0
  1212  000011                     ___wmul@multiplicand:
  1213                           	opt stack 0
  1214  000011                     ___awdiv@divisor:
  1215                           	opt stack 0
  1216  000011                     ___lwdiv@divisor:
  1217                           	opt stack 0
  1218  000011                     strcpy@from:
  1219                           	opt stack 0
  1220                           
  1221                           ; 2 bytes @ 0x10
  1222  000011                     	ds	1
  1223  000012                     ?_DS1621_Read_Temp:
  1224                           	opt stack 0
  1225  000012                     setAddrWindow@y0:
  1226                           	opt stack 0
  1227  000012                     I2C_Write_Cmd_Only@Device:
  1228                           	opt stack 0
  1229  000012                     I2C_Write_Cmd_Write_Data@Data_Out:
  1230                           	opt stack 0
  1231                           
  1232                           ; 1 bytes @ 0x11
  1233  000012                     	ds	1
  1234  000013                     setAddrWindow@x1:
  1235                           	opt stack 0
  1236  000013                     I2C_Write_Cmd_Write_Data@Device:
  1237                           	opt stack 0
  1238  000013                     ___awdiv@counter:
  1239                           	opt stack 0
  1240  000013                     ___wmul@product:
  1241                           	opt stack 0
  1242  000013                     ___lwdiv@quotient:
  1243                           	opt stack 0
  1244  000013                     strcpy@cp:
  1245                           	opt stack 0
  1246  000013                     strlen@cp:
  1247                           	opt stack 0
  1248                           
  1249                           ; 2 bytes @ 0x12
  1250  000013                     	ds	1
  1251  000014                     setAddrWindow@y1:
  1252                           	opt stack 0
  1253  000014                     DS1621_Init@Device:
  1254                           	opt stack 0
  1255  000014                     DS1621_Read_Temp@Cmd:
  1256                           	opt stack 0
  1257  000014                     ___awdiv@sign:
  1258                           	opt stack 0
  1259                           
  1260                           ; 1 bytes @ 0x13
  1261  000014                     	ds	1
  1262  000015                     setAddrWindow@x0:
  1263                           	opt stack 0
  1264  000015                     DS1621_Read_Temp@Data_Ret:
  1265                           	opt stack 0
  1266  000015                     ___lwdiv@counter:
  1267                           	opt stack 0
  1268  000015                     delay_ms@ms:
  1269                           	opt stack 0
  1270  000015                     ___awdiv@quotient:
  1271                           	opt stack 0
  1272                           
  1273                           ; 2 bytes @ 0x14
  1274  000015                     	ds	1
  1275  000016                     ?___lwmod:
  1276                           	opt stack 0
  1277  000016                     drawPixel@y:
  1278                           	opt stack 0
  1279  000016                     drawFastVLine@y:
  1280                           	opt stack 0
  1281  000016                     fillRectangle@y:
  1282                           	opt stack 0
  1283  000016                     DS1621_Read_Temp@Device:
  1284                           	opt stack 0
  1285  000016                     ___lwmod@dividend:
  1286                           	opt stack 0
  1287                           
  1288                           ; 2 bytes @ 0x15
  1289  000016                     	ds	1
  1290  000017                     ??_delay_ms:
  1291  000017                     drawFastVLine@h:
  1292                           	opt stack 0
  1293  000017                     fillRectangle@w:
  1294                           	opt stack 0
  1295  000017                     drawPixel@color:
  1296                           	opt stack 0
  1297                           
  1298                           ; 2 bytes @ 0x16
  1299  000017                     	ds	1
  1300  000018                     fillRectangle@h:
  1301                           	opt stack 0
  1302  000018                     drawFastVLine@color:
  1303                           	opt stack 0
  1304  000018                     ___lwmod@divisor:
  1305                           	opt stack 0
  1306                           
  1307                           ; 2 bytes @ 0x17
  1308  000018                     	ds	1
  1309  000019                     drawPixel@x:
  1310                           	opt stack 0
  1311  000019                     delay_ms@count:
  1312                           	opt stack 0
  1313  000019                     fillRectangle@color:
  1314                           	opt stack 0
  1315                           
  1316                           ; 2 bytes @ 0x18
  1317  000019                     	ds	1
  1318  00001A                     ??_drawFastVLine:
  1319  00001A                     ___lwmod@counter:
  1320                           	opt stack 0
  1321                           
  1322                           ; 1 bytes @ 0x19
  1323  00001A                     	ds	1
  1324  00001B                     ??_fillRectangle:
  1325  00001B                     ?_printf:
  1326                           	opt stack 0
  1327  00001B                     printf@f:
  1328                           	opt stack 0
  1329                           
  1330                           ; 2 bytes @ 0x1A
  1331  00001B                     	ds	3
  1332  00001E                     drawFastVLine@hi:
  1333                           	opt stack 0
  1334                           
  1335                           ; 1 bytes @ 0x1D
  1336  00001E                     	ds	1
  1337  00001F                     drawFastVLine@lo:
  1338                           	opt stack 0
  1339  00001F                     fillRectangle@hi:
  1340                           	opt stack 0
  1341                           
  1342                           ; 1 bytes @ 0x1E
  1343  00001F                     	ds	1
  1344  000020                     drawFastVLine@x:
  1345                           	opt stack 0
  1346  000020                     fillRectangle@lo:
  1347                           	opt stack 0
  1348                           
  1349                           ; 1 bytes @ 0x1F
  1350  000020                     	ds	1
  1351  000021                     ??_printf:
  1352  000021                     fillRect@y:
  1353                           	opt stack 0
  1354  000021                     fillRectangle@x:
  1355                           	opt stack 0
  1356                           
  1357                           ; 1 bytes @ 0x20
  1358  000021                     	ds	1
  1359  000022                     fillRect@w:
  1360                           	opt stack 0
  1361  000022                     fillScreen@color:
  1362                           	opt stack 0
  1363  000022                     printf@ap:
  1364                           	opt stack 0
  1365                           
  1366                           ; 2 bytes @ 0x21
  1367  000022                     	ds	1
  1368  000023                     fillRect@h:
  1369                           	opt stack 0
  1370                           
  1371                           ; 1 bytes @ 0x22
  1372  000023                     	ds	1
  1373  000024                     printf@flag:
  1374                           	opt stack 0
  1375  000024                     fillRect@color:
  1376                           	opt stack 0
  1377                           
  1378                           ; 2 bytes @ 0x23
  1379  000024                     	ds	1
  1380  000025                     printf@prec:
  1381                           	opt stack 0
  1382                           
  1383                           ; 1 bytes @ 0x24
  1384  000025                     	ds	1
  1385  000026                     ??_fillRect:
  1386  000026                     printf@val:
  1387                           	opt stack 0
  1388                           
  1389                           ; 2 bytes @ 0x25
  1390  000026                     	ds	2
  1391  000028                     printf@c:
  1392                           	opt stack 0
  1393                           
  1394                           ; 1 bytes @ 0x27
  1395  000028                     	ds	1
  1396  000029                     fillRect@x:
  1397                           	opt stack 0
  1398                           
  1399                           ; 1 bytes @ 0x28
  1400  000029                     	ds	1
  1401  00002A                     fillRect@i:
  1402                           	opt stack 0
  1403                           
  1404                           ; 2 bytes @ 0x29
  1405  00002A                     	ds	2
  1406  00002C                     drawChar@y:
  1407                           	opt stack 0
  1408                           
  1409                           ; 1 bytes @ 0x2B
  1410  00002C                     	ds	1
  1411  00002D                     drawChar@c:
  1412                           	opt stack 0
  1413                           
  1414                           ; 1 bytes @ 0x2C
  1415  00002D                     	ds	1
  1416  00002E                     drawChar@color:
  1417                           	opt stack 0
  1418                           
  1419                           ; 2 bytes @ 0x2D
  1420  00002E                     	ds	2
  1421  000030                     drawChar@bg:
  1422                           	opt stack 0
  1423                           
  1424                           ; 2 bytes @ 0x2F
  1425  000030                     	ds	2
  1426  000032                     drawChar@size:
  1427                           	opt stack 0
  1428                           
  1429                           ; 1 bytes @ 0x31
  1430  000032                     	ds	1
  1431  000033                     drawChar@line:
  1432                           	opt stack 0
  1433                           
  1434                           ; 1 bytes @ 0x32
  1435  000033                     	ds	1
  1436  000034                     drawChar@x:
  1437                           	opt stack 0
  1438                           
  1439                           ; 1 bytes @ 0x33
  1440  000034                     	ds	1
  1441  000035                     drawChar@j:
  1442                           	opt stack 0
  1443                           
  1444                           ; 1 bytes @ 0x34
  1445  000035                     	ds	1
  1446  000036                     drawChar@i:
  1447                           	opt stack 0
  1448                           
  1449                           ; 1 bytes @ 0x35
  1450  000036                     	ds	1
  1451  000037                     drawtext@y:
  1452                           	opt stack 0
  1453                           
  1454                           ; 1 bytes @ 0x36
  1455  000037                     	ds	1
  1456  000038                     drawtext@_text:
  1457                           	opt stack 0
  1458                           
  1459                           ; 2 bytes @ 0x37
  1460  000038                     	ds	2
  1461  00003A                     drawtext@color:
  1462                           	opt stack 0
  1463                           
  1464                           ; 2 bytes @ 0x39
  1465  00003A                     	ds	2
  1466  00003C                     drawtext@bg:
  1467                           	opt stack 0
  1468                           
  1469                           ; 2 bytes @ 0x3B
  1470  00003C                     	ds	2
  1471  00003E                     drawtext@size:
  1472                           	opt stack 0
  1473                           
  1474                           ; 1 bytes @ 0x3D
  1475  00003E                     	ds	1
  1476  00003F                     ??_drawtext:
  1477                           
  1478                           ; 0 bytes @ 0x3E
  1479  00003F                     	ds	2
  1480  000041                     main@tempF:
  1481                           	opt stack 0
  1482                           
  1483                           ; 1 bytes @ 0x40
  1484  000041                     	ds	1
  1485  000042                     main@tempC:
  1486                           	opt stack 0
  1487                           
  1488                           ; 1 bytes @ 0x41
  1489  000042                     	ds	1
  1490                           tblptru	equ	0xFF8
  1491                           tblptrh	equ	0xFF7
  1492                           tblptrl	equ	0xFF6
  1493                           tablat	equ	0xFF5
  1494                           postinc0	equ	0xFEE
  1495                           wreg	equ	0xFE8
  1496                           postdec1	equ	0xFE5
  1497                           fsr1l	equ	0xFE1
  1498                           
  1499 ;;
  1500 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1501 ;;
  1502 ;; *************** function _main *****************
  1503 ;; Defined at:
  1504 ;;		line 123 in file "Lab11p1.c"
  1505 ;; Parameters:    Size  Location     Type
  1506 ;;		None
  1507 ;; Auto vars:     Size  Location     Type
  1508 ;;  tempC           1   65[COMRAM] unsigned char 
  1509 ;;  tempF           1   64[COMRAM] unsigned char 
  1510 ;; Return value:  Size  Location     Type
  1511 ;;		None               void
  1512 ;; Registers used:
  1513 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1514 ;; Tracked objects:
  1515 ;;		On entry : 0/0
  1516 ;;		On exit  : 0/0
  1517 ;;		Unchanged: 0/0
  1518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1520 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1522 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1523 ;;Total ram usage:        2 bytes
  1524 ;; Hardware stack levels required when called:   10
  1525 ;; This function calls:
  1526 ;;		_DS1621_Read_Temp
  1527 ;;		_Do_Init
  1528 ;;		_Wait_One_Sec
  1529 ;;		___awdiv
  1530 ;;		_printf
  1531 ;; This function is called by:
  1532 ;;		Startup code after reset
  1533 ;; This function uses a non-reentrant model
  1534 ;;
  1535                           
  1536                           	psect	text0
  1537  000A98                     __ptext0:
  1538                           	opt stack 0
  1539  000A98                     _main:
  1540                           	opt stack 21
  1541                           
  1542                           ;Lab11p1.c: 125: Do_Init();
  1543                           
  1544                           ;incstack = 0
  1545  000A98  EC09  F006         	call	_Do_Init	;wreg free
  1546  000A9C  D000               	goto	l3969
  1547  000A9E                     l3969:
  1548                           
  1549                           ;Lab11p1.c: 128: {
  1550                           ;Lab11p1.c: 129: char tempC = DS1621_Read_Temp();
  1551  000A9E  ECA6  F006         	call	_DS1621_Read_Temp	;wreg free
  1552  000AA2  5012               	movf	?_DS1621_Read_Temp,w,c
  1553  000AA4  6E42               	movwf	main@tempC,c
  1554                           
  1555                           ;Lab11p1.c: 130: char tempF = (tempC * 9 / 5) + 32;
  1556  000AA6  5042               	movf	main@tempC,w,c
  1557  000AA8  0D09               	mullw	9
  1558  000AAA  CFF3 F00F          	movff	prodl,___awdiv@dividend
  1559  000AAE  CFF4 F010          	movff	prodh,___awdiv@dividend+1
  1560  000AB2  0E00               	movlw	0
  1561  000AB4  6E12               	movwf	___awdiv@divisor+1,c
  1562  000AB6  0E05               	movlw	5
  1563  000AB8  6E11               	movwf	___awdiv@divisor,c
  1564  000ABA  EC4C  F003         	call	___awdiv	;wreg free
  1565  000ABE  500F               	movf	?___awdiv,w,c
  1566  000AC0  0F20               	addlw	32
  1567  000AC2  6E41               	movwf	main@tempF,c
  1568                           
  1569                           ;Lab11p1.c: 131: printf (" Temperature = %d degreesC = %d degreesF\r\n", tempC, tempF);
  1570  000AC4  0EB8               	movlw	low STR_1
  1571  000AC6  6E1B               	movwf	printf@f,c
  1572  000AC8  0EFF               	movlw	high STR_1
  1573  000ACA  6E1C               	movwf	printf@f+1,c
  1574  000ACC  C042  F01D         	movff	main@tempC,?_printf+2
  1575  000AD0  6A1E               	clrf	?_printf+3,c
  1576  000AD2  C041  F01F         	movff	main@tempF,?_printf+4
  1577  000AD6  6A20               	clrf	?_printf+5,c
  1578  000AD8  ECB9  F000         	call	_printf	;wreg free
  1579                           
  1580                           ;Lab11p1.c: 132: Wait_One_Sec();
  1581  000ADC  EC1E  F007         	call	_Wait_One_Sec	;wreg free
  1582  000AE0  D7DE               	goto	l3969
  1583  000AE2  EF0C  F000         	goto	start
  1584  000AE6                     __end_of_main:
  1585                           	opt stack 0
  1586                           tblptru	equ	0xFF8
  1587                           tblptrh	equ	0xFF7
  1588                           tblptrl	equ	0xFF6
  1589                           tablat	equ	0xFF5
  1590                           prodh	equ	0xFF4
  1591                           prodl	equ	0xFF3
  1592                           postinc0	equ	0xFEE
  1593                           wreg	equ	0xFE8
  1594                           postdec1	equ	0xFE5
  1595                           fsr1l	equ	0xFE1
  1596                           
  1597 ;; *************** function _printf *****************
  1598 ;; Defined at:
  1599 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1600 ;; Parameters:    Size  Location     Type
  1601 ;;  f               2   26[COMRAM] PTR const unsigned char 
  1602 ;;		 -> STR_1(43), 
  1603 ;; Auto vars:     Size  Location     Type
  1604 ;;  tmpval          4    0        struct .
  1605 ;;  cp              3    0        PTR const unsigned char 
  1606 ;;  val             2   37[COMRAM] unsigned int 
  1607 ;;  ap              2   33[COMRAM] PTR void [1]
  1608 ;;		 -> ?_printf(2), 
  1609 ;;  len             2    0        unsigned int 
  1610 ;;  c               1   39[COMRAM] char 
  1611 ;;  prec            1   36[COMRAM] char 
  1612 ;;  flag            1   35[COMRAM] unsigned char 
  1613 ;; Return value:  Size  Location     Type
  1614 ;;                  2   26[COMRAM] int 
  1615 ;; Registers used:
  1616 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1617 ;; Tracked objects:
  1618 ;;		On entry : 0/0
  1619 ;;		On exit  : 0/0
  1620 ;;		Unchanged: 0/0
  1621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1622 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1623 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1624 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1625 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1626 ;;Total ram usage:       14 bytes
  1627 ;; Hardware stack levels used:    1
  1628 ;; Hardware stack levels required when called:    2
  1629 ;; This function calls:
  1630 ;;		___lwdiv
  1631 ;;		___lwmod
  1632 ;;		_putch
  1633 ;; This function is called by:
  1634 ;;		_main
  1635 ;; This function uses a non-reentrant model
  1636 ;;
  1637                           
  1638                           	psect	text1
  1639  000172                     __ptext1:
  1640                           	opt stack 0
  1641  000172                     _printf:
  1642                           	opt stack 28
  1643                           
  1644                           ;doprnt.c: 466: va_list ap;
  1645                           ;doprnt.c: 499: signed char c;
  1646                           ;doprnt.c: 506: signed char prec;
  1647                           ;doprnt.c: 508: unsigned char flag;
  1648                           ;doprnt.c: 523: union {
  1649                           ;doprnt.c: 524: unsigned long vd;
  1650                           ;doprnt.c: 525: double integ;
  1651                           ;doprnt.c: 526: } tmpval;
  1652                           ;doprnt.c: 528: unsigned int val;
  1653                           ;doprnt.c: 529: unsigned len;
  1654                           ;doprnt.c: 530: const char * cp;
  1655                           ;doprnt.c: 533: *ap = __va_start();
  1656                           
  1657                           ;incstack = 0
  1658  000172  0E1D               	movlw	low (?_printf+2)
  1659  000174  6E22               	movwf	printf@ap,c
  1660  000176  0E00               	movlw	high (?_printf+2)
  1661  000178  6E23               	movwf	printf@ap+1,c
  1662                           
  1663                           ;doprnt.c: 536: while(c = *f++) {
  1664  00017A  D08B               	goto	l2895
  1665  00017C                     l2849:
  1666                           
  1667                           ;doprnt.c: 538: if(c != '%')
  1668  00017C  0E25               	movlw	37
  1669  00017E  1828               	xorwf	printf@c,w,c
  1670  000180  B4D8               	btfsc	status,2,c
  1671  000182  D004               	goto	l2853
  1672                           
  1673                           ;doprnt.c: 540: {
  1674                           ;doprnt.c: 541: (putch(c) );
  1675  000184  5028               	movf	printf@c,w,c
  1676  000186  ECBD  F007         	call	_putch
  1677                           
  1678                           ;doprnt.c: 542: continue;
  1679  00018A  D083               	goto	l2895
  1680  00018C                     l2853:
  1681                           
  1682                           ;doprnt.c: 543: }
  1683                           ;doprnt.c: 548: flag = 0;
  1684  00018C  0E00               	movlw	0
  1685  00018E  6E24               	movwf	printf@flag,c
  1686                           
  1687                           ;doprnt.c: 635: switch(c = *f++) {
  1688  000190  D004               	goto	l2857
  1689                           
  1690                           ;doprnt.c: 638: goto alldone;
  1691                           
  1692                           ;doprnt.c: 637: case 0:
  1693  000192  D08D               	goto	l502
  1694                           
  1695                           ;doprnt.c: 698: case 'i':
  1696                           ;doprnt.c: 699: break;
  1697                           
  1698                           ;doprnt.c: 697: case 'd':
  1699  000194  D015               	goto	l2859
  1700                           
  1701                           ;doprnt.c: 813: continue;
  1702                           
  1703                           ;doprnt.c: 802: default:
  1704  000196  D07D               	goto	l2895
  1705                           
  1706                           ;doprnt.c: 822: }
  1707  000198  D013               	goto	l2859
  1708  00019A                     l2857:
  1709  00019A  C01B  FFF6         	movff	printf@f,tblptrl
  1710  00019E  C01C  FFF7         	movff	printf@f+1,tblptrh
  1711  0001A2  4A1B               	infsnz	printf@f,f,c
  1712  0001A4  2A1C               	incf	printf@f+1,f,c
  1713  0001A6                     	if	0	;tblptru may be non-zero
  1714  0001A6                     	endif
  1715  0001A6                     	if	0	;tblptru may be non-zero
  1716  0001A6                     	endif
  1717  0001A6  0008               	tblrd		*
  1718  0001A8  CFF5 F028          	movff	tablat,printf@c
  1719  0001AC  5028               	movf	printf@c,w,c
  1720                           
  1721                           ; Switch size 1, requested type "space"
  1722                           ; Number of cases is 3, Range of values is 0 to 105
  1723                           ; switch strategies available:
  1724                           ; Name         Instructions Cycles
  1725                           ; simple_byte           10     6 (average)
  1726                           ;	Chosen strategy is simple_byte
  1727  0001AE  0A00               	xorlw	0	; case 0
  1728  0001B0  B4D8               	btfsc	status,2,c
  1729  0001B2  D07D               	goto	l502
  1730  0001B4  0A64               	xorlw	100	; case 100
  1731  0001B6  B4D8               	btfsc	status,2,c
  1732  0001B8  D003               	goto	l2859
  1733  0001BA  0A0D               	xorlw	13	; case 105
  1734  0001BC  A4D8               	btfss	status,2,c
  1735  0001BE  D069               	goto	l2895
  1736  0001C0                     l2859:
  1737                           
  1738                           ;doprnt.c: 1253: {
  1739                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1740  0001C0  C022  FFD9         	movff	printf@ap,fsr2l
  1741  0001C4  C023  FFDA         	movff	printf@ap+1,fsr2h
  1742  0001C8  CFDE F026          	movff	postinc2,printf@val
  1743  0001CC  CFDD F027          	movff	postdec2,printf@val+1
  1744  0001D0  0E02               	movlw	2
  1745  0001D2  2622               	addwf	printf@ap,f,c
  1746  0001D4  0E00               	movlw	0
  1747  0001D6  2223               	addwfc	printf@ap+1,f,c
  1748                           
  1749                           ;doprnt.c: 1261: if((int)val < 0) {
  1750  0001D8  AE27               	btfss	printf@val+1,7,c
  1751  0001DA  D007               	goto	l2869
  1752                           
  1753                           ;doprnt.c: 1262: flag |= 0x03;
  1754  0001DC  0E03               	movlw	3
  1755  0001DE  1224               	iorwf	printf@flag,f,c
  1756                           
  1757                           ;doprnt.c: 1263: val = -val;
  1758  0001E0  6C26               	negf	printf@val,c
  1759  0001E2  1E27               	comf	printf@val+1,f,c
  1760  0001E4  B0D8               	btfsc	status,0,c
  1761  0001E6  2A27               	incf	printf@val+1,f,c
  1762  0001E8  D000               	goto	l2869
  1763  0001EA                     l2869:
  1764                           
  1765                           ;doprnt.c: 1264: }
  1766                           ;doprnt.c: 1266: }
  1767                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1768  0001EA  0E01               	movlw	1
  1769  0001EC  6E28               	movwf	printf@c,c
  1770  0001EE                     l2871:
  1771  0001EE  0E05               	movlw	5
  1772  0001F0  1828               	xorwf	printf@c,w,c
  1773  0001F2  B4D8               	btfsc	status,2,c
  1774  0001F4  D016               	goto	l2883
  1775  0001F6  D001               	goto	l2875
  1776  0001F8  D014               	goto	l2883
  1777  0001FA                     l2875:
  1778                           
  1779                           ;doprnt.c: 1306: if(val < dpowers[c])
  1780  0001FA  5028               	movf	printf@c,w,c
  1781  0001FC  0D02               	mullw	2
  1782  0001FE  0EAE               	movlw	low _dpowers
  1783  000200  24F3               	addwf	prodl,w,c
  1784  000202  6EF6               	movwf	tblptrl,c
  1785  000204  0EFF               	movlw	high _dpowers
  1786  000206  20F4               	addwfc	prodh,w,c
  1787  000208  6EF7               	movwf	tblptrh,c
  1788  00020A                     	if	0	;There are less than 3 active tblptr bytes
  1789  00020A                     	endif
  1790  00020A  0009               	tblrd		*+
  1791  00020C  50F5               	movf	tablat,w,c
  1792  00020E  5C26               	subwf	printf@val,w,c
  1793  000210  0009               	tblrd		*+
  1794  000212  50F5               	movf	tablat,w,c
  1795  000214  5827               	subwfb	printf@val+1,w,c
  1796  000216  A0D8               	btfss	status,0,c
  1797  000218  D004               	goto	l2883
  1798  00021A  D001               	goto	l2879
  1799                           
  1800                           ;doprnt.c: 1307: break;
  1801  00021C  D002               	goto	l2883
  1802  00021E                     l2879:
  1803  00021E  2A28               	incf	printf@c,f,c
  1804  000220  D7E6               	goto	l2871
  1805  000222                     l2883:
  1806                           
  1807                           ;doprnt.c: 1422: {
  1808                           ;doprnt.c: 1438: if(flag & 0x03)
  1809  000222  C024  F021         	movff	printf@flag,??_printf
  1810  000226  0E03               	movlw	3
  1811  000228  1621               	andwf	??_printf,f,c
  1812  00022A  B4D8               	btfsc	status,2,c
  1813  00022C  D004               	goto	l2887
  1814                           
  1815                           ;doprnt.c: 1439: (putch('-') );
  1816  00022E  0E2D               	movlw	45
  1817  000230  ECBD  F007         	call	_putch
  1818  000234  D000               	goto	l2887
  1819  000236                     l2887:
  1820                           
  1821                           ;doprnt.c: 1469: }
  1822                           ;doprnt.c: 1472: prec = c;
  1823  000236  C028  F025         	movff	printf@c,printf@prec
  1824                           
  1825                           ;doprnt.c: 1474: while(prec--) {
  1826  00023A  D025               	goto	l2893
  1827  00023C                     l2889:
  1828                           
  1829                           ;doprnt.c: 1478: {
  1830                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1831  00023C  5025               	movf	printf@prec,w,c
  1832  00023E  0D02               	mullw	2
  1833  000240  0EAE               	movlw	low _dpowers
  1834  000242  24F3               	addwf	prodl,w,c
  1835  000244  6EF6               	movwf	tblptrl,c
  1836  000246  0EFF               	movlw	high _dpowers
  1837  000248  20F4               	addwfc	prodh,w,c
  1838  00024A  6EF7               	movwf	tblptrh,c
  1839  00024C                     	if	0	;There are less than 3 active tblptr bytes
  1840  00024C                     	endif
  1841  00024C  0009               	tblrd		*+
  1842  00024E  CFF5 F011          	movff	tablat,___lwdiv@divisor
  1843  000252  000A               	tblrd		*-
  1844  000254  CFF5 F012          	movff	tablat,___lwdiv@divisor+1
  1845  000258  C026  F00F         	movff	printf@val,___lwdiv@dividend
  1846  00025C  C027  F010         	movff	printf@val+1,___lwdiv@dividend+1
  1847  000260  ECCB  F004         	call	___lwdiv	;wreg free
  1848  000264  C00F  F016         	movff	?___lwdiv,___lwmod@dividend
  1849  000268  C010  F017         	movff	?___lwdiv+1,___lwmod@dividend+1
  1850  00026C  0E00               	movlw	0
  1851  00026E  6E19               	movwf	___lwmod@divisor+1,c
  1852  000270  0E0A               	movlw	10
  1853  000272  6E18               	movwf	___lwmod@divisor,c
  1854  000274  EC9A  F005         	call	___lwmod	;wreg free
  1855  000278  5016               	movf	?___lwmod,w,c
  1856  00027A  0F30               	addlw	48
  1857  00027C  6E28               	movwf	printf@c,c
  1858                           
  1859                           ;doprnt.c: 1523: }
  1860                           ;doprnt.c: 1524: (putch(c) );
  1861  00027E  5028               	movf	printf@c,w,c
  1862  000280  ECBD  F007         	call	_putch
  1863  000284  D000               	goto	l2893
  1864  000286                     l2893:
  1865  000286  0625               	decf	printf@prec,f,c
  1866  000288  2825               	incf	printf@prec,w,c
  1867  00028A  B4D8               	btfsc	status,2,c
  1868  00028C  D002               	goto	l2895
  1869  00028E  D7D6               	goto	l2889
  1870  000290  D000               	goto	l2895
  1871  000292                     l2895:
  1872  000292  C01B  FFF6         	movff	printf@f,tblptrl
  1873  000296  C01C  FFF7         	movff	printf@f+1,tblptrh
  1874  00029A  4A1B               	infsnz	printf@f,f,c
  1875  00029C  2A1C               	incf	printf@f+1,f,c
  1876  00029E                     	if	0	;tblptru may be non-zero
  1877  00029E                     	endif
  1878  00029E                     	if	0	;tblptru may be non-zero
  1879  00029E                     	endif
  1880  00029E  0008               	tblrd		*
  1881  0002A0  CFF5 F028          	movff	tablat,printf@c
  1882  0002A4  5028               	movf	printf@c,w,c
  1883  0002A6  B4D8               	btfsc	status,2,c
  1884  0002A8  D002               	goto	l502
  1885  0002AA  D768               	goto	l2849
  1886  0002AC  D000               	goto	l502
  1887  0002AE                     l502:
  1888  0002AE  0012               	return		;funcret
  1889  0002B0                     __end_of_printf:
  1890                           	opt stack 0
  1891                           tblptru	equ	0xFF8
  1892                           tblptrh	equ	0xFF7
  1893                           tblptrl	equ	0xFF6
  1894                           tablat	equ	0xFF5
  1895                           prodh	equ	0xFF4
  1896                           prodl	equ	0xFF3
  1897                           postinc0	equ	0xFEE
  1898                           wreg	equ	0xFE8
  1899                           postdec1	equ	0xFE5
  1900                           fsr1l	equ	0xFE1
  1901                           postinc2	equ	0xFDE
  1902                           postdec2	equ	0xFDD
  1903                           fsr2h	equ	0xFDA
  1904                           fsr2l	equ	0xFD9
  1905                           status	equ	0xFD8
  1906                           
  1907 ;; *************** function _putch *****************
  1908 ;; Defined at:
  1909 ;;		line 82 in file "Lab11p1.c"
  1910 ;; Parameters:    Size  Location     Type
  1911 ;;  c               1    wreg     unsigned char 
  1912 ;; Auto vars:     Size  Location     Type
  1913 ;;  c               1   14[COMRAM] unsigned char 
  1914 ;; Return value:  Size  Location     Type
  1915 ;;		None               void
  1916 ;; Registers used:
  1917 ;;		wreg
  1918 ;; Tracked objects:
  1919 ;;		On entry : 0/0
  1920 ;;		On exit  : 0/0
  1921 ;;		Unchanged: 0/0
  1922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1924 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1926 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1927 ;;Total ram usage:        1 bytes
  1928 ;; Hardware stack levels used:    1
  1929 ;; Hardware stack levels required when called:    1
  1930 ;; This function calls:
  1931 ;;		Nothing
  1932 ;; This function is called by:
  1933 ;;		_printf
  1934 ;; This function uses a non-reentrant model
  1935 ;;
  1936                           
  1937                           	psect	text2
  1938  000F7A                     __ptext2:
  1939                           	opt stack 0
  1940  000F7A                     _putch:
  1941                           	opt stack 28
  1942                           
  1943                           ;incstack = 0
  1944                           ;putch@c stored from wreg
  1945  000F7A  6E0F               	movwf	putch@c,c
  1946                           
  1947                           ;Lab11p1.c: 84: while (!TRMT);
  1948  000F7C  D000               	goto	l314
  1949  000F7E                     l314:
  1950  000F7E  A2AC               	btfss	4012,1,c	;volatile
  1951  000F80  D7FE               	goto	l314
  1952                           
  1953                           ;Lab11p1.c: 85: TXREG = c;
  1954  000F82  C00F  FFAD         	movff	putch@c,4013	;volatile
  1955  000F86  0012               	return		;funcret
  1956  000F88                     __end_of_putch:
  1957                           	opt stack 0
  1958                           tblptru	equ	0xFF8
  1959                           tblptrh	equ	0xFF7
  1960                           tblptrl	equ	0xFF6
  1961                           tablat	equ	0xFF5
  1962                           prodh	equ	0xFF4
  1963                           prodl	equ	0xFF3
  1964                           postinc0	equ	0xFEE
  1965                           wreg	equ	0xFE8
  1966                           postdec1	equ	0xFE5
  1967                           fsr1l	equ	0xFE1
  1968                           postinc2	equ	0xFDE
  1969                           postdec2	equ	0xFDD
  1970                           fsr2h	equ	0xFDA
  1971                           fsr2l	equ	0xFD9
  1972                           status	equ	0xFD8
  1973                           
  1974 ;; *************** function ___lwmod *****************
  1975 ;; Defined at:
  1976 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  1977 ;; Parameters:    Size  Location     Type
  1978 ;;  dividend        2   21[COMRAM] unsigned int 
  1979 ;;  divisor         2   23[COMRAM] unsigned int 
  1980 ;; Auto vars:     Size  Location     Type
  1981 ;;  counter         1   25[COMRAM] unsigned char 
  1982 ;; Return value:  Size  Location     Type
  1983 ;;                  2   21[COMRAM] unsigned int 
  1984 ;; Registers used:
  1985 ;;		wreg, status,2, status,0
  1986 ;; Tracked objects:
  1987 ;;		On entry : 0/0
  1988 ;;		On exit  : 0/0
  1989 ;;		Unchanged: 0/0
  1990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1991 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1992 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1994 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1995 ;;Total ram usage:        5 bytes
  1996 ;; Hardware stack levels used:    1
  1997 ;; Hardware stack levels required when called:    1
  1998 ;; This function calls:
  1999 ;;		Nothing
  2000 ;; This function is called by:
  2001 ;;		_printf
  2002 ;; This function uses a non-reentrant model
  2003 ;;
  2004                           
  2005                           	psect	text3
  2006  000B34                     __ptext3:
  2007                           	opt stack 0
  2008  000B34                     ___lwmod:
  2009                           	opt stack 28
  2010                           
  2011                           ;incstack = 0
  2012  000B34  5018               	movf	___lwmod@divisor,w,c
  2013  000B36  1019               	iorwf	___lwmod@divisor+1,w,c
  2014  000B38  B4D8               	btfsc	status,2,c
  2015  000B3A  D01D               	goto	l1066
  2016  000B3C  0E01               	movlw	1
  2017  000B3E  6E1A               	movwf	___lwmod@counter,c
  2018  000B40  D005               	goto	l2737
  2019  000B42                     l2735:
  2020  000B42  90D8               	bcf	status,0,c
  2021  000B44  3618               	rlcf	___lwmod@divisor,f,c
  2022  000B46  3619               	rlcf	___lwmod@divisor+1,f,c
  2023  000B48  2A1A               	incf	___lwmod@counter,f,c
  2024  000B4A  D000               	goto	l2737
  2025  000B4C                     l2737:
  2026  000B4C  BE19               	btfsc	___lwmod@divisor+1,7,c
  2027  000B4E  D002               	goto	l2739
  2028  000B50  D7F8               	goto	l2735
  2029  000B52  D000               	goto	l2739
  2030  000B54                     l2739:
  2031  000B54  5018               	movf	___lwmod@divisor,w,c
  2032  000B56  5C16               	subwf	___lwmod@dividend,w,c
  2033  000B58  5019               	movf	___lwmod@divisor+1,w,c
  2034  000B5A  5817               	subwfb	___lwmod@dividend+1,w,c
  2035  000B5C  A0D8               	btfss	status,0,c
  2036  000B5E  D005               	goto	l2743
  2037  000B60  5018               	movf	___lwmod@divisor,w,c
  2038  000B62  5E16               	subwf	___lwmod@dividend,f,c
  2039  000B64  5019               	movf	___lwmod@divisor+1,w,c
  2040  000B66  5A17               	subwfb	___lwmod@dividend+1,f,c
  2041  000B68  D000               	goto	l2743
  2042  000B6A                     l2743:
  2043  000B6A  90D8               	bcf	status,0,c
  2044  000B6C  3219               	rrcf	___lwmod@divisor+1,f,c
  2045  000B6E  3218               	rrcf	___lwmod@divisor,f,c
  2046  000B70  2E1A               	decfsz	___lwmod@counter,f,c
  2047  000B72  D7F0               	goto	l2739
  2048  000B74  D000               	goto	l1066
  2049  000B76                     l1066:
  2050  000B76  C016  F016         	movff	___lwmod@dividend,?___lwmod
  2051  000B7A  C017  F017         	movff	___lwmod@dividend+1,?___lwmod+1
  2052  000B7E  0012               	return		;funcret
  2053  000B80                     __end_of___lwmod:
  2054                           	opt stack 0
  2055                           tblptru	equ	0xFF8
  2056                           tblptrh	equ	0xFF7
  2057                           tblptrl	equ	0xFF6
  2058                           tablat	equ	0xFF5
  2059                           prodh	equ	0xFF4
  2060                           prodl	equ	0xFF3
  2061                           postinc0	equ	0xFEE
  2062                           wreg	equ	0xFE8
  2063                           postdec1	equ	0xFE5
  2064                           fsr1l	equ	0xFE1
  2065                           postinc2	equ	0xFDE
  2066                           postdec2	equ	0xFDD
  2067                           fsr2h	equ	0xFDA
  2068                           fsr2l	equ	0xFD9
  2069                           status	equ	0xFD8
  2070                           
  2071 ;; *************** function ___lwdiv *****************
  2072 ;; Defined at:
  2073 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2074 ;; Parameters:    Size  Location     Type
  2075 ;;  dividend        2   14[COMRAM] unsigned int 
  2076 ;;  divisor         2   16[COMRAM] unsigned int 
  2077 ;; Auto vars:     Size  Location     Type
  2078 ;;  quotient        2   18[COMRAM] unsigned int 
  2079 ;;  counter         1   20[COMRAM] unsigned char 
  2080 ;; Return value:  Size  Location     Type
  2081 ;;                  2   14[COMRAM] unsigned int 
  2082 ;; Registers used:
  2083 ;;		wreg, status,2, status,0
  2084 ;; Tracked objects:
  2085 ;;		On entry : 0/0
  2086 ;;		On exit  : 0/0
  2087 ;;		Unchanged: 0/0
  2088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2089 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2090 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2092 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2093 ;;Total ram usage:        7 bytes
  2094 ;; Hardware stack levels used:    1
  2095 ;; Hardware stack levels required when called:    1
  2096 ;; This function calls:
  2097 ;;		Nothing
  2098 ;; This function is called by:
  2099 ;;		_printf
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103                           	psect	text4
  2104  000996                     __ptext4:
  2105                           	opt stack 0
  2106  000996                     ___lwdiv:
  2107                           	opt stack 28
  2108                           
  2109                           ;incstack = 0
  2110  000996  0E00               	movlw	0
  2111  000998  6E14               	movwf	___lwdiv@quotient+1,c
  2112  00099A  0E00               	movlw	0
  2113  00099C  6E13               	movwf	___lwdiv@quotient,c
  2114  00099E  5011               	movf	___lwdiv@divisor,w,c
  2115  0009A0  1012               	iorwf	___lwdiv@divisor+1,w,c
  2116  0009A2  B4D8               	btfsc	status,2,c
  2117  0009A4  D021               	goto	l1056
  2118  0009A6  0E01               	movlw	1
  2119  0009A8  6E15               	movwf	___lwdiv@counter,c
  2120  0009AA  D005               	goto	l2717
  2121  0009AC                     l2715:
  2122  0009AC  90D8               	bcf	status,0,c
  2123  0009AE  3611               	rlcf	___lwdiv@divisor,f,c
  2124  0009B0  3612               	rlcf	___lwdiv@divisor+1,f,c
  2125  0009B2  2A15               	incf	___lwdiv@counter,f,c
  2126  0009B4  D000               	goto	l2717
  2127  0009B6                     l2717:
  2128  0009B6  BE12               	btfsc	___lwdiv@divisor+1,7,c
  2129  0009B8  D002               	goto	l2719
  2130  0009BA  D7F8               	goto	l2715
  2131  0009BC  D000               	goto	l2719
  2132  0009BE                     l2719:
  2133  0009BE  90D8               	bcf	status,0,c
  2134  0009C0  3613               	rlcf	___lwdiv@quotient,f,c
  2135  0009C2  3614               	rlcf	___lwdiv@quotient+1,f,c
  2136  0009C4  5011               	movf	___lwdiv@divisor,w,c
  2137  0009C6  5C0F               	subwf	___lwdiv@dividend,w,c
  2138  0009C8  5012               	movf	___lwdiv@divisor+1,w,c
  2139  0009CA  5810               	subwfb	___lwdiv@dividend+1,w,c
  2140  0009CC  A0D8               	btfss	status,0,c
  2141  0009CE  D006               	goto	l2727
  2142  0009D0  5011               	movf	___lwdiv@divisor,w,c
  2143  0009D2  5E0F               	subwf	___lwdiv@dividend,f,c
  2144  0009D4  5012               	movf	___lwdiv@divisor+1,w,c
  2145  0009D6  5A10               	subwfb	___lwdiv@dividend+1,f,c
  2146  0009D8  8013               	bsf	___lwdiv@quotient,0,c
  2147  0009DA  D000               	goto	l2727
  2148  0009DC                     l2727:
  2149  0009DC  90D8               	bcf	status,0,c
  2150  0009DE  3212               	rrcf	___lwdiv@divisor+1,f,c
  2151  0009E0  3211               	rrcf	___lwdiv@divisor,f,c
  2152  0009E2  2E15               	decfsz	___lwdiv@counter,f,c
  2153  0009E4  D7EC               	goto	l2719
  2154  0009E6  D000               	goto	l1056
  2155  0009E8                     l1056:
  2156  0009E8  C013  F00F         	movff	___lwdiv@quotient,?___lwdiv
  2157  0009EC  C014  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2158  0009F0  0012               	return		;funcret
  2159  0009F2                     __end_of___lwdiv:
  2160                           	opt stack 0
  2161                           tblptru	equ	0xFF8
  2162                           tblptrh	equ	0xFF7
  2163                           tblptrl	equ	0xFF6
  2164                           tablat	equ	0xFF5
  2165                           prodh	equ	0xFF4
  2166                           prodl	equ	0xFF3
  2167                           postinc0	equ	0xFEE
  2168                           wreg	equ	0xFE8
  2169                           postdec1	equ	0xFE5
  2170                           fsr1l	equ	0xFE1
  2171                           postinc2	equ	0xFDE
  2172                           postdec2	equ	0xFDD
  2173                           fsr2h	equ	0xFDA
  2174                           fsr2l	equ	0xFD9
  2175                           status	equ	0xFD8
  2176                           
  2177 ;; *************** function ___awdiv *****************
  2178 ;; Defined at:
  2179 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  2180 ;; Parameters:    Size  Location     Type
  2181 ;;  dividend        2   14[COMRAM] int 
  2182 ;;  divisor         2   16[COMRAM] int 
  2183 ;; Auto vars:     Size  Location     Type
  2184 ;;  quotient        2   20[COMRAM] int 
  2185 ;;  sign            1   19[COMRAM] unsigned char 
  2186 ;;  counter         1   18[COMRAM] unsigned char 
  2187 ;; Return value:  Size  Location     Type
  2188 ;;                  2   14[COMRAM] int 
  2189 ;; Registers used:
  2190 ;;		wreg, status,2, status,0
  2191 ;; Tracked objects:
  2192 ;;		On entry : 0/0
  2193 ;;		On exit  : 0/0
  2194 ;;		Unchanged: 0/0
  2195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2196 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2197 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2199 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2200 ;;Total ram usage:        8 bytes
  2201 ;; Hardware stack levels used:    1
  2202 ;; Hardware stack levels required when called:    1
  2203 ;; This function calls:
  2204 ;;		Nothing
  2205 ;; This function is called by:
  2206 ;;		_main
  2207 ;; This function uses a non-reentrant model
  2208 ;;
  2209                           
  2210                           	psect	text5
  2211  000698                     __ptext5:
  2212                           	opt stack 0
  2213  000698                     ___awdiv:
  2214                           	opt stack 29
  2215                           
  2216                           ;incstack = 0
  2217  000698  0E00               	movlw	0
  2218  00069A  6E14               	movwf	___awdiv@sign,c
  2219  00069C  AE12               	btfss	___awdiv@divisor+1,7,c
  2220  00069E  D007               	goto	l2905
  2221  0006A0  6C11               	negf	___awdiv@divisor,c
  2222  0006A2  1E12               	comf	___awdiv@divisor+1,f,c
  2223  0006A4  B0D8               	btfsc	status,0,c
  2224  0006A6  2A12               	incf	___awdiv@divisor+1,f,c
  2225  0006A8  0E01               	movlw	1
  2226  0006AA  6E14               	movwf	___awdiv@sign,c
  2227  0006AC  D000               	goto	l2905
  2228  0006AE                     l2905:
  2229  0006AE  AE10               	btfss	___awdiv@dividend+1,7,c
  2230  0006B0  D007               	goto	l2911
  2231  0006B2  6C0F               	negf	___awdiv@dividend,c
  2232  0006B4  1E10               	comf	___awdiv@dividend+1,f,c
  2233  0006B6  B0D8               	btfsc	status,0,c
  2234  0006B8  2A10               	incf	___awdiv@dividend+1,f,c
  2235  0006BA  0E01               	movlw	1
  2236  0006BC  1A14               	xorwf	___awdiv@sign,f,c
  2237  0006BE  D000               	goto	l2911
  2238  0006C0                     l2911:
  2239  0006C0  0E00               	movlw	0
  2240  0006C2  6E16               	movwf	___awdiv@quotient+1,c
  2241  0006C4  0E00               	movlw	0
  2242  0006C6  6E15               	movwf	___awdiv@quotient,c
  2243  0006C8  5011               	movf	___awdiv@divisor,w,c
  2244  0006CA  1012               	iorwf	___awdiv@divisor+1,w,c
  2245  0006CC  B4D8               	btfsc	status,2,c
  2246  0006CE  D021               	goto	l2933
  2247  0006D0  0E01               	movlw	1
  2248  0006D2  6E13               	movwf	___awdiv@counter,c
  2249  0006D4  D005               	goto	l2919
  2250  0006D6                     l2917:
  2251  0006D6  90D8               	bcf	status,0,c
  2252  0006D8  3611               	rlcf	___awdiv@divisor,f,c
  2253  0006DA  3612               	rlcf	___awdiv@divisor+1,f,c
  2254  0006DC  2A13               	incf	___awdiv@counter,f,c
  2255  0006DE  D000               	goto	l2919
  2256  0006E0                     l2919:
  2257  0006E0  BE12               	btfsc	___awdiv@divisor+1,7,c
  2258  0006E2  D002               	goto	l2921
  2259  0006E4  D7F8               	goto	l2917
  2260  0006E6  D000               	goto	l2921
  2261  0006E8                     l2921:
  2262  0006E8  90D8               	bcf	status,0,c
  2263  0006EA  3615               	rlcf	___awdiv@quotient,f,c
  2264  0006EC  3616               	rlcf	___awdiv@quotient+1,f,c
  2265  0006EE  5011               	movf	___awdiv@divisor,w,c
  2266  0006F0  5C0F               	subwf	___awdiv@dividend,w,c
  2267  0006F2  5012               	movf	___awdiv@divisor+1,w,c
  2268  0006F4  5810               	subwfb	___awdiv@dividend+1,w,c
  2269  0006F6  A0D8               	btfss	status,0,c
  2270  0006F8  D006               	goto	l2929
  2271  0006FA  5011               	movf	___awdiv@divisor,w,c
  2272  0006FC  5E0F               	subwf	___awdiv@dividend,f,c
  2273  0006FE  5012               	movf	___awdiv@divisor+1,w,c
  2274  000700  5A10               	subwfb	___awdiv@dividend+1,f,c
  2275  000702  8015               	bsf	___awdiv@quotient,0,c
  2276  000704  D000               	goto	l2929
  2277  000706                     l2929:
  2278  000706  90D8               	bcf	status,0,c
  2279  000708  3212               	rrcf	___awdiv@divisor+1,f,c
  2280  00070A  3211               	rrcf	___awdiv@divisor,f,c
  2281  00070C  2E13               	decfsz	___awdiv@counter,f,c
  2282  00070E  D7EC               	goto	l2921
  2283  000710  D000               	goto	l2933
  2284  000712                     l2933:
  2285  000712  5014               	movf	___awdiv@sign,w,c
  2286  000714  B4D8               	btfsc	status,2,c
  2287  000716  D005               	goto	l2937
  2288  000718  6C15               	negf	___awdiv@quotient,c
  2289  00071A  1E16               	comf	___awdiv@quotient+1,f,c
  2290  00071C  B0D8               	btfsc	status,0,c
  2291  00071E  2A16               	incf	___awdiv@quotient+1,f,c
  2292  000720  D000               	goto	l2937
  2293  000722                     l2937:
  2294  000722  C015  F00F         	movff	___awdiv@quotient,?___awdiv
  2295  000726  C016  F010         	movff	___awdiv@quotient+1,?___awdiv+1
  2296  00072A  D000               	goto	l731
  2297  00072C                     l731:
  2298  00072C  0012               	return		;funcret
  2299  00072E                     __end_of___awdiv:
  2300                           	opt stack 0
  2301                           tblptru	equ	0xFF8
  2302                           tblptrh	equ	0xFF7
  2303                           tblptrl	equ	0xFF6
  2304                           tablat	equ	0xFF5
  2305                           prodh	equ	0xFF4
  2306                           prodl	equ	0xFF3
  2307                           postinc0	equ	0xFEE
  2308                           wreg	equ	0xFE8
  2309                           postdec1	equ	0xFE5
  2310                           fsr1l	equ	0xFE1
  2311                           postinc2	equ	0xFDE
  2312                           postdec2	equ	0xFDD
  2313                           fsr2h	equ	0xFDA
  2314                           fsr2l	equ	0xFD9
  2315                           status	equ	0xFD8
  2316                           
  2317 ;; *************** function _Wait_One_Sec *****************
  2318 ;; Defined at:
  2319 ;;		line 95 in file "Lab11p1.c"
  2320 ;; Parameters:    Size  Location     Type
  2321 ;;		None
  2322 ;; Auto vars:     Size  Location     Type
  2323 ;;  i               2   14[COMRAM] int 
  2324 ;; Return value:  Size  Location     Type
  2325 ;;		None               void
  2326 ;; Registers used:
  2327 ;;		wreg, status,2, status,0
  2328 ;; Tracked objects:
  2329 ;;		On entry : 0/0
  2330 ;;		On exit  : 0/0
  2331 ;;		Unchanged: 0/0
  2332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2334 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2336 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2337 ;;Total ram usage:        2 bytes
  2338 ;; Hardware stack levels used:    1
  2339 ;; Hardware stack levels required when called:    1
  2340 ;; This function calls:
  2341 ;;		Nothing
  2342 ;; This function is called by:
  2343 ;;		_main
  2344 ;; This function uses a non-reentrant model
  2345 ;;
  2346                           
  2347                           	psect	text6
  2348  000E3C                     __ptext6:
  2349                           	opt stack 0
  2350  000E3C                     _Wait_One_Sec:
  2351                           	opt stack 29
  2352                           
  2353                           ;Lab11p1.c: 97: for(int i=0; i <17000; i++);
  2354                           
  2355                           ;incstack = 0
  2356  000E3C  0E00               	movlw	0
  2357  000E3E  6E10               	movwf	Wait_One_Sec@i+1,c
  2358  000E40  0E00               	movlw	0
  2359  000E42  6E0F               	movwf	Wait_One_Sec@i,c
  2360  000E44                     l1785:
  2361  000E44  BE10               	btfsc	Wait_One_Sec@i+1,7,c
  2362  000E46  D008               	goto	l1789
  2363  000E48  0E68               	movlw	104
  2364  000E4A  5C0F               	subwf	Wait_One_Sec@i,w,c
  2365  000E4C  0E42               	movlw	66
  2366  000E4E  5810               	subwfb	Wait_One_Sec@i+1,w,c
  2367  000E50  B0D8               	btfsc	status,0,c
  2368  000E52  D005               	goto	l325
  2369  000E54  D001               	goto	l1789
  2370  000E56  D003               	goto	l325
  2371  000E58                     l1789:
  2372  000E58  4A0F               	infsnz	Wait_One_Sec@i,f,c
  2373  000E5A  2A10               	incf	Wait_One_Sec@i+1,f,c
  2374  000E5C  D7F3               	goto	l1785
  2375  000E5E                     l325:
  2376  000E5E  0012               	return		;funcret
  2377  000E60                     __end_of_Wait_One_Sec:
  2378                           	opt stack 0
  2379                           tblptru	equ	0xFF8
  2380                           tblptrh	equ	0xFF7
  2381                           tblptrl	equ	0xFF6
  2382                           tablat	equ	0xFF5
  2383                           prodh	equ	0xFF4
  2384                           prodl	equ	0xFF3
  2385                           postinc0	equ	0xFEE
  2386                           wreg	equ	0xFE8
  2387                           postdec1	equ	0xFE5
  2388                           fsr1l	equ	0xFE1
  2389                           postinc2	equ	0xFDE
  2390                           postdec2	equ	0xFDD
  2391                           fsr2h	equ	0xFDA
  2392                           fsr2l	equ	0xFD9
  2393                           status	equ	0xFD8
  2394                           
  2395 ;; *************** function _Do_Init *****************
  2396 ;; Defined at:
  2397 ;;		line 101 in file "Lab11p1.c"
  2398 ;; Parameters:    Size  Location     Type
  2399 ;;		None
  2400 ;; Auto vars:     Size  Location     Type
  2401 ;;		None
  2402 ;; Return value:  Size  Location     Type
  2403 ;;		None               void
  2404 ;; Registers used:
  2405 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2406 ;; Tracked objects:
  2407 ;;		On entry : 0/0
  2408 ;;		On exit  : 0/0
  2409 ;;		Unchanged: 0/0
  2410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2415 ;;Total ram usage:        0 bytes
  2416 ;; Hardware stack levels used:    1
  2417 ;; Hardware stack levels required when called:    9
  2418 ;; This function calls:
  2419 ;;		_DS1621_Init
  2420 ;;		_I2C_Init
  2421 ;;		_Initialize_Screen
  2422 ;;		_init_UART
  2423 ;; This function is called by:
  2424 ;;		_main
  2425 ;; This function uses a non-reentrant model
  2426 ;;
  2427                           
  2428                           	psect	text7
  2429  000C12                     __ptext7:
  2430                           	opt stack 0
  2431  000C12                     _Do_Init:
  2432                           	opt stack 21
  2433                           
  2434                           ;Lab11p1.c: 103: init_UART();
  2435                           
  2436                           ;incstack = 0
  2437  000C12  EC75  F007         	call	_init_UART	;wreg free
  2438                           
  2439                           ;Lab11p1.c: 105: OSCCON=0x70;
  2440  000C16  0E70               	movlw	112
  2441  000C18  6ED3               	movwf	4051,c	;volatile
  2442                           
  2443                           ;Lab11p1.c: 107: ADCON1= 0x0F;
  2444  000C1A  0E0F               	movlw	15
  2445  000C1C  6EC1               	movwf	4033,c	;volatile
  2446                           
  2447                           ;Lab11p1.c: 108: TRISA = 0x14;
  2448  000C1E  0E14               	movlw	20
  2449  000C20  6E92               	movwf	3986,c	;volatile
  2450                           
  2451                           ;Lab11p1.c: 109: TRISB = 0x01;
  2452  000C22  0E01               	movlw	1
  2453  000C24  6E93               	movwf	3987,c	;volatile
  2454                           
  2455                           ;Lab11p1.c: 110: TRISC = 0x00;
  2456  000C26  0E00               	movlw	0
  2457  000C28  6E94               	movwf	3988,c	;volatile
  2458                           
  2459                           ;Lab11p1.c: 111: TRISD = 0x00;
  2460  000C2A  0E00               	movlw	0
  2461  000C2C  6E95               	movwf	3989,c	;volatile
  2462                           
  2463                           ;Lab11p1.c: 112: TRISE = 0x00;
  2464  000C2E  0E00               	movlw	0
  2465  000C30  6E96               	movwf	3990,c	;volatile
  2466                           
  2467                           ;Lab11p1.c: 113: RBPU=0;
  2468  000C32  9EF1               	bcf	intcon2,7,c	;volatile
  2469                           
  2470                           ;Lab11p1.c: 114: I2C_Init(100000);
  2471  000C34  0EA0               	movlw	160
  2472  000C36  6E0F               	movwf	I2C_Init@c,c
  2473  000C38  0E86               	movlw	134
  2474  000C3A  6E10               	movwf	I2C_Init@c+1,c
  2475  000C3C  0E01               	movlw	1
  2476  000C3E  6E11               	movwf	I2C_Init@c+2,c
  2477  000C40  0E00               	movlw	0
  2478  000C42  6E12               	movwf	I2C_Init@c+3,c
  2479  000C44  ECCA  F007         	call	_I2C_Init	;wreg free
  2480                           
  2481                           ;Lab11p1.c: 116: Initialize_Screen();
  2482  000C48  EC97  F003         	call	_Initialize_Screen	;wreg free
  2483                           
  2484                           ;Lab11p1.c: 117: DS1621_Init();
  2485  000C4C  EC40  F007         	call	_DS1621_Init	;wreg free
  2486  000C50  0012               	return		;funcret
  2487  000C52                     __end_of_Do_Init:
  2488                           	opt stack 0
  2489                           tblptru	equ	0xFF8
  2490                           tblptrh	equ	0xFF7
  2491                           tblptrl	equ	0xFF6
  2492                           tablat	equ	0xFF5
  2493                           prodh	equ	0xFF4
  2494                           prodl	equ	0xFF3
  2495                           intcon2	equ	0xFF1
  2496                           postinc0	equ	0xFEE
  2497                           wreg	equ	0xFE8
  2498                           postdec1	equ	0xFE5
  2499                           fsr1l	equ	0xFE1
  2500                           postinc2	equ	0xFDE
  2501                           postdec2	equ	0xFDD
  2502                           fsr2h	equ	0xFDA
  2503                           fsr2l	equ	0xFD9
  2504                           status	equ	0xFD8
  2505                           
  2506 ;; *************** function _init_UART *****************
  2507 ;; Defined at:
  2508 ;;		line 88 in file "Lab11p1.c"
  2509 ;; Parameters:    Size  Location     Type
  2510 ;;		None
  2511 ;; Auto vars:     Size  Location     Type
  2512 ;;		None
  2513 ;; Return value:  Size  Location     Type
  2514 ;;		None               void
  2515 ;; Registers used:
  2516 ;;		wreg, status,2, cstack
  2517 ;; Tracked objects:
  2518 ;;		On entry : 0/0
  2519 ;;		On exit  : 0/0
  2520 ;;		Unchanged: 0/0
  2521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2526 ;;Total ram usage:        0 bytes
  2527 ;; Hardware stack levels used:    1
  2528 ;; Hardware stack levels required when called:    2
  2529 ;; This function calls:
  2530 ;;		_OpenUSART
  2531 ;; This function is called by:
  2532 ;;		_Do_Init
  2533 ;; This function uses a non-reentrant model
  2534 ;;
  2535                           
  2536                           	psect	text8
  2537  000EEA                     __ptext8:
  2538                           	opt stack 0
  2539  000EEA                     _init_UART:
  2540                           	opt stack 27
  2541                           
  2542                           ;Lab11p1.c: 90: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b1111111
      +                          1 & 0b11111111, 25);
  2543                           
  2544                           ;incstack = 0
  2545  000EEA  0E00               	movlw	0
  2546  000EEC  6E10               	movwf	OpenUSART@spbrg+1,c
  2547  000EEE  0E19               	movlw	25
  2548  000EF0  6E0F               	movwf	OpenUSART@spbrg,c
  2549  000EF2  0E3C               	movlw	60
  2550  000EF4  EC5F  F004         	call	_OpenUSART
  2551                           
  2552                           ;Lab11p1.c: 91: OSCCON = 0x70;
  2553  000EF8  0E70               	movlw	112
  2554  000EFA  6ED3               	movwf	4051,c	;volatile
  2555  000EFC  0012               	return		;funcret
  2556  000EFE                     __end_of_init_UART:
  2557                           	opt stack 0
  2558                           tblptru	equ	0xFF8
  2559                           tblptrh	equ	0xFF7
  2560                           tblptrl	equ	0xFF6
  2561                           tablat	equ	0xFF5
  2562                           prodh	equ	0xFF4
  2563                           prodl	equ	0xFF3
  2564                           intcon2	equ	0xFF1
  2565                           postinc0	equ	0xFEE
  2566                           wreg	equ	0xFE8
  2567                           postdec1	equ	0xFE5
  2568                           fsr1l	equ	0xFE1
  2569                           postinc2	equ	0xFDE
  2570                           postdec2	equ	0xFDD
  2571                           fsr2h	equ	0xFDA
  2572                           fsr2l	equ	0xFD9
  2573                           status	equ	0xFD8
  2574                           
  2575 ;; *************** function _OpenUSART *****************
  2576 ;; Defined at:
  2577 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  2578 ;; Parameters:    Size  Location     Type
  2579 ;;  config          1    wreg     unsigned char 
  2580 ;;  spbrg           2   14[COMRAM] unsigned int 
  2581 ;; Auto vars:     Size  Location     Type
  2582 ;;  config          1   16[COMRAM] unsigned char 
  2583 ;; Return value:  Size  Location     Type
  2584 ;;		None               void
  2585 ;; Registers used:
  2586 ;;		wreg, status,2
  2587 ;; Tracked objects:
  2588 ;;		On entry : 0/0
  2589 ;;		On exit  : 0/0
  2590 ;;		Unchanged: 0/0
  2591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2592 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2593 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2595 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2596 ;;Total ram usage:        3 bytes
  2597 ;; Hardware stack levels used:    1
  2598 ;; Hardware stack levels required when called:    1
  2599 ;; This function calls:
  2600 ;;		Nothing
  2601 ;; This function is called by:
  2602 ;;		_init_UART
  2603 ;; This function uses a non-reentrant model
  2604 ;;
  2605                           
  2606                           	psect	text9
  2607  0008BE                     __ptext9:
  2608                           	opt stack 0
  2609  0008BE                     _OpenUSART:
  2610                           	opt stack 27
  2611                           
  2612                           ;incstack = 0
  2613                           ;OpenUSART@config stored from wreg
  2614  0008BE  6E11               	movwf	OpenUSART@config,c
  2615  0008C0  0E00               	movlw	0
  2616  0008C2  6EAC               	movwf	4012,c	;volatile
  2617  0008C4  0E00               	movlw	0
  2618  0008C6  6EAB               	movwf	4011,c	;volatile
  2619  0008C8  A011               	btfss	OpenUSART@config,0,c
  2620  0008CA  D002               	goto	l2615
  2621  0008CC  88AC               	bsf	4012,4,c	;volatile
  2622  0008CE  D000               	goto	l2615
  2623  0008D0                     l2615:
  2624  0008D0  A211               	btfss	OpenUSART@config,1,c
  2625  0008D2  D003               	goto	l2619
  2626  0008D4  8CAC               	bsf	4012,6,c	;volatile
  2627  0008D6  8CAB               	bsf	4011,6,c	;volatile
  2628  0008D8  D000               	goto	l2619
  2629  0008DA                     l2619:
  2630  0008DA  A411               	btfss	OpenUSART@config,2,c
  2631  0008DC  D002               	goto	l2623
  2632  0008DE  8EAC               	bsf	4012,7,c	;volatile
  2633  0008E0  D000               	goto	l2623
  2634  0008E2                     l2623:
  2635  0008E2  A611               	btfss	OpenUSART@config,3,c
  2636  0008E4  D002               	goto	l526
  2637  0008E6  88AB               	bsf	4011,4,c	;volatile
  2638  0008E8  D002               	goto	l2627
  2639  0008EA                     l526:
  2640  0008EA  8AAB               	bsf	4011,5,c	;volatile
  2641  0008EC  D000               	goto	l2627
  2642  0008EE                     l2627:
  2643  0008EE  B811               	btfsc	OpenUSART@config,4,c
  2644  0008F0  84AC               	bsf	4012,2,c	;volatile
  2645  0008F2  989E               	bcf	3998,4,c	;volatile
  2646  0008F4  AA11               	btfss	OpenUSART@config,5,c
  2647  0008F6  D002               	goto	l2635
  2648  0008F8  86AB               	bsf	4011,3,c	;volatile
  2649  0008FA  D000               	goto	l2635
  2650  0008FC                     l2635:
  2651  0008FC  AC11               	btfss	OpenUSART@config,6,c
  2652  0008FE  D002               	goto	l530
  2653  000900  8A9D               	bsf	3997,5,c	;volatile
  2654  000902  D001               	goto	l531
  2655  000904                     l530:
  2656  000904  9A9D               	bcf	3997,5,c	;volatile
  2657  000906                     l531:
  2658  000906  9A9E               	bcf	3998,5,c	;volatile
  2659  000908  AE11               	btfss	OpenUSART@config,7,c
  2660  00090A  D002               	goto	l532
  2661  00090C  889D               	bsf	3997,4,c	;volatile
  2662  00090E  D001               	goto	l533
  2663  000910                     l532:
  2664  000910  989D               	bcf	3997,4,c	;volatile
  2665  000912                     l533:
  2666  000912  C00F  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  2667  000916  5010               	movf	OpenUSART@spbrg+1,w,c
  2668  000918  6EB0               	movwf	4016,c	;volatile
  2669  00091A  8AAC               	bsf	4012,5,c	;volatile
  2670  00091C  8EAB               	bsf	4011,7,c	;volatile
  2671  00091E  9C94               	bcf	3988,6,c	;volatile
  2672  000920  8E94               	bsf	3988,7,c	;volatile
  2673  000922  B8AC               	btfsc	4012,4,c	;volatile
  2674  000924  BEAC               	btfsc	4012,7,c	;volatile
  2675  000926  D002               	goto	l535
  2676  000928  8C94               	bsf	3988,6,c	;volatile
  2677  00092A  D000               	goto	l535
  2678  00092C                     l535:
  2679  00092C  0012               	return		;funcret
  2680  00092E                     __end_of_OpenUSART:
  2681                           	opt stack 0
  2682                           tblptru	equ	0xFF8
  2683                           tblptrh	equ	0xFF7
  2684                           tblptrl	equ	0xFF6
  2685                           tablat	equ	0xFF5
  2686                           prodh	equ	0xFF4
  2687                           prodl	equ	0xFF3
  2688                           intcon2	equ	0xFF1
  2689                           postinc0	equ	0xFEE
  2690                           wreg	equ	0xFE8
  2691                           postdec1	equ	0xFE5
  2692                           fsr1l	equ	0xFE1
  2693                           postinc2	equ	0xFDE
  2694                           postdec2	equ	0xFDD
  2695                           fsr2h	equ	0xFDA
  2696                           fsr2l	equ	0xFD9
  2697                           status	equ	0xFD8
  2698                           
  2699 ;; *************** function _Initialize_Screen *****************
  2700 ;; Defined at:
  2701 ;;		line 173 in file "Lab11p1.c"
  2702 ;; Parameters:    Size  Location     Type
  2703 ;;		None
  2704 ;; Auto vars:     Size  Location     Type
  2705 ;;		None
  2706 ;; Return value:  Size  Location     Type
  2707 ;;		None               void
  2708 ;; Registers used:
  2709 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2710 ;; Tracked objects:
  2711 ;;		On entry : 0/0
  2712 ;;		On exit  : 0/0
  2713 ;;		Unchanged: 0/0
  2714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2719 ;;Total ram usage:        0 bytes
  2720 ;; Hardware stack levels used:    1
  2721 ;; Hardware stack levels required when called:    8
  2722 ;; This function calls:
  2723 ;;		_LCD_Reset
  2724 ;;		_TFT_GreenTab_Initialize
  2725 ;;		_drawtext
  2726 ;;		_fillScreen
  2727 ;;		_strcpy
  2728 ;; This function is called by:
  2729 ;;		_Do_Init
  2730 ;; This function uses a non-reentrant model
  2731 ;;
  2732                           
  2733                           	psect	text10
  2734  00072E                     __ptext10:
  2735                           	opt stack 0
  2736  00072E                     _Initialize_Screen:
  2737                           	opt stack 21
  2738                           
  2739                           ;Lab11p1.c: 175: LCD_Reset();
  2740                           
  2741                           ;incstack = 0
  2742  00072E  EC89  F007         	call	_LCD_Reset	;wreg free
  2743                           
  2744                           ;Lab11p1.c: 176: TFT_GreenTab_Initialize();
  2745  000732  ECF5  F006         	call	_TFT_GreenTab_Initialize	;wreg free
  2746                           
  2747                           ;Lab11p1.c: 177: fillScreen(0x0000);
  2748  000736  0E00               	movlw	0
  2749  000738  6E23               	movwf	fillScreen@color+1,c
  2750  00073A  0E00               	movlw	0
  2751  00073C  6E22               	movwf	fillScreen@color,c
  2752  00073E  EC4F  F007         	call	_fillScreen	;wreg free
  2753                           
  2754                           ;Lab11p1.c: 180: txt = buffer;
  2755  000742  0EBF               	movlw	low _buffer
  2756  000744  6E4D               	movwf	_txt,c
  2757  000746  0E00               	movlw	high _buffer
  2758  000748  6E4E               	movwf	_txt+1,c
  2759                           
  2760                           ;Lab11p1.c: 181: strcpy(txt, "ECE3301L Fall 22-Sx");
  2761  00074A  C04D  F00F         	movff	_txt,strcpy@to
  2762  00074E  C04E  F010         	movff	_txt+1,strcpy@to+1
  2763  000752  0EE3               	movlw	low STR_2
  2764  000754  6E11               	movwf	strcpy@from,c
  2765  000756  0EFF               	movlw	high STR_2
  2766  000758  6E12               	movwf	strcpy@from+1,c
  2767  00075A  ECC4  F006         	call	_strcpy	;wreg free
  2768                           
  2769                           ;Lab11p1.c: 182: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  2770  00075E  0E02               	movlw	2
  2771  000760  6E37               	movwf	drawtext@y,c
  2772  000762  C04D  F038         	movff	_txt,drawtext@_text
  2773  000766  C04E  F039         	movff	_txt+1,drawtext@_text+1
  2774  00076A  0EFF               	movlw	255
  2775  00076C  6E3B               	movwf	drawtext@color+1,c
  2776  00076E  683A               	setf	drawtext@color,c
  2777  000770  0E00               	movlw	0
  2778  000772  6E3D               	movwf	drawtext@bg+1,c
  2779  000774  0E00               	movlw	0
  2780  000776  6E3C               	movwf	drawtext@bg,c
  2781  000778  0E01               	movlw	1
  2782  00077A  6E3E               	movwf	drawtext@size,c
  2783  00077C  0E02               	movlw	2
  2784  00077E  ECE0  F001         	call	_drawtext
  2785                           
  2786                           ;Lab11p1.c: 184: strcpy(txt, "LAB 10 ");
  2787  000782  C04D  F00F         	movff	_txt,strcpy@to
  2788  000786  C04E  F010         	movff	_txt+1,strcpy@to+1
  2789  00078A  0EF7               	movlw	low STR_3
  2790  00078C  6E11               	movwf	strcpy@from,c
  2791  00078E  0EFF               	movlw	high STR_3
  2792  000790  6E12               	movwf	strcpy@from+1,c
  2793  000792  ECC4  F006         	call	_strcpy	;wreg free
  2794                           
  2795                           ;Lab11p1.c: 185: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  2796  000796  0E0A               	movlw	10
  2797  000798  6E37               	movwf	drawtext@y,c
  2798  00079A  C04D  F038         	movff	_txt,drawtext@_text
  2799  00079E  C04E  F039         	movff	_txt+1,drawtext@_text+1
  2800  0007A2  0EFF               	movlw	255
  2801  0007A4  6E3B               	movwf	drawtext@color+1,c
  2802  0007A6  683A               	setf	drawtext@color,c
  2803  0007A8  0E00               	movlw	0
  2804  0007AA  6E3D               	movwf	drawtext@bg+1,c
  2805  0007AC  0E00               	movlw	0
  2806  0007AE  6E3C               	movwf	drawtext@bg,c
  2807  0007B0  0E01               	movlw	1
  2808  0007B2  6E3E               	movwf	drawtext@size,c
  2809  0007B4  0E32               	movlw	50
  2810  0007B6  ECE0  F001         	call	_drawtext
  2811  0007BA  0012               	return		;funcret
  2812  0007BC                     __end_of_Initialize_Screen:
  2813                           	opt stack 0
  2814                           tblptru	equ	0xFF8
  2815                           tblptrh	equ	0xFF7
  2816                           tblptrl	equ	0xFF6
  2817                           tablat	equ	0xFF5
  2818                           prodh	equ	0xFF4
  2819                           prodl	equ	0xFF3
  2820                           intcon2	equ	0xFF1
  2821                           postinc0	equ	0xFEE
  2822                           wreg	equ	0xFE8
  2823                           postdec1	equ	0xFE5
  2824                           fsr1l	equ	0xFE1
  2825                           postinc2	equ	0xFDE
  2826                           postdec2	equ	0xFDD
  2827                           fsr2h	equ	0xFDA
  2828                           fsr2l	equ	0xFD9
  2829                           status	equ	0xFD8
  2830                           
  2831 ;; *************** function _strcpy *****************
  2832 ;; Defined at:
  2833 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  2834 ;; Parameters:    Size  Location     Type
  2835 ;;  to              2   14[COMRAM] PTR unsigned char 
  2836 ;;		 -> NULL(0), buffer(31), 
  2837 ;;  from            2   16[COMRAM] PTR const unsigned char 
  2838 ;;		 -> STR_3(8), STR_2(20), 
  2839 ;; Auto vars:     Size  Location     Type
  2840 ;;  cp              2   18[COMRAM] PTR unsigned char 
  2841 ;;		 -> NULL(0), buffer(31), 
  2842 ;; Return value:  Size  Location     Type
  2843 ;;                  2   14[COMRAM] PTR unsigned char 
  2844 ;; Registers used:
  2845 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2846 ;; Tracked objects:
  2847 ;;		On entry : 0/0
  2848 ;;		On exit  : 0/0
  2849 ;;		Unchanged: 0/0
  2850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2851 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2852 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2854 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2855 ;;Total ram usage:        6 bytes
  2856 ;; Hardware stack levels used:    1
  2857 ;; Hardware stack levels required when called:    1
  2858 ;; This function calls:
  2859 ;;		Nothing
  2860 ;; This function is called by:
  2861 ;;		_Initialize_Screen
  2862 ;; This function uses a non-reentrant model
  2863 ;;
  2864                           
  2865                           	psect	text11
  2866  000D88                     __ptext11:
  2867                           	opt stack 0
  2868  000D88                     _strcpy:
  2869                           	opt stack 27
  2870                           
  2871                           ;incstack = 0
  2872  000D88  C00F  F013         	movff	strcpy@to,strcpy@cp
  2873  000D8C  C010  F014         	movff	strcpy@to+1,strcpy@cp+1
  2874  000D90  D005               	goto	l2663
  2875  000D92                     l2661:
  2876  000D92  4A13               	infsnz	strcpy@cp,f,c
  2877  000D94  2A14               	incf	strcpy@cp+1,f,c
  2878  000D96  4A11               	infsnz	strcpy@from,f,c
  2879  000D98  2A12               	incf	strcpy@from+1,f,c
  2880  000D9A  D000               	goto	l2663
  2881  000D9C                     l2663:
  2882  000D9C  C011  FFF6         	movff	strcpy@from,tblptrl
  2883  000DA0  C012  FFF7         	movff	strcpy@from+1,tblptrh
  2884  000DA4                     	if	0	;tblptru may be non-zero
  2885  000DA4                     	endif
  2886  000DA4                     	if	0	;tblptru may be non-zero
  2887  000DA4                     	endif
  2888  000DA4  C013  FFD9         	movff	strcpy@cp,fsr2l
  2889  000DA8  C014  FFDA         	movff	strcpy@cp+1,fsr2h
  2890  000DAC  0008               	tblrd		*
  2891  000DAE  CFF5 FFDF          	movff	tablat,indf2
  2892  000DB2  50DF               	movf	indf2,w,c
  2893  000DB4  A4D8               	btfss	status,2,c
  2894  000DB6  D7ED               	goto	l2661
  2895                           
  2896                           ;	Return value of _strcpy is never used
  2897  000DB8  0012               	return		;funcret
  2898  000DBA                     __end_of_strcpy:
  2899                           	opt stack 0
  2900                           tblptru	equ	0xFF8
  2901                           tblptrh	equ	0xFF7
  2902                           tblptrl	equ	0xFF6
  2903                           tablat	equ	0xFF5
  2904                           prodh	equ	0xFF4
  2905                           prodl	equ	0xFF3
  2906                           intcon2	equ	0xFF1
  2907                           postinc0	equ	0xFEE
  2908                           wreg	equ	0xFE8
  2909                           postdec1	equ	0xFE5
  2910                           fsr1l	equ	0xFE1
  2911                           indf2	equ	0xFDF
  2912                           postinc2	equ	0xFDE
  2913                           postdec2	equ	0xFDD
  2914                           fsr2h	equ	0xFDA
  2915                           fsr2l	equ	0xFD9
  2916                           status	equ	0xFD8
  2917                           
  2918 ;; *************** function _fillScreen *****************
  2919 ;; Defined at:
  2920 ;;		line 619 in file "ST7735_TFT.c"
  2921 ;; Parameters:    Size  Location     Type
  2922 ;;  color           2   33[COMRAM] unsigned int 
  2923 ;; Auto vars:     Size  Location     Type
  2924 ;;		None
  2925 ;; Return value:  Size  Location     Type
  2926 ;;		None               void
  2927 ;; Registers used:
  2928 ;;		wreg, status,2, status,0, cstack
  2929 ;; Tracked objects:
  2930 ;;		On entry : 0/0
  2931 ;;		On exit  : 0/0
  2932 ;;		Unchanged: 0/0
  2933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2934 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2937 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2938 ;;Total ram usage:        2 bytes
  2939 ;; Hardware stack levels used:    1
  2940 ;; Hardware stack levels required when called:    5
  2941 ;; This function calls:
  2942 ;;		_fillRectangle
  2943 ;; This function is called by:
  2944 ;;		_Initialize_Screen
  2945 ;; This function uses a non-reentrant model
  2946 ;;
  2947                           
  2948                           	psect	text12
  2949  000E9E                     __ptext12:
  2950                           	opt stack 0
  2951  000E9E                     _fillScreen:
  2952                           	opt stack 23
  2953                           
  2954                           ;ST7735_TFT.c: 621: fillRectangle(0, 0, 128, 160, color);
  2955                           
  2956                           ;incstack = 0
  2957  000E9E  0E00               	movlw	0
  2958  000EA0  6E16               	movwf	fillRectangle@y,c
  2959  000EA2  0E80               	movlw	128
  2960  000EA4  6E17               	movwf	fillRectangle@w,c
  2961  000EA6  0EA0               	movlw	160
  2962  000EA8  6E18               	movwf	fillRectangle@h,c
  2963  000EAA  C022  F019         	movff	fillScreen@color,fillRectangle@color
  2964  000EAE  C023  F01A         	movff	fillScreen@color+1,fillRectangle@color+1
  2965  000EB2  0E00               	movlw	0
  2966  000EB4  ECDE  F002         	call	_fillRectangle
  2967  000EB8  0012               	return		;funcret
  2968  000EBA                     __end_of_fillScreen:
  2969                           	opt stack 0
  2970                           tblptru	equ	0xFF8
  2971                           tblptrh	equ	0xFF7
  2972                           tblptrl	equ	0xFF6
  2973                           tablat	equ	0xFF5
  2974                           prodh	equ	0xFF4
  2975                           prodl	equ	0xFF3
  2976                           intcon2	equ	0xFF1
  2977                           postinc0	equ	0xFEE
  2978                           wreg	equ	0xFE8
  2979                           postdec1	equ	0xFE5
  2980                           fsr1l	equ	0xFE1
  2981                           indf2	equ	0xFDF
  2982                           postinc2	equ	0xFDE
  2983                           postdec2	equ	0xFDD
  2984                           fsr2h	equ	0xFDA
  2985                           fsr2l	equ	0xFD9
  2986                           status	equ	0xFD8
  2987                           
  2988 ;; *************** function _fillRectangle *****************
  2989 ;; Defined at:
  2990 ;;		line 503 in file "ST7735_TFT.c"
  2991 ;; Parameters:    Size  Location     Type
  2992 ;;  x               1    wreg     unsigned char 
  2993 ;;  y               1   21[COMRAM] unsigned char 
  2994 ;;  w               1   22[COMRAM] unsigned char 
  2995 ;;  h               1   23[COMRAM] unsigned char 
  2996 ;;  color           2   24[COMRAM] unsigned int 
  2997 ;; Auto vars:     Size  Location     Type
  2998 ;;  x               1   32[COMRAM] unsigned char 
  2999 ;;  lo              1   31[COMRAM] unsigned char 
  3000 ;;  hi              1   30[COMRAM] unsigned char 
  3001 ;; Return value:  Size  Location     Type
  3002 ;;		None               void
  3003 ;; Registers used:
  3004 ;;		wreg, status,2, status,0, cstack
  3005 ;; Tracked objects:
  3006 ;;		On entry : 0/0
  3007 ;;		On exit  : 0/0
  3008 ;;		Unchanged: 0/0
  3009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3010 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3011 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3012 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3013 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3014 ;;Total ram usage:       12 bytes
  3015 ;; Hardware stack levels used:    1
  3016 ;; Hardware stack levels required when called:    4
  3017 ;; This function calls:
  3018 ;;		_setAddrWindow
  3019 ;;		_spiwrite
  3020 ;; This function is called by:
  3021 ;;		_fillScreen
  3022 ;; This function uses a non-reentrant model
  3023 ;;
  3024                           
  3025                           	psect	text13
  3026  0005BC                     __ptext13:
  3027                           	opt stack 0
  3028  0005BC                     _fillRectangle:
  3029                           	opt stack 23
  3030                           
  3031                           ;incstack = 0
  3032                           ;fillRectangle@x stored from wreg
  3033  0005BC  6E21               	movwf	fillRectangle@x,c
  3034                           
  3035                           ;ST7735_TFT.c: 505: unsigned char hi, lo;
  3036                           ;ST7735_TFT.c: 506: if((x >= 128) || (y >= 160))
  3037  0005BE  0E80               	movlw	128
  3038  0005C0  6021               	cpfslt	fillRectangle@x,c
  3039  0005C2  D069               	goto	l148
  3040  0005C4  0E9F               	movlw	159
  3041  0005C6  6416               	cpfsgt	fillRectangle@y,c
  3042  0005C8  D001               	goto	l3489
  3043                           
  3044                           ;ST7735_TFT.c: 507: return;
  3045  0005CA  D065               	goto	l148
  3046  0005CC                     l3489:
  3047                           
  3048                           ;ST7735_TFT.c: 508: if((x + w - 1) >= 128)
  3049  0005CC  0EFF               	movlw	255
  3050  0005CE  6E1B               	movwf	??_fillRectangle& (0+255),c
  3051  0005D0  0EFF               	movlw	255
  3052  0005D2  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3053  0005D4  5017               	movf	fillRectangle@w,w,c
  3054  0005D6  C021  F01D         	movff	fillRectangle@x,??_fillRectangle+2
  3055  0005DA  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3056  0005DC  261D               	addwf	??_fillRectangle+2,f,c
  3057  0005DE  0E00               	movlw	0
  3058  0005E0  221E               	addwfc	??_fillRectangle+3,f,c
  3059  0005E2  501B               	movf	??_fillRectangle,w,c
  3060  0005E4  261D               	addwf	??_fillRectangle+2,f,c
  3061  0005E6  501C               	movf	??_fillRectangle+1,w,c
  3062  0005E8  221E               	addwfc	??_fillRectangle+3,f,c
  3063  0005EA  BE1E               	btfsc	??_fillRectangle+3,7,c
  3064  0005EC  D00A               	goto	l149
  3065  0005EE  501E               	movf	??_fillRectangle+3,w,c
  3066  0005F0  E104               	bnz	u2210
  3067  0005F2  0E80               	movlw	128
  3068  0005F4  5C1D               	subwf	??_fillRectangle+2,w,c
  3069  0005F6  A0D8               	btfss	status,0,c
  3070  0005F8  D004               	goto	l149
  3071  0005FA                     u2210:
  3072                           
  3073                           ;ST7735_TFT.c: 509: w = 128 - x;
  3074  0005FA  5021               	movf	fillRectangle@x,w,c
  3075  0005FC  0800               	sublw	0
  3076  0005FE  0F80               	addlw	128
  3077  000600  6E17               	movwf	fillRectangle@w,c
  3078  000602                     l149:
  3079                           
  3080                           ;ST7735_TFT.c: 510: if((y + h - 1) >= 160)
  3081  000602  0EFF               	movlw	255
  3082  000604  6E1B               	movwf	??_fillRectangle& (0+255),c
  3083  000606  0EFF               	movlw	255
  3084  000608  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3085  00060A  5018               	movf	fillRectangle@h,w,c
  3086  00060C  C016  F01D         	movff	fillRectangle@y,??_fillRectangle+2
  3087  000610  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3088  000612  261D               	addwf	??_fillRectangle+2,f,c
  3089  000614  0E00               	movlw	0
  3090  000616  221E               	addwfc	??_fillRectangle+3,f,c
  3091  000618  501B               	movf	??_fillRectangle,w,c
  3092  00061A  261D               	addwf	??_fillRectangle+2,f,c
  3093  00061C  501C               	movf	??_fillRectangle+1,w,c
  3094  00061E  221E               	addwfc	??_fillRectangle+3,f,c
  3095  000620  BE1E               	btfsc	??_fillRectangle+3,7,c
  3096  000622  D00B               	goto	l3495
  3097  000624  501E               	movf	??_fillRectangle+3,w,c
  3098  000626  E104               	bnz	u2220
  3099  000628  0EA0               	movlw	160
  3100  00062A  5C1D               	subwf	??_fillRectangle+2,w,c
  3101  00062C  A0D8               	btfss	status,0,c
  3102  00062E  D005               	goto	l3495
  3103  000630                     u2220:
  3104                           
  3105                           ;ST7735_TFT.c: 511: h = 160 - y;
  3106  000630  5016               	movf	fillRectangle@y,w,c
  3107  000632  0800               	sublw	0
  3108  000634  0FA0               	addlw	160
  3109  000636  6E18               	movwf	fillRectangle@h,c
  3110  000638  D000               	goto	l3495
  3111  00063A                     l3495:
  3112                           
  3113                           ;ST7735_TFT.c: 512: setAddrWindow(x, y, x+w-1, y+h-1);
  3114  00063A  C016  F012         	movff	fillRectangle@y,setAddrWindow@y0
  3115  00063E  5021               	movf	fillRectangle@x,w,c
  3116  000640  2417               	addwf	fillRectangle@w,w,c
  3117  000642  6E1B               	movwf	??_fillRectangle& (0+255),c
  3118  000644  041B               	decf	??_fillRectangle,w,c
  3119  000646  6E13               	movwf	setAddrWindow@x1,c
  3120  000648  5016               	movf	fillRectangle@y,w,c
  3121  00064A  2418               	addwf	fillRectangle@h,w,c
  3122  00064C  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3123  00064E  041C               	decf	??_fillRectangle+1,w,c
  3124  000650  6E14               	movwf	setAddrWindow@y1,c
  3125  000652  5021               	movf	fillRectangle@x,w,c
  3126  000654  EC73  F005         	call	_setAddrWindow
  3127                           
  3128                           ;ST7735_TFT.c: 513: hi = color >> 8; lo = color;
  3129  000658  501A               	movf	fillRectangle@color+1,w,c
  3130  00065A  6E1F               	movwf	fillRectangle@hi,c
  3131  00065C  C019  F020         	movff	fillRectangle@color,fillRectangle@lo
  3132                           
  3133                           ;ST7735_TFT.c: 514: PORTCbits.RC0 = 1;
  3134  000660  8082               	bsf	3970,0,c	;volatile
  3135                           
  3136                           ;ST7735_TFT.c: 515: PORTCbits.RC1 = 0;
  3137  000662  9282               	bcf	3970,1,c	;volatile
  3138                           
  3139                           ;ST7735_TFT.c: 517: for(y=h; y>0; y--) {
  3140  000664  C018  F016         	movff	fillRectangle@h,fillRectangle@y
  3141  000668                     l3507:
  3142  000668  5016               	movf	fillRectangle@y,w,c
  3143  00066A  B4D8               	btfsc	status,2,c
  3144  00066C  D013               	goto	l152
  3145  00066E  D001               	goto	l151
  3146  000670  D011               	goto	l152
  3147  000672                     l151:
  3148                           
  3149                           ;ST7735_TFT.c: 518: for(x = w; x > 0; x--) {
  3150  000672  C017  F021         	movff	fillRectangle@w,fillRectangle@x
  3151  000676                     l3511:
  3152  000676  5021               	movf	fillRectangle@x,w,c
  3153  000678  B4D8               	btfsc	status,2,c
  3154  00067A  D00A               	goto	l3521
  3155  00067C  D001               	goto	l3515
  3156  00067E  D008               	goto	l3521
  3157  000680                     l3515:
  3158                           
  3159                           ;ST7735_TFT.c: 519: spiwrite(hi);
  3160  000680  501F               	movf	fillRectangle@hi,w,c
  3161  000682  EC7F  F007         	call	_spiwrite
  3162                           
  3163                           ;ST7735_TFT.c: 520: spiwrite(lo);
  3164  000686  5020               	movf	fillRectangle@lo,w,c
  3165  000688  EC7F  F007         	call	_spiwrite
  3166  00068C  0621               	decf	fillRectangle@x,f,c
  3167  00068E  D7F3               	goto	l3511
  3168  000690                     l3521:
  3169  000690  0616               	decf	fillRectangle@y,f,c
  3170  000692  D7EA               	goto	l3507
  3171  000694                     l152:
  3172                           
  3173                           ;ST7735_TFT.c: 521: }
  3174                           ;ST7735_TFT.c: 522: }
  3175                           ;ST7735_TFT.c: 523: PORTCbits.RC1 = 1;
  3176  000694  8282               	bsf	3970,1,c	;volatile
  3177  000696                     l148:
  3178  000696  0012               	return		;funcret
  3179  000698                     __end_of_fillRectangle:
  3180                           	opt stack 0
  3181                           tblptru	equ	0xFF8
  3182                           tblptrh	equ	0xFF7
  3183                           tblptrl	equ	0xFF6
  3184                           tablat	equ	0xFF5
  3185                           prodh	equ	0xFF4
  3186                           prodl	equ	0xFF3
  3187                           intcon2	equ	0xFF1
  3188                           postinc0	equ	0xFEE
  3189                           wreg	equ	0xFE8
  3190                           postdec1	equ	0xFE5
  3191                           fsr1l	equ	0xFE1
  3192                           indf2	equ	0xFDF
  3193                           postinc2	equ	0xFDE
  3194                           postdec2	equ	0xFDD
  3195                           fsr2h	equ	0xFDA
  3196                           fsr2l	equ	0xFD9
  3197                           status	equ	0xFD8
  3198                           
  3199 ;; *************** function _drawtext *****************
  3200 ;; Defined at:
  3201 ;;		line 474 in file "ST7735_TFT.c"
  3202 ;; Parameters:    Size  Location     Type
  3203 ;;  x               1    wreg     unsigned char 
  3204 ;;  y               1   54[COMRAM] unsigned char 
  3205 ;;  _text           2   55[COMRAM] PTR unsigned char 
  3206 ;;		 -> NULL(0), buffer(31), 
  3207 ;;  color           2   57[COMRAM] unsigned int 
  3208 ;;  bg              2   59[COMRAM] unsigned int 
  3209 ;;  size            1   61[COMRAM] unsigned char 
  3210 ;; Auto vars:     Size  Location     Type
  3211 ;;  x               1    0[BANK0 ] unsigned char 
  3212 ;;  i               2    3[BANK0 ] unsigned int 
  3213 ;;  textsize        2    1[BANK0 ] unsigned int 
  3214 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  3215 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  3216 ;; Return value:  Size  Location     Type
  3217 ;;		None               void
  3218 ;; Registers used:
  3219 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3220 ;; Tracked objects:
  3221 ;;		On entry : 0/0
  3222 ;;		On exit  : 0/0
  3223 ;;		Unchanged: 0/0
  3224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3225 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3226 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3227 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3228 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3229 ;;Total ram usage:       17 bytes
  3230 ;; Hardware stack levels used:    1
  3231 ;; Hardware stack levels required when called:    7
  3232 ;; This function calls:
  3233 ;;		_drawChar
  3234 ;;		_strlen
  3235 ;; This function is called by:
  3236 ;;		_Initialize_Screen
  3237 ;; This function uses a non-reentrant model
  3238 ;;
  3239                           
  3240                           	psect	text14
  3241  0003C0                     __ptext14:
  3242                           	opt stack 0
  3243  0003C0                     _drawtext:
  3244                           	opt stack 21
  3245                           
  3246                           ;incstack = 0
  3247                           ;drawtext@x stored from wreg
  3248  0003C0  0100               	movlb	0	; () banked
  3249  0003C2  6FDE               	movwf	drawtext@x& (0+255),b
  3250                           
  3251                           ; BSR set to: 0
  3252                           ;ST7735_TFT.c: 476: unsigned char cursor_x, cursor_y;
  3253                           ;ST7735_TFT.c: 477: unsigned int textsize, i;
  3254                           ;ST7735_TFT.c: 478: cursor_x = x, cursor_y = y;
  3255  0003C4  C0DE  F0E4         	movff	drawtext@x,drawtext@cursor_x
  3256                           
  3257                           ; BSR set to: 0
  3258  0003C8  C037  F0E3         	movff	drawtext@y,drawtext@cursor_y
  3259                           
  3260                           ; BSR set to: 0
  3261                           ;ST7735_TFT.c: 479: textsize = strlen(_text);
  3262  0003CC  C038  F00F         	movff	drawtext@_text,strlen@s
  3263  0003D0  C039  F010         	movff	drawtext@_text+1,strlen@s+1
  3264  0003D4  EC49  F006         	call	_strlen	;wreg free
  3265  0003D8  C00F  F0DF         	movff	?_strlen,drawtext@textsize
  3266  0003DC  C010  F0E0         	movff	?_strlen+1,drawtext@textsize+1
  3267                           
  3268                           ;ST7735_TFT.c: 480: for(i = 0; i < textsize; i++){
  3269  0003E0  0E00               	movlw	0
  3270  0003E2  0100               	movlb	0	; () banked
  3271  0003E4  6FE2               	movwf	(drawtext@i+1)& (0+255),b
  3272  0003E6  0E00               	movlw	0
  3273  0003E8  6FE1               	movwf	drawtext@i& (0+255),b
  3274  0003EA  D064               	goto	l3565
  3275  0003EC                     l3539:
  3276                           
  3277                           ; BSR set to: 0
  3278                           ;ST7735_TFT.c: 481: if(wrap && ((cursor_x + size * 5) > 128)){
  3279  0003EC  506D               	movf	_wrap,w,c
  3280  0003EE  B4D8               	btfsc	status,2,c
  3281  0003F0  D034               	goto	l3555
  3282                           
  3283                           ; BSR set to: 0
  3284  0003F2  503E               	movf	drawtext@size,w,c
  3285  0003F4  0D05               	mullw	5
  3286  0003F6  0100               	movlb	0	; () banked
  3287  0003F8  51E4               	movf	drawtext@cursor_x& (0+255),w,b
  3288  0003FA  6E3F               	movwf	??_drawtext& (0+255),c
  3289  0003FC  6A40               	clrf	(??_drawtext+1)& (0+255),c
  3290  0003FE  50F3               	movf	prodl,w,c
  3291  000400  263F               	addwf	??_drawtext,f,c
  3292  000402  50F4               	movf	prodh,w,c
  3293  000404  2240               	addwfc	??_drawtext+1,f,c
  3294  000406  BE40               	btfsc	??_drawtext+1,7,c
  3295  000408  D028               	goto	l3555
  3296  00040A  5040               	movf	??_drawtext+1,w,c
  3297  00040C  E104               	bnz	u2280
  3298  00040E  0E81               	movlw	129
  3299  000410  5C3F               	subwf	??_drawtext,w,c
  3300  000412  A0D8               	btfss	status,0,c
  3301  000414  D022               	goto	l3555
  3302  000416                     u2280:
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;ST7735_TFT.c: 482: cursor_x = 0;
  3306  000416  0E00               	movlw	0
  3307  000418  0100               	movlb	0	; () banked
  3308  00041A  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  3309                           
  3310                           ; BSR set to: 0
  3311                           ;ST7735_TFT.c: 483: cursor_y = cursor_y + size * 7 + 3 ;
  3312  00041C  503E               	movf	drawtext@size,w,c
  3313  00041E  0D07               	mullw	7
  3314  000420  50F3               	movf	prodl,w,c
  3315  000422  0100               	movlb	0	; () banked
  3316  000424  25E3               	addwf	drawtext@cursor_y& (0+255),w,b
  3317  000426  0F03               	addlw	3
  3318  000428  0100               	movlb	0	; () banked
  3319  00042A  6FE3               	movwf	drawtext@cursor_y& (0+255),b
  3320                           
  3321                           ; BSR set to: 0
  3322                           ;ST7735_TFT.c: 484: if(cursor_y > 160) cursor_y = 160;
  3323  00042C  0EA0               	movlw	160
  3324  00042E  0100               	movlb	0	; () banked
  3325  000430  65E3               	cpfsgt	drawtext@cursor_y& (0+255),b
  3326  000432  D004               	goto	l3551
  3327                           
  3328                           ; BSR set to: 0
  3329  000434  0EA0               	movlw	160
  3330  000436  0100               	movlb	0	; () banked
  3331  000438  6FE3               	movwf	drawtext@cursor_y& (0+255),b
  3332  00043A  D000               	goto	l3551
  3333  00043C                     l3551:
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;ST7735_TFT.c: 485: if(_text[i] == 0x20) goto _skip; }
  3337  00043C  0100               	movlb	0	; () banked
  3338  00043E  51E1               	movf	drawtext@i& (0+255),w,b
  3339  000440  2438               	addwf	drawtext@_text,w,c
  3340  000442  6ED9               	movwf	fsr2l,c
  3341  000444  0100               	movlb	0	; () banked
  3342  000446  51E2               	movf	(drawtext@i+1)& (0+255),w,b
  3343  000448  2039               	addwfc	drawtext@_text+1,w,c
  3344  00044A  6EDA               	movwf	fsr2h,c
  3345  00044C  0E20               	movlw	32
  3346  00044E  18DE               	xorwf	postinc2,w,c
  3347  000450  B4D8               	btfsc	status,2,c
  3348  000452  D02C               	goto	l3563
  3349  000454  D002               	goto	l3555
  3350                           
  3351                           ; BSR set to: 0
  3352  000456  D02A               	goto	l3563
  3353                           
  3354                           ; BSR set to: 0
  3355  000458  D000               	goto	l3555
  3356  00045A                     l3555:
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;ST7735_TFT.c: 486: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  3360  00045A  C0E3  F02C         	movff	drawtext@cursor_y,drawChar@y
  3361  00045E  0100               	movlb	0	; () banked
  3362  000460  51E1               	movf	drawtext@i& (0+255),w,b
  3363  000462  2438               	addwf	drawtext@_text,w,c
  3364  000464  6ED9               	movwf	fsr2l,c
  3365  000466  0100               	movlb	0	; () banked
  3366  000468  51E2               	movf	(drawtext@i+1)& (0+255),w,b
  3367  00046A  2039               	addwfc	drawtext@_text+1,w,c
  3368  00046C  6EDA               	movwf	fsr2h,c
  3369  00046E  50DF               	movf	indf2,w,c
  3370  000470  6E2D               	movwf	drawChar@c,c
  3371  000472  C03A  F02E         	movff	drawtext@color,drawChar@color
  3372  000476  C03B  F02F         	movff	drawtext@color+1,drawChar@color+1
  3373  00047A  C03C  F030         	movff	drawtext@bg,drawChar@bg
  3374  00047E  C03D  F031         	movff	drawtext@bg+1,drawChar@bg+1
  3375  000482  C03E  F032         	movff	drawtext@size,drawChar@size
  3376  000486  0100               	movlb	0	; () banked
  3377  000488  51E4               	movf	drawtext@cursor_x& (0+255),w,b
  3378  00048A  EC0E  F000         	call	_drawChar
  3379                           
  3380                           ;ST7735_TFT.c: 487: cursor_x = cursor_x + size * 6;
  3381  00048E  503E               	movf	drawtext@size,w,c
  3382  000490  0D06               	mullw	6
  3383  000492  50F3               	movf	prodl,w,c
  3384  000494  0100               	movlb	0	; () banked
  3385  000496  25E4               	addwf	drawtext@cursor_x& (0+255),w,b
  3386  000498  0100               	movlb	0	; () banked
  3387  00049A  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  3388                           
  3389                           ; BSR set to: 0
  3390                           ;ST7735_TFT.c: 488: if(cursor_x > 128) cursor_x = 128;
  3391  00049C  0E80               	movlw	128
  3392  00049E  0100               	movlb	0	; () banked
  3393  0004A0  65E4               	cpfsgt	drawtext@cursor_x& (0+255),b
  3394  0004A2  D004               	goto	l3563
  3395                           
  3396                           ; BSR set to: 0
  3397  0004A4  0E80               	movlw	128
  3398  0004A6  0100               	movlb	0	; () banked
  3399  0004A8  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  3400                           
  3401                           ; BSR set to: 0
  3402  0004AA  D000               	goto	l3563
  3403  0004AC                     l3563:
  3404                           
  3405                           ; BSR set to: 0
  3406  0004AC  0100               	movlb	0	; () banked
  3407  0004AE  4BE1               	infsnz	drawtext@i& (0+255),f,b
  3408  0004B0  2BE2               	incf	(drawtext@i+1)& (0+255),f,b
  3409  0004B2  D000               	goto	l3565
  3410  0004B4                     l3565:
  3411                           
  3412                           ; BSR set to: 0
  3413  0004B4  0100               	movlb	0	; () banked
  3414  0004B6  51DF               	movf	drawtext@textsize& (0+255),w,b
  3415  0004B8  0100               	movlb	0	; () banked
  3416  0004BA  5DE1               	subwf	drawtext@i& (0+255),w,b
  3417  0004BC  0100               	movlb	0	; () banked
  3418  0004BE  51E0               	movf	(drawtext@textsize+1)& (0+255),w,b
  3419  0004C0  0100               	movlb	0	; () banked
  3420  0004C2  59E2               	subwfb	(drawtext@i+1)& (0+255),w,b
  3421  0004C4  A0D8               	btfss	status,0,c
  3422  0004C6  D792               	goto	l3539
  3423                           
  3424                           ; BSR set to: 0
  3425                           
  3426                           ; BSR set to: 0
  3427  0004C8  0012               	return		;funcret
  3428  0004CA                     __end_of_drawtext:
  3429                           	opt stack 0
  3430                           tblptru	equ	0xFF8
  3431                           tblptrh	equ	0xFF7
  3432                           tblptrl	equ	0xFF6
  3433                           tablat	equ	0xFF5
  3434                           prodh	equ	0xFF4
  3435                           prodl	equ	0xFF3
  3436                           intcon2	equ	0xFF1
  3437                           postinc0	equ	0xFEE
  3438                           wreg	equ	0xFE8
  3439                           postdec1	equ	0xFE5
  3440                           fsr1l	equ	0xFE1
  3441                           indf2	equ	0xFDF
  3442                           postinc2	equ	0xFDE
  3443                           postdec2	equ	0xFDD
  3444                           fsr2h	equ	0xFDA
  3445                           fsr2l	equ	0xFD9
  3446                           status	equ	0xFD8
  3447                           
  3448 ;; *************** function _strlen *****************
  3449 ;; Defined at:
  3450 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  3451 ;; Parameters:    Size  Location     Type
  3452 ;;  s               2   14[COMRAM] PTR const unsigned char 
  3453 ;;		 -> NULL(0), buffer(31), 
  3454 ;; Auto vars:     Size  Location     Type
  3455 ;;  cp              2   18[COMRAM] PTR const unsigned char 
  3456 ;;		 -> NULL(0), buffer(31), 
  3457 ;; Return value:  Size  Location     Type
  3458 ;;                  2   14[COMRAM] unsigned int 
  3459 ;; Registers used:
  3460 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3461 ;; Tracked objects:
  3462 ;;		On entry : 0/0
  3463 ;;		On exit  : 0/0
  3464 ;;		Unchanged: 0/0
  3465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3466 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3467 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3468 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3469 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3470 ;;Total ram usage:        6 bytes
  3471 ;; Hardware stack levels used:    1
  3472 ;; Hardware stack levels required when called:    1
  3473 ;; This function calls:
  3474 ;;		Nothing
  3475 ;; This function is called by:
  3476 ;;		_drawtext
  3477 ;; This function uses a non-reentrant model
  3478 ;;
  3479                           
  3480                           	psect	text15
  3481  000C92                     __ptext15:
  3482                           	opt stack 0
  3483  000C92                     _strlen:
  3484                           	opt stack 26
  3485                           
  3486                           ; BSR set to: 0
  3487                           ;incstack = 0
  3488  000C92  C00F  F013         	movff	strlen@s,strlen@cp
  3489  000C96  C010  F014         	movff	strlen@s+1,strlen@cp+1
  3490  000C9A  D003               	goto	l3479
  3491  000C9C                     l3477:
  3492  000C9C  4A13               	infsnz	strlen@cp,f,c
  3493  000C9E  2A14               	incf	strlen@cp+1,f,c
  3494  000CA0  D000               	goto	l3479
  3495  000CA2                     l3479:
  3496  000CA2  C013  FFD9         	movff	strlen@cp,fsr2l
  3497  000CA6  C014  FFDA         	movff	strlen@cp+1,fsr2h
  3498  000CAA  50DF               	movf	indf2,w,c
  3499  000CAC  A4D8               	btfss	status,2,c
  3500  000CAE  D7F6               	goto	l3477
  3501  000CB0  C00F  F011         	movff	strlen@s,??_strlen
  3502  000CB4  C010  F012         	movff	strlen@s+1,??_strlen+1
  3503  000CB8  1E11               	comf	??_strlen,f,c
  3504  000CBA  1E12               	comf	??_strlen+1,f,c
  3505  000CBC  4A11               	infsnz	??_strlen,f,c
  3506  000CBE  2A12               	incf	??_strlen+1,f,c
  3507  000CC0  5013               	movf	strlen@cp,w,c
  3508  000CC2  2411               	addwf	??_strlen,w,c
  3509  000CC4  6E0F               	movwf	?_strlen,c
  3510  000CC6  5014               	movf	strlen@cp+1,w,c
  3511  000CC8  2012               	addwfc	??_strlen+1,w,c
  3512  000CCA  6E10               	movwf	?_strlen+1,c
  3513  000CCC  D000               	goto	l1095
  3514  000CCE                     l1095:
  3515  000CCE  0012               	return		;funcret
  3516  000CD0                     __end_of_strlen:
  3517                           	opt stack 0
  3518                           tblptru	equ	0xFF8
  3519                           tblptrh	equ	0xFF7
  3520                           tblptrl	equ	0xFF6
  3521                           tablat	equ	0xFF5
  3522                           prodh	equ	0xFF4
  3523                           prodl	equ	0xFF3
  3524                           intcon2	equ	0xFF1
  3525                           postinc0	equ	0xFEE
  3526                           wreg	equ	0xFE8
  3527                           postdec1	equ	0xFE5
  3528                           fsr1l	equ	0xFE1
  3529                           indf2	equ	0xFDF
  3530                           postinc2	equ	0xFDE
  3531                           postdec2	equ	0xFDD
  3532                           fsr2h	equ	0xFDA
  3533                           fsr2l	equ	0xFD9
  3534                           status	equ	0xFD8
  3535                           
  3536 ;; *************** function _drawChar *****************
  3537 ;; Defined at:
  3538 ;;		line 447 in file "ST7735_TFT.c"
  3539 ;; Parameters:    Size  Location     Type
  3540 ;;  x               1    wreg     unsigned char 
  3541 ;;  y               1   43[COMRAM] unsigned char 
  3542 ;;  c               1   44[COMRAM] unsigned char 
  3543 ;;  color           2   45[COMRAM] unsigned int 
  3544 ;;  bg              2   47[COMRAM] unsigned int 
  3545 ;;  size            1   49[COMRAM] unsigned char 
  3546 ;; Auto vars:     Size  Location     Type
  3547 ;;  x               1   51[COMRAM] unsigned char 
  3548 ;;  line            1   50[COMRAM] unsigned char 
  3549 ;;  i               1   53[COMRAM] unsigned char 
  3550 ;;  j               1   52[COMRAM] unsigned char 
  3551 ;; Return value:  Size  Location     Type
  3552 ;;		None               void
  3553 ;; Registers used:
  3554 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3555 ;; Tracked objects:
  3556 ;;		On entry : 0/0
  3557 ;;		On exit  : 0/0
  3558 ;;		Unchanged: 0/0
  3559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3560 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3561 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3563 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3564 ;;Total ram usage:       11 bytes
  3565 ;; Hardware stack levels used:    1
  3566 ;; Hardware stack levels required when called:    6
  3567 ;; This function calls:
  3568 ;;		___wmul
  3569 ;;		_drawPixel
  3570 ;;		_fillRect
  3571 ;; This function is called by:
  3572 ;;		_drawtext
  3573 ;; This function uses a non-reentrant model
  3574 ;;
  3575                           
  3576                           	psect	text16
  3577  00001C                     __ptext16:
  3578                           	opt stack 0
  3579  00001C                     _drawChar:
  3580                           	opt stack 21
  3581                           
  3582                           ;incstack = 0
  3583                           ;drawChar@x stored from wreg
  3584  00001C  6E34               	movwf	drawChar@x,c
  3585                           
  3586                           ;ST7735_TFT.c: 449: char i, j;
  3587                           ;ST7735_TFT.c: 450: if((x >= 128) || (y >= 160))
  3588  00001E  0E80               	movlw	128
  3589  000020  6034               	cpfslt	drawChar@x,c
  3590  000022  D0A6               	goto	l111
  3591  000024  0E9F               	movlw	159
  3592  000026  642C               	cpfsgt	drawChar@y,c
  3593  000028  D001               	goto	l3425
  3594                           
  3595                           ;ST7735_TFT.c: 451: return;
  3596  00002A  D0A2               	goto	l111
  3597  00002C                     l3425:
  3598                           
  3599                           ;ST7735_TFT.c: 452: if(size < 1) size = 1;
  3600  00002C  5032               	movf	drawChar@size,w,c
  3601  00002E  A4D8               	btfss	status,2,c
  3602  000030  D003               	goto	l3429
  3603  000032  0E01               	movlw	1
  3604  000034  6E32               	movwf	drawChar@size,c
  3605  000036  D000               	goto	l3429
  3606  000038                     l3429:
  3607                           
  3608                           ;ST7735_TFT.c: 453: if((c < ' ') || (c > '~'))
  3609  000038  0E1F               	movlw	31
  3610  00003A  642D               	cpfsgt	drawChar@c,c
  3611  00003C  D004               	goto	l3433
  3612  00003E  0E7E               	movlw	126
  3613  000040  642D               	cpfsgt	drawChar@c,c
  3614  000042  D003               	goto	l113
  3615  000044  D000               	goto	l3433
  3616  000046                     l3433:
  3617                           
  3618                           ;ST7735_TFT.c: 454: c = '?';
  3619  000046  0E3F               	movlw	63
  3620  000048  6E2D               	movwf	drawChar@c,c
  3621  00004A                     l113:
  3622                           
  3623                           ;ST7735_TFT.c: 455: for(i=0; i<5; i++ ) {
  3624  00004A  0E00               	movlw	0
  3625  00004C  6E36               	movwf	drawChar@i,c
  3626  00004E                     l3435:
  3627  00004E  0E04               	movlw	4
  3628  000050  6436               	cpfsgt	drawChar@i,c
  3629  000052  D001               	goto	l3439
  3630  000054  D08D               	goto	l111
  3631  000056                     l3439:
  3632                           
  3633                           ;ST7735_TFT.c: 456: unsigned char line;
  3634                           ;ST7735_TFT.c: 457: if(c < 'S')
  3635  000056  0E53               	movlw	83
  3636  000058  602D               	cpfslt	drawChar@c,c
  3637  00005A  D015               	goto	l3443
  3638                           
  3639                           ;ST7735_TFT.c: 458: line = font[(c - 32)*5 + i];
  3640  00005C  0EE0               	movlw	224
  3641  00005E  242D               	addwf	drawChar@c,w,c
  3642  000060  6E0F               	movwf	___wmul@multiplier,c
  3643  000062  6A10               	clrf	___wmul@multiplier+1,c
  3644  000064  0EFF               	movlw	255
  3645  000066  2210               	addwfc	___wmul@multiplier+1,f,c
  3646  000068  0E00               	movlw	0
  3647  00006A  6E12               	movwf	___wmul@multiplicand+1,c
  3648  00006C  0E05               	movlw	5
  3649  00006E  6E11               	movwf	___wmul@multiplicand,c
  3650  000070  EC0A  F007         	call	___wmul	;wreg free
  3651  000074  5036               	movf	drawChar@i,w,c
  3652  000076  260F               	addwf	?___wmul,f,c
  3653  000078  0E00               	movlw	0
  3654  00007A  2210               	addwfc	?___wmul+1,f,c
  3655  00007C  0ED3               	movlw	low _font
  3656  00007E  240F               	addwf	?___wmul,w,c
  3657  000080  6EF6               	movwf	tblptrl,c
  3658  000082  0EFD               	movlw	high _font
  3659  000084  D014               	goto	L1
  3660  000086                     l3443:
  3661                           
  3662                           ;ST7735_TFT.c: 459: else
  3663                           ;ST7735_TFT.c: 460: line = font2[(c - 'S')*5 + i];
  3664  000086  0EAD               	movlw	173
  3665  000088  242D               	addwf	drawChar@c,w,c
  3666  00008A  6E0F               	movwf	___wmul@multiplier,c
  3667  00008C  6A10               	clrf	___wmul@multiplier+1,c
  3668  00008E  0EFF               	movlw	255
  3669  000090  2210               	addwfc	___wmul@multiplier+1,f,c
  3670  000092  0E00               	movlw	0
  3671  000094  6E12               	movwf	___wmul@multiplicand+1,c
  3672  000096  0E05               	movlw	5
  3673  000098  6E11               	movwf	___wmul@multiplicand,c
  3674  00009A  EC0A  F007         	call	___wmul	;wreg free
  3675  00009E  5036               	movf	drawChar@i,w,c
  3676  0000A0  260F               	addwf	?___wmul,f,c
  3677  0000A2  0E00               	movlw	0
  3678  0000A4  2210               	addwfc	?___wmul+1,f,c
  3679  0000A6  0ED2               	movlw	low _font2
  3680  0000A8  240F               	addwf	?___wmul,w,c
  3681  0000AA  6EF6               	movwf	tblptrl,c
  3682  0000AC  0EFE               	movlw	high _font2
  3683  0000AE                     L1:
  3684  0000AE  2010               	addwfc	?___wmul+1,w,c
  3685  0000B0  6EF7               	movwf	tblptrh,c
  3686  0000B2                     	if	0	;There are less than 3 active tblptr bytes
  3687  0000B2                     	endif
  3688  0000B2  0008               	tblrd		*
  3689  0000B4  CFF5 F033          	movff	tablat,drawChar@line
  3690  0000B8  D000               	goto	l3445
  3691  0000BA                     l3445:
  3692                           
  3693                           ;ST7735_TFT.c: 461: for(j=0; j<7; j++, line >>= 1) {
  3694  0000BA  0E00               	movlw	0
  3695  0000BC  6E35               	movwf	drawChar@j,c
  3696  0000BE                     l3447:
  3697  0000BE  0E06               	movlw	6
  3698  0000C0  6435               	cpfsgt	drawChar@j,c
  3699  0000C2  D001               	goto	l120
  3700  0000C4  D053               	goto	l3471
  3701  0000C6                     l120:
  3702                           
  3703                           ;ST7735_TFT.c: 462: if(line & 0x01) {
  3704  0000C6  A033               	btfss	drawChar@line,0,c
  3705  0000C8  D023               	goto	l3457
  3706                           
  3707                           ;ST7735_TFT.c: 463: if(size == 1) drawPixel(x+i, y+j, color);
  3708  0000CA  0432               	decf	drawChar@size,w,c
  3709  0000CC  A4D8               	btfss	status,2,c
  3710  0000CE  D00C               	goto	l3455
  3711  0000D0  502C               	movf	drawChar@y,w,c
  3712  0000D2  2435               	addwf	drawChar@j,w,c
  3713  0000D4  6E16               	movwf	drawPixel@y,c
  3714  0000D6  C02E  F017         	movff	drawChar@color,drawPixel@color
  3715  0000DA  C02F  F018         	movff	drawChar@color+1,drawPixel@color+1
  3716  0000DE  5034               	movf	drawChar@x,w,c
  3717  0000E0  2436               	addwf	drawChar@i,w,c
  3718  0000E2  ECDD  F006         	call	_drawPixel
  3719  0000E6  D03E               	goto	l3465
  3720  0000E8                     l3455:
  3721                           
  3722                           ;ST7735_TFT.c: 464: else fillRect(x+(i*size), y+(j*size), size, size, color);
  3723  0000E8  5035               	movf	drawChar@j,w,c
  3724  0000EA  0232               	mulwf	drawChar@size,c
  3725  0000EC  50F3               	movf	prodl,w,c
  3726  0000EE  242C               	addwf	drawChar@y,w,c
  3727  0000F0  6E21               	movwf	fillRect@y,c
  3728  0000F2  C032  F022         	movff	drawChar@size,fillRect@w
  3729  0000F6  C032  F023         	movff	drawChar@size,fillRect@h
  3730  0000FA  C02E  F024         	movff	drawChar@color,fillRect@color
  3731  0000FE  C02F  F025         	movff	drawChar@color+1,fillRect@color+1
  3732  000102  5036               	movf	drawChar@i,w,c
  3733  000104  0232               	mulwf	drawChar@size,c
  3734  000106  50F3               	movf	prodl,w,c
  3735  000108  2434               	addwf	drawChar@x,w,c
  3736  00010A  ECC0  F005         	call	_fillRect
  3737                           
  3738                           ;ST7735_TFT.c: 465: }
  3739  00010E  D02A               	goto	l3465
  3740  000110                     l3457:
  3741                           
  3742                           ;ST7735_TFT.c: 466: else if(bg != color) {
  3743  000110  502E               	movf	drawChar@color,w,c
  3744  000112  1830               	xorwf	drawChar@bg,w,c
  3745  000114  E104               	bnz	u2140
  3746  000116  502F               	movf	drawChar@color+1,w,c
  3747  000118  1831               	xorwf	drawChar@bg+1,w,c
  3748  00011A  B4D8               	btfsc	status,2,c
  3749  00011C  D023               	goto	l3465
  3750  00011E                     u2140:
  3751                           
  3752                           ;ST7735_TFT.c: 467: if(size == 1) drawPixel(x+i, y+j, bg);
  3753  00011E  0432               	decf	drawChar@size,w,c
  3754  000120  A4D8               	btfss	status,2,c
  3755  000122  D00C               	goto	l3463
  3756  000124  502C               	movf	drawChar@y,w,c
  3757  000126  2435               	addwf	drawChar@j,w,c
  3758  000128  6E16               	movwf	drawPixel@y,c
  3759  00012A  C030  F017         	movff	drawChar@bg,drawPixel@color
  3760  00012E  C031  F018         	movff	drawChar@bg+1,drawPixel@color+1
  3761  000132  5034               	movf	drawChar@x,w,c
  3762  000134  2436               	addwf	drawChar@i,w,c
  3763  000136  ECDD  F006         	call	_drawPixel
  3764  00013A  D014               	goto	l3465
  3765  00013C                     l3463:
  3766                           
  3767                           ;ST7735_TFT.c: 468: else fillRect(x+i*size, y+j*size, size, size, bg);
  3768  00013C  5035               	movf	drawChar@j,w,c
  3769  00013E  0232               	mulwf	drawChar@size,c
  3770  000140  50F3               	movf	prodl,w,c
  3771  000142  242C               	addwf	drawChar@y,w,c
  3772  000144  6E21               	movwf	fillRect@y,c
  3773  000146  C032  F022         	movff	drawChar@size,fillRect@w
  3774  00014A  C032  F023         	movff	drawChar@size,fillRect@h
  3775  00014E  C030  F024         	movff	drawChar@bg,fillRect@color
  3776  000152  C031  F025         	movff	drawChar@bg+1,fillRect@color+1
  3777  000156  5036               	movf	drawChar@i,w,c
  3778  000158  0232               	mulwf	drawChar@size,c
  3779  00015A  50F3               	movf	prodl,w,c
  3780  00015C  2434               	addwf	drawChar@x,w,c
  3781  00015E  ECC0  F005         	call	_fillRect
  3782  000162  D000               	goto	l3465
  3783  000164                     l3465:
  3784  000164  2A35               	incf	drawChar@j,f,c
  3785  000166  90D8               	bcf	status,0,c
  3786  000168  3233               	rrcf	drawChar@line,f,c
  3787  00016A  D7A9               	goto	l3447
  3788  00016C                     l3471:
  3789  00016C  2A36               	incf	drawChar@i,f,c
  3790  00016E  D76F               	goto	l3435
  3791  000170                     l111:
  3792  000170  0012               	return		;funcret
  3793  000172                     __end_of_drawChar:
  3794                           	opt stack 0
  3795                           tblptru	equ	0xFF8
  3796                           tblptrh	equ	0xFF7
  3797                           tblptrl	equ	0xFF6
  3798                           tablat	equ	0xFF5
  3799                           prodh	equ	0xFF4
  3800                           prodl	equ	0xFF3
  3801                           intcon2	equ	0xFF1
  3802                           postinc0	equ	0xFEE
  3803                           wreg	equ	0xFE8
  3804                           postdec1	equ	0xFE5
  3805                           fsr1l	equ	0xFE1
  3806                           indf2	equ	0xFDF
  3807                           postinc2	equ	0xFDE
  3808                           postdec2	equ	0xFDD
  3809                           fsr2h	equ	0xFDA
  3810                           fsr2l	equ	0xFD9
  3811                           status	equ	0xFD8
  3812                           
  3813 ;; *************** function _fillRect *****************
  3814 ;; Defined at:
  3815 ;;		line 437 in file "ST7735_TFT.c"
  3816 ;; Parameters:    Size  Location     Type
  3817 ;;  x               1    wreg     unsigned char 
  3818 ;;  y               1   32[COMRAM] unsigned char 
  3819 ;;  w               1   33[COMRAM] unsigned char 
  3820 ;;  h               1   34[COMRAM] unsigned char 
  3821 ;;  color           2   35[COMRAM] unsigned int 
  3822 ;; Auto vars:     Size  Location     Type
  3823 ;;  x               1   40[COMRAM] unsigned char 
  3824 ;;  i               2   41[COMRAM] int 
  3825 ;; Return value:  Size  Location     Type
  3826 ;;		None               void
  3827 ;; Registers used:
  3828 ;;		wreg, status,2, status,0, cstack
  3829 ;; Tracked objects:
  3830 ;;		On entry : 0/0
  3831 ;;		On exit  : 0/0
  3832 ;;		Unchanged: 0/0
  3833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3834 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3835 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3836 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3837 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3838 ;;Total ram usage:       11 bytes
  3839 ;; Hardware stack levels used:    1
  3840 ;; Hardware stack levels required when called:    5
  3841 ;; This function calls:
  3842 ;;		_drawFastVLine
  3843 ;; This function is called by:
  3844 ;;		_drawChar
  3845 ;; This function uses a non-reentrant model
  3846 ;;
  3847                           
  3848                           	psect	text17
  3849  000B80                     __ptext17:
  3850                           	opt stack 0
  3851  000B80                     _fillRect:
  3852                           	opt stack 21
  3853                           
  3854                           ;incstack = 0
  3855                           ;fillRect@x stored from wreg
  3856  000B80  6E29               	movwf	fillRect@x,c
  3857                           
  3858                           ;ST7735_TFT.c: 439: signed int i;
  3859                           ;ST7735_TFT.c: 441: for (i = x; i < x + w; i++)
  3860  000B82  C029  F02A         	movff	fillRect@x,fillRect@i
  3861  000B86  6A2B               	clrf	fillRect@i+1,c
  3862  000B88  D00E               	goto	l3327
  3863  000B8A                     l3323:
  3864                           
  3865                           ;ST7735_TFT.c: 442: {
  3866                           ;ST7735_TFT.c: 443: drawFastVLine(i, y, h, color);
  3867  000B8A  C021  F016         	movff	fillRect@y,drawFastVLine@y
  3868  000B8E  C023  F017         	movff	fillRect@h,drawFastVLine@h
  3869  000B92  C024  F018         	movff	fillRect@color,drawFastVLine@color
  3870  000B96  C025  F019         	movff	fillRect@color+1,drawFastVLine@color+1
  3871  000B9A  502A               	movf	fillRect@i,w,c
  3872  000B9C  ECDE  F003         	call	_drawFastVLine
  3873  000BA0  4A2A               	infsnz	fillRect@i,f,c
  3874  000BA2  2A2B               	incf	fillRect@i+1,f,c
  3875  000BA4  D000               	goto	l3327
  3876  000BA6                     l3327:
  3877  000BA6  5022               	movf	fillRect@w,w,c
  3878  000BA8  C029  F026         	movff	fillRect@x,??_fillRect
  3879  000BAC  6A27               	clrf	(??_fillRect+1)& (0+255),c
  3880  000BAE  2626               	addwf	??_fillRect,f,c
  3881  000BB0  0E00               	movlw	0
  3882  000BB2  2227               	addwfc	??_fillRect+1,f,c
  3883  000BB4  5026               	movf	??_fillRect,w,c
  3884  000BB6  5C2A               	subwf	fillRect@i,w,c
  3885  000BB8  502B               	movf	fillRect@i+1,w,c
  3886  000BBA  0A80               	xorlw	128
  3887  000BBC  6E28               	movwf	(??_fillRect+2)& (0+255),c
  3888  000BBE  5027               	movf	??_fillRect+1,w,c
  3889  000BC0  0A80               	xorlw	128
  3890  000BC2  5828               	subwfb	(??_fillRect+2)& (0+255),w,c
  3891  000BC4  A0D8               	btfss	status,0,c
  3892  000BC6  D7E1               	goto	l3323
  3893  000BC8  0012               	return		;funcret
  3894  000BCA                     __end_of_fillRect:
  3895                           	opt stack 0
  3896                           tblptru	equ	0xFF8
  3897                           tblptrh	equ	0xFF7
  3898                           tblptrl	equ	0xFF6
  3899                           tablat	equ	0xFF5
  3900                           prodh	equ	0xFF4
  3901                           prodl	equ	0xFF3
  3902                           intcon2	equ	0xFF1
  3903                           postinc0	equ	0xFEE
  3904                           wreg	equ	0xFE8
  3905                           postdec1	equ	0xFE5
  3906                           fsr1l	equ	0xFE1
  3907                           indf2	equ	0xFDF
  3908                           postinc2	equ	0xFDE
  3909                           postdec2	equ	0xFDD
  3910                           fsr2h	equ	0xFDA
  3911                           fsr2l	equ	0xFD9
  3912                           status	equ	0xFD8
  3913                           
  3914 ;; *************** function _drawFastVLine *****************
  3915 ;; Defined at:
  3916 ;;		line 416 in file "ST7735_TFT.c"
  3917 ;; Parameters:    Size  Location     Type
  3918 ;;  x               1    wreg     unsigned char 
  3919 ;;  y               1   21[COMRAM] unsigned char 
  3920 ;;  h               1   22[COMRAM] unsigned char 
  3921 ;;  color           2   23[COMRAM] unsigned int 
  3922 ;; Auto vars:     Size  Location     Type
  3923 ;;  x               1   31[COMRAM] unsigned char 
  3924 ;;  lo              1   30[COMRAM] unsigned char 
  3925 ;;  hi              1   29[COMRAM] unsigned char 
  3926 ;; Return value:  Size  Location     Type
  3927 ;;		None               void
  3928 ;; Registers used:
  3929 ;;		wreg, status,2, status,0, cstack
  3930 ;; Tracked objects:
  3931 ;;		On entry : 0/0
  3932 ;;		On exit  : 0/0
  3933 ;;		Unchanged: 0/0
  3934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3935 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3936 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3937 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3938 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3939 ;;Total ram usage:       11 bytes
  3940 ;; Hardware stack levels used:    1
  3941 ;; Hardware stack levels required when called:    4
  3942 ;; This function calls:
  3943 ;;		_setAddrWindow
  3944 ;;		_spiwrite
  3945 ;; This function is called by:
  3946 ;;		_fillRect
  3947 ;;		_fillCircleHelper
  3948 ;;		_fillCircle
  3949 ;;		_drawRect
  3950 ;; This function uses a non-reentrant model
  3951 ;;
  3952                           
  3953                           	psect	text18
  3954  0007BC                     __ptext18:
  3955                           	opt stack 0
  3956  0007BC                     _drawFastVLine:
  3957                           	opt stack 21
  3958                           
  3959                           ;incstack = 0
  3960                           ;drawFastVLine@x stored from wreg
  3961  0007BC  6E20               	movwf	drawFastVLine@x,c
  3962                           
  3963                           ;ST7735_TFT.c: 418: unsigned char hi, lo;
  3964                           ;ST7735_TFT.c: 419: if((x >= 128) || (y >= 160))
  3965  0007BE  0E80               	movlw	128
  3966  0007C0  6020               	cpfslt	drawFastVLine@x,c
  3967  0007C2  D03F               	goto	l95
  3968  0007C4  0E9F               	movlw	159
  3969  0007C6  6416               	cpfsgt	drawFastVLine@y,c
  3970  0007C8  D001               	goto	l3273
  3971                           
  3972                           ;ST7735_TFT.c: 420: return;
  3973  0007CA  D03B               	goto	l95
  3974  0007CC                     l3273:
  3975                           
  3976                           ;ST7735_TFT.c: 421: if((y + h - 1) >= 160)
  3977  0007CC  0EFF               	movlw	255
  3978  0007CE  6E1A               	movwf	??_drawFastVLine& (0+255),c
  3979  0007D0  0EFF               	movlw	255
  3980  0007D2  6E1B               	movwf	(??_drawFastVLine+1)& (0+255),c
  3981  0007D4  5017               	movf	drawFastVLine@h,w,c
  3982  0007D6  C016  F01C         	movff	drawFastVLine@y,??_drawFastVLine+2
  3983  0007DA  6A1D               	clrf	(??_drawFastVLine+3)& (0+255),c
  3984  0007DC  261C               	addwf	??_drawFastVLine+2,f,c
  3985  0007DE  0E00               	movlw	0
  3986  0007E0  221D               	addwfc	??_drawFastVLine+3,f,c
  3987  0007E2  501A               	movf	??_drawFastVLine,w,c
  3988  0007E4  261C               	addwf	??_drawFastVLine+2,f,c
  3989  0007E6  501B               	movf	??_drawFastVLine+1,w,c
  3990  0007E8  221D               	addwfc	??_drawFastVLine+3,f,c
  3991  0007EA  BE1D               	btfsc	??_drawFastVLine+3,7,c
  3992  0007EC  D00B               	goto	l3277
  3993  0007EE  501D               	movf	??_drawFastVLine+3,w,c
  3994  0007F0  E104               	bnz	u1980
  3995  0007F2  0EA0               	movlw	160
  3996  0007F4  5C1C               	subwf	??_drawFastVLine+2,w,c
  3997  0007F6  A0D8               	btfss	status,0,c
  3998  0007F8  D005               	goto	l3277
  3999  0007FA                     u1980:
  4000                           
  4001                           ;ST7735_TFT.c: 422: h = 160 - y;
  4002  0007FA  5016               	movf	drawFastVLine@y,w,c
  4003  0007FC  0800               	sublw	0
  4004  0007FE  0FA0               	addlw	160
  4005  000800  6E17               	movwf	drawFastVLine@h,c
  4006  000802  D000               	goto	l3277
  4007  000804                     l3277:
  4008                           
  4009                           ;ST7735_TFT.c: 423: hi = color >> 8; lo = color;
  4010  000804  5019               	movf	drawFastVLine@color+1,w,c
  4011  000806  6E1E               	movwf	drawFastVLine@hi,c
  4012  000808  C018  F01F         	movff	drawFastVLine@color,drawFastVLine@lo
  4013                           
  4014                           ;ST7735_TFT.c: 424: setAddrWindow(x, y, x, y + h - 1);
  4015  00080C  C016  F012         	movff	drawFastVLine@y,setAddrWindow@y0
  4016  000810  C020  F013         	movff	drawFastVLine@x,setAddrWindow@x1
  4017  000814  5016               	movf	drawFastVLine@y,w,c
  4018  000816  2417               	addwf	drawFastVLine@h,w,c
  4019  000818  6E1A               	movwf	??_drawFastVLine& (0+255),c
  4020  00081A  041A               	decf	??_drawFastVLine,w,c
  4021  00081C  6E14               	movwf	setAddrWindow@y1,c
  4022  00081E  5020               	movf	drawFastVLine@x,w,c
  4023  000820  EC73  F005         	call	_setAddrWindow
  4024                           
  4025                           ;ST7735_TFT.c: 425: PORTCbits.RC0 = 1;
  4026  000824  8082               	bsf	3970,0,c	;volatile
  4027                           
  4028                           ;ST7735_TFT.c: 426: PORTCbits.RC1 = 0;
  4029  000826  9282               	bcf	3970,1,c	;volatile
  4030                           
  4031                           ;ST7735_TFT.c: 428: while (h--) {
  4032  000828  D007               	goto	l3289
  4033  00082A                     l3287:
  4034                           
  4035                           ;ST7735_TFT.c: 429: spiwrite(hi);
  4036  00082A  501E               	movf	drawFastVLine@hi,w,c
  4037  00082C  EC7F  F007         	call	_spiwrite
  4038                           
  4039                           ;ST7735_TFT.c: 430: spiwrite(lo);
  4040  000830  501F               	movf	drawFastVLine@lo,w,c
  4041  000832  EC7F  F007         	call	_spiwrite
  4042  000836  D000               	goto	l3289
  4043  000838                     l3289:
  4044  000838  0617               	decf	drawFastVLine@h,f,c
  4045  00083A  2817               	incf	drawFastVLine@h,w,c
  4046  00083C  A4D8               	btfss	status,2,c
  4047  00083E  D7F5               	goto	l3287
  4048                           
  4049                           ;ST7735_TFT.c: 431: }
  4050                           ;ST7735_TFT.c: 432: PORTCbits.RC1 = 1;
  4051  000840  8282               	bsf	3970,1,c	;volatile
  4052  000842                     l95:
  4053  000842  0012               	return		;funcret
  4054  000844                     __end_of_drawFastVLine:
  4055                           	opt stack 0
  4056                           tblptru	equ	0xFF8
  4057                           tblptrh	equ	0xFF7
  4058                           tblptrl	equ	0xFF6
  4059                           tablat	equ	0xFF5
  4060                           prodh	equ	0xFF4
  4061                           prodl	equ	0xFF3
  4062                           intcon2	equ	0xFF1
  4063                           postinc0	equ	0xFEE
  4064                           wreg	equ	0xFE8
  4065                           postdec1	equ	0xFE5
  4066                           fsr1l	equ	0xFE1
  4067                           indf2	equ	0xFDF
  4068                           postinc2	equ	0xFDE
  4069                           postdec2	equ	0xFDD
  4070                           fsr2h	equ	0xFDA
  4071                           fsr2l	equ	0xFD9
  4072                           status	equ	0xFD8
  4073                           
  4074 ;; *************** function _drawPixel *****************
  4075 ;; Defined at:
  4076 ;;		line 407 in file "ST7735_TFT.c"
  4077 ;; Parameters:    Size  Location     Type
  4078 ;;  x               1    wreg     unsigned char 
  4079 ;;  y               1   21[COMRAM] unsigned char 
  4080 ;;  color           2   22[COMRAM] unsigned int 
  4081 ;; Auto vars:     Size  Location     Type
  4082 ;;  x               1   24[COMRAM] unsigned char 
  4083 ;; Return value:  Size  Location     Type
  4084 ;;		None               void
  4085 ;; Registers used:
  4086 ;;		wreg, status,2, status,0, cstack
  4087 ;; Tracked objects:
  4088 ;;		On entry : 0/0
  4089 ;;		On exit  : 0/0
  4090 ;;		Unchanged: 0/0
  4091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4092 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4093 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4095 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4096 ;;Total ram usage:        4 bytes
  4097 ;; Hardware stack levels used:    1
  4098 ;; Hardware stack levels required when called:    4
  4099 ;; This function calls:
  4100 ;;		_setAddrWindow
  4101 ;;		_write_data
  4102 ;; This function is called by:
  4103 ;;		_drawChar
  4104 ;;		_drawCircle
  4105 ;;		_drawCircleHelper
  4106 ;; This function uses a non-reentrant model
  4107 ;;
  4108                           
  4109                           	psect	text19
  4110  000DBA                     __ptext19:
  4111                           	opt stack 0
  4112  000DBA                     _drawPixel:
  4113                           	opt stack 22
  4114                           
  4115                           ;incstack = 0
  4116                           ;drawPixel@x stored from wreg
  4117  000DBA  6E19               	movwf	drawPixel@x,c
  4118                           
  4119                           ;ST7735_TFT.c: 409: if((x >= 128) || (y >= 160))
  4120  000DBC  0E80               	movlw	128
  4121  000DBE  6019               	cpfslt	drawPixel@x,c
  4122  000DC0  D013               	goto	l89
  4123  000DC2  0E9F               	movlw	159
  4124  000DC4  6416               	cpfsgt	drawPixel@y,c
  4125  000DC6  D001               	goto	l3315
  4126                           
  4127                           ;ST7735_TFT.c: 410: return;
  4128  000DC8  D00F               	goto	l89
  4129  000DCA                     l3315:
  4130                           
  4131                           ;ST7735_TFT.c: 411: setAddrWindow(x,y,x+1,y+1);
  4132  000DCA  C016  F012         	movff	drawPixel@y,setAddrWindow@y0
  4133  000DCE  2819               	incf	drawPixel@x,w,c
  4134  000DD0  6E13               	movwf	setAddrWindow@x1,c
  4135  000DD2  2816               	incf	drawPixel@y,w,c
  4136  000DD4  6E14               	movwf	setAddrWindow@y1,c
  4137  000DD6  5019               	movf	drawPixel@x,w,c
  4138  000DD8  EC73  F005         	call	_setAddrWindow
  4139                           
  4140                           ;ST7735_TFT.c: 412: write_data(color >> 8);
  4141  000DDC  5018               	movf	drawPixel@color+1,w,c
  4142  000DDE  ECAD  F007         	call	_write_data
  4143                           
  4144                           ;ST7735_TFT.c: 413: write_data(color & 0xFF);
  4145  000DE2  5017               	movf	drawPixel@color,w,c
  4146  000DE4  ECAD  F007         	call	_write_data
  4147  000DE8                     l89:
  4148  000DE8  0012               	return		;funcret
  4149  000DEA                     __end_of_drawPixel:
  4150                           	opt stack 0
  4151                           tblptru	equ	0xFF8
  4152                           tblptrh	equ	0xFF7
  4153                           tblptrl	equ	0xFF6
  4154                           tablat	equ	0xFF5
  4155                           prodh	equ	0xFF4
  4156                           prodl	equ	0xFF3
  4157                           intcon2	equ	0xFF1
  4158                           postinc0	equ	0xFEE
  4159                           wreg	equ	0xFE8
  4160                           postdec1	equ	0xFE5
  4161                           fsr1l	equ	0xFE1
  4162                           indf2	equ	0xFDF
  4163                           postinc2	equ	0xFDE
  4164                           postdec2	equ	0xFDD
  4165                           fsr2h	equ	0xFDA
  4166                           fsr2l	equ	0xFD9
  4167                           status	equ	0xFD8
  4168                           
  4169 ;; *************** function _setAddrWindow *****************
  4170 ;; Defined at:
  4171 ;;		line 392 in file "ST7735_TFT.c"
  4172 ;; Parameters:    Size  Location     Type
  4173 ;;  x0              1    wreg     unsigned char 
  4174 ;;  y0              1   17[COMRAM] unsigned char 
  4175 ;;  x1              1   18[COMRAM] unsigned char 
  4176 ;;  y1              1   19[COMRAM] unsigned char 
  4177 ;; Auto vars:     Size  Location     Type
  4178 ;;  x0              1   20[COMRAM] unsigned char 
  4179 ;; Return value:  Size  Location     Type
  4180 ;;		None               void
  4181 ;; Registers used:
  4182 ;;		wreg, status,2, status,0, cstack
  4183 ;; Tracked objects:
  4184 ;;		On entry : 0/0
  4185 ;;		On exit  : 0/0
  4186 ;;		Unchanged: 0/0
  4187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4188 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4189 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4191 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4192 ;;Total ram usage:        4 bytes
  4193 ;; Hardware stack levels used:    1
  4194 ;; Hardware stack levels required when called:    3
  4195 ;; This function calls:
  4196 ;;		_write_command
  4197 ;;		_write_data
  4198 ;; This function is called by:
  4199 ;;		_drawPixel
  4200 ;;		_drawFastVLine
  4201 ;;		_fillRectangle
  4202 ;;		_drawFastHLine
  4203 ;; This function uses a non-reentrant model
  4204 ;;
  4205                           
  4206                           	psect	text20
  4207  000AE6                     __ptext20:
  4208                           	opt stack 0
  4209  000AE6                     _setAddrWindow:
  4210                           	opt stack 23
  4211                           
  4212                           ;incstack = 0
  4213                           ;setAddrWindow@x0 stored from wreg
  4214  000AE6  6E15               	movwf	setAddrWindow@x0,c
  4215                           
  4216                           ;ST7735_TFT.c: 394: write_command(0x2A);
  4217  000AE8  0E2A               	movlw	42
  4218  000AEA  ECB5  F007         	call	_write_command
  4219                           
  4220                           ;ST7735_TFT.c: 395: write_data(0);
  4221  000AEE  0E00               	movlw	0
  4222  000AF0  ECAD  F007         	call	_write_data
  4223                           
  4224                           ;ST7735_TFT.c: 396: write_data(x0 + colstart);
  4225  000AF4  5015               	movf	setAddrWindow@x0,w,c
  4226  000AF6  2458               	addwf	_colstart,w,c
  4227  000AF8  ECAD  F007         	call	_write_data
  4228                           
  4229                           ;ST7735_TFT.c: 397: write_data(0);
  4230  000AFC  0E00               	movlw	0
  4231  000AFE  ECAD  F007         	call	_write_data
  4232                           
  4233                           ;ST7735_TFT.c: 398: write_data(x1 + colstart);
  4234  000B02  5013               	movf	setAddrWindow@x1,w,c
  4235  000B04  2458               	addwf	_colstart,w,c
  4236  000B06  ECAD  F007         	call	_write_data
  4237                           
  4238                           ;ST7735_TFT.c: 399: write_command(0x2B);
  4239  000B0A  0E2B               	movlw	43
  4240  000B0C  ECB5  F007         	call	_write_command
  4241                           
  4242                           ;ST7735_TFT.c: 400: write_data(0);
  4243  000B10  0E00               	movlw	0
  4244  000B12  ECAD  F007         	call	_write_data
  4245                           
  4246                           ;ST7735_TFT.c: 401: write_data(y0 + rowstart);
  4247  000B16  5012               	movf	setAddrWindow@y0,w,c
  4248  000B18  2460               	addwf	_rowstart,w,c
  4249  000B1A  ECAD  F007         	call	_write_data
  4250                           
  4251                           ;ST7735_TFT.c: 402: write_data(0);
  4252  000B1E  0E00               	movlw	0
  4253  000B20  ECAD  F007         	call	_write_data
  4254                           
  4255                           ;ST7735_TFT.c: 403: write_data(y1 + rowstart);
  4256  000B24  5014               	movf	setAddrWindow@y1,w,c
  4257  000B26  2460               	addwf	_rowstart,w,c
  4258  000B28  ECAD  F007         	call	_write_data
  4259                           
  4260                           ;ST7735_TFT.c: 404: write_command(0x2C);
  4261  000B2C  0E2C               	movlw	44
  4262  000B2E  ECB5  F007         	call	_write_command
  4263  000B32  0012               	return		;funcret
  4264  000B34                     __end_of_setAddrWindow:
  4265                           	opt stack 0
  4266                           tblptru	equ	0xFF8
  4267                           tblptrh	equ	0xFF7
  4268                           tblptrl	equ	0xFF6
  4269                           tablat	equ	0xFF5
  4270                           prodh	equ	0xFF4
  4271                           prodl	equ	0xFF3
  4272                           intcon2	equ	0xFF1
  4273                           postinc0	equ	0xFEE
  4274                           wreg	equ	0xFE8
  4275                           postdec1	equ	0xFE5
  4276                           fsr1l	equ	0xFE1
  4277                           indf2	equ	0xFDF
  4278                           postinc2	equ	0xFDE
  4279                           postdec2	equ	0xFDD
  4280                           fsr2h	equ	0xFDA
  4281                           fsr2l	equ	0xFD9
  4282                           status	equ	0xFD8
  4283                           
  4284 ;; *************** function _TFT_GreenTab_Initialize *****************
  4285 ;; Defined at:
  4286 ;;		line 644 in file "ST7735_TFT.c"
  4287 ;; Parameters:    Size  Location     Type
  4288 ;;		None
  4289 ;; Auto vars:     Size  Location     Type
  4290 ;;		None
  4291 ;; Return value:  Size  Location     Type
  4292 ;;		None               void
  4293 ;; Registers used:
  4294 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4295 ;; Tracked objects:
  4296 ;;		On entry : 0/0
  4297 ;;		On exit  : 0/0
  4298 ;;		Unchanged: 0/0
  4299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4304 ;;Total ram usage:        0 bytes
  4305 ;; Hardware stack levels used:    1
  4306 ;; Hardware stack levels required when called:    4
  4307 ;; This function calls:
  4308 ;;		_Rcmd1
  4309 ;;		_Rcmd2red
  4310 ;;		_Rcmd3
  4311 ;;		_write_command
  4312 ;;		_write_data
  4313 ;; This function is called by:
  4314 ;;		_Initialize_Screen
  4315 ;; This function uses a non-reentrant model
  4316 ;;
  4317                           
  4318                           	psect	text21
  4319  000DEA                     __ptext21:
  4320                           	opt stack 0
  4321  000DEA                     _TFT_GreenTab_Initialize:
  4322                           	opt stack 24
  4323                           
  4324                           ;ST7735_TFT.c: 646: PORTCbits.RC1 = 1;
  4325                           
  4326                           ;incstack = 0
  4327  000DEA  8282               	bsf	3970,1,c	;volatile
  4328                           
  4329                           ;ST7735_TFT.c: 647: PORTCbits.RC0 = 0;
  4330  000DEC  9082               	bcf	3970,0,c	;volatile
  4331                           
  4332                           ;ST7735_TFT.c: 649: SSPSTAT=0x80;
  4333  000DEE  0E80               	movlw	128
  4334  000DF0  6EC7               	movwf	4039,c	;volatile
  4335                           
  4336                           ;ST7735_TFT.c: 650: SSPCON1=0x30;
  4337  000DF2  0E30               	movlw	48
  4338  000DF4  6EC6               	movwf	4038,c	;volatile
  4339                           
  4340                           ;ST7735_TFT.c: 653: Rcmd1();
  4341  000DF6  EC58  F001         	call	_Rcmd1	;wreg free
  4342                           
  4343                           ;ST7735_TFT.c: 654: Rcmd2red();
  4344  000DFA  EC68  F006         	call	_Rcmd2red	;wreg free
  4345                           
  4346                           ;ST7735_TFT.c: 655: Rcmd3();
  4347  000DFE  EC65  F002         	call	_Rcmd3	;wreg free
  4348                           
  4349                           ;ST7735_TFT.c: 656: write_command(0x36);
  4350  000E02  0E36               	movlw	54
  4351  000E04  ECB5  F007         	call	_write_command
  4352                           
  4353                           ;ST7735_TFT.c: 657: write_data(0xC0);
  4354  000E08  0EC0               	movlw	192
  4355  000E0A  ECAD  F007         	call	_write_data
  4356                           
  4357                           ;ST7735_TFT.c: 658: _tft_type = 1;
  4358  000E0E  0E01               	movlw	1
  4359  000E10  6E52               	movwf	__tft_type,c
  4360  000E12  0012               	return		;funcret
  4361  000E14                     __end_of_TFT_GreenTab_Initialize:
  4362                           	opt stack 0
  4363                           tblptru	equ	0xFF8
  4364                           tblptrh	equ	0xFF7
  4365                           tblptrl	equ	0xFF6
  4366                           tablat	equ	0xFF5
  4367                           prodh	equ	0xFF4
  4368                           prodl	equ	0xFF3
  4369                           intcon2	equ	0xFF1
  4370                           postinc0	equ	0xFEE
  4371                           wreg	equ	0xFE8
  4372                           postdec1	equ	0xFE5
  4373                           fsr1l	equ	0xFE1
  4374                           indf2	equ	0xFDF
  4375                           postinc2	equ	0xFDE
  4376                           postdec2	equ	0xFDD
  4377                           fsr2h	equ	0xFDA
  4378                           fsr2l	equ	0xFD9
  4379                           status	equ	0xFD8
  4380                           
  4381 ;; *************** function _Rcmd3 *****************
  4382 ;; Defined at:
  4383 ;;		line 338 in file "ST7735_TFT.c"
  4384 ;; Parameters:    Size  Location     Type
  4385 ;;		None
  4386 ;; Auto vars:     Size  Location     Type
  4387 ;;		None
  4388 ;; Return value:  Size  Location     Type
  4389 ;;		None               void
  4390 ;; Registers used:
  4391 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4392 ;; Tracked objects:
  4393 ;;		On entry : 0/0
  4394 ;;		On exit  : 0/0
  4395 ;;		Unchanged: 0/0
  4396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4401 ;;Total ram usage:        0 bytes
  4402 ;; Hardware stack levels used:    1
  4403 ;; Hardware stack levels required when called:    3
  4404 ;; This function calls:
  4405 ;;		_delay_ms
  4406 ;;		_write_command
  4407 ;;		_write_data
  4408 ;; This function is called by:
  4409 ;;		_TFT_GreenTab_Initialize
  4410 ;;		_TFT_BlackTab_Initialize
  4411 ;; This function uses a non-reentrant model
  4412 ;;
  4413                           
  4414                           	psect	text22
  4415  0004CA                     __ptext22:
  4416                           	opt stack 0
  4417  0004CA                     _Rcmd3:
  4418                           	opt stack 24
  4419                           
  4420                           ;ST7735_TFT.c: 340: write_command(0xE0);
  4421                           
  4422                           ;incstack = 0
  4423  0004CA  0EE0               	movlw	224
  4424  0004CC  ECB5  F007         	call	_write_command
  4425                           
  4426                           ;ST7735_TFT.c: 341: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  4427  0004D0  0E02               	movlw	2
  4428  0004D2  ECAD  F007         	call	_write_data
  4429  0004D6  0E1C               	movlw	28
  4430  0004D8  ECAD  F007         	call	_write_data
  4431  0004DC  0E07               	movlw	7
  4432  0004DE  ECAD  F007         	call	_write_data
  4433  0004E2  0E12               	movlw	18
  4434  0004E4  ECAD  F007         	call	_write_data
  4435                           
  4436                           ;ST7735_TFT.c: 342: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  4437  0004E8  0E37               	movlw	55
  4438  0004EA  ECAD  F007         	call	_write_data
  4439  0004EE  0E32               	movlw	50
  4440  0004F0  ECAD  F007         	call	_write_data
  4441  0004F4  0E29               	movlw	41
  4442  0004F6  ECAD  F007         	call	_write_data
  4443  0004FA  0E2D               	movlw	45
  4444  0004FC  ECAD  F007         	call	_write_data
  4445                           
  4446                           ;ST7735_TFT.c: 343: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  4447  000500  0E29               	movlw	41
  4448  000502  ECAD  F007         	call	_write_data
  4449  000506  0E25               	movlw	37
  4450  000508  ECAD  F007         	call	_write_data
  4451  00050C  0E2B               	movlw	43
  4452  00050E  ECAD  F007         	call	_write_data
  4453  000512  0E39               	movlw	57
  4454  000514  ECAD  F007         	call	_write_data
  4455                           
  4456                           ;ST7735_TFT.c: 344: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  4457  000518  0E00               	movlw	0
  4458  00051A  ECAD  F007         	call	_write_data
  4459  00051E  0E01               	movlw	1
  4460  000520  ECAD  F007         	call	_write_data
  4461  000524  0E03               	movlw	3
  4462  000526  ECAD  F007         	call	_write_data
  4463  00052A  0E10               	movlw	16
  4464  00052C  ECAD  F007         	call	_write_data
  4465                           
  4466                           ;ST7735_TFT.c: 345: write_command(0xE1);
  4467  000530  0EE1               	movlw	225
  4468  000532  ECB5  F007         	call	_write_command
  4469                           
  4470                           ;ST7735_TFT.c: 346: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  4471  000536  0E03               	movlw	3
  4472  000538  ECAD  F007         	call	_write_data
  4473  00053C  0E1D               	movlw	29
  4474  00053E  ECAD  F007         	call	_write_data
  4475  000542  0E07               	movlw	7
  4476  000544  ECAD  F007         	call	_write_data
  4477  000548  0E06               	movlw	6
  4478  00054A  ECAD  F007         	call	_write_data
  4479                           
  4480                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  4481  00054E  0E2E               	movlw	46
  4482  000550  ECAD  F007         	call	_write_data
  4483  000554  0E2C               	movlw	44
  4484  000556  ECAD  F007         	call	_write_data
  4485  00055A  0E29               	movlw	41
  4486  00055C  ECAD  F007         	call	_write_data
  4487  000560  0E2D               	movlw	45
  4488  000562  ECAD  F007         	call	_write_data
  4489                           
  4490                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  4491  000566  0E2E               	movlw	46
  4492  000568  ECAD  F007         	call	_write_data
  4493  00056C  0E2E               	movlw	46
  4494  00056E  ECAD  F007         	call	_write_data
  4495  000572  0E37               	movlw	55
  4496  000574  ECAD  F007         	call	_write_data
  4497  000578  0E3F               	movlw	63
  4498  00057A  ECAD  F007         	call	_write_data
  4499                           
  4500                           ;ST7735_TFT.c: 349: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  4501  00057E  0E00               	movlw	0
  4502  000580  ECAD  F007         	call	_write_data
  4503  000584  0E00               	movlw	0
  4504  000586  ECAD  F007         	call	_write_data
  4505  00058A  0E02               	movlw	2
  4506  00058C  ECAD  F007         	call	_write_data
  4507  000590  0E10               	movlw	16
  4508  000592  ECAD  F007         	call	_write_data
  4509                           
  4510                           ;ST7735_TFT.c: 350: write_command(0x13);
  4511  000596  0E13               	movlw	19
  4512  000598  ECB5  F007         	call	_write_command
  4513                           
  4514                           ;ST7735_TFT.c: 351: delay_ms(10);
  4515  00059C  0E00               	movlw	0
  4516  00059E  6E16               	movwf	delay_ms@ms+1,c
  4517  0005A0  0E0A               	movlw	10
  4518  0005A2  6E15               	movwf	delay_ms@ms,c
  4519  0005A4  EC23  F005         	call	_delay_ms	;wreg free
  4520                           
  4521                           ;ST7735_TFT.c: 352: write_command(0x29);
  4522  0005A8  0E29               	movlw	41
  4523  0005AA  ECB5  F007         	call	_write_command
  4524                           
  4525                           ;ST7735_TFT.c: 353: delay_ms(100);
  4526  0005AE  0E00               	movlw	0
  4527  0005B0  6E16               	movwf	delay_ms@ms+1,c
  4528  0005B2  0E64               	movlw	100
  4529  0005B4  6E15               	movwf	delay_ms@ms,c
  4530  0005B6  EC23  F005         	call	_delay_ms	;wreg free
  4531  0005BA  0012               	return		;funcret
  4532  0005BC                     __end_of_Rcmd3:
  4533                           	opt stack 0
  4534                           tblptru	equ	0xFF8
  4535                           tblptrh	equ	0xFF7
  4536                           tblptrl	equ	0xFF6
  4537                           tablat	equ	0xFF5
  4538                           prodh	equ	0xFF4
  4539                           prodl	equ	0xFF3
  4540                           intcon2	equ	0xFF1
  4541                           postinc0	equ	0xFEE
  4542                           wreg	equ	0xFE8
  4543                           postdec1	equ	0xFE5
  4544                           fsr1l	equ	0xFE1
  4545                           indf2	equ	0xFDF
  4546                           postinc2	equ	0xFDE
  4547                           postdec2	equ	0xFDD
  4548                           fsr2h	equ	0xFDA
  4549                           fsr2l	equ	0xFD9
  4550                           status	equ	0xFD8
  4551                           
  4552 ;; *************** function _Rcmd2red *****************
  4553 ;; Defined at:
  4554 ;;		line 328 in file "ST7735_TFT.c"
  4555 ;; Parameters:    Size  Location     Type
  4556 ;;		None
  4557 ;; Auto vars:     Size  Location     Type
  4558 ;;		None
  4559 ;; Return value:  Size  Location     Type
  4560 ;;		None               void
  4561 ;; Registers used:
  4562 ;;		wreg, status,2, cstack
  4563 ;; Tracked objects:
  4564 ;;		On entry : 0/0
  4565 ;;		On exit  : 0/0
  4566 ;;		Unchanged: 0/0
  4567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4572 ;;Total ram usage:        0 bytes
  4573 ;; Hardware stack levels used:    1
  4574 ;; Hardware stack levels required when called:    3
  4575 ;; This function calls:
  4576 ;;		_write_command
  4577 ;;		_write_data
  4578 ;; This function is called by:
  4579 ;;		_TFT_GreenTab_Initialize
  4580 ;; This function uses a non-reentrant model
  4581 ;;
  4582                           
  4583                           	psect	text23
  4584  000CD0                     __ptext23:
  4585                           	opt stack 0
  4586  000CD0                     _Rcmd2red:
  4587                           	opt stack 24
  4588                           
  4589                           ;ST7735_TFT.c: 330: write_command(0x2A);
  4590                           
  4591                           ;incstack = 0
  4592  000CD0  0E2A               	movlw	42
  4593  000CD2  ECB5  F007         	call	_write_command
  4594                           
  4595                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x00);
  4596  000CD6  0E00               	movlw	0
  4597  000CD8  ECAD  F007         	call	_write_data
  4598  000CDC  0E00               	movlw	0
  4599  000CDE  ECAD  F007         	call	_write_data
  4600                           
  4601                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x7F);
  4602  000CE2  0E00               	movlw	0
  4603  000CE4  ECAD  F007         	call	_write_data
  4604  000CE8  0E7F               	movlw	127
  4605  000CEA  ECAD  F007         	call	_write_data
  4606                           
  4607                           ;ST7735_TFT.c: 333: write_command(0x2B);
  4608  000CEE  0E2B               	movlw	43
  4609  000CF0  ECB5  F007         	call	_write_command
  4610                           
  4611                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x00);
  4612  000CF4  0E00               	movlw	0
  4613  000CF6  ECAD  F007         	call	_write_data
  4614  000CFA  0E00               	movlw	0
  4615  000CFC  ECAD  F007         	call	_write_data
  4616                           
  4617                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x9F);
  4618  000D00  0E00               	movlw	0
  4619  000D02  ECAD  F007         	call	_write_data
  4620  000D06  0E9F               	movlw	159
  4621  000D08  ECAD  F007         	call	_write_data
  4622  000D0C  0012               	return		;funcret
  4623  000D0E                     __end_of_Rcmd2red:
  4624                           	opt stack 0
  4625                           tblptru	equ	0xFF8
  4626                           tblptrh	equ	0xFF7
  4627                           tblptrl	equ	0xFF6
  4628                           tablat	equ	0xFF5
  4629                           prodh	equ	0xFF4
  4630                           prodl	equ	0xFF3
  4631                           intcon2	equ	0xFF1
  4632                           postinc0	equ	0xFEE
  4633                           wreg	equ	0xFE8
  4634                           postdec1	equ	0xFE5
  4635                           fsr1l	equ	0xFE1
  4636                           indf2	equ	0xFDF
  4637                           postinc2	equ	0xFDE
  4638                           postdec2	equ	0xFDD
  4639                           fsr2h	equ	0xFDA
  4640                           fsr2l	equ	0xFD9
  4641                           status	equ	0xFD8
  4642                           
  4643 ;; *************** function _Rcmd1 *****************
  4644 ;; Defined at:
  4645 ;;		line 281 in file "ST7735_TFT.c"
  4646 ;; Parameters:    Size  Location     Type
  4647 ;;		None
  4648 ;; Auto vars:     Size  Location     Type
  4649 ;;		None
  4650 ;; Return value:  Size  Location     Type
  4651 ;;		None               void
  4652 ;; Registers used:
  4653 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4654 ;; Tracked objects:
  4655 ;;		On entry : 0/0
  4656 ;;		On exit  : 0/0
  4657 ;;		Unchanged: 0/0
  4658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4663 ;;Total ram usage:        0 bytes
  4664 ;; Hardware stack levels used:    1
  4665 ;; Hardware stack levels required when called:    3
  4666 ;; This function calls:
  4667 ;;		_delay_ms
  4668 ;;		_write_command
  4669 ;;		_write_data
  4670 ;; This function is called by:
  4671 ;;		_TFT_GreenTab_Initialize
  4672 ;;		_TFT_BlackTab_Initialize
  4673 ;; This function uses a non-reentrant model
  4674 ;;
  4675                           
  4676                           	psect	text24
  4677  0002B0                     __ptext24:
  4678                           	opt stack 0
  4679  0002B0                     _Rcmd1:
  4680                           	opt stack 24
  4681                           
  4682                           ;ST7735_TFT.c: 283: write_command(0x01);
  4683                           
  4684                           ;incstack = 0
  4685  0002B0  0E01               	movlw	1
  4686  0002B2  ECB5  F007         	call	_write_command
  4687                           
  4688                           ;ST7735_TFT.c: 284: delay_ms(150);
  4689  0002B6  0E00               	movlw	0
  4690  0002B8  6E16               	movwf	delay_ms@ms+1,c
  4691  0002BA  0E96               	movlw	150
  4692  0002BC  6E15               	movwf	delay_ms@ms,c
  4693  0002BE  EC23  F005         	call	_delay_ms	;wreg free
  4694                           
  4695                           ;ST7735_TFT.c: 285: write_command(0x11);
  4696  0002C2  0E11               	movlw	17
  4697  0002C4  ECB5  F007         	call	_write_command
  4698                           
  4699                           ;ST7735_TFT.c: 286: delay_ms(500);
  4700  0002C8  0E01               	movlw	1
  4701  0002CA  6E16               	movwf	delay_ms@ms+1,c
  4702  0002CC  0EF4               	movlw	244
  4703  0002CE  6E15               	movwf	delay_ms@ms,c
  4704  0002D0  EC23  F005         	call	_delay_ms	;wreg free
  4705                           
  4706                           ;ST7735_TFT.c: 287: write_command(0xB1);
  4707  0002D4  0EB1               	movlw	177
  4708  0002D6  ECB5  F007         	call	_write_command
  4709                           
  4710                           ;ST7735_TFT.c: 288: write_data(0x01);
  4711  0002DA  0E01               	movlw	1
  4712  0002DC  ECAD  F007         	call	_write_data
  4713                           
  4714                           ;ST7735_TFT.c: 289: write_data(0x2C);
  4715  0002E0  0E2C               	movlw	44
  4716  0002E2  ECAD  F007         	call	_write_data
  4717                           
  4718                           ;ST7735_TFT.c: 290: write_data(0x2D);
  4719  0002E6  0E2D               	movlw	45
  4720  0002E8  ECAD  F007         	call	_write_data
  4721                           
  4722                           ;ST7735_TFT.c: 291: write_command(0xB2);
  4723  0002EC  0EB2               	movlw	178
  4724  0002EE  ECB5  F007         	call	_write_command
  4725                           
  4726                           ;ST7735_TFT.c: 292: write_data(0x01);
  4727  0002F2  0E01               	movlw	1
  4728  0002F4  ECAD  F007         	call	_write_data
  4729                           
  4730                           ;ST7735_TFT.c: 293: write_data(0x2C);
  4731  0002F8  0E2C               	movlw	44
  4732  0002FA  ECAD  F007         	call	_write_data
  4733                           
  4734                           ;ST7735_TFT.c: 294: write_data(0x2D);
  4735  0002FE  0E2D               	movlw	45
  4736  000300  ECAD  F007         	call	_write_data
  4737                           
  4738                           ;ST7735_TFT.c: 295: write_command(0xB3);
  4739  000304  0EB3               	movlw	179
  4740  000306  ECB5  F007         	call	_write_command
  4741                           
  4742                           ;ST7735_TFT.c: 296: write_data(0x01);
  4743  00030A  0E01               	movlw	1
  4744  00030C  ECAD  F007         	call	_write_data
  4745                           
  4746                           ;ST7735_TFT.c: 297: write_data(0x2C);
  4747  000310  0E2C               	movlw	44
  4748  000312  ECAD  F007         	call	_write_data
  4749                           
  4750                           ;ST7735_TFT.c: 298: write_data(0x2D);
  4751  000316  0E2D               	movlw	45
  4752  000318  ECAD  F007         	call	_write_data
  4753                           
  4754                           ;ST7735_TFT.c: 299: write_data(0x01);
  4755  00031C  0E01               	movlw	1
  4756  00031E  ECAD  F007         	call	_write_data
  4757                           
  4758                           ;ST7735_TFT.c: 300: write_data(0x2C);
  4759  000322  0E2C               	movlw	44
  4760  000324  ECAD  F007         	call	_write_data
  4761                           
  4762                           ;ST7735_TFT.c: 301: write_data(0x2D);
  4763  000328  0E2D               	movlw	45
  4764  00032A  ECAD  F007         	call	_write_data
  4765                           
  4766                           ;ST7735_TFT.c: 302: write_command(0xB4);
  4767  00032E  0EB4               	movlw	180
  4768  000330  ECB5  F007         	call	_write_command
  4769                           
  4770                           ;ST7735_TFT.c: 303: write_data(0x07);
  4771  000334  0E07               	movlw	7
  4772  000336  ECAD  F007         	call	_write_data
  4773                           
  4774                           ;ST7735_TFT.c: 304: write_command(0xC0);
  4775  00033A  0EC0               	movlw	192
  4776  00033C  ECB5  F007         	call	_write_command
  4777                           
  4778                           ;ST7735_TFT.c: 305: write_data(0xA2);
  4779  000340  0EA2               	movlw	162
  4780  000342  ECAD  F007         	call	_write_data
  4781                           
  4782                           ;ST7735_TFT.c: 306: write_data(0x02);
  4783  000346  0E02               	movlw	2
  4784  000348  ECAD  F007         	call	_write_data
  4785                           
  4786                           ;ST7735_TFT.c: 307: write_data(0x84);
  4787  00034C  0E84               	movlw	132
  4788  00034E  ECAD  F007         	call	_write_data
  4789                           
  4790                           ;ST7735_TFT.c: 308: write_command(0xC1);
  4791  000352  0EC1               	movlw	193
  4792  000354  ECB5  F007         	call	_write_command
  4793                           
  4794                           ;ST7735_TFT.c: 309: write_data(0xC5);
  4795  000358  0EC5               	movlw	197
  4796  00035A  ECAD  F007         	call	_write_data
  4797                           
  4798                           ;ST7735_TFT.c: 310: write_command(0xC2);
  4799  00035E  0EC2               	movlw	194
  4800  000360  ECB5  F007         	call	_write_command
  4801                           
  4802                           ;ST7735_TFT.c: 311: write_data(0x0A);
  4803  000364  0E0A               	movlw	10
  4804  000366  ECAD  F007         	call	_write_data
  4805                           
  4806                           ;ST7735_TFT.c: 312: write_data(0x00);
  4807  00036A  0E00               	movlw	0
  4808  00036C  ECAD  F007         	call	_write_data
  4809                           
  4810                           ;ST7735_TFT.c: 313: write_command(0xC3);
  4811  000370  0EC3               	movlw	195
  4812  000372  ECB5  F007         	call	_write_command
  4813                           
  4814                           ;ST7735_TFT.c: 314: write_data(0x8A);
  4815  000376  0E8A               	movlw	138
  4816  000378  ECAD  F007         	call	_write_data
  4817                           
  4818                           ;ST7735_TFT.c: 315: write_data(0x2A);
  4819  00037C  0E2A               	movlw	42
  4820  00037E  ECAD  F007         	call	_write_data
  4821                           
  4822                           ;ST7735_TFT.c: 316: write_command(0xC4);
  4823  000382  0EC4               	movlw	196
  4824  000384  ECB5  F007         	call	_write_command
  4825                           
  4826                           ;ST7735_TFT.c: 317: write_data(0x8A);
  4827  000388  0E8A               	movlw	138
  4828  00038A  ECAD  F007         	call	_write_data
  4829                           
  4830                           ;ST7735_TFT.c: 318: write_data(0xEE);
  4831  00038E  0EEE               	movlw	238
  4832  000390  ECAD  F007         	call	_write_data
  4833                           
  4834                           ;ST7735_TFT.c: 319: write_command(0xC5);
  4835  000394  0EC5               	movlw	197
  4836  000396  ECB5  F007         	call	_write_command
  4837                           
  4838                           ;ST7735_TFT.c: 320: write_data(0x0E);
  4839  00039A  0E0E               	movlw	14
  4840  00039C  ECAD  F007         	call	_write_data
  4841                           
  4842                           ;ST7735_TFT.c: 321: write_command(0x20);
  4843  0003A0  0E20               	movlw	32
  4844  0003A2  ECB5  F007         	call	_write_command
  4845                           
  4846                           ;ST7735_TFT.c: 322: write_command(0x36);
  4847  0003A6  0E36               	movlw	54
  4848  0003A8  ECB5  F007         	call	_write_command
  4849                           
  4850                           ;ST7735_TFT.c: 323: write_data(0xC8);
  4851  0003AC  0EC8               	movlw	200
  4852  0003AE  ECAD  F007         	call	_write_data
  4853                           
  4854                           ;ST7735_TFT.c: 324: write_command(0x3A);
  4855  0003B2  0E3A               	movlw	58
  4856  0003B4  ECB5  F007         	call	_write_command
  4857                           
  4858                           ;ST7735_TFT.c: 325: write_data(0x05);
  4859  0003B8  0E05               	movlw	5
  4860  0003BA  ECAD  F007         	call	_write_data
  4861  0003BE  0012               	return		;funcret
  4862  0003C0                     __end_of_Rcmd1:
  4863                           	opt stack 0
  4864                           tblptru	equ	0xFF8
  4865                           tblptrh	equ	0xFF7
  4866                           tblptrl	equ	0xFF6
  4867                           tablat	equ	0xFF5
  4868                           prodh	equ	0xFF4
  4869                           prodl	equ	0xFF3
  4870                           intcon2	equ	0xFF1
  4871                           postinc0	equ	0xFEE
  4872                           wreg	equ	0xFE8
  4873                           postdec1	equ	0xFE5
  4874                           fsr1l	equ	0xFE1
  4875                           indf2	equ	0xFDF
  4876                           postinc2	equ	0xFDE
  4877                           postdec2	equ	0xFDD
  4878                           fsr2h	equ	0xFDA
  4879                           fsr2l	equ	0xFD9
  4880                           status	equ	0xFD8
  4881                           
  4882 ;; *************** function _write_data *****************
  4883 ;; Defined at:
  4884 ;;		line 209 in file "ST7735_TFT.c"
  4885 ;; Parameters:    Size  Location     Type
  4886 ;;  data_           1    wreg     unsigned char 
  4887 ;; Auto vars:     Size  Location     Type
  4888 ;;  data_           1   16[COMRAM] unsigned char 
  4889 ;; Return value:  Size  Location     Type
  4890 ;;		None               void
  4891 ;; Registers used:
  4892 ;;		wreg, status,2, cstack
  4893 ;; Tracked objects:
  4894 ;;		On entry : 0/0
  4895 ;;		On exit  : 0/0
  4896 ;;		Unchanged: 0/0
  4897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4899 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4901 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4902 ;;Total ram usage:        1 bytes
  4903 ;; Hardware stack levels used:    1
  4904 ;; Hardware stack levels required when called:    2
  4905 ;; This function calls:
  4906 ;;		_spiwrite
  4907 ;; This function is called by:
  4908 ;;		_Rcmd1
  4909 ;;		_Rcmd2red
  4910 ;;		_Rcmd3
  4911 ;;		_setAddrWindow
  4912 ;;		_drawPixel
  4913 ;;		_TFT_GreenTab_Initialize
  4914 ;;		_Bcmd
  4915 ;;		_setScrollDefinition
  4916 ;;		_Rcmd2green
  4917 ;;		_VerticalScroll
  4918 ;; This function uses a non-reentrant model
  4919 ;;
  4920                           
  4921                           	psect	text25
  4922  000F5A                     __ptext25:
  4923                           	opt stack 0
  4924  000F5A                     _write_data:
  4925                           	opt stack 23
  4926                           
  4927                           ;incstack = 0
  4928                           ;write_data@data_ stored from wreg
  4929  000F5A  6E11               	movwf	write_data@data_,c
  4930                           
  4931                           ;ST7735_TFT.c: 211: PORTCbits.RC1 = 0;
  4932  000F5C  9282               	bcf	3970,1,c	;volatile
  4933                           
  4934                           ;ST7735_TFT.c: 212: PORTCbits.RC0 = 1;
  4935  000F5E  8082               	bsf	3970,0,c	;volatile
  4936                           
  4937                           ;ST7735_TFT.c: 213: spiwrite(data_);
  4938  000F60  5011               	movf	write_data@data_,w,c
  4939  000F62  EC7F  F007         	call	_spiwrite
  4940                           
  4941                           ;ST7735_TFT.c: 214: PORTCbits.RC1 = 1;
  4942  000F66  8282               	bsf	3970,1,c	;volatile
  4943  000F68  0012               	return		;funcret
  4944  000F6A                     __end_of_write_data:
  4945                           	opt stack 0
  4946                           tblptru	equ	0xFF8
  4947                           tblptrh	equ	0xFF7
  4948                           tblptrl	equ	0xFF6
  4949                           tablat	equ	0xFF5
  4950                           prodh	equ	0xFF4
  4951                           prodl	equ	0xFF3
  4952                           intcon2	equ	0xFF1
  4953                           postinc0	equ	0xFEE
  4954                           wreg	equ	0xFE8
  4955                           postdec1	equ	0xFE5
  4956                           fsr1l	equ	0xFE1
  4957                           indf2	equ	0xFDF
  4958                           postinc2	equ	0xFDE
  4959                           postdec2	equ	0xFDD
  4960                           fsr2h	equ	0xFDA
  4961                           fsr2l	equ	0xFD9
  4962                           status	equ	0xFD8
  4963                           
  4964 ;; *************** function _write_command *****************
  4965 ;; Defined at:
  4966 ;;		line 198 in file "ST7735_TFT.c"
  4967 ;; Parameters:    Size  Location     Type
  4968 ;;  cmd_            1    wreg     unsigned char 
  4969 ;; Auto vars:     Size  Location     Type
  4970 ;;  cmd_            1   16[COMRAM] unsigned char 
  4971 ;; Return value:  Size  Location     Type
  4972 ;;		None               void
  4973 ;; Registers used:
  4974 ;;		wreg, status,2, cstack
  4975 ;; Tracked objects:
  4976 ;;		On entry : 0/0
  4977 ;;		On exit  : 0/0
  4978 ;;		Unchanged: 0/0
  4979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4981 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4983 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4984 ;;Total ram usage:        1 bytes
  4985 ;; Hardware stack levels used:    1
  4986 ;; Hardware stack levels required when called:    2
  4987 ;; This function calls:
  4988 ;;		_spiwrite
  4989 ;; This function is called by:
  4990 ;;		_Rcmd1
  4991 ;;		_Rcmd2red
  4992 ;;		_Rcmd3
  4993 ;;		_setAddrWindow
  4994 ;;		_TFT_GreenTab_Initialize
  4995 ;;		_Bcmd
  4996 ;;		_setScrollDefinition
  4997 ;;		_Rcmd2green
  4998 ;;		_VerticalScroll
  4999 ;; This function uses a non-reentrant model
  5000 ;;
  5001                           
  5002                           	psect	text26
  5003  000F6A                     __ptext26:
  5004                           	opt stack 0
  5005  000F6A                     _write_command:
  5006                           	opt stack 23
  5007                           
  5008                           ;incstack = 0
  5009                           ;write_command@cmd_ stored from wreg
  5010  000F6A  6E11               	movwf	write_command@cmd_,c
  5011                           
  5012                           ;ST7735_TFT.c: 200: PORTCbits.RC1 = 0;
  5013  000F6C  9282               	bcf	3970,1,c	;volatile
  5014                           
  5015                           ;ST7735_TFT.c: 202: PORTCbits.RC0 = 0;
  5016  000F6E  9082               	bcf	3970,0,c	;volatile
  5017                           
  5018                           ;ST7735_TFT.c: 203: spiwrite(cmd_);
  5019  000F70  5011               	movf	write_command@cmd_,w,c
  5020  000F72  EC7F  F007         	call	_spiwrite
  5021                           
  5022                           ;ST7735_TFT.c: 205: PORTCbits.RC1 = 1;
  5023  000F76  8282               	bsf	3970,1,c	;volatile
  5024  000F78  0012               	return		;funcret
  5025  000F7A                     __end_of_write_command:
  5026                           	opt stack 0
  5027                           tblptru	equ	0xFF8
  5028                           tblptrh	equ	0xFF7
  5029                           tblptrl	equ	0xFF6
  5030                           tablat	equ	0xFF5
  5031                           prodh	equ	0xFF4
  5032                           prodl	equ	0xFF3
  5033                           intcon2	equ	0xFF1
  5034                           postinc0	equ	0xFEE
  5035                           wreg	equ	0xFE8
  5036                           postdec1	equ	0xFE5
  5037                           fsr1l	equ	0xFE1
  5038                           indf2	equ	0xFDF
  5039                           postinc2	equ	0xFDE
  5040                           postdec2	equ	0xFDD
  5041                           fsr2h	equ	0xFDA
  5042                           fsr2l	equ	0xFD9
  5043                           status	equ	0xFD8
  5044                           
  5045 ;; *************** function _spiwrite *****************
  5046 ;; Defined at:
  5047 ;;		line 189 in file "ST7735_TFT.c"
  5048 ;; Parameters:    Size  Location     Type
  5049 ;;  spidata         1    wreg     unsigned char 
  5050 ;; Auto vars:     Size  Location     Type
  5051 ;;  spidata         1   15[COMRAM] unsigned char 
  5052 ;;  x               1   14[COMRAM] unsigned char 
  5053 ;; Return value:  Size  Location     Type
  5054 ;;		None               void
  5055 ;; Registers used:
  5056 ;;		wreg
  5057 ;; Tracked objects:
  5058 ;;		On entry : 0/0
  5059 ;;		On exit  : 0/0
  5060 ;;		Unchanged: 0/0
  5061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5063 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5065 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5066 ;;Total ram usage:        2 bytes
  5067 ;; Hardware stack levels used:    1
  5068 ;; Hardware stack levels required when called:    1
  5069 ;; This function calls:
  5070 ;;		Nothing
  5071 ;; This function is called by:
  5072 ;;		_write_command
  5073 ;;		_write_data
  5074 ;;		_drawFastVLine
  5075 ;;		_fillRectangle
  5076 ;;		_drawFastHLine
  5077 ;; This function uses a non-reentrant model
  5078 ;;
  5079                           
  5080                           	psect	text27
  5081  000EFE                     __ptext27:
  5082                           	opt stack 0
  5083  000EFE                     _spiwrite:
  5084                           	opt stack 25
  5085                           
  5086                           ;incstack = 0
  5087                           ;spiwrite@spidata stored from wreg
  5088  000EFE  6E10               	movwf	spiwrite@spidata,c
  5089                           
  5090                           ;ST7735_TFT.c: 191: char x;
  5091                           ;ST7735_TFT.c: 192: PIR1bits.SSPIF = 0;
  5092  000F00  969E               	bcf	3998,3,c	;volatile
  5093                           
  5094                           ;ST7735_TFT.c: 193: x = SSPBUF;
  5095  000F02  CFC9 F00F          	movff	4041,spiwrite@x	;volatile
  5096                           
  5097                           ;ST7735_TFT.c: 194: SSPBUF = spidata;
  5098  000F06  C010  FFC9         	movff	spiwrite@spidata,4041	;volatile
  5099                           
  5100                           ;ST7735_TFT.c: 195: while (!SSPSTATbits.BF);
  5101  000F0A  D000               	goto	l45
  5102  000F0C                     l45:
  5103  000F0C  A0C7               	btfss	4039,0,c	;volatile
  5104  000F0E  D7FE               	goto	l45
  5105  000F10  0012               	return		;funcret
  5106  000F12                     __end_of_spiwrite:
  5107                           	opt stack 0
  5108                           tblptru	equ	0xFF8
  5109                           tblptrh	equ	0xFF7
  5110                           tblptrl	equ	0xFF6
  5111                           tablat	equ	0xFF5
  5112                           prodh	equ	0xFF4
  5113                           prodl	equ	0xFF3
  5114                           intcon2	equ	0xFF1
  5115                           postinc0	equ	0xFEE
  5116                           wreg	equ	0xFE8
  5117                           postdec1	equ	0xFE5
  5118                           fsr1l	equ	0xFE1
  5119                           indf2	equ	0xFDF
  5120                           postinc2	equ	0xFDE
  5121                           postdec2	equ	0xFDD
  5122                           fsr2h	equ	0xFDA
  5123                           fsr2l	equ	0xFD9
  5124                           status	equ	0xFD8
  5125                           
  5126 ;; *************** function _LCD_Reset *****************
  5127 ;; Defined at:
  5128 ;;		line 217 in file "ST7735_TFT.c"
  5129 ;; Parameters:    Size  Location     Type
  5130 ;;		None
  5131 ;; Auto vars:     Size  Location     Type
  5132 ;;		None
  5133 ;; Return value:  Size  Location     Type
  5134 ;;		None               void
  5135 ;; Registers used:
  5136 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5137 ;; Tracked objects:
  5138 ;;		On entry : 0/0
  5139 ;;		On exit  : 0/0
  5140 ;;		Unchanged: 0/0
  5141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5145 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5146 ;;Total ram usage:        0 bytes
  5147 ;; Hardware stack levels used:    1
  5148 ;; Hardware stack levels required when called:    3
  5149 ;; This function calls:
  5150 ;;		_delay_ms
  5151 ;; This function is called by:
  5152 ;;		_Initialize_Screen
  5153 ;; This function uses a non-reentrant model
  5154 ;;
  5155                           
  5156                           	psect	text28
  5157  000F12                     __ptext28:
  5158                           	opt stack 0
  5159  000F12                     _LCD_Reset:
  5160                           	opt stack 25
  5161                           
  5162                           ;ST7735_TFT.c: 219: PORTCbits.RC4 = 0;
  5163                           
  5164                           ;incstack = 0
  5165  000F12  9882               	bcf	3970,4,c	;volatile
  5166                           
  5167                           ;ST7735_TFT.c: 220: delay_ms(100);
  5168  000F14  0E00               	movlw	0
  5169  000F16  6E16               	movwf	delay_ms@ms+1,c
  5170  000F18  0E64               	movlw	100
  5171  000F1A  6E15               	movwf	delay_ms@ms,c
  5172  000F1C  EC23  F005         	call	_delay_ms	;wreg free
  5173                           
  5174                           ;ST7735_TFT.c: 221: PORTCbits.RC4 = 1;
  5175  000F20  8882               	bsf	3970,4,c	;volatile
  5176  000F22  0012               	return		;funcret
  5177  000F24                     __end_of_LCD_Reset:
  5178                           	opt stack 0
  5179                           tblptru	equ	0xFF8
  5180                           tblptrh	equ	0xFF7
  5181                           tblptrl	equ	0xFF6
  5182                           tablat	equ	0xFF5
  5183                           prodh	equ	0xFF4
  5184                           prodl	equ	0xFF3
  5185                           intcon2	equ	0xFF1
  5186                           postinc0	equ	0xFEE
  5187                           wreg	equ	0xFE8
  5188                           postdec1	equ	0xFE5
  5189                           fsr1l	equ	0xFE1
  5190                           indf2	equ	0xFDF
  5191                           postinc2	equ	0xFDE
  5192                           postdec2	equ	0xFDD
  5193                           fsr2h	equ	0xFDA
  5194                           fsr2l	equ	0xFD9
  5195                           status	equ	0xFD8
  5196                           
  5197 ;; *************** function _delay_ms *****************
  5198 ;; Defined at:
  5199 ;;		line 64 in file "ST7735_TFT.c"
  5200 ;; Parameters:    Size  Location     Type
  5201 ;;  ms              2   20[COMRAM] int 
  5202 ;; Auto vars:     Size  Location     Type
  5203 ;;  count           2   24[COMRAM] int 
  5204 ;; Return value:  Size  Location     Type
  5205 ;;		None               void
  5206 ;; Registers used:
  5207 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5208 ;; Tracked objects:
  5209 ;;		On entry : 0/0
  5210 ;;		On exit  : 0/0
  5211 ;;		Unchanged: 0/0
  5212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5213 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5214 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5215 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5216 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5217 ;;Total ram usage:        6 bytes
  5218 ;; Hardware stack levels used:    1
  5219 ;; Hardware stack levels required when called:    2
  5220 ;; This function calls:
  5221 ;;		___wmul
  5222 ;; This function is called by:
  5223 ;;		_LCD_Reset
  5224 ;;		_Rcmd1
  5225 ;;		_Rcmd3
  5226 ;;		_Bcmd
  5227 ;; This function uses a non-reentrant model
  5228 ;;
  5229                           
  5230                           	psect	text29
  5231  000A46                     __ptext29:
  5232                           	opt stack 0
  5233  000A46                     _delay_ms:
  5234                           	opt stack 24
  5235                           
  5236                           ;ST7735_TFT.c: 70: int count;
  5237                           ;ST7735_TFT.c: 71: count = 8000000/4000/8 * ms;
  5238                           
  5239                           ;incstack = 0
  5240  000A46  C015  F00F         	movff	delay_ms@ms,___wmul@multiplier
  5241  000A4A  C016  F010         	movff	delay_ms@ms+1,___wmul@multiplier+1
  5242  000A4E  0E00               	movlw	0
  5243  000A50  6E12               	movwf	___wmul@multiplicand+1,c
  5244  000A52  0EFA               	movlw	250
  5245  000A54  6E11               	movwf	___wmul@multiplicand,c
  5246  000A56  EC0A  F007         	call	___wmul	;wreg free
  5247  000A5A  C00F  F019         	movff	?___wmul,delay_ms@count
  5248  000A5E  C010  F01A         	movff	?___wmul+1,delay_ms@count+1
  5249                           
  5250                           ;ST7735_TFT.c: 72: count = (0xffff - count);
  5251  000A62  C019  F017         	movff	delay_ms@count,??_delay_ms
  5252  000A66  C01A  F018         	movff	delay_ms@count+1,??_delay_ms+1
  5253  000A6A  1E17               	comf	??_delay_ms,f,c
  5254  000A6C  1E18               	comf	??_delay_ms+1,f,c
  5255  000A6E  4A17               	infsnz	??_delay_ms,f,c
  5256  000A70  2A18               	incf	??_delay_ms+1,f,c
  5257  000A72  0EFF               	movlw	255
  5258  000A74  2417               	addwf	??_delay_ms,w,c
  5259  000A76  6E19               	movwf	delay_ms@count,c
  5260  000A78  0EFF               	movlw	255
  5261  000A7A  2018               	addwfc	??_delay_ms+1,w,c
  5262  000A7C  6E1A               	movwf	delay_ms@count+1,c
  5263                           
  5264                           ;ST7735_TFT.c: 74: T3CON = 0xb8;
  5265  000A7E  0EB8               	movlw	184
  5266  000A80  6EB1               	movwf	4017,c	;volatile
  5267                           
  5268                           ;ST7735_TFT.c: 76: TMR3L = count & 0x00ff;
  5269  000A82  C019  FFB2         	movff	delay_ms@count,4018	;volatile
  5270                           
  5271                           ;ST7735_TFT.c: 77: TMR3H = count >> 8;
  5272  000A86  501A               	movf	delay_ms@count+1,w,c
  5273  000A88  6EB3               	movwf	4019,c	;volatile
  5274                           
  5275                           ;ST7735_TFT.c: 79: PIR2bits.TMR3IF = 0;
  5276  000A8A  92A1               	bcf	4001,1,c	;volatile
  5277                           
  5278                           ;ST7735_TFT.c: 80: T3CONbits.TMR3ON = 1;
  5279  000A8C  80B1               	bsf	4017,0,c	;volatile
  5280                           
  5281                           ;ST7735_TFT.c: 82: while (PIR2bits.TMR3IF == 0);
  5282  000A8E  D000               	goto	l35
  5283  000A90                     l35:
  5284  000A90  A2A1               	btfss	4001,1,c	;volatile
  5285  000A92  D7FE               	goto	l35
  5286                           
  5287                           ;ST7735_TFT.c: 83: T3CONbits.TMR3ON = 0;
  5288  000A94  90B1               	bcf	4017,0,c	;volatile
  5289  000A96  0012               	return		;funcret
  5290  000A98                     __end_of_delay_ms:
  5291                           	opt stack 0
  5292                           tblptru	equ	0xFF8
  5293                           tblptrh	equ	0xFF7
  5294                           tblptrl	equ	0xFF6
  5295                           tablat	equ	0xFF5
  5296                           prodh	equ	0xFF4
  5297                           prodl	equ	0xFF3
  5298                           intcon2	equ	0xFF1
  5299                           postinc0	equ	0xFEE
  5300                           wreg	equ	0xFE8
  5301                           postdec1	equ	0xFE5
  5302                           fsr1l	equ	0xFE1
  5303                           indf2	equ	0xFDF
  5304                           postinc2	equ	0xFDE
  5305                           postdec2	equ	0xFDD
  5306                           fsr2h	equ	0xFDA
  5307                           fsr2l	equ	0xFD9
  5308                           status	equ	0xFD8
  5309                           
  5310 ;; *************** function ___wmul *****************
  5311 ;; Defined at:
  5312 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  5313 ;; Parameters:    Size  Location     Type
  5314 ;;  multiplier      2   14[COMRAM] unsigned int 
  5315 ;;  multiplicand    2   16[COMRAM] unsigned int 
  5316 ;; Auto vars:     Size  Location     Type
  5317 ;;  product         2   18[COMRAM] unsigned int 
  5318 ;; Return value:  Size  Location     Type
  5319 ;;                  2   14[COMRAM] unsigned int 
  5320 ;; Registers used:
  5321 ;;		wreg, status,2, status,0, prodl, prodh
  5322 ;; Tracked objects:
  5323 ;;		On entry : 0/0
  5324 ;;		On exit  : 0/0
  5325 ;;		Unchanged: 0/0
  5326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5327 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5328 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5330 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5331 ;;Total ram usage:        6 bytes
  5332 ;; Hardware stack levels used:    1
  5333 ;; Hardware stack levels required when called:    1
  5334 ;; This function calls:
  5335 ;;		Nothing
  5336 ;; This function is called by:
  5337 ;;		_delay_ms
  5338 ;;		_drawChar
  5339 ;; This function uses a non-reentrant model
  5340 ;;
  5341                           
  5342                           	psect	text30
  5343  000E14                     __ptext30:
  5344                           	opt stack 0
  5345  000E14                     ___wmul:
  5346                           	opt stack 25
  5347                           
  5348                           ;incstack = 0
  5349  000E14  500F               	movf	___wmul@multiplier,w,c
  5350  000E16  0211               	mulwf	___wmul@multiplicand,c
  5351  000E18  CFF3 F013          	movff	prodl,___wmul@product
  5352  000E1C  CFF4 F014          	movff	prodh,___wmul@product+1
  5353  000E20  500F               	movf	___wmul@multiplier,w,c
  5354  000E22  0212               	mulwf	___wmul@multiplicand+1,c
  5355  000E24  50F3               	movf	prodl,w,c
  5356  000E26  2614               	addwf	___wmul@product+1,f,c
  5357  000E28  5010               	movf	___wmul@multiplier+1,w,c
  5358  000E2A  0211               	mulwf	___wmul@multiplicand,c
  5359  000E2C  50F3               	movf	prodl,w,c
  5360  000E2E  2614               	addwf	___wmul@product+1,f,c
  5361  000E30  C013  F00F         	movff	___wmul@product,?___wmul
  5362  000E34  C014  F010         	movff	___wmul@product+1,?___wmul+1
  5363  000E38  D000               	goto	l538
  5364  000E3A                     l538:
  5365  000E3A  0012               	return		;funcret
  5366  000E3C                     __end_of___wmul:
  5367                           	opt stack 0
  5368                           tblptru	equ	0xFF8
  5369                           tblptrh	equ	0xFF7
  5370                           tblptrl	equ	0xFF6
  5371                           tablat	equ	0xFF5
  5372                           prodh	equ	0xFF4
  5373                           prodl	equ	0xFF3
  5374                           intcon2	equ	0xFF1
  5375                           postinc0	equ	0xFEE
  5376                           wreg	equ	0xFE8
  5377                           postdec1	equ	0xFE5
  5378                           fsr1l	equ	0xFE1
  5379                           indf2	equ	0xFDF
  5380                           postinc2	equ	0xFDE
  5381                           postdec2	equ	0xFDD
  5382                           fsr2h	equ	0xFDA
  5383                           fsr2l	equ	0xFD9
  5384                           status	equ	0xFD8
  5385                           
  5386 ;; *************** function _I2C_Init *****************
  5387 ;; Defined at:
  5388 ;;		line 10 in file "I2C_Soft.c"
  5389 ;; Parameters:    Size  Location     Type
  5390 ;;  c               4   14[COMRAM] unsigned long 
  5391 ;; Auto vars:     Size  Location     Type
  5392 ;;		None
  5393 ;; Return value:  Size  Location     Type
  5394 ;;		None               void
  5395 ;; Registers used:
  5396 ;;		wreg, cstack
  5397 ;; Tracked objects:
  5398 ;;		On entry : 0/0
  5399 ;;		On exit  : 0/0
  5400 ;;		Unchanged: 0/0
  5401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5402 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5405 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5406 ;;Total ram usage:        4 bytes
  5407 ;; Hardware stack levels used:    1
  5408 ;; Hardware stack levels required when called:    2
  5409 ;; This function calls:
  5410 ;;		_i2cHighScl
  5411 ;;		_i2cHighSda
  5412 ;; This function is called by:
  5413 ;;		_Do_Init
  5414 ;; This function uses a non-reentrant model
  5415 ;;
  5416                           
  5417                           	psect	text31
  5418  000F94                     __ptext31:
  5419                           	opt stack 0
  5420  000F94                     _I2C_Init:
  5421                           	opt stack 27
  5422                           
  5423                           ;I2C_Soft.c: 12: i2cHighScl();
  5424                           
  5425                           ;incstack = 0
  5426  000F94  ECC4  F007         	call	_i2cHighScl	;wreg free
  5427                           
  5428                           ;I2C_Soft.c: 13: i2cHighSda();
  5429  000F98  ECDD  F007         	call	_i2cHighSda	;wreg free
  5430  000F9C  0012               	return		;funcret
  5431  000F9E                     __end_of_I2C_Init:
  5432                           	opt stack 0
  5433                           tblptru	equ	0xFF8
  5434                           tblptrh	equ	0xFF7
  5435                           tblptrl	equ	0xFF6
  5436                           tablat	equ	0xFF5
  5437                           prodh	equ	0xFF4
  5438                           prodl	equ	0xFF3
  5439                           intcon2	equ	0xFF1
  5440                           postinc0	equ	0xFEE
  5441                           wreg	equ	0xFE8
  5442                           postdec1	equ	0xFE5
  5443                           fsr1l	equ	0xFE1
  5444                           indf2	equ	0xFDF
  5445                           postinc2	equ	0xFDE
  5446                           postdec2	equ	0xFDD
  5447                           fsr2h	equ	0xFDA
  5448                           fsr2l	equ	0xFD9
  5449                           status	equ	0xFD8
  5450                           
  5451 ;; *************** function _DS1621_Init *****************
  5452 ;; Defined at:
  5453 ;;		line 21 in file "I2C_Support.c"
  5454 ;; Parameters:    Size  Location     Type
  5455 ;;		None
  5456 ;; Auto vars:     Size  Location     Type
  5457 ;;  Device          1   19[COMRAM] unsigned char 
  5458 ;; Return value:  Size  Location     Type
  5459 ;;		None               void
  5460 ;; Registers used:
  5461 ;;		wreg, status,2, status,0, cstack
  5462 ;; Tracked objects:
  5463 ;;		On entry : 0/0
  5464 ;;		On exit  : 0/0
  5465 ;;		Unchanged: 0/0
  5466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5468 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5470 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5471 ;;Total ram usage:        1 bytes
  5472 ;; Hardware stack levels used:    1
  5473 ;; Hardware stack levels required when called:    4
  5474 ;; This function calls:
  5475 ;;		_I2C_Write_Cmd_Only
  5476 ;;		_I2C_Write_Cmd_Write_Data
  5477 ;; This function is called by:
  5478 ;;		_Do_Init
  5479 ;; This function uses a non-reentrant model
  5480 ;;
  5481                           
  5482                           	psect	text32
  5483  000E80                     __ptext32:
  5484                           	opt stack 0
  5485  000E80                     _DS1621_Init:
  5486                           	opt stack 25
  5487                           
  5488                           ;I2C_Support.c: 23: char Device = 0x48;
  5489                           
  5490                           ;incstack = 0
  5491  000E80  0E48               	movlw	72
  5492  000E82  6E14               	movwf	DS1621_Init@Device,c
  5493                           
  5494                           ;I2C_Support.c: 24: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
  5495  000E84  0EAC               	movlw	172
  5496  000E86  6E11               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  5497  000E88  0E02               	movlw	2
  5498  000E8A  6E12               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  5499  000E8C  5014               	movf	DS1621_Init@Device,w,c
  5500  000E8E  EC30  F007         	call	_I2C_Write_Cmd_Write_Data
  5501                           
  5502                           ;I2C_Support.c: 25: I2C_Write_Cmd_Only(Device, 0xEE);
  5503  000E92  0EEE               	movlw	238
  5504  000E94  6E11               	movwf	I2C_Write_Cmd_Only@Cmd,c
  5505  000E96  5014               	movf	DS1621_Init@Device,w,c
  5506  000E98  EC5D  F007         	call	_I2C_Write_Cmd_Only
  5507  000E9C  0012               	return		;funcret
  5508  000E9E                     __end_of_DS1621_Init:
  5509                           	opt stack 0
  5510                           tblptru	equ	0xFF8
  5511                           tblptrh	equ	0xFF7
  5512                           tblptrl	equ	0xFF6
  5513                           tablat	equ	0xFF5
  5514                           prodh	equ	0xFF4
  5515                           prodl	equ	0xFF3
  5516                           intcon2	equ	0xFF1
  5517                           postinc0	equ	0xFEE
  5518                           wreg	equ	0xFE8
  5519                           postdec1	equ	0xFE5
  5520                           fsr1l	equ	0xFE1
  5521                           indf2	equ	0xFDF
  5522                           postinc2	equ	0xFDE
  5523                           postdec2	equ	0xFDD
  5524                           fsr2h	equ	0xFDA
  5525                           fsr2l	equ	0xFD9
  5526                           status	equ	0xFD8
  5527                           
  5528 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  5529 ;; Defined at:
  5530 ;;		line 148 in file "I2C_Soft.c"
  5531 ;; Parameters:    Size  Location     Type
  5532 ;;  Device          1    wreg     unsigned char 
  5533 ;;  Cmd             1   16[COMRAM] unsigned char 
  5534 ;;  Data_Out        1   17[COMRAM] unsigned char 
  5535 ;; Auto vars:     Size  Location     Type
  5536 ;;  Device          1   18[COMRAM] unsigned char 
  5537 ;; Return value:  Size  Location     Type
  5538 ;;		None               void
  5539 ;; Registers used:
  5540 ;;		wreg, status,2, status,0, cstack
  5541 ;; Tracked objects:
  5542 ;;		On entry : 0/0
  5543 ;;		On exit  : 0/0
  5544 ;;		Unchanged: 0/0
  5545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5546 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5547 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5549 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5550 ;;Total ram usage:        3 bytes
  5551 ;; Hardware stack levels used:    1
  5552 ;; Hardware stack levels required when called:    3
  5553 ;; This function calls:
  5554 ;;		_I2C_Start
  5555 ;;		_I2C_Stop
  5556 ;;		_I2C_Write
  5557 ;; This function is called by:
  5558 ;;		_DS1621_Init
  5559 ;; This function uses a non-reentrant model
  5560 ;;
  5561                           
  5562                           	psect	text33
  5563  000E60                     __ptext33:
  5564                           	opt stack 0
  5565  000E60                     _I2C_Write_Cmd_Write_Data:
  5566                           	opt stack 25
  5567                           
  5568                           ;incstack = 0
  5569                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  5570  000E60  6E13               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  5571                           
  5572                           ;I2C_Soft.c: 150: I2C_Start();
  5573  000E62  EC9B  F007         	call	_I2C_Start	;wreg free
  5574                           
  5575                           ;I2C_Soft.c: 151: I2C_Write((Device << 1) | 0);
  5576  000E66  5013               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  5577  000E68  2413               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  5578  000E6A  EC87  F006         	call	_I2C_Write
  5579                           
  5580                           ;I2C_Soft.c: 152: I2C_Write(Cmd);
  5581  000E6E  5011               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  5582  000E70  EC87  F006         	call	_I2C_Write
  5583                           
  5584                           ;I2C_Soft.c: 153: I2C_Write(Data_Out);
  5585  000E74  5012               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  5586  000E76  EC87  F006         	call	_I2C_Write
  5587                           
  5588                           ;I2C_Soft.c: 154: I2C_Stop();
  5589  000E7A  EC92  F007         	call	_I2C_Stop	;wreg free
  5590  000E7E  0012               	return		;funcret
  5591  000E80                     __end_of_I2C_Write_Cmd_Write_Data:
  5592                           	opt stack 0
  5593                           tblptru	equ	0xFF8
  5594                           tblptrh	equ	0xFF7
  5595                           tblptrl	equ	0xFF6
  5596                           tablat	equ	0xFF5
  5597                           prodh	equ	0xFF4
  5598                           prodl	equ	0xFF3
  5599                           intcon2	equ	0xFF1
  5600                           postinc0	equ	0xFEE
  5601                           wreg	equ	0xFE8
  5602                           postdec1	equ	0xFE5
  5603                           fsr1l	equ	0xFE1
  5604                           indf2	equ	0xFDF
  5605                           postinc2	equ	0xFDE
  5606                           postdec2	equ	0xFDD
  5607                           fsr2h	equ	0xFDA
  5608                           fsr2l	equ	0xFD9
  5609                           status	equ	0xFD8
  5610                           
  5611 ;; *************** function _I2C_Write_Cmd_Only *****************
  5612 ;; Defined at:
  5613 ;;		line 140 in file "I2C_Soft.c"
  5614 ;; Parameters:    Size  Location     Type
  5615 ;;  Device          1    wreg     unsigned char 
  5616 ;;  Cmd             1   16[COMRAM] unsigned char 
  5617 ;; Auto vars:     Size  Location     Type
  5618 ;;  Device          1   17[COMRAM] unsigned char 
  5619 ;; Return value:  Size  Location     Type
  5620 ;;		None               void
  5621 ;; Registers used:
  5622 ;;		wreg, status,2, status,0, cstack
  5623 ;; Tracked objects:
  5624 ;;		On entry : 0/0
  5625 ;;		On exit  : 0/0
  5626 ;;		Unchanged: 0/0
  5627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5628 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5629 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5631 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5632 ;;Total ram usage:        2 bytes
  5633 ;; Hardware stack levels used:    1
  5634 ;; Hardware stack levels required when called:    3
  5635 ;; This function calls:
  5636 ;;		_I2C_Start
  5637 ;;		_I2C_Stop
  5638 ;;		_I2C_Write
  5639 ;; This function is called by:
  5640 ;;		_DS1621_Init
  5641 ;; This function uses a non-reentrant model
  5642 ;;
  5643                           
  5644                           	psect	text34
  5645  000EBA                     __ptext34:
  5646                           	opt stack 0
  5647  000EBA                     _I2C_Write_Cmd_Only:
  5648                           	opt stack 25
  5649                           
  5650                           ;incstack = 0
  5651                           ;I2C_Write_Cmd_Only@Device stored from wreg
  5652  000EBA  6E12               	movwf	I2C_Write_Cmd_Only@Device,c
  5653                           
  5654                           ;I2C_Soft.c: 142: I2C_Start();
  5655  000EBC  EC9B  F007         	call	_I2C_Start	;wreg free
  5656                           
  5657                           ;I2C_Soft.c: 143: I2C_Write((Device << 1) | 0);
  5658  000EC0  5012               	movf	I2C_Write_Cmd_Only@Device,w,c
  5659  000EC2  2412               	addwf	I2C_Write_Cmd_Only@Device,w,c
  5660  000EC4  EC87  F006         	call	_I2C_Write
  5661                           
  5662                           ;I2C_Soft.c: 144: I2C_Write(Cmd);
  5663  000EC8  5011               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  5664  000ECA  EC87  F006         	call	_I2C_Write
  5665                           
  5666                           ;I2C_Soft.c: 145: I2C_Stop();
  5667  000ECE  EC92  F007         	call	_I2C_Stop	;wreg free
  5668  000ED2  0012               	return		;funcret
  5669  000ED4                     __end_of_I2C_Write_Cmd_Only:
  5670                           	opt stack 0
  5671                           tblptru	equ	0xFF8
  5672                           tblptrh	equ	0xFF7
  5673                           tblptrl	equ	0xFF6
  5674                           tablat	equ	0xFF5
  5675                           prodh	equ	0xFF4
  5676                           prodl	equ	0xFF3
  5677                           intcon2	equ	0xFF1
  5678                           postinc0	equ	0xFEE
  5679                           wreg	equ	0xFE8
  5680                           postdec1	equ	0xFE5
  5681                           fsr1l	equ	0xFE1
  5682                           indf2	equ	0xFDF
  5683                           postinc2	equ	0xFDE
  5684                           postdec2	equ	0xFDD
  5685                           fsr2h	equ	0xFDA
  5686                           fsr2l	equ	0xFD9
  5687                           status	equ	0xFD8
  5688                           
  5689 ;; *************** function _DS1621_Read_Temp *****************
  5690 ;; Defined at:
  5691 ;;		line 30 in file "I2C_Support.c"
  5692 ;; Parameters:    Size  Location     Type
  5693 ;;		None
  5694 ;; Auto vars:     Size  Location     Type
  5695 ;;  Device          1   21[COMRAM] unsigned char 
  5696 ;;  Data_Ret        1   20[COMRAM] unsigned char 
  5697 ;;  Cmd             1   19[COMRAM] unsigned char 
  5698 ;; Return value:  Size  Location     Type
  5699 ;;                  2   17[COMRAM] int 
  5700 ;; Registers used:
  5701 ;;		wreg, status,2, status,0, cstack
  5702 ;; Tracked objects:
  5703 ;;		On entry : 0/0
  5704 ;;		On exit  : 0/0
  5705 ;;		Unchanged: 0/0
  5706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5707 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5708 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5710 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5711 ;;Total ram usage:        5 bytes
  5712 ;; Hardware stack levels used:    1
  5713 ;; Hardware stack levels required when called:    4
  5714 ;; This function calls:
  5715 ;;		_I2C_ReStart
  5716 ;;		_I2C_Read
  5717 ;;		_I2C_Start
  5718 ;;		_I2C_Stop
  5719 ;;		_I2C_Write
  5720 ;; This function is called by:
  5721 ;;		_main
  5722 ;; This function uses a non-reentrant model
  5723 ;;
  5724                           
  5725                           	psect	text35
  5726  000D4C                     __ptext35:
  5727                           	opt stack 0
  5728  000D4C                     _DS1621_Read_Temp:
  5729                           	opt stack 26
  5730                           
  5731                           ;I2C_Support.c: 32: char Device = 0x48;
  5732                           
  5733                           ;incstack = 0
  5734  000D4C  0E48               	movlw	72
  5735  000D4E  6E16               	movwf	DS1621_Read_Temp@Device,c
  5736                           
  5737                           ;I2C_Support.c: 33: char Cmd = 0xAA;
  5738  000D50  0EAA               	movlw	170
  5739  000D52  6E14               	movwf	DS1621_Read_Temp@Cmd,c
  5740                           
  5741                           ;I2C_Support.c: 34: char Data_Ret;
  5742                           ;I2C_Support.c: 35: I2C_Start();
  5743  000D54  EC9B  F007         	call	_I2C_Start	;wreg free
  5744                           
  5745                           ;I2C_Support.c: 36: I2C_Write((Device << 1) | 0);
  5746  000D58  5016               	movf	DS1621_Read_Temp@Device,w,c
  5747  000D5A  2416               	addwf	DS1621_Read_Temp@Device,w,c
  5748  000D5C  EC87  F006         	call	_I2C_Write
  5749                           
  5750                           ;I2C_Support.c: 37: I2C_Write(Cmd);
  5751  000D60  5014               	movf	DS1621_Read_Temp@Cmd,w,c
  5752  000D62  EC87  F006         	call	_I2C_Write
  5753                           
  5754                           ;I2C_Support.c: 38: I2C_ReStart();
  5755  000D66  EC6A  F007         	call	_I2C_ReStart	;wreg free
  5756                           
  5757                           ;I2C_Support.c: 39: I2C_Write((Device << 1) | 1);
  5758  000D6A  80D8               	bsf	status,0,c
  5759  000D6C  3416               	rlcf	DS1621_Read_Temp@Device,w,c
  5760  000D6E  EC87  F006         	call	_I2C_Write
  5761                           
  5762                           ;I2C_Support.c: 40: Data_Ret = I2C_Read(0);
  5763  000D72  0E00               	movlw	0
  5764  000D74  ECE5  F005         	call	_I2C_Read
  5765  000D78  6E15               	movwf	DS1621_Read_Temp@Data_Ret,c
  5766                           
  5767                           ;I2C_Support.c: 41: I2C_Stop();
  5768  000D7A  EC92  F007         	call	_I2C_Stop	;wreg free
  5769                           
  5770                           ;I2C_Support.c: 42: return Data_Ret;
  5771  000D7E  C015  F012         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
  5772  000D82  6A13               	clrf	?_DS1621_Read_Temp+1,c
  5773  000D84  D000               	goto	l442
  5774  000D86                     l442:
  5775  000D86  0012               	return		;funcret
  5776  000D88                     __end_of_DS1621_Read_Temp:
  5777                           	opt stack 0
  5778                           tblptru	equ	0xFF8
  5779                           tblptrh	equ	0xFF7
  5780                           tblptrl	equ	0xFF6
  5781                           tablat	equ	0xFF5
  5782                           prodh	equ	0xFF4
  5783                           prodl	equ	0xFF3
  5784                           intcon2	equ	0xFF1
  5785                           postinc0	equ	0xFEE
  5786                           wreg	equ	0xFE8
  5787                           postdec1	equ	0xFE5
  5788                           fsr1l	equ	0xFE1
  5789                           indf2	equ	0xFDF
  5790                           postinc2	equ	0xFDE
  5791                           postdec2	equ	0xFDD
  5792                           fsr2h	equ	0xFDA
  5793                           fsr2l	equ	0xFD9
  5794                           status	equ	0xFD8
  5795                           
  5796 ;; *************** function _I2C_Write *****************
  5797 ;; Defined at:
  5798 ;;		line 37 in file "I2C_Soft.c"
  5799 ;; Parameters:    Size  Location     Type
  5800 ;;  outByte         1    wreg     unsigned char 
  5801 ;; Auto vars:     Size  Location     Type
  5802 ;;  outByte         1   14[COMRAM] unsigned char 
  5803 ;;  n               1   15[COMRAM] unsigned char 
  5804 ;; Return value:  Size  Location     Type
  5805 ;;		None               void
  5806 ;; Registers used:
  5807 ;;		wreg, status,2, status,0, cstack
  5808 ;; Tracked objects:
  5809 ;;		On entry : 0/0
  5810 ;;		On exit  : 0/0
  5811 ;;		Unchanged: 0/0
  5812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5814 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5816 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5817 ;;Total ram usage:        2 bytes
  5818 ;; Hardware stack levels used:    1
  5819 ;; Hardware stack levels required when called:    2
  5820 ;; This function calls:
  5821 ;;		_i2cHighScl
  5822 ;;		_i2cHighSda
  5823 ;;		_i2cLowScl
  5824 ;;		_i2cLowSda
  5825 ;; This function is called by:
  5826 ;;		_I2C_Write_Cmd_Only
  5827 ;;		_I2C_Write_Cmd_Write_Data
  5828 ;;		_DS1621_Read_Temp
  5829 ;;		_I2C_Write_Address_Read_One_Byte
  5830 ;;		_I2C_Write_Address_Write_One_Byte
  5831 ;;		_I2C_Write_Cmd_Read_One_Byte
  5832 ;; This function uses a non-reentrant model
  5833 ;;
  5834                           
  5835                           	psect	text36
  5836  000D0E                     __ptext36:
  5837                           	opt stack 0
  5838  000D0E                     _I2C_Write:
  5839                           	opt stack 25
  5840                           
  5841                           ;incstack = 0
  5842                           ;I2C_Write@outByte stored from wreg
  5843  000D0E  6E0F               	movwf	I2C_Write@outByte,c
  5844                           
  5845                           ;I2C_Soft.c: 39: unsigned char n;
  5846                           ;I2C_Soft.c: 40: for(n=0; n<8; n++)
  5847  000D10  0E00               	movlw	0
  5848  000D12  6E10               	movwf	I2C_Write@n,c
  5849  000D14                     l1435:
  5850  000D14  0E07               	movlw	7
  5851  000D16  6410               	cpfsgt	I2C_Write@n,c
  5852  000D18  D001               	goto	l376
  5853  000D1A  D011               	goto	l1453
  5854  000D1C                     l376:
  5855                           
  5856                           ;I2C_Soft.c: 41: {
  5857                           ;I2C_Soft.c: 42: if(outByte&0x80) i2cHighSda();
  5858  000D1C  AE0F               	btfss	I2C_Write@outByte,7,c
  5859  000D1E  D003               	goto	l1441
  5860  000D20  ECDD  F007         	call	_i2cHighSda	;wreg free
  5861  000D24  D003               	goto	l1443
  5862  000D26                     l1441:
  5863                           
  5864                           ;I2C_Soft.c: 43: else i2cLowSda();
  5865  000D26  ECD4  F007         	call	_i2cLowSda	;wreg free
  5866  000D2A  D000               	goto	l1443
  5867  000D2C                     l1443:
  5868                           
  5869                           ;I2C_Soft.c: 44: i2cHighScl();
  5870  000D2C  ECC4  F007         	call	_i2cHighScl	;wreg free
  5871                           
  5872                           ;I2C_Soft.c: 45: i2cLowScl();
  5873  000D30  ECD9  F007         	call	_i2cLowScl	;wreg free
  5874                           
  5875                           ;I2C_Soft.c: 46: outByte = outByte << 1;
  5876  000D34  500F               	movf	I2C_Write@outByte,w,c
  5877  000D36  240F               	addwf	I2C_Write@outByte,w,c
  5878  000D38  6E0F               	movwf	I2C_Write@outByte,c
  5879  000D3A  2A10               	incf	I2C_Write@n,f,c
  5880  000D3C  D7EB               	goto	l1435
  5881  000D3E                     l1453:
  5882                           
  5883                           ;I2C_Soft.c: 47: }
  5884                           ;I2C_Soft.c: 48: i2cHighSda();
  5885  000D3E  ECDD  F007         	call	_i2cHighSda	;wreg free
  5886                           
  5887                           ;I2C_Soft.c: 49: i2cHighScl();
  5888  000D42  ECC4  F007         	call	_i2cHighScl	;wreg free
  5889                           
  5890                           ;I2C_Soft.c: 50: i2cLowScl();
  5891  000D46  ECD9  F007         	call	_i2cLowScl	;wreg free
  5892  000D4A  0012               	return		;funcret
  5893  000D4C                     __end_of_I2C_Write:
  5894                           	opt stack 0
  5895                           tblptru	equ	0xFF8
  5896                           tblptrh	equ	0xFF7
  5897                           tblptrl	equ	0xFF6
  5898                           tablat	equ	0xFF5
  5899                           prodh	equ	0xFF4
  5900                           prodl	equ	0xFF3
  5901                           intcon2	equ	0xFF1
  5902                           postinc0	equ	0xFEE
  5903                           wreg	equ	0xFE8
  5904                           postdec1	equ	0xFE5
  5905                           fsr1l	equ	0xFE1
  5906                           indf2	equ	0xFDF
  5907                           postinc2	equ	0xFDE
  5908                           postdec2	equ	0xFDD
  5909                           fsr2h	equ	0xFDA
  5910                           fsr2l	equ	0xFD9
  5911                           status	equ	0xFD8
  5912                           
  5913 ;; *************** function _I2C_Stop *****************
  5914 ;; Defined at:
  5915 ;;		line 84 in file "I2C_Soft.c"
  5916 ;; Parameters:    Size  Location     Type
  5917 ;;		None
  5918 ;; Auto vars:     Size  Location     Type
  5919 ;;		None
  5920 ;; Return value:  Size  Location     Type
  5921 ;;		None               void
  5922 ;; Registers used:
  5923 ;;		wreg, cstack
  5924 ;; Tracked objects:
  5925 ;;		On entry : 0/0
  5926 ;;		On exit  : 0/0
  5927 ;;		Unchanged: 0/0
  5928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5933 ;;Total ram usage:        0 bytes
  5934 ;; Hardware stack levels used:    1
  5935 ;; Hardware stack levels required when called:    2
  5936 ;; This function calls:
  5937 ;;		_i2cHighScl
  5938 ;;		_i2cHighSda
  5939 ;;		_i2cLowScl
  5940 ;;		_i2cLowSda
  5941 ;; This function is called by:
  5942 ;;		_I2C_Write_Cmd_Only
  5943 ;;		_I2C_Write_Cmd_Write_Data
  5944 ;;		_DS1621_Read_Temp
  5945 ;;		_I2C_Write_Address_Read_One_Byte
  5946 ;;		_I2C_Write_Address_Write_One_Byte
  5947 ;;		_I2C_Write_Cmd_Read_One_Byte
  5948 ;; This function uses a non-reentrant model
  5949 ;;
  5950                           
  5951                           	psect	text37
  5952  000F24                     __ptext37:
  5953                           	opt stack 0
  5954  000F24                     _I2C_Stop:
  5955                           	opt stack 25
  5956                           
  5957                           ;I2C_Soft.c: 86: i2cLowScl();
  5958                           
  5959                           ;incstack = 0
  5960  000F24  ECD9  F007         	call	_i2cLowScl	;wreg free
  5961                           
  5962                           ;I2C_Soft.c: 87: i2cLowSda();
  5963  000F28  ECD4  F007         	call	_i2cLowSda	;wreg free
  5964                           
  5965                           ;I2C_Soft.c: 88: i2cHighScl();
  5966  000F2C  ECC4  F007         	call	_i2cHighScl	;wreg free
  5967                           
  5968                           ;I2C_Soft.c: 89: i2cHighSda();
  5969  000F30  ECDD  F007         	call	_i2cHighSda	;wreg free
  5970  000F34  0012               	return		;funcret
  5971  000F36                     __end_of_I2C_Stop:
  5972                           	opt stack 0
  5973                           tblptru	equ	0xFF8
  5974                           tblptrh	equ	0xFF7
  5975                           tblptrl	equ	0xFF6
  5976                           tablat	equ	0xFF5
  5977                           prodh	equ	0xFF4
  5978                           prodl	equ	0xFF3
  5979                           intcon2	equ	0xFF1
  5980                           postinc0	equ	0xFEE
  5981                           wreg	equ	0xFE8
  5982                           postdec1	equ	0xFE5
  5983                           fsr1l	equ	0xFE1
  5984                           indf2	equ	0xFDF
  5985                           postinc2	equ	0xFDE
  5986                           postdec2	equ	0xFDD
  5987                           fsr2h	equ	0xFDA
  5988                           fsr2l	equ	0xFD9
  5989                           status	equ	0xFD8
  5990                           
  5991 ;; *************** function _I2C_Start *****************
  5992 ;; Defined at:
  5993 ;;		line 67 in file "I2C_Soft.c"
  5994 ;; Parameters:    Size  Location     Type
  5995 ;;		None
  5996 ;; Auto vars:     Size  Location     Type
  5997 ;;		None
  5998 ;; Return value:  Size  Location     Type
  5999 ;;		None               void
  6000 ;; Registers used:
  6001 ;;		wreg, cstack
  6002 ;; Tracked objects:
  6003 ;;		On entry : 0/0
  6004 ;;		On exit  : 0/0
  6005 ;;		Unchanged: 0/0
  6006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6010 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6011 ;;Total ram usage:        0 bytes
  6012 ;; Hardware stack levels used:    1
  6013 ;; Hardware stack levels required when called:    2
  6014 ;; This function calls:
  6015 ;;		_i2cHighScl
  6016 ;;		_i2cHighSda
  6017 ;;		_i2cLowScl
  6018 ;;		_i2cLowSda
  6019 ;; This function is called by:
  6020 ;;		_I2C_Write_Cmd_Only
  6021 ;;		_I2C_Write_Cmd_Write_Data
  6022 ;;		_DS1621_Read_Temp
  6023 ;;		_I2C_Write_Address_Read_One_Byte
  6024 ;;		_I2C_Write_Address_Write_One_Byte
  6025 ;;		_I2C_Write_Cmd_Read_One_Byte
  6026 ;; This function uses a non-reentrant model
  6027 ;;
  6028                           
  6029                           	psect	text38
  6030  000F36                     __ptext38:
  6031                           	opt stack 0
  6032  000F36                     _I2C_Start:
  6033                           	opt stack 25
  6034                           
  6035                           ;I2C_Soft.c: 69: i2cHighSda();
  6036                           
  6037                           ;incstack = 0
  6038  000F36  ECDD  F007         	call	_i2cHighSda	;wreg free
  6039                           
  6040                           ;I2C_Soft.c: 70: i2cHighScl();
  6041  000F3A  ECC4  F007         	call	_i2cHighScl	;wreg free
  6042                           
  6043                           ;I2C_Soft.c: 71: i2cLowSda();
  6044  000F3E  ECD4  F007         	call	_i2cLowSda	;wreg free
  6045                           
  6046                           ;I2C_Soft.c: 72: i2cLowScl();
  6047  000F42  ECD9  F007         	call	_i2cLowScl	;wreg free
  6048  000F46  0012               	return		;funcret
  6049  000F48                     __end_of_I2C_Start:
  6050                           	opt stack 0
  6051                           tblptru	equ	0xFF8
  6052                           tblptrh	equ	0xFF7
  6053                           tblptrl	equ	0xFF6
  6054                           tablat	equ	0xFF5
  6055                           prodh	equ	0xFF4
  6056                           prodl	equ	0xFF3
  6057                           intcon2	equ	0xFF1
  6058                           postinc0	equ	0xFEE
  6059                           wreg	equ	0xFE8
  6060                           postdec1	equ	0xFE5
  6061                           fsr1l	equ	0xFE1
  6062                           indf2	equ	0xFDF
  6063                           postinc2	equ	0xFDE
  6064                           postdec2	equ	0xFDD
  6065                           fsr2h	equ	0xFDA
  6066                           fsr2l	equ	0xFD9
  6067                           status	equ	0xFD8
  6068                           
  6069 ;; *************** function _I2C_Read *****************
  6070 ;; Defined at:
  6071 ;;		line 16 in file "I2C_Soft.c"
  6072 ;; Parameters:    Size  Location     Type
  6073 ;;  ack             1    wreg     unsigned char 
  6074 ;; Auto vars:     Size  Location     Type
  6075 ;;  ack             1   14[COMRAM] unsigned char 
  6076 ;;  inByte          1   16[COMRAM] unsigned char 
  6077 ;;  n               1   15[COMRAM] unsigned char 
  6078 ;; Return value:  Size  Location     Type
  6079 ;;                  1    wreg      unsigned char 
  6080 ;; Registers used:
  6081 ;;		wreg, status,2, status,0, cstack
  6082 ;; Tracked objects:
  6083 ;;		On entry : 0/0
  6084 ;;		On exit  : 0/0
  6085 ;;		Unchanged: 0/0
  6086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6088 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6090 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6091 ;;Total ram usage:        3 bytes
  6092 ;; Hardware stack levels used:    1
  6093 ;; Hardware stack levels required when called:    3
  6094 ;; This function calls:
  6095 ;;		_i2cAck
  6096 ;;		_i2cHighScl
  6097 ;;		_i2cHighSda
  6098 ;;		_i2cLowScl
  6099 ;;		_i2cNack
  6100 ;; This function is called by:
  6101 ;;		_DS1621_Read_Temp
  6102 ;;		_I2C_Write_Address_Read_One_Byte
  6103 ;;		_I2C_Write_Cmd_Read_One_Byte
  6104 ;; This function uses a non-reentrant model
  6105 ;;
  6106                           
  6107                           	psect	text39
  6108  000BCA                     __ptext39:
  6109                           	opt stack 0
  6110  000BCA                     _I2C_Read:
  6111                           	opt stack 26
  6112                           
  6113                           ;incstack = 0
  6114                           ;I2C_Read@ack stored from wreg
  6115  000BCA  6E0F               	movwf	I2C_Read@ack,c
  6116                           
  6117                           ;I2C_Soft.c: 18: unsigned char inByte, n;
  6118                           ;I2C_Soft.c: 19: i2cHighSda();
  6119  000BCC  ECDD  F007         	call	_i2cHighSda	;wreg free
  6120                           
  6121                           ;I2C_Soft.c: 20: for (n=0; n<8; n++)
  6122  000BD0  0E00               	movlw	0
  6123  000BD2  6E10               	movwf	I2C_Read@n,c
  6124  000BD4                     l1653:
  6125  000BD4  0E07               	movlw	7
  6126  000BD6  6410               	cpfsgt	I2C_Read@n,c
  6127  000BD8  D001               	goto	l1657
  6128  000BDA  D00F               	goto	l1671
  6129  000BDC                     l1657:
  6130                           
  6131                           ;I2C_Soft.c: 21: {
  6132                           ;I2C_Soft.c: 22: i2cHighScl();
  6133  000BDC  ECC4  F007         	call	_i2cHighScl	;wreg free
  6134                           
  6135                           ;I2C_Soft.c: 24: if (PORTDbits.RD7)
  6136  000BE0  AE83               	btfss	3971,7,c	;volatile
  6137  000BE2  D003               	goto	l1663
  6138                           
  6139                           ;I2C_Soft.c: 25: inByte = (inByte << 1) | 0x01;
  6140  000BE4  80D8               	bsf	status,0,c
  6141  000BE6  3611               	rlcf	I2C_Read@inByte,f,c
  6142  000BE8  D004               	goto	l1665
  6143  000BEA                     l1663:
  6144                           
  6145                           ;I2C_Soft.c: 26: else
  6146                           ;I2C_Soft.c: 27: inByte = inByte << 1;
  6147  000BEA  5011               	movf	I2C_Read@inByte,w,c
  6148  000BEC  2411               	addwf	I2C_Read@inByte,w,c
  6149  000BEE  6E11               	movwf	I2C_Read@inByte,c
  6150  000BF0  D000               	goto	l1665
  6151  000BF2                     l1665:
  6152                           
  6153                           ;I2C_Soft.c: 28: i2cLowScl();
  6154  000BF2  ECD9  F007         	call	_i2cLowScl	;wreg free
  6155  000BF6  2A10               	incf	I2C_Read@n,f,c
  6156  000BF8  D7ED               	goto	l1653
  6157  000BFA                     l1671:
  6158                           
  6159                           ;I2C_Soft.c: 29: }
  6160                           ;I2C_Soft.c: 30: if (ack) i2cAck();
  6161  000BFA  500F               	movf	I2C_Read@ack,w,c
  6162  000BFC  B4D8               	btfsc	status,2,c
  6163  000BFE  D003               	goto	l1675
  6164  000C00  ECA4  F007         	call	_i2cAck	;wreg free
  6165  000C04  D003               	goto	l1677
  6166  000C06                     l1675:
  6167                           
  6168                           ;I2C_Soft.c: 31: else i2cNack();
  6169  000C06  ECCF  F007         	call	_i2cNack	;wreg free
  6170  000C0A  D000               	goto	l1677
  6171  000C0C                     l1677:
  6172                           
  6173                           ;I2C_Soft.c: 34: return(inByte);
  6174  000C0C  5011               	movf	I2C_Read@inByte,w,c
  6175  000C0E  D000               	goto	l373
  6176  000C10                     l373:
  6177  000C10  0012               	return		;funcret
  6178  000C12                     __end_of_I2C_Read:
  6179                           	opt stack 0
  6180                           tblptru	equ	0xFF8
  6181                           tblptrh	equ	0xFF7
  6182                           tblptrl	equ	0xFF6
  6183                           tablat	equ	0xFF5
  6184                           prodh	equ	0xFF4
  6185                           prodl	equ	0xFF3
  6186                           intcon2	equ	0xFF1
  6187                           postinc0	equ	0xFEE
  6188                           wreg	equ	0xFE8
  6189                           postdec1	equ	0xFE5
  6190                           fsr1l	equ	0xFE1
  6191                           indf2	equ	0xFDF
  6192                           postinc2	equ	0xFDE
  6193                           postdec2	equ	0xFDD
  6194                           fsr2h	equ	0xFDA
  6195                           fsr2l	equ	0xFD9
  6196                           status	equ	0xFD8
  6197                           
  6198 ;; *************** function _i2cNack *****************
  6199 ;; Defined at:
  6200 ;;		line 53 in file "I2C_Soft.c"
  6201 ;; Parameters:    Size  Location     Type
  6202 ;;		None
  6203 ;; Auto vars:     Size  Location     Type
  6204 ;;		None
  6205 ;; Return value:  Size  Location     Type
  6206 ;;		None               void
  6207 ;; Registers used:
  6208 ;;		wreg, cstack
  6209 ;; Tracked objects:
  6210 ;;		On entry : 0/0
  6211 ;;		On exit  : 0/0
  6212 ;;		Unchanged: 0/0
  6213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6217 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6218 ;;Total ram usage:        0 bytes
  6219 ;; Hardware stack levels used:    1
  6220 ;; Hardware stack levels required when called:    2
  6221 ;; This function calls:
  6222 ;;		_i2cHighScl
  6223 ;;		_i2cLowScl
  6224 ;; This function is called by:
  6225 ;;		_I2C_Read
  6226 ;; This function uses a non-reentrant model
  6227 ;;
  6228                           
  6229                           	psect	text40
  6230  000F9E                     __ptext40:
  6231                           	opt stack 0
  6232  000F9E                     _i2cNack:
  6233                           	opt stack 26
  6234                           
  6235                           ;I2C_Soft.c: 55: i2cHighScl();
  6236                           
  6237                           ;incstack = 0
  6238  000F9E  ECC4  F007         	call	_i2cHighScl	;wreg free
  6239                           
  6240                           ;I2C_Soft.c: 56: i2cLowScl();
  6241  000FA2  ECD9  F007         	call	_i2cLowScl	;wreg free
  6242  000FA6  0012               	return		;funcret
  6243  000FA8                     __end_of_i2cNack:
  6244                           	opt stack 0
  6245                           tblptru	equ	0xFF8
  6246                           tblptrh	equ	0xFF7
  6247                           tblptrl	equ	0xFF6
  6248                           tablat	equ	0xFF5
  6249                           prodh	equ	0xFF4
  6250                           prodl	equ	0xFF3
  6251                           intcon2	equ	0xFF1
  6252                           postinc0	equ	0xFEE
  6253                           wreg	equ	0xFE8
  6254                           postdec1	equ	0xFE5
  6255                           fsr1l	equ	0xFE1
  6256                           indf2	equ	0xFDF
  6257                           postinc2	equ	0xFDE
  6258                           postdec2	equ	0xFDD
  6259                           fsr2h	equ	0xFDA
  6260                           fsr2l	equ	0xFD9
  6261                           status	equ	0xFD8
  6262                           
  6263 ;; *************** function _i2cAck *****************
  6264 ;; Defined at:
  6265 ;;		line 59 in file "I2C_Soft.c"
  6266 ;; Parameters:    Size  Location     Type
  6267 ;;		None
  6268 ;; Auto vars:     Size  Location     Type
  6269 ;;		None
  6270 ;; Return value:  Size  Location     Type
  6271 ;;		None               void
  6272 ;; Registers used:
  6273 ;;		wreg, cstack
  6274 ;; Tracked objects:
  6275 ;;		On entry : 0/0
  6276 ;;		On exit  : 0/0
  6277 ;;		Unchanged: 0/0
  6278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6282 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6283 ;;Total ram usage:        0 bytes
  6284 ;; Hardware stack levels used:    1
  6285 ;; Hardware stack levels required when called:    2
  6286 ;; This function calls:
  6287 ;;		_i2cHighScl
  6288 ;;		_i2cHighSda
  6289 ;;		_i2cLowScl
  6290 ;;		_i2cLowSda
  6291 ;; This function is called by:
  6292 ;;		_I2C_Read
  6293 ;; This function uses a non-reentrant model
  6294 ;;
  6295                           
  6296                           	psect	text41
  6297  000F48                     __ptext41:
  6298                           	opt stack 0
  6299  000F48                     _i2cAck:
  6300                           	opt stack 26
  6301                           
  6302                           ;I2C_Soft.c: 61: i2cLowSda();
  6303                           
  6304                           ;incstack = 0
  6305  000F48  ECD4  F007         	call	_i2cLowSda	;wreg free
  6306                           
  6307                           ;I2C_Soft.c: 62: i2cHighScl();
  6308  000F4C  ECC4  F007         	call	_i2cHighScl	;wreg free
  6309                           
  6310                           ;I2C_Soft.c: 63: i2cLowScl();
  6311  000F50  ECD9  F007         	call	_i2cLowScl	;wreg free
  6312                           
  6313                           ;I2C_Soft.c: 64: i2cHighSda();
  6314  000F54  ECDD  F007         	call	_i2cHighSda	;wreg free
  6315  000F58  0012               	return		;funcret
  6316  000F5A                     __end_of_i2cAck:
  6317                           	opt stack 0
  6318                           tblptru	equ	0xFF8
  6319                           tblptrh	equ	0xFF7
  6320                           tblptrl	equ	0xFF6
  6321                           tablat	equ	0xFF5
  6322                           prodh	equ	0xFF4
  6323                           prodl	equ	0xFF3
  6324                           intcon2	equ	0xFF1
  6325                           postinc0	equ	0xFEE
  6326                           wreg	equ	0xFE8
  6327                           postdec1	equ	0xFE5
  6328                           fsr1l	equ	0xFE1
  6329                           indf2	equ	0xFDF
  6330                           postinc2	equ	0xFDE
  6331                           postdec2	equ	0xFDD
  6332                           fsr2h	equ	0xFDA
  6333                           fsr2l	equ	0xFD9
  6334                           status	equ	0xFD8
  6335                           
  6336 ;; *************** function _I2C_ReStart *****************
  6337 ;; Defined at:
  6338 ;;		line 75 in file "I2C_Soft.c"
  6339 ;; Parameters:    Size  Location     Type
  6340 ;;		None
  6341 ;; Auto vars:     Size  Location     Type
  6342 ;;		None
  6343 ;; Return value:  Size  Location     Type
  6344 ;;		None               void
  6345 ;; Registers used:
  6346 ;;		wreg, cstack
  6347 ;; Tracked objects:
  6348 ;;		On entry : 0/0
  6349 ;;		On exit  : 0/0
  6350 ;;		Unchanged: 0/0
  6351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6355 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6356 ;;Total ram usage:        0 bytes
  6357 ;; Hardware stack levels used:    1
  6358 ;; Hardware stack levels required when called:    2
  6359 ;; This function calls:
  6360 ;;		_i2cHighScl
  6361 ;;		_i2cHighSda
  6362 ;;		_i2cLowScl
  6363 ;;		_i2cLowSda
  6364 ;; This function is called by:
  6365 ;;		_DS1621_Read_Temp
  6366 ;;		_I2C_Write_Address_Read_One_Byte
  6367 ;;		_I2C_Write_Cmd_Read_One_Byte
  6368 ;; This function uses a non-reentrant model
  6369 ;;
  6370                           
  6371                           	psect	text42
  6372  000ED4                     __ptext42:
  6373                           	opt stack 0
  6374  000ED4                     _I2C_ReStart:
  6375                           	opt stack 27
  6376                           
  6377                           ;I2C_Soft.c: 77: i2cLowScl();
  6378                           
  6379                           ;incstack = 0
  6380  000ED4  ECD9  F007         	call	_i2cLowScl	;wreg free
  6381                           
  6382                           ;I2C_Soft.c: 78: i2cHighSda();
  6383  000ED8  ECDD  F007         	call	_i2cHighSda	;wreg free
  6384                           
  6385                           ;I2C_Soft.c: 79: i2cHighScl();
  6386  000EDC  ECC4  F007         	call	_i2cHighScl	;wreg free
  6387                           
  6388                           ;I2C_Soft.c: 80: i2cLowSda();
  6389  000EE0  ECD4  F007         	call	_i2cLowSda	;wreg free
  6390                           
  6391                           ;I2C_Soft.c: 81: i2cLowScl();
  6392  000EE4  ECD9  F007         	call	_i2cLowScl	;wreg free
  6393  000EE8  0012               	return		;funcret
  6394  000EEA                     __end_of_I2C_ReStart:
  6395                           	opt stack 0
  6396                           tblptru	equ	0xFF8
  6397                           tblptrh	equ	0xFF7
  6398                           tblptrl	equ	0xFF6
  6399                           tablat	equ	0xFF5
  6400                           prodh	equ	0xFF4
  6401                           prodl	equ	0xFF3
  6402                           intcon2	equ	0xFF1
  6403                           postinc0	equ	0xFEE
  6404                           wreg	equ	0xFE8
  6405                           postdec1	equ	0xFE5
  6406                           fsr1l	equ	0xFE1
  6407                           indf2	equ	0xFDF
  6408                           postinc2	equ	0xFDE
  6409                           postdec2	equ	0xFDD
  6410                           fsr2h	equ	0xFDA
  6411                           fsr2l	equ	0xFD9
  6412                           status	equ	0xFD8
  6413                           
  6414 ;; *************** function _i2cLowSda *****************
  6415 ;; Defined at:
  6416 ;;		line 98 in file "I2C_Soft.c"
  6417 ;; Parameters:    Size  Location     Type
  6418 ;;		None
  6419 ;; Auto vars:     Size  Location     Type
  6420 ;;		None
  6421 ;; Return value:  Size  Location     Type
  6422 ;;		None               void
  6423 ;; Registers used:
  6424 ;;		None
  6425 ;; Tracked objects:
  6426 ;;		On entry : 0/0
  6427 ;;		On exit  : 0/0
  6428 ;;		Unchanged: 0/0
  6429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6434 ;;Total ram usage:        0 bytes
  6435 ;; Hardware stack levels used:    1
  6436 ;; Hardware stack levels required when called:    1
  6437 ;; This function calls:
  6438 ;;		Nothing
  6439 ;; This function is called by:
  6440 ;;		_I2C_Write
  6441 ;;		_i2cAck
  6442 ;;		_I2C_Start
  6443 ;;		_I2C_ReStart
  6444 ;;		_I2C_Stop
  6445 ;; This function uses a non-reentrant model
  6446 ;;
  6447                           
  6448                           	psect	text43
  6449  000FA8                     __ptext43:
  6450                           	opt stack 0
  6451  000FA8                     _i2cLowSda:
  6452                           	opt stack 25
  6453                           
  6454                           ;I2C_Soft.c: 100: PORTDbits.RD7 = 0;
  6455                           
  6456                           ;incstack = 0
  6457  000FA8  9E83               	bcf	3971,7,c	;volatile
  6458                           
  6459                           ;I2C_Soft.c: 101: TRISDbits.RD7 = 0;
  6460  000FAA  9E95               	bcf	3989,7,c	;volatile
  6461                           
  6462                           ;I2C_Soft.c: 102: _delay((unsigned long)((2)*(8000000/4000000.0)));
  6463  000FAC  D000               	nop2		;2 cycle nop
  6464  000FAE  D000               	nop2		;2 cycle nop
  6465  000FB0  0012               	return		;funcret
  6466  000FB2                     __end_of_i2cLowSda:
  6467                           	opt stack 0
  6468                           tblptru	equ	0xFF8
  6469                           tblptrh	equ	0xFF7
  6470                           tblptrl	equ	0xFF6
  6471                           tablat	equ	0xFF5
  6472                           prodh	equ	0xFF4
  6473                           prodl	equ	0xFF3
  6474                           intcon2	equ	0xFF1
  6475                           postinc0	equ	0xFEE
  6476                           wreg	equ	0xFE8
  6477                           postdec1	equ	0xFE5
  6478                           fsr1l	equ	0xFE1
  6479                           indf2	equ	0xFDF
  6480                           postinc2	equ	0xFDE
  6481                           postdec2	equ	0xFDD
  6482                           fsr2h	equ	0xFDA
  6483                           fsr2l	equ	0xFD9
  6484                           status	equ	0xFD8
  6485                           
  6486 ;; *************** function _i2cLowScl *****************
  6487 ;; Defined at:
  6488 ;;		line 111 in file "I2C_Soft.c"
  6489 ;; Parameters:    Size  Location     Type
  6490 ;;		None
  6491 ;; Auto vars:     Size  Location     Type
  6492 ;;		None
  6493 ;; Return value:  Size  Location     Type
  6494 ;;		None               void
  6495 ;; Registers used:
  6496 ;;		None
  6497 ;; Tracked objects:
  6498 ;;		On entry : 0/0
  6499 ;;		On exit  : 0/0
  6500 ;;		Unchanged: 0/0
  6501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6506 ;;Total ram usage:        0 bytes
  6507 ;; Hardware stack levels used:    1
  6508 ;; Hardware stack levels required when called:    1
  6509 ;; This function calls:
  6510 ;;		Nothing
  6511 ;; This function is called by:
  6512 ;;		_I2C_Read
  6513 ;;		_I2C_Write
  6514 ;;		_i2cNack
  6515 ;;		_i2cAck
  6516 ;;		_I2C_Start
  6517 ;;		_I2C_ReStart
  6518 ;;		_I2C_Stop
  6519 ;; This function uses a non-reentrant model
  6520 ;;
  6521                           
  6522                           	psect	text44
  6523  000FB2                     __ptext44:
  6524                           	opt stack 0
  6525  000FB2                     _i2cLowScl:
  6526                           	opt stack 25
  6527                           
  6528                           ;I2C_Soft.c: 113: PORTDbits.RD6 = 0;
  6529                           
  6530                           ;incstack = 0
  6531  000FB2  9C83               	bcf	3971,6,c	;volatile
  6532                           
  6533                           ;I2C_Soft.c: 114: TRISDbits.RD6 = 0;
  6534  000FB4  9C95               	bcf	3989,6,c	;volatile
  6535                           
  6536                           ;I2C_Soft.c: 115: _delay((unsigned long)((1)*(8000000/4000000.0)));
  6537  000FB6  D000               	nop2		;2 cycle nop
  6538  000FB8  0012               	return		;funcret
  6539  000FBA                     __end_of_i2cLowScl:
  6540                           	opt stack 0
  6541                           tblptru	equ	0xFF8
  6542                           tblptrh	equ	0xFF7
  6543                           tblptrl	equ	0xFF6
  6544                           tablat	equ	0xFF5
  6545                           prodh	equ	0xFF4
  6546                           prodl	equ	0xFF3
  6547                           intcon2	equ	0xFF1
  6548                           postinc0	equ	0xFEE
  6549                           wreg	equ	0xFE8
  6550                           postdec1	equ	0xFE5
  6551                           fsr1l	equ	0xFE1
  6552                           indf2	equ	0xFDF
  6553                           postinc2	equ	0xFDE
  6554                           postdec2	equ	0xFDD
  6555                           fsr2h	equ	0xFDA
  6556                           fsr2l	equ	0xFD9
  6557                           status	equ	0xFD8
  6558                           
  6559 ;; *************** function _i2cHighSda *****************
  6560 ;; Defined at:
  6561 ;;		line 92 in file "I2C_Soft.c"
  6562 ;; Parameters:    Size  Location     Type
  6563 ;;		None
  6564 ;; Auto vars:     Size  Location     Type
  6565 ;;		None
  6566 ;; Return value:  Size  Location     Type
  6567 ;;		None               void
  6568 ;; Registers used:
  6569 ;;		None
  6570 ;; Tracked objects:
  6571 ;;		On entry : 0/0
  6572 ;;		On exit  : 0/0
  6573 ;;		Unchanged: 0/0
  6574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6578 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6579 ;;Total ram usage:        0 bytes
  6580 ;; Hardware stack levels used:    1
  6581 ;; Hardware stack levels required when called:    1
  6582 ;; This function calls:
  6583 ;;		Nothing
  6584 ;; This function is called by:
  6585 ;;		_I2C_Init
  6586 ;;		_I2C_Read
  6587 ;;		_I2C_Write
  6588 ;;		_i2cAck
  6589 ;;		_I2C_Start
  6590 ;;		_I2C_ReStart
  6591 ;;		_I2C_Stop
  6592 ;; This function uses a non-reentrant model
  6593 ;;
  6594                           
  6595                           	psect	text45
  6596  000FBA                     __ptext45:
  6597                           	opt stack 0
  6598  000FBA                     _i2cHighSda:
  6599                           	opt stack 27
  6600                           
  6601                           ;I2C_Soft.c: 94: TRISDbits.RD7 = 1;
  6602                           
  6603                           ;incstack = 0
  6604  000FBA  8E95               	bsf	3989,7,c	;volatile
  6605                           
  6606                           ;I2C_Soft.c: 95: _delay((unsigned long)((2)*(8000000/4000000.0)));
  6607  000FBC  D000               	nop2		;2 cycle nop
  6608  000FBE  D000               	nop2		;2 cycle nop
  6609  000FC0  0012               	return		;funcret
  6610  000FC2                     __end_of_i2cHighSda:
  6611                           	opt stack 0
  6612                           tblptru	equ	0xFF8
  6613                           tblptrh	equ	0xFF7
  6614                           tblptrl	equ	0xFF6
  6615                           tablat	equ	0xFF5
  6616                           prodh	equ	0xFF4
  6617                           prodl	equ	0xFF3
  6618                           intcon2	equ	0xFF1
  6619                           postinc0	equ	0xFEE
  6620                           wreg	equ	0xFE8
  6621                           postdec1	equ	0xFE5
  6622                           fsr1l	equ	0xFE1
  6623                           indf2	equ	0xFDF
  6624                           postinc2	equ	0xFDE
  6625                           postdec2	equ	0xFDD
  6626                           fsr2h	equ	0xFDA
  6627                           fsr2l	equ	0xFD9
  6628                           status	equ	0xFD8
  6629                           
  6630 ;; *************** function _i2cHighScl *****************
  6631 ;; Defined at:
  6632 ;;		line 105 in file "I2C_Soft.c"
  6633 ;; Parameters:    Size  Location     Type
  6634 ;;		None
  6635 ;; Auto vars:     Size  Location     Type
  6636 ;;		None
  6637 ;; Return value:  Size  Location     Type
  6638 ;;		None               void
  6639 ;; Registers used:
  6640 ;;		wreg
  6641 ;; Tracked objects:
  6642 ;;		On entry : 0/0
  6643 ;;		On exit  : 0/0
  6644 ;;		Unchanged: 0/0
  6645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6650 ;;Total ram usage:        0 bytes
  6651 ;; Hardware stack levels used:    1
  6652 ;; Hardware stack levels required when called:    1
  6653 ;; This function calls:
  6654 ;;		Nothing
  6655 ;; This function is called by:
  6656 ;;		_I2C_Init
  6657 ;;		_I2C_Read
  6658 ;;		_I2C_Write
  6659 ;;		_i2cNack
  6660 ;;		_i2cAck
  6661 ;;		_I2C_Start
  6662 ;;		_I2C_ReStart
  6663 ;;		_I2C_Stop
  6664 ;; This function uses a non-reentrant model
  6665 ;;
  6666                           
  6667                           	psect	text46
  6668  000F88                     __ptext46:
  6669                           	opt stack 0
  6670  000F88                     _i2cHighScl:
  6671                           	opt stack 27
  6672                           
  6673                           ;I2C_Soft.c: 107: TRISDbits.RD6 = 1;
  6674                           
  6675                           ;incstack = 0
  6676  000F88  8C95               	bsf	3989,6,c	;volatile
  6677                           
  6678                           ;I2C_Soft.c: 108: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6679  000F8A  0E06               	movlw	6
  6680  000F8C                     u2567:
  6681  000F8C  2EE8               	decfsz	wreg,f,c
  6682  000F8E  D7FE               	goto	u2567
  6683  000F90  D000               	nop2		;nop
  6684  000F92  0012               	return		;funcret
  6685  000F94                     __end_of_i2cHighScl:
  6686                           	opt stack 0
  6687                           tblptru	equ	0xFF8
  6688                           tblptrh	equ	0xFF7
  6689                           tblptrl	equ	0xFF6
  6690                           tablat	equ	0xFF5
  6691                           prodh	equ	0xFF4
  6692                           prodl	equ	0xFF3
  6693                           intcon2	equ	0xFF1
  6694                           postinc0	equ	0xFEE
  6695                           wreg	equ	0xFE8
  6696                           postdec1	equ	0xFE5
  6697                           fsr1l	equ	0xFE1
  6698                           indf2	equ	0xFDF
  6699                           postinc2	equ	0xFDE
  6700                           postdec2	equ	0xFDD
  6701                           fsr2h	equ	0xFDA
  6702                           fsr2l	equ	0xFD9
  6703                           status	equ	0xFD8
  6704                           
  6705 ;; *************** function _chkisr *****************
  6706 ;; Defined at:
  6707 ;;		line 14 in file "Interrupt.c"
  6708 ;; Parameters:    Size  Location     Type
  6709 ;;		None
  6710 ;; Auto vars:     Size  Location     Type
  6711 ;;		None
  6712 ;; Return value:  Size  Location     Type
  6713 ;;		None               void
  6714 ;; Registers used:
  6715 ;;		None
  6716 ;; Tracked objects:
  6717 ;;		On entry : 0/0
  6718 ;;		On exit  : 0/0
  6719 ;;		Unchanged: 0/0
  6720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6723 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6724 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6725 ;;Total ram usage:       14 bytes
  6726 ;; Hardware stack levels used:    1
  6727 ;; This function calls:
  6728 ;;		Nothing
  6729 ;; This function is called by:
  6730 ;;		Interrupt level 2
  6731 ;; This function uses a non-reentrant model
  6732 ;;
  6733                           
  6734                           	psect	intcode
  6735  000008                     __pintcode:
  6736                           	opt stack 0
  6737  000008                     _chkisr:
  6738                           	opt stack 21
  6739                           
  6740                           ;incstack = 0
  6741  000008  CFFA F001          	movff	pclath,??_chkisr
  6742  00000C  CFFB F002          	movff	pclatu,??_chkisr+1
  6743  000010  CFE9 F003          	movff	fsr0l,??_chkisr+2
  6744  000014  ED97  F004         	call	int_func,f	;refresh shadow registers
  6745                           pclatu	equ	0xFFB
  6746                           pclath	equ	0xFFA
  6747                           tblptru	equ	0xFF8
  6748                           tblptrh	equ	0xFF7
  6749                           tblptrl	equ	0xFF6
  6750                           tablat	equ	0xFF5
  6751                           prodh	equ	0xFF4
  6752                           prodl	equ	0xFF3
  6753                           intcon2	equ	0xFF1
  6754                           postinc0	equ	0xFEE
  6755                           fsr0l	equ	0xFE9
  6756                           wreg	equ	0xFE8
  6757                           postdec1	equ	0xFE5
  6758                           fsr1l	equ	0xFE1
  6759                           indf2	equ	0xFDF
  6760                           postinc2	equ	0xFDE
  6761                           postdec2	equ	0xFDD
  6762                           fsr2h	equ	0xFDA
  6763                           fsr2l	equ	0xFD9
  6764                           status	equ	0xFD8
  6765                           
  6766                           	psect	intcode_body
  6767  00092E                     __pintcode_body:
  6768                           	opt stack 21
  6769  00092E                     int_func:
  6770                           	opt stack 21
  6771  00092E  0006               	pop		; remove dummy address from shadow register refresh
  6772  000930  CFEA F004          	movff	fsr0h,??_chkisr+3
  6773  000934  CFE1 F005          	movff	fsr1l,??_chkisr+4
  6774  000938  CFE2 F006          	movff	fsr1h,??_chkisr+5
  6775  00093C  CFD9 F007          	movff	fsr2l,??_chkisr+6
  6776  000940  CFDA F008          	movff	fsr2h,??_chkisr+7
  6777  000944  CFF3 F009          	movff	prodl,??_chkisr+8
  6778  000948  CFF4 F00A          	movff	prodh,??_chkisr+9
  6779  00094C  CFF6 F00B          	movff	tblptrl,??_chkisr+10
  6780  000950  CFF7 F00C          	movff	tblptrh,??_chkisr+11
  6781  000954  CFF8 F00D          	movff	tblptru,??_chkisr+12
  6782  000958  CFF5 F00E          	movff	tablat,??_chkisr+13
  6783  00095C  C00E  FFF5         	movff	??_chkisr+13,tablat
  6784  000960  C00D  FFF8         	movff	??_chkisr+12,tblptru
  6785  000964  C00C  FFF7         	movff	??_chkisr+11,tblptrh
  6786  000968  C00B  FFF6         	movff	??_chkisr+10,tblptrl
  6787  00096C  C00A  FFF4         	movff	??_chkisr+9,prodh
  6788  000970  C009  FFF3         	movff	??_chkisr+8,prodl
  6789  000974  C008  FFDA         	movff	??_chkisr+7,fsr2h
  6790  000978  C007  FFD9         	movff	??_chkisr+6,fsr2l
  6791  00097C  C006  FFE2         	movff	??_chkisr+5,fsr1h
  6792  000980  C005  FFE1         	movff	??_chkisr+4,fsr1l
  6793  000984  C004  FFEA         	movff	??_chkisr+3,fsr0h
  6794  000988  C003  FFE9         	movff	??_chkisr+2,fsr0l
  6795  00098C  C002  FFFB         	movff	??_chkisr+1,pclatu
  6796  000990  C001  FFFA         	movff	??_chkisr,pclath
  6797  000994  0011               	retfie		f
  6798  000996                     __end_of_chkisr:
  6799                           	opt stack 0
  6800                           pclatu	equ	0xFFB
  6801                           pclath	equ	0xFFA
  6802                           tblptru	equ	0xFF8
  6803                           tblptrh	equ	0xFF7
  6804                           tblptrl	equ	0xFF6
  6805                           tablat	equ	0xFF5
  6806                           prodh	equ	0xFF4
  6807                           prodl	equ	0xFF3
  6808                           intcon2	equ	0xFF1
  6809                           postinc0	equ	0xFEE
  6810                           fsr0h	equ	0xFEA
  6811                           fsr0l	equ	0xFE9
  6812                           wreg	equ	0xFE8
  6813                           postdec1	equ	0xFE5
  6814                           fsr1h	equ	0xFE2
  6815                           fsr1l	equ	0xFE1
  6816                           indf2	equ	0xFDF
  6817                           postinc2	equ	0xFDE
  6818                           postdec2	equ	0xFDD
  6819                           fsr2h	equ	0xFDA
  6820                           fsr2l	equ	0xFD9
  6821                           status	equ	0xFD8
  6822                           pclatu	equ	0xFFB
  6823                           pclath	equ	0xFFA
  6824                           tblptru	equ	0xFF8
  6825                           tblptrh	equ	0xFF7
  6826                           tblptrl	equ	0xFF6
  6827                           tablat	equ	0xFF5
  6828                           prodh	equ	0xFF4
  6829                           prodl	equ	0xFF3
  6830                           intcon2	equ	0xFF1
  6831                           postinc0	equ	0xFEE
  6832                           fsr0h	equ	0xFEA
  6833                           fsr0l	equ	0xFE9
  6834                           wreg	equ	0xFE8
  6835                           postdec1	equ	0xFE5
  6836                           fsr1h	equ	0xFE2
  6837                           fsr1l	equ	0xFE1
  6838                           indf2	equ	0xFDF
  6839                           postinc2	equ	0xFDE
  6840                           postdec2	equ	0xFDD
  6841                           fsr2h	equ	0xFDA
  6842                           fsr2l	equ	0xFD9
  6843                           status	equ	0xFD8
  6844                           
  6845                           	psect	rparam
  6846  0000                     pclatu	equ	0xFFB
  6847                           pclath	equ	0xFFA
  6848                           tblptru	equ	0xFF8
  6849                           tblptrh	equ	0xFF7
  6850                           tblptrl	equ	0xFF6
  6851                           tablat	equ	0xFF5
  6852                           prodh	equ	0xFF4
  6853                           prodl	equ	0xFF3
  6854                           intcon2	equ	0xFF1
  6855                           postinc0	equ	0xFEE
  6856                           fsr0h	equ	0xFEA
  6857                           fsr0l	equ	0xFE9
  6858                           wreg	equ	0xFE8
  6859                           postdec1	equ	0xFE5
  6860                           fsr1h	equ	0xFE2
  6861                           fsr1l	equ	0xFE1
  6862                           indf2	equ	0xFDF
  6863                           postinc2	equ	0xFDE
  6864                           postdec2	equ	0xFDD
  6865                           fsr2h	equ	0xFDA
  6866                           fsr2l	equ	0xFD9
  6867                           status	equ	0xFD8


Data Sizes:
    Strings     71
    Constant    485
    Data        149
    BSS         72
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     66     109
    BANK0           128      7     101
    BANK1           256      0      84
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_3(CODE[8]), STR_2(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 43
		 -> STR_1(CODE[43]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _printf->___lwmod
    ___lwmod->___lwdiv
    _init_UART->_OpenUSART
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    None.

Critical Paths under _main in BANK0

    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   22579
                                             64 COMRAM     2     2      0
                   _DS1621_Read_Temp
                            _Do_Init
                       _Wait_One_Sec
                            ___awdiv
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              23    17      6     987
                                             26 COMRAM    14     8      6
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     265
                                             21 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     268
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     406
                                             14 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Wait_One_Sec                                         2     2      0      30
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0   20816
                        _DS1621_Init
                           _I2C_Init
                  _Initialize_Screen
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     273
                                             14 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _Initialize_Screen                                    0     0      0   20056
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _strcpy                                               6     2      4     287
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _fillScreen                                           2     0      2    2192
                                             33 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (4) _fillRectangle                                       12     7      5    2096
                                             21 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawtext                                            17     9      8   12071
                                             54 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2     195
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (4) _drawChar                                            11     4      7   10514
                                             43 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (5) _fillRect                                            11     6      5    3876
                                             32 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (6) _drawFastVLine                                       11     7      4    3102
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _drawPixel                                            4     1      3    4207
                                             21 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _setAddrWindow                                        4     1      3    1034
                                             17 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _TFT_GreenTab_Initialize                              0     0      0    3844
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd3                                                0     0      0    1792
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd1                                                0     0      0    1792
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _write_data                                           1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _write_command                                        1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _spiwrite                                             2     2      0      34
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _LCD_Reset                                            0     0      0    1662
                           _delay_ms
 ---------------------------------------------------------------------------------
 (5) _delay_ms                                             6     4      2    1662
                                             20 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     622
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      53
                                             14 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     434
                                             19 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     232
                                             16 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     157
                                             16 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     241
                                             17 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0      60
                                             14 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0      90
                                             14 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _chkisr                                             14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _Initialize_Screen
       _LCD_Reset
         _delay_ms
           ___wmul
       _TFT_GreenTab_Initialize
         _Rcmd1
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd2red
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd3
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _init_UART
       _OpenUSART
   _Wait_One_Sec
   ___awdiv
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch

 _chkisr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      54       7       32.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      7      65       5       78.9%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     42      6D       1       85.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     126      34        0.0%
DATA                 0      0     126       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Nov 09 18:35:14 2022

                                _i 005D                 __size_of_I2C_Start 0012  
                      _SSPSTATbits 000FC7                 __size_of_I2C_Write 003E  
                               l35 0A90                                 l45 0F0C  
                               l95 0842                                 l89 0DE8  
                     ___awdiv@sign 0014                ___wmul@multiplicand 0011  
                              l111 0170                                l120 00C6  
                              l113 004A                                l151 0672  
                              l152 0694                                l314 0F7E  
                              l148 0696                                l149 0602  
                              l325 0E5E                                l502 02AE  
                              l442 0D86                                l530 0904  
                              l531 0906                                l532 0910  
                              l373 0C10                                l533 0912  
                              l526 08EA                                l535 092C  
                              l376 0D1C                                l538 0E3A  
                              l731 072C                                _day 0059  
             __size_of_I2C_ReStart 0016                                _dow 005A  
                              _nbr 0049                                _txt 004D  
                              wreg 000FE8                    ??_fillRectangle 001B  
                     __CFG_LVP$OFF 000000            _TFT_GreenTab_Initialize 0DEA  
                     __CFG_WDT$OFF 000000                     drawFastVLine@h 0017  
                             l1056 09E8                               l1066 0B76  
                             l1095 0CCE                               l1441 0D26  
                             l1443 0D2C                               l1435 0D14  
                   drawFastVLine@x 0020                               l1453 0D3E  
                   drawFastVLine@y 0016                               l3315 0DCA  
                             l3323 0B8A                               l1653 0BD4  
                             l1663 0BEA                               l1671 0BFA  
                             l3327 0BA6                               l3511 0676  
                             l2623 08E2                               l2615 08D0  
                             l1665 0BF2                               l1657 0BDC  
                             l3273 07CC                               l3433 0046  
                             l3425 002C                               l3521 0690  
                             l1675 0C06                               l3443 0086  
                             l3435 004E                               l3515 0680  
                             l3507 0668                               l2635 08FC  
                             l2627 08EE                               l2619 08DA  
                             l2715 09AC                               l1677 0C0C  
                             l3277 0804                               l3445 00BA  
                             l3429 0038                               l2661 0D92  
                             l2717 09B6                               l3287 082A  
                             l3463 013C                               l3455 00E8  
                             l3471 016C                               l3447 00BE  
                             l3439 0056                               l3551 043C  
                             l2663 0D9C                               l2911 06C0  
                             l2727 09DC                               l2719 09BE  
                             l2743 0B6A                               l2735 0B42  
                             l3289 0838                               l3465 0164  
                             l3457 0110                               l1785 0E44  
                             l2921 06E8                               l2905 06AE  
                             l2737 0B4C                               l3563 04AC  
                             l3555 045A                               l3539 03EC  
                             l2739 0B54                               l3477 0C9C  
                             l3565 04B4                               l1789 0E58  
                             l2917 06D6                               l2933 0712  
                             l2853 018C                               l3479 0CA2  
                             l3495 063A                               l2919 06E0  
                             l2871 01EE                               l3489 05CC  
                             l2937 0722                               l2929 0706  
                             l2857 019A                               l2849 017C  
                             l2883 0222                               l2875 01FA  
                             l2859 01C0                               l2893 0286  
                             l2869 01EA     I2C_Write_Cmd_Write_Data@Device 0013  
                             l2887 0236                               l2879 021E  
                             l2895 0292                               l2889 023C  
                             l3969 0A9E                               STR_1 FFB8  
                             STR_2 FFE3                               STR_3 FFF7  
                             u2210 05FA                               u2140 011E  
                             u2220 0630                               u2280 0416  
                             u2567 0F8C                               u1980 07FA  
                             _RBPU 007F8F                               _TRMT 007D61  
                             _main 0A98                               _font FDD3  
                             _hour 005C                   __end_of_I2C_Init 0F9E  
                 __end_of_I2C_Read 0C12                               _year 006B  
                             fsr0h 000FEA                               _txt1 0100  
                             fsr1h 000FE2                               fsr0l 000FE9  
                             fsr2h 000FDA                               fsr1l 000FE1  
                             indf2 000FDF                               fsr2l 000FD9  
                             _wrap 006D                   __end_of_I2C_Stop 0F36  
                             pclat 000FFA                 __size_of_LCD_Reset 0012  
                             prodh 000FF4                               prodl 000FF3  
                             start 0018        __size_of_I2C_Write_Cmd_Only 001A  
                  __end_of_Do_Init 0C52                    ??_drawFastVLine 001A  
                  __end_of_i2cNack 0FA8                       ___param_bank 000010  
                  drawFastVLine@hi 001E                    drawFastVLine@lo 001F  
                            ?_main 0001                    __end_of___awdiv 072E  
                  ___awdiv@divisor 0011                              _T3CON 000FB1  
                  __end_of___lwdiv 09F2                    __end_of___lwmod 0B80  
                  ___awdiv@counter 0013                              _RCSTA 000FAB  
                            _TMR3H 000FB3                              _TMR3L 000FB2  
                            _SPBRG 000FAF                              _TRISA 000F92  
                            _TRISB 000F93                              _TRISC 000F94  
                            _TRISD 000F95                              _TRISE 000F96  
                            _TXREG 000FAD                              _TXSTA 000FAC  
                            _Rcmd1 02B0                              _Rcmd3 04CA  
                       _i2cHighSda 0FBA                         _i2cHighScl 0F88  
                  __end_of_dpowers FFB8                              _color 0080  
                            _font2 FED2                              _found 005B  
                            _month 005F                              _putch 0F7A  
                __end_of_I2C_Start 0F48                  __end_of_I2C_Write 0D4C  
                   __CFG_BOREN$OFF 000000                              tablat 000FF5  
                            status 000FD8                  ?_DS1621_Read_Temp 0012  
                  write_data@data_ 0011                 ??_DS1621_Read_Temp 0014  
                  __initialization 0844                       __end_of_main 0AE6  
                     __end_of_font FED2                   __end_of_Rcmd2red 0D0E  
                           ??_main 0041                      __activetblptr 000002  
                __end_of_LCD_Reset 0F24          ??_TFT_GreenTab_Initialize 001B  
                           ?_Rcmd1 0001                             ?_Rcmd3 0001  
                        I2C_Init@c 000F                          I2C_Read@n 0010  
                           _ADCON1 000FC1                DS1621_Read_Temp@Cmd 0014  
                 ___awdiv@dividend 000F                 __size_of_i2cLowSda 000A  
               __size_of_i2cLowScl 0008                             ?_putch 0001  
                        ??_Do_Init 0041                             _OSCCON 000FD3  
                           _SPBRGH 000FB0                             _SSPBUF 000FC9  
                        ??_i2cNack 000F                   __end_of_delay_ms 0A98  
                           _i2cAck 0F48                         _TempSecond 0051  
                 __end_of_fillRect 0BCA                   __end_of_drawChar 0172  
               __size_of_OpenUSART 0070                             ___wmul 0E14  
                        ??___awdiv 0013                   __end_of_drawtext 04CA  
                           _chkisr 0008                          ??___lwdiv 0013  
                           _array1 00AA                          ??___lwmod 001A  
                           _buffer 00BF                             _nec_ok 004B  
                           clear_0 084A                             clear_1 0856  
                 ___awdiv@quotient 0015                             _minute 005E  
                           _second 0061                             _printf 0172  
                     drawtext@size 003E                             _strcpy 0D88  
                           _strlen 0C92                       __pdataCOMRAM 006C  
                        ?_I2C_Init 000F                          ?_I2C_Read 0001  
                        ?_I2C_Stop 0001                       __mediumconst FDD2  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8   __end_of_I2C_Write_Cmd_Write_Data 0E80  
                      ?_i2cHighSda 0001                        ?_i2cHighScl 0001  
                           putch@c 000F                   __end_of_spiwrite 0F12  
                       __accesstop 0080            __end_of__initialization 08B4  
               _setup_alarm_minute 0063                 _setup_alarm_second 0064  
                    ___rparam_used 000001                      __end_of_Rcmd1 03C0  
                    __end_of_Rcmd3 05BC                     __pcstackCOMRAM 0001  
                     __pidataBANK0 0C52                       __pidataBANK1 09F2  
                    __end_of_font2 FFAE                  __end_of_i2cLowSda 0FB2  
                __end_of_i2cLowScl 0FBA                      __end_of_putch 0F88  
                   drawPixel@color 0017             __size_of_write_command 0010  
                       ??_I2C_Init 0013                         ??_I2C_Read 000F  
                     _alarm_minute 0055                       _alarm_second 0056  
                       ??_I2C_Stop 000F                            ??_Rcmd1 001B  
                          ??_Rcmd3 001B                 __size_of_drawPixel 0030  
                __end_of_OpenUSART 092E                            ??_putch 000F  
                       __pbssBANK0 00BF                   _setup_alarm_hour 0062  
                    ??_DS1621_Init 0014                          ?_Rcmd2red 0001  
               __size_of_init_UART 0014                    spiwrite@spidata 0010  
                       _alarm_date 0053                         _alarm_hour 0054  
                    ?_Wait_One_Sec 0001                            ?_i2cAck 0001  
               __CFG_CCP2MX$PORTBE 000000                     I2C_Read@inByte 0011  
                          ?___wmul 000F                __size_of_i2cHighSda 0008  
              __size_of_i2cHighScl 000C                            ?_chkisr 0001  
           __size_of_setAddrWindow 004E   I2C_Write_Cmd_Write_Data@Data_Out 0012  
                    ??_I2C_ReStart 000F                         I2C_Write@n 0010  
                          ?_printf 001B                            ?_strcpy 000F  
                          ?_strlen 000F                         _fillScreen 0E9E  
                        ?_delay_ms 0015                          ?_fillRect 0021  
                        ?_drawChar 002C                            _SSPCON1 000FC6  
                          _SSPSTAT 000FC7              __end_of_fillRectangle 0698  
                        ?_drawtext 0037                            _Do_Init 0C12  
         _I2C_Write_Cmd_Write_Data 0E60         __end_of_I2C_Write_Cmd_Only 0ED4  
                       ??_Rcmd2red 0012             DS1621_Read_Temp@Device 0016  
                   ??_Wait_One_Sec 000F                            _i2cNack 0F9E  
                    _write_command 0F6A                          _I2C_Start 0F36  
                        _I2C_Write 0D0E                    __size_of_i2cAck 0012  
                          __Hparam 0000                            __Lparam 0000  
              __end_of_DS1621_Init 0E9E                  __end_of_drawPixel 0DEA  
            __end_of_drawFastVLine 0844                            ___awdiv 0698  
                  __size_of___wmul 0028                            ___lwdiv 0996  
                          ___lwmod 0B34                    __size_of_chkisr 098E  
                        ?_spiwrite 0001                            __pcinit 0844  
                          __ramtop 1000                            __ptext0 0A98  
                          __ptext1 0172                            __ptext2 0F7A  
                          __ptext3 0B34                            __ptext4 0996  
                          __ptext5 0698          __size_of_DS1621_Read_Temp 003C  
                          __ptext6 0E3C                            __ptext7 0C12  
                          __ptext8 0EEA                            __ptext9 08BE  
                  __size_of_printf 013E                  __end_of_init_UART 0EFE  
                  __size_of_strcpy 0032                    __size_of_strlen 003E  
                          _dpowers FFAE                          _T3CONbits 000FB1  
                       ??_delay_ms 0017                __end_of_I2C_ReStart 0EEA  
                    drawtext@_text 0038                      drawtext@color 003A  
                       ??_fillRect 0026                         ??_drawChar 0033  
                        _LCD_Reset 0F12                      _setAddrWindow 0AE6  
                   __pintcode_body 092E                      Wait_One_Sec@i 000F  
                       delay_ms@ms 0015               end_of_initialization 08B4  
                       ??_drawtext 003F                     ?_write_command 0001  
                    __Lmediumconst FDD2                            int_func 092E  
                       ?_I2C_Start 0001                         ?_I2C_Write 0001  
                       _tempSecond 006C                          _RCSTAbits 000FAB  
                          printf@c 0028                            printf@f 001B  
                          postdec1 000FE5                            postdec2 000FDD  
                          postinc0 000FEE                            postinc2 000FDE  
                       ??_spiwrite 000F                            strlen@s 000F  
      I2C_Write_Cmd_Write_Data@Cmd 0011                   drawtext@cursor_x 00E4  
                 drawtext@cursor_y 00E3                          _PORTCbits 000F82  
                        _PORTDbits 000F83                   I2C_Write@outByte 000F  
                      ?_fillScreen 0022                         _setup_hour 0066  
                       _setup_year 006A                         drawChar@bg 0030  
                        _TRISCbits 000F94                          _TRISDbits 000F95  
                     ??_i2cHighSda 000F                       ??_i2cHighScl 000F  
                __size_of_I2C_Init 000A                  __size_of_I2C_Read 0048  
                __size_of_I2C_Stop 0012                     ?_setAddrWindow 0012  
                       ?_LCD_Reset 0001                   drawtext@textsize 00DF  
                       drawPixel@x 0019                         drawPixel@y 0016  
                      _DS1621_Init 0E80                          _TXSTAbits 000FAC  
                   __end_of_i2cAck 0F5A           DS1621_Read_Temp@Data_Ret 0015  
               __end_of_i2cHighSda 0FC2                 __end_of_i2cHighScl 0F94  
                   __end_of___wmul 0E3C                      delay_ms@count 0019  
                       _write_data 0F5A                      __pidataCOMRAM 0FC2  
                   __end_of_chkisr 0996           ?_TFT_GreenTab_Initialize 0001  
                      _I2C_ReStart 0ED4                         drawtext@bg 003C  
                        _Nec_code1 004F                          _i2cLowSda 0FA8  
                        _i2cLowScl 0FB2               __end_of_Wait_One_Sec 0E60  
                   __end_of_printf 02B0                     __end_of_strcpy 0DBA  
                   __end_of_strlen 0CD0                          _Nec_state 0050  
              start_initialization 0844                    ??_write_command 0011  
                        _OpenUSART 08BE                   __CFG_OSC$INTIO67 000000  
                      ??_I2C_Start 000F                        ??_I2C_Write 000F  
                         ??_i2cAck 000F                  __size_of_Rcmd2red 003E  
              __size_of_fillScreen 001C                           ??___wmul 0013  
                         ??_chkisr 0001                        __pdataBANK0 0080  
                      __pdataBANK1 0100                    setAddrWindow@x0 0015  
                  setAddrWindow@x1 0013                    setAddrWindow@y0 0012  
                  setAddrWindow@y1 0014                           ??_printf 0021  
                 _DS1621_Read_Temp 0D4C                           ??_strcpy 0013  
                         ??_strlen 0011                         ?_i2cLowSda 0001  
                       ?_i2cLowScl 0001                        __pbssCOMRAM 0043  
       ??_I2C_Write_Cmd_Write_Data 0013                    ??_setAddrWindow 0015  
                    __pcstackBANK0 00DE                        ??_LCD_Reset 001B  
                __size_of_delay_ms 0052                           ?_Do_Init 0001  
                __size_of_fillRect 004A                  __size_of_drawChar 0156  
                       ?_OpenUSART 000F                           ?_i2cNack 0001  
                __size_of_drawtext 010A                   ___lwdiv@dividend 000F  
                      I2C_Read@ack 000F                          _bit_count 0057  
                        __pintcode 0008    __end_of_TFT_GreenTab_Initialize 0E14  
                    __pmediumconst FDD2                           ?___awdiv 000F  
                        __tft_type 0052                           ?___lwdiv 000F  
               _I2C_Write_Cmd_Only 0EBA                           ?___lwmod 0016  
               drawFastVLine@color 0018                        ?_write_data 0001  
                        _drawPixel 0DBA                  __size_of_spiwrite 0014  
              ?_I2C_Write_Cmd_Only 0011                           _I2C_Init 0F94  
                         _I2C_Read 0BCA                           _I2C_Stop 0F24  
                _Initialize_Screen 072E                     __size_of_Rcmd1 0110  
                   __size_of_Rcmd3 00F2                          _init_UART 0EEA  
         I2C_Write_Cmd_Only@Device 0012                 ?_Initialize_Screen 0001  
                 ___lwdiv@quotient 0013                     __size_of_putch 000E  
                   ___wmul@product 0013                ??_Initialize_Screen 0041  
             ??_I2C_Write_Cmd_Only 0012                           _PIE1bits 000F9D  
                         _PIR1bits 000F9E                           _PIR2bits 000FA1  
            __size_of_Wait_One_Sec 0024                          _setup_day 0065  
                DS1621_Init@Device 0014                          fillRect@h 0023  
                        fillRect@i 002A                          fillRect@w 0022  
                        fillRect@x 0029                          fillRect@y 0021  
                        drawChar@c 002D                          drawChar@i 0036  
                        drawChar@j 0035                          drawChar@x 0034  
                        drawChar@y 002C                         ?_drawPixel 0016  
           __size_of_fillRectangle 00DC                  ___wmul@multiplier 000F  
        __end_of_Initialize_Screen 07BC                        ??_i2cLowSda 000F  
                      ??_i2cLowScl 000F                       ??_fillScreen 0024  
                       printf@flag 0024                         printf@prec 0025  
                        main@tempC 0042                          main@tempF 0041  
                       ?_init_UART 0001                          copy_data0 0870  
                        copy_data1 0890                          drawtext@i 00E1  
           __size_of_drawFastVLine 0088                          drawtext@x 00DE  
                        drawtext@y 0037                           _Nec_code 0043  
                write_command@cmd_ 0011                        ??_OpenUSART 0011  
                     ?_DS1621_Init 0001                           _Rcmd2red 0CD0  
                 __size_of_Do_Init 0040                __size_of_write_data 0010  
                  OpenUSART@config 0011                       _Time_Elapsed 0047  
                 __size_of_i2cNack 000A                       _Wait_One_Sec 0E3C  
                         __Hrparam 0000                 __end_of_fillScreen 0EBA  
                         __Lrparam 0000                   __size_of___awdiv 0096  
                 __size_of___lwdiv 005C                   __size_of___lwmod 004C  
                     ?_I2C_ReStart 0001                           _delay_ms 0A46  
                  ___lwdiv@divisor 0011                    ___lwdiv@counter 0015  
                         __ptext10 072E                           __ptext11 0D88  
                         __ptext20 0AE6                           __ptext12 0E9E  
                         __ptext21 0DEA                           __ptext13 05BC  
                         __ptext30 0E14                           __ptext22 04CA  
                         __ptext14 03C0                           __ptext31 0F94  
                         __ptext23 0CD0                           __ptext15 0C92  
                         __ptext40 0F9E                           __ptext32 0E80  
                         __ptext24 02B0                           __ptext16 001C  
                         __ptext41 0F48                           __ptext33 0E60  
                         __ptext25 0F5A                           __ptext17 0B80  
                         __ptext42 0ED4                           __ptext34 0EBA  
                         __ptext26 0F6A                           __ptext18 07BC  
                         __ptext43 0FA8                           __ptext35 0D4C  
                         __ptext27 0EFE                           __ptext19 0DBA  
                         __ptext44 0FB2                           __ptext36 0D0E  
                         __ptext28 0F12                           __ptext45 0FBA  
                         __ptext37 0F24                           __ptext29 0A46  
                         __ptext46 0F88                           __ptext38 0F36  
                         __ptext39 0BCA                           _fillRect 0B80  
                         _drawChar 001C   __size_of_TFT_GreenTab_Initialize 002A  
                         _colstart 0058                           _drawtext 03C0  
                       strcpy@from 0011                      _fillRectangle 05BC  
         __end_of_DS1621_Read_Temp 0D88                      __size_of_main 004E  
                  fillRectangle@hi 001F                    fillRectangle@lo 0020  
                    _drawFastVLine 07BC                           _spiwrite 0EFE  
                        printf@val 0026                        ??_drawPixel 0019  
                         _rowstart 0060         __size_of_Initialize_Screen 008E  
                   OpenUSART@spbrg 000F                        ??_init_UART 0012  
                        spiwrite@x 000F                           intlevel2 0000  
                   ?_fillRectangle 0016                   ___lwmod@dividend 0016  
            __end_of_write_command 0F7A                    fillScreen@color 0022  
                   fillRectangle@h 0018                     fillRectangle@w 0017  
                   fillRectangle@x 0021                     fillRectangle@y 0016  
                   ?_drawFastVLine 0016                           printf@ap 0022  
                     ??_write_data 0011                      fillRect@color 0024  
                  ___lwmod@divisor 0018                           strcpy@cp 0013  
                         strlen@cp 0013                           strcpy@to 000F  
            I2C_Write_Cmd_Only@Cmd 0011                    ___lwmod@counter 001A  
                     _setup_minute 0067                       _setup_second 0069  
            __end_of_setAddrWindow 0B34                 fillRectangle@color 0019  
                    drawChar@color 002E                        _setup_month 0068  
               __end_of_write_data 0F6A                       drawChar@line 0033  
                     drawChar@size 0032  __size_of_I2C_Write_Cmd_Write_Data 0020  
             __size_of_DS1621_Init 001E          ?_I2C_Write_Cmd_Write_Data 0011  
