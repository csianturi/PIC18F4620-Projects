

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Nov 09 19:16:26 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           	psect	idataCOMRAM
    71  00127C                     __pidataCOMRAM:
    72                           	opt stack 0
    73                           
    74                           ;initializer for _tempSecond
    75  00127C  FF                 	db	255
    76                           
    77                           ;initializer for _wrap
    78  00127D  01                 	db	1
    79                           
    80                           	psect	idataBANK0
    81  000F0E                     __pidataBANK0:
    82                           	opt stack 0
    83                           
    84                           ;initializer for _color
    85  000F0E  F800               	dw	63488
    86  000F10  00                 	db	0
    87  000F11  00                 	db	0
    88  000F12  00                 	db	0
    89  000F13  00                 	db	0
    90  000F14  00                 	db	0
    91  000F15  00                 	db	0
    92  000F16  00                 	db	0
    93  000F17  00                 	db	0
    94  000F18  00                 	db	0
    95  000F19  00                 	db	0
    96  000F1A  00                 	db	0
    97  000F1B  00                 	db	0
    98  000F1C  00                 	db	0
    99  000F1D  00                 	db	0
   100  000F1E  00                 	db	0
   101  000F1F  00                 	db	0
   102  000F20  00                 	db	0
   103  000F21  00                 	db	0
   104  000F22  00                 	db	0
   105  000F23  00                 	db	0
   106  000F24  00                 	db	0
   107  000F25  00                 	db	0
   108  000F26  00                 	db	0
   109  000F27  00                 	db	0
   110  000F28  00                 	db	0
   111  000F29  00                 	db	0
   112  000F2A  00                 	db	0
   113  000F2B  00                 	db	0
   114  000F2C  00                 	db	0
   115  000F2D  00                 	db	0
   116  000F2E  00                 	db	0
   117  000F2F  00                 	db	0
   118  000F30  00                 	db	0
   119  000F31  00                 	db	0
   120  000F32  00                 	db	0
   121  000F33  00                 	db	0
   122  000F34  00                 	db	0
   123  000F35  00                 	db	0
   124  000F36  00                 	db	0
   125  000F37  00                 	db	0
   126                           
   127                           ;initializer for _array1
   128  000F38  A2                 	db	162
   129  000F39  00                 	db	0
   130  000F3A  00                 	db	0
   131  000F3B  00                 	db	0
   132  000F3C  00                 	db	0
   133  000F3D  00                 	db	0
   134  000F3E  00                 	db	0
   135  000F3F  00                 	db	0
   136  000F40  00                 	db	0
   137  000F41  00                 	db	0
   138  000F42  00                 	db	0
   139  000F43  00                 	db	0
   140  000F44  00                 	db	0
   141  000F45  00                 	db	0
   142  000F46  00                 	db	0
   143  000F47  00                 	db	0
   144  000F48  00                 	db	0
   145  000F49  00                 	db	0
   146  000F4A  00                 	db	0
   147  000F4B  00                 	db	0
   148  000F4C  00                 	db	0
   149                           
   150                           	psect	idataBANK1
   151  000CFC                     __pidataBANK1:
   152                           	opt stack 0
   153                           
   154                           ;initializer for _txt1
   155  000CFC  43                 	db	67
   156  000CFD  48                 	db	72
   157  000CFE  2D                 	db	45
   158  000CFF  00                 	db	0
   159  000D00  00                 	db	0
   160  000D01  00                 	db	0
   161  000D02  00                 	db	0
   162  000D03  00                 	db	0
   163  000D04  00                 	db	0
   164  000D05  00                 	db	0
   165  000D06  00                 	db	0
   166  000D07  00                 	db	0
   167  000D08  00                 	db	0
   168  000D09  00                 	db	0
   169  000D0A  00                 	db	0
   170  000D0B  00                 	db	0
   171  000D0C  00                 	db	0
   172  000D0D  00                 	db	0
   173  000D0E  00                 	db	0
   174  000D0F  00                 	db	0
   175  000D10  00                 	db	0
   176  000D11  00                 	db	0
   177  000D12  00                 	db	0
   178  000D13  00                 	db	0
   179  000D14  00                 	db	0
   180  000D15  00                 	db	0
   181  000D16  00                 	db	0
   182  000D17  00                 	db	0
   183  000D18  00                 	db	0
   184  000D19  00                 	db	0
   185  000D1A  00                 	db	0
   186  000D1B  00                 	db	0
   187  000D1C  00                 	db	0
   188  000D1D  00                 	db	0
   189  000D1E  00                 	db	0
   190  000D1F  00                 	db	0
   191  000D20  00                 	db	0
   192  000D21  00                 	db	0
   193  000D22  00                 	db	0
   194  000D23  00                 	db	0
   195  000D24  00                 	db	0
   196  000D25  00                 	db	0
   197  000D26  00                 	db	0
   198  000D27  00                 	db	0
   199  000D28  00                 	db	0
   200  000D29  00                 	db	0
   201  000D2A  00                 	db	0
   202  000D2B  00                 	db	0
   203  000D2C  00                 	db	0
   204  000D2D  00                 	db	0
   205  000D2E  00                 	db	0
   206  000D2F  00                 	db	0
   207  000D30  00                 	db	0
   208  000D31  00                 	db	0
   209  000D32  00                 	db	0
   210  000D33  00                 	db	0
   211  000D34  00                 	db	0
   212  000D35  00                 	db	0
   213  000D36  00                 	db	0
   214  000D37  00                 	db	0
   215  000D38  00                 	db	0
   216  000D39  00                 	db	0
   217  000D3A  00                 	db	0
   218  000D3B  00                 	db	0
   219  000D3C  00                 	db	0
   220  000D3D  00                 	db	0
   221  000D3E  00                 	db	0
   222  000D3F  00                 	db	0
   223  000D40  00                 	db	0
   224  000D41  00                 	db	0
   225  000D42  00                 	db	0
   226  000D43  00                 	db	0
   227  000D44  00                 	db	0
   228  000D45  00                 	db	0
   229  000D46  00                 	db	0
   230  000D47  00                 	db	0
   231  000D48  00                 	db	0
   232  000D49  00                 	db	0
   233  000D4A  00                 	db	0
   234  000D4B  00                 	db	0
   235  000D4C  00                 	db	0
   236  000D4D  00                 	db	0
   237  000D4E  00                 	db	0
   238  000D4F  00                 	db	0
   239                           
   240                           	psect	mediumconst
   241  00FD9A                     __pmediumconst:
   242                           	opt stack 0
   243  00FD9A  00                 	db	0
   244  00FD9B                     _font:
   245                           	opt stack 0
   246  00FD9B  00                 	db	0
   247  00FD9C  00                 	db	0
   248  00FD9D  00                 	db	0
   249  00FD9E  00                 	db	0
   250  00FD9F  00                 	db	0
   251  00FDA0  00                 	db	0
   252  00FDA1  00                 	db	0
   253  00FDA2  5F                 	db	95
   254  00FDA3  00                 	db	0
   255  00FDA4  00                 	db	0
   256  00FDA5  00                 	db	0
   257  00FDA6  07                 	db	7
   258  00FDA7  00                 	db	0
   259  00FDA8  07                 	db	7
   260  00FDA9  00                 	db	0
   261  00FDAA  14                 	db	20
   262  00FDAB  7F                 	db	127
   263  00FDAC  14                 	db	20
   264  00FDAD  7F                 	db	127
   265  00FDAE  14                 	db	20
   266  00FDAF  24                 	db	36
   267  00FDB0  2A                 	db	42
   268  00FDB1  7F                 	db	127
   269  00FDB2  2A                 	db	42
   270  00FDB3  12                 	db	18
   271  00FDB4  23                 	db	35
   272  00FDB5  13                 	db	19
   273  00FDB6  08                 	db	8
   274  00FDB7  64                 	db	100
   275  00FDB8  62                 	db	98
   276  00FDB9  36                 	db	54
   277  00FDBA  49                 	db	73
   278  00FDBB  56                 	db	86
   279  00FDBC  20                 	db	32
   280  00FDBD  50                 	db	80
   281  00FDBE  00                 	db	0
   282  00FDBF  08                 	db	8
   283  00FDC0  07                 	db	7
   284  00FDC1  03                 	db	3
   285  00FDC2  00                 	db	0
   286  00FDC3  00                 	db	0
   287  00FDC4  1C                 	db	28
   288  00FDC5  22                 	db	34
   289  00FDC6  41                 	db	65
   290  00FDC7  00                 	db	0
   291  00FDC8  00                 	db	0
   292  00FDC9  41                 	db	65
   293  00FDCA  22                 	db	34
   294  00FDCB  1C                 	db	28
   295  00FDCC  00                 	db	0
   296  00FDCD  2A                 	db	42
   297  00FDCE  1C                 	db	28
   298  00FDCF  7F                 	db	127
   299  00FDD0  1C                 	db	28
   300  00FDD1  2A                 	db	42
   301  00FDD2  08                 	db	8
   302  00FDD3  08                 	db	8
   303  00FDD4  3E                 	db	62
   304  00FDD5  08                 	db	8
   305  00FDD6  08                 	db	8
   306  00FDD7  00                 	db	0
   307  00FDD8  80                 	db	128
   308  00FDD9  70                 	db	112
   309  00FDDA  30                 	db	48
   310  00FDDB  00                 	db	0
   311  00FDDC  08                 	db	8
   312  00FDDD  08                 	db	8
   313  00FDDE  08                 	db	8
   314  00FDDF  08                 	db	8
   315  00FDE0  08                 	db	8
   316  00FDE1  00                 	db	0
   317  00FDE2  00                 	db	0
   318  00FDE3  60                 	db	96
   319  00FDE4  60                 	db	96
   320  00FDE5  00                 	db	0
   321  00FDE6  20                 	db	32
   322  00FDE7  10                 	db	16
   323  00FDE8  08                 	db	8
   324  00FDE9  04                 	db	4
   325  00FDEA  02                 	db	2
   326  00FDEB  3E                 	db	62
   327  00FDEC  51                 	db	81
   328  00FDED  49                 	db	73
   329  00FDEE  45                 	db	69
   330  00FDEF  3E                 	db	62
   331  00FDF0  00                 	db	0
   332  00FDF1  42                 	db	66
   333  00FDF2  7F                 	db	127
   334  00FDF3  40                 	db	64
   335  00FDF4  00                 	db	0
   336  00FDF5  72                 	db	114
   337  00FDF6  49                 	db	73
   338  00FDF7  49                 	db	73
   339  00FDF8  49                 	db	73
   340  00FDF9  46                 	db	70
   341  00FDFA  21                 	db	33
   342  00FDFB  41                 	db	65
   343  00FDFC  49                 	db	73
   344  00FDFD  4D                 	db	77
   345  00FDFE  33                 	db	51
   346  00FDFF  18                 	db	24
   347  00FE00  14                 	db	20
   348  00FE01  12                 	db	18
   349  00FE02  7F                 	db	127
   350  00FE03  10                 	db	16
   351  00FE04  27                 	db	39
   352  00FE05  45                 	db	69
   353  00FE06  45                 	db	69
   354  00FE07  45                 	db	69
   355  00FE08  39                 	db	57
   356  00FE09  3C                 	db	60
   357  00FE0A  4A                 	db	74
   358  00FE0B  49                 	db	73
   359  00FE0C  49                 	db	73
   360  00FE0D  31                 	db	49
   361  00FE0E  41                 	db	65
   362  00FE0F  21                 	db	33
   363  00FE10  11                 	db	17
   364  00FE11  09                 	db	9
   365  00FE12  07                 	db	7
   366  00FE13  36                 	db	54
   367  00FE14  49                 	db	73
   368  00FE15  49                 	db	73
   369  00FE16  49                 	db	73
   370  00FE17  36                 	db	54
   371  00FE18  46                 	db	70
   372  00FE19  49                 	db	73
   373  00FE1A  49                 	db	73
   374  00FE1B  29                 	db	41
   375  00FE1C  1E                 	db	30
   376  00FE1D  00                 	db	0
   377  00FE1E  00                 	db	0
   378  00FE1F  14                 	db	20
   379  00FE20  00                 	db	0
   380  00FE21  00                 	db	0
   381  00FE22  00                 	db	0
   382  00FE23  40                 	db	64
   383  00FE24  34                 	db	52
   384  00FE25  00                 	db	0
   385  00FE26  00                 	db	0
   386  00FE27  00                 	db	0
   387  00FE28  08                 	db	8
   388  00FE29  14                 	db	20
   389  00FE2A  22                 	db	34
   390  00FE2B  41                 	db	65
   391  00FE2C  14                 	db	20
   392  00FE2D  14                 	db	20
   393  00FE2E  14                 	db	20
   394  00FE2F  14                 	db	20
   395  00FE30  14                 	db	20
   396  00FE31  00                 	db	0
   397  00FE32  41                 	db	65
   398  00FE33  22                 	db	34
   399  00FE34  14                 	db	20
   400  00FE35  08                 	db	8
   401  00FE36  02                 	db	2
   402  00FE37  01                 	db	1
   403  00FE38  59                 	db	89
   404  00FE39  09                 	db	9
   405  00FE3A  06                 	db	6
   406  00FE3B  3E                 	db	62
   407  00FE3C  41                 	db	65
   408  00FE3D  5D                 	db	93
   409  00FE3E  59                 	db	89
   410  00FE3F  4E                 	db	78
   411  00FE40  7C                 	db	124
   412  00FE41  12                 	db	18
   413  00FE42  11                 	db	17
   414  00FE43  12                 	db	18
   415  00FE44  7C                 	db	124
   416  00FE45  7F                 	db	127
   417  00FE46  49                 	db	73
   418  00FE47  49                 	db	73
   419  00FE48  49                 	db	73
   420  00FE49  36                 	db	54
   421  00FE4A  3E                 	db	62
   422  00FE4B  41                 	db	65
   423  00FE4C  41                 	db	65
   424  00FE4D  41                 	db	65
   425  00FE4E  22                 	db	34
   426  00FE4F  7F                 	db	127
   427  00FE50  41                 	db	65
   428  00FE51  41                 	db	65
   429  00FE52  41                 	db	65
   430  00FE53  3E                 	db	62
   431  00FE54  7F                 	db	127
   432  00FE55  49                 	db	73
   433  00FE56  49                 	db	73
   434  00FE57  49                 	db	73
   435  00FE58  41                 	db	65
   436  00FE59  7F                 	db	127
   437  00FE5A  09                 	db	9
   438  00FE5B  09                 	db	9
   439  00FE5C  09                 	db	9
   440  00FE5D  01                 	db	1
   441  00FE5E  3E                 	db	62
   442  00FE5F  41                 	db	65
   443  00FE60  41                 	db	65
   444  00FE61  51                 	db	81
   445  00FE62  73                 	db	115
   446  00FE63  7F                 	db	127
   447  00FE64  08                 	db	8
   448  00FE65  08                 	db	8
   449  00FE66  08                 	db	8
   450  00FE67  7F                 	db	127
   451  00FE68  00                 	db	0
   452  00FE69  41                 	db	65
   453  00FE6A  7F                 	db	127
   454  00FE6B  41                 	db	65
   455  00FE6C  00                 	db	0
   456  00FE6D  20                 	db	32
   457  00FE6E  40                 	db	64
   458  00FE6F  41                 	db	65
   459  00FE70  3F                 	db	63
   460  00FE71  01                 	db	1
   461  00FE72  7F                 	db	127
   462  00FE73  08                 	db	8
   463  00FE74  14                 	db	20
   464  00FE75  22                 	db	34
   465  00FE76  41                 	db	65
   466  00FE77  7F                 	db	127
   467  00FE78  40                 	db	64
   468  00FE79  40                 	db	64
   469  00FE7A  40                 	db	64
   470  00FE7B  40                 	db	64
   471  00FE7C  7F                 	db	127
   472  00FE7D  02                 	db	2
   473  00FE7E  1C                 	db	28
   474  00FE7F  02                 	db	2
   475  00FE80  7F                 	db	127
   476  00FE81  7F                 	db	127
   477  00FE82  04                 	db	4
   478  00FE83  08                 	db	8
   479  00FE84  10                 	db	16
   480  00FE85  7F                 	db	127
   481  00FE86  3E                 	db	62
   482  00FE87  41                 	db	65
   483  00FE88  41                 	db	65
   484  00FE89  41                 	db	65
   485  00FE8A  3E                 	db	62
   486  00FE8B  7F                 	db	127
   487  00FE8C  09                 	db	9
   488  00FE8D  09                 	db	9
   489  00FE8E  09                 	db	9
   490  00FE8F  06                 	db	6
   491  00FE90  3E                 	db	62
   492  00FE91  41                 	db	65
   493  00FE92  51                 	db	81
   494  00FE93  21                 	db	33
   495  00FE94  5E                 	db	94
   496  00FE95  7F                 	db	127
   497  00FE96  09                 	db	9
   498  00FE97  19                 	db	25
   499  00FE98  29                 	db	41
   500  00FE99  46                 	db	70
   501  00FE9A                     __end_of_font:
   502                           	opt stack 0
   503  00FE9A                     _font2:
   504                           	opt stack 0
   505  00FE9A  26                 	db	38
   506  00FE9B  49                 	db	73
   507  00FE9C  49                 	db	73
   508  00FE9D  49                 	db	73
   509  00FE9E  32                 	db	50
   510  00FE9F  03                 	db	3
   511  00FEA0  01                 	db	1
   512  00FEA1  7F                 	db	127
   513  00FEA2  01                 	db	1
   514  00FEA3  03                 	db	3
   515  00FEA4  3F                 	db	63
   516  00FEA5  40                 	db	64
   517  00FEA6  40                 	db	64
   518  00FEA7  40                 	db	64
   519  00FEA8  3F                 	db	63
   520  00FEA9  1F                 	db	31
   521  00FEAA  20                 	db	32
   522  00FEAB  40                 	db	64
   523  00FEAC  20                 	db	32
   524  00FEAD  1F                 	db	31
   525  00FEAE  3F                 	db	63
   526  00FEAF  40                 	db	64
   527  00FEB0  38                 	db	56
   528  00FEB1  40                 	db	64
   529  00FEB2  3F                 	db	63
   530  00FEB3  63                 	db	99
   531  00FEB4  14                 	db	20
   532  00FEB5  08                 	db	8
   533  00FEB6  14                 	db	20
   534  00FEB7  63                 	db	99
   535  00FEB8  03                 	db	3
   536  00FEB9  04                 	db	4
   537  00FEBA  78                 	db	120
   538  00FEBB  04                 	db	4
   539  00FEBC  03                 	db	3
   540  00FEBD  61                 	db	97
   541  00FEBE  59                 	db	89
   542  00FEBF  49                 	db	73
   543  00FEC0  4D                 	db	77
   544  00FEC1  43                 	db	67
   545  00FEC2  00                 	db	0
   546  00FEC3  7F                 	db	127
   547  00FEC4  41                 	db	65
   548  00FEC5  41                 	db	65
   549  00FEC6  41                 	db	65
   550  00FEC7  02                 	db	2
   551  00FEC8  04                 	db	4
   552  00FEC9  08                 	db	8
   553  00FECA  10                 	db	16
   554  00FECB  20                 	db	32
   555  00FECC  00                 	db	0
   556  00FECD  41                 	db	65
   557  00FECE  41                 	db	65
   558  00FECF  41                 	db	65
   559  00FED0  7F                 	db	127
   560  00FED1  04                 	db	4
   561  00FED2  02                 	db	2
   562  00FED3  01                 	db	1
   563  00FED4  02                 	db	2
   564  00FED5  04                 	db	4
   565  00FED6  40                 	db	64
   566  00FED7  40                 	db	64
   567  00FED8  40                 	db	64
   568  00FED9  40                 	db	64
   569  00FEDA  40                 	db	64
   570  00FEDB  00                 	db	0
   571  00FEDC  03                 	db	3
   572  00FEDD  07                 	db	7
   573  00FEDE  08                 	db	8
   574  00FEDF  00                 	db	0
   575  00FEE0  20                 	db	32
   576  00FEE1  54                 	db	84
   577  00FEE2  54                 	db	84
   578  00FEE3  78                 	db	120
   579  00FEE4  40                 	db	64
   580  00FEE5  7F                 	db	127
   581  00FEE6  28                 	db	40
   582  00FEE7  44                 	db	68
   583  00FEE8  44                 	db	68
   584  00FEE9  38                 	db	56
   585  00FEEA  38                 	db	56
   586  00FEEB  44                 	db	68
   587  00FEEC  44                 	db	68
   588  00FEED  44                 	db	68
   589  00FEEE  28                 	db	40
   590  00FEEF  38                 	db	56
   591  00FEF0  44                 	db	68
   592  00FEF1  44                 	db	68
   593  00FEF2  28                 	db	40
   594  00FEF3  7F                 	db	127
   595  00FEF4  38                 	db	56
   596  00FEF5  54                 	db	84
   597  00FEF6  54                 	db	84
   598  00FEF7  54                 	db	84
   599  00FEF8  18                 	db	24
   600  00FEF9  00                 	db	0
   601  00FEFA  08                 	db	8
   602  00FEFB  7E                 	db	126
   603  00FEFC  09                 	db	9
   604  00FEFD  02                 	db	2
   605  00FEFE  18                 	db	24
   606  00FEFF  A4                 	db	164
   607  00FF00  A4                 	db	164
   608  00FF01  9C                 	db	156
   609  00FF02  78                 	db	120
   610  00FF03  7F                 	db	127
   611  00FF04  08                 	db	8
   612  00FF05  04                 	db	4
   613  00FF06  04                 	db	4
   614  00FF07  78                 	db	120
   615  00FF08  00                 	db	0
   616  00FF09  44                 	db	68
   617  00FF0A  7D                 	db	125
   618  00FF0B  40                 	db	64
   619  00FF0C  00                 	db	0
   620  00FF0D  20                 	db	32
   621  00FF0E  40                 	db	64
   622  00FF0F  40                 	db	64
   623  00FF10  3D                 	db	61
   624  00FF11  00                 	db	0
   625  00FF12  7F                 	db	127
   626  00FF13  10                 	db	16
   627  00FF14  28                 	db	40
   628  00FF15  44                 	db	68
   629  00FF16  00                 	db	0
   630  00FF17  00                 	db	0
   631  00FF18  41                 	db	65
   632  00FF19  7F                 	db	127
   633  00FF1A  40                 	db	64
   634  00FF1B  00                 	db	0
   635  00FF1C  7C                 	db	124
   636  00FF1D  04                 	db	4
   637  00FF1E  78                 	db	120
   638  00FF1F  04                 	db	4
   639  00FF20  78                 	db	120
   640  00FF21  7C                 	db	124
   641  00FF22  08                 	db	8
   642  00FF23  04                 	db	4
   643  00FF24  04                 	db	4
   644  00FF25  78                 	db	120
   645  00FF26  38                 	db	56
   646  00FF27  44                 	db	68
   647  00FF28  44                 	db	68
   648  00FF29  44                 	db	68
   649  00FF2A  38                 	db	56
   650  00FF2B  FC                 	db	252
   651  00FF2C  18                 	db	24
   652  00FF2D  24                 	db	36
   653  00FF2E  24                 	db	36
   654  00FF2F  18                 	db	24
   655  00FF30  18                 	db	24
   656  00FF31  24                 	db	36
   657  00FF32  24                 	db	36
   658  00FF33  18                 	db	24
   659  00FF34  FC                 	db	252
   660  00FF35  7C                 	db	124
   661  00FF36  08                 	db	8
   662  00FF37  04                 	db	4
   663  00FF38  04                 	db	4
   664  00FF39  08                 	db	8
   665  00FF3A  48                 	db	72
   666  00FF3B  54                 	db	84
   667  00FF3C  54                 	db	84
   668  00FF3D  54                 	db	84
   669  00FF3E  24                 	db	36
   670  00FF3F  04                 	db	4
   671  00FF40  04                 	db	4
   672  00FF41  3F                 	db	63
   673  00FF42  44                 	db	68
   674  00FF43  24                 	db	36
   675  00FF44  3C                 	db	60
   676  00FF45  40                 	db	64
   677  00FF46  40                 	db	64
   678  00FF47  20                 	db	32
   679  00FF48  7C                 	db	124
   680  00FF49  1C                 	db	28
   681  00FF4A  20                 	db	32
   682  00FF4B  40                 	db	64
   683  00FF4C  20                 	db	32
   684  00FF4D  1C                 	db	28
   685  00FF4E  3C                 	db	60
   686  00FF4F  40                 	db	64
   687  00FF50  30                 	db	48
   688  00FF51  40                 	db	64
   689  00FF52  3C                 	db	60
   690  00FF53  44                 	db	68
   691  00FF54  28                 	db	40
   692  00FF55  10                 	db	16
   693  00FF56  28                 	db	40
   694  00FF57  44                 	db	68
   695  00FF58  4C                 	db	76
   696  00FF59  90                 	db	144
   697  00FF5A  90                 	db	144
   698  00FF5B  90                 	db	144
   699  00FF5C  7C                 	db	124
   700  00FF5D  44                 	db	68
   701  00FF5E  64                 	db	100
   702  00FF5F  54                 	db	84
   703  00FF60  4C                 	db	76
   704  00FF61  44                 	db	68
   705  00FF62  00                 	db	0
   706  00FF63  08                 	db	8
   707  00FF64  36                 	db	54
   708  00FF65  41                 	db	65
   709  00FF66  00                 	db	0
   710  00FF67  00                 	db	0
   711  00FF68  00                 	db	0
   712  00FF69  77                 	db	119
   713  00FF6A  00                 	db	0
   714  00FF6B  00                 	db	0
   715  00FF6C  00                 	db	0
   716  00FF6D  41                 	db	65
   717  00FF6E  36                 	db	54
   718  00FF6F  08                 	db	8
   719  00FF70  00                 	db	0
   720  00FF71  02                 	db	2
   721  00FF72  01                 	db	1
   722  00FF73  02                 	db	2
   723  00FF74  04                 	db	4
   724  00FF75  02                 	db	2
   725  00FF76                     __end_of_font2:
   726                           	opt stack 0
   727  00FF76                     _dpowers:
   728                           	opt stack 0
   729  00FF76  0001               	dw	1
   730  00FF78  000A               	dw	10
   731  00FF7A  0064               	dw	100
   732  00FF7C  03E8               	dw	1000
   733  00FF7E  2710               	dw	10000
   734  00FF80                     __end_of_dpowers:
   735                           	opt stack 0
   736  00FF80                     _hexpowers:
   737                           	opt stack 0
   738  00FF80  0001               	dw	1
   739  00FF82  0010               	dw	16
   740  00FF84  0100               	dw	256
   741  00FF86  1000               	dw	4096
   742  00FF88                     __end_of_hexpowers:
   743                           	opt stack 0
   744  0000                     _ADCON1	set	4033
   745  0000                     _OSCCON	set	4051
   746  0000                     _PIE1bits	set	3997
   747  0000                     _PIR1bits	set	3998
   748  0000                     _PIR2bits	set	4001
   749  0000                     _PORTCbits	set	3970
   750  0000                     _PORTDbits	set	3971
   751  0000                     _RCSTA	set	4011
   752  0000                     _RCSTAbits	set	4011
   753  0000                     _SPBRG	set	4015
   754  0000                     _SPBRGH	set	4016
   755  0000                     _SSPBUF	set	4041
   756  0000                     _SSPCON1	set	4038
   757  0000                     _SSPSTAT	set	4039
   758  0000                     _SSPSTATbits	set	4039
   759  0000                     _T3CON	set	4017
   760  0000                     _T3CONbits	set	4017
   761  0000                     _TMR3H	set	4019
   762  0000                     _TMR3L	set	4018
   763  0000                     _TRISA	set	3986
   764  0000                     _TRISB	set	3987
   765  0000                     _TRISC	set	3988
   766  0000                     _TRISCbits	set	3988
   767  0000                     _TRISD	set	3989
   768  0000                     _TRISDbits	set	3989
   769  0000                     _TRISE	set	3990
   770  0000                     _TXREG	set	4013
   771  0000                     _TXSTA	set	4012
   772  0000                     _TXSTAbits	set	4012
   773  0000                     _RBPU	set	32655
   774  0000                     _TRMT	set	32097
   775  00FF88                     STR_2:
   776  00FF88  20                 	db	32
   777  00FF89  54                 	db	84	;'T'
   778  00FF8A  65                 	db	101	;'e'
   779  00FF8B  6D                 	db	109	;'m'
   780  00FF8C  70                 	db	112	;'p'
   781  00FF8D  65                 	db	101	;'e'
   782  00FF8E  72                 	db	114	;'r'
   783  00FF8F  61                 	db	97	;'a'
   784  00FF90  74                 	db	116	;'t'
   785  00FF91  75                 	db	117	;'u'
   786  00FF92  72                 	db	114	;'r'
   787  00FF93  65                 	db	101	;'e'
   788  00FF94  20                 	db	32
   789  00FF95  3D                 	db	61	;'='
   790  00FF96  20                 	db	32
   791  00FF97  25                 	db	37
   792  00FF98  64                 	db	100	;'d'
   793  00FF99  20                 	db	32
   794  00FF9A  64                 	db	100	;'d'
   795  00FF9B  65                 	db	101	;'e'
   796  00FF9C  67                 	db	103	;'g'
   797  00FF9D  72                 	db	114	;'r'
   798  00FF9E  65                 	db	101	;'e'
   799  00FF9F  65                 	db	101	;'e'
   800  00FFA0  73                 	db	115	;'s'
   801  00FFA1  43                 	db	67	;'C'
   802  00FFA2  20                 	db	32
   803  00FFA3  3D                 	db	61	;'='
   804  00FFA4  20                 	db	32
   805  00FFA5  25                 	db	37
   806  00FFA6  64                 	db	100	;'d'
   807  00FFA7  20                 	db	32
   808  00FFA8  64                 	db	100	;'d'
   809  00FFA9  65                 	db	101	;'e'
   810  00FFAA  67                 	db	103	;'g'
   811  00FFAB  72                 	db	114	;'r'
   812  00FFAC  65                 	db	101	;'e'
   813  00FFAD  65                 	db	101	;'e'
   814  00FFAE  73                 	db	115	;'s'
   815  00FFAF  46                 	db	70	;'F'
   816  00FFB0  0D                 	db	13
   817  00FFB1  0A                 	db	10
   818  00FFB2  00                 	db	0
   819  00FFB3                     STR_1:
   820  00FFB3  25                 	db	37
   821  00FFB4  30                 	db	48	;'0'
   822  00FFB5  32                 	db	50	;'2'
   823  00FFB6  78                 	db	120	;'x'
   824  00FFB7  3A                 	db	58	;':'
   825  00FFB8  25                 	db	37
   826  00FFB9  30                 	db	48	;'0'
   827  00FFBA  32                 	db	50	;'2'
   828  00FFBB  78                 	db	120	;'x'
   829  00FFBC  3A                 	db	58	;':'
   830  00FFBD  25                 	db	37
   831  00FFBE  30                 	db	48	;'0'
   832  00FFBF  32                 	db	50	;'2'
   833  00FFC0  78                 	db	120	;'x'
   834  00FFC1  20                 	db	32
   835  00FFC2  25                 	db	37
   836  00FFC3  30                 	db	48	;'0'
   837  00FFC4  32                 	db	50	;'2'
   838  00FFC5  78                 	db	120	;'x'
   839  00FFC6  2F                 	db	47
   840  00FFC7  25                 	db	37
   841  00FFC8  30                 	db	48	;'0'
   842  00FFC9  32                 	db	50	;'2'
   843  00FFCA  78                 	db	120	;'x'
   844  00FFCB  2F                 	db	47
   845  00FFCC  25                 	db	37
   846  00FFCD  30                 	db	48	;'0'
   847  00FFCE  32                 	db	50	;'2'
   848  00FFCF  78                 	db	120	;'x'
   849  00FFD0  00                 	db	0
   850  00FFD1                     STR_3:
   851  00FFD1  45                 	db	69	;'E'
   852  00FFD2  43                 	db	67	;'C'
   853  00FFD3  45                 	db	69	;'E'
   854  00FFD4  33                 	db	51	;'3'
   855  00FFD5  33                 	db	51	;'3'
   856  00FFD6  30                 	db	48	;'0'
   857  00FFD7  31                 	db	49	;'1'
   858  00FFD8  4C                 	db	76	;'L'
   859  00FFD9  20                 	db	32
   860  00FFDA  46                 	db	70	;'F'
   861  00FFDB  61                 	db	97	;'a'
   862  00FFDC  6C                 	db	108	;'l'
   863  00FFDD  6C                 	db	108	;'l'
   864  00FFDE  20                 	db	32
   865  00FFDF  32                 	db	50	;'2'
   866  00FFE0  32                 	db	50	;'2'
   867  00FFE1  2D                 	db	45
   868  00FFE2  53                 	db	83	;'S'
   869  00FFE3  78                 	db	120	;'x'
   870  00FFE4  00                 	db	0
   871  00FFE5                     STR_5:
   872  00FFE5  30                 	db	48	;'0'
   873  00FFE6  31                 	db	49	;'1'
   874  00FFE7  32                 	db	50	;'2'
   875  00FFE8  33                 	db	51	;'3'
   876  00FFE9  34                 	db	52	;'4'
   877  00FFEA  35                 	db	53	;'5'
   878  00FFEB  36                 	db	54	;'6'
   879  00FFEC  37                 	db	55	;'7'
   880  00FFED  38                 	db	56	;'8'
   881  00FFEE  39                 	db	57	;'9'
   882  00FFEF  61                 	db	97	;'a'
   883  00FFF0  62                 	db	98	;'b'
   884  00FFF1  63                 	db	99	;'c'
   885  00FFF2  64                 	db	100	;'d'
   886  00FFF3  65                 	db	101	;'e'
   887  00FFF4  66                 	db	102	;'f'
   888  00FFF5  00                 	db	0
   889  00FFF6                     STR_4:
   890  00FFF6  4C                 	db	76	;'L'
   891  00FFF7  41                 	db	65	;'A'
   892  00FFF8  42                 	db	66	;'B'
   893  00FFF9  20                 	db	32
   894  00FFFA  31                 	db	49	;'1'
   895  00FFFB  30                 	db	48	;'0'
   896  00FFFC  20                 	db	32
   897  00FFFD  00                 	db	0
   898                           
   899                           ; #config settings
   900  00FFFE  00                 	db	0	; dummy byte at the end
   901  0000                     
   902                           	psect	cinit
   903  000AEA                     __pcinit:
   904                           	opt stack 0
   905  000AEA                     start_initialization:
   906                           	opt stack 0
   907  000AEA                     __initialization:
   908                           	opt stack 0
   909                           
   910                           ; Clear objects allocated to BANK0 (31 bytes)
   911  000AEA  EE00  F0BF         	lfsr	0,__pbssBANK0
   912  000AEE  0E1F               	movlw	31
   913  000AF0                     clear_0:
   914  000AF0  6AEE               	clrf	postinc0,c
   915  000AF2  06E8               	decf	wreg,f,c
   916  000AF4  E1FD               	bnz	clear_0
   917                           
   918                           ; Clear objects allocated to COMRAM (41 bytes)
   919  000AF6  EE00  F043         	lfsr	0,__pbssCOMRAM
   920  000AFA  0E29               	movlw	41
   921  000AFC                     clear_1:
   922  000AFC  6AEE               	clrf	postinc0,c
   923  000AFE  06E8               	decf	wreg,f,c
   924  000B00  E1FD               	bnz	clear_1
   925                           
   926                           ; Initialize objects allocated to BANK1 (84 bytes)
   927                           ; load TBLPTR registers with __pidataBANK1
   928  000B02  0EFC               	movlw	low __pidataBANK1
   929  000B04  6EF6               	movwf	tblptrl,c
   930  000B06  0E0C               	movlw	high __pidataBANK1
   931  000B08  6EF7               	movwf	tblptrh,c
   932  000B0A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   933  000B0C  6EF8               	movwf	tblptru,c
   934  000B0E  EE01  F000         	lfsr	0,__pdataBANK1
   935  000B12  EE10 F054          	lfsr	1,84
   936  000B16                     copy_data0:
   937  000B16  0009               	tblrd		*+
   938  000B18  CFF5 FFEE          	movff	tablat,postinc0
   939  000B1C  50E5               	movf	postdec1,w,c
   940  000B1E  50E1               	movf	fsr1l,w,c
   941  000B20  E1FA               	bnz	copy_data0
   942                           
   943                           ; Initialize objects allocated to BANK0 (63 bytes)
   944                           ; load TBLPTR registers with __pidataBANK0
   945  000B22  0E0E               	movlw	low __pidataBANK0
   946  000B24  6EF6               	movwf	tblptrl,c
   947  000B26  0E0F               	movlw	high __pidataBANK0
   948  000B28  6EF7               	movwf	tblptrh,c
   949  000B2A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   950  000B2C  6EF8               	movwf	tblptru,c
   951  000B2E  EE00  F080         	lfsr	0,__pdataBANK0
   952  000B32  EE10 F03F          	lfsr	1,63
   953  000B36                     copy_data1:
   954  000B36  0009               	tblrd		*+
   955  000B38  CFF5 FFEE          	movff	tablat,postinc0
   956  000B3C  50E5               	movf	postdec1,w,c
   957  000B3E  50E1               	movf	fsr1l,w,c
   958  000B40  E1FA               	bnz	copy_data1
   959                           
   960                           ; Initialize objects allocated to COMRAM (2 bytes)
   961                           ; load TBLPTR registers with __pidataCOMRAM
   962  000B42  0E7C               	movlw	low __pidataCOMRAM
   963  000B44  6EF6               	movwf	tblptrl,c
   964  000B46  0E12               	movlw	high __pidataCOMRAM
   965  000B48  6EF7               	movwf	tblptrh,c
   966  000B4A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   967  000B4C  6EF8               	movwf	tblptru,c
   968  000B4E  0009               	tblrd		*+	;fetch initializer
   969  000B50  CFF5 F06C          	movff	tablat,__pdataCOMRAM
   970  000B54  0009               	tblrd		*+	;fetch initializer
   971  000B56  CFF5 F06D          	movff	tablat,__pdataCOMRAM+1
   972  000B5A                     end_of_initialization:
   973                           	opt stack 0
   974  000B5A                     __end_of__initialization:
   975                           	opt stack 0
   976  000B5A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   977  000B5C  6EF8               	movwf	tblptru,c
   978  000B5E  0100               	movlb	0
   979  000B60  EFEC  F004         	goto	_main	;jump to C main() function
   980                           tblptru	equ	0xFF8
   981                           tblptrh	equ	0xFF7
   982                           tblptrl	equ	0xFF6
   983                           tablat	equ	0xFF5
   984                           postinc0	equ	0xFEE
   985                           wreg	equ	0xFE8
   986                           postdec1	equ	0xFE5
   987                           fsr1l	equ	0xFE1
   988                           
   989                           	psect	bssCOMRAM
   990  000043                     __pbssCOMRAM:
   991                           	opt stack 0
   992  000043                     _Nec_code:
   993                           	opt stack 0
   994  000043                     	ds	4
   995  000047                     _Time_Elapsed:
   996                           	opt stack 0
   997  000047                     	ds	2
   998  000049                     _nbr:
   999                           	opt stack 0
  1000  000049                     	ds	2
  1001  00004B                     _nec_ok:
  1002                           	opt stack 0
  1003  00004B                     	ds	2
  1004  00004D                     _txt:
  1005                           	opt stack 0
  1006  00004D                     	ds	2
  1007  00004F                     _Nec_code1:
  1008                           	opt stack 0
  1009  00004F                     	ds	1
  1010  000050                     _Nec_state:
  1011                           	opt stack 0
  1012  000050                     	ds	1
  1013  000051                     _TempSecond:
  1014                           	opt stack 0
  1015  000051                     	ds	1
  1016  000052                     __tft_type:
  1017                           	opt stack 0
  1018  000052                     	ds	1
  1019  000053                     _alarm_date:
  1020                           	opt stack 0
  1021  000053                     	ds	1
  1022  000054                     _alarm_hour:
  1023                           	opt stack 0
  1024  000054                     	ds	1
  1025  000055                     _alarm_minute:
  1026                           	opt stack 0
  1027  000055                     	ds	1
  1028  000056                     _alarm_second:
  1029                           	opt stack 0
  1030  000056                     	ds	1
  1031  000057                     _bit_count:
  1032                           	opt stack 0
  1033  000057                     	ds	1
  1034  000058                     _colstart:
  1035                           	opt stack 0
  1036  000058                     	ds	1
  1037  000059                     _day:
  1038                           	opt stack 0
  1039  000059                     	ds	1
  1040  00005A                     _dow:
  1041                           	opt stack 0
  1042  00005A                     	ds	1
  1043  00005B                     _found:
  1044                           	opt stack 0
  1045  00005B                     	ds	1
  1046  00005C                     _hour:
  1047                           	opt stack 0
  1048  00005C                     	ds	1
  1049  00005D                     _i:
  1050                           	opt stack 0
  1051  00005D                     	ds	1
  1052  00005E                     _minute:
  1053                           	opt stack 0
  1054  00005E                     	ds	1
  1055  00005F                     _month:
  1056                           	opt stack 0
  1057  00005F                     	ds	1
  1058  000060                     _rowstart:
  1059                           	opt stack 0
  1060  000060                     	ds	1
  1061  000061                     _second:
  1062                           	opt stack 0
  1063  000061                     	ds	1
  1064  000062                     _setup_alarm_hour:
  1065                           	opt stack 0
  1066  000062                     	ds	1
  1067  000063                     _setup_alarm_minute:
  1068                           	opt stack 0
  1069  000063                     	ds	1
  1070  000064                     _setup_alarm_second:
  1071                           	opt stack 0
  1072  000064                     	ds	1
  1073  000065                     _setup_day:
  1074                           	opt stack 0
  1075  000065                     	ds	1
  1076  000066                     _setup_hour:
  1077                           	opt stack 0
  1078  000066                     	ds	1
  1079  000067                     _setup_minute:
  1080                           	opt stack 0
  1081  000067                     	ds	1
  1082  000068                     _setup_month:
  1083                           	opt stack 0
  1084  000068                     	ds	1
  1085  000069                     _setup_second:
  1086                           	opt stack 0
  1087  000069                     	ds	1
  1088  00006A                     _setup_year:
  1089                           	opt stack 0
  1090  00006A                     	ds	1
  1091  00006B                     _year:
  1092                           	opt stack 0
  1093  00006B                     	ds	1
  1094                           tblptru	equ	0xFF8
  1095                           tblptrh	equ	0xFF7
  1096                           tblptrl	equ	0xFF6
  1097                           tablat	equ	0xFF5
  1098                           postinc0	equ	0xFEE
  1099                           wreg	equ	0xFE8
  1100                           postdec1	equ	0xFE5
  1101                           fsr1l	equ	0xFE1
  1102                           
  1103                           	psect	dataCOMRAM
  1104  00006C                     __pdataCOMRAM:
  1105                           	opt stack 0
  1106  00006C                     _tempSecond:
  1107                           	opt stack 0
  1108  00006C                     	ds	1
  1109  00006D                     _wrap:
  1110                           	opt stack 0
  1111  00006D                     	ds	1
  1112                           tblptru	equ	0xFF8
  1113                           tblptrh	equ	0xFF7
  1114                           tblptrl	equ	0xFF6
  1115                           tablat	equ	0xFF5
  1116                           postinc0	equ	0xFEE
  1117                           wreg	equ	0xFE8
  1118                           postdec1	equ	0xFE5
  1119                           fsr1l	equ	0xFE1
  1120                           
  1121                           	psect	bssBANK0
  1122  0000BF                     __pbssBANK0:
  1123                           	opt stack 0
  1124  0000BF                     _buffer:
  1125                           	opt stack 0
  1126  0000BF                     	ds	31
  1127                           tblptru	equ	0xFF8
  1128                           tblptrh	equ	0xFF7
  1129                           tblptrl	equ	0xFF6
  1130                           tablat	equ	0xFF5
  1131                           postinc0	equ	0xFEE
  1132                           wreg	equ	0xFE8
  1133                           postdec1	equ	0xFE5
  1134                           fsr1l	equ	0xFE1
  1135                           
  1136                           	psect	dataBANK0
  1137  000080                     __pdataBANK0:
  1138                           	opt stack 0
  1139  000080                     _color:
  1140                           	opt stack 0
  1141  000080                     	ds	42
  1142  0000AA                     _array1:
  1143                           	opt stack 0
  1144  0000AA                     	ds	21
  1145                           tblptru	equ	0xFF8
  1146                           tblptrh	equ	0xFF7
  1147                           tblptrl	equ	0xFF6
  1148                           tablat	equ	0xFF5
  1149                           postinc0	equ	0xFEE
  1150                           wreg	equ	0xFE8
  1151                           postdec1	equ	0xFE5
  1152                           fsr1l	equ	0xFE1
  1153                           
  1154                           	psect	dataBANK1
  1155  000100                     __pdataBANK1:
  1156                           	opt stack 0
  1157  000100                     _txt1:
  1158                           	opt stack 0
  1159  000100                     	ds	84
  1160                           tblptru	equ	0xFF8
  1161                           tblptrh	equ	0xFF7
  1162                           tblptrl	equ	0xFF6
  1163                           tablat	equ	0xFF5
  1164                           postinc0	equ	0xFEE
  1165                           wreg	equ	0xFE8
  1166                           postdec1	equ	0xFE5
  1167                           fsr1l	equ	0xFE1
  1168                           
  1169                           	psect	cstackBANK0
  1170  0000DE                     __pcstackBANK0:
  1171                           	opt stack 0
  1172  0000DE                     drawtext@x:
  1173                           	opt stack 0
  1174                           
  1175                           ; 1 bytes @ 0x0
  1176  0000DE                     	ds	1
  1177  0000DF                     drawtext@textsize:
  1178                           	opt stack 0
  1179                           
  1180                           ; 2 bytes @ 0x1
  1181  0000DF                     	ds	2
  1182  0000E1                     drawtext@i:
  1183                           	opt stack 0
  1184                           
  1185                           ; 2 bytes @ 0x3
  1186  0000E1                     	ds	2
  1187  0000E3                     drawtext@cursor_y:
  1188                           	opt stack 0
  1189                           
  1190                           ; 1 bytes @ 0x5
  1191  0000E3                     	ds	1
  1192  0000E4                     drawtext@cursor_x:
  1193                           	opt stack 0
  1194                           
  1195                           ; 1 bytes @ 0x6
  1196  0000E4                     	ds	1
  1197                           tblptru	equ	0xFF8
  1198                           tblptrh	equ	0xFF7
  1199                           tblptrl	equ	0xFF6
  1200                           tablat	equ	0xFF5
  1201                           postinc0	equ	0xFEE
  1202                           wreg	equ	0xFE8
  1203                           postdec1	equ	0xFE5
  1204                           fsr1l	equ	0xFE1
  1205                           
  1206                           	psect	cstackCOMRAM
  1207  000001                     __pcstackCOMRAM:
  1208                           	opt stack 0
  1209  000001                     ??_chkisr:
  1210  000001                     
  1211                           ; 1 bytes @ 0x0
  1212  000001                     	ds	14
  1213  00000F                     ??_isdigit:
  1214  00000F                     ?_strlen:
  1215                           	opt stack 0
  1216  00000F                     ?___wmul:
  1217                           	opt stack 0
  1218  00000F                     ?___awdiv:
  1219                           	opt stack 0
  1220  00000F                     ?___lwdiv:
  1221                           	opt stack 0
  1222  00000F                     spiwrite@x:
  1223                           	opt stack 0
  1224  00000F                     I2C_Read@ack:
  1225                           	opt stack 0
  1226  00000F                     I2C_Write@outByte:
  1227                           	opt stack 0
  1228  00000F                     putch@c:
  1229                           	opt stack 0
  1230  00000F                     OpenUSART@spbrg:
  1231                           	opt stack 0
  1232  00000F                     ___wmul@multiplier:
  1233                           	opt stack 0
  1234  00000F                     ___awdiv@dividend:
  1235                           	opt stack 0
  1236  00000F                     ___lwdiv@dividend:
  1237                           	opt stack 0
  1238  00000F                     strcpy@to:
  1239                           	opt stack 0
  1240  00000F                     strlen@s:
  1241                           	opt stack 0
  1242  00000F                     I2C_Init@c:
  1243                           	opt stack 0
  1244                           
  1245                           ; 4 bytes @ 0xE
  1246  00000F                     	ds	1
  1247  000010                     spiwrite@spidata:
  1248                           	opt stack 0
  1249  000010                     I2C_Read@n:
  1250                           	opt stack 0
  1251  000010                     I2C_Write@n:
  1252                           	opt stack 0
  1253  000010                     _isdigit$1488:
  1254                           	opt stack 0
  1255                           
  1256                           ; 1 bytes @ 0xF
  1257  000010                     	ds	1
  1258  000011                     ??_strlen:
  1259  000011                     write_command@cmd_:
  1260                           	opt stack 0
  1261  000011                     write_data@data_:
  1262                           	opt stack 0
  1263  000011                     I2C_Read@inByte:
  1264                           	opt stack 0
  1265  000011                     I2C_Write_Cmd_Only@Cmd:
  1266                           	opt stack 0
  1267  000011                     I2C_Write_Cmd_Write_Data@Cmd:
  1268                           	opt stack 0
  1269  000011                     OpenUSART@config:
  1270                           	opt stack 0
  1271  000011                     isdigit@c:
  1272                           	opt stack 0
  1273  000011                     ___wmul@multiplicand:
  1274                           	opt stack 0
  1275  000011                     ___awdiv@divisor:
  1276                           	opt stack 0
  1277  000011                     ___lwdiv@divisor:
  1278                           	opt stack 0
  1279  000011                     strcpy@from:
  1280                           	opt stack 0
  1281                           
  1282                           ; 2 bytes @ 0x10
  1283  000011                     	ds	1
  1284  000012                     ?_DS1621_Read_Temp:
  1285                           	opt stack 0
  1286  000012                     setAddrWindow@y0:
  1287                           	opt stack 0
  1288  000012                     I2C_Write_Cmd_Only@Device:
  1289                           	opt stack 0
  1290  000012                     I2C_Write_Cmd_Write_Data@Data_Out:
  1291                           	opt stack 0
  1292  000012                     DS3231_Read_Time@Address:
  1293                           	opt stack 0
  1294                           
  1295                           ; 1 bytes @ 0x11
  1296  000012                     	ds	1
  1297  000013                     setAddrWindow@x1:
  1298                           	opt stack 0
  1299  000013                     I2C_Write_Cmd_Write_Data@Device:
  1300                           	opt stack 0
  1301  000013                     DS3231_Read_Time@Device:
  1302                           	opt stack 0
  1303  000013                     ___awdiv@counter:
  1304                           	opt stack 0
  1305  000013                     ___wmul@product:
  1306                           	opt stack 0
  1307  000013                     ___lwdiv@quotient:
  1308                           	opt stack 0
  1309  000013                     strcpy@cp:
  1310                           	opt stack 0
  1311  000013                     strlen@cp:
  1312                           	opt stack 0
  1313                           
  1314                           ; 2 bytes @ 0x12
  1315  000013                     	ds	1
  1316  000014                     setAddrWindow@y1:
  1317                           	opt stack 0
  1318  000014                     DS1621_Init@Device:
  1319                           	opt stack 0
  1320  000014                     DS1621_Read_Temp@Cmd:
  1321                           	opt stack 0
  1322  000014                     ___awdiv@sign:
  1323                           	opt stack 0
  1324                           
  1325                           ; 1 bytes @ 0x13
  1326  000014                     	ds	1
  1327  000015                     setAddrWindow@x0:
  1328                           	opt stack 0
  1329  000015                     DS1621_Read_Temp@Data_Ret:
  1330                           	opt stack 0
  1331  000015                     ___lwdiv@counter:
  1332                           	opt stack 0
  1333  000015                     delay_ms@ms:
  1334                           	opt stack 0
  1335  000015                     ___awdiv@quotient:
  1336                           	opt stack 0
  1337                           
  1338                           ; 2 bytes @ 0x14
  1339  000015                     	ds	1
  1340  000016                     ?___lwmod:
  1341                           	opt stack 0
  1342  000016                     drawPixel@y:
  1343                           	opt stack 0
  1344  000016                     drawFastVLine@y:
  1345                           	opt stack 0
  1346  000016                     fillRectangle@y:
  1347                           	opt stack 0
  1348  000016                     DS1621_Read_Temp@Device:
  1349                           	opt stack 0
  1350  000016                     ___lwmod@dividend:
  1351                           	opt stack 0
  1352                           
  1353                           ; 2 bytes @ 0x15
  1354  000016                     	ds	1
  1355  000017                     ??_delay_ms:
  1356  000017                     drawFastVLine@h:
  1357                           	opt stack 0
  1358  000017                     fillRectangle@w:
  1359                           	opt stack 0
  1360  000017                     drawPixel@color:
  1361                           	opt stack 0
  1362                           
  1363                           ; 2 bytes @ 0x16
  1364  000017                     	ds	1
  1365  000018                     fillRectangle@h:
  1366                           	opt stack 0
  1367  000018                     drawFastVLine@color:
  1368                           	opt stack 0
  1369  000018                     ___lwmod@divisor:
  1370                           	opt stack 0
  1371                           
  1372                           ; 2 bytes @ 0x17
  1373  000018                     	ds	1
  1374  000019                     drawPixel@x:
  1375                           	opt stack 0
  1376  000019                     delay_ms@count:
  1377                           	opt stack 0
  1378  000019                     fillRectangle@color:
  1379                           	opt stack 0
  1380                           
  1381                           ; 2 bytes @ 0x18
  1382  000019                     	ds	1
  1383  00001A                     ??_drawFastVLine:
  1384  00001A                     ___lwmod@counter:
  1385                           	opt stack 0
  1386                           
  1387                           ; 1 bytes @ 0x19
  1388  00001A                     	ds	1
  1389  00001B                     ??_fillRectangle:
  1390  00001B                     ?_printf:
  1391                           	opt stack 0
  1392  00001B                     printf@f:
  1393                           	opt stack 0
  1394                           
  1395                           ; 2 bytes @ 0x1A
  1396  00001B                     	ds	3
  1397  00001E                     drawFastVLine@hi:
  1398                           	opt stack 0
  1399                           
  1400                           ; 1 bytes @ 0x1D
  1401  00001E                     	ds	1
  1402  00001F                     drawFastVLine@lo:
  1403                           	opt stack 0
  1404  00001F                     fillRectangle@hi:
  1405                           	opt stack 0
  1406                           
  1407                           ; 1 bytes @ 0x1E
  1408  00001F                     	ds	1
  1409  000020                     drawFastVLine@x:
  1410                           	opt stack 0
  1411  000020                     fillRectangle@lo:
  1412                           	opt stack 0
  1413                           
  1414                           ; 1 bytes @ 0x1F
  1415  000020                     	ds	1
  1416  000021                     fillRect@y:
  1417                           	opt stack 0
  1418  000021                     fillRectangle@x:
  1419                           	opt stack 0
  1420                           
  1421                           ; 1 bytes @ 0x20
  1422  000021                     	ds	1
  1423  000022                     fillRect@w:
  1424                           	opt stack 0
  1425  000022                     fillScreen@color:
  1426                           	opt stack 0
  1427                           
  1428                           ; 2 bytes @ 0x21
  1429  000022                     	ds	1
  1430  000023                     fillRect@h:
  1431                           	opt stack 0
  1432                           
  1433                           ; 1 bytes @ 0x22
  1434  000023                     	ds	1
  1435  000024                     fillRect@color:
  1436                           	opt stack 0
  1437                           
  1438                           ; 2 bytes @ 0x23
  1439  000024                     	ds	2
  1440  000026                     ??_fillRect:
  1441                           
  1442                           ; 0 bytes @ 0x25
  1443  000026                     	ds	3
  1444  000029                     ??_printf:
  1445  000029                     fillRect@x:
  1446                           	opt stack 0
  1447                           
  1448                           ; 1 bytes @ 0x28
  1449  000029                     	ds	1
  1450  00002A                     fillRect@i:
  1451                           	opt stack 0
  1452                           
  1453                           ; 2 bytes @ 0x29
  1454  00002A                     	ds	2
  1455  00002C                     drawChar@y:
  1456                           	opt stack 0
  1457                           
  1458                           ; 1 bytes @ 0x2B
  1459  00002C                     	ds	1
  1460  00002D                     drawChar@c:
  1461                           	opt stack 0
  1462  00002D                     printf@idx:
  1463                           	opt stack 0
  1464                           
  1465                           ; 1 bytes @ 0x2C
  1466  00002D                     	ds	1
  1467  00002E                     drawChar@color:
  1468                           	opt stack 0
  1469  00002E                     printf@ap:
  1470                           	opt stack 0
  1471                           
  1472                           ; 2 bytes @ 0x2D
  1473  00002E                     	ds	2
  1474  000030                     printf@prec:
  1475                           	opt stack 0
  1476  000030                     drawChar@bg:
  1477                           	opt stack 0
  1478                           
  1479                           ; 2 bytes @ 0x2F
  1480  000030                     	ds	1
  1481  000031                     printf@val:
  1482                           	opt stack 0
  1483                           
  1484                           ; 2 bytes @ 0x30
  1485  000031                     	ds	1
  1486  000032                     drawChar@size:
  1487                           	opt stack 0
  1488                           
  1489                           ; 1 bytes @ 0x31
  1490  000032                     	ds	1
  1491  000033                     drawChar@line:
  1492                           	opt stack 0
  1493  000033                     printf@flag:
  1494                           	opt stack 0
  1495                           
  1496                           ; 1 bytes @ 0x32
  1497  000033                     	ds	1
  1498  000034                     drawChar@x:
  1499                           	opt stack 0
  1500  000034                     printf@width:
  1501                           	opt stack 0
  1502                           
  1503                           ; 2 bytes @ 0x33
  1504  000034                     	ds	1
  1505  000035                     drawChar@j:
  1506                           	opt stack 0
  1507                           
  1508                           ; 1 bytes @ 0x34
  1509  000035                     	ds	1
  1510  000036                     drawChar@i:
  1511                           	opt stack 0
  1512  000036                     printf@c:
  1513                           	opt stack 0
  1514                           
  1515                           ; 1 bytes @ 0x35
  1516  000036                     	ds	1
  1517  000037                     drawtext@y:
  1518                           	opt stack 0
  1519                           
  1520                           ; 1 bytes @ 0x36
  1521  000037                     	ds	1
  1522  000038                     drawtext@_text:
  1523                           	opt stack 0
  1524                           
  1525                           ; 2 bytes @ 0x37
  1526  000038                     	ds	2
  1527  00003A                     drawtext@color:
  1528                           	opt stack 0
  1529                           
  1530                           ; 2 bytes @ 0x39
  1531  00003A                     	ds	2
  1532  00003C                     drawtext@bg:
  1533                           	opt stack 0
  1534                           
  1535                           ; 2 bytes @ 0x3B
  1536  00003C                     	ds	2
  1537  00003E                     drawtext@size:
  1538                           	opt stack 0
  1539                           
  1540                           ; 1 bytes @ 0x3D
  1541  00003E                     	ds	1
  1542  00003F                     ??_drawtext:
  1543                           
  1544                           ; 0 bytes @ 0x3E
  1545  00003F                     	ds	2
  1546  000041                     main@tempF:
  1547                           	opt stack 0
  1548                           
  1549                           ; 1 bytes @ 0x40
  1550  000041                     	ds	1
  1551  000042                     main@tempC:
  1552                           	opt stack 0
  1553                           
  1554                           ; 1 bytes @ 0x41
  1555  000042                     	ds	1
  1556                           tblptru	equ	0xFF8
  1557                           tblptrh	equ	0xFF7
  1558                           tblptrl	equ	0xFF6
  1559                           tablat	equ	0xFF5
  1560                           postinc0	equ	0xFEE
  1561                           wreg	equ	0xFE8
  1562                           postdec1	equ	0xFE5
  1563                           fsr1l	equ	0xFE1
  1564                           
  1565 ;;
  1566 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1567 ;;
  1568 ;; *************** function _main *****************
  1569 ;; Defined at:
  1570 ;;		line 123 in file "Lab11p2.c"
  1571 ;; Parameters:    Size  Location     Type
  1572 ;;		None
  1573 ;; Auto vars:     Size  Location     Type
  1574 ;;  tempC           1   65[COMRAM] unsigned char 
  1575 ;;  tempF           1   64[COMRAM] unsigned char 
  1576 ;; Return value:  Size  Location     Type
  1577 ;;		None               void
  1578 ;; Registers used:
  1579 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1580 ;; Tracked objects:
  1581 ;;		On entry : 0/0
  1582 ;;		On exit  : 0/0
  1583 ;;		Unchanged: 0/0
  1584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1586 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1588 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1589 ;;Total ram usage:        2 bytes
  1590 ;; Hardware stack levels required when called:   10
  1591 ;; This function calls:
  1592 ;;		_DS1621_Read_Temp
  1593 ;;		_DS3231_Read_Time
  1594 ;;		_Do_Init
  1595 ;;		___awdiv
  1596 ;;		_printf
  1597 ;; This function is called by:
  1598 ;;		Startup code after reset
  1599 ;; This function uses a non-reentrant model
  1600 ;;
  1601                           
  1602                           	psect	text0
  1603  0009D8                     __ptext0:
  1604                           	opt stack 0
  1605  0009D8                     _main:
  1606                           	opt stack 21
  1607                           
  1608                           ;Lab11p2.c: 125: Do_Init();
  1609                           
  1610                           ;incstack = 0
  1611  0009D8  EC67  F007         	call	_Do_Init	;wreg free
  1612  0009DC  D000               	goto	l4384
  1613  0009DE                     l4384:
  1614                           
  1615                           ;Lab11p2.c: 136: {
  1616                           ;Lab11p2.c: 138: DS3231_Read_Time();
  1617  0009DE  EC1E  F006         	call	_DS3231_Read_Time	;wreg free
  1618                           
  1619                           ;Lab11p2.c: 139: if(tempSecond != second)
  1620  0009E2  5061               	movf	_second,w,c
  1621  0009E4  186C               	xorwf	_tempSecond,w,c
  1622  0009E6  B4D8               	btfsc	status,2,c
  1623  0009E8  D7FA               	goto	l4384
  1624                           
  1625                           ;Lab11p2.c: 140: {
  1626                           ;Lab11p2.c: 141: tempSecond = second;
  1627  0009EA  C061  F06C         	movff	_second,_tempSecond
  1628                           
  1629                           ;Lab11p2.c: 142: char tempC = DS1621_Read_Temp();
  1630  0009EE  EC04  F008         	call	_DS1621_Read_Temp	;wreg free
  1631  0009F2  5012               	movf	?_DS1621_Read_Temp,w,c
  1632  0009F4  6E42               	movwf	main@tempC,c
  1633                           
  1634                           ;Lab11p2.c: 143: char tempF = (tempC * 9 / 5) + 32;
  1635  0009F6  5042               	movf	main@tempC,w,c
  1636  0009F8  0D09               	mullw	9
  1637  0009FA  CFF3 F00F          	movff	prodl,___awdiv@dividend
  1638  0009FE  CFF4 F010          	movff	prodh,___awdiv@dividend+1
  1639  000A02  0E00               	movlw	0
  1640  000A04  6E12               	movwf	___awdiv@divisor+1,c
  1641  000A06  0E05               	movlw	5
  1642  000A08  6E11               	movwf	___awdiv@divisor,c
  1643  000A0A  EC5A  F004         	call	___awdiv	;wreg free
  1644  000A0E  500F               	movf	?___awdiv,w,c
  1645  000A10  0F20               	addlw	32
  1646  000A12  6E41               	movwf	main@tempF,c
  1647                           
  1648                           ;Lab11p2.c: 144: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,ye
      +                          ar);
  1649  000A14  0EB3               	movlw	low STR_1
  1650  000A16  6E1B               	movwf	printf@f,c
  1651  000A18  0EFF               	movlw	high STR_1
  1652  000A1A  6E1C               	movwf	printf@f+1,c
  1653  000A1C  C05C  F01D         	movff	_hour,?_printf+2
  1654  000A20  6A1E               	clrf	?_printf+3,c
  1655  000A22  C05E  F01F         	movff	_minute,?_printf+4
  1656  000A26  6A20               	clrf	?_printf+5,c
  1657  000A28  C061  F021         	movff	_second,?_printf+6
  1658  000A2C  6A22               	clrf	?_printf+7,c
  1659  000A2E  C05F  F023         	movff	_month,?_printf+8
  1660  000A32  6A24               	clrf	?_printf+9,c
  1661  000A34  C059  F025         	movff	_day,?_printf+10
  1662  000A38  6A26               	clrf	?_printf+11,c
  1663  000A3A  C06B  F027         	movff	_year,?_printf+12
  1664  000A3E  6A28               	clrf	?_printf+13,c
  1665  000A40  EC0E  F000         	call	_printf	;wreg free
  1666                           
  1667                           ;Lab11p2.c: 145: printf (" Temperature = %d degreesC = %d degreesF\r\n", tempC, tempF);
  1668  000A44  0E88               	movlw	low STR_2
  1669  000A46  6E1B               	movwf	printf@f,c
  1670  000A48  0EFF               	movlw	high STR_2
  1671  000A4A  6E1C               	movwf	printf@f+1,c
  1672  000A4C  C042  F01D         	movff	main@tempC,?_printf+2
  1673  000A50  6A1E               	clrf	?_printf+3,c
  1674  000A52  C041  F01F         	movff	main@tempF,?_printf+4
  1675  000A56  6A20               	clrf	?_printf+5,c
  1676  000A58  EC0E  F000         	call	_printf	;wreg free
  1677  000A5C  D7C0               	goto	l4384
  1678  000A5E  EF0C  F000         	goto	start
  1679  000A62                     __end_of_main:
  1680                           	opt stack 0
  1681                           tblptru	equ	0xFF8
  1682                           tblptrh	equ	0xFF7
  1683                           tblptrl	equ	0xFF6
  1684                           tablat	equ	0xFF5
  1685                           prodh	equ	0xFF4
  1686                           prodl	equ	0xFF3
  1687                           postinc0	equ	0xFEE
  1688                           wreg	equ	0xFE8
  1689                           postdec1	equ	0xFE5
  1690                           fsr1l	equ	0xFE1
  1691                           status	equ	0xFD8
  1692                           
  1693 ;; *************** function _printf *****************
  1694 ;; Defined at:
  1695 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1696 ;; Parameters:    Size  Location     Type
  1697 ;;  f               2   26[COMRAM] PTR const unsigned char 
  1698 ;;		 -> STR_2(43), STR_1(30), 
  1699 ;; Auto vars:     Size  Location     Type
  1700 ;;  idx             1   44[COMRAM] unsigned char 
  1701 ;;  tmpval          4    0        struct .
  1702 ;;  cp              3    0        PTR const unsigned char 
  1703 ;;  width           2   51[COMRAM] int 
  1704 ;;  val             2   48[COMRAM] unsigned int 
  1705 ;;  ap              2   45[COMRAM] PTR void [1]
  1706 ;;		 -> ?_printf(2), 
  1707 ;;  len             2    0        unsigned int 
  1708 ;;  c               1   53[COMRAM] char 
  1709 ;;  flag            1   50[COMRAM] unsigned char 
  1710 ;;  prec            1   47[COMRAM] char 
  1711 ;; Return value:  Size  Location     Type
  1712 ;;                  2   26[COMRAM] int 
  1713 ;; Registers used:
  1714 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1715 ;; Tracked objects:
  1716 ;;		On entry : 0/0
  1717 ;;		On exit  : 0/0
  1718 ;;		Unchanged: 0/0
  1719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1720 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1721 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1722 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1723 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1724 ;;Total ram usage:       28 bytes
  1725 ;; Hardware stack levels used:    1
  1726 ;; Hardware stack levels required when called:    2
  1727 ;; This function calls:
  1728 ;;		___lwdiv
  1729 ;;		___lwmod
  1730 ;;		___wmul
  1731 ;;		_isdigit
  1732 ;;		_putch
  1733 ;; This function is called by:
  1734 ;;		_main
  1735 ;; This function uses a non-reentrant model
  1736 ;;
  1737                           
  1738                           	psect	text1
  1739  00001C                     __ptext1:
  1740                           	opt stack 0
  1741  00001C                     _printf:
  1742                           	opt stack 28
  1743                           
  1744                           ;doprnt.c: 466: va_list ap;
  1745                           ;doprnt.c: 499: signed char c;
  1746                           ;doprnt.c: 501: int width;
  1747                           ;doprnt.c: 506: signed char prec;
  1748                           ;doprnt.c: 508: unsigned char flag;
  1749                           ;doprnt.c: 523: union {
  1750                           ;doprnt.c: 524: unsigned long vd;
  1751                           ;doprnt.c: 525: double integ;
  1752                           ;doprnt.c: 526: } tmpval;
  1753                           ;doprnt.c: 528: unsigned int val;
  1754                           ;doprnt.c: 529: unsigned len;
  1755                           ;doprnt.c: 530: const char * cp;
  1756                           ;doprnt.c: 533: *ap = __va_start();
  1757                           
  1758                           ;incstack = 0
  1759  00001C  0E1D               	movlw	low (?_printf+2)
  1760  00001E  6E2E               	movwf	printf@ap,c
  1761  000020  0E00               	movlw	high (?_printf+2)
  1762  000022  6E2F               	movwf	printf@ap+1,c
  1763                           
  1764                           ;doprnt.c: 536: while(c = *f++) {
  1765  000024  D199               	goto	l4092
  1766  000026                     l3966:
  1767                           
  1768                           ;doprnt.c: 538: if(c != '%')
  1769  000026  0E25               	movlw	37
  1770  000028  1836               	xorwf	printf@c,w,c
  1771  00002A  B4D8               	btfsc	status,2,c
  1772  00002C  D004               	goto	l3970
  1773                           
  1774                           ;doprnt.c: 540: {
  1775                           ;doprnt.c: 541: (putch(c) );
  1776  00002E  5036               	movf	printf@c,w,c
  1777  000030  EC1A  F009         	call	_putch
  1778                           
  1779                           ;doprnt.c: 542: continue;
  1780  000034  D191               	goto	l4092
  1781  000036                     l3970:
  1782                           
  1783                           ;doprnt.c: 543: }
  1784                           ;doprnt.c: 546: width = 0;
  1785  000036  0E00               	movlw	0
  1786  000038  6E35               	movwf	printf@width+1,c
  1787  00003A  0E00               	movlw	0
  1788  00003C  6E34               	movwf	printf@width,c
  1789                           
  1790                           ;doprnt.c: 548: flag = 0;
  1791  00003E  0E00               	movlw	0
  1792  000040  6E33               	movwf	printf@flag,c
  1793                           
  1794                           ;doprnt.c: 551: switch(*f) {
  1795                           
  1796                           ;doprnt.c: 550: for(;;) {
  1797  000042  D005               	goto	l3976
  1798  000044                     l3972:
  1799                           
  1800                           ;doprnt.c: 580: flag |= 0x04;
  1801  000044  8433               	bsf	printf@flag,2,c
  1802                           
  1803                           ;doprnt.c: 581: f++;
  1804  000046  4A1B               	infsnz	printf@f,f,c
  1805  000048  2A1C               	incf	printf@f+1,f,c
  1806                           
  1807                           ;doprnt.c: 582: continue;
  1808  00004A  D001               	goto	l3976
  1809                           
  1810                           ;doprnt.c: 584: }
  1811  00004C  D00B               	goto	l3978
  1812  00004E                     l3976:
  1813  00004E  C01B  FFF6         	movff	printf@f,tblptrl
  1814  000052  C01C  FFF7         	movff	printf@f+1,tblptrh
  1815  000056                     	if	0	;tblptru may be non-zero
  1816  000056                     	endif
  1817  000056                     	if	0	;tblptru may be non-zero
  1818  000056                     	endif
  1819  000056  0008               	tblrd		*
  1820  000058  50F5               	movf	tablat,w,c
  1821                           
  1822                           ; Switch size 1, requested type "space"
  1823                           ; Number of cases is 1, Range of values is 48 to 48
  1824                           ; switch strategies available:
  1825                           ; Name         Instructions Cycles
  1826                           ; simple_byte            4     3 (average)
  1827                           ;	Chosen strategy is simple_byte
  1828  00005A  0A30               	xorlw	48	; case 48
  1829  00005C  B4D8               	btfsc	status,2,c
  1830  00005E  D7F2               	goto	l3972
  1831                           
  1832                           ;doprnt.c: 585: break;
  1833  000060  D001               	goto	l3978
  1834                           
  1835                           ;doprnt.c: 586: }
  1836  000062  D7F5               	goto	l3976
  1837  000064                     l3978:
  1838                           
  1839                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1840  000064  C01B  FFF6         	movff	printf@f,tblptrl
  1841  000068  C01C  FFF7         	movff	printf@f+1,tblptrh
  1842  00006C                     	if	0	;tblptru may be non-zero
  1843  00006C                     	endif
  1844  00006C                     	if	0	;tblptru may be non-zero
  1845  00006C                     	endif
  1846  00006C  0008               	tblrd		*
  1847  00006E  50F5               	movf	tablat,w,c
  1848  000070  EC7C  F008         	call	_isdigit
  1849  000074  A0D8               	btfss	status,0,c
  1850  000076  D03B               	goto	l3994
  1851                           
  1852                           ;doprnt.c: 598: width = 0;
  1853  000078  0E00               	movlw	0
  1854  00007A  6E35               	movwf	printf@width+1,c
  1855  00007C  0E00               	movlw	0
  1856  00007E  6E34               	movwf	printf@width,c
  1857  000080  D000               	goto	l3982
  1858  000082                     l3982:
  1859                           
  1860                           ;doprnt.c: 600: width *= 10;
  1861  000082  C034  F00F         	movff	printf@width,___wmul@multiplier
  1862  000086  C035  F010         	movff	printf@width+1,___wmul@multiplier+1
  1863  00008A  0E00               	movlw	0
  1864  00008C  6E12               	movwf	___wmul@multiplicand+1,c
  1865  00008E  0E0A               	movlw	10
  1866  000090  6E11               	movwf	___wmul@multiplicand,c
  1867  000092  EC68  F008         	call	___wmul	;wreg free
  1868  000096  C00F  F034         	movff	?___wmul,printf@width
  1869  00009A  C010  F035         	movff	?___wmul+1,printf@width+1
  1870                           
  1871                           ;doprnt.c: 601: width += *f++ - '0';
  1872  00009E  0ED0               	movlw	208
  1873  0000A0  6E29               	movwf	??_printf& (0+255),c
  1874  0000A2  0EFF               	movlw	255
  1875  0000A4  6E2A               	movwf	(??_printf+1)& (0+255),c
  1876  0000A6  C01B  FFF6         	movff	printf@f,tblptrl
  1877  0000AA  C01C  FFF7         	movff	printf@f+1,tblptrh
  1878  0000AE                     	if	0	;tblptru may be non-zero
  1879  0000AE                     	endif
  1880  0000AE                     	if	0	;tblptru may be non-zero
  1881  0000AE                     	endif
  1882  0000AE  0008               	tblrd		*
  1883  0000B0  50F5               	movf	tablat,w,c
  1884  0000B2  6E2B               	movwf	(??_printf+2)& (0+255),c
  1885  0000B4  6A2C               	clrf	(??_printf+3)& (0+255),c
  1886  0000B6  5029               	movf	??_printf,w,c
  1887  0000B8  262B               	addwf	??_printf+2,f,c
  1888  0000BA  502A               	movf	??_printf+1,w,c
  1889  0000BC  222C               	addwfc	??_printf+3,f,c
  1890  0000BE  502B               	movf	??_printf+2,w,c
  1891  0000C0  2634               	addwf	printf@width,f,c
  1892  0000C2  502C               	movf	??_printf+3,w,c
  1893  0000C4  2235               	addwfc	printf@width+1,f,c
  1894  0000C6  4A1B               	infsnz	printf@f,f,c
  1895  0000C8  2A1C               	incf	printf@f+1,f,c
  1896                           
  1897                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1898  0000CA  C01B  FFF6         	movff	printf@f,tblptrl
  1899  0000CE  C01C  FFF7         	movff	printf@f+1,tblptrh
  1900  0000D2                     	if	0	;tblptru may be non-zero
  1901  0000D2                     	endif
  1902  0000D2                     	if	0	;tblptru may be non-zero
  1903  0000D2                     	endif
  1904  0000D2  0008               	tblrd		*
  1905  0000D4  50F5               	movf	tablat,w,c
  1906  0000D6  EC7C  F008         	call	_isdigit
  1907  0000DA  A0D8               	btfss	status,0,c
  1908  0000DC  D008               	goto	l3994
  1909  0000DE  D7D1               	goto	l3982
  1910                           
  1911                           ;doprnt.c: 608: }
  1912                           ;doprnt.c: 635: switch(c = *f++) {
  1913  0000E0  D006               	goto	l3994
  1914                           
  1915                           ;doprnt.c: 638: goto alldone;
  1916                           
  1917                           ;doprnt.c: 637: case 0:
  1918  0000E2  D148               	goto	l558
  1919                           
  1920                           ;doprnt.c: 698: case 'i':
  1921                           ;doprnt.c: 699: break;
  1922                           
  1923                           ;doprnt.c: 697: case 'd':
  1924  0000E4  D01B               	goto	l521
  1925  0000E6                     l3990:
  1926                           
  1927                           ;doprnt.c: 721: flag |= 0x80;
  1928  0000E6  8E33               	bsf	printf@flag,7,c
  1929                           
  1930                           ;doprnt.c: 723: break;
  1931  0000E8  D019               	goto	l521
  1932                           
  1933                           ;doprnt.c: 813: continue;
  1934                           
  1935                           ;doprnt.c: 802: default:
  1936  0000EA  D136               	goto	l4092
  1937                           
  1938                           ;doprnt.c: 822: }
  1939  0000EC  D017               	goto	l521
  1940  0000EE                     l3994:
  1941  0000EE  C01B  FFF6         	movff	printf@f,tblptrl
  1942  0000F2  C01C  FFF7         	movff	printf@f+1,tblptrh
  1943  0000F6  4A1B               	infsnz	printf@f,f,c
  1944  0000F8  2A1C               	incf	printf@f+1,f,c
  1945  0000FA                     	if	0	;tblptru may be non-zero
  1946  0000FA                     	endif
  1947  0000FA                     	if	0	;tblptru may be non-zero
  1948  0000FA                     	endif
  1949  0000FA  0008               	tblrd		*
  1950  0000FC  CFF5 F036          	movff	tablat,printf@c
  1951  000100  5036               	movf	printf@c,w,c
  1952                           
  1953                           ; Switch size 1, requested type "space"
  1954                           ; Number of cases is 4, Range of values is 0 to 120
  1955                           ; switch strategies available:
  1956                           ; Name         Instructions Cycles
  1957                           ; simple_byte           13     7 (average)
  1958                           ;	Chosen strategy is simple_byte
  1959  000102  0A00               	xorlw	0	; case 0
  1960  000104  B4D8               	btfsc	status,2,c
  1961  000106  D136               	goto	l558
  1962  000108  0A64               	xorlw	100	; case 100
  1963  00010A  B4D8               	btfsc	status,2,c
  1964  00010C  D007               	goto	l521
  1965  00010E  0A0D               	xorlw	13	; case 105
  1966  000110  B4D8               	btfsc	status,2,c
  1967  000112  D004               	goto	l521
  1968  000114  0A11               	xorlw	17	; case 120
  1969  000116  B4D8               	btfsc	status,2,c
  1970  000118  D7E6               	goto	l3990
  1971  00011A  D11E               	goto	l4092
  1972  00011C                     l521:
  1973                           
  1974                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  1975  00011C  BE33               	btfsc	printf@flag,7,c
  1976  00011E  D015               	goto	l4006
  1977                           
  1978                           ;doprnt.c: 1253: {
  1979                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1980  000120  C02E  FFD9         	movff	printf@ap,fsr2l
  1981  000124  C02F  FFDA         	movff	printf@ap+1,fsr2h
  1982  000128  CFDE F031          	movff	postinc2,printf@val
  1983  00012C  CFDD F032          	movff	postdec2,printf@val+1
  1984  000130  0E02               	movlw	2
  1985  000132  262E               	addwf	printf@ap,f,c
  1986  000134  0E00               	movlw	0
  1987  000136  222F               	addwfc	printf@ap+1,f,c
  1988                           
  1989                           ;doprnt.c: 1261: if((int)val < 0) {
  1990  000138  AE32               	btfss	printf@val+1,7,c
  1991  00013A  D04E               	goto	l4040
  1992                           
  1993                           ;doprnt.c: 1262: flag |= 0x03;
  1994  00013C  0E03               	movlw	3
  1995  00013E  1233               	iorwf	printf@flag,f,c
  1996                           
  1997                           ;doprnt.c: 1263: val = -val;
  1998  000140  6C31               	negf	printf@val,c
  1999  000142  1E32               	comf	printf@val+1,f,c
  2000  000144  B0D8               	btfsc	status,0,c
  2001  000146  2A32               	incf	printf@val+1,f,c
  2002                           
  2003                           ;doprnt.c: 1264: }
  2004                           ;doprnt.c: 1266: }
  2005  000148  D047               	goto	l4040
  2006  00014A                     l4006:
  2007                           
  2008                           ;doprnt.c: 1268: else
  2009                           ;doprnt.c: 1273: {
  2010                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2011  00014A  C02E  FFD9         	movff	printf@ap,fsr2l
  2012  00014E  C02F  FFDA         	movff	printf@ap+1,fsr2h
  2013  000152  CFDE F031          	movff	postinc2,printf@val
  2014  000156  CFDD F032          	movff	postdec2,printf@val+1
  2015  00015A  0E02               	movlw	2
  2016  00015C  262E               	addwf	printf@ap,f,c
  2017  00015E  0E00               	movlw	0
  2018  000160  222F               	addwfc	printf@ap+1,f,c
  2019                           
  2020                           ;doprnt.c: 1287: }
  2021                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2022  000162  D03A               	goto	l4040
  2023  000164                     l4010:
  2024                           
  2025                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2026  000164  0E01               	movlw	1
  2027  000166  6E36               	movwf	printf@c,c
  2028  000168                     l4012:
  2029  000168  0E05               	movlw	5
  2030  00016A  1836               	xorwf	printf@c,w,c
  2031  00016C  B4D8               	btfsc	status,2,c
  2032  00016E  D03D               	goto	l4042
  2033  000170  D001               	goto	l4016
  2034  000172  D03B               	goto	l4042
  2035  000174                     l4016:
  2036                           
  2037                           ;doprnt.c: 1306: if(val < dpowers[c])
  2038  000174  5036               	movf	printf@c,w,c
  2039  000176  0D02               	mullw	2
  2040  000178  0E76               	movlw	low _dpowers
  2041  00017A  24F3               	addwf	prodl,w,c
  2042  00017C  6EF6               	movwf	tblptrl,c
  2043  00017E  0EFF               	movlw	high _dpowers
  2044  000180  20F4               	addwfc	prodh,w,c
  2045  000182  6EF7               	movwf	tblptrh,c
  2046  000184                     	if	0	;There are less than 3 active tblptr bytes
  2047  000184                     	endif
  2048  000184  0009               	tblrd		*+
  2049  000186  50F5               	movf	tablat,w,c
  2050  000188  5C31               	subwf	printf@val,w,c
  2051  00018A  0009               	tblrd		*+
  2052  00018C  50F5               	movf	tablat,w,c
  2053  00018E  5832               	subwfb	printf@val+1,w,c
  2054  000190  A0D8               	btfss	status,0,c
  2055  000192  D02B               	goto	l4042
  2056  000194  D001               	goto	l4020
  2057                           
  2058                           ;doprnt.c: 1307: break;
  2059  000196  D029               	goto	l4042
  2060  000198                     l4020:
  2061  000198  2A36               	incf	printf@c,f,c
  2062  00019A  D7E6               	goto	l4012
  2063                           
  2064                           ;doprnt.c: 1309: break;
  2065  00019C  D026               	goto	l4042
  2066  00019E                     l4024:
  2067                           
  2068                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2069  00019E  0E01               	movlw	1
  2070  0001A0  6E36               	movwf	printf@c,c
  2071  0001A2                     l4026:
  2072  0001A2  0E04               	movlw	4
  2073  0001A4  1836               	xorwf	printf@c,w,c
  2074  0001A6  B4D8               	btfsc	status,2,c
  2075  0001A8  D020               	goto	l4042
  2076  0001AA  D001               	goto	l4030
  2077  0001AC  D01E               	goto	l4042
  2078  0001AE                     l4030:
  2079                           
  2080                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2081  0001AE  5036               	movf	printf@c,w,c
  2082  0001B0  0D02               	mullw	2
  2083  0001B2  0E80               	movlw	low _hexpowers
  2084  0001B4  24F3               	addwf	prodl,w,c
  2085  0001B6  6EF6               	movwf	tblptrl,c
  2086  0001B8  0EFF               	movlw	high _hexpowers
  2087  0001BA  20F4               	addwfc	prodh,w,c
  2088  0001BC  6EF7               	movwf	tblptrh,c
  2089  0001BE                     	if	0	;There are less than 3 active tblptr bytes
  2090  0001BE                     	endif
  2091  0001BE  0009               	tblrd		*+
  2092  0001C0  50F5               	movf	tablat,w,c
  2093  0001C2  5C31               	subwf	printf@val,w,c
  2094  0001C4  0009               	tblrd		*+
  2095  0001C6  50F5               	movf	tablat,w,c
  2096  0001C8  5832               	subwfb	printf@val+1,w,c
  2097  0001CA  A0D8               	btfss	status,0,c
  2098  0001CC  D00E               	goto	l4042
  2099  0001CE  D001               	goto	l4034
  2100                           
  2101                           ;doprnt.c: 1318: break;
  2102  0001D0  D00C               	goto	l4042
  2103  0001D2                     l4034:
  2104  0001D2  2A36               	incf	printf@c,f,c
  2105  0001D4  D7E6               	goto	l4026
  2106                           
  2107                           ;doprnt.c: 1336: }
  2108                           
  2109                           ;doprnt.c: 1320: break;
  2110  0001D6  D009               	goto	l4042
  2111  0001D8                     l4040:
  2112  0001D8  5033               	movf	printf@flag,w,c
  2113  0001DA  0B80               	andlw	128
  2114                           
  2115                           ; Switch size 1, requested type "space"
  2116                           ; Number of cases is 2, Range of values is 0 to 128
  2117                           ; switch strategies available:
  2118                           ; Name         Instructions Cycles
  2119                           ; simple_byte            7     4 (average)
  2120                           ;	Chosen strategy is simple_byte
  2121  0001DC  0A00               	xorlw	0	; case 0
  2122  0001DE  B4D8               	btfsc	status,2,c
  2123  0001E0  D7C1               	goto	l4010
  2124  0001E2  0A80               	xorlw	128	; case 128
  2125  0001E4  B4D8               	btfsc	status,2,c
  2126  0001E6  D7DB               	goto	l4024
  2127  0001E8  D000               	goto	l4042
  2128  0001EA                     l4042:
  2129                           
  2130                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2131  0001EA  5034               	movf	printf@width,w,c
  2132  0001EC  1035               	iorwf	printf@width+1,w,c
  2133  0001EE  B4D8               	btfsc	status,2,c
  2134  0001F0  D00A               	goto	l4048
  2135  0001F2  C033  F029         	movff	printf@flag,??_printf
  2136  0001F6  0E03               	movlw	3
  2137  0001F8  1629               	andwf	??_printf,f,c
  2138  0001FA  B4D8               	btfsc	status,2,c
  2139  0001FC  D004               	goto	l4048
  2140                           
  2141                           ;doprnt.c: 1346: width--;
  2142  0001FE  0634               	decf	printf@width,f,c
  2143  000200  A0D8               	btfss	status,0,c
  2144  000202  0635               	decf	printf@width+1,f,c
  2145  000204  D000               	goto	l4048
  2146  000206                     l4048:
  2147                           
  2148                           ;doprnt.c: 1381: if(width > c)
  2149  000206  0E80               	movlw	128
  2150  000208  BE36               	btfsc	printf@c,7,c
  2151  00020A  0E7F               	movlw	127
  2152  00020C  6E29               	movwf	??_printf& (0+255),c
  2153  00020E  5034               	movf	printf@width,w,c
  2154  000210  5C36               	subwf	printf@c,w,c
  2155  000212  5035               	movf	printf@width+1,w,c
  2156  000214  0A80               	xorlw	128
  2157  000216  5829               	subwfb	??_printf& (0+255),w,c
  2158  000218  B0D8               	btfsc	status,0,c
  2159  00021A  D007               	goto	l4052
  2160                           
  2161                           ;doprnt.c: 1382: width -= c;
  2162  00021C  5036               	movf	printf@c,w,c
  2163  00021E  5E34               	subwf	printf@width,f,c
  2164  000220  0E00               	movlw	0
  2165  000222  BE36               	btfsc	printf@c,7,c
  2166  000224  0EFF               	movlw	255
  2167  000226  5A35               	subwfb	printf@width+1,f,c
  2168  000228  D005               	goto	l4054
  2169  00022A                     l4052:
  2170                           
  2171                           ;doprnt.c: 1383: else
  2172                           ;doprnt.c: 1384: width = 0;
  2173  00022A  0E00               	movlw	0
  2174  00022C  6E35               	movwf	printf@width+1,c
  2175  00022E  0E00               	movlw	0
  2176  000230  6E34               	movwf	printf@width,c
  2177  000232  D000               	goto	l4054
  2178  000234                     l4054:
  2179                           
  2180                           ;doprnt.c: 1387: if(flag & 0x04) {
  2181  000234  A433               	btfss	printf@flag,2,c
  2182  000236  D01A               	goto	l4066
  2183                           
  2184                           ;doprnt.c: 1392: if(flag & 0x03)
  2185  000238  C033  F029         	movff	printf@flag,??_printf
  2186  00023C  0E03               	movlw	3
  2187  00023E  1629               	andwf	??_printf,f,c
  2188  000240  B4D8               	btfsc	status,2,c
  2189  000242  D004               	goto	l4060
  2190                           
  2191                           ;doprnt.c: 1393: (putch('-') );
  2192  000244  0E2D               	movlw	45
  2193  000246  EC1A  F009         	call	_putch
  2194  00024A  D000               	goto	l4060
  2195  00024C                     l4060:
  2196                           
  2197                           ;doprnt.c: 1415: if(width)
  2198  00024C  5034               	movf	printf@width,w,c
  2199  00024E  1035               	iorwf	printf@width+1,w,c
  2200  000250  B4D8               	btfsc	status,2,c
  2201  000252  D026               	goto	l4076
  2202  000254                     l4062:
  2203                           
  2204                           ;doprnt.c: 1417: (putch('0') );
  2205  000254  0E30               	movlw	48
  2206  000256  EC1A  F009         	call	_putch
  2207                           
  2208                           ;doprnt.c: 1418: while(--width);
  2209  00025A  0634               	decf	printf@width,f,c
  2210  00025C  A0D8               	btfss	status,0,c
  2211  00025E  0635               	decf	printf@width+1,f,c
  2212  000260  5034               	movf	printf@width,w,c
  2213  000262  1035               	iorwf	printf@width+1,w,c
  2214  000264  B4D8               	btfsc	status,2,c
  2215  000266  D01C               	goto	l4076
  2216  000268  D7F5               	goto	l4062
  2217                           
  2218                           ;doprnt.c: 1420: } else
  2219  00026A  D01A               	goto	l4076
  2220  00026C                     l4066:
  2221                           
  2222                           ;doprnt.c: 1422: {
  2223                           ;doprnt.c: 1424: if(width
  2224                           ;doprnt.c: 1428: )
  2225  00026C  5034               	movf	printf@width,w,c
  2226  00026E  1035               	iorwf	printf@width+1,w,c
  2227  000270  B4D8               	btfsc	status,2,c
  2228  000272  D00C               	goto	l4072
  2229  000274                     l4068:
  2230                           
  2231                           ;doprnt.c: 1430: (putch(' ') );
  2232  000274  0E20               	movlw	32
  2233  000276  EC1A  F009         	call	_putch
  2234                           
  2235                           ;doprnt.c: 1431: while(--width);
  2236  00027A  0634               	decf	printf@width,f,c
  2237  00027C  A0D8               	btfss	status,0,c
  2238  00027E  0635               	decf	printf@width+1,f,c
  2239  000280  5034               	movf	printf@width,w,c
  2240  000282  1035               	iorwf	printf@width+1,w,c
  2241  000284  B4D8               	btfsc	status,2,c
  2242  000286  D002               	goto	l4072
  2243  000288  D7F5               	goto	l4068
  2244  00028A  D000               	goto	l4072
  2245  00028C                     l4072:
  2246                           
  2247                           ;doprnt.c: 1438: if(flag & 0x03)
  2248  00028C  C033  F029         	movff	printf@flag,??_printf
  2249  000290  0E03               	movlw	3
  2250  000292  1629               	andwf	??_printf,f,c
  2251  000294  B4D8               	btfsc	status,2,c
  2252  000296  D004               	goto	l4076
  2253                           
  2254                           ;doprnt.c: 1439: (putch('-') );
  2255  000298  0E2D               	movlw	45
  2256  00029A  EC1A  F009         	call	_putch
  2257  00029E  D000               	goto	l4076
  2258  0002A0                     l4076:
  2259                           
  2260                           ;doprnt.c: 1469: }
  2261                           ;doprnt.c: 1472: prec = c;
  2262  0002A0  C036  F030         	movff	printf@c,printf@prec
  2263                           
  2264                           ;doprnt.c: 1474: while(prec--) {
  2265  0002A4  D053               	goto	l4090
  2266                           
  2267                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  2268  0002A6  D045               	goto	l4086
  2269  0002A8                     l4078:
  2270                           
  2271                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2272  0002A8  5030               	movf	printf@prec,w,c
  2273  0002AA  0D02               	mullw	2
  2274  0002AC  0E76               	movlw	low _dpowers
  2275  0002AE  24F3               	addwf	prodl,w,c
  2276  0002B0  6EF6               	movwf	tblptrl,c
  2277  0002B2  0EFF               	movlw	high _dpowers
  2278  0002B4  20F4               	addwfc	prodh,w,c
  2279  0002B6  6EF7               	movwf	tblptrh,c
  2280  0002B8                     	if	0	;There are less than 3 active tblptr bytes
  2281  0002B8                     	endif
  2282  0002B8  0009               	tblrd		*+
  2283  0002BA  CFF5 F011          	movff	tablat,___lwdiv@divisor
  2284  0002BE  000A               	tblrd		*-
  2285  0002C0  CFF5 F012          	movff	tablat,___lwdiv@divisor+1
  2286  0002C4  C031  F00F         	movff	printf@val,___lwdiv@dividend
  2287  0002C8  C032  F010         	movff	printf@val+1,___lwdiv@dividend+1
  2288  0002CC  EC50  F006         	call	___lwdiv	;wreg free
  2289  0002D0  C00F  F016         	movff	?___lwdiv,___lwmod@dividend
  2290  0002D4  C010  F017         	movff	?___lwdiv+1,___lwmod@dividend+1
  2291  0002D8  0E00               	movlw	0
  2292  0002DA  6E19               	movwf	___lwmod@divisor+1,c
  2293  0002DC  0E0A               	movlw	10
  2294  0002DE  6E18               	movwf	___lwmod@divisor,c
  2295  0002E0  ECF8  F006         	call	___lwmod	;wreg free
  2296  0002E4  5016               	movf	?___lwmod,w,c
  2297  0002E6  0F30               	addlw	48
  2298  0002E8  6E36               	movwf	printf@c,c
  2299                           
  2300                           ;doprnt.c: 1491: break;
  2301  0002EA  D02C               	goto	l4088
  2302  0002EC                     l4080:
  2303                           
  2304                           ;doprnt.c: 1499: {
  2305                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2306  0002EC  C031  F00F         	movff	printf@val,___lwdiv@dividend
  2307  0002F0  C032  F010         	movff	printf@val+1,___lwdiv@dividend+1
  2308  0002F4  5030               	movf	printf@prec,w,c
  2309  0002F6  0D02               	mullw	2
  2310  0002F8  0E80               	movlw	low _hexpowers
  2311  0002FA  24F3               	addwf	prodl,w,c
  2312  0002FC  6EF6               	movwf	tblptrl,c
  2313  0002FE  0EFF               	movlw	high _hexpowers
  2314  000300  20F4               	addwfc	prodh,w,c
  2315  000302  6EF7               	movwf	tblptrh,c
  2316  000304                     	if	0	;There are less than 3 active tblptr bytes
  2317  000304                     	endif
  2318  000304  0009               	tblrd		*+
  2319  000306  CFF5 F011          	movff	tablat,___lwdiv@divisor
  2320  00030A  000A               	tblrd		*-
  2321  00030C  CFF5 F012          	movff	tablat,___lwdiv@divisor+1
  2322  000310  EC50  F006         	call	___lwdiv	;wreg free
  2323  000314  500F               	movf	?___lwdiv,w,c
  2324  000316  0B0F               	andlw	15
  2325  000318  6E2D               	movwf	printf@idx,c
  2326                           
  2327                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2328  00031A  502D               	movf	printf@idx,w,c
  2329  00031C  0D01               	mullw	1
  2330  00031E  0EE5               	movlw	low STR_5
  2331  000320  24F3               	addwf	prodl,w,c
  2332  000322  6EF6               	movwf	tblptrl,c
  2333  000324  0EFF               	movlw	high STR_5
  2334  000326  20F4               	addwfc	prodh,w,c
  2335  000328  6EF7               	movwf	tblptrh,c
  2336  00032A                     	if	0	;There are less than 3 active tblptr bytes
  2337  00032A                     	endif
  2338  00032A  0008               	tblrd		*
  2339  00032C  CFF5 F036          	movff	tablat,printf@c
  2340                           
  2341                           ;doprnt.c: 1523: }
  2342                           
  2343                           ;doprnt.c: 1508: }
  2344                           ;doprnt.c: 1510: break;
  2345  000330  D009               	goto	l4088
  2346  000332                     l4086:
  2347  000332  5033               	movf	printf@flag,w,c
  2348  000334  0B80               	andlw	128
  2349                           
  2350                           ; Switch size 1, requested type "space"
  2351                           ; Number of cases is 2, Range of values is 0 to 128
  2352                           ; switch strategies available:
  2353                           ; Name         Instructions Cycles
  2354                           ; simple_byte            7     4 (average)
  2355                           ;	Chosen strategy is simple_byte
  2356  000336  0A00               	xorlw	0	; case 0
  2357  000338  B4D8               	btfsc	status,2,c
  2358  00033A  D7B6               	goto	l4078
  2359  00033C  0A80               	xorlw	128	; case 128
  2360  00033E  B4D8               	btfsc	status,2,c
  2361  000340  D7D5               	goto	l4080
  2362  000342  D000               	goto	l4088
  2363  000344                     l4088:
  2364                           
  2365                           ;doprnt.c: 1524: (putch(c) );
  2366  000344  5036               	movf	printf@c,w,c
  2367  000346  EC1A  F009         	call	_putch
  2368  00034A  D000               	goto	l4090
  2369  00034C                     l4090:
  2370  00034C  0630               	decf	printf@prec,f,c
  2371  00034E  2830               	incf	printf@prec,w,c
  2372  000350  B4D8               	btfsc	status,2,c
  2373  000352  D002               	goto	l4092
  2374  000354  D7EE               	goto	l4086
  2375  000356  D000               	goto	l4092
  2376  000358                     l4092:
  2377  000358  C01B  FFF6         	movff	printf@f,tblptrl
  2378  00035C  C01C  FFF7         	movff	printf@f+1,tblptrh
  2379  000360  4A1B               	infsnz	printf@f,f,c
  2380  000362  2A1C               	incf	printf@f+1,f,c
  2381  000364                     	if	0	;tblptru may be non-zero
  2382  000364                     	endif
  2383  000364                     	if	0	;tblptru may be non-zero
  2384  000364                     	endif
  2385  000364  0008               	tblrd		*
  2386  000366  CFF5 F036          	movff	tablat,printf@c
  2387  00036A  5036               	movf	printf@c,w,c
  2388  00036C  B4D8               	btfsc	status,2,c
  2389  00036E  D002               	goto	l558
  2390  000370  D65A               	goto	l3966
  2391  000372  D000               	goto	l558
  2392  000374                     l558:
  2393  000374  0012               	return		;funcret
  2394  000376                     __end_of_printf:
  2395                           	opt stack 0
  2396                           tblptru	equ	0xFF8
  2397                           tblptrh	equ	0xFF7
  2398                           tblptrl	equ	0xFF6
  2399                           tablat	equ	0xFF5
  2400                           prodh	equ	0xFF4
  2401                           prodl	equ	0xFF3
  2402                           postinc0	equ	0xFEE
  2403                           wreg	equ	0xFE8
  2404                           postdec1	equ	0xFE5
  2405                           fsr1l	equ	0xFE1
  2406                           postinc2	equ	0xFDE
  2407                           postdec2	equ	0xFDD
  2408                           fsr2h	equ	0xFDA
  2409                           fsr2l	equ	0xFD9
  2410                           status	equ	0xFD8
  2411                           
  2412 ;; *************** function _putch *****************
  2413 ;; Defined at:
  2414 ;;		line 82 in file "Lab11p2.c"
  2415 ;; Parameters:    Size  Location     Type
  2416 ;;  c               1    wreg     unsigned char 
  2417 ;; Auto vars:     Size  Location     Type
  2418 ;;  c               1   14[COMRAM] unsigned char 
  2419 ;; Return value:  Size  Location     Type
  2420 ;;		None               void
  2421 ;; Registers used:
  2422 ;;		wreg
  2423 ;; Tracked objects:
  2424 ;;		On entry : 0/0
  2425 ;;		On exit  : 0/0
  2426 ;;		Unchanged: 0/0
  2427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2429 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2431 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2432 ;;Total ram usage:        1 bytes
  2433 ;; Hardware stack levels used:    1
  2434 ;; Hardware stack levels required when called:    1
  2435 ;; This function calls:
  2436 ;;		Nothing
  2437 ;; This function is called by:
  2438 ;;		_printf
  2439 ;; This function uses a non-reentrant model
  2440 ;;
  2441                           
  2442                           	psect	text2
  2443  001234                     __ptext2:
  2444                           	opt stack 0
  2445  001234                     _putch:
  2446                           	opt stack 28
  2447                           
  2448                           ;incstack = 0
  2449                           ;putch@c stored from wreg
  2450  001234  6E0F               	movwf	putch@c,c
  2451                           
  2452                           ;Lab11p2.c: 84: while (!TRMT);
  2453  001236  D000               	goto	l459
  2454  001238                     l459:
  2455  001238  A2AC               	btfss	4012,1,c	;volatile
  2456  00123A  D7FE               	goto	l459
  2457                           
  2458                           ;Lab11p2.c: 85: TXREG = c;
  2459  00123C  C00F  FFAD         	movff	putch@c,4013	;volatile
  2460  001240  0012               	return		;funcret
  2461  001242                     __end_of_putch:
  2462                           	opt stack 0
  2463                           tblptru	equ	0xFF8
  2464                           tblptrh	equ	0xFF7
  2465                           tblptrl	equ	0xFF6
  2466                           tablat	equ	0xFF5
  2467                           prodh	equ	0xFF4
  2468                           prodl	equ	0xFF3
  2469                           postinc0	equ	0xFEE
  2470                           wreg	equ	0xFE8
  2471                           postdec1	equ	0xFE5
  2472                           fsr1l	equ	0xFE1
  2473                           postinc2	equ	0xFDE
  2474                           postdec2	equ	0xFDD
  2475                           fsr2h	equ	0xFDA
  2476                           fsr2l	equ	0xFD9
  2477                           status	equ	0xFD8
  2478                           
  2479 ;; *************** function _isdigit *****************
  2480 ;; Defined at:
  2481 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2482 ;; Parameters:    Size  Location     Type
  2483 ;;  c               1    wreg     unsigned char 
  2484 ;; Auto vars:     Size  Location     Type
  2485 ;;  c               1   16[COMRAM] unsigned char 
  2486 ;; Return value:  Size  Location     Type
  2487 ;;		None               void
  2488 ;; Registers used:
  2489 ;;		wreg, status,2, status,0
  2490 ;; Tracked objects:
  2491 ;;		On entry : 0/0
  2492 ;;		On exit  : 0/0
  2493 ;;		Unchanged: 0/0
  2494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2496 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2497 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2498 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2499 ;;Total ram usage:        3 bytes
  2500 ;; Hardware stack levels used:    1
  2501 ;; Hardware stack levels required when called:    1
  2502 ;; This function calls:
  2503 ;;		Nothing
  2504 ;; This function is called by:
  2505 ;;		_printf
  2506 ;; This function uses a non-reentrant model
  2507 ;;
  2508                           
  2509                           	psect	text3
  2510  0010F8                     __ptext3:
  2511                           	opt stack 0
  2512  0010F8                     _isdigit:
  2513                           	opt stack 28
  2514                           
  2515                           ;incstack = 0
  2516                           ;isdigit@c stored from wreg
  2517  0010F8  6E11               	movwf	isdigit@c,c
  2518  0010FA  0E00               	movlw	0
  2519  0010FC  6E10               	movwf	_isdigit$1488,c
  2520  0010FE  0E3A               	movlw	58
  2521  001100  6011               	cpfslt	isdigit@c,c
  2522  001102  D006               	goto	l2904
  2523  001104  0E2F               	movlw	47
  2524  001106  6411               	cpfsgt	isdigit@c,c
  2525  001108  D003               	goto	l2904
  2526  00110A  0E01               	movlw	1
  2527  00110C  6E10               	movwf	_isdigit$1488,c
  2528  00110E  D000               	goto	l2904
  2529  001110                     l2904:
  2530  001110  C010  F00F         	movff	_isdigit$1488,??_isdigit
  2531  001114  300F               	rrcf	??_isdigit,w,c
  2532  001116  D000               	goto	l1025
  2533  001118                     l1025:
  2534  001118  0012               	return		;funcret
  2535  00111A                     __end_of_isdigit:
  2536                           	opt stack 0
  2537                           tblptru	equ	0xFF8
  2538                           tblptrh	equ	0xFF7
  2539                           tblptrl	equ	0xFF6
  2540                           tablat	equ	0xFF5
  2541                           prodh	equ	0xFF4
  2542                           prodl	equ	0xFF3
  2543                           postinc0	equ	0xFEE
  2544                           wreg	equ	0xFE8
  2545                           postdec1	equ	0xFE5
  2546                           fsr1l	equ	0xFE1
  2547                           postinc2	equ	0xFDE
  2548                           postdec2	equ	0xFDD
  2549                           fsr2h	equ	0xFDA
  2550                           fsr2l	equ	0xFD9
  2551                           status	equ	0xFD8
  2552                           
  2553 ;; *************** function ___lwmod *****************
  2554 ;; Defined at:
  2555 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  2556 ;; Parameters:    Size  Location     Type
  2557 ;;  dividend        2   21[COMRAM] unsigned int 
  2558 ;;  divisor         2   23[COMRAM] unsigned int 
  2559 ;; Auto vars:     Size  Location     Type
  2560 ;;  counter         1   25[COMRAM] unsigned char 
  2561 ;; Return value:  Size  Location     Type
  2562 ;;                  2   21[COMRAM] unsigned int 
  2563 ;; Registers used:
  2564 ;;		wreg, status,2, status,0
  2565 ;; Tracked objects:
  2566 ;;		On entry : 0/0
  2567 ;;		On exit  : 0/0
  2568 ;;		Unchanged: 0/0
  2569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2570 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2571 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2573 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2574 ;;Total ram usage:        5 bytes
  2575 ;; Hardware stack levels used:    1
  2576 ;; Hardware stack levels required when called:    1
  2577 ;; This function calls:
  2578 ;;		Nothing
  2579 ;; This function is called by:
  2580 ;;		_printf
  2581 ;; This function uses a non-reentrant model
  2582 ;;
  2583                           
  2584                           	psect	text4
  2585  000DF0                     __ptext4:
  2586                           	opt stack 0
  2587  000DF0                     ___lwmod:
  2588                           	opt stack 28
  2589                           
  2590                           ;incstack = 0
  2591  000DF0  5018               	movf	___lwmod@divisor,w,c
  2592  000DF2  1019               	iorwf	___lwmod@divisor+1,w,c
  2593  000DF4  B4D8               	btfsc	status,2,c
  2594  000DF6  D01D               	goto	l1127
  2595  000DF8  0E01               	movlw	1
  2596  000DFA  6E1A               	movwf	___lwmod@counter,c
  2597  000DFC  D005               	goto	l2936
  2598  000DFE                     l2934:
  2599  000DFE  90D8               	bcf	status,0,c
  2600  000E00  3618               	rlcf	___lwmod@divisor,f,c
  2601  000E02  3619               	rlcf	___lwmod@divisor+1,f,c
  2602  000E04  2A1A               	incf	___lwmod@counter,f,c
  2603  000E06  D000               	goto	l2936
  2604  000E08                     l2936:
  2605  000E08  BE19               	btfsc	___lwmod@divisor+1,7,c
  2606  000E0A  D002               	goto	l2938
  2607  000E0C  D7F8               	goto	l2934
  2608  000E0E  D000               	goto	l2938
  2609  000E10                     l2938:
  2610  000E10  5018               	movf	___lwmod@divisor,w,c
  2611  000E12  5C16               	subwf	___lwmod@dividend,w,c
  2612  000E14  5019               	movf	___lwmod@divisor+1,w,c
  2613  000E16  5817               	subwfb	___lwmod@dividend+1,w,c
  2614  000E18  A0D8               	btfss	status,0,c
  2615  000E1A  D005               	goto	l2942
  2616  000E1C  5018               	movf	___lwmod@divisor,w,c
  2617  000E1E  5E16               	subwf	___lwmod@dividend,f,c
  2618  000E20  5019               	movf	___lwmod@divisor+1,w,c
  2619  000E22  5A17               	subwfb	___lwmod@dividend+1,f,c
  2620  000E24  D000               	goto	l2942
  2621  000E26                     l2942:
  2622  000E26  90D8               	bcf	status,0,c
  2623  000E28  3219               	rrcf	___lwmod@divisor+1,f,c
  2624  000E2A  3218               	rrcf	___lwmod@divisor,f,c
  2625  000E2C  2E1A               	decfsz	___lwmod@counter,f,c
  2626  000E2E  D7F0               	goto	l2938
  2627  000E30  D000               	goto	l1127
  2628  000E32                     l1127:
  2629  000E32  C016  F016         	movff	___lwmod@dividend,?___lwmod
  2630  000E36  C017  F017         	movff	___lwmod@dividend+1,?___lwmod+1
  2631  000E3A  0012               	return		;funcret
  2632  000E3C                     __end_of___lwmod:
  2633                           	opt stack 0
  2634                           tblptru	equ	0xFF8
  2635                           tblptrh	equ	0xFF7
  2636                           tblptrl	equ	0xFF6
  2637                           tablat	equ	0xFF5
  2638                           prodh	equ	0xFF4
  2639                           prodl	equ	0xFF3
  2640                           postinc0	equ	0xFEE
  2641                           wreg	equ	0xFE8
  2642                           postdec1	equ	0xFE5
  2643                           fsr1l	equ	0xFE1
  2644                           postinc2	equ	0xFDE
  2645                           postdec2	equ	0xFDD
  2646                           fsr2h	equ	0xFDA
  2647                           fsr2l	equ	0xFD9
  2648                           status	equ	0xFD8
  2649                           
  2650 ;; *************** function ___lwdiv *****************
  2651 ;; Defined at:
  2652 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2653 ;; Parameters:    Size  Location     Type
  2654 ;;  dividend        2   14[COMRAM] unsigned int 
  2655 ;;  divisor         2   16[COMRAM] unsigned int 
  2656 ;; Auto vars:     Size  Location     Type
  2657 ;;  quotient        2   18[COMRAM] unsigned int 
  2658 ;;  counter         1   20[COMRAM] unsigned char 
  2659 ;; Return value:  Size  Location     Type
  2660 ;;                  2   14[COMRAM] unsigned int 
  2661 ;; Registers used:
  2662 ;;		wreg, status,2, status,0
  2663 ;; Tracked objects:
  2664 ;;		On entry : 0/0
  2665 ;;		On exit  : 0/0
  2666 ;;		Unchanged: 0/0
  2667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2668 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2669 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2671 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2672 ;;Total ram usage:        7 bytes
  2673 ;; Hardware stack levels used:    1
  2674 ;; Hardware stack levels required when called:    1
  2675 ;; This function calls:
  2676 ;;		Nothing
  2677 ;; This function is called by:
  2678 ;;		_printf
  2679 ;; This function uses a non-reentrant model
  2680 ;;
  2681                           
  2682                           	psect	text5
  2683  000CA0                     __ptext5:
  2684                           	opt stack 0
  2685  000CA0                     ___lwdiv:
  2686                           	opt stack 28
  2687                           
  2688                           ;incstack = 0
  2689  000CA0  0E00               	movlw	0
  2690  000CA2  6E14               	movwf	___lwdiv@quotient+1,c
  2691  000CA4  0E00               	movlw	0
  2692  000CA6  6E13               	movwf	___lwdiv@quotient,c
  2693  000CA8  5011               	movf	___lwdiv@divisor,w,c
  2694  000CAA  1012               	iorwf	___lwdiv@divisor+1,w,c
  2695  000CAC  B4D8               	btfsc	status,2,c
  2696  000CAE  D021               	goto	l1117
  2697  000CB0  0E01               	movlw	1
  2698  000CB2  6E15               	movwf	___lwdiv@counter,c
  2699  000CB4  D005               	goto	l2916
  2700  000CB6                     l2914:
  2701  000CB6  90D8               	bcf	status,0,c
  2702  000CB8  3611               	rlcf	___lwdiv@divisor,f,c
  2703  000CBA  3612               	rlcf	___lwdiv@divisor+1,f,c
  2704  000CBC  2A15               	incf	___lwdiv@counter,f,c
  2705  000CBE  D000               	goto	l2916
  2706  000CC0                     l2916:
  2707  000CC0  BE12               	btfsc	___lwdiv@divisor+1,7,c
  2708  000CC2  D002               	goto	l2918
  2709  000CC4  D7F8               	goto	l2914
  2710  000CC6  D000               	goto	l2918
  2711  000CC8                     l2918:
  2712  000CC8  90D8               	bcf	status,0,c
  2713  000CCA  3613               	rlcf	___lwdiv@quotient,f,c
  2714  000CCC  3614               	rlcf	___lwdiv@quotient+1,f,c
  2715  000CCE  5011               	movf	___lwdiv@divisor,w,c
  2716  000CD0  5C0F               	subwf	___lwdiv@dividend,w,c
  2717  000CD2  5012               	movf	___lwdiv@divisor+1,w,c
  2718  000CD4  5810               	subwfb	___lwdiv@dividend+1,w,c
  2719  000CD6  A0D8               	btfss	status,0,c
  2720  000CD8  D006               	goto	l2926
  2721  000CDA  5011               	movf	___lwdiv@divisor,w,c
  2722  000CDC  5E0F               	subwf	___lwdiv@dividend,f,c
  2723  000CDE  5012               	movf	___lwdiv@divisor+1,w,c
  2724  000CE0  5A10               	subwfb	___lwdiv@dividend+1,f,c
  2725  000CE2  8013               	bsf	___lwdiv@quotient,0,c
  2726  000CE4  D000               	goto	l2926
  2727  000CE6                     l2926:
  2728  000CE6  90D8               	bcf	status,0,c
  2729  000CE8  3212               	rrcf	___lwdiv@divisor+1,f,c
  2730  000CEA  3211               	rrcf	___lwdiv@divisor,f,c
  2731  000CEC  2E15               	decfsz	___lwdiv@counter,f,c
  2732  000CEE  D7EC               	goto	l2918
  2733  000CF0  D000               	goto	l1117
  2734  000CF2                     l1117:
  2735  000CF2  C013  F00F         	movff	___lwdiv@quotient,?___lwdiv
  2736  000CF6  C014  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2737  000CFA  0012               	return		;funcret
  2738  000CFC                     __end_of___lwdiv:
  2739                           	opt stack 0
  2740                           tblptru	equ	0xFF8
  2741                           tblptrh	equ	0xFF7
  2742                           tblptrl	equ	0xFF6
  2743                           tablat	equ	0xFF5
  2744                           prodh	equ	0xFF4
  2745                           prodl	equ	0xFF3
  2746                           postinc0	equ	0xFEE
  2747                           wreg	equ	0xFE8
  2748                           postdec1	equ	0xFE5
  2749                           fsr1l	equ	0xFE1
  2750                           postinc2	equ	0xFDE
  2751                           postdec2	equ	0xFDD
  2752                           fsr2h	equ	0xFDA
  2753                           fsr2l	equ	0xFD9
  2754                           status	equ	0xFD8
  2755                           
  2756 ;; *************** function ___awdiv *****************
  2757 ;; Defined at:
  2758 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  2759 ;; Parameters:    Size  Location     Type
  2760 ;;  dividend        2   14[COMRAM] int 
  2761 ;;  divisor         2   16[COMRAM] int 
  2762 ;; Auto vars:     Size  Location     Type
  2763 ;;  quotient        2   20[COMRAM] int 
  2764 ;;  sign            1   19[COMRAM] unsigned char 
  2765 ;;  counter         1   18[COMRAM] unsigned char 
  2766 ;; Return value:  Size  Location     Type
  2767 ;;                  2   14[COMRAM] int 
  2768 ;; Registers used:
  2769 ;;		wreg, status,2, status,0
  2770 ;; Tracked objects:
  2771 ;;		On entry : 0/0
  2772 ;;		On exit  : 0/0
  2773 ;;		Unchanged: 0/0
  2774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2775 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2776 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2778 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2779 ;;Total ram usage:        8 bytes
  2780 ;; Hardware stack levels used:    1
  2781 ;; Hardware stack levels required when called:    1
  2782 ;; This function calls:
  2783 ;;		Nothing
  2784 ;; This function is called by:
  2785 ;;		_main
  2786 ;; This function uses a non-reentrant model
  2787 ;;
  2788                           
  2789                           	psect	text6
  2790  0008B4                     __ptext6:
  2791                           	opt stack 0
  2792  0008B4                     ___awdiv:
  2793                           	opt stack 29
  2794                           
  2795                           ;incstack = 0
  2796  0008B4  0E00               	movlw	0
  2797  0008B6  6E14               	movwf	___awdiv@sign,c
  2798  0008B8  AE12               	btfss	___awdiv@divisor+1,7,c
  2799  0008BA  D007               	goto	l3184
  2800  0008BC  6C11               	negf	___awdiv@divisor,c
  2801  0008BE  1E12               	comf	___awdiv@divisor+1,f,c
  2802  0008C0  B0D8               	btfsc	status,0,c
  2803  0008C2  2A12               	incf	___awdiv@divisor+1,f,c
  2804  0008C4  0E01               	movlw	1
  2805  0008C6  6E14               	movwf	___awdiv@sign,c
  2806  0008C8  D000               	goto	l3184
  2807  0008CA                     l3184:
  2808  0008CA  AE10               	btfss	___awdiv@dividend+1,7,c
  2809  0008CC  D007               	goto	l3190
  2810  0008CE  6C0F               	negf	___awdiv@dividend,c
  2811  0008D0  1E10               	comf	___awdiv@dividend+1,f,c
  2812  0008D2  B0D8               	btfsc	status,0,c
  2813  0008D4  2A10               	incf	___awdiv@dividend+1,f,c
  2814  0008D6  0E01               	movlw	1
  2815  0008D8  1A14               	xorwf	___awdiv@sign,f,c
  2816  0008DA  D000               	goto	l3190
  2817  0008DC                     l3190:
  2818  0008DC  0E00               	movlw	0
  2819  0008DE  6E16               	movwf	___awdiv@quotient+1,c
  2820  0008E0  0E00               	movlw	0
  2821  0008E2  6E15               	movwf	___awdiv@quotient,c
  2822  0008E4  5011               	movf	___awdiv@divisor,w,c
  2823  0008E6  1012               	iorwf	___awdiv@divisor+1,w,c
  2824  0008E8  B4D8               	btfsc	status,2,c
  2825  0008EA  D021               	goto	l3212
  2826  0008EC  0E01               	movlw	1
  2827  0008EE  6E13               	movwf	___awdiv@counter,c
  2828  0008F0  D005               	goto	l3198
  2829  0008F2                     l3196:
  2830  0008F2  90D8               	bcf	status,0,c
  2831  0008F4  3611               	rlcf	___awdiv@divisor,f,c
  2832  0008F6  3612               	rlcf	___awdiv@divisor+1,f,c
  2833  0008F8  2A13               	incf	___awdiv@counter,f,c
  2834  0008FA  D000               	goto	l3198
  2835  0008FC                     l3198:
  2836  0008FC  BE12               	btfsc	___awdiv@divisor+1,7,c
  2837  0008FE  D002               	goto	l3200
  2838  000900  D7F8               	goto	l3196
  2839  000902  D000               	goto	l3200
  2840  000904                     l3200:
  2841  000904  90D8               	bcf	status,0,c
  2842  000906  3615               	rlcf	___awdiv@quotient,f,c
  2843  000908  3616               	rlcf	___awdiv@quotient+1,f,c
  2844  00090A  5011               	movf	___awdiv@divisor,w,c
  2845  00090C  5C0F               	subwf	___awdiv@dividend,w,c
  2846  00090E  5012               	movf	___awdiv@divisor+1,w,c
  2847  000910  5810               	subwfb	___awdiv@dividend+1,w,c
  2848  000912  A0D8               	btfss	status,0,c
  2849  000914  D006               	goto	l3208
  2850  000916  5011               	movf	___awdiv@divisor,w,c
  2851  000918  5E0F               	subwf	___awdiv@dividend,f,c
  2852  00091A  5012               	movf	___awdiv@divisor+1,w,c
  2853  00091C  5A10               	subwfb	___awdiv@dividend+1,f,c
  2854  00091E  8015               	bsf	___awdiv@quotient,0,c
  2855  000920  D000               	goto	l3208
  2856  000922                     l3208:
  2857  000922  90D8               	bcf	status,0,c
  2858  000924  3212               	rrcf	___awdiv@divisor+1,f,c
  2859  000926  3211               	rrcf	___awdiv@divisor,f,c
  2860  000928  2E13               	decfsz	___awdiv@counter,f,c
  2861  00092A  D7EC               	goto	l3200
  2862  00092C  D000               	goto	l3212
  2863  00092E                     l3212:
  2864  00092E  5014               	movf	___awdiv@sign,w,c
  2865  000930  B4D8               	btfsc	status,2,c
  2866  000932  D005               	goto	l3216
  2867  000934  6C15               	negf	___awdiv@quotient,c
  2868  000936  1E16               	comf	___awdiv@quotient+1,f,c
  2869  000938  B0D8               	btfsc	status,0,c
  2870  00093A  2A16               	incf	___awdiv@quotient+1,f,c
  2871  00093C  D000               	goto	l3216
  2872  00093E                     l3216:
  2873  00093E  C015  F00F         	movff	___awdiv@quotient,?___awdiv
  2874  000942  C016  F010         	movff	___awdiv@quotient+1,?___awdiv+1
  2875  000946  D000               	goto	l787
  2876  000948                     l787:
  2877  000948  0012               	return		;funcret
  2878  00094A                     __end_of___awdiv:
  2879                           	opt stack 0
  2880                           tblptru	equ	0xFF8
  2881                           tblptrh	equ	0xFF7
  2882                           tblptrl	equ	0xFF6
  2883                           tablat	equ	0xFF5
  2884                           prodh	equ	0xFF4
  2885                           prodl	equ	0xFF3
  2886                           postinc0	equ	0xFEE
  2887                           wreg	equ	0xFE8
  2888                           postdec1	equ	0xFE5
  2889                           fsr1l	equ	0xFE1
  2890                           postinc2	equ	0xFDE
  2891                           postdec2	equ	0xFDD
  2892                           fsr2h	equ	0xFDA
  2893                           fsr2l	equ	0xFD9
  2894                           status	equ	0xFD8
  2895                           
  2896 ;; *************** function _Do_Init *****************
  2897 ;; Defined at:
  2898 ;;		line 101 in file "Lab11p2.c"
  2899 ;; Parameters:    Size  Location     Type
  2900 ;;		None
  2901 ;; Auto vars:     Size  Location     Type
  2902 ;;		None
  2903 ;; Return value:  Size  Location     Type
  2904 ;;		None               void
  2905 ;; Registers used:
  2906 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2907 ;; Tracked objects:
  2908 ;;		On entry : 0/0
  2909 ;;		On exit  : 0/0
  2910 ;;		Unchanged: 0/0
  2911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2915 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2916 ;;Total ram usage:        0 bytes
  2917 ;; Hardware stack levels used:    1
  2918 ;; Hardware stack levels required when called:    9
  2919 ;; This function calls:
  2920 ;;		_DS1621_Init
  2921 ;;		_I2C_Init
  2922 ;;		_Initialize_Screen
  2923 ;;		_init_UART
  2924 ;; This function is called by:
  2925 ;;		_main
  2926 ;; This function uses a non-reentrant model
  2927 ;;
  2928                           
  2929                           	psect	text7
  2930  000ECE                     __ptext7:
  2931                           	opt stack 0
  2932  000ECE                     _Do_Init:
  2933                           	opt stack 21
  2934                           
  2935                           ;Lab11p2.c: 103: init_UART();
  2936                           
  2937                           ;incstack = 0
  2938  000ECE  ECD2  F008         	call	_init_UART	;wreg free
  2939                           
  2940                           ;Lab11p2.c: 105: OSCCON=0x70;
  2941  000ED2  0E70               	movlw	112
  2942  000ED4  6ED3               	movwf	4051,c	;volatile
  2943                           
  2944                           ;Lab11p2.c: 107: ADCON1= 0x0F;
  2945  000ED6  0E0F               	movlw	15
  2946  000ED8  6EC1               	movwf	4033,c	;volatile
  2947                           
  2948                           ;Lab11p2.c: 108: TRISA = 0x14;
  2949  000EDA  0E14               	movlw	20
  2950  000EDC  6E92               	movwf	3986,c	;volatile
  2951                           
  2952                           ;Lab11p2.c: 109: TRISB = 0x01;
  2953  000EDE  0E01               	movlw	1
  2954  000EE0  6E93               	movwf	3987,c	;volatile
  2955                           
  2956                           ;Lab11p2.c: 110: TRISC = 0x00;
  2957  000EE2  0E00               	movlw	0
  2958  000EE4  6E94               	movwf	3988,c	;volatile
  2959                           
  2960                           ;Lab11p2.c: 111: TRISD = 0x00;
  2961  000EE6  0E00               	movlw	0
  2962  000EE8  6E95               	movwf	3989,c	;volatile
  2963                           
  2964                           ;Lab11p2.c: 112: TRISE = 0x00;
  2965  000EEA  0E00               	movlw	0
  2966  000EEC  6E96               	movwf	3990,c	;volatile
  2967                           
  2968                           ;Lab11p2.c: 113: RBPU=0;
  2969  000EEE  9EF1               	bcf	intcon2,7,c	;volatile
  2970                           
  2971                           ;Lab11p2.c: 114: I2C_Init(100000);
  2972  000EF0  0EA0               	movlw	160
  2973  000EF2  6E0F               	movwf	I2C_Init@c,c
  2974  000EF4  0E86               	movlw	134
  2975  000EF6  6E10               	movwf	I2C_Init@c+1,c
  2976  000EF8  0E01               	movlw	1
  2977  000EFA  6E11               	movwf	I2C_Init@c+2,c
  2978  000EFC  0E00               	movlw	0
  2979  000EFE  6E12               	movwf	I2C_Init@c+3,c
  2980  000F00  EC27  F009         	call	_I2C_Init	;wreg free
  2981                           
  2982                           ;Lab11p2.c: 116: Initialize_Screen();
  2983  000F04  ECA5  F004         	call	_Initialize_Screen	;wreg free
  2984                           
  2985                           ;Lab11p2.c: 117: DS1621_Init();
  2986  000F08  EC9D  F008         	call	_DS1621_Init	;wreg free
  2987  000F0C  0012               	return		;funcret
  2988  000F0E                     __end_of_Do_Init:
  2989                           	opt stack 0
  2990                           tblptru	equ	0xFF8
  2991                           tblptrh	equ	0xFF7
  2992                           tblptrl	equ	0xFF6
  2993                           tablat	equ	0xFF5
  2994                           prodh	equ	0xFF4
  2995                           prodl	equ	0xFF3
  2996                           intcon2	equ	0xFF1
  2997                           postinc0	equ	0xFEE
  2998                           wreg	equ	0xFE8
  2999                           postdec1	equ	0xFE5
  3000                           fsr1l	equ	0xFE1
  3001                           postinc2	equ	0xFDE
  3002                           postdec2	equ	0xFDD
  3003                           fsr2h	equ	0xFDA
  3004                           fsr2l	equ	0xFD9
  3005                           status	equ	0xFD8
  3006                           
  3007 ;; *************** function _init_UART *****************
  3008 ;; Defined at:
  3009 ;;		line 88 in file "Lab11p2.c"
  3010 ;; Parameters:    Size  Location     Type
  3011 ;;		None
  3012 ;; Auto vars:     Size  Location     Type
  3013 ;;		None
  3014 ;; Return value:  Size  Location     Type
  3015 ;;		None               void
  3016 ;; Registers used:
  3017 ;;		wreg, status,2, cstack
  3018 ;; Tracked objects:
  3019 ;;		On entry : 0/0
  3020 ;;		On exit  : 0/0
  3021 ;;		Unchanged: 0/0
  3022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3027 ;;Total ram usage:        0 bytes
  3028 ;; Hardware stack levels used:    1
  3029 ;; Hardware stack levels required when called:    2
  3030 ;; This function calls:
  3031 ;;		_OpenUSART
  3032 ;; This function is called by:
  3033 ;;		_Do_Init
  3034 ;; This function uses a non-reentrant model
  3035 ;;
  3036                           
  3037                           	psect	text8
  3038  0011A4                     __ptext8:
  3039                           	opt stack 0
  3040  0011A4                     _init_UART:
  3041                           	opt stack 27
  3042                           
  3043                           ;Lab11p2.c: 90: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b1111111
      +                          1 & 0b11111111, 25);
  3044                           
  3045                           ;incstack = 0
  3046  0011A4  0E00               	movlw	0
  3047  0011A6  6E10               	movwf	OpenUSART@spbrg+1,c
  3048  0011A8  0E19               	movlw	25
  3049  0011AA  6E0F               	movwf	OpenUSART@spbrg,c
  3050  0011AC  0E3C               	movlw	60
  3051  0011AE  ECB2  F005         	call	_OpenUSART
  3052                           
  3053                           ;Lab11p2.c: 91: OSCCON = 0x70;
  3054  0011B2  0E70               	movlw	112
  3055  0011B4  6ED3               	movwf	4051,c	;volatile
  3056  0011B6  0012               	return		;funcret
  3057  0011B8                     __end_of_init_UART:
  3058                           	opt stack 0
  3059                           tblptru	equ	0xFF8
  3060                           tblptrh	equ	0xFF7
  3061                           tblptrl	equ	0xFF6
  3062                           tablat	equ	0xFF5
  3063                           prodh	equ	0xFF4
  3064                           prodl	equ	0xFF3
  3065                           intcon2	equ	0xFF1
  3066                           postinc0	equ	0xFEE
  3067                           wreg	equ	0xFE8
  3068                           postdec1	equ	0xFE5
  3069                           fsr1l	equ	0xFE1
  3070                           postinc2	equ	0xFDE
  3071                           postdec2	equ	0xFDD
  3072                           fsr2h	equ	0xFDA
  3073                           fsr2l	equ	0xFD9
  3074                           status	equ	0xFD8
  3075                           
  3076 ;; *************** function _OpenUSART *****************
  3077 ;; Defined at:
  3078 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  3079 ;; Parameters:    Size  Location     Type
  3080 ;;  config          1    wreg     unsigned char 
  3081 ;;  spbrg           2   14[COMRAM] unsigned int 
  3082 ;; Auto vars:     Size  Location     Type
  3083 ;;  config          1   16[COMRAM] unsigned char 
  3084 ;; Return value:  Size  Location     Type
  3085 ;;		None               void
  3086 ;; Registers used:
  3087 ;;		wreg, status,2
  3088 ;; Tracked objects:
  3089 ;;		On entry : 0/0
  3090 ;;		On exit  : 0/0
  3091 ;;		Unchanged: 0/0
  3092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3093 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3094 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3096 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3097 ;;Total ram usage:        3 bytes
  3098 ;; Hardware stack levels used:    1
  3099 ;; Hardware stack levels required when called:    1
  3100 ;; This function calls:
  3101 ;;		Nothing
  3102 ;; This function is called by:
  3103 ;;		_init_UART
  3104 ;; This function uses a non-reentrant model
  3105 ;;
  3106                           
  3107                           	psect	text9
  3108  000B64                     __ptext9:
  3109                           	opt stack 0
  3110  000B64                     _OpenUSART:
  3111                           	opt stack 27
  3112                           
  3113                           ;incstack = 0
  3114                           ;OpenUSART@config stored from wreg
  3115  000B64  6E11               	movwf	OpenUSART@config,c
  3116  000B66  0E00               	movlw	0
  3117  000B68  6EAC               	movwf	4012,c	;volatile
  3118  000B6A  0E00               	movlw	0
  3119  000B6C  6EAB               	movwf	4011,c	;volatile
  3120  000B6E  A011               	btfss	OpenUSART@config,0,c
  3121  000B70  D002               	goto	l2818
  3122  000B72  88AC               	bsf	4012,4,c	;volatile
  3123  000B74  D000               	goto	l2818
  3124  000B76                     l2818:
  3125  000B76  A211               	btfss	OpenUSART@config,1,c
  3126  000B78  D003               	goto	l2822
  3127  000B7A  8CAC               	bsf	4012,6,c	;volatile
  3128  000B7C  8CAB               	bsf	4011,6,c	;volatile
  3129  000B7E  D000               	goto	l2822
  3130  000B80                     l2822:
  3131  000B80  A411               	btfss	OpenUSART@config,2,c
  3132  000B82  D002               	goto	l2826
  3133  000B84  8EAC               	bsf	4012,7,c	;volatile
  3134  000B86  D000               	goto	l2826
  3135  000B88                     l2826:
  3136  000B88  A611               	btfss	OpenUSART@config,3,c
  3137  000B8A  D002               	goto	l582
  3138  000B8C  88AB               	bsf	4011,4,c	;volatile
  3139  000B8E  D002               	goto	l2830
  3140  000B90                     l582:
  3141  000B90  8AAB               	bsf	4011,5,c	;volatile
  3142  000B92  D000               	goto	l2830
  3143  000B94                     l2830:
  3144  000B94  B811               	btfsc	OpenUSART@config,4,c
  3145  000B96  84AC               	bsf	4012,2,c	;volatile
  3146  000B98  989E               	bcf	3998,4,c	;volatile
  3147  000B9A  AA11               	btfss	OpenUSART@config,5,c
  3148  000B9C  D002               	goto	l2838
  3149  000B9E  86AB               	bsf	4011,3,c	;volatile
  3150  000BA0  D000               	goto	l2838
  3151  000BA2                     l2838:
  3152  000BA2  AC11               	btfss	OpenUSART@config,6,c
  3153  000BA4  D002               	goto	l586
  3154  000BA6  8A9D               	bsf	3997,5,c	;volatile
  3155  000BA8  D001               	goto	l587
  3156  000BAA                     l586:
  3157  000BAA  9A9D               	bcf	3997,5,c	;volatile
  3158  000BAC                     l587:
  3159  000BAC  9A9E               	bcf	3998,5,c	;volatile
  3160  000BAE  AE11               	btfss	OpenUSART@config,7,c
  3161  000BB0  D002               	goto	l588
  3162  000BB2  889D               	bsf	3997,4,c	;volatile
  3163  000BB4  D001               	goto	l589
  3164  000BB6                     l588:
  3165  000BB6  989D               	bcf	3997,4,c	;volatile
  3166  000BB8                     l589:
  3167  000BB8  C00F  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  3168  000BBC  5010               	movf	OpenUSART@spbrg+1,w,c
  3169  000BBE  6EB0               	movwf	4016,c	;volatile
  3170  000BC0  8AAC               	bsf	4012,5,c	;volatile
  3171  000BC2  8EAB               	bsf	4011,7,c	;volatile
  3172  000BC4  9C94               	bcf	3988,6,c	;volatile
  3173  000BC6  8E94               	bsf	3988,7,c	;volatile
  3174  000BC8  B8AC               	btfsc	4012,4,c	;volatile
  3175  000BCA  BEAC               	btfsc	4012,7,c	;volatile
  3176  000BCC  D002               	goto	l591
  3177  000BCE  8C94               	bsf	3988,6,c	;volatile
  3178  000BD0  D000               	goto	l591
  3179  000BD2                     l591:
  3180  000BD2  0012               	return		;funcret
  3181  000BD4                     __end_of_OpenUSART:
  3182                           	opt stack 0
  3183                           tblptru	equ	0xFF8
  3184                           tblptrh	equ	0xFF7
  3185                           tblptrl	equ	0xFF6
  3186                           tablat	equ	0xFF5
  3187                           prodh	equ	0xFF4
  3188                           prodl	equ	0xFF3
  3189                           intcon2	equ	0xFF1
  3190                           postinc0	equ	0xFEE
  3191                           wreg	equ	0xFE8
  3192                           postdec1	equ	0xFE5
  3193                           fsr1l	equ	0xFE1
  3194                           postinc2	equ	0xFDE
  3195                           postdec2	equ	0xFDD
  3196                           fsr2h	equ	0xFDA
  3197                           fsr2l	equ	0xFD9
  3198                           status	equ	0xFD8
  3199                           
  3200 ;; *************** function _Initialize_Screen *****************
  3201 ;; Defined at:
  3202 ;;		line 173 in file "Lab11p2.c"
  3203 ;; Parameters:    Size  Location     Type
  3204 ;;		None
  3205 ;; Auto vars:     Size  Location     Type
  3206 ;;		None
  3207 ;; Return value:  Size  Location     Type
  3208 ;;		None               void
  3209 ;; Registers used:
  3210 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3211 ;; Tracked objects:
  3212 ;;		On entry : 0/0
  3213 ;;		On exit  : 0/0
  3214 ;;		Unchanged: 0/0
  3215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3220 ;;Total ram usage:        0 bytes
  3221 ;; Hardware stack levels used:    1
  3222 ;; Hardware stack levels required when called:    8
  3223 ;; This function calls:
  3224 ;;		_LCD_Reset
  3225 ;;		_TFT_GreenTab_Initialize
  3226 ;;		_drawtext
  3227 ;;		_fillScreen
  3228 ;;		_strcpy
  3229 ;; This function is called by:
  3230 ;;		_Do_Init
  3231 ;; This function uses a non-reentrant model
  3232 ;;
  3233                           
  3234                           	psect	text10
  3235  00094A                     __ptext10:
  3236                           	opt stack 0
  3237  00094A                     _Initialize_Screen:
  3238                           	opt stack 21
  3239                           
  3240                           ;Lab11p2.c: 175: LCD_Reset();
  3241                           
  3242                           ;incstack = 0
  3243  00094A  ECE6  F008         	call	_LCD_Reset	;wreg free
  3244                           
  3245                           ;Lab11p2.c: 176: TFT_GreenTab_Initialize();
  3246  00094E  EC53  F008         	call	_TFT_GreenTab_Initialize	;wreg free
  3247                           
  3248                           ;Lab11p2.c: 177: fillScreen(0x0000);
  3249  000952  0E00               	movlw	0
  3250  000954  6E23               	movwf	fillScreen@color+1,c
  3251  000956  0E00               	movlw	0
  3252  000958  6E22               	movwf	fillScreen@color,c
  3253  00095A  ECAC  F008         	call	_fillScreen	;wreg free
  3254                           
  3255                           ;Lab11p2.c: 180: txt = buffer;
  3256  00095E  0EBF               	movlw	low _buffer
  3257  000960  6E4D               	movwf	_txt,c
  3258  000962  0E00               	movlw	high _buffer
  3259  000964  6E4E               	movwf	_txt+1,c
  3260                           
  3261                           ;Lab11p2.c: 181: strcpy(txt, "ECE3301L Fall 22-Sx");
  3262  000966  C04D  F00F         	movff	_txt,strcpy@to
  3263  00096A  C04E  F010         	movff	_txt+1,strcpy@to+1
  3264  00096E  0ED1               	movlw	low STR_3
  3265  000970  6E11               	movwf	strcpy@from,c
  3266  000972  0EFF               	movlw	high STR_3
  3267  000974  6E12               	movwf	strcpy@from+1,c
  3268  000976  EC22  F008         	call	_strcpy	;wreg free
  3269                           
  3270                           ;Lab11p2.c: 182: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  3271  00097A  0E02               	movlw	2
  3272  00097C  6E37               	movwf	drawtext@y,c
  3273  00097E  C04D  F038         	movff	_txt,drawtext@_text
  3274  000982  C04E  F039         	movff	_txt+1,drawtext@_text+1
  3275  000986  0EFF               	movlw	255
  3276  000988  6E3B               	movwf	drawtext@color+1,c
  3277  00098A  683A               	setf	drawtext@color,c
  3278  00098C  0E00               	movlw	0
  3279  00098E  6E3D               	movwf	drawtext@bg+1,c
  3280  000990  0E00               	movlw	0
  3281  000992  6E3C               	movwf	drawtext@bg,c
  3282  000994  0E01               	movlw	1
  3283  000996  6E3E               	movwf	drawtext@size,c
  3284  000998  0E02               	movlw	2
  3285  00099A  ECEE  F002         	call	_drawtext
  3286                           
  3287                           ;Lab11p2.c: 184: strcpy(txt, "LAB 10 ");
  3288  00099E  C04D  F00F         	movff	_txt,strcpy@to
  3289  0009A2  C04E  F010         	movff	_txt+1,strcpy@to+1
  3290  0009A6  0EF6               	movlw	low STR_4
  3291  0009A8  6E11               	movwf	strcpy@from,c
  3292  0009AA  0EFF               	movlw	high STR_4
  3293  0009AC  6E12               	movwf	strcpy@from+1,c
  3294  0009AE  EC22  F008         	call	_strcpy	;wreg free
  3295                           
  3296                           ;Lab11p2.c: 185: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  3297  0009B2  0E0A               	movlw	10
  3298  0009B4  6E37               	movwf	drawtext@y,c
  3299  0009B6  C04D  F038         	movff	_txt,drawtext@_text
  3300  0009BA  C04E  F039         	movff	_txt+1,drawtext@_text+1
  3301  0009BE  0EFF               	movlw	255
  3302  0009C0  6E3B               	movwf	drawtext@color+1,c
  3303  0009C2  683A               	setf	drawtext@color,c
  3304  0009C4  0E00               	movlw	0
  3305  0009C6  6E3D               	movwf	drawtext@bg+1,c
  3306  0009C8  0E00               	movlw	0
  3307  0009CA  6E3C               	movwf	drawtext@bg,c
  3308  0009CC  0E01               	movlw	1
  3309  0009CE  6E3E               	movwf	drawtext@size,c
  3310  0009D0  0E32               	movlw	50
  3311  0009D2  ECEE  F002         	call	_drawtext
  3312  0009D6  0012               	return		;funcret
  3313  0009D8                     __end_of_Initialize_Screen:
  3314                           	opt stack 0
  3315                           tblptru	equ	0xFF8
  3316                           tblptrh	equ	0xFF7
  3317                           tblptrl	equ	0xFF6
  3318                           tablat	equ	0xFF5
  3319                           prodh	equ	0xFF4
  3320                           prodl	equ	0xFF3
  3321                           intcon2	equ	0xFF1
  3322                           postinc0	equ	0xFEE
  3323                           wreg	equ	0xFE8
  3324                           postdec1	equ	0xFE5
  3325                           fsr1l	equ	0xFE1
  3326                           postinc2	equ	0xFDE
  3327                           postdec2	equ	0xFDD
  3328                           fsr2h	equ	0xFDA
  3329                           fsr2l	equ	0xFD9
  3330                           status	equ	0xFD8
  3331                           
  3332 ;; *************** function _strcpy *****************
  3333 ;; Defined at:
  3334 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  3335 ;; Parameters:    Size  Location     Type
  3336 ;;  to              2   14[COMRAM] PTR unsigned char 
  3337 ;;		 -> NULL(0), buffer(31), 
  3338 ;;  from            2   16[COMRAM] PTR const unsigned char 
  3339 ;;		 -> STR_4(8), STR_3(20), 
  3340 ;; Auto vars:     Size  Location     Type
  3341 ;;  cp              2   18[COMRAM] PTR unsigned char 
  3342 ;;		 -> NULL(0), buffer(31), 
  3343 ;; Return value:  Size  Location     Type
  3344 ;;                  2   14[COMRAM] PTR unsigned char 
  3345 ;; Registers used:
  3346 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  3347 ;; Tracked objects:
  3348 ;;		On entry : 0/0
  3349 ;;		On exit  : 0/0
  3350 ;;		Unchanged: 0/0
  3351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3352 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3353 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3355 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3356 ;;Total ram usage:        6 bytes
  3357 ;; Hardware stack levels used:    1
  3358 ;; Hardware stack levels required when called:    1
  3359 ;; This function calls:
  3360 ;;		Nothing
  3361 ;; This function is called by:
  3362 ;;		_Initialize_Screen
  3363 ;; This function uses a non-reentrant model
  3364 ;;
  3365                           
  3366                           	psect	text11
  3367  001044                     __ptext11:
  3368                           	opt stack 0
  3369  001044                     _strcpy:
  3370                           	opt stack 27
  3371                           
  3372                           ;incstack = 0
  3373  001044  C00F  F013         	movff	strcpy@to,strcpy@cp
  3374  001048  C010  F014         	movff	strcpy@to+1,strcpy@cp+1
  3375  00104C  D005               	goto	l2866
  3376  00104E                     l2864:
  3377  00104E  4A13               	infsnz	strcpy@cp,f,c
  3378  001050  2A14               	incf	strcpy@cp+1,f,c
  3379  001052  4A11               	infsnz	strcpy@from,f,c
  3380  001054  2A12               	incf	strcpy@from+1,f,c
  3381  001056  D000               	goto	l2866
  3382  001058                     l2866:
  3383  001058  C011  FFF6         	movff	strcpy@from,tblptrl
  3384  00105C  C012  FFF7         	movff	strcpy@from+1,tblptrh
  3385  001060                     	if	0	;tblptru may be non-zero
  3386  001060                     	endif
  3387  001060                     	if	0	;tblptru may be non-zero
  3388  001060                     	endif
  3389  001060  C013  FFD9         	movff	strcpy@cp,fsr2l
  3390  001064  C014  FFDA         	movff	strcpy@cp+1,fsr2h
  3391  001068  0008               	tblrd		*
  3392  00106A  CFF5 FFDF          	movff	tablat,indf2
  3393  00106E  50DF               	movf	indf2,w,c
  3394  001070  A4D8               	btfss	status,2,c
  3395  001072  D7ED               	goto	l2864
  3396                           
  3397                           ;	Return value of _strcpy is never used
  3398  001074  0012               	return		;funcret
  3399  001076                     __end_of_strcpy:
  3400                           	opt stack 0
  3401                           tblptru	equ	0xFF8
  3402                           tblptrh	equ	0xFF7
  3403                           tblptrl	equ	0xFF6
  3404                           tablat	equ	0xFF5
  3405                           prodh	equ	0xFF4
  3406                           prodl	equ	0xFF3
  3407                           intcon2	equ	0xFF1
  3408                           postinc0	equ	0xFEE
  3409                           wreg	equ	0xFE8
  3410                           postdec1	equ	0xFE5
  3411                           fsr1l	equ	0xFE1
  3412                           indf2	equ	0xFDF
  3413                           postinc2	equ	0xFDE
  3414                           postdec2	equ	0xFDD
  3415                           fsr2h	equ	0xFDA
  3416                           fsr2l	equ	0xFD9
  3417                           status	equ	0xFD8
  3418                           
  3419 ;; *************** function _fillScreen *****************
  3420 ;; Defined at:
  3421 ;;		line 619 in file "ST7735_TFT.c"
  3422 ;; Parameters:    Size  Location     Type
  3423 ;;  color           2   33[COMRAM] unsigned int 
  3424 ;; Auto vars:     Size  Location     Type
  3425 ;;		None
  3426 ;; Return value:  Size  Location     Type
  3427 ;;		None               void
  3428 ;; Registers used:
  3429 ;;		wreg, status,2, status,0, cstack
  3430 ;; Tracked objects:
  3431 ;;		On entry : 0/0
  3432 ;;		On exit  : 0/0
  3433 ;;		Unchanged: 0/0
  3434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3435 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3438 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3439 ;;Total ram usage:        2 bytes
  3440 ;; Hardware stack levels used:    1
  3441 ;; Hardware stack levels required when called:    5
  3442 ;; This function calls:
  3443 ;;		_fillRectangle
  3444 ;; This function is called by:
  3445 ;;		_Initialize_Screen
  3446 ;; This function uses a non-reentrant model
  3447 ;;
  3448                           
  3449                           	psect	text12
  3450  001158                     __ptext12:
  3451                           	opt stack 0
  3452  001158                     _fillScreen:
  3453                           	opt stack 23
  3454                           
  3455                           ;ST7735_TFT.c: 621: fillRectangle(0, 0, 128, 160, color);
  3456                           
  3457                           ;incstack = 0
  3458  001158  0E00               	movlw	0
  3459  00115A  6E16               	movwf	fillRectangle@y,c
  3460  00115C  0E80               	movlw	128
  3461  00115E  6E17               	movwf	fillRectangle@w,c
  3462  001160  0EA0               	movlw	160
  3463  001162  6E18               	movwf	fillRectangle@h,c
  3464  001164  C022  F019         	movff	fillScreen@color,fillRectangle@color
  3465  001168  C023  F01A         	movff	fillScreen@color+1,fillRectangle@color+1
  3466  00116C  0E00               	movlw	0
  3467  00116E  ECEC  F003         	call	_fillRectangle
  3468  001172  0012               	return		;funcret
  3469  001174                     __end_of_fillScreen:
  3470                           	opt stack 0
  3471                           tblptru	equ	0xFF8
  3472                           tblptrh	equ	0xFF7
  3473                           tblptrl	equ	0xFF6
  3474                           tablat	equ	0xFF5
  3475                           prodh	equ	0xFF4
  3476                           prodl	equ	0xFF3
  3477                           intcon2	equ	0xFF1
  3478                           postinc0	equ	0xFEE
  3479                           wreg	equ	0xFE8
  3480                           postdec1	equ	0xFE5
  3481                           fsr1l	equ	0xFE1
  3482                           indf2	equ	0xFDF
  3483                           postinc2	equ	0xFDE
  3484                           postdec2	equ	0xFDD
  3485                           fsr2h	equ	0xFDA
  3486                           fsr2l	equ	0xFD9
  3487                           status	equ	0xFD8
  3488                           
  3489 ;; *************** function _fillRectangle *****************
  3490 ;; Defined at:
  3491 ;;		line 503 in file "ST7735_TFT.c"
  3492 ;; Parameters:    Size  Location     Type
  3493 ;;  x               1    wreg     unsigned char 
  3494 ;;  y               1   21[COMRAM] unsigned char 
  3495 ;;  w               1   22[COMRAM] unsigned char 
  3496 ;;  h               1   23[COMRAM] unsigned char 
  3497 ;;  color           2   24[COMRAM] unsigned int 
  3498 ;; Auto vars:     Size  Location     Type
  3499 ;;  x               1   32[COMRAM] unsigned char 
  3500 ;;  lo              1   31[COMRAM] unsigned char 
  3501 ;;  hi              1   30[COMRAM] unsigned char 
  3502 ;; Return value:  Size  Location     Type
  3503 ;;		None               void
  3504 ;; Registers used:
  3505 ;;		wreg, status,2, status,0, cstack
  3506 ;; Tracked objects:
  3507 ;;		On entry : 0/0
  3508 ;;		On exit  : 0/0
  3509 ;;		Unchanged: 0/0
  3510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3511 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3512 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3513 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3514 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3515 ;;Total ram usage:       12 bytes
  3516 ;; Hardware stack levels used:    1
  3517 ;; Hardware stack levels required when called:    4
  3518 ;; This function calls:
  3519 ;;		_setAddrWindow
  3520 ;;		_spiwrite
  3521 ;; This function is called by:
  3522 ;;		_fillScreen
  3523 ;; This function uses a non-reentrant model
  3524 ;;
  3525                           
  3526                           	psect	text13
  3527  0007D8                     __ptext13:
  3528                           	opt stack 0
  3529  0007D8                     _fillRectangle:
  3530                           	opt stack 23
  3531                           
  3532                           ;incstack = 0
  3533                           ;fillRectangle@x stored from wreg
  3534  0007D8  6E21               	movwf	fillRectangle@x,c
  3535                           
  3536                           ;ST7735_TFT.c: 505: unsigned char hi, lo;
  3537                           ;ST7735_TFT.c: 506: if((x >= 128) || (y >= 160))
  3538  0007DA  0E80               	movlw	128
  3539  0007DC  6021               	cpfslt	fillRectangle@x,c
  3540  0007DE  D069               	goto	l148
  3541  0007E0  0E9F               	movlw	159
  3542  0007E2  6416               	cpfsgt	fillRectangle@y,c
  3543  0007E4  D001               	goto	l3774
  3544                           
  3545                           ;ST7735_TFT.c: 507: return;
  3546  0007E6  D065               	goto	l148
  3547  0007E8                     l3774:
  3548                           
  3549                           ;ST7735_TFT.c: 508: if((x + w - 1) >= 128)
  3550  0007E8  0EFF               	movlw	255
  3551  0007EA  6E1B               	movwf	??_fillRectangle& (0+255),c
  3552  0007EC  0EFF               	movlw	255
  3553  0007EE  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3554  0007F0  5017               	movf	fillRectangle@w,w,c
  3555  0007F2  C021  F01D         	movff	fillRectangle@x,??_fillRectangle+2
  3556  0007F6  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3557  0007F8  261D               	addwf	??_fillRectangle+2,f,c
  3558  0007FA  0E00               	movlw	0
  3559  0007FC  221E               	addwfc	??_fillRectangle+3,f,c
  3560  0007FE  501B               	movf	??_fillRectangle,w,c
  3561  000800  261D               	addwf	??_fillRectangle+2,f,c
  3562  000802  501C               	movf	??_fillRectangle+1,w,c
  3563  000804  221E               	addwfc	??_fillRectangle+3,f,c
  3564  000806  BE1E               	btfsc	??_fillRectangle+3,7,c
  3565  000808  D00A               	goto	l149
  3566  00080A  501E               	movf	??_fillRectangle+3,w,c
  3567  00080C  E104               	bnz	u2570
  3568  00080E  0E80               	movlw	128
  3569  000810  5C1D               	subwf	??_fillRectangle+2,w,c
  3570  000812  A0D8               	btfss	status,0,c
  3571  000814  D004               	goto	l149
  3572  000816                     u2570:
  3573                           
  3574                           ;ST7735_TFT.c: 509: w = 128 - x;
  3575  000816  5021               	movf	fillRectangle@x,w,c
  3576  000818  0800               	sublw	0
  3577  00081A  0F80               	addlw	128
  3578  00081C  6E17               	movwf	fillRectangle@w,c
  3579  00081E                     l149:
  3580                           
  3581                           ;ST7735_TFT.c: 510: if((y + h - 1) >= 160)
  3582  00081E  0EFF               	movlw	255
  3583  000820  6E1B               	movwf	??_fillRectangle& (0+255),c
  3584  000822  0EFF               	movlw	255
  3585  000824  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3586  000826  5018               	movf	fillRectangle@h,w,c
  3587  000828  C016  F01D         	movff	fillRectangle@y,??_fillRectangle+2
  3588  00082C  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3589  00082E  261D               	addwf	??_fillRectangle+2,f,c
  3590  000830  0E00               	movlw	0
  3591  000832  221E               	addwfc	??_fillRectangle+3,f,c
  3592  000834  501B               	movf	??_fillRectangle,w,c
  3593  000836  261D               	addwf	??_fillRectangle+2,f,c
  3594  000838  501C               	movf	??_fillRectangle+1,w,c
  3595  00083A  221E               	addwfc	??_fillRectangle+3,f,c
  3596  00083C  BE1E               	btfsc	??_fillRectangle+3,7,c
  3597  00083E  D00B               	goto	l3780
  3598  000840  501E               	movf	??_fillRectangle+3,w,c
  3599  000842  E104               	bnz	u2580
  3600  000844  0EA0               	movlw	160
  3601  000846  5C1D               	subwf	??_fillRectangle+2,w,c
  3602  000848  A0D8               	btfss	status,0,c
  3603  00084A  D005               	goto	l3780
  3604  00084C                     u2580:
  3605                           
  3606                           ;ST7735_TFT.c: 511: h = 160 - y;
  3607  00084C  5016               	movf	fillRectangle@y,w,c
  3608  00084E  0800               	sublw	0
  3609  000850  0FA0               	addlw	160
  3610  000852  6E18               	movwf	fillRectangle@h,c
  3611  000854  D000               	goto	l3780
  3612  000856                     l3780:
  3613                           
  3614                           ;ST7735_TFT.c: 512: setAddrWindow(x, y, x+w-1, y+h-1);
  3615  000856  C016  F012         	movff	fillRectangle@y,setAddrWindow@y0
  3616  00085A  5021               	movf	fillRectangle@x,w,c
  3617  00085C  2417               	addwf	fillRectangle@w,w,c
  3618  00085E  6E1B               	movwf	??_fillRectangle& (0+255),c
  3619  000860  041B               	decf	??_fillRectangle,w,c
  3620  000862  6E13               	movwf	setAddrWindow@x1,c
  3621  000864  5016               	movf	fillRectangle@y,w,c
  3622  000866  2418               	addwf	fillRectangle@h,w,c
  3623  000868  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3624  00086A  041C               	decf	??_fillRectangle+1,w,c
  3625  00086C  6E14               	movwf	setAddrWindow@y1,c
  3626  00086E  5021               	movf	fillRectangle@x,w,c
  3627  000870  ECD1  F006         	call	_setAddrWindow
  3628                           
  3629                           ;ST7735_TFT.c: 513: hi = color >> 8; lo = color;
  3630  000874  501A               	movf	fillRectangle@color+1,w,c
  3631  000876  6E1F               	movwf	fillRectangle@hi,c
  3632  000878  C019  F020         	movff	fillRectangle@color,fillRectangle@lo
  3633                           
  3634                           ;ST7735_TFT.c: 514: PORTCbits.RC0 = 1;
  3635  00087C  8082               	bsf	3970,0,c	;volatile
  3636                           
  3637                           ;ST7735_TFT.c: 515: PORTCbits.RC1 = 0;
  3638  00087E  9282               	bcf	3970,1,c	;volatile
  3639                           
  3640                           ;ST7735_TFT.c: 517: for(y=h; y>0; y--) {
  3641  000880  C018  F016         	movff	fillRectangle@h,fillRectangle@y
  3642  000884                     l3792:
  3643  000884  5016               	movf	fillRectangle@y,w,c
  3644  000886  B4D8               	btfsc	status,2,c
  3645  000888  D013               	goto	l152
  3646  00088A  D001               	goto	l151
  3647  00088C  D011               	goto	l152
  3648  00088E                     l151:
  3649                           
  3650                           ;ST7735_TFT.c: 518: for(x = w; x > 0; x--) {
  3651  00088E  C017  F021         	movff	fillRectangle@w,fillRectangle@x
  3652  000892                     l3796:
  3653  000892  5021               	movf	fillRectangle@x,w,c
  3654  000894  B4D8               	btfsc	status,2,c
  3655  000896  D00A               	goto	l3806
  3656  000898  D001               	goto	l3800
  3657  00089A  D008               	goto	l3806
  3658  00089C                     l3800:
  3659                           
  3660                           ;ST7735_TFT.c: 519: spiwrite(hi);
  3661  00089C  501F               	movf	fillRectangle@hi,w,c
  3662  00089E  ECDC  F008         	call	_spiwrite
  3663                           
  3664                           ;ST7735_TFT.c: 520: spiwrite(lo);
  3665  0008A2  5020               	movf	fillRectangle@lo,w,c
  3666  0008A4  ECDC  F008         	call	_spiwrite
  3667  0008A8  0621               	decf	fillRectangle@x,f,c
  3668  0008AA  D7F3               	goto	l3796
  3669  0008AC                     l3806:
  3670  0008AC  0616               	decf	fillRectangle@y,f,c
  3671  0008AE  D7EA               	goto	l3792
  3672  0008B0                     l152:
  3673                           
  3674                           ;ST7735_TFT.c: 521: }
  3675                           ;ST7735_TFT.c: 522: }
  3676                           ;ST7735_TFT.c: 523: PORTCbits.RC1 = 1;
  3677  0008B0  8282               	bsf	3970,1,c	;volatile
  3678  0008B2                     l148:
  3679  0008B2  0012               	return		;funcret
  3680  0008B4                     __end_of_fillRectangle:
  3681                           	opt stack 0
  3682                           tblptru	equ	0xFF8
  3683                           tblptrh	equ	0xFF7
  3684                           tblptrl	equ	0xFF6
  3685                           tablat	equ	0xFF5
  3686                           prodh	equ	0xFF4
  3687                           prodl	equ	0xFF3
  3688                           intcon2	equ	0xFF1
  3689                           postinc0	equ	0xFEE
  3690                           wreg	equ	0xFE8
  3691                           postdec1	equ	0xFE5
  3692                           fsr1l	equ	0xFE1
  3693                           indf2	equ	0xFDF
  3694                           postinc2	equ	0xFDE
  3695                           postdec2	equ	0xFDD
  3696                           fsr2h	equ	0xFDA
  3697                           fsr2l	equ	0xFD9
  3698                           status	equ	0xFD8
  3699                           
  3700 ;; *************** function _drawtext *****************
  3701 ;; Defined at:
  3702 ;;		line 474 in file "ST7735_TFT.c"
  3703 ;; Parameters:    Size  Location     Type
  3704 ;;  x               1    wreg     unsigned char 
  3705 ;;  y               1   54[COMRAM] unsigned char 
  3706 ;;  _text           2   55[COMRAM] PTR unsigned char 
  3707 ;;		 -> NULL(0), buffer(31), 
  3708 ;;  color           2   57[COMRAM] unsigned int 
  3709 ;;  bg              2   59[COMRAM] unsigned int 
  3710 ;;  size            1   61[COMRAM] unsigned char 
  3711 ;; Auto vars:     Size  Location     Type
  3712 ;;  x               1    0[BANK0 ] unsigned char 
  3713 ;;  i               2    3[BANK0 ] unsigned int 
  3714 ;;  textsize        2    1[BANK0 ] unsigned int 
  3715 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  3716 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  3717 ;; Return value:  Size  Location     Type
  3718 ;;		None               void
  3719 ;; Registers used:
  3720 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3721 ;; Tracked objects:
  3722 ;;		On entry : 0/0
  3723 ;;		On exit  : 0/0
  3724 ;;		Unchanged: 0/0
  3725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3726 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3727 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3728 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3729 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3730 ;;Total ram usage:       17 bytes
  3731 ;; Hardware stack levels used:    1
  3732 ;; Hardware stack levels required when called:    7
  3733 ;; This function calls:
  3734 ;;		_drawChar
  3735 ;;		_strlen
  3736 ;; This function is called by:
  3737 ;;		_Initialize_Screen
  3738 ;; This function uses a non-reentrant model
  3739 ;;
  3740                           
  3741                           	psect	text14
  3742  0005DC                     __ptext14:
  3743                           	opt stack 0
  3744  0005DC                     _drawtext:
  3745                           	opt stack 21
  3746                           
  3747                           ;incstack = 0
  3748                           ;drawtext@x stored from wreg
  3749  0005DC  0100               	movlb	0	; () banked
  3750  0005DE  6FDE               	movwf	drawtext@x& (0+255),b
  3751                           
  3752                           ; BSR set to: 0
  3753                           ;ST7735_TFT.c: 476: unsigned char cursor_x, cursor_y;
  3754                           ;ST7735_TFT.c: 477: unsigned int textsize, i;
  3755                           ;ST7735_TFT.c: 478: cursor_x = x, cursor_y = y;
  3756  0005E0  C0DE  F0E4         	movff	drawtext@x,drawtext@cursor_x
  3757                           
  3758                           ; BSR set to: 0
  3759  0005E4  C037  F0E3         	movff	drawtext@y,drawtext@cursor_y
  3760                           
  3761                           ; BSR set to: 0
  3762                           ;ST7735_TFT.c: 479: textsize = strlen(_text);
  3763  0005E8  C038  F00F         	movff	drawtext@_text,strlen@s
  3764  0005EC  C039  F010         	movff	drawtext@_text+1,strlen@s+1
  3765  0005F0  ECA7  F007         	call	_strlen	;wreg free
  3766  0005F4  C00F  F0DF         	movff	?_strlen,drawtext@textsize
  3767  0005F8  C010  F0E0         	movff	?_strlen+1,drawtext@textsize+1
  3768                           
  3769                           ;ST7735_TFT.c: 480: for(i = 0; i < textsize; i++){
  3770  0005FC  0E00               	movlw	0
  3771  0005FE  0100               	movlb	0	; () banked
  3772  000600  6FE2               	movwf	(drawtext@i+1)& (0+255),b
  3773  000602  0E00               	movlw	0
  3774  000604  6FE1               	movwf	drawtext@i& (0+255),b
  3775  000606  D064               	goto	l3850
  3776  000608                     l3824:
  3777                           
  3778                           ; BSR set to: 0
  3779                           ;ST7735_TFT.c: 481: if(wrap && ((cursor_x + size * 5) > 128)){
  3780  000608  506D               	movf	_wrap,w,c
  3781  00060A  B4D8               	btfsc	status,2,c
  3782  00060C  D034               	goto	l3840
  3783                           
  3784                           ; BSR set to: 0
  3785  00060E  503E               	movf	drawtext@size,w,c
  3786  000610  0D05               	mullw	5
  3787  000612  0100               	movlb	0	; () banked
  3788  000614  51E4               	movf	drawtext@cursor_x& (0+255),w,b
  3789  000616  6E3F               	movwf	??_drawtext& (0+255),c
  3790  000618  6A40               	clrf	(??_drawtext+1)& (0+255),c
  3791  00061A  50F3               	movf	prodl,w,c
  3792  00061C  263F               	addwf	??_drawtext,f,c
  3793  00061E  50F4               	movf	prodh,w,c
  3794  000620  2240               	addwfc	??_drawtext+1,f,c
  3795  000622  BE40               	btfsc	??_drawtext+1,7,c
  3796  000624  D028               	goto	l3840
  3797  000626  5040               	movf	??_drawtext+1,w,c
  3798  000628  E104               	bnz	u2640
  3799  00062A  0E81               	movlw	129
  3800  00062C  5C3F               	subwf	??_drawtext,w,c
  3801  00062E  A0D8               	btfss	status,0,c
  3802  000630  D022               	goto	l3840
  3803  000632                     u2640:
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;ST7735_TFT.c: 482: cursor_x = 0;
  3807  000632  0E00               	movlw	0
  3808  000634  0100               	movlb	0	; () banked
  3809  000636  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  3810                           
  3811                           ; BSR set to: 0
  3812                           ;ST7735_TFT.c: 483: cursor_y = cursor_y + size * 7 + 3 ;
  3813  000638  503E               	movf	drawtext@size,w,c
  3814  00063A  0D07               	mullw	7
  3815  00063C  50F3               	movf	prodl,w,c
  3816  00063E  0100               	movlb	0	; () banked
  3817  000640  25E3               	addwf	drawtext@cursor_y& (0+255),w,b
  3818  000642  0F03               	addlw	3
  3819  000644  0100               	movlb	0	; () banked
  3820  000646  6FE3               	movwf	drawtext@cursor_y& (0+255),b
  3821                           
  3822                           ; BSR set to: 0
  3823                           ;ST7735_TFT.c: 484: if(cursor_y > 160) cursor_y = 160;
  3824  000648  0EA0               	movlw	160
  3825  00064A  0100               	movlb	0	; () banked
  3826  00064C  65E3               	cpfsgt	drawtext@cursor_y& (0+255),b
  3827  00064E  D004               	goto	l3836
  3828                           
  3829                           ; BSR set to: 0
  3830  000650  0EA0               	movlw	160
  3831  000652  0100               	movlb	0	; () banked
  3832  000654  6FE3               	movwf	drawtext@cursor_y& (0+255),b
  3833  000656  D000               	goto	l3836
  3834  000658                     l3836:
  3835                           
  3836                           ; BSR set to: 0
  3837                           ;ST7735_TFT.c: 485: if(_text[i] == 0x20) goto _skip; }
  3838  000658  0100               	movlb	0	; () banked
  3839  00065A  51E1               	movf	drawtext@i& (0+255),w,b
  3840  00065C  2438               	addwf	drawtext@_text,w,c
  3841  00065E  6ED9               	movwf	fsr2l,c
  3842  000660  0100               	movlb	0	; () banked
  3843  000662  51E2               	movf	(drawtext@i+1)& (0+255),w,b
  3844  000664  2039               	addwfc	drawtext@_text+1,w,c
  3845  000666  6EDA               	movwf	fsr2h,c
  3846  000668  0E20               	movlw	32
  3847  00066A  18DE               	xorwf	postinc2,w,c
  3848  00066C  B4D8               	btfsc	status,2,c
  3849  00066E  D02C               	goto	l3848
  3850  000670  D002               	goto	l3840
  3851                           
  3852                           ; BSR set to: 0
  3853  000672  D02A               	goto	l3848
  3854                           
  3855                           ; BSR set to: 0
  3856  000674  D000               	goto	l3840
  3857  000676                     l3840:
  3858                           
  3859                           ; BSR set to: 0
  3860                           ;ST7735_TFT.c: 486: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  3861  000676  C0E3  F02C         	movff	drawtext@cursor_y,drawChar@y
  3862  00067A  0100               	movlb	0	; () banked
  3863  00067C  51E1               	movf	drawtext@i& (0+255),w,b
  3864  00067E  2438               	addwf	drawtext@_text,w,c
  3865  000680  6ED9               	movwf	fsr2l,c
  3866  000682  0100               	movlb	0	; () banked
  3867  000684  51E2               	movf	(drawtext@i+1)& (0+255),w,b
  3868  000686  2039               	addwfc	drawtext@_text+1,w,c
  3869  000688  6EDA               	movwf	fsr2h,c
  3870  00068A  50DF               	movf	indf2,w,c
  3871  00068C  6E2D               	movwf	drawChar@c,c
  3872  00068E  C03A  F02E         	movff	drawtext@color,drawChar@color
  3873  000692  C03B  F02F         	movff	drawtext@color+1,drawChar@color+1
  3874  000696  C03C  F030         	movff	drawtext@bg,drawChar@bg
  3875  00069A  C03D  F031         	movff	drawtext@bg+1,drawChar@bg+1
  3876  00069E  C03E  F032         	movff	drawtext@size,drawChar@size
  3877  0006A2  0100               	movlb	0	; () banked
  3878  0006A4  51E4               	movf	drawtext@cursor_x& (0+255),w,b
  3879  0006A6  ECBB  F001         	call	_drawChar
  3880                           
  3881                           ;ST7735_TFT.c: 487: cursor_x = cursor_x + size * 6;
  3882  0006AA  503E               	movf	drawtext@size,w,c
  3883  0006AC  0D06               	mullw	6
  3884  0006AE  50F3               	movf	prodl,w,c
  3885  0006B0  0100               	movlb	0	; () banked
  3886  0006B2  25E4               	addwf	drawtext@cursor_x& (0+255),w,b
  3887  0006B4  0100               	movlb	0	; () banked
  3888  0006B6  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  3889                           
  3890                           ; BSR set to: 0
  3891                           ;ST7735_TFT.c: 488: if(cursor_x > 128) cursor_x = 128;
  3892  0006B8  0E80               	movlw	128
  3893  0006BA  0100               	movlb	0	; () banked
  3894  0006BC  65E4               	cpfsgt	drawtext@cursor_x& (0+255),b
  3895  0006BE  D004               	goto	l3848
  3896                           
  3897                           ; BSR set to: 0
  3898  0006C0  0E80               	movlw	128
  3899  0006C2  0100               	movlb	0	; () banked
  3900  0006C4  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  3901                           
  3902                           ; BSR set to: 0
  3903  0006C6  D000               	goto	l3848
  3904  0006C8                     l3848:
  3905                           
  3906                           ; BSR set to: 0
  3907  0006C8  0100               	movlb	0	; () banked
  3908  0006CA  4BE1               	infsnz	drawtext@i& (0+255),f,b
  3909  0006CC  2BE2               	incf	(drawtext@i+1)& (0+255),f,b
  3910  0006CE  D000               	goto	l3850
  3911  0006D0                     l3850:
  3912                           
  3913                           ; BSR set to: 0
  3914  0006D0  0100               	movlb	0	; () banked
  3915  0006D2  51DF               	movf	drawtext@textsize& (0+255),w,b
  3916  0006D4  0100               	movlb	0	; () banked
  3917  0006D6  5DE1               	subwf	drawtext@i& (0+255),w,b
  3918  0006D8  0100               	movlb	0	; () banked
  3919  0006DA  51E0               	movf	(drawtext@textsize+1)& (0+255),w,b
  3920  0006DC  0100               	movlb	0	; () banked
  3921  0006DE  59E2               	subwfb	(drawtext@i+1)& (0+255),w,b
  3922  0006E0  A0D8               	btfss	status,0,c
  3923  0006E2  D792               	goto	l3824
  3924                           
  3925                           ; BSR set to: 0
  3926                           
  3927                           ; BSR set to: 0
  3928  0006E4  0012               	return		;funcret
  3929  0006E6                     __end_of_drawtext:
  3930                           	opt stack 0
  3931                           tblptru	equ	0xFF8
  3932                           tblptrh	equ	0xFF7
  3933                           tblptrl	equ	0xFF6
  3934                           tablat	equ	0xFF5
  3935                           prodh	equ	0xFF4
  3936                           prodl	equ	0xFF3
  3937                           intcon2	equ	0xFF1
  3938                           postinc0	equ	0xFEE
  3939                           wreg	equ	0xFE8
  3940                           postdec1	equ	0xFE5
  3941                           fsr1l	equ	0xFE1
  3942                           indf2	equ	0xFDF
  3943                           postinc2	equ	0xFDE
  3944                           postdec2	equ	0xFDD
  3945                           fsr2h	equ	0xFDA
  3946                           fsr2l	equ	0xFD9
  3947                           status	equ	0xFD8
  3948                           
  3949 ;; *************** function _strlen *****************
  3950 ;; Defined at:
  3951 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  3952 ;; Parameters:    Size  Location     Type
  3953 ;;  s               2   14[COMRAM] PTR const unsigned char 
  3954 ;;		 -> NULL(0), buffer(31), 
  3955 ;; Auto vars:     Size  Location     Type
  3956 ;;  cp              2   18[COMRAM] PTR const unsigned char 
  3957 ;;		 -> NULL(0), buffer(31), 
  3958 ;; Return value:  Size  Location     Type
  3959 ;;                  2   14[COMRAM] unsigned int 
  3960 ;; Registers used:
  3961 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3962 ;; Tracked objects:
  3963 ;;		On entry : 0/0
  3964 ;;		On exit  : 0/0
  3965 ;;		Unchanged: 0/0
  3966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3967 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3968 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3969 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3970 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3971 ;;Total ram usage:        6 bytes
  3972 ;; Hardware stack levels used:    1
  3973 ;; Hardware stack levels required when called:    1
  3974 ;; This function calls:
  3975 ;;		Nothing
  3976 ;; This function is called by:
  3977 ;;		_drawtext
  3978 ;; This function uses a non-reentrant model
  3979 ;;
  3980                           
  3981                           	psect	text15
  3982  000F4E                     __ptext15:
  3983                           	opt stack 0
  3984  000F4E                     _strlen:
  3985                           	opt stack 26
  3986                           
  3987                           ; BSR set to: 0
  3988                           ;incstack = 0
  3989  000F4E  C00F  F013         	movff	strlen@s,strlen@cp
  3990  000F52  C010  F014         	movff	strlen@s+1,strlen@cp+1
  3991  000F56  D003               	goto	l3764
  3992  000F58                     l3762:
  3993  000F58  4A13               	infsnz	strlen@cp,f,c
  3994  000F5A  2A14               	incf	strlen@cp+1,f,c
  3995  000F5C  D000               	goto	l3764
  3996  000F5E                     l3764:
  3997  000F5E  C013  FFD9         	movff	strlen@cp,fsr2l
  3998  000F62  C014  FFDA         	movff	strlen@cp+1,fsr2h
  3999  000F66  50DF               	movf	indf2,w,c
  4000  000F68  A4D8               	btfss	status,2,c
  4001  000F6A  D7F6               	goto	l3762
  4002  000F6C  C00F  F011         	movff	strlen@s,??_strlen
  4003  000F70  C010  F012         	movff	strlen@s+1,??_strlen+1
  4004  000F74  1E11               	comf	??_strlen,f,c
  4005  000F76  1E12               	comf	??_strlen+1,f,c
  4006  000F78  4A11               	infsnz	??_strlen,f,c
  4007  000F7A  2A12               	incf	??_strlen+1,f,c
  4008  000F7C  5013               	movf	strlen@cp,w,c
  4009  000F7E  2411               	addwf	??_strlen,w,c
  4010  000F80  6E0F               	movwf	?_strlen,c
  4011  000F82  5014               	movf	strlen@cp+1,w,c
  4012  000F84  2012               	addwfc	??_strlen+1,w,c
  4013  000F86  6E10               	movwf	?_strlen+1,c
  4014  000F88  D000               	goto	l1156
  4015  000F8A                     l1156:
  4016  000F8A  0012               	return		;funcret
  4017  000F8C                     __end_of_strlen:
  4018                           	opt stack 0
  4019                           tblptru	equ	0xFF8
  4020                           tblptrh	equ	0xFF7
  4021                           tblptrl	equ	0xFF6
  4022                           tablat	equ	0xFF5
  4023                           prodh	equ	0xFF4
  4024                           prodl	equ	0xFF3
  4025                           intcon2	equ	0xFF1
  4026                           postinc0	equ	0xFEE
  4027                           wreg	equ	0xFE8
  4028                           postdec1	equ	0xFE5
  4029                           fsr1l	equ	0xFE1
  4030                           indf2	equ	0xFDF
  4031                           postinc2	equ	0xFDE
  4032                           postdec2	equ	0xFDD
  4033                           fsr2h	equ	0xFDA
  4034                           fsr2l	equ	0xFD9
  4035                           status	equ	0xFD8
  4036                           
  4037 ;; *************** function _drawChar *****************
  4038 ;; Defined at:
  4039 ;;		line 447 in file "ST7735_TFT.c"
  4040 ;; Parameters:    Size  Location     Type
  4041 ;;  x               1    wreg     unsigned char 
  4042 ;;  y               1   43[COMRAM] unsigned char 
  4043 ;;  c               1   44[COMRAM] unsigned char 
  4044 ;;  color           2   45[COMRAM] unsigned int 
  4045 ;;  bg              2   47[COMRAM] unsigned int 
  4046 ;;  size            1   49[COMRAM] unsigned char 
  4047 ;; Auto vars:     Size  Location     Type
  4048 ;;  x               1   51[COMRAM] unsigned char 
  4049 ;;  line            1   50[COMRAM] unsigned char 
  4050 ;;  i               1   53[COMRAM] unsigned char 
  4051 ;;  j               1   52[COMRAM] unsigned char 
  4052 ;; Return value:  Size  Location     Type
  4053 ;;		None               void
  4054 ;; Registers used:
  4055 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4056 ;; Tracked objects:
  4057 ;;		On entry : 0/0
  4058 ;;		On exit  : 0/0
  4059 ;;		Unchanged: 0/0
  4060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4061 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4062 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4064 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4065 ;;Total ram usage:       11 bytes
  4066 ;; Hardware stack levels used:    1
  4067 ;; Hardware stack levels required when called:    6
  4068 ;; This function calls:
  4069 ;;		___wmul
  4070 ;;		_drawPixel
  4071 ;;		_fillRect
  4072 ;; This function is called by:
  4073 ;;		_drawtext
  4074 ;; This function uses a non-reentrant model
  4075 ;;
  4076                           
  4077                           	psect	text16
  4078  000376                     __ptext16:
  4079                           	opt stack 0
  4080  000376                     _drawChar:
  4081                           	opt stack 21
  4082                           
  4083                           ;incstack = 0
  4084                           ;drawChar@x stored from wreg
  4085  000376  6E34               	movwf	drawChar@x,c
  4086                           
  4087                           ;ST7735_TFT.c: 449: char i, j;
  4088                           ;ST7735_TFT.c: 450: if((x >= 128) || (y >= 160))
  4089  000378  0E80               	movlw	128
  4090  00037A  6034               	cpfslt	drawChar@x,c
  4091  00037C  D0A6               	goto	l111
  4092  00037E  0E9F               	movlw	159
  4093  000380  642C               	cpfsgt	drawChar@y,c
  4094  000382  D001               	goto	l3710
  4095                           
  4096                           ;ST7735_TFT.c: 451: return;
  4097  000384  D0A2               	goto	l111
  4098  000386                     l3710:
  4099                           
  4100                           ;ST7735_TFT.c: 452: if(size < 1) size = 1;
  4101  000386  5032               	movf	drawChar@size,w,c
  4102  000388  A4D8               	btfss	status,2,c
  4103  00038A  D003               	goto	l3714
  4104  00038C  0E01               	movlw	1
  4105  00038E  6E32               	movwf	drawChar@size,c
  4106  000390  D000               	goto	l3714
  4107  000392                     l3714:
  4108                           
  4109                           ;ST7735_TFT.c: 453: if((c < ' ') || (c > '~'))
  4110  000392  0E1F               	movlw	31
  4111  000394  642D               	cpfsgt	drawChar@c,c
  4112  000396  D004               	goto	l3718
  4113  000398  0E7E               	movlw	126
  4114  00039A  642D               	cpfsgt	drawChar@c,c
  4115  00039C  D003               	goto	l113
  4116  00039E  D000               	goto	l3718
  4117  0003A0                     l3718:
  4118                           
  4119                           ;ST7735_TFT.c: 454: c = '?';
  4120  0003A0  0E3F               	movlw	63
  4121  0003A2  6E2D               	movwf	drawChar@c,c
  4122  0003A4                     l113:
  4123                           
  4124                           ;ST7735_TFT.c: 455: for(i=0; i<5; i++ ) {
  4125  0003A4  0E00               	movlw	0
  4126  0003A6  6E36               	movwf	drawChar@i,c
  4127  0003A8                     l3720:
  4128  0003A8  0E04               	movlw	4
  4129  0003AA  6436               	cpfsgt	drawChar@i,c
  4130  0003AC  D001               	goto	l3724
  4131  0003AE  D08D               	goto	l111
  4132  0003B0                     l3724:
  4133                           
  4134                           ;ST7735_TFT.c: 456: unsigned char line;
  4135                           ;ST7735_TFT.c: 457: if(c < 'S')
  4136  0003B0  0E53               	movlw	83
  4137  0003B2  602D               	cpfslt	drawChar@c,c
  4138  0003B4  D015               	goto	l3728
  4139                           
  4140                           ;ST7735_TFT.c: 458: line = font[(c - 32)*5 + i];
  4141  0003B6  0EE0               	movlw	224
  4142  0003B8  242D               	addwf	drawChar@c,w,c
  4143  0003BA  6E0F               	movwf	___wmul@multiplier,c
  4144  0003BC  6A10               	clrf	___wmul@multiplier+1,c
  4145  0003BE  0EFF               	movlw	255
  4146  0003C0  2210               	addwfc	___wmul@multiplier+1,f,c
  4147  0003C2  0E00               	movlw	0
  4148  0003C4  6E12               	movwf	___wmul@multiplicand+1,c
  4149  0003C6  0E05               	movlw	5
  4150  0003C8  6E11               	movwf	___wmul@multiplicand,c
  4151  0003CA  EC68  F008         	call	___wmul	;wreg free
  4152  0003CE  5036               	movf	drawChar@i,w,c
  4153  0003D0  260F               	addwf	?___wmul,f,c
  4154  0003D2  0E00               	movlw	0
  4155  0003D4  2210               	addwfc	?___wmul+1,f,c
  4156  0003D6  0E9B               	movlw	low _font
  4157  0003D8  240F               	addwf	?___wmul,w,c
  4158  0003DA  6EF6               	movwf	tblptrl,c
  4159  0003DC  0EFD               	movlw	high _font
  4160  0003DE  D014               	goto	L1
  4161  0003E0                     l3728:
  4162                           
  4163                           ;ST7735_TFT.c: 459: else
  4164                           ;ST7735_TFT.c: 460: line = font2[(c - 'S')*5 + i];
  4165  0003E0  0EAD               	movlw	173
  4166  0003E2  242D               	addwf	drawChar@c,w,c
  4167  0003E4  6E0F               	movwf	___wmul@multiplier,c
  4168  0003E6  6A10               	clrf	___wmul@multiplier+1,c
  4169  0003E8  0EFF               	movlw	255
  4170  0003EA  2210               	addwfc	___wmul@multiplier+1,f,c
  4171  0003EC  0E00               	movlw	0
  4172  0003EE  6E12               	movwf	___wmul@multiplicand+1,c
  4173  0003F0  0E05               	movlw	5
  4174  0003F2  6E11               	movwf	___wmul@multiplicand,c
  4175  0003F4  EC68  F008         	call	___wmul	;wreg free
  4176  0003F8  5036               	movf	drawChar@i,w,c
  4177  0003FA  260F               	addwf	?___wmul,f,c
  4178  0003FC  0E00               	movlw	0
  4179  0003FE  2210               	addwfc	?___wmul+1,f,c
  4180  000400  0E9A               	movlw	low _font2
  4181  000402  240F               	addwf	?___wmul,w,c
  4182  000404  6EF6               	movwf	tblptrl,c
  4183  000406  0EFE               	movlw	high _font2
  4184  000408                     L1:
  4185  000408  2010               	addwfc	?___wmul+1,w,c
  4186  00040A  6EF7               	movwf	tblptrh,c
  4187  00040C                     	if	0	;There are less than 3 active tblptr bytes
  4188  00040C                     	endif
  4189  00040C  0008               	tblrd		*
  4190  00040E  CFF5 F033          	movff	tablat,drawChar@line
  4191  000412  D000               	goto	l3730
  4192  000414                     l3730:
  4193                           
  4194                           ;ST7735_TFT.c: 461: for(j=0; j<7; j++, line >>= 1) {
  4195  000414  0E00               	movlw	0
  4196  000416  6E35               	movwf	drawChar@j,c
  4197  000418                     l3732:
  4198  000418  0E06               	movlw	6
  4199  00041A  6435               	cpfsgt	drawChar@j,c
  4200  00041C  D001               	goto	l120
  4201  00041E  D053               	goto	l3756
  4202  000420                     l120:
  4203                           
  4204                           ;ST7735_TFT.c: 462: if(line & 0x01) {
  4205  000420  A033               	btfss	drawChar@line,0,c
  4206  000422  D023               	goto	l3742
  4207                           
  4208                           ;ST7735_TFT.c: 463: if(size == 1) drawPixel(x+i, y+j, color);
  4209  000424  0432               	decf	drawChar@size,w,c
  4210  000426  A4D8               	btfss	status,2,c
  4211  000428  D00C               	goto	l3740
  4212  00042A  502C               	movf	drawChar@y,w,c
  4213  00042C  2435               	addwf	drawChar@j,w,c
  4214  00042E  6E16               	movwf	drawPixel@y,c
  4215  000430  C02E  F017         	movff	drawChar@color,drawPixel@color
  4216  000434  C02F  F018         	movff	drawChar@color+1,drawPixel@color+1
  4217  000438  5034               	movf	drawChar@x,w,c
  4218  00043A  2436               	addwf	drawChar@i,w,c
  4219  00043C  EC3B  F008         	call	_drawPixel
  4220  000440  D03E               	goto	l3750
  4221  000442                     l3740:
  4222                           
  4223                           ;ST7735_TFT.c: 464: else fillRect(x+(i*size), y+(j*size), size, size, color);
  4224  000442  5035               	movf	drawChar@j,w,c
  4225  000444  0232               	mulwf	drawChar@size,c
  4226  000446  50F3               	movf	prodl,w,c
  4227  000448  242C               	addwf	drawChar@y,w,c
  4228  00044A  6E21               	movwf	fillRect@y,c
  4229  00044C  C032  F022         	movff	drawChar@size,fillRect@w
  4230  000450  C032  F023         	movff	drawChar@size,fillRect@h
  4231  000454  C02E  F024         	movff	drawChar@color,fillRect@color
  4232  000458  C02F  F025         	movff	drawChar@color+1,fillRect@color+1
  4233  00045C  5036               	movf	drawChar@i,w,c
  4234  00045E  0232               	mulwf	drawChar@size,c
  4235  000460  50F3               	movf	prodl,w,c
  4236  000462  2434               	addwf	drawChar@x,w,c
  4237  000464  EC1E  F007         	call	_fillRect
  4238                           
  4239                           ;ST7735_TFT.c: 465: }
  4240  000468  D02A               	goto	l3750
  4241  00046A                     l3742:
  4242                           
  4243                           ;ST7735_TFT.c: 466: else if(bg != color) {
  4244  00046A  502E               	movf	drawChar@color,w,c
  4245  00046C  1830               	xorwf	drawChar@bg,w,c
  4246  00046E  E104               	bnz	u2500
  4247  000470  502F               	movf	drawChar@color+1,w,c
  4248  000472  1831               	xorwf	drawChar@bg+1,w,c
  4249  000474  B4D8               	btfsc	status,2,c
  4250  000476  D023               	goto	l3750
  4251  000478                     u2500:
  4252                           
  4253                           ;ST7735_TFT.c: 467: if(size == 1) drawPixel(x+i, y+j, bg);
  4254  000478  0432               	decf	drawChar@size,w,c
  4255  00047A  A4D8               	btfss	status,2,c
  4256  00047C  D00C               	goto	l3748
  4257  00047E  502C               	movf	drawChar@y,w,c
  4258  000480  2435               	addwf	drawChar@j,w,c
  4259  000482  6E16               	movwf	drawPixel@y,c
  4260  000484  C030  F017         	movff	drawChar@bg,drawPixel@color
  4261  000488  C031  F018         	movff	drawChar@bg+1,drawPixel@color+1
  4262  00048C  5034               	movf	drawChar@x,w,c
  4263  00048E  2436               	addwf	drawChar@i,w,c
  4264  000490  EC3B  F008         	call	_drawPixel
  4265  000494  D014               	goto	l3750
  4266  000496                     l3748:
  4267                           
  4268                           ;ST7735_TFT.c: 468: else fillRect(x+i*size, y+j*size, size, size, bg);
  4269  000496  5035               	movf	drawChar@j,w,c
  4270  000498  0232               	mulwf	drawChar@size,c
  4271  00049A  50F3               	movf	prodl,w,c
  4272  00049C  242C               	addwf	drawChar@y,w,c
  4273  00049E  6E21               	movwf	fillRect@y,c
  4274  0004A0  C032  F022         	movff	drawChar@size,fillRect@w
  4275  0004A4  C032  F023         	movff	drawChar@size,fillRect@h
  4276  0004A8  C030  F024         	movff	drawChar@bg,fillRect@color
  4277  0004AC  C031  F025         	movff	drawChar@bg+1,fillRect@color+1
  4278  0004B0  5036               	movf	drawChar@i,w,c
  4279  0004B2  0232               	mulwf	drawChar@size,c
  4280  0004B4  50F3               	movf	prodl,w,c
  4281  0004B6  2434               	addwf	drawChar@x,w,c
  4282  0004B8  EC1E  F007         	call	_fillRect
  4283  0004BC  D000               	goto	l3750
  4284  0004BE                     l3750:
  4285  0004BE  2A35               	incf	drawChar@j,f,c
  4286  0004C0  90D8               	bcf	status,0,c
  4287  0004C2  3233               	rrcf	drawChar@line,f,c
  4288  0004C4  D7A9               	goto	l3732
  4289  0004C6                     l3756:
  4290  0004C6  2A36               	incf	drawChar@i,f,c
  4291  0004C8  D76F               	goto	l3720
  4292  0004CA                     l111:
  4293  0004CA  0012               	return		;funcret
  4294  0004CC                     __end_of_drawChar:
  4295                           	opt stack 0
  4296                           tblptru	equ	0xFF8
  4297                           tblptrh	equ	0xFF7
  4298                           tblptrl	equ	0xFF6
  4299                           tablat	equ	0xFF5
  4300                           prodh	equ	0xFF4
  4301                           prodl	equ	0xFF3
  4302                           intcon2	equ	0xFF1
  4303                           postinc0	equ	0xFEE
  4304                           wreg	equ	0xFE8
  4305                           postdec1	equ	0xFE5
  4306                           fsr1l	equ	0xFE1
  4307                           indf2	equ	0xFDF
  4308                           postinc2	equ	0xFDE
  4309                           postdec2	equ	0xFDD
  4310                           fsr2h	equ	0xFDA
  4311                           fsr2l	equ	0xFD9
  4312                           status	equ	0xFD8
  4313                           
  4314 ;; *************** function _fillRect *****************
  4315 ;; Defined at:
  4316 ;;		line 437 in file "ST7735_TFT.c"
  4317 ;; Parameters:    Size  Location     Type
  4318 ;;  x               1    wreg     unsigned char 
  4319 ;;  y               1   32[COMRAM] unsigned char 
  4320 ;;  w               1   33[COMRAM] unsigned char 
  4321 ;;  h               1   34[COMRAM] unsigned char 
  4322 ;;  color           2   35[COMRAM] unsigned int 
  4323 ;; Auto vars:     Size  Location     Type
  4324 ;;  x               1   40[COMRAM] unsigned char 
  4325 ;;  i               2   41[COMRAM] int 
  4326 ;; Return value:  Size  Location     Type
  4327 ;;		None               void
  4328 ;; Registers used:
  4329 ;;		wreg, status,2, status,0, cstack
  4330 ;; Tracked objects:
  4331 ;;		On entry : 0/0
  4332 ;;		On exit  : 0/0
  4333 ;;		Unchanged: 0/0
  4334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4335 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4336 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4337 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4338 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4339 ;;Total ram usage:       11 bytes
  4340 ;; Hardware stack levels used:    1
  4341 ;; Hardware stack levels required when called:    5
  4342 ;; This function calls:
  4343 ;;		_drawFastVLine
  4344 ;; This function is called by:
  4345 ;;		_drawChar
  4346 ;; This function uses a non-reentrant model
  4347 ;;
  4348                           
  4349                           	psect	text17
  4350  000E3C                     __ptext17:
  4351                           	opt stack 0
  4352  000E3C                     _fillRect:
  4353                           	opt stack 21
  4354                           
  4355                           ;incstack = 0
  4356                           ;fillRect@x stored from wreg
  4357  000E3C  6E29               	movwf	fillRect@x,c
  4358                           
  4359                           ;ST7735_TFT.c: 439: signed int i;
  4360                           ;ST7735_TFT.c: 441: for (i = x; i < x + w; i++)
  4361  000E3E  C029  F02A         	movff	fillRect@x,fillRect@i
  4362  000E42  6A2B               	clrf	fillRect@i+1,c
  4363  000E44  D00E               	goto	l3612
  4364  000E46                     l3608:
  4365                           
  4366                           ;ST7735_TFT.c: 442: {
  4367                           ;ST7735_TFT.c: 443: drawFastVLine(i, y, h, color);
  4368  000E46  C021  F016         	movff	fillRect@y,drawFastVLine@y
  4369  000E4A  C023  F017         	movff	fillRect@h,drawFastVLine@h
  4370  000E4E  C024  F018         	movff	fillRect@color,drawFastVLine@color
  4371  000E52  C025  F019         	movff	fillRect@color+1,drawFastVLine@color+1
  4372  000E56  502A               	movf	fillRect@i,w,c
  4373  000E58  EC31  F005         	call	_drawFastVLine
  4374  000E5C  4A2A               	infsnz	fillRect@i,f,c
  4375  000E5E  2A2B               	incf	fillRect@i+1,f,c
  4376  000E60  D000               	goto	l3612
  4377  000E62                     l3612:
  4378  000E62  5022               	movf	fillRect@w,w,c
  4379  000E64  C029  F026         	movff	fillRect@x,??_fillRect
  4380  000E68  6A27               	clrf	(??_fillRect+1)& (0+255),c
  4381  000E6A  2626               	addwf	??_fillRect,f,c
  4382  000E6C  0E00               	movlw	0
  4383  000E6E  2227               	addwfc	??_fillRect+1,f,c
  4384  000E70  5026               	movf	??_fillRect,w,c
  4385  000E72  5C2A               	subwf	fillRect@i,w,c
  4386  000E74  502B               	movf	fillRect@i+1,w,c
  4387  000E76  0A80               	xorlw	128
  4388  000E78  6E28               	movwf	(??_fillRect+2)& (0+255),c
  4389  000E7A  5027               	movf	??_fillRect+1,w,c
  4390  000E7C  0A80               	xorlw	128
  4391  000E7E  5828               	subwfb	(??_fillRect+2)& (0+255),w,c
  4392  000E80  A0D8               	btfss	status,0,c
  4393  000E82  D7E1               	goto	l3608
  4394  000E84  0012               	return		;funcret
  4395  000E86                     __end_of_fillRect:
  4396                           	opt stack 0
  4397                           tblptru	equ	0xFF8
  4398                           tblptrh	equ	0xFF7
  4399                           tblptrl	equ	0xFF6
  4400                           tablat	equ	0xFF5
  4401                           prodh	equ	0xFF4
  4402                           prodl	equ	0xFF3
  4403                           intcon2	equ	0xFF1
  4404                           postinc0	equ	0xFEE
  4405                           wreg	equ	0xFE8
  4406                           postdec1	equ	0xFE5
  4407                           fsr1l	equ	0xFE1
  4408                           indf2	equ	0xFDF
  4409                           postinc2	equ	0xFDE
  4410                           postdec2	equ	0xFDD
  4411                           fsr2h	equ	0xFDA
  4412                           fsr2l	equ	0xFD9
  4413                           status	equ	0xFD8
  4414                           
  4415 ;; *************** function _drawFastVLine *****************
  4416 ;; Defined at:
  4417 ;;		line 416 in file "ST7735_TFT.c"
  4418 ;; Parameters:    Size  Location     Type
  4419 ;;  x               1    wreg     unsigned char 
  4420 ;;  y               1   21[COMRAM] unsigned char 
  4421 ;;  h               1   22[COMRAM] unsigned char 
  4422 ;;  color           2   23[COMRAM] unsigned int 
  4423 ;; Auto vars:     Size  Location     Type
  4424 ;;  x               1   31[COMRAM] unsigned char 
  4425 ;;  lo              1   30[COMRAM] unsigned char 
  4426 ;;  hi              1   29[COMRAM] unsigned char 
  4427 ;; Return value:  Size  Location     Type
  4428 ;;		None               void
  4429 ;; Registers used:
  4430 ;;		wreg, status,2, status,0, cstack
  4431 ;; Tracked objects:
  4432 ;;		On entry : 0/0
  4433 ;;		On exit  : 0/0
  4434 ;;		Unchanged: 0/0
  4435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4436 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4437 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4438 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4439 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4440 ;;Total ram usage:       11 bytes
  4441 ;; Hardware stack levels used:    1
  4442 ;; Hardware stack levels required when called:    4
  4443 ;; This function calls:
  4444 ;;		_setAddrWindow
  4445 ;;		_spiwrite
  4446 ;; This function is called by:
  4447 ;;		_fillRect
  4448 ;;		_fillCircleHelper
  4449 ;;		_fillCircle
  4450 ;;		_drawRect
  4451 ;; This function uses a non-reentrant model
  4452 ;;
  4453                           
  4454                           	psect	text18
  4455  000A62                     __ptext18:
  4456                           	opt stack 0
  4457  000A62                     _drawFastVLine:
  4458                           	opt stack 21
  4459                           
  4460                           ;incstack = 0
  4461                           ;drawFastVLine@x stored from wreg
  4462  000A62  6E20               	movwf	drawFastVLine@x,c
  4463                           
  4464                           ;ST7735_TFT.c: 418: unsigned char hi, lo;
  4465                           ;ST7735_TFT.c: 419: if((x >= 128) || (y >= 160))
  4466  000A64  0E80               	movlw	128
  4467  000A66  6020               	cpfslt	drawFastVLine@x,c
  4468  000A68  D03F               	goto	l95
  4469  000A6A  0E9F               	movlw	159
  4470  000A6C  6416               	cpfsgt	drawFastVLine@y,c
  4471  000A6E  D001               	goto	l3558
  4472                           
  4473                           ;ST7735_TFT.c: 420: return;
  4474  000A70  D03B               	goto	l95
  4475  000A72                     l3558:
  4476                           
  4477                           ;ST7735_TFT.c: 421: if((y + h - 1) >= 160)
  4478  000A72  0EFF               	movlw	255
  4479  000A74  6E1A               	movwf	??_drawFastVLine& (0+255),c
  4480  000A76  0EFF               	movlw	255
  4481  000A78  6E1B               	movwf	(??_drawFastVLine+1)& (0+255),c
  4482  000A7A  5017               	movf	drawFastVLine@h,w,c
  4483  000A7C  C016  F01C         	movff	drawFastVLine@y,??_drawFastVLine+2
  4484  000A80  6A1D               	clrf	(??_drawFastVLine+3)& (0+255),c
  4485  000A82  261C               	addwf	??_drawFastVLine+2,f,c
  4486  000A84  0E00               	movlw	0
  4487  000A86  221D               	addwfc	??_drawFastVLine+3,f,c
  4488  000A88  501A               	movf	??_drawFastVLine,w,c
  4489  000A8A  261C               	addwf	??_drawFastVLine+2,f,c
  4490  000A8C  501B               	movf	??_drawFastVLine+1,w,c
  4491  000A8E  221D               	addwfc	??_drawFastVLine+3,f,c
  4492  000A90  BE1D               	btfsc	??_drawFastVLine+3,7,c
  4493  000A92  D00B               	goto	l3562
  4494  000A94  501D               	movf	??_drawFastVLine+3,w,c
  4495  000A96  E104               	bnz	u2340
  4496  000A98  0EA0               	movlw	160
  4497  000A9A  5C1C               	subwf	??_drawFastVLine+2,w,c
  4498  000A9C  A0D8               	btfss	status,0,c
  4499  000A9E  D005               	goto	l3562
  4500  000AA0                     u2340:
  4501                           
  4502                           ;ST7735_TFT.c: 422: h = 160 - y;
  4503  000AA0  5016               	movf	drawFastVLine@y,w,c
  4504  000AA2  0800               	sublw	0
  4505  000AA4  0FA0               	addlw	160
  4506  000AA6  6E17               	movwf	drawFastVLine@h,c
  4507  000AA8  D000               	goto	l3562
  4508  000AAA                     l3562:
  4509                           
  4510                           ;ST7735_TFT.c: 423: hi = color >> 8; lo = color;
  4511  000AAA  5019               	movf	drawFastVLine@color+1,w,c
  4512  000AAC  6E1E               	movwf	drawFastVLine@hi,c
  4513  000AAE  C018  F01F         	movff	drawFastVLine@color,drawFastVLine@lo
  4514                           
  4515                           ;ST7735_TFT.c: 424: setAddrWindow(x, y, x, y + h - 1);
  4516  000AB2  C016  F012         	movff	drawFastVLine@y,setAddrWindow@y0
  4517  000AB6  C020  F013         	movff	drawFastVLine@x,setAddrWindow@x1
  4518  000ABA  5016               	movf	drawFastVLine@y,w,c
  4519  000ABC  2417               	addwf	drawFastVLine@h,w,c
  4520  000ABE  6E1A               	movwf	??_drawFastVLine& (0+255),c
  4521  000AC0  041A               	decf	??_drawFastVLine,w,c
  4522  000AC2  6E14               	movwf	setAddrWindow@y1,c
  4523  000AC4  5020               	movf	drawFastVLine@x,w,c
  4524  000AC6  ECD1  F006         	call	_setAddrWindow
  4525                           
  4526                           ;ST7735_TFT.c: 425: PORTCbits.RC0 = 1;
  4527  000ACA  8082               	bsf	3970,0,c	;volatile
  4528                           
  4529                           ;ST7735_TFT.c: 426: PORTCbits.RC1 = 0;
  4530  000ACC  9282               	bcf	3970,1,c	;volatile
  4531                           
  4532                           ;ST7735_TFT.c: 428: while (h--) {
  4533  000ACE  D007               	goto	l3574
  4534  000AD0                     l3572:
  4535                           
  4536                           ;ST7735_TFT.c: 429: spiwrite(hi);
  4537  000AD0  501E               	movf	drawFastVLine@hi,w,c
  4538  000AD2  ECDC  F008         	call	_spiwrite
  4539                           
  4540                           ;ST7735_TFT.c: 430: spiwrite(lo);
  4541  000AD6  501F               	movf	drawFastVLine@lo,w,c
  4542  000AD8  ECDC  F008         	call	_spiwrite
  4543  000ADC  D000               	goto	l3574
  4544  000ADE                     l3574:
  4545  000ADE  0617               	decf	drawFastVLine@h,f,c
  4546  000AE0  2817               	incf	drawFastVLine@h,w,c
  4547  000AE2  A4D8               	btfss	status,2,c
  4548  000AE4  D7F5               	goto	l3572
  4549                           
  4550                           ;ST7735_TFT.c: 431: }
  4551                           ;ST7735_TFT.c: 432: PORTCbits.RC1 = 1;
  4552  000AE6  8282               	bsf	3970,1,c	;volatile
  4553  000AE8                     l95:
  4554  000AE8  0012               	return		;funcret
  4555  000AEA                     __end_of_drawFastVLine:
  4556                           	opt stack 0
  4557                           tblptru	equ	0xFF8
  4558                           tblptrh	equ	0xFF7
  4559                           tblptrl	equ	0xFF6
  4560                           tablat	equ	0xFF5
  4561                           prodh	equ	0xFF4
  4562                           prodl	equ	0xFF3
  4563                           intcon2	equ	0xFF1
  4564                           postinc0	equ	0xFEE
  4565                           wreg	equ	0xFE8
  4566                           postdec1	equ	0xFE5
  4567                           fsr1l	equ	0xFE1
  4568                           indf2	equ	0xFDF
  4569                           postinc2	equ	0xFDE
  4570                           postdec2	equ	0xFDD
  4571                           fsr2h	equ	0xFDA
  4572                           fsr2l	equ	0xFD9
  4573                           status	equ	0xFD8
  4574                           
  4575 ;; *************** function _drawPixel *****************
  4576 ;; Defined at:
  4577 ;;		line 407 in file "ST7735_TFT.c"
  4578 ;; Parameters:    Size  Location     Type
  4579 ;;  x               1    wreg     unsigned char 
  4580 ;;  y               1   21[COMRAM] unsigned char 
  4581 ;;  color           2   22[COMRAM] unsigned int 
  4582 ;; Auto vars:     Size  Location     Type
  4583 ;;  x               1   24[COMRAM] unsigned char 
  4584 ;; Return value:  Size  Location     Type
  4585 ;;		None               void
  4586 ;; Registers used:
  4587 ;;		wreg, status,2, status,0, cstack
  4588 ;; Tracked objects:
  4589 ;;		On entry : 0/0
  4590 ;;		On exit  : 0/0
  4591 ;;		Unchanged: 0/0
  4592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4593 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4594 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4596 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4597 ;;Total ram usage:        4 bytes
  4598 ;; Hardware stack levels used:    1
  4599 ;; Hardware stack levels required when called:    4
  4600 ;; This function calls:
  4601 ;;		_setAddrWindow
  4602 ;;		_write_data
  4603 ;; This function is called by:
  4604 ;;		_drawChar
  4605 ;;		_drawCircle
  4606 ;;		_drawCircleHelper
  4607 ;; This function uses a non-reentrant model
  4608 ;;
  4609                           
  4610                           	psect	text19
  4611  001076                     __ptext19:
  4612                           	opt stack 0
  4613  001076                     _drawPixel:
  4614                           	opt stack 22
  4615                           
  4616                           ;incstack = 0
  4617                           ;drawPixel@x stored from wreg
  4618  001076  6E19               	movwf	drawPixel@x,c
  4619                           
  4620                           ;ST7735_TFT.c: 409: if((x >= 128) || (y >= 160))
  4621  001078  0E80               	movlw	128
  4622  00107A  6019               	cpfslt	drawPixel@x,c
  4623  00107C  D013               	goto	l89
  4624  00107E  0E9F               	movlw	159
  4625  001080  6416               	cpfsgt	drawPixel@y,c
  4626  001082  D001               	goto	l3600
  4627                           
  4628                           ;ST7735_TFT.c: 410: return;
  4629  001084  D00F               	goto	l89
  4630  001086                     l3600:
  4631                           
  4632                           ;ST7735_TFT.c: 411: setAddrWindow(x,y,x+1,y+1);
  4633  001086  C016  F012         	movff	drawPixel@y,setAddrWindow@y0
  4634  00108A  2819               	incf	drawPixel@x,w,c
  4635  00108C  6E13               	movwf	setAddrWindow@x1,c
  4636  00108E  2816               	incf	drawPixel@y,w,c
  4637  001090  6E14               	movwf	setAddrWindow@y1,c
  4638  001092  5019               	movf	drawPixel@x,w,c
  4639  001094  ECD1  F006         	call	_setAddrWindow
  4640                           
  4641                           ;ST7735_TFT.c: 412: write_data(color >> 8);
  4642  001098  5018               	movf	drawPixel@color+1,w,c
  4643  00109A  EC0A  F009         	call	_write_data
  4644                           
  4645                           ;ST7735_TFT.c: 413: write_data(color & 0xFF);
  4646  00109E  5017               	movf	drawPixel@color,w,c
  4647  0010A0  EC0A  F009         	call	_write_data
  4648  0010A4                     l89:
  4649  0010A4  0012               	return		;funcret
  4650  0010A6                     __end_of_drawPixel:
  4651                           	opt stack 0
  4652                           tblptru	equ	0xFF8
  4653                           tblptrh	equ	0xFF7
  4654                           tblptrl	equ	0xFF6
  4655                           tablat	equ	0xFF5
  4656                           prodh	equ	0xFF4
  4657                           prodl	equ	0xFF3
  4658                           intcon2	equ	0xFF1
  4659                           postinc0	equ	0xFEE
  4660                           wreg	equ	0xFE8
  4661                           postdec1	equ	0xFE5
  4662                           fsr1l	equ	0xFE1
  4663                           indf2	equ	0xFDF
  4664                           postinc2	equ	0xFDE
  4665                           postdec2	equ	0xFDD
  4666                           fsr2h	equ	0xFDA
  4667                           fsr2l	equ	0xFD9
  4668                           status	equ	0xFD8
  4669                           
  4670 ;; *************** function _setAddrWindow *****************
  4671 ;; Defined at:
  4672 ;;		line 392 in file "ST7735_TFT.c"
  4673 ;; Parameters:    Size  Location     Type
  4674 ;;  x0              1    wreg     unsigned char 
  4675 ;;  y0              1   17[COMRAM] unsigned char 
  4676 ;;  x1              1   18[COMRAM] unsigned char 
  4677 ;;  y1              1   19[COMRAM] unsigned char 
  4678 ;; Auto vars:     Size  Location     Type
  4679 ;;  x0              1   20[COMRAM] unsigned char 
  4680 ;; Return value:  Size  Location     Type
  4681 ;;		None               void
  4682 ;; Registers used:
  4683 ;;		wreg, status,2, status,0, cstack
  4684 ;; Tracked objects:
  4685 ;;		On entry : 0/0
  4686 ;;		On exit  : 0/0
  4687 ;;		Unchanged: 0/0
  4688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4689 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4690 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4692 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4693 ;;Total ram usage:        4 bytes
  4694 ;; Hardware stack levels used:    1
  4695 ;; Hardware stack levels required when called:    3
  4696 ;; This function calls:
  4697 ;;		_write_command
  4698 ;;		_write_data
  4699 ;; This function is called by:
  4700 ;;		_drawPixel
  4701 ;;		_drawFastVLine
  4702 ;;		_fillRectangle
  4703 ;;		_drawFastHLine
  4704 ;; This function uses a non-reentrant model
  4705 ;;
  4706                           
  4707                           	psect	text20
  4708  000DA2                     __ptext20:
  4709                           	opt stack 0
  4710  000DA2                     _setAddrWindow:
  4711                           	opt stack 23
  4712                           
  4713                           ;incstack = 0
  4714                           ;setAddrWindow@x0 stored from wreg
  4715  000DA2  6E15               	movwf	setAddrWindow@x0,c
  4716                           
  4717                           ;ST7735_TFT.c: 394: write_command(0x2A);
  4718  000DA4  0E2A               	movlw	42
  4719  000DA6  EC12  F009         	call	_write_command
  4720                           
  4721                           ;ST7735_TFT.c: 395: write_data(0);
  4722  000DAA  0E00               	movlw	0
  4723  000DAC  EC0A  F009         	call	_write_data
  4724                           
  4725                           ;ST7735_TFT.c: 396: write_data(x0 + colstart);
  4726  000DB0  5015               	movf	setAddrWindow@x0,w,c
  4727  000DB2  2458               	addwf	_colstart,w,c
  4728  000DB4  EC0A  F009         	call	_write_data
  4729                           
  4730                           ;ST7735_TFT.c: 397: write_data(0);
  4731  000DB8  0E00               	movlw	0
  4732  000DBA  EC0A  F009         	call	_write_data
  4733                           
  4734                           ;ST7735_TFT.c: 398: write_data(x1 + colstart);
  4735  000DBE  5013               	movf	setAddrWindow@x1,w,c
  4736  000DC0  2458               	addwf	_colstart,w,c
  4737  000DC2  EC0A  F009         	call	_write_data
  4738                           
  4739                           ;ST7735_TFT.c: 399: write_command(0x2B);
  4740  000DC6  0E2B               	movlw	43
  4741  000DC8  EC12  F009         	call	_write_command
  4742                           
  4743                           ;ST7735_TFT.c: 400: write_data(0);
  4744  000DCC  0E00               	movlw	0
  4745  000DCE  EC0A  F009         	call	_write_data
  4746                           
  4747                           ;ST7735_TFT.c: 401: write_data(y0 + rowstart);
  4748  000DD2  5012               	movf	setAddrWindow@y0,w,c
  4749  000DD4  2460               	addwf	_rowstart,w,c
  4750  000DD6  EC0A  F009         	call	_write_data
  4751                           
  4752                           ;ST7735_TFT.c: 402: write_data(0);
  4753  000DDA  0E00               	movlw	0
  4754  000DDC  EC0A  F009         	call	_write_data
  4755                           
  4756                           ;ST7735_TFT.c: 403: write_data(y1 + rowstart);
  4757  000DE0  5014               	movf	setAddrWindow@y1,w,c
  4758  000DE2  2460               	addwf	_rowstart,w,c
  4759  000DE4  EC0A  F009         	call	_write_data
  4760                           
  4761                           ;ST7735_TFT.c: 404: write_command(0x2C);
  4762  000DE8  0E2C               	movlw	44
  4763  000DEA  EC12  F009         	call	_write_command
  4764  000DEE  0012               	return		;funcret
  4765  000DF0                     __end_of_setAddrWindow:
  4766                           	opt stack 0
  4767                           tblptru	equ	0xFF8
  4768                           tblptrh	equ	0xFF7
  4769                           tblptrl	equ	0xFF6
  4770                           tablat	equ	0xFF5
  4771                           prodh	equ	0xFF4
  4772                           prodl	equ	0xFF3
  4773                           intcon2	equ	0xFF1
  4774                           postinc0	equ	0xFEE
  4775                           wreg	equ	0xFE8
  4776                           postdec1	equ	0xFE5
  4777                           fsr1l	equ	0xFE1
  4778                           indf2	equ	0xFDF
  4779                           postinc2	equ	0xFDE
  4780                           postdec2	equ	0xFDD
  4781                           fsr2h	equ	0xFDA
  4782                           fsr2l	equ	0xFD9
  4783                           status	equ	0xFD8
  4784                           
  4785 ;; *************** function _TFT_GreenTab_Initialize *****************
  4786 ;; Defined at:
  4787 ;;		line 644 in file "ST7735_TFT.c"
  4788 ;; Parameters:    Size  Location     Type
  4789 ;;		None
  4790 ;; Auto vars:     Size  Location     Type
  4791 ;;		None
  4792 ;; Return value:  Size  Location     Type
  4793 ;;		None               void
  4794 ;; Registers used:
  4795 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4796 ;; Tracked objects:
  4797 ;;		On entry : 0/0
  4798 ;;		On exit  : 0/0
  4799 ;;		Unchanged: 0/0
  4800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4804 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4805 ;;Total ram usage:        0 bytes
  4806 ;; Hardware stack levels used:    1
  4807 ;; Hardware stack levels required when called:    4
  4808 ;; This function calls:
  4809 ;;		_Rcmd1
  4810 ;;		_Rcmd2red
  4811 ;;		_Rcmd3
  4812 ;;		_write_command
  4813 ;;		_write_data
  4814 ;; This function is called by:
  4815 ;;		_Initialize_Screen
  4816 ;; This function uses a non-reentrant model
  4817 ;;
  4818                           
  4819                           	psect	text21
  4820  0010A6                     __ptext21:
  4821                           	opt stack 0
  4822  0010A6                     _TFT_GreenTab_Initialize:
  4823                           	opt stack 24
  4824                           
  4825                           ;ST7735_TFT.c: 646: PORTCbits.RC1 = 1;
  4826                           
  4827                           ;incstack = 0
  4828  0010A6  8282               	bsf	3970,1,c	;volatile
  4829                           
  4830                           ;ST7735_TFT.c: 647: PORTCbits.RC0 = 0;
  4831  0010A8  9082               	bcf	3970,0,c	;volatile
  4832                           
  4833                           ;ST7735_TFT.c: 649: SSPSTAT=0x80;
  4834  0010AA  0E80               	movlw	128
  4835  0010AC  6EC7               	movwf	4039,c	;volatile
  4836                           
  4837                           ;ST7735_TFT.c: 650: SSPCON1=0x30;
  4838  0010AE  0E30               	movlw	48
  4839  0010B0  6EC6               	movwf	4038,c	;volatile
  4840                           
  4841                           ;ST7735_TFT.c: 653: Rcmd1();
  4842  0010B2  EC66  F002         	call	_Rcmd1	;wreg free
  4843                           
  4844                           ;ST7735_TFT.c: 654: Rcmd2red();
  4845  0010B6  ECC6  F007         	call	_Rcmd2red	;wreg free
  4846                           
  4847                           ;ST7735_TFT.c: 655: Rcmd3();
  4848  0010BA  EC73  F003         	call	_Rcmd3	;wreg free
  4849                           
  4850                           ;ST7735_TFT.c: 656: write_command(0x36);
  4851  0010BE  0E36               	movlw	54
  4852  0010C0  EC12  F009         	call	_write_command
  4853                           
  4854                           ;ST7735_TFT.c: 657: write_data(0xC0);
  4855  0010C4  0EC0               	movlw	192
  4856  0010C6  EC0A  F009         	call	_write_data
  4857                           
  4858                           ;ST7735_TFT.c: 658: _tft_type = 1;
  4859  0010CA  0E01               	movlw	1
  4860  0010CC  6E52               	movwf	__tft_type,c
  4861  0010CE  0012               	return		;funcret
  4862  0010D0                     __end_of_TFT_GreenTab_Initialize:
  4863                           	opt stack 0
  4864                           tblptru	equ	0xFF8
  4865                           tblptrh	equ	0xFF7
  4866                           tblptrl	equ	0xFF6
  4867                           tablat	equ	0xFF5
  4868                           prodh	equ	0xFF4
  4869                           prodl	equ	0xFF3
  4870                           intcon2	equ	0xFF1
  4871                           postinc0	equ	0xFEE
  4872                           wreg	equ	0xFE8
  4873                           postdec1	equ	0xFE5
  4874                           fsr1l	equ	0xFE1
  4875                           indf2	equ	0xFDF
  4876                           postinc2	equ	0xFDE
  4877                           postdec2	equ	0xFDD
  4878                           fsr2h	equ	0xFDA
  4879                           fsr2l	equ	0xFD9
  4880                           status	equ	0xFD8
  4881                           
  4882 ;; *************** function _Rcmd3 *****************
  4883 ;; Defined at:
  4884 ;;		line 338 in file "ST7735_TFT.c"
  4885 ;; Parameters:    Size  Location     Type
  4886 ;;		None
  4887 ;; Auto vars:     Size  Location     Type
  4888 ;;		None
  4889 ;; Return value:  Size  Location     Type
  4890 ;;		None               void
  4891 ;; Registers used:
  4892 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4893 ;; Tracked objects:
  4894 ;;		On entry : 0/0
  4895 ;;		On exit  : 0/0
  4896 ;;		Unchanged: 0/0
  4897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4902 ;;Total ram usage:        0 bytes
  4903 ;; Hardware stack levels used:    1
  4904 ;; Hardware stack levels required when called:    3
  4905 ;; This function calls:
  4906 ;;		_delay_ms
  4907 ;;		_write_command
  4908 ;;		_write_data
  4909 ;; This function is called by:
  4910 ;;		_TFT_GreenTab_Initialize
  4911 ;;		_TFT_BlackTab_Initialize
  4912 ;; This function uses a non-reentrant model
  4913 ;;
  4914                           
  4915                           	psect	text22
  4916  0006E6                     __ptext22:
  4917                           	opt stack 0
  4918  0006E6                     _Rcmd3:
  4919                           	opt stack 24
  4920                           
  4921                           ;ST7735_TFT.c: 340: write_command(0xE0);
  4922                           
  4923                           ;incstack = 0
  4924  0006E6  0EE0               	movlw	224
  4925  0006E8  EC12  F009         	call	_write_command
  4926                           
  4927                           ;ST7735_TFT.c: 341: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  4928  0006EC  0E02               	movlw	2
  4929  0006EE  EC0A  F009         	call	_write_data
  4930  0006F2  0E1C               	movlw	28
  4931  0006F4  EC0A  F009         	call	_write_data
  4932  0006F8  0E07               	movlw	7
  4933  0006FA  EC0A  F009         	call	_write_data
  4934  0006FE  0E12               	movlw	18
  4935  000700  EC0A  F009         	call	_write_data
  4936                           
  4937                           ;ST7735_TFT.c: 342: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  4938  000704  0E37               	movlw	55
  4939  000706  EC0A  F009         	call	_write_data
  4940  00070A  0E32               	movlw	50
  4941  00070C  EC0A  F009         	call	_write_data
  4942  000710  0E29               	movlw	41
  4943  000712  EC0A  F009         	call	_write_data
  4944  000716  0E2D               	movlw	45
  4945  000718  EC0A  F009         	call	_write_data
  4946                           
  4947                           ;ST7735_TFT.c: 343: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  4948  00071C  0E29               	movlw	41
  4949  00071E  EC0A  F009         	call	_write_data
  4950  000722  0E25               	movlw	37
  4951  000724  EC0A  F009         	call	_write_data
  4952  000728  0E2B               	movlw	43
  4953  00072A  EC0A  F009         	call	_write_data
  4954  00072E  0E39               	movlw	57
  4955  000730  EC0A  F009         	call	_write_data
  4956                           
  4957                           ;ST7735_TFT.c: 344: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  4958  000734  0E00               	movlw	0
  4959  000736  EC0A  F009         	call	_write_data
  4960  00073A  0E01               	movlw	1
  4961  00073C  EC0A  F009         	call	_write_data
  4962  000740  0E03               	movlw	3
  4963  000742  EC0A  F009         	call	_write_data
  4964  000746  0E10               	movlw	16
  4965  000748  EC0A  F009         	call	_write_data
  4966                           
  4967                           ;ST7735_TFT.c: 345: write_command(0xE1);
  4968  00074C  0EE1               	movlw	225
  4969  00074E  EC12  F009         	call	_write_command
  4970                           
  4971                           ;ST7735_TFT.c: 346: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  4972  000752  0E03               	movlw	3
  4973  000754  EC0A  F009         	call	_write_data
  4974  000758  0E1D               	movlw	29
  4975  00075A  EC0A  F009         	call	_write_data
  4976  00075E  0E07               	movlw	7
  4977  000760  EC0A  F009         	call	_write_data
  4978  000764  0E06               	movlw	6
  4979  000766  EC0A  F009         	call	_write_data
  4980                           
  4981                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  4982  00076A  0E2E               	movlw	46
  4983  00076C  EC0A  F009         	call	_write_data
  4984  000770  0E2C               	movlw	44
  4985  000772  EC0A  F009         	call	_write_data
  4986  000776  0E29               	movlw	41
  4987  000778  EC0A  F009         	call	_write_data
  4988  00077C  0E2D               	movlw	45
  4989  00077E  EC0A  F009         	call	_write_data
  4990                           
  4991                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  4992  000782  0E2E               	movlw	46
  4993  000784  EC0A  F009         	call	_write_data
  4994  000788  0E2E               	movlw	46
  4995  00078A  EC0A  F009         	call	_write_data
  4996  00078E  0E37               	movlw	55
  4997  000790  EC0A  F009         	call	_write_data
  4998  000794  0E3F               	movlw	63
  4999  000796  EC0A  F009         	call	_write_data
  5000                           
  5001                           ;ST7735_TFT.c: 349: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  5002  00079A  0E00               	movlw	0
  5003  00079C  EC0A  F009         	call	_write_data
  5004  0007A0  0E00               	movlw	0
  5005  0007A2  EC0A  F009         	call	_write_data
  5006  0007A6  0E02               	movlw	2
  5007  0007A8  EC0A  F009         	call	_write_data
  5008  0007AC  0E10               	movlw	16
  5009  0007AE  EC0A  F009         	call	_write_data
  5010                           
  5011                           ;ST7735_TFT.c: 350: write_command(0x13);
  5012  0007B2  0E13               	movlw	19
  5013  0007B4  EC12  F009         	call	_write_command
  5014                           
  5015                           ;ST7735_TFT.c: 351: delay_ms(10);
  5016  0007B8  0E00               	movlw	0
  5017  0007BA  6E16               	movwf	delay_ms@ms+1,c
  5018  0007BC  0E0A               	movlw	10
  5019  0007BE  6E15               	movwf	delay_ms@ms,c
  5020  0007C0  ECA8  F006         	call	_delay_ms	;wreg free
  5021                           
  5022                           ;ST7735_TFT.c: 352: write_command(0x29);
  5023  0007C4  0E29               	movlw	41
  5024  0007C6  EC12  F009         	call	_write_command
  5025                           
  5026                           ;ST7735_TFT.c: 353: delay_ms(100);
  5027  0007CA  0E00               	movlw	0
  5028  0007CC  6E16               	movwf	delay_ms@ms+1,c
  5029  0007CE  0E64               	movlw	100
  5030  0007D0  6E15               	movwf	delay_ms@ms,c
  5031  0007D2  ECA8  F006         	call	_delay_ms	;wreg free
  5032  0007D6  0012               	return		;funcret
  5033  0007D8                     __end_of_Rcmd3:
  5034                           	opt stack 0
  5035                           tblptru	equ	0xFF8
  5036                           tblptrh	equ	0xFF7
  5037                           tblptrl	equ	0xFF6
  5038                           tablat	equ	0xFF5
  5039                           prodh	equ	0xFF4
  5040                           prodl	equ	0xFF3
  5041                           intcon2	equ	0xFF1
  5042                           postinc0	equ	0xFEE
  5043                           wreg	equ	0xFE8
  5044                           postdec1	equ	0xFE5
  5045                           fsr1l	equ	0xFE1
  5046                           indf2	equ	0xFDF
  5047                           postinc2	equ	0xFDE
  5048                           postdec2	equ	0xFDD
  5049                           fsr2h	equ	0xFDA
  5050                           fsr2l	equ	0xFD9
  5051                           status	equ	0xFD8
  5052                           
  5053 ;; *************** function _Rcmd2red *****************
  5054 ;; Defined at:
  5055 ;;		line 328 in file "ST7735_TFT.c"
  5056 ;; Parameters:    Size  Location     Type
  5057 ;;		None
  5058 ;; Auto vars:     Size  Location     Type
  5059 ;;		None
  5060 ;; Return value:  Size  Location     Type
  5061 ;;		None               void
  5062 ;; Registers used:
  5063 ;;		wreg, status,2, cstack
  5064 ;; Tracked objects:
  5065 ;;		On entry : 0/0
  5066 ;;		On exit  : 0/0
  5067 ;;		Unchanged: 0/0
  5068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5073 ;;Total ram usage:        0 bytes
  5074 ;; Hardware stack levels used:    1
  5075 ;; Hardware stack levels required when called:    3
  5076 ;; This function calls:
  5077 ;;		_write_command
  5078 ;;		_write_data
  5079 ;; This function is called by:
  5080 ;;		_TFT_GreenTab_Initialize
  5081 ;; This function uses a non-reentrant model
  5082 ;;
  5083                           
  5084                           	psect	text23
  5085  000F8C                     __ptext23:
  5086                           	opt stack 0
  5087  000F8C                     _Rcmd2red:
  5088                           	opt stack 24
  5089                           
  5090                           ;ST7735_TFT.c: 330: write_command(0x2A);
  5091                           
  5092                           ;incstack = 0
  5093  000F8C  0E2A               	movlw	42
  5094  000F8E  EC12  F009         	call	_write_command
  5095                           
  5096                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x00);
  5097  000F92  0E00               	movlw	0
  5098  000F94  EC0A  F009         	call	_write_data
  5099  000F98  0E00               	movlw	0
  5100  000F9A  EC0A  F009         	call	_write_data
  5101                           
  5102                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x7F);
  5103  000F9E  0E00               	movlw	0
  5104  000FA0  EC0A  F009         	call	_write_data
  5105  000FA4  0E7F               	movlw	127
  5106  000FA6  EC0A  F009         	call	_write_data
  5107                           
  5108                           ;ST7735_TFT.c: 333: write_command(0x2B);
  5109  000FAA  0E2B               	movlw	43
  5110  000FAC  EC12  F009         	call	_write_command
  5111                           
  5112                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x00);
  5113  000FB0  0E00               	movlw	0
  5114  000FB2  EC0A  F009         	call	_write_data
  5115  000FB6  0E00               	movlw	0
  5116  000FB8  EC0A  F009         	call	_write_data
  5117                           
  5118                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x9F);
  5119  000FBC  0E00               	movlw	0
  5120  000FBE  EC0A  F009         	call	_write_data
  5121  000FC2  0E9F               	movlw	159
  5122  000FC4  EC0A  F009         	call	_write_data
  5123  000FC8  0012               	return		;funcret
  5124  000FCA                     __end_of_Rcmd2red:
  5125                           	opt stack 0
  5126                           tblptru	equ	0xFF8
  5127                           tblptrh	equ	0xFF7
  5128                           tblptrl	equ	0xFF6
  5129                           tablat	equ	0xFF5
  5130                           prodh	equ	0xFF4
  5131                           prodl	equ	0xFF3
  5132                           intcon2	equ	0xFF1
  5133                           postinc0	equ	0xFEE
  5134                           wreg	equ	0xFE8
  5135                           postdec1	equ	0xFE5
  5136                           fsr1l	equ	0xFE1
  5137                           indf2	equ	0xFDF
  5138                           postinc2	equ	0xFDE
  5139                           postdec2	equ	0xFDD
  5140                           fsr2h	equ	0xFDA
  5141                           fsr2l	equ	0xFD9
  5142                           status	equ	0xFD8
  5143                           
  5144 ;; *************** function _Rcmd1 *****************
  5145 ;; Defined at:
  5146 ;;		line 281 in file "ST7735_TFT.c"
  5147 ;; Parameters:    Size  Location     Type
  5148 ;;		None
  5149 ;; Auto vars:     Size  Location     Type
  5150 ;;		None
  5151 ;; Return value:  Size  Location     Type
  5152 ;;		None               void
  5153 ;; Registers used:
  5154 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5155 ;; Tracked objects:
  5156 ;;		On entry : 0/0
  5157 ;;		On exit  : 0/0
  5158 ;;		Unchanged: 0/0
  5159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5164 ;;Total ram usage:        0 bytes
  5165 ;; Hardware stack levels used:    1
  5166 ;; Hardware stack levels required when called:    3
  5167 ;; This function calls:
  5168 ;;		_delay_ms
  5169 ;;		_write_command
  5170 ;;		_write_data
  5171 ;; This function is called by:
  5172 ;;		_TFT_GreenTab_Initialize
  5173 ;;		_TFT_BlackTab_Initialize
  5174 ;; This function uses a non-reentrant model
  5175 ;;
  5176                           
  5177                           	psect	text24
  5178  0004CC                     __ptext24:
  5179                           	opt stack 0
  5180  0004CC                     _Rcmd1:
  5181                           	opt stack 24
  5182                           
  5183                           ;ST7735_TFT.c: 283: write_command(0x01);
  5184                           
  5185                           ;incstack = 0
  5186  0004CC  0E01               	movlw	1
  5187  0004CE  EC12  F009         	call	_write_command
  5188                           
  5189                           ;ST7735_TFT.c: 284: delay_ms(150);
  5190  0004D2  0E00               	movlw	0
  5191  0004D4  6E16               	movwf	delay_ms@ms+1,c
  5192  0004D6  0E96               	movlw	150
  5193  0004D8  6E15               	movwf	delay_ms@ms,c
  5194  0004DA  ECA8  F006         	call	_delay_ms	;wreg free
  5195                           
  5196                           ;ST7735_TFT.c: 285: write_command(0x11);
  5197  0004DE  0E11               	movlw	17
  5198  0004E0  EC12  F009         	call	_write_command
  5199                           
  5200                           ;ST7735_TFT.c: 286: delay_ms(500);
  5201  0004E4  0E01               	movlw	1
  5202  0004E6  6E16               	movwf	delay_ms@ms+1,c
  5203  0004E8  0EF4               	movlw	244
  5204  0004EA  6E15               	movwf	delay_ms@ms,c
  5205  0004EC  ECA8  F006         	call	_delay_ms	;wreg free
  5206                           
  5207                           ;ST7735_TFT.c: 287: write_command(0xB1);
  5208  0004F0  0EB1               	movlw	177
  5209  0004F2  EC12  F009         	call	_write_command
  5210                           
  5211                           ;ST7735_TFT.c: 288: write_data(0x01);
  5212  0004F6  0E01               	movlw	1
  5213  0004F8  EC0A  F009         	call	_write_data
  5214                           
  5215                           ;ST7735_TFT.c: 289: write_data(0x2C);
  5216  0004FC  0E2C               	movlw	44
  5217  0004FE  EC0A  F009         	call	_write_data
  5218                           
  5219                           ;ST7735_TFT.c: 290: write_data(0x2D);
  5220  000502  0E2D               	movlw	45
  5221  000504  EC0A  F009         	call	_write_data
  5222                           
  5223                           ;ST7735_TFT.c: 291: write_command(0xB2);
  5224  000508  0EB2               	movlw	178
  5225  00050A  EC12  F009         	call	_write_command
  5226                           
  5227                           ;ST7735_TFT.c: 292: write_data(0x01);
  5228  00050E  0E01               	movlw	1
  5229  000510  EC0A  F009         	call	_write_data
  5230                           
  5231                           ;ST7735_TFT.c: 293: write_data(0x2C);
  5232  000514  0E2C               	movlw	44
  5233  000516  EC0A  F009         	call	_write_data
  5234                           
  5235                           ;ST7735_TFT.c: 294: write_data(0x2D);
  5236  00051A  0E2D               	movlw	45
  5237  00051C  EC0A  F009         	call	_write_data
  5238                           
  5239                           ;ST7735_TFT.c: 295: write_command(0xB3);
  5240  000520  0EB3               	movlw	179
  5241  000522  EC12  F009         	call	_write_command
  5242                           
  5243                           ;ST7735_TFT.c: 296: write_data(0x01);
  5244  000526  0E01               	movlw	1
  5245  000528  EC0A  F009         	call	_write_data
  5246                           
  5247                           ;ST7735_TFT.c: 297: write_data(0x2C);
  5248  00052C  0E2C               	movlw	44
  5249  00052E  EC0A  F009         	call	_write_data
  5250                           
  5251                           ;ST7735_TFT.c: 298: write_data(0x2D);
  5252  000532  0E2D               	movlw	45
  5253  000534  EC0A  F009         	call	_write_data
  5254                           
  5255                           ;ST7735_TFT.c: 299: write_data(0x01);
  5256  000538  0E01               	movlw	1
  5257  00053A  EC0A  F009         	call	_write_data
  5258                           
  5259                           ;ST7735_TFT.c: 300: write_data(0x2C);
  5260  00053E  0E2C               	movlw	44
  5261  000540  EC0A  F009         	call	_write_data
  5262                           
  5263                           ;ST7735_TFT.c: 301: write_data(0x2D);
  5264  000544  0E2D               	movlw	45
  5265  000546  EC0A  F009         	call	_write_data
  5266                           
  5267                           ;ST7735_TFT.c: 302: write_command(0xB4);
  5268  00054A  0EB4               	movlw	180
  5269  00054C  EC12  F009         	call	_write_command
  5270                           
  5271                           ;ST7735_TFT.c: 303: write_data(0x07);
  5272  000550  0E07               	movlw	7
  5273  000552  EC0A  F009         	call	_write_data
  5274                           
  5275                           ;ST7735_TFT.c: 304: write_command(0xC0);
  5276  000556  0EC0               	movlw	192
  5277  000558  EC12  F009         	call	_write_command
  5278                           
  5279                           ;ST7735_TFT.c: 305: write_data(0xA2);
  5280  00055C  0EA2               	movlw	162
  5281  00055E  EC0A  F009         	call	_write_data
  5282                           
  5283                           ;ST7735_TFT.c: 306: write_data(0x02);
  5284  000562  0E02               	movlw	2
  5285  000564  EC0A  F009         	call	_write_data
  5286                           
  5287                           ;ST7735_TFT.c: 307: write_data(0x84);
  5288  000568  0E84               	movlw	132
  5289  00056A  EC0A  F009         	call	_write_data
  5290                           
  5291                           ;ST7735_TFT.c: 308: write_command(0xC1);
  5292  00056E  0EC1               	movlw	193
  5293  000570  EC12  F009         	call	_write_command
  5294                           
  5295                           ;ST7735_TFT.c: 309: write_data(0xC5);
  5296  000574  0EC5               	movlw	197
  5297  000576  EC0A  F009         	call	_write_data
  5298                           
  5299                           ;ST7735_TFT.c: 310: write_command(0xC2);
  5300  00057A  0EC2               	movlw	194
  5301  00057C  EC12  F009         	call	_write_command
  5302                           
  5303                           ;ST7735_TFT.c: 311: write_data(0x0A);
  5304  000580  0E0A               	movlw	10
  5305  000582  EC0A  F009         	call	_write_data
  5306                           
  5307                           ;ST7735_TFT.c: 312: write_data(0x00);
  5308  000586  0E00               	movlw	0
  5309  000588  EC0A  F009         	call	_write_data
  5310                           
  5311                           ;ST7735_TFT.c: 313: write_command(0xC3);
  5312  00058C  0EC3               	movlw	195
  5313  00058E  EC12  F009         	call	_write_command
  5314                           
  5315                           ;ST7735_TFT.c: 314: write_data(0x8A);
  5316  000592  0E8A               	movlw	138
  5317  000594  EC0A  F009         	call	_write_data
  5318                           
  5319                           ;ST7735_TFT.c: 315: write_data(0x2A);
  5320  000598  0E2A               	movlw	42
  5321  00059A  EC0A  F009         	call	_write_data
  5322                           
  5323                           ;ST7735_TFT.c: 316: write_command(0xC4);
  5324  00059E  0EC4               	movlw	196
  5325  0005A0  EC12  F009         	call	_write_command
  5326                           
  5327                           ;ST7735_TFT.c: 317: write_data(0x8A);
  5328  0005A4  0E8A               	movlw	138
  5329  0005A6  EC0A  F009         	call	_write_data
  5330                           
  5331                           ;ST7735_TFT.c: 318: write_data(0xEE);
  5332  0005AA  0EEE               	movlw	238
  5333  0005AC  EC0A  F009         	call	_write_data
  5334                           
  5335                           ;ST7735_TFT.c: 319: write_command(0xC5);
  5336  0005B0  0EC5               	movlw	197
  5337  0005B2  EC12  F009         	call	_write_command
  5338                           
  5339                           ;ST7735_TFT.c: 320: write_data(0x0E);
  5340  0005B6  0E0E               	movlw	14
  5341  0005B8  EC0A  F009         	call	_write_data
  5342                           
  5343                           ;ST7735_TFT.c: 321: write_command(0x20);
  5344  0005BC  0E20               	movlw	32
  5345  0005BE  EC12  F009         	call	_write_command
  5346                           
  5347                           ;ST7735_TFT.c: 322: write_command(0x36);
  5348  0005C2  0E36               	movlw	54
  5349  0005C4  EC12  F009         	call	_write_command
  5350                           
  5351                           ;ST7735_TFT.c: 323: write_data(0xC8);
  5352  0005C8  0EC8               	movlw	200
  5353  0005CA  EC0A  F009         	call	_write_data
  5354                           
  5355                           ;ST7735_TFT.c: 324: write_command(0x3A);
  5356  0005CE  0E3A               	movlw	58
  5357  0005D0  EC12  F009         	call	_write_command
  5358                           
  5359                           ;ST7735_TFT.c: 325: write_data(0x05);
  5360  0005D4  0E05               	movlw	5
  5361  0005D6  EC0A  F009         	call	_write_data
  5362  0005DA  0012               	return		;funcret
  5363  0005DC                     __end_of_Rcmd1:
  5364                           	opt stack 0
  5365                           tblptru	equ	0xFF8
  5366                           tblptrh	equ	0xFF7
  5367                           tblptrl	equ	0xFF6
  5368                           tablat	equ	0xFF5
  5369                           prodh	equ	0xFF4
  5370                           prodl	equ	0xFF3
  5371                           intcon2	equ	0xFF1
  5372                           postinc0	equ	0xFEE
  5373                           wreg	equ	0xFE8
  5374                           postdec1	equ	0xFE5
  5375                           fsr1l	equ	0xFE1
  5376                           indf2	equ	0xFDF
  5377                           postinc2	equ	0xFDE
  5378                           postdec2	equ	0xFDD
  5379                           fsr2h	equ	0xFDA
  5380                           fsr2l	equ	0xFD9
  5381                           status	equ	0xFD8
  5382                           
  5383 ;; *************** function _write_data *****************
  5384 ;; Defined at:
  5385 ;;		line 209 in file "ST7735_TFT.c"
  5386 ;; Parameters:    Size  Location     Type
  5387 ;;  data_           1    wreg     unsigned char 
  5388 ;; Auto vars:     Size  Location     Type
  5389 ;;  data_           1   16[COMRAM] unsigned char 
  5390 ;; Return value:  Size  Location     Type
  5391 ;;		None               void
  5392 ;; Registers used:
  5393 ;;		wreg, status,2, cstack
  5394 ;; Tracked objects:
  5395 ;;		On entry : 0/0
  5396 ;;		On exit  : 0/0
  5397 ;;		Unchanged: 0/0
  5398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5400 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5402 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5403 ;;Total ram usage:        1 bytes
  5404 ;; Hardware stack levels used:    1
  5405 ;; Hardware stack levels required when called:    2
  5406 ;; This function calls:
  5407 ;;		_spiwrite
  5408 ;; This function is called by:
  5409 ;;		_Rcmd1
  5410 ;;		_Rcmd2red
  5411 ;;		_Rcmd3
  5412 ;;		_setAddrWindow
  5413 ;;		_drawPixel
  5414 ;;		_TFT_GreenTab_Initialize
  5415 ;;		_Bcmd
  5416 ;;		_setScrollDefinition
  5417 ;;		_Rcmd2green
  5418 ;;		_VerticalScroll
  5419 ;; This function uses a non-reentrant model
  5420 ;;
  5421                           
  5422                           	psect	text25
  5423  001214                     __ptext25:
  5424                           	opt stack 0
  5425  001214                     _write_data:
  5426                           	opt stack 23
  5427                           
  5428                           ;incstack = 0
  5429                           ;write_data@data_ stored from wreg
  5430  001214  6E11               	movwf	write_data@data_,c
  5431                           
  5432                           ;ST7735_TFT.c: 211: PORTCbits.RC1 = 0;
  5433  001216  9282               	bcf	3970,1,c	;volatile
  5434                           
  5435                           ;ST7735_TFT.c: 212: PORTCbits.RC0 = 1;
  5436  001218  8082               	bsf	3970,0,c	;volatile
  5437                           
  5438                           ;ST7735_TFT.c: 213: spiwrite(data_);
  5439  00121A  5011               	movf	write_data@data_,w,c
  5440  00121C  ECDC  F008         	call	_spiwrite
  5441                           
  5442                           ;ST7735_TFT.c: 214: PORTCbits.RC1 = 1;
  5443  001220  8282               	bsf	3970,1,c	;volatile
  5444  001222  0012               	return		;funcret
  5445  001224                     __end_of_write_data:
  5446                           	opt stack 0
  5447                           tblptru	equ	0xFF8
  5448                           tblptrh	equ	0xFF7
  5449                           tblptrl	equ	0xFF6
  5450                           tablat	equ	0xFF5
  5451                           prodh	equ	0xFF4
  5452                           prodl	equ	0xFF3
  5453                           intcon2	equ	0xFF1
  5454                           postinc0	equ	0xFEE
  5455                           wreg	equ	0xFE8
  5456                           postdec1	equ	0xFE5
  5457                           fsr1l	equ	0xFE1
  5458                           indf2	equ	0xFDF
  5459                           postinc2	equ	0xFDE
  5460                           postdec2	equ	0xFDD
  5461                           fsr2h	equ	0xFDA
  5462                           fsr2l	equ	0xFD9
  5463                           status	equ	0xFD8
  5464                           
  5465 ;; *************** function _write_command *****************
  5466 ;; Defined at:
  5467 ;;		line 198 in file "ST7735_TFT.c"
  5468 ;; Parameters:    Size  Location     Type
  5469 ;;  cmd_            1    wreg     unsigned char 
  5470 ;; Auto vars:     Size  Location     Type
  5471 ;;  cmd_            1   16[COMRAM] unsigned char 
  5472 ;; Return value:  Size  Location     Type
  5473 ;;		None               void
  5474 ;; Registers used:
  5475 ;;		wreg, status,2, cstack
  5476 ;; Tracked objects:
  5477 ;;		On entry : 0/0
  5478 ;;		On exit  : 0/0
  5479 ;;		Unchanged: 0/0
  5480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5482 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5484 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5485 ;;Total ram usage:        1 bytes
  5486 ;; Hardware stack levels used:    1
  5487 ;; Hardware stack levels required when called:    2
  5488 ;; This function calls:
  5489 ;;		_spiwrite
  5490 ;; This function is called by:
  5491 ;;		_Rcmd1
  5492 ;;		_Rcmd2red
  5493 ;;		_Rcmd3
  5494 ;;		_setAddrWindow
  5495 ;;		_TFT_GreenTab_Initialize
  5496 ;;		_Bcmd
  5497 ;;		_setScrollDefinition
  5498 ;;		_Rcmd2green
  5499 ;;		_VerticalScroll
  5500 ;; This function uses a non-reentrant model
  5501 ;;
  5502                           
  5503                           	psect	text26
  5504  001224                     __ptext26:
  5505                           	opt stack 0
  5506  001224                     _write_command:
  5507                           	opt stack 23
  5508                           
  5509                           ;incstack = 0
  5510                           ;write_command@cmd_ stored from wreg
  5511  001224  6E11               	movwf	write_command@cmd_,c
  5512                           
  5513                           ;ST7735_TFT.c: 200: PORTCbits.RC1 = 0;
  5514  001226  9282               	bcf	3970,1,c	;volatile
  5515                           
  5516                           ;ST7735_TFT.c: 202: PORTCbits.RC0 = 0;
  5517  001228  9082               	bcf	3970,0,c	;volatile
  5518                           
  5519                           ;ST7735_TFT.c: 203: spiwrite(cmd_);
  5520  00122A  5011               	movf	write_command@cmd_,w,c
  5521  00122C  ECDC  F008         	call	_spiwrite
  5522                           
  5523                           ;ST7735_TFT.c: 205: PORTCbits.RC1 = 1;
  5524  001230  8282               	bsf	3970,1,c	;volatile
  5525  001232  0012               	return		;funcret
  5526  001234                     __end_of_write_command:
  5527                           	opt stack 0
  5528                           tblptru	equ	0xFF8
  5529                           tblptrh	equ	0xFF7
  5530                           tblptrl	equ	0xFF6
  5531                           tablat	equ	0xFF5
  5532                           prodh	equ	0xFF4
  5533                           prodl	equ	0xFF3
  5534                           intcon2	equ	0xFF1
  5535                           postinc0	equ	0xFEE
  5536                           wreg	equ	0xFE8
  5537                           postdec1	equ	0xFE5
  5538                           fsr1l	equ	0xFE1
  5539                           indf2	equ	0xFDF
  5540                           postinc2	equ	0xFDE
  5541                           postdec2	equ	0xFDD
  5542                           fsr2h	equ	0xFDA
  5543                           fsr2l	equ	0xFD9
  5544                           status	equ	0xFD8
  5545                           
  5546 ;; *************** function _spiwrite *****************
  5547 ;; Defined at:
  5548 ;;		line 189 in file "ST7735_TFT.c"
  5549 ;; Parameters:    Size  Location     Type
  5550 ;;  spidata         1    wreg     unsigned char 
  5551 ;; Auto vars:     Size  Location     Type
  5552 ;;  spidata         1   15[COMRAM] unsigned char 
  5553 ;;  x               1   14[COMRAM] unsigned char 
  5554 ;; Return value:  Size  Location     Type
  5555 ;;		None               void
  5556 ;; Registers used:
  5557 ;;		wreg
  5558 ;; Tracked objects:
  5559 ;;		On entry : 0/0
  5560 ;;		On exit  : 0/0
  5561 ;;		Unchanged: 0/0
  5562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5564 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5566 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5567 ;;Total ram usage:        2 bytes
  5568 ;; Hardware stack levels used:    1
  5569 ;; Hardware stack levels required when called:    1
  5570 ;; This function calls:
  5571 ;;		Nothing
  5572 ;; This function is called by:
  5573 ;;		_write_command
  5574 ;;		_write_data
  5575 ;;		_drawFastVLine
  5576 ;;		_fillRectangle
  5577 ;;		_drawFastHLine
  5578 ;; This function uses a non-reentrant model
  5579 ;;
  5580                           
  5581                           	psect	text27
  5582  0011B8                     __ptext27:
  5583                           	opt stack 0
  5584  0011B8                     _spiwrite:
  5585                           	opt stack 25
  5586                           
  5587                           ;incstack = 0
  5588                           ;spiwrite@spidata stored from wreg
  5589  0011B8  6E10               	movwf	spiwrite@spidata,c
  5590                           
  5591                           ;ST7735_TFT.c: 191: char x;
  5592                           ;ST7735_TFT.c: 192: PIR1bits.SSPIF = 0;
  5593  0011BA  969E               	bcf	3998,3,c	;volatile
  5594                           
  5595                           ;ST7735_TFT.c: 193: x = SSPBUF;
  5596  0011BC  CFC9 F00F          	movff	4041,spiwrite@x	;volatile
  5597                           
  5598                           ;ST7735_TFT.c: 194: SSPBUF = spidata;
  5599  0011C0  C010  FFC9         	movff	spiwrite@spidata,4041	;volatile
  5600                           
  5601                           ;ST7735_TFT.c: 195: while (!SSPSTATbits.BF);
  5602  0011C4  D000               	goto	l45
  5603  0011C6                     l45:
  5604  0011C6  A0C7               	btfss	4039,0,c	;volatile
  5605  0011C8  D7FE               	goto	l45
  5606  0011CA  0012               	return		;funcret
  5607  0011CC                     __end_of_spiwrite:
  5608                           	opt stack 0
  5609                           tblptru	equ	0xFF8
  5610                           tblptrh	equ	0xFF7
  5611                           tblptrl	equ	0xFF6
  5612                           tablat	equ	0xFF5
  5613                           prodh	equ	0xFF4
  5614                           prodl	equ	0xFF3
  5615                           intcon2	equ	0xFF1
  5616                           postinc0	equ	0xFEE
  5617                           wreg	equ	0xFE8
  5618                           postdec1	equ	0xFE5
  5619                           fsr1l	equ	0xFE1
  5620                           indf2	equ	0xFDF
  5621                           postinc2	equ	0xFDE
  5622                           postdec2	equ	0xFDD
  5623                           fsr2h	equ	0xFDA
  5624                           fsr2l	equ	0xFD9
  5625                           status	equ	0xFD8
  5626                           
  5627 ;; *************** function _LCD_Reset *****************
  5628 ;; Defined at:
  5629 ;;		line 217 in file "ST7735_TFT.c"
  5630 ;; Parameters:    Size  Location     Type
  5631 ;;		None
  5632 ;; Auto vars:     Size  Location     Type
  5633 ;;		None
  5634 ;; Return value:  Size  Location     Type
  5635 ;;		None               void
  5636 ;; Registers used:
  5637 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5638 ;; Tracked objects:
  5639 ;;		On entry : 0/0
  5640 ;;		On exit  : 0/0
  5641 ;;		Unchanged: 0/0
  5642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5646 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5647 ;;Total ram usage:        0 bytes
  5648 ;; Hardware stack levels used:    1
  5649 ;; Hardware stack levels required when called:    3
  5650 ;; This function calls:
  5651 ;;		_delay_ms
  5652 ;; This function is called by:
  5653 ;;		_Initialize_Screen
  5654 ;; This function uses a non-reentrant model
  5655 ;;
  5656                           
  5657                           	psect	text28
  5658  0011CC                     __ptext28:
  5659                           	opt stack 0
  5660  0011CC                     _LCD_Reset:
  5661                           	opt stack 25
  5662                           
  5663                           ;ST7735_TFT.c: 219: PORTCbits.RC4 = 0;
  5664                           
  5665                           ;incstack = 0
  5666  0011CC  9882               	bcf	3970,4,c	;volatile
  5667                           
  5668                           ;ST7735_TFT.c: 220: delay_ms(100);
  5669  0011CE  0E00               	movlw	0
  5670  0011D0  6E16               	movwf	delay_ms@ms+1,c
  5671  0011D2  0E64               	movlw	100
  5672  0011D4  6E15               	movwf	delay_ms@ms,c
  5673  0011D6  ECA8  F006         	call	_delay_ms	;wreg free
  5674                           
  5675                           ;ST7735_TFT.c: 221: PORTCbits.RC4 = 1;
  5676  0011DA  8882               	bsf	3970,4,c	;volatile
  5677  0011DC  0012               	return		;funcret
  5678  0011DE                     __end_of_LCD_Reset:
  5679                           	opt stack 0
  5680                           tblptru	equ	0xFF8
  5681                           tblptrh	equ	0xFF7
  5682                           tblptrl	equ	0xFF6
  5683                           tablat	equ	0xFF5
  5684                           prodh	equ	0xFF4
  5685                           prodl	equ	0xFF3
  5686                           intcon2	equ	0xFF1
  5687                           postinc0	equ	0xFEE
  5688                           wreg	equ	0xFE8
  5689                           postdec1	equ	0xFE5
  5690                           fsr1l	equ	0xFE1
  5691                           indf2	equ	0xFDF
  5692                           postinc2	equ	0xFDE
  5693                           postdec2	equ	0xFDD
  5694                           fsr2h	equ	0xFDA
  5695                           fsr2l	equ	0xFD9
  5696                           status	equ	0xFD8
  5697                           
  5698 ;; *************** function _delay_ms *****************
  5699 ;; Defined at:
  5700 ;;		line 64 in file "ST7735_TFT.c"
  5701 ;; Parameters:    Size  Location     Type
  5702 ;;  ms              2   20[COMRAM] int 
  5703 ;; Auto vars:     Size  Location     Type
  5704 ;;  count           2   24[COMRAM] int 
  5705 ;; Return value:  Size  Location     Type
  5706 ;;		None               void
  5707 ;; Registers used:
  5708 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5709 ;; Tracked objects:
  5710 ;;		On entry : 0/0
  5711 ;;		On exit  : 0/0
  5712 ;;		Unchanged: 0/0
  5713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5714 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5715 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5716 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5717 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5718 ;;Total ram usage:        6 bytes
  5719 ;; Hardware stack levels used:    1
  5720 ;; Hardware stack levels required when called:    2
  5721 ;; This function calls:
  5722 ;;		___wmul
  5723 ;; This function is called by:
  5724 ;;		_LCD_Reset
  5725 ;;		_Rcmd1
  5726 ;;		_Rcmd3
  5727 ;;		_Bcmd
  5728 ;; This function uses a non-reentrant model
  5729 ;;
  5730                           
  5731                           	psect	text29
  5732  000D50                     __ptext29:
  5733                           	opt stack 0
  5734  000D50                     _delay_ms:
  5735                           	opt stack 24
  5736                           
  5737                           ;ST7735_TFT.c: 70: int count;
  5738                           ;ST7735_TFT.c: 71: count = 8000000/4000/8 * ms;
  5739                           
  5740                           ;incstack = 0
  5741  000D50  C015  F00F         	movff	delay_ms@ms,___wmul@multiplier
  5742  000D54  C016  F010         	movff	delay_ms@ms+1,___wmul@multiplier+1
  5743  000D58  0E00               	movlw	0
  5744  000D5A  6E12               	movwf	___wmul@multiplicand+1,c
  5745  000D5C  0EFA               	movlw	250
  5746  000D5E  6E11               	movwf	___wmul@multiplicand,c
  5747  000D60  EC68  F008         	call	___wmul	;wreg free
  5748  000D64  C00F  F019         	movff	?___wmul,delay_ms@count
  5749  000D68  C010  F01A         	movff	?___wmul+1,delay_ms@count+1
  5750                           
  5751                           ;ST7735_TFT.c: 72: count = (0xffff - count);
  5752  000D6C  C019  F017         	movff	delay_ms@count,??_delay_ms
  5753  000D70  C01A  F018         	movff	delay_ms@count+1,??_delay_ms+1
  5754  000D74  1E17               	comf	??_delay_ms,f,c
  5755  000D76  1E18               	comf	??_delay_ms+1,f,c
  5756  000D78  4A17               	infsnz	??_delay_ms,f,c
  5757  000D7A  2A18               	incf	??_delay_ms+1,f,c
  5758  000D7C  0EFF               	movlw	255
  5759  000D7E  2417               	addwf	??_delay_ms,w,c
  5760  000D80  6E19               	movwf	delay_ms@count,c
  5761  000D82  0EFF               	movlw	255
  5762  000D84  2018               	addwfc	??_delay_ms+1,w,c
  5763  000D86  6E1A               	movwf	delay_ms@count+1,c
  5764                           
  5765                           ;ST7735_TFT.c: 74: T3CON = 0xb8;
  5766  000D88  0EB8               	movlw	184
  5767  000D8A  6EB1               	movwf	4017,c	;volatile
  5768                           
  5769                           ;ST7735_TFT.c: 76: TMR3L = count & 0x00ff;
  5770  000D8C  C019  FFB2         	movff	delay_ms@count,4018	;volatile
  5771                           
  5772                           ;ST7735_TFT.c: 77: TMR3H = count >> 8;
  5773  000D90  501A               	movf	delay_ms@count+1,w,c
  5774  000D92  6EB3               	movwf	4019,c	;volatile
  5775                           
  5776                           ;ST7735_TFT.c: 79: PIR2bits.TMR3IF = 0;
  5777  000D94  92A1               	bcf	4001,1,c	;volatile
  5778                           
  5779                           ;ST7735_TFT.c: 80: T3CONbits.TMR3ON = 1;
  5780  000D96  80B1               	bsf	4017,0,c	;volatile
  5781                           
  5782                           ;ST7735_TFT.c: 82: while (PIR2bits.TMR3IF == 0);
  5783  000D98  D000               	goto	l35
  5784  000D9A                     l35:
  5785  000D9A  A2A1               	btfss	4001,1,c	;volatile
  5786  000D9C  D7FE               	goto	l35
  5787                           
  5788                           ;ST7735_TFT.c: 83: T3CONbits.TMR3ON = 0;
  5789  000D9E  90B1               	bcf	4017,0,c	;volatile
  5790  000DA0  0012               	return		;funcret
  5791  000DA2                     __end_of_delay_ms:
  5792                           	opt stack 0
  5793                           tblptru	equ	0xFF8
  5794                           tblptrh	equ	0xFF7
  5795                           tblptrl	equ	0xFF6
  5796                           tablat	equ	0xFF5
  5797                           prodh	equ	0xFF4
  5798                           prodl	equ	0xFF3
  5799                           intcon2	equ	0xFF1
  5800                           postinc0	equ	0xFEE
  5801                           wreg	equ	0xFE8
  5802                           postdec1	equ	0xFE5
  5803                           fsr1l	equ	0xFE1
  5804                           indf2	equ	0xFDF
  5805                           postinc2	equ	0xFDE
  5806                           postdec2	equ	0xFDD
  5807                           fsr2h	equ	0xFDA
  5808                           fsr2l	equ	0xFD9
  5809                           status	equ	0xFD8
  5810                           
  5811 ;; *************** function ___wmul *****************
  5812 ;; Defined at:
  5813 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  5814 ;; Parameters:    Size  Location     Type
  5815 ;;  multiplier      2   14[COMRAM] unsigned int 
  5816 ;;  multiplicand    2   16[COMRAM] unsigned int 
  5817 ;; Auto vars:     Size  Location     Type
  5818 ;;  product         2   18[COMRAM] unsigned int 
  5819 ;; Return value:  Size  Location     Type
  5820 ;;                  2   14[COMRAM] unsigned int 
  5821 ;; Registers used:
  5822 ;;		wreg, status,2, status,0, prodl, prodh
  5823 ;; Tracked objects:
  5824 ;;		On entry : 0/0
  5825 ;;		On exit  : 0/0
  5826 ;;		Unchanged: 0/0
  5827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5828 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5829 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5831 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5832 ;;Total ram usage:        6 bytes
  5833 ;; Hardware stack levels used:    1
  5834 ;; Hardware stack levels required when called:    1
  5835 ;; This function calls:
  5836 ;;		Nothing
  5837 ;; This function is called by:
  5838 ;;		_delay_ms
  5839 ;;		_drawChar
  5840 ;;		_printf
  5841 ;; This function uses a non-reentrant model
  5842 ;;
  5843                           
  5844                           	psect	text30
  5845  0010D0                     __ptext30:
  5846                           	opt stack 0
  5847  0010D0                     ___wmul:
  5848                           	opt stack 28
  5849                           
  5850                           ;incstack = 0
  5851  0010D0  500F               	movf	___wmul@multiplier,w,c
  5852  0010D2  0211               	mulwf	___wmul@multiplicand,c
  5853  0010D4  CFF3 F013          	movff	prodl,___wmul@product
  5854  0010D8  CFF4 F014          	movff	prodh,___wmul@product+1
  5855  0010DC  500F               	movf	___wmul@multiplier,w,c
  5856  0010DE  0212               	mulwf	___wmul@multiplicand+1,c
  5857  0010E0  50F3               	movf	prodl,w,c
  5858  0010E2  2614               	addwf	___wmul@product+1,f,c
  5859  0010E4  5010               	movf	___wmul@multiplier+1,w,c
  5860  0010E6  0211               	mulwf	___wmul@multiplicand,c
  5861  0010E8  50F3               	movf	prodl,w,c
  5862  0010EA  2614               	addwf	___wmul@product+1,f,c
  5863  0010EC  C013  F00F         	movff	___wmul@product,?___wmul
  5864  0010F0  C014  F010         	movff	___wmul@product+1,?___wmul+1
  5865  0010F4  D000               	goto	l594
  5866  0010F6                     l594:
  5867  0010F6  0012               	return		;funcret
  5868  0010F8                     __end_of___wmul:
  5869                           	opt stack 0
  5870                           tblptru	equ	0xFF8
  5871                           tblptrh	equ	0xFF7
  5872                           tblptrl	equ	0xFF6
  5873                           tablat	equ	0xFF5
  5874                           prodh	equ	0xFF4
  5875                           prodl	equ	0xFF3
  5876                           intcon2	equ	0xFF1
  5877                           postinc0	equ	0xFEE
  5878                           wreg	equ	0xFE8
  5879                           postdec1	equ	0xFE5
  5880                           fsr1l	equ	0xFE1
  5881                           indf2	equ	0xFDF
  5882                           postinc2	equ	0xFDE
  5883                           postdec2	equ	0xFDD
  5884                           fsr2h	equ	0xFDA
  5885                           fsr2l	equ	0xFD9
  5886                           status	equ	0xFD8
  5887                           
  5888 ;; *************** function _I2C_Init *****************
  5889 ;; Defined at:
  5890 ;;		line 10 in file "I2C_Soft.c"
  5891 ;; Parameters:    Size  Location     Type
  5892 ;;  c               4   14[COMRAM] unsigned long 
  5893 ;; Auto vars:     Size  Location     Type
  5894 ;;		None
  5895 ;; Return value:  Size  Location     Type
  5896 ;;		None               void
  5897 ;; Registers used:
  5898 ;;		wreg, cstack
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5904 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5907 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5908 ;;Total ram usage:        4 bytes
  5909 ;; Hardware stack levels used:    1
  5910 ;; Hardware stack levels required when called:    2
  5911 ;; This function calls:
  5912 ;;		_i2cHighScl
  5913 ;;		_i2cHighSda
  5914 ;; This function is called by:
  5915 ;;		_Do_Init
  5916 ;; This function uses a non-reentrant model
  5917 ;;
  5918                           
  5919                           	psect	text31
  5920  00124E                     __ptext31:
  5921                           	opt stack 0
  5922  00124E                     _I2C_Init:
  5923                           	opt stack 27
  5924                           
  5925                           ;I2C_Soft.c: 12: i2cHighScl();
  5926                           
  5927                           ;incstack = 0
  5928  00124E  EC21  F009         	call	_i2cHighScl	;wreg free
  5929                           
  5930                           ;I2C_Soft.c: 13: i2cHighSda();
  5931  001252  EC3A  F009         	call	_i2cHighSda	;wreg free
  5932  001256  0012               	return		;funcret
  5933  001258                     __end_of_I2C_Init:
  5934                           	opt stack 0
  5935                           tblptru	equ	0xFF8
  5936                           tblptrh	equ	0xFF7
  5937                           tblptrl	equ	0xFF6
  5938                           tablat	equ	0xFF5
  5939                           prodh	equ	0xFF4
  5940                           prodl	equ	0xFF3
  5941                           intcon2	equ	0xFF1
  5942                           postinc0	equ	0xFEE
  5943                           wreg	equ	0xFE8
  5944                           postdec1	equ	0xFE5
  5945                           fsr1l	equ	0xFE1
  5946                           indf2	equ	0xFDF
  5947                           postinc2	equ	0xFDE
  5948                           postdec2	equ	0xFDD
  5949                           fsr2h	equ	0xFDA
  5950                           fsr2l	equ	0xFD9
  5951                           status	equ	0xFD8
  5952                           
  5953 ;; *************** function _DS1621_Init *****************
  5954 ;; Defined at:
  5955 ;;		line 21 in file "I2C_Support.c"
  5956 ;; Parameters:    Size  Location     Type
  5957 ;;		None
  5958 ;; Auto vars:     Size  Location     Type
  5959 ;;  Device          1   19[COMRAM] unsigned char 
  5960 ;; Return value:  Size  Location     Type
  5961 ;;		None               void
  5962 ;; Registers used:
  5963 ;;		wreg, status,2, status,0, cstack
  5964 ;; Tracked objects:
  5965 ;;		On entry : 0/0
  5966 ;;		On exit  : 0/0
  5967 ;;		Unchanged: 0/0
  5968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5970 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5972 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5973 ;;Total ram usage:        1 bytes
  5974 ;; Hardware stack levels used:    1
  5975 ;; Hardware stack levels required when called:    4
  5976 ;; This function calls:
  5977 ;;		_I2C_Write_Cmd_Only
  5978 ;;		_I2C_Write_Cmd_Write_Data
  5979 ;; This function is called by:
  5980 ;;		_Do_Init
  5981 ;; This function uses a non-reentrant model
  5982 ;;
  5983                           
  5984                           	psect	text32
  5985  00113A                     __ptext32:
  5986                           	opt stack 0
  5987  00113A                     _DS1621_Init:
  5988                           	opt stack 25
  5989                           
  5990                           ;I2C_Support.c: 23: char Device = 0x48;
  5991                           
  5992                           ;incstack = 0
  5993  00113A  0E48               	movlw	72
  5994  00113C  6E14               	movwf	DS1621_Init@Device,c
  5995                           
  5996                           ;I2C_Support.c: 24: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
  5997  00113E  0EAC               	movlw	172
  5998  001140  6E11               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  5999  001142  0E02               	movlw	2
  6000  001144  6E12               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  6001  001146  5014               	movf	DS1621_Init@Device,w,c
  6002  001148  EC8D  F008         	call	_I2C_Write_Cmd_Write_Data
  6003                           
  6004                           ;I2C_Support.c: 25: I2C_Write_Cmd_Only(Device, 0xEE);
  6005  00114C  0EEE               	movlw	238
  6006  00114E  6E11               	movwf	I2C_Write_Cmd_Only@Cmd,c
  6007  001150  5014               	movf	DS1621_Init@Device,w,c
  6008  001152  ECBA  F008         	call	_I2C_Write_Cmd_Only
  6009  001156  0012               	return		;funcret
  6010  001158                     __end_of_DS1621_Init:
  6011                           	opt stack 0
  6012                           tblptru	equ	0xFF8
  6013                           tblptrh	equ	0xFF7
  6014                           tblptrl	equ	0xFF6
  6015                           tablat	equ	0xFF5
  6016                           prodh	equ	0xFF4
  6017                           prodl	equ	0xFF3
  6018                           intcon2	equ	0xFF1
  6019                           postinc0	equ	0xFEE
  6020                           wreg	equ	0xFE8
  6021                           postdec1	equ	0xFE5
  6022                           fsr1l	equ	0xFE1
  6023                           indf2	equ	0xFDF
  6024                           postinc2	equ	0xFDE
  6025                           postdec2	equ	0xFDD
  6026                           fsr2h	equ	0xFDA
  6027                           fsr2l	equ	0xFD9
  6028                           status	equ	0xFD8
  6029                           
  6030 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  6031 ;; Defined at:
  6032 ;;		line 148 in file "I2C_Soft.c"
  6033 ;; Parameters:    Size  Location     Type
  6034 ;;  Device          1    wreg     unsigned char 
  6035 ;;  Cmd             1   16[COMRAM] unsigned char 
  6036 ;;  Data_Out        1   17[COMRAM] unsigned char 
  6037 ;; Auto vars:     Size  Location     Type
  6038 ;;  Device          1   18[COMRAM] unsigned char 
  6039 ;; Return value:  Size  Location     Type
  6040 ;;		None               void
  6041 ;; Registers used:
  6042 ;;		wreg, status,2, status,0, cstack
  6043 ;; Tracked objects:
  6044 ;;		On entry : 0/0
  6045 ;;		On exit  : 0/0
  6046 ;;		Unchanged: 0/0
  6047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6048 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6049 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6051 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6052 ;;Total ram usage:        3 bytes
  6053 ;; Hardware stack levels used:    1
  6054 ;; Hardware stack levels required when called:    3
  6055 ;; This function calls:
  6056 ;;		_I2C_Start
  6057 ;;		_I2C_Stop
  6058 ;;		_I2C_Write
  6059 ;; This function is called by:
  6060 ;;		_DS1621_Init
  6061 ;; This function uses a non-reentrant model
  6062 ;;
  6063                           
  6064                           	psect	text33
  6065  00111A                     __ptext33:
  6066                           	opt stack 0
  6067  00111A                     _I2C_Write_Cmd_Write_Data:
  6068                           	opt stack 25
  6069                           
  6070                           ;incstack = 0
  6071                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  6072  00111A  6E13               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  6073                           
  6074                           ;I2C_Soft.c: 150: I2C_Start();
  6075  00111C  ECF8  F008         	call	_I2C_Start	;wreg free
  6076                           
  6077                           ;I2C_Soft.c: 151: I2C_Write((Device << 1) | 0);
  6078  001120  5013               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  6079  001122  2413               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  6080  001124  ECE5  F007         	call	_I2C_Write
  6081                           
  6082                           ;I2C_Soft.c: 152: I2C_Write(Cmd);
  6083  001128  5011               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  6084  00112A  ECE5  F007         	call	_I2C_Write
  6085                           
  6086                           ;I2C_Soft.c: 153: I2C_Write(Data_Out);
  6087  00112E  5012               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  6088  001130  ECE5  F007         	call	_I2C_Write
  6089                           
  6090                           ;I2C_Soft.c: 154: I2C_Stop();
  6091  001134  ECEF  F008         	call	_I2C_Stop	;wreg free
  6092  001138  0012               	return		;funcret
  6093  00113A                     __end_of_I2C_Write_Cmd_Write_Data:
  6094                           	opt stack 0
  6095                           tblptru	equ	0xFF8
  6096                           tblptrh	equ	0xFF7
  6097                           tblptrl	equ	0xFF6
  6098                           tablat	equ	0xFF5
  6099                           prodh	equ	0xFF4
  6100                           prodl	equ	0xFF3
  6101                           intcon2	equ	0xFF1
  6102                           postinc0	equ	0xFEE
  6103                           wreg	equ	0xFE8
  6104                           postdec1	equ	0xFE5
  6105                           fsr1l	equ	0xFE1
  6106                           indf2	equ	0xFDF
  6107                           postinc2	equ	0xFDE
  6108                           postdec2	equ	0xFDD
  6109                           fsr2h	equ	0xFDA
  6110                           fsr2l	equ	0xFD9
  6111                           status	equ	0xFD8
  6112                           
  6113 ;; *************** function _I2C_Write_Cmd_Only *****************
  6114 ;; Defined at:
  6115 ;;		line 140 in file "I2C_Soft.c"
  6116 ;; Parameters:    Size  Location     Type
  6117 ;;  Device          1    wreg     unsigned char 
  6118 ;;  Cmd             1   16[COMRAM] unsigned char 
  6119 ;; Auto vars:     Size  Location     Type
  6120 ;;  Device          1   17[COMRAM] unsigned char 
  6121 ;; Return value:  Size  Location     Type
  6122 ;;		None               void
  6123 ;; Registers used:
  6124 ;;		wreg, status,2, status,0, cstack
  6125 ;; Tracked objects:
  6126 ;;		On entry : 0/0
  6127 ;;		On exit  : 0/0
  6128 ;;		Unchanged: 0/0
  6129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6130 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6131 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6133 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6134 ;;Total ram usage:        2 bytes
  6135 ;; Hardware stack levels used:    1
  6136 ;; Hardware stack levels required when called:    3
  6137 ;; This function calls:
  6138 ;;		_I2C_Start
  6139 ;;		_I2C_Stop
  6140 ;;		_I2C_Write
  6141 ;; This function is called by:
  6142 ;;		_DS1621_Init
  6143 ;; This function uses a non-reentrant model
  6144 ;;
  6145                           
  6146                           	psect	text34
  6147  001174                     __ptext34:
  6148                           	opt stack 0
  6149  001174                     _I2C_Write_Cmd_Only:
  6150                           	opt stack 25
  6151                           
  6152                           ;incstack = 0
  6153                           ;I2C_Write_Cmd_Only@Device stored from wreg
  6154  001174  6E12               	movwf	I2C_Write_Cmd_Only@Device,c
  6155                           
  6156                           ;I2C_Soft.c: 142: I2C_Start();
  6157  001176  ECF8  F008         	call	_I2C_Start	;wreg free
  6158                           
  6159                           ;I2C_Soft.c: 143: I2C_Write((Device << 1) | 0);
  6160  00117A  5012               	movf	I2C_Write_Cmd_Only@Device,w,c
  6161  00117C  2412               	addwf	I2C_Write_Cmd_Only@Device,w,c
  6162  00117E  ECE5  F007         	call	_I2C_Write
  6163                           
  6164                           ;I2C_Soft.c: 144: I2C_Write(Cmd);
  6165  001182  5011               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  6166  001184  ECE5  F007         	call	_I2C_Write
  6167                           
  6168                           ;I2C_Soft.c: 145: I2C_Stop();
  6169  001188  ECEF  F008         	call	_I2C_Stop	;wreg free
  6170  00118C  0012               	return		;funcret
  6171  00118E                     __end_of_I2C_Write_Cmd_Only:
  6172                           	opt stack 0
  6173                           tblptru	equ	0xFF8
  6174                           tblptrh	equ	0xFF7
  6175                           tblptrl	equ	0xFF6
  6176                           tablat	equ	0xFF5
  6177                           prodh	equ	0xFF4
  6178                           prodl	equ	0xFF3
  6179                           intcon2	equ	0xFF1
  6180                           postinc0	equ	0xFEE
  6181                           wreg	equ	0xFE8
  6182                           postdec1	equ	0xFE5
  6183                           fsr1l	equ	0xFE1
  6184                           indf2	equ	0xFDF
  6185                           postinc2	equ	0xFDE
  6186                           postdec2	equ	0xFDD
  6187                           fsr2h	equ	0xFDA
  6188                           fsr2l	equ	0xFD9
  6189                           status	equ	0xFD8
  6190                           
  6191 ;; *************** function _DS3231_Read_Time *****************
  6192 ;; Defined at:
  6193 ;;		line 45 in file "I2C_Support.c"
  6194 ;; Parameters:    Size  Location     Type
  6195 ;;		None
  6196 ;; Auto vars:     Size  Location     Type
  6197 ;;  Device          1   18[COMRAM] unsigned char 
  6198 ;;  Address         1   17[COMRAM] unsigned char 
  6199 ;;  Data_Ret        1    0        unsigned char 
  6200 ;; Return value:  Size  Location     Type
  6201 ;;		None               void
  6202 ;; Registers used:
  6203 ;;		wreg, status,2, status,0, cstack
  6204 ;; Tracked objects:
  6205 ;;		On entry : 0/0
  6206 ;;		On exit  : 0/0
  6207 ;;		Unchanged: 0/0
  6208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6210 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6212 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6213 ;;Total ram usage:        2 bytes
  6214 ;; Hardware stack levels used:    1
  6215 ;; Hardware stack levels required when called:    4
  6216 ;; This function calls:
  6217 ;;		_I2C_ReStart
  6218 ;;		_I2C_Read
  6219 ;;		_I2C_Start
  6220 ;;		_I2C_Stop
  6221 ;;		_I2C_Write
  6222 ;; This function is called by:
  6223 ;;		_main
  6224 ;; This function uses a non-reentrant model
  6225 ;;
  6226                           
  6227                           	psect	text35
  6228  000C3C                     __ptext35:
  6229                           	opt stack 0
  6230  000C3C                     _DS3231_Read_Time:
  6231                           	opt stack 26
  6232                           
  6233                           ;I2C_Support.c: 47: char Device = 0x68;
  6234                           
  6235                           ;incstack = 0
  6236  000C3C  0E68               	movlw	104
  6237  000C3E  6E13               	movwf	DS3231_Read_Time@Device,c
  6238                           
  6239                           ;I2C_Support.c: 48: char Address = 0x00;
  6240  000C40  0E00               	movlw	0
  6241  000C42  6E12               	movwf	DS3231_Read_Time@Address,c
  6242                           
  6243                           ;I2C_Support.c: 49: char Data_Ret;
  6244                           ;I2C_Support.c: 50: I2C_Start();
  6245  000C44  ECF8  F008         	call	_I2C_Start	;wreg free
  6246                           
  6247                           ;I2C_Support.c: 51: I2C_Write((Device << 1) | 0);
  6248  000C48  5013               	movf	DS3231_Read_Time@Device,w,c
  6249  000C4A  2413               	addwf	DS3231_Read_Time@Device,w,c
  6250  000C4C  ECE5  F007         	call	_I2C_Write
  6251                           
  6252                           ;I2C_Support.c: 52: I2C_Write(Address);
  6253  000C50  5012               	movf	DS3231_Read_Time@Address,w,c
  6254  000C52  ECE5  F007         	call	_I2C_Write
  6255                           
  6256                           ;I2C_Support.c: 53: I2C_ReStart();
  6257  000C56  ECC7  F008         	call	_I2C_ReStart	;wreg free
  6258                           
  6259                           ;I2C_Support.c: 54: I2C_Write((Device << 1) | 1);
  6260  000C5A  80D8               	bsf	status,0,c
  6261  000C5C  3413               	rlcf	DS3231_Read_Time@Device,w,c
  6262  000C5E  ECE5  F007         	call	_I2C_Write
  6263                           
  6264                           ;I2C_Support.c: 55: second = I2C_Read(1);
  6265  000C62  0E01               	movlw	1
  6266  000C64  EC43  F007         	call	_I2C_Read
  6267  000C68  6E61               	movwf	_second,c
  6268                           
  6269                           ;I2C_Support.c: 56: minute = I2C_Read(1);
  6270  000C6A  0E01               	movlw	1
  6271  000C6C  EC43  F007         	call	_I2C_Read
  6272  000C70  6E5E               	movwf	_minute,c
  6273                           
  6274                           ;I2C_Support.c: 57: hour = I2C_Read(1);
  6275  000C72  0E01               	movlw	1
  6276  000C74  EC43  F007         	call	_I2C_Read
  6277  000C78  6E5C               	movwf	_hour,c
  6278                           
  6279                           ;I2C_Support.c: 58: dow = I2C_Read(1);
  6280  000C7A  0E01               	movlw	1
  6281  000C7C  EC43  F007         	call	_I2C_Read
  6282  000C80  6E5A               	movwf	_dow,c
  6283                           
  6284                           ;I2C_Support.c: 59: day = I2C_Read(1);
  6285  000C82  0E01               	movlw	1
  6286  000C84  EC43  F007         	call	_I2C_Read
  6287  000C88  6E59               	movwf	_day,c
  6288                           
  6289                           ;I2C_Support.c: 60: month = I2C_Read(1);
  6290  000C8A  0E01               	movlw	1
  6291  000C8C  EC43  F007         	call	_I2C_Read
  6292  000C90  6E5F               	movwf	_month,c
  6293                           
  6294                           ;I2C_Support.c: 61: year = I2C_Read(0);
  6295  000C92  0E00               	movlw	0
  6296  000C94  EC43  F007         	call	_I2C_Read
  6297  000C98  6E6B               	movwf	_year,c
  6298                           
  6299                           ;I2C_Support.c: 62: I2C_Stop();
  6300  000C9A  ECEF  F008         	call	_I2C_Stop	;wreg free
  6301  000C9E  0012               	return		;funcret
  6302  000CA0                     __end_of_DS3231_Read_Time:
  6303                           	opt stack 0
  6304                           tblptru	equ	0xFF8
  6305                           tblptrh	equ	0xFF7
  6306                           tblptrl	equ	0xFF6
  6307                           tablat	equ	0xFF5
  6308                           prodh	equ	0xFF4
  6309                           prodl	equ	0xFF3
  6310                           intcon2	equ	0xFF1
  6311                           postinc0	equ	0xFEE
  6312                           wreg	equ	0xFE8
  6313                           postdec1	equ	0xFE5
  6314                           fsr1l	equ	0xFE1
  6315                           indf2	equ	0xFDF
  6316                           postinc2	equ	0xFDE
  6317                           postdec2	equ	0xFDD
  6318                           fsr2h	equ	0xFDA
  6319                           fsr2l	equ	0xFD9
  6320                           status	equ	0xFD8
  6321                           
  6322 ;; *************** function _DS1621_Read_Temp *****************
  6323 ;; Defined at:
  6324 ;;		line 30 in file "I2C_Support.c"
  6325 ;; Parameters:    Size  Location     Type
  6326 ;;		None
  6327 ;; Auto vars:     Size  Location     Type
  6328 ;;  Device          1   21[COMRAM] unsigned char 
  6329 ;;  Data_Ret        1   20[COMRAM] unsigned char 
  6330 ;;  Cmd             1   19[COMRAM] unsigned char 
  6331 ;; Return value:  Size  Location     Type
  6332 ;;                  2   17[COMRAM] int 
  6333 ;; Registers used:
  6334 ;;		wreg, status,2, status,0, cstack
  6335 ;; Tracked objects:
  6336 ;;		On entry : 0/0
  6337 ;;		On exit  : 0/0
  6338 ;;		Unchanged: 0/0
  6339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6340 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6341 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6343 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6344 ;;Total ram usage:        5 bytes
  6345 ;; Hardware stack levels used:    1
  6346 ;; Hardware stack levels required when called:    4
  6347 ;; This function calls:
  6348 ;;		_I2C_ReStart
  6349 ;;		_I2C_Read
  6350 ;;		_I2C_Start
  6351 ;;		_I2C_Stop
  6352 ;;		_I2C_Write
  6353 ;; This function is called by:
  6354 ;;		_main
  6355 ;; This function uses a non-reentrant model
  6356 ;;
  6357                           
  6358                           	psect	text36
  6359  001008                     __ptext36:
  6360                           	opt stack 0
  6361  001008                     _DS1621_Read_Temp:
  6362                           	opt stack 26
  6363                           
  6364                           ;I2C_Support.c: 32: char Device = 0x48;
  6365                           
  6366                           ;incstack = 0
  6367  001008  0E48               	movlw	72
  6368  00100A  6E16               	movwf	DS1621_Read_Temp@Device,c
  6369                           
  6370                           ;I2C_Support.c: 33: char Cmd = 0xAA;
  6371  00100C  0EAA               	movlw	170
  6372  00100E  6E14               	movwf	DS1621_Read_Temp@Cmd,c
  6373                           
  6374                           ;I2C_Support.c: 34: char Data_Ret;
  6375                           ;I2C_Support.c: 35: I2C_Start();
  6376  001010  ECF8  F008         	call	_I2C_Start	;wreg free
  6377                           
  6378                           ;I2C_Support.c: 36: I2C_Write((Device << 1) | 0);
  6379  001014  5016               	movf	DS1621_Read_Temp@Device,w,c
  6380  001016  2416               	addwf	DS1621_Read_Temp@Device,w,c
  6381  001018  ECE5  F007         	call	_I2C_Write
  6382                           
  6383                           ;I2C_Support.c: 37: I2C_Write(Cmd);
  6384  00101C  5014               	movf	DS1621_Read_Temp@Cmd,w,c
  6385  00101E  ECE5  F007         	call	_I2C_Write
  6386                           
  6387                           ;I2C_Support.c: 38: I2C_ReStart();
  6388  001022  ECC7  F008         	call	_I2C_ReStart	;wreg free
  6389                           
  6390                           ;I2C_Support.c: 39: I2C_Write((Device << 1) | 1);
  6391  001026  80D8               	bsf	status,0,c
  6392  001028  3416               	rlcf	DS1621_Read_Temp@Device,w,c
  6393  00102A  ECE5  F007         	call	_I2C_Write
  6394                           
  6395                           ;I2C_Support.c: 40: Data_Ret = I2C_Read(0);
  6396  00102E  0E00               	movlw	0
  6397  001030  EC43  F007         	call	_I2C_Read
  6398  001034  6E15               	movwf	DS1621_Read_Temp@Data_Ret,c
  6399                           
  6400                           ;I2C_Support.c: 41: I2C_Stop();
  6401  001036  ECEF  F008         	call	_I2C_Stop	;wreg free
  6402                           
  6403                           ;I2C_Support.c: 42: return Data_Ret;
  6404  00103A  C015  F012         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
  6405  00103E  6A13               	clrf	?_DS1621_Read_Temp+1,c
  6406  001040  D000               	goto	l322
  6407  001042                     l322:
  6408  001042  0012               	return		;funcret
  6409  001044                     __end_of_DS1621_Read_Temp:
  6410                           	opt stack 0
  6411                           tblptru	equ	0xFF8
  6412                           tblptrh	equ	0xFF7
  6413                           tblptrl	equ	0xFF6
  6414                           tablat	equ	0xFF5
  6415                           prodh	equ	0xFF4
  6416                           prodl	equ	0xFF3
  6417                           intcon2	equ	0xFF1
  6418                           postinc0	equ	0xFEE
  6419                           wreg	equ	0xFE8
  6420                           postdec1	equ	0xFE5
  6421                           fsr1l	equ	0xFE1
  6422                           indf2	equ	0xFDF
  6423                           postinc2	equ	0xFDE
  6424                           postdec2	equ	0xFDD
  6425                           fsr2h	equ	0xFDA
  6426                           fsr2l	equ	0xFD9
  6427                           status	equ	0xFD8
  6428                           
  6429 ;; *************** function _I2C_Write *****************
  6430 ;; Defined at:
  6431 ;;		line 37 in file "I2C_Soft.c"
  6432 ;; Parameters:    Size  Location     Type
  6433 ;;  outByte         1    wreg     unsigned char 
  6434 ;; Auto vars:     Size  Location     Type
  6435 ;;  outByte         1   14[COMRAM] unsigned char 
  6436 ;;  n               1   15[COMRAM] unsigned char 
  6437 ;; Return value:  Size  Location     Type
  6438 ;;		None               void
  6439 ;; Registers used:
  6440 ;;		wreg, status,2, status,0, cstack
  6441 ;; Tracked objects:
  6442 ;;		On entry : 0/0
  6443 ;;		On exit  : 0/0
  6444 ;;		Unchanged: 0/0
  6445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6447 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6449 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6450 ;;Total ram usage:        2 bytes
  6451 ;; Hardware stack levels used:    1
  6452 ;; Hardware stack levels required when called:    2
  6453 ;; This function calls:
  6454 ;;		_i2cHighScl
  6455 ;;		_i2cHighSda
  6456 ;;		_i2cLowScl
  6457 ;;		_i2cLowSda
  6458 ;; This function is called by:
  6459 ;;		_I2C_Write_Cmd_Only
  6460 ;;		_I2C_Write_Cmd_Write_Data
  6461 ;;		_DS1621_Read_Temp
  6462 ;;		_DS3231_Read_Time
  6463 ;;		_I2C_Write_Address_Read_One_Byte
  6464 ;;		_I2C_Write_Address_Write_One_Byte
  6465 ;;		_I2C_Write_Cmd_Read_One_Byte
  6466 ;; This function uses a non-reentrant model
  6467 ;;
  6468                           
  6469                           	psect	text37
  6470  000FCA                     __ptext37:
  6471                           	opt stack 0
  6472  000FCA                     _I2C_Write:
  6473                           	opt stack 25
  6474                           
  6475                           ;incstack = 0
  6476                           ;I2C_Write@outByte stored from wreg
  6477  000FCA  6E0F               	movwf	I2C_Write@outByte,c
  6478                           
  6479                           ;I2C_Soft.c: 39: unsigned char n;
  6480                           ;I2C_Soft.c: 40: for(n=0; n<8; n++)
  6481  000FCC  0E00               	movlw	0
  6482  000FCE  6E10               	movwf	I2C_Write@n,c
  6483  000FD0                     l1496:
  6484  000FD0  0E07               	movlw	7
  6485  000FD2  6410               	cpfsgt	I2C_Write@n,c
  6486  000FD4  D001               	goto	l242
  6487  000FD6  D011               	goto	l1514
  6488  000FD8                     l242:
  6489                           
  6490                           ;I2C_Soft.c: 41: {
  6491                           ;I2C_Soft.c: 42: if(outByte&0x80) i2cHighSda();
  6492  000FD8  AE0F               	btfss	I2C_Write@outByte,7,c
  6493  000FDA  D003               	goto	l1502
  6494  000FDC  EC3A  F009         	call	_i2cHighSda	;wreg free
  6495  000FE0  D003               	goto	l1504
  6496  000FE2                     l1502:
  6497                           
  6498                           ;I2C_Soft.c: 43: else i2cLowSda();
  6499  000FE2  EC31  F009         	call	_i2cLowSda	;wreg free
  6500  000FE6  D000               	goto	l1504
  6501  000FE8                     l1504:
  6502                           
  6503                           ;I2C_Soft.c: 44: i2cHighScl();
  6504  000FE8  EC21  F009         	call	_i2cHighScl	;wreg free
  6505                           
  6506                           ;I2C_Soft.c: 45: i2cLowScl();
  6507  000FEC  EC36  F009         	call	_i2cLowScl	;wreg free
  6508                           
  6509                           ;I2C_Soft.c: 46: outByte = outByte << 1;
  6510  000FF0  500F               	movf	I2C_Write@outByte,w,c
  6511  000FF2  240F               	addwf	I2C_Write@outByte,w,c
  6512  000FF4  6E0F               	movwf	I2C_Write@outByte,c
  6513  000FF6  2A10               	incf	I2C_Write@n,f,c
  6514  000FF8  D7EB               	goto	l1496
  6515  000FFA                     l1514:
  6516                           
  6517                           ;I2C_Soft.c: 47: }
  6518                           ;I2C_Soft.c: 48: i2cHighSda();
  6519  000FFA  EC3A  F009         	call	_i2cHighSda	;wreg free
  6520                           
  6521                           ;I2C_Soft.c: 49: i2cHighScl();
  6522  000FFE  EC21  F009         	call	_i2cHighScl	;wreg free
  6523                           
  6524                           ;I2C_Soft.c: 50: i2cLowScl();
  6525  001002  EC36  F009         	call	_i2cLowScl	;wreg free
  6526  001006  0012               	return		;funcret
  6527  001008                     __end_of_I2C_Write:
  6528                           	opt stack 0
  6529                           tblptru	equ	0xFF8
  6530                           tblptrh	equ	0xFF7
  6531                           tblptrl	equ	0xFF6
  6532                           tablat	equ	0xFF5
  6533                           prodh	equ	0xFF4
  6534                           prodl	equ	0xFF3
  6535                           intcon2	equ	0xFF1
  6536                           postinc0	equ	0xFEE
  6537                           wreg	equ	0xFE8
  6538                           postdec1	equ	0xFE5
  6539                           fsr1l	equ	0xFE1
  6540                           indf2	equ	0xFDF
  6541                           postinc2	equ	0xFDE
  6542                           postdec2	equ	0xFDD
  6543                           fsr2h	equ	0xFDA
  6544                           fsr2l	equ	0xFD9
  6545                           status	equ	0xFD8
  6546                           
  6547 ;; *************** function _I2C_Stop *****************
  6548 ;; Defined at:
  6549 ;;		line 84 in file "I2C_Soft.c"
  6550 ;; Parameters:    Size  Location     Type
  6551 ;;		None
  6552 ;; Auto vars:     Size  Location     Type
  6553 ;;		None
  6554 ;; Return value:  Size  Location     Type
  6555 ;;		None               void
  6556 ;; Registers used:
  6557 ;;		wreg, cstack
  6558 ;; Tracked objects:
  6559 ;;		On entry : 0/0
  6560 ;;		On exit  : 0/0
  6561 ;;		Unchanged: 0/0
  6562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6567 ;;Total ram usage:        0 bytes
  6568 ;; Hardware stack levels used:    1
  6569 ;; Hardware stack levels required when called:    2
  6570 ;; This function calls:
  6571 ;;		_i2cHighScl
  6572 ;;		_i2cHighSda
  6573 ;;		_i2cLowScl
  6574 ;;		_i2cLowSda
  6575 ;; This function is called by:
  6576 ;;		_I2C_Write_Cmd_Only
  6577 ;;		_I2C_Write_Cmd_Write_Data
  6578 ;;		_DS1621_Read_Temp
  6579 ;;		_DS3231_Read_Time
  6580 ;;		_I2C_Write_Address_Read_One_Byte
  6581 ;;		_I2C_Write_Address_Write_One_Byte
  6582 ;;		_I2C_Write_Cmd_Read_One_Byte
  6583 ;; This function uses a non-reentrant model
  6584 ;;
  6585                           
  6586                           	psect	text38
  6587  0011DE                     __ptext38:
  6588                           	opt stack 0
  6589  0011DE                     _I2C_Stop:
  6590                           	opt stack 25
  6591                           
  6592                           ;I2C_Soft.c: 86: i2cLowScl();
  6593                           
  6594                           ;incstack = 0
  6595  0011DE  EC36  F009         	call	_i2cLowScl	;wreg free
  6596                           
  6597                           ;I2C_Soft.c: 87: i2cLowSda();
  6598  0011E2  EC31  F009         	call	_i2cLowSda	;wreg free
  6599                           
  6600                           ;I2C_Soft.c: 88: i2cHighScl();
  6601  0011E6  EC21  F009         	call	_i2cHighScl	;wreg free
  6602                           
  6603                           ;I2C_Soft.c: 89: i2cHighSda();
  6604  0011EA  EC3A  F009         	call	_i2cHighSda	;wreg free
  6605  0011EE  0012               	return		;funcret
  6606  0011F0                     __end_of_I2C_Stop:
  6607                           	opt stack 0
  6608                           tblptru	equ	0xFF8
  6609                           tblptrh	equ	0xFF7
  6610                           tblptrl	equ	0xFF6
  6611                           tablat	equ	0xFF5
  6612                           prodh	equ	0xFF4
  6613                           prodl	equ	0xFF3
  6614                           intcon2	equ	0xFF1
  6615                           postinc0	equ	0xFEE
  6616                           wreg	equ	0xFE8
  6617                           postdec1	equ	0xFE5
  6618                           fsr1l	equ	0xFE1
  6619                           indf2	equ	0xFDF
  6620                           postinc2	equ	0xFDE
  6621                           postdec2	equ	0xFDD
  6622                           fsr2h	equ	0xFDA
  6623                           fsr2l	equ	0xFD9
  6624                           status	equ	0xFD8
  6625                           
  6626 ;; *************** function _I2C_Start *****************
  6627 ;; Defined at:
  6628 ;;		line 67 in file "I2C_Soft.c"
  6629 ;; Parameters:    Size  Location     Type
  6630 ;;		None
  6631 ;; Auto vars:     Size  Location     Type
  6632 ;;		None
  6633 ;; Return value:  Size  Location     Type
  6634 ;;		None               void
  6635 ;; Registers used:
  6636 ;;		wreg, cstack
  6637 ;; Tracked objects:
  6638 ;;		On entry : 0/0
  6639 ;;		On exit  : 0/0
  6640 ;;		Unchanged: 0/0
  6641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6645 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6646 ;;Total ram usage:        0 bytes
  6647 ;; Hardware stack levels used:    1
  6648 ;; Hardware stack levels required when called:    2
  6649 ;; This function calls:
  6650 ;;		_i2cHighScl
  6651 ;;		_i2cHighSda
  6652 ;;		_i2cLowScl
  6653 ;;		_i2cLowSda
  6654 ;; This function is called by:
  6655 ;;		_I2C_Write_Cmd_Only
  6656 ;;		_I2C_Write_Cmd_Write_Data
  6657 ;;		_DS1621_Read_Temp
  6658 ;;		_DS3231_Read_Time
  6659 ;;		_I2C_Write_Address_Read_One_Byte
  6660 ;;		_I2C_Write_Address_Write_One_Byte
  6661 ;;		_I2C_Write_Cmd_Read_One_Byte
  6662 ;; This function uses a non-reentrant model
  6663 ;;
  6664                           
  6665                           	psect	text39
  6666  0011F0                     __ptext39:
  6667                           	opt stack 0
  6668  0011F0                     _I2C_Start:
  6669                           	opt stack 25
  6670                           
  6671                           ;I2C_Soft.c: 69: i2cHighSda();
  6672                           
  6673                           ;incstack = 0
  6674  0011F0  EC3A  F009         	call	_i2cHighSda	;wreg free
  6675                           
  6676                           ;I2C_Soft.c: 70: i2cHighScl();
  6677  0011F4  EC21  F009         	call	_i2cHighScl	;wreg free
  6678                           
  6679                           ;I2C_Soft.c: 71: i2cLowSda();
  6680  0011F8  EC31  F009         	call	_i2cLowSda	;wreg free
  6681                           
  6682                           ;I2C_Soft.c: 72: i2cLowScl();
  6683  0011FC  EC36  F009         	call	_i2cLowScl	;wreg free
  6684  001200  0012               	return		;funcret
  6685  001202                     __end_of_I2C_Start:
  6686                           	opt stack 0
  6687                           tblptru	equ	0xFF8
  6688                           tblptrh	equ	0xFF7
  6689                           tblptrl	equ	0xFF6
  6690                           tablat	equ	0xFF5
  6691                           prodh	equ	0xFF4
  6692                           prodl	equ	0xFF3
  6693                           intcon2	equ	0xFF1
  6694                           postinc0	equ	0xFEE
  6695                           wreg	equ	0xFE8
  6696                           postdec1	equ	0xFE5
  6697                           fsr1l	equ	0xFE1
  6698                           indf2	equ	0xFDF
  6699                           postinc2	equ	0xFDE
  6700                           postdec2	equ	0xFDD
  6701                           fsr2h	equ	0xFDA
  6702                           fsr2l	equ	0xFD9
  6703                           status	equ	0xFD8
  6704                           
  6705 ;; *************** function _I2C_Read *****************
  6706 ;; Defined at:
  6707 ;;		line 16 in file "I2C_Soft.c"
  6708 ;; Parameters:    Size  Location     Type
  6709 ;;  ack             1    wreg     unsigned char 
  6710 ;; Auto vars:     Size  Location     Type
  6711 ;;  ack             1   14[COMRAM] unsigned char 
  6712 ;;  inByte          1   16[COMRAM] unsigned char 
  6713 ;;  n               1   15[COMRAM] unsigned char 
  6714 ;; Return value:  Size  Location     Type
  6715 ;;                  1    wreg      unsigned char 
  6716 ;; Registers used:
  6717 ;;		wreg, status,2, status,0, cstack
  6718 ;; Tracked objects:
  6719 ;;		On entry : 0/0
  6720 ;;		On exit  : 0/0
  6721 ;;		Unchanged: 0/0
  6722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6724 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6726 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6727 ;;Total ram usage:        3 bytes
  6728 ;; Hardware stack levels used:    1
  6729 ;; Hardware stack levels required when called:    3
  6730 ;; This function calls:
  6731 ;;		_i2cAck
  6732 ;;		_i2cHighScl
  6733 ;;		_i2cHighSda
  6734 ;;		_i2cLowScl
  6735 ;;		_i2cNack
  6736 ;; This function is called by:
  6737 ;;		_DS1621_Read_Temp
  6738 ;;		_DS3231_Read_Time
  6739 ;;		_I2C_Write_Address_Read_One_Byte
  6740 ;;		_I2C_Write_Cmd_Read_One_Byte
  6741 ;; This function uses a non-reentrant model
  6742 ;;
  6743                           
  6744                           	psect	text40
  6745  000E86                     __ptext40:
  6746                           	opt stack 0
  6747  000E86                     _I2C_Read:
  6748                           	opt stack 26
  6749                           
  6750                           ;incstack = 0
  6751                           ;I2C_Read@ack stored from wreg
  6752  000E86  6E0F               	movwf	I2C_Read@ack,c
  6753                           
  6754                           ;I2C_Soft.c: 18: unsigned char inByte, n;
  6755                           ;I2C_Soft.c: 19: i2cHighSda();
  6756  000E88  EC3A  F009         	call	_i2cHighSda	;wreg free
  6757                           
  6758                           ;I2C_Soft.c: 20: for (n=0; n<8; n++)
  6759  000E8C  0E00               	movlw	0
  6760  000E8E  6E10               	movwf	I2C_Read@n,c
  6761  000E90                     l1686:
  6762  000E90  0E07               	movlw	7
  6763  000E92  6410               	cpfsgt	I2C_Read@n,c
  6764  000E94  D001               	goto	l1690
  6765  000E96  D00F               	goto	l1704
  6766  000E98                     l1690:
  6767                           
  6768                           ;I2C_Soft.c: 21: {
  6769                           ;I2C_Soft.c: 22: i2cHighScl();
  6770  000E98  EC21  F009         	call	_i2cHighScl	;wreg free
  6771                           
  6772                           ;I2C_Soft.c: 24: if (PORTDbits.RD7)
  6773  000E9C  AE83               	btfss	3971,7,c	;volatile
  6774  000E9E  D003               	goto	l1696
  6775                           
  6776                           ;I2C_Soft.c: 25: inByte = (inByte << 1) | 0x01;
  6777  000EA0  80D8               	bsf	status,0,c
  6778  000EA2  3611               	rlcf	I2C_Read@inByte,f,c
  6779  000EA4  D004               	goto	l1698
  6780  000EA6                     l1696:
  6781                           
  6782                           ;I2C_Soft.c: 26: else
  6783                           ;I2C_Soft.c: 27: inByte = inByte << 1;
  6784  000EA6  5011               	movf	I2C_Read@inByte,w,c
  6785  000EA8  2411               	addwf	I2C_Read@inByte,w,c
  6786  000EAA  6E11               	movwf	I2C_Read@inByte,c
  6787  000EAC  D000               	goto	l1698
  6788  000EAE                     l1698:
  6789                           
  6790                           ;I2C_Soft.c: 28: i2cLowScl();
  6791  000EAE  EC36  F009         	call	_i2cLowScl	;wreg free
  6792  000EB2  2A10               	incf	I2C_Read@n,f,c
  6793  000EB4  D7ED               	goto	l1686
  6794  000EB6                     l1704:
  6795                           
  6796                           ;I2C_Soft.c: 29: }
  6797                           ;I2C_Soft.c: 30: if (ack) i2cAck();
  6798  000EB6  500F               	movf	I2C_Read@ack,w,c
  6799  000EB8  B4D8               	btfsc	status,2,c
  6800  000EBA  D003               	goto	l1708
  6801  000EBC  EC01  F009         	call	_i2cAck	;wreg free
  6802  000EC0  D003               	goto	l1710
  6803  000EC2                     l1708:
  6804                           
  6805                           ;I2C_Soft.c: 31: else i2cNack();
  6806  000EC2  EC2C  F009         	call	_i2cNack	;wreg free
  6807  000EC6  D000               	goto	l1710
  6808  000EC8                     l1710:
  6809                           
  6810                           ;I2C_Soft.c: 34: return(inByte);
  6811  000EC8  5011               	movf	I2C_Read@inByte,w,c
  6812  000ECA  D000               	goto	l239
  6813  000ECC                     l239:
  6814  000ECC  0012               	return		;funcret
  6815  000ECE                     __end_of_I2C_Read:
  6816                           	opt stack 0
  6817                           tblptru	equ	0xFF8
  6818                           tblptrh	equ	0xFF7
  6819                           tblptrl	equ	0xFF6
  6820                           tablat	equ	0xFF5
  6821                           prodh	equ	0xFF4
  6822                           prodl	equ	0xFF3
  6823                           intcon2	equ	0xFF1
  6824                           postinc0	equ	0xFEE
  6825                           wreg	equ	0xFE8
  6826                           postdec1	equ	0xFE5
  6827                           fsr1l	equ	0xFE1
  6828                           indf2	equ	0xFDF
  6829                           postinc2	equ	0xFDE
  6830                           postdec2	equ	0xFDD
  6831                           fsr2h	equ	0xFDA
  6832                           fsr2l	equ	0xFD9
  6833                           status	equ	0xFD8
  6834                           
  6835 ;; *************** function _i2cNack *****************
  6836 ;; Defined at:
  6837 ;;		line 53 in file "I2C_Soft.c"
  6838 ;; Parameters:    Size  Location     Type
  6839 ;;		None
  6840 ;; Auto vars:     Size  Location     Type
  6841 ;;		None
  6842 ;; Return value:  Size  Location     Type
  6843 ;;		None               void
  6844 ;; Registers used:
  6845 ;;		wreg, cstack
  6846 ;; Tracked objects:
  6847 ;;		On entry : 0/0
  6848 ;;		On exit  : 0/0
  6849 ;;		Unchanged: 0/0
  6850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6855 ;;Total ram usage:        0 bytes
  6856 ;; Hardware stack levels used:    1
  6857 ;; Hardware stack levels required when called:    2
  6858 ;; This function calls:
  6859 ;;		_i2cHighScl
  6860 ;;		_i2cLowScl
  6861 ;; This function is called by:
  6862 ;;		_I2C_Read
  6863 ;; This function uses a non-reentrant model
  6864 ;;
  6865                           
  6866                           	psect	text41
  6867  001258                     __ptext41:
  6868                           	opt stack 0
  6869  001258                     _i2cNack:
  6870                           	opt stack 26
  6871                           
  6872                           ;I2C_Soft.c: 55: i2cHighScl();
  6873                           
  6874                           ;incstack = 0
  6875  001258  EC21  F009         	call	_i2cHighScl	;wreg free
  6876                           
  6877                           ;I2C_Soft.c: 56: i2cLowScl();
  6878  00125C  EC36  F009         	call	_i2cLowScl	;wreg free
  6879  001260  0012               	return		;funcret
  6880  001262                     __end_of_i2cNack:
  6881                           	opt stack 0
  6882                           tblptru	equ	0xFF8
  6883                           tblptrh	equ	0xFF7
  6884                           tblptrl	equ	0xFF6
  6885                           tablat	equ	0xFF5
  6886                           prodh	equ	0xFF4
  6887                           prodl	equ	0xFF3
  6888                           intcon2	equ	0xFF1
  6889                           postinc0	equ	0xFEE
  6890                           wreg	equ	0xFE8
  6891                           postdec1	equ	0xFE5
  6892                           fsr1l	equ	0xFE1
  6893                           indf2	equ	0xFDF
  6894                           postinc2	equ	0xFDE
  6895                           postdec2	equ	0xFDD
  6896                           fsr2h	equ	0xFDA
  6897                           fsr2l	equ	0xFD9
  6898                           status	equ	0xFD8
  6899                           
  6900 ;; *************** function _i2cAck *****************
  6901 ;; Defined at:
  6902 ;;		line 59 in file "I2C_Soft.c"
  6903 ;; Parameters:    Size  Location     Type
  6904 ;;		None
  6905 ;; Auto vars:     Size  Location     Type
  6906 ;;		None
  6907 ;; Return value:  Size  Location     Type
  6908 ;;		None               void
  6909 ;; Registers used:
  6910 ;;		wreg, cstack
  6911 ;; Tracked objects:
  6912 ;;		On entry : 0/0
  6913 ;;		On exit  : 0/0
  6914 ;;		Unchanged: 0/0
  6915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6920 ;;Total ram usage:        0 bytes
  6921 ;; Hardware stack levels used:    1
  6922 ;; Hardware stack levels required when called:    2
  6923 ;; This function calls:
  6924 ;;		_i2cHighScl
  6925 ;;		_i2cHighSda
  6926 ;;		_i2cLowScl
  6927 ;;		_i2cLowSda
  6928 ;; This function is called by:
  6929 ;;		_I2C_Read
  6930 ;; This function uses a non-reentrant model
  6931 ;;
  6932                           
  6933                           	psect	text42
  6934  001202                     __ptext42:
  6935                           	opt stack 0
  6936  001202                     _i2cAck:
  6937                           	opt stack 26
  6938                           
  6939                           ;I2C_Soft.c: 61: i2cLowSda();
  6940                           
  6941                           ;incstack = 0
  6942  001202  EC31  F009         	call	_i2cLowSda	;wreg free
  6943                           
  6944                           ;I2C_Soft.c: 62: i2cHighScl();
  6945  001206  EC21  F009         	call	_i2cHighScl	;wreg free
  6946                           
  6947                           ;I2C_Soft.c: 63: i2cLowScl();
  6948  00120A  EC36  F009         	call	_i2cLowScl	;wreg free
  6949                           
  6950                           ;I2C_Soft.c: 64: i2cHighSda();
  6951  00120E  EC3A  F009         	call	_i2cHighSda	;wreg free
  6952  001212  0012               	return		;funcret
  6953  001214                     __end_of_i2cAck:
  6954                           	opt stack 0
  6955                           tblptru	equ	0xFF8
  6956                           tblptrh	equ	0xFF7
  6957                           tblptrl	equ	0xFF6
  6958                           tablat	equ	0xFF5
  6959                           prodh	equ	0xFF4
  6960                           prodl	equ	0xFF3
  6961                           intcon2	equ	0xFF1
  6962                           postinc0	equ	0xFEE
  6963                           wreg	equ	0xFE8
  6964                           postdec1	equ	0xFE5
  6965                           fsr1l	equ	0xFE1
  6966                           indf2	equ	0xFDF
  6967                           postinc2	equ	0xFDE
  6968                           postdec2	equ	0xFDD
  6969                           fsr2h	equ	0xFDA
  6970                           fsr2l	equ	0xFD9
  6971                           status	equ	0xFD8
  6972                           
  6973 ;; *************** function _I2C_ReStart *****************
  6974 ;; Defined at:
  6975 ;;		line 75 in file "I2C_Soft.c"
  6976 ;; Parameters:    Size  Location     Type
  6977 ;;		None
  6978 ;; Auto vars:     Size  Location     Type
  6979 ;;		None
  6980 ;; Return value:  Size  Location     Type
  6981 ;;		None               void
  6982 ;; Registers used:
  6983 ;;		wreg, cstack
  6984 ;; Tracked objects:
  6985 ;;		On entry : 0/0
  6986 ;;		On exit  : 0/0
  6987 ;;		Unchanged: 0/0
  6988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6993 ;;Total ram usage:        0 bytes
  6994 ;; Hardware stack levels used:    1
  6995 ;; Hardware stack levels required when called:    2
  6996 ;; This function calls:
  6997 ;;		_i2cHighScl
  6998 ;;		_i2cHighSda
  6999 ;;		_i2cLowScl
  7000 ;;		_i2cLowSda
  7001 ;; This function is called by:
  7002 ;;		_DS1621_Read_Temp
  7003 ;;		_DS3231_Read_Time
  7004 ;;		_I2C_Write_Address_Read_One_Byte
  7005 ;;		_I2C_Write_Cmd_Read_One_Byte
  7006 ;; This function uses a non-reentrant model
  7007 ;;
  7008                           
  7009                           	psect	text43
  7010  00118E                     __ptext43:
  7011                           	opt stack 0
  7012  00118E                     _I2C_ReStart:
  7013                           	opt stack 27
  7014                           
  7015                           ;I2C_Soft.c: 77: i2cLowScl();
  7016                           
  7017                           ;incstack = 0
  7018  00118E  EC36  F009         	call	_i2cLowScl	;wreg free
  7019                           
  7020                           ;I2C_Soft.c: 78: i2cHighSda();
  7021  001192  EC3A  F009         	call	_i2cHighSda	;wreg free
  7022                           
  7023                           ;I2C_Soft.c: 79: i2cHighScl();
  7024  001196  EC21  F009         	call	_i2cHighScl	;wreg free
  7025                           
  7026                           ;I2C_Soft.c: 80: i2cLowSda();
  7027  00119A  EC31  F009         	call	_i2cLowSda	;wreg free
  7028                           
  7029                           ;I2C_Soft.c: 81: i2cLowScl();
  7030  00119E  EC36  F009         	call	_i2cLowScl	;wreg free
  7031  0011A2  0012               	return		;funcret
  7032  0011A4                     __end_of_I2C_ReStart:
  7033                           	opt stack 0
  7034                           tblptru	equ	0xFF8
  7035                           tblptrh	equ	0xFF7
  7036                           tblptrl	equ	0xFF6
  7037                           tablat	equ	0xFF5
  7038                           prodh	equ	0xFF4
  7039                           prodl	equ	0xFF3
  7040                           intcon2	equ	0xFF1
  7041                           postinc0	equ	0xFEE
  7042                           wreg	equ	0xFE8
  7043                           postdec1	equ	0xFE5
  7044                           fsr1l	equ	0xFE1
  7045                           indf2	equ	0xFDF
  7046                           postinc2	equ	0xFDE
  7047                           postdec2	equ	0xFDD
  7048                           fsr2h	equ	0xFDA
  7049                           fsr2l	equ	0xFD9
  7050                           status	equ	0xFD8
  7051                           
  7052 ;; *************** function _i2cLowSda *****************
  7053 ;; Defined at:
  7054 ;;		line 98 in file "I2C_Soft.c"
  7055 ;; Parameters:    Size  Location     Type
  7056 ;;		None
  7057 ;; Auto vars:     Size  Location     Type
  7058 ;;		None
  7059 ;; Return value:  Size  Location     Type
  7060 ;;		None               void
  7061 ;; Registers used:
  7062 ;;		None
  7063 ;; Tracked objects:
  7064 ;;		On entry : 0/0
  7065 ;;		On exit  : 0/0
  7066 ;;		Unchanged: 0/0
  7067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7071 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7072 ;;Total ram usage:        0 bytes
  7073 ;; Hardware stack levels used:    1
  7074 ;; Hardware stack levels required when called:    1
  7075 ;; This function calls:
  7076 ;;		Nothing
  7077 ;; This function is called by:
  7078 ;;		_I2C_Write
  7079 ;;		_i2cAck
  7080 ;;		_I2C_Start
  7081 ;;		_I2C_ReStart
  7082 ;;		_I2C_Stop
  7083 ;; This function uses a non-reentrant model
  7084 ;;
  7085                           
  7086                           	psect	text44
  7087  001262                     __ptext44:
  7088                           	opt stack 0
  7089  001262                     _i2cLowSda:
  7090                           	opt stack 25
  7091                           
  7092                           ;I2C_Soft.c: 100: PORTDbits.RD7 = 0;
  7093                           
  7094                           ;incstack = 0
  7095  001262  9E83               	bcf	3971,7,c	;volatile
  7096                           
  7097                           ;I2C_Soft.c: 101: TRISDbits.RD7 = 0;
  7098  001264  9E95               	bcf	3989,7,c	;volatile
  7099                           
  7100                           ;I2C_Soft.c: 102: _delay((unsigned long)((2)*(8000000/4000000.0)));
  7101  001266  D000               	nop2		;2 cycle nop
  7102  001268  D000               	nop2		;2 cycle nop
  7103  00126A  0012               	return		;funcret
  7104  00126C                     __end_of_i2cLowSda:
  7105                           	opt stack 0
  7106                           tblptru	equ	0xFF8
  7107                           tblptrh	equ	0xFF7
  7108                           tblptrl	equ	0xFF6
  7109                           tablat	equ	0xFF5
  7110                           prodh	equ	0xFF4
  7111                           prodl	equ	0xFF3
  7112                           intcon2	equ	0xFF1
  7113                           postinc0	equ	0xFEE
  7114                           wreg	equ	0xFE8
  7115                           postdec1	equ	0xFE5
  7116                           fsr1l	equ	0xFE1
  7117                           indf2	equ	0xFDF
  7118                           postinc2	equ	0xFDE
  7119                           postdec2	equ	0xFDD
  7120                           fsr2h	equ	0xFDA
  7121                           fsr2l	equ	0xFD9
  7122                           status	equ	0xFD8
  7123                           
  7124 ;; *************** function _i2cLowScl *****************
  7125 ;; Defined at:
  7126 ;;		line 111 in file "I2C_Soft.c"
  7127 ;; Parameters:    Size  Location     Type
  7128 ;;		None
  7129 ;; Auto vars:     Size  Location     Type
  7130 ;;		None
  7131 ;; Return value:  Size  Location     Type
  7132 ;;		None               void
  7133 ;; Registers used:
  7134 ;;		None
  7135 ;; Tracked objects:
  7136 ;;		On entry : 0/0
  7137 ;;		On exit  : 0/0
  7138 ;;		Unchanged: 0/0
  7139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7143 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7144 ;;Total ram usage:        0 bytes
  7145 ;; Hardware stack levels used:    1
  7146 ;; Hardware stack levels required when called:    1
  7147 ;; This function calls:
  7148 ;;		Nothing
  7149 ;; This function is called by:
  7150 ;;		_I2C_Read
  7151 ;;		_I2C_Write
  7152 ;;		_i2cNack
  7153 ;;		_i2cAck
  7154 ;;		_I2C_Start
  7155 ;;		_I2C_ReStart
  7156 ;;		_I2C_Stop
  7157 ;; This function uses a non-reentrant model
  7158 ;;
  7159                           
  7160                           	psect	text45
  7161  00126C                     __ptext45:
  7162                           	opt stack 0
  7163  00126C                     _i2cLowScl:
  7164                           	opt stack 25
  7165                           
  7166                           ;I2C_Soft.c: 113: PORTDbits.RD6 = 0;
  7167                           
  7168                           ;incstack = 0
  7169  00126C  9C83               	bcf	3971,6,c	;volatile
  7170                           
  7171                           ;I2C_Soft.c: 114: TRISDbits.RD6 = 0;
  7172  00126E  9C95               	bcf	3989,6,c	;volatile
  7173                           
  7174                           ;I2C_Soft.c: 115: _delay((unsigned long)((1)*(8000000/4000000.0)));
  7175  001270  D000               	nop2		;2 cycle nop
  7176  001272  0012               	return		;funcret
  7177  001274                     __end_of_i2cLowScl:
  7178                           	opt stack 0
  7179                           tblptru	equ	0xFF8
  7180                           tblptrh	equ	0xFF7
  7181                           tblptrl	equ	0xFF6
  7182                           tablat	equ	0xFF5
  7183                           prodh	equ	0xFF4
  7184                           prodl	equ	0xFF3
  7185                           intcon2	equ	0xFF1
  7186                           postinc0	equ	0xFEE
  7187                           wreg	equ	0xFE8
  7188                           postdec1	equ	0xFE5
  7189                           fsr1l	equ	0xFE1
  7190                           indf2	equ	0xFDF
  7191                           postinc2	equ	0xFDE
  7192                           postdec2	equ	0xFDD
  7193                           fsr2h	equ	0xFDA
  7194                           fsr2l	equ	0xFD9
  7195                           status	equ	0xFD8
  7196                           
  7197 ;; *************** function _i2cHighSda *****************
  7198 ;; Defined at:
  7199 ;;		line 92 in file "I2C_Soft.c"
  7200 ;; Parameters:    Size  Location     Type
  7201 ;;		None
  7202 ;; Auto vars:     Size  Location     Type
  7203 ;;		None
  7204 ;; Return value:  Size  Location     Type
  7205 ;;		None               void
  7206 ;; Registers used:
  7207 ;;		None
  7208 ;; Tracked objects:
  7209 ;;		On entry : 0/0
  7210 ;;		On exit  : 0/0
  7211 ;;		Unchanged: 0/0
  7212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7217 ;;Total ram usage:        0 bytes
  7218 ;; Hardware stack levels used:    1
  7219 ;; Hardware stack levels required when called:    1
  7220 ;; This function calls:
  7221 ;;		Nothing
  7222 ;; This function is called by:
  7223 ;;		_I2C_Init
  7224 ;;		_I2C_Read
  7225 ;;		_I2C_Write
  7226 ;;		_i2cAck
  7227 ;;		_I2C_Start
  7228 ;;		_I2C_ReStart
  7229 ;;		_I2C_Stop
  7230 ;; This function uses a non-reentrant model
  7231 ;;
  7232                           
  7233                           	psect	text46
  7234  001274                     __ptext46:
  7235                           	opt stack 0
  7236  001274                     _i2cHighSda:
  7237                           	opt stack 27
  7238                           
  7239                           ;I2C_Soft.c: 94: TRISDbits.RD7 = 1;
  7240                           
  7241                           ;incstack = 0
  7242  001274  8E95               	bsf	3989,7,c	;volatile
  7243                           
  7244                           ;I2C_Soft.c: 95: _delay((unsigned long)((2)*(8000000/4000000.0)));
  7245  001276  D000               	nop2		;2 cycle nop
  7246  001278  D000               	nop2		;2 cycle nop
  7247  00127A  0012               	return		;funcret
  7248  00127C                     __end_of_i2cHighSda:
  7249                           	opt stack 0
  7250                           tblptru	equ	0xFF8
  7251                           tblptrh	equ	0xFF7
  7252                           tblptrl	equ	0xFF6
  7253                           tablat	equ	0xFF5
  7254                           prodh	equ	0xFF4
  7255                           prodl	equ	0xFF3
  7256                           intcon2	equ	0xFF1
  7257                           postinc0	equ	0xFEE
  7258                           wreg	equ	0xFE8
  7259                           postdec1	equ	0xFE5
  7260                           fsr1l	equ	0xFE1
  7261                           indf2	equ	0xFDF
  7262                           postinc2	equ	0xFDE
  7263                           postdec2	equ	0xFDD
  7264                           fsr2h	equ	0xFDA
  7265                           fsr2l	equ	0xFD9
  7266                           status	equ	0xFD8
  7267                           
  7268 ;; *************** function _i2cHighScl *****************
  7269 ;; Defined at:
  7270 ;;		line 105 in file "I2C_Soft.c"
  7271 ;; Parameters:    Size  Location     Type
  7272 ;;		None
  7273 ;; Auto vars:     Size  Location     Type
  7274 ;;		None
  7275 ;; Return value:  Size  Location     Type
  7276 ;;		None               void
  7277 ;; Registers used:
  7278 ;;		wreg
  7279 ;; Tracked objects:
  7280 ;;		On entry : 0/0
  7281 ;;		On exit  : 0/0
  7282 ;;		Unchanged: 0/0
  7283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7288 ;;Total ram usage:        0 bytes
  7289 ;; Hardware stack levels used:    1
  7290 ;; Hardware stack levels required when called:    1
  7291 ;; This function calls:
  7292 ;;		Nothing
  7293 ;; This function is called by:
  7294 ;;		_I2C_Init
  7295 ;;		_I2C_Read
  7296 ;;		_I2C_Write
  7297 ;;		_i2cNack
  7298 ;;		_i2cAck
  7299 ;;		_I2C_Start
  7300 ;;		_I2C_ReStart
  7301 ;;		_I2C_Stop
  7302 ;; This function uses a non-reentrant model
  7303 ;;
  7304                           
  7305                           	psect	text47
  7306  001242                     __ptext47:
  7307                           	opt stack 0
  7308  001242                     _i2cHighScl:
  7309                           	opt stack 27
  7310                           
  7311                           ;I2C_Soft.c: 107: TRISDbits.RD6 = 1;
  7312                           
  7313                           ;incstack = 0
  7314  001242  8C95               	bsf	3989,6,c	;volatile
  7315                           
  7316                           ;I2C_Soft.c: 108: _delay((unsigned long)((10)*(8000000/4000000.0)));
  7317  001244  0E06               	movlw	6
  7318  001246                     u3167:
  7319  001246  2EE8               	decfsz	wreg,f,c
  7320  001248  D7FE               	goto	u3167
  7321  00124A  D000               	nop2		;nop
  7322  00124C  0012               	return		;funcret
  7323  00124E                     __end_of_i2cHighScl:
  7324                           	opt stack 0
  7325                           tblptru	equ	0xFF8
  7326                           tblptrh	equ	0xFF7
  7327                           tblptrl	equ	0xFF6
  7328                           tablat	equ	0xFF5
  7329                           prodh	equ	0xFF4
  7330                           prodl	equ	0xFF3
  7331                           intcon2	equ	0xFF1
  7332                           postinc0	equ	0xFEE
  7333                           wreg	equ	0xFE8
  7334                           postdec1	equ	0xFE5
  7335                           fsr1l	equ	0xFE1
  7336                           indf2	equ	0xFDF
  7337                           postinc2	equ	0xFDE
  7338                           postdec2	equ	0xFDD
  7339                           fsr2h	equ	0xFDA
  7340                           fsr2l	equ	0xFD9
  7341                           status	equ	0xFD8
  7342                           
  7343 ;; *************** function _chkisr *****************
  7344 ;; Defined at:
  7345 ;;		line 14 in file "Interrupt.c"
  7346 ;; Parameters:    Size  Location     Type
  7347 ;;		None
  7348 ;; Auto vars:     Size  Location     Type
  7349 ;;		None
  7350 ;; Return value:  Size  Location     Type
  7351 ;;		None               void
  7352 ;; Registers used:
  7353 ;;		None
  7354 ;; Tracked objects:
  7355 ;;		On entry : 0/0
  7356 ;;		On exit  : 0/0
  7357 ;;		Unchanged: 0/0
  7358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7361 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7362 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7363 ;;Total ram usage:       14 bytes
  7364 ;; Hardware stack levels used:    1
  7365 ;; This function calls:
  7366 ;;		Nothing
  7367 ;; This function is called by:
  7368 ;;		Interrupt level 2
  7369 ;; This function uses a non-reentrant model
  7370 ;;
  7371                           
  7372                           	psect	intcode
  7373  000008                     __pintcode:
  7374                           	opt stack 0
  7375  000008                     _chkisr:
  7376                           	opt stack 21
  7377                           
  7378                           ;incstack = 0
  7379  000008  CFFA F001          	movff	pclath,??_chkisr
  7380  00000C  CFFB F002          	movff	pclatu,??_chkisr+1
  7381  000010  CFE9 F003          	movff	fsr0l,??_chkisr+2
  7382  000014  EDEA  F005         	call	int_func,f	;refresh shadow registers
  7383                           pclatu	equ	0xFFB
  7384                           pclath	equ	0xFFA
  7385                           tblptru	equ	0xFF8
  7386                           tblptrh	equ	0xFF7
  7387                           tblptrl	equ	0xFF6
  7388                           tablat	equ	0xFF5
  7389                           prodh	equ	0xFF4
  7390                           prodl	equ	0xFF3
  7391                           intcon2	equ	0xFF1
  7392                           postinc0	equ	0xFEE
  7393                           fsr0l	equ	0xFE9
  7394                           wreg	equ	0xFE8
  7395                           postdec1	equ	0xFE5
  7396                           fsr1l	equ	0xFE1
  7397                           indf2	equ	0xFDF
  7398                           postinc2	equ	0xFDE
  7399                           postdec2	equ	0xFDD
  7400                           fsr2h	equ	0xFDA
  7401                           fsr2l	equ	0xFD9
  7402                           status	equ	0xFD8
  7403                           
  7404                           	psect	intcode_body
  7405  000BD4                     __pintcode_body:
  7406                           	opt stack 21
  7407  000BD4                     int_func:
  7408                           	opt stack 21
  7409  000BD4  0006               	pop		; remove dummy address from shadow register refresh
  7410  000BD6  CFEA F004          	movff	fsr0h,??_chkisr+3
  7411  000BDA  CFE1 F005          	movff	fsr1l,??_chkisr+4
  7412  000BDE  CFE2 F006          	movff	fsr1h,??_chkisr+5
  7413  000BE2  CFD9 F007          	movff	fsr2l,??_chkisr+6
  7414  000BE6  CFDA F008          	movff	fsr2h,??_chkisr+7
  7415  000BEA  CFF3 F009          	movff	prodl,??_chkisr+8
  7416  000BEE  CFF4 F00A          	movff	prodh,??_chkisr+9
  7417  000BF2  CFF6 F00B          	movff	tblptrl,??_chkisr+10
  7418  000BF6  CFF7 F00C          	movff	tblptrh,??_chkisr+11
  7419  000BFA  CFF8 F00D          	movff	tblptru,??_chkisr+12
  7420  000BFE  CFF5 F00E          	movff	tablat,??_chkisr+13
  7421  000C02  C00E  FFF5         	movff	??_chkisr+13,tablat
  7422  000C06  C00D  FFF8         	movff	??_chkisr+12,tblptru
  7423  000C0A  C00C  FFF7         	movff	??_chkisr+11,tblptrh
  7424  000C0E  C00B  FFF6         	movff	??_chkisr+10,tblptrl
  7425  000C12  C00A  FFF4         	movff	??_chkisr+9,prodh
  7426  000C16  C009  FFF3         	movff	??_chkisr+8,prodl
  7427  000C1A  C008  FFDA         	movff	??_chkisr+7,fsr2h
  7428  000C1E  C007  FFD9         	movff	??_chkisr+6,fsr2l
  7429  000C22  C006  FFE2         	movff	??_chkisr+5,fsr1h
  7430  000C26  C005  FFE1         	movff	??_chkisr+4,fsr1l
  7431  000C2A  C004  FFEA         	movff	??_chkisr+3,fsr0h
  7432  000C2E  C003  FFE9         	movff	??_chkisr+2,fsr0l
  7433  000C32  C002  FFFB         	movff	??_chkisr+1,pclatu
  7434  000C36  C001  FFFA         	movff	??_chkisr,pclath
  7435  000C3A  0011               	retfie		f
  7436  000C3C                     __end_of_chkisr:
  7437                           	opt stack 0
  7438                           pclatu	equ	0xFFB
  7439                           pclath	equ	0xFFA
  7440                           tblptru	equ	0xFF8
  7441                           tblptrh	equ	0xFF7
  7442                           tblptrl	equ	0xFF6
  7443                           tablat	equ	0xFF5
  7444                           prodh	equ	0xFF4
  7445                           prodl	equ	0xFF3
  7446                           intcon2	equ	0xFF1
  7447                           postinc0	equ	0xFEE
  7448                           fsr0h	equ	0xFEA
  7449                           fsr0l	equ	0xFE9
  7450                           wreg	equ	0xFE8
  7451                           postdec1	equ	0xFE5
  7452                           fsr1h	equ	0xFE2
  7453                           fsr1l	equ	0xFE1
  7454                           indf2	equ	0xFDF
  7455                           postinc2	equ	0xFDE
  7456                           postdec2	equ	0xFDD
  7457                           fsr2h	equ	0xFDA
  7458                           fsr2l	equ	0xFD9
  7459                           status	equ	0xFD8
  7460                           pclatu	equ	0xFFB
  7461                           pclath	equ	0xFFA
  7462                           tblptru	equ	0xFF8
  7463                           tblptrh	equ	0xFF7
  7464                           tblptrl	equ	0xFF6
  7465                           tablat	equ	0xFF5
  7466                           prodh	equ	0xFF4
  7467                           prodl	equ	0xFF3
  7468                           intcon2	equ	0xFF1
  7469                           postinc0	equ	0xFEE
  7470                           fsr0h	equ	0xFEA
  7471                           fsr0l	equ	0xFE9
  7472                           wreg	equ	0xFE8
  7473                           postdec1	equ	0xFE5
  7474                           fsr1h	equ	0xFE2
  7475                           fsr1l	equ	0xFE1
  7476                           indf2	equ	0xFDF
  7477                           postinc2	equ	0xFDE
  7478                           postdec2	equ	0xFDD
  7479                           fsr2h	equ	0xFDA
  7480                           fsr2l	equ	0xFD9
  7481                           status	equ	0xFD8
  7482                           
  7483                           	psect	rparam
  7484  0000                     pclatu	equ	0xFFB
  7485                           pclath	equ	0xFFA
  7486                           tblptru	equ	0xFF8
  7487                           tblptrh	equ	0xFF7
  7488                           tblptrl	equ	0xFF6
  7489                           tablat	equ	0xFF5
  7490                           prodh	equ	0xFF4
  7491                           prodl	equ	0xFF3
  7492                           intcon2	equ	0xFF1
  7493                           postinc0	equ	0xFEE
  7494                           fsr0h	equ	0xFEA
  7495                           fsr0l	equ	0xFE9
  7496                           wreg	equ	0xFE8
  7497                           postdec1	equ	0xFE5
  7498                           fsr1h	equ	0xFE2
  7499                           fsr1l	equ	0xFE1
  7500                           indf2	equ	0xFDF
  7501                           postinc2	equ	0xFDE
  7502                           postdec2	equ	0xFDD
  7503                           fsr2h	equ	0xFDA
  7504                           fsr2l	equ	0xFD9
  7505                           status	equ	0xFD8


Data Sizes:
    Strings     118
    Constant    493
    Data        149
    BSS         72
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     66     109
    BANK0           128      7     101
    BANK1           256      0      84
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_4(CODE[8]), STR_3(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 43
		 -> STR_2(CODE[43]), STR_1(CODE[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _printf->___lwmod
    ___lwmod->___lwdiv
    _init_UART->_OpenUSART
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    None.

Critical Paths under _main in BANK0

    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   25332
                                             64 COMRAM     2     2      0
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                            _Do_Init
                            ___awdiv
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    3055
                                             26 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     265
                                             21 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     374
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     406
                                             14 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0   21336
                        _DS1621_Init
                           _I2C_Init
                  _Initialize_Screen
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     273
                                             14 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _Initialize_Screen                                    0     0      0   20576
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _strcpy                                               6     2      4     287
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _fillScreen                                           2     0      2    2192
                                             33 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (4) _fillRectangle                                       12     7      5    2096
                                             21 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawtext                                            17     9      8   12201
                                             54 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2     195
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (4) _drawChar                                            11     4      7   10644
                                             43 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (5) _fillRect                                            11     6      5    3876
                                             32 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (6) _drawFastVLine                                       11     7      4    3102
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _drawPixel                                            4     1      3    4207
                                             21 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _setAddrWindow                                        4     1      3    1034
                                             17 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _TFT_GreenTab_Initialize                              0     0      0    4104
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd3                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd1                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _write_data                                           1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _write_command                                        1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _spiwrite                                             2     2      0      34
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _LCD_Reset                                            0     0      0    1792
                           _delay_ms
 ---------------------------------------------------------------------------------
 (5) _delay_ms                                             6     4      2    1792
                                             20 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     752
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      53
                                             14 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     434
                                             19 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     232
                                             16 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     157
                                             16 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     3     3      0     195
                                             17 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     241
                                             17 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0      60
                                             14 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0      90
                                             14 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _chkisr                                             14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _Initialize_Screen
       _LCD_Reset
         _delay_ms
           ___wmul
       _TFT_GreenTab_Initialize
         _Rcmd1
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd2red
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd3
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _init_UART
       _OpenUSART
   ___awdiv
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      54       7       32.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      7      65       5       78.9%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     42      6D       1       85.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     126      34        0.0%
DATA                 0      0     126       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Nov 09 19:16:26 2022

                                _i 005D                 __size_of_I2C_Start 0012  
                      _SSPSTATbits 000FC7                 __size_of_I2C_Write 003E  
                               l35 0D9A                                 l45 11C6  
                               l95 0AE8                                 l89 10A4  
                     ___awdiv@sign 0014                ___wmul@multiplicand 0011  
                              l111 04CA                                l120 0420  
                              l113 03A4                                l151 088E  
                              l152 08B0                                l242 0FD8  
                              l322 1042                                l148 08B2  
                              l149 081E                                l239 0ECC  
                              l521 011C                                l459 1238  
                              l582 0B90                                l558 0374  
                              l591 0BD2                                l594 10F6  
                              l586 0BAA                                l587 0BAC  
                              l588 0BB6                                l589 0BB8  
                              l787 0948                                _day 0059  
             __size_of_I2C_ReStart 0016                                _dow 005A  
                              _nbr 0049                                _txt 004D  
                              wreg 000FE8                    ??_fillRectangle 001B  
                     __CFG_LVP$OFF 000000            _TFT_GreenTab_Initialize 10A6  
                     __CFG_WDT$OFF 000000                               l1025 1118  
                   drawFastVLine@h 0017                               l1117 0CF2  
                             l1127 0E32                               l1156 0F8A  
                             l1502 0FE2                               l1504 0FE8  
                             l3200 0904                               l1514 0FFA  
                             l4010 0164                               l3212 092E  
                             l4020 0198                               l4012 0168  
                   drawFastVLine@x 0020                     drawFastVLine@y 0016  
                             l1710 0EC8                               l4030 01AE  
                             l4006 014A                               l1704 0EB6  
                             l3216 093E                               l3208 0922  
                             l4024 019E                               l4016 0174  
                             l4040 01D8                               l4034 01D2  
                             l4026 01A2                               l4042 01EA  
                             l1708 0EC2                               l4060 024C  
                             l4052 022A                               l3190 08DC  
                             l4062 0254                               l4054 0234  
                             l1496 0FD0                               l3600 1086  
                             l3184 08CA                               l4080 02EC  
                             l4072 028C                               l4048 0206  
                             l1690 0E98                               l4090 034C  
                             l4066 026C                               l3612 0E62  
                             l3196 08F2                               l4068 0274  
                             l4076 02A0                               l4092 0358  
                             l1686 0E90                               l3710 0386  
                             l2830 0B94                               l2822 0B80  
                             l3198 08FC                               l4078 02A8  
                             l4086 0332                               l1696 0EA6  
                             l3608 0E46                               l3720 03A8  
                             l3800 089C                               l2904 1110  
                             l4088 0344                               l1698 0EAE  
                             l3562 0AAA                               l3730 0414  
                             l3714 0392                               l2826 0B88  
                             l2818 0B76                               l2914 0CB6  
                             l3572 0AD0                               l3740 0442  
                             l3732 0418                               l3724 03B0  
                             l2916 0CC0                               l3574 0ADE  
                             l3558 0A72                               l3750 04BE  
                             l3742 046A                               l3718 03A0  
                             l3806 08AC                               l2838 0BA2  
                             l2926 0CE6                               l2918 0CC8  
                             l2942 0E26                               l2934 0DFE  
                             l3728 03E0                               l3840 0676  
                             l3824 0608                               l2864 104E  
                             l2936 0E08                               l4384 09DE  
                             l3762 0F58                               l3850 06D0  
                             l2866 1058                               l2938 0E10  
                             l3748 0496                               l3756 04C6  
                             l3764 0F5E                               l3836 0658  
                             l3780 0856                               l3774 07E8  
   I2C_Write_Cmd_Write_Data@Device 0013                               l3848 06C8  
                             l3792 0884                               l3970 0036  
                             l3796 0892                               l3972 0044  
                             l3990 00E6                               l3982 0082  
                             l3966 0026                               l3976 004E  
                             l3994 00EE                               l3978 0064  
                             STR_1 FFB3                               STR_2 FF88  
                             STR_3 FFD1                               STR_4 FFF6  
                             STR_5 FFE5                               u2340 0AA0  
                             u2500 0478                               u3167 1246  
                             u2640 0632                               u2570 0816  
                             u2580 084C                               _RBPU 007F8F  
                             _TRMT 007D61                               _main 09D8  
                             _font FD9B                               _hour 005C  
                 __end_of_I2C_Init 1258                   __end_of_I2C_Read 0ECE  
                             _year 006B                               fsr0h 000FEA  
                             _txt1 0100                               fsr1h 000FE2  
                             fsr0l 000FE9                               fsr2h 000FDA  
                             fsr1l 000FE1                               indf2 000FDF  
                             fsr2l 000FD9                               _wrap 006D  
                 __end_of_I2C_Stop 11F0                               pclat 000FFA  
               __size_of_LCD_Reset 0012                               prodh 000FF4  
                             prodl 000FF3                               start 0018  
      __size_of_I2C_Write_Cmd_Only 001A                    __end_of_Do_Init 0F0E  
                  ??_drawFastVLine 001A                    __end_of_i2cNack 1262  
                     ___param_bank 000010                    drawFastVLine@hi 001E  
                  drawFastVLine@lo 001F                              ?_main 0001  
                  __end_of___awdiv 094A                    ___awdiv@divisor 0011  
                            _T3CON 000FB1                    __end_of___lwdiv 0CFC  
                  __end_of___lwmod 0E3C                    ___awdiv@counter 0013  
                            _RCSTA 000FAB                              _TMR3H 000FB3  
                            _TMR3L 000FB2                              _SPBRG 000FAF  
                            _TRISA 000F92                              _TRISB 000F93  
                            _TRISC 000F94                              _TRISD 000F95  
                            _TRISE 000F96                              _TXREG 000FAD  
                            _TXSTA 000FAC                              _Rcmd1 04CC  
                            _Rcmd3 06E6                         _i2cHighSda 1274  
                       _i2cHighScl 1242                    __end_of_dpowers FF80  
                            _color 0080                              _font2 FE9A  
                            _found 005B                    __end_of_isdigit 111A  
                            _month 005F                              _putch 1234  
                __end_of_I2C_Start 1202                  __end_of_I2C_Write 1008  
                   __CFG_BOREN$OFF 000000                              tablat 000FF5  
                            status 000FD8                  ?_DS1621_Read_Temp 0012  
                  write_data@data_ 0011                 ??_DS1621_Read_Temp 0014  
                  __initialization 0AEA                       __end_of_main 0A62  
                     __end_of_font FE9A                   __end_of_Rcmd2red 0FCA  
                           ??_main 0041                      __activetblptr 000002  
                ?_DS3231_Read_Time 0001                  __end_of_LCD_Reset 11DE  
        ??_TFT_GreenTab_Initialize 001B                 ??_DS3231_Read_Time 0012  
                           ?_Rcmd1 0001                             ?_Rcmd3 0001  
                        I2C_Init@c 000F                          I2C_Read@n 0010  
                           _ADCON1 000FC1                DS1621_Read_Temp@Cmd 0014  
                 ___awdiv@dividend 000F                 __size_of_i2cLowSda 000A  
               __size_of_i2cLowScl 0008                             ?_putch 0001  
                        ??_Do_Init 0041                             _OSCCON 000FD3  
                           _SPBRGH 000FB0                             _SSPBUF 000FC9  
                        ??_i2cNack 000F                   __end_of_delay_ms 0DA2  
                           _i2cAck 1202                         _TempSecond 0051  
                 __end_of_fillRect 0E86                   __end_of_drawChar 04CC  
               __size_of_OpenUSART 0070                             ___wmul 10D0  
                        ??___awdiv 0013                   __end_of_drawtext 06E6  
                           _chkisr 0008                          ??___lwdiv 0013  
                           _array1 00AA                          ??___lwmod 001A  
                           _buffer 00BF                             _nec_ok 004B  
                           clear_0 0AF0                             clear_1 0AFC  
                 ___awdiv@quotient 0015                             _minute 005E  
                           _second 0061                             _printf 001C  
                     drawtext@size 003E                             _strcpy 1044  
                           _strlen 0F4E                       __pdataCOMRAM 006C  
                        ??_isdigit 000F                          ?_I2C_Init 000F  
                        ?_I2C_Read 0001                          ?_I2C_Stop 0001  
                     __mediumconst FD9A                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
 __end_of_I2C_Write_Cmd_Write_Data 113A                        ?_i2cHighSda 0001  
                      ?_i2cHighScl 0001                             putch@c 000F  
                 __end_of_spiwrite 11CC                         __accesstop 0080  
          __end_of__initialization 0B5A                 _setup_alarm_minute 0063  
               _setup_alarm_second 0064                      ___rparam_used 000001  
                    __end_of_Rcmd1 05DC                      __end_of_Rcmd3 07D8  
                   __pcstackCOMRAM 0001                       __pidataBANK0 0F0E  
                     __pidataBANK1 0CFC                      __end_of_font2 FF76  
                __end_of_i2cLowSda 126C                  __end_of_i2cLowScl 1274  
                    __end_of_putch 1242                     drawPixel@color 0017  
           __size_of_write_command 0010                         ??_I2C_Init 0013  
                       ??_I2C_Read 000F                       _alarm_minute 0055  
                     _alarm_second 0056                         ??_I2C_Stop 000F  
                          ??_Rcmd1 001B                            ??_Rcmd3 001B  
               __size_of_drawPixel 0030                  __end_of_OpenUSART 0BD4  
                          ??_putch 000F                         __pbssBANK0 00BF  
                 _setup_alarm_hour 0062                      ??_DS1621_Init 0014  
                        ?_Rcmd2red 0001                 __size_of_init_UART 0014  
                  spiwrite@spidata 0010                         _alarm_date 0053  
                       _alarm_hour 0054                            ?_i2cAck 0001  
               __CFG_CCP2MX$PORTBE 000000                     I2C_Read@inByte 0011  
                          ?___wmul 000F                __size_of_i2cHighSda 0008  
              __size_of_i2cHighScl 000C                            ?_chkisr 0001  
           __size_of_setAddrWindow 004E   I2C_Write_Cmd_Write_Data@Data_Out 0012  
                    ??_I2C_ReStart 000F                         I2C_Write@n 0010  
                          ?_printf 001B                            ?_strcpy 000F  
                          ?_strlen 000F                         _fillScreen 1158  
                        ?_delay_ms 0015                          ?_fillRect 0021  
                        ?_drawChar 002C                            _SSPCON1 000FC6  
                          _SSPSTAT 000FC7              __end_of_fillRectangle 08B4  
                        ?_drawtext 0037                            _Do_Init 0ECE  
         _I2C_Write_Cmd_Write_Data 111A         __end_of_I2C_Write_Cmd_Only 118E  
                       ??_Rcmd2red 0012             DS1621_Read_Temp@Device 0016  
                          _i2cNack 1258                      _write_command 1224  
                        _I2C_Start 11F0                          _I2C_Write 0FCA  
                  __size_of_i2cAck 0012                            __Hparam 0000  
                          __Lparam 0000                __end_of_DS1621_Init 1158  
                __end_of_drawPixel 10A6              __end_of_drawFastVLine 0AEA  
                          ___awdiv 08B4                    __size_of___wmul 0028  
                          ___lwdiv 0CA0                            ___lwmod 0DF0  
                  __size_of_chkisr 0C34                          ?_spiwrite 0001  
                          __pcinit 0AEA                            __ramtop 1000  
                          __ptext0 09D8                            __ptext1 001C  
                          __ptext2 1234                            __ptext3 10F8  
                          __ptext4 0DF0                            __ptext5 0CA0  
        __size_of_DS1621_Read_Temp 003C                            __ptext6 08B4  
                          __ptext7 0ECE                            __ptext8 11A4  
                          __ptext9 0B64                    __size_of_printf 035A  
                __end_of_init_UART 11B8                    __size_of_strcpy 0032  
                  __size_of_strlen 003E                  __end_of_hexpowers FF88  
                          _dpowers FF76                            _isdigit 10F8  
                        _T3CONbits 000FB1                         ??_delay_ms 0017  
              __end_of_I2C_ReStart 11A4                      drawtext@_text 0038  
                    drawtext@color 003A                         ??_fillRect 0026  
                       ??_drawChar 0033                          _LCD_Reset 11CC  
                    _setAddrWindow 0DA2                     __pintcode_body 0BD4  
                       delay_ms@ms 0015               end_of_initialization 0B5A  
                       ??_drawtext 003F                     ?_write_command 0001  
                    __Lmediumconst FD9A          __size_of_DS3231_Read_Time 0064  
                          int_func 0BD4            DS3231_Read_Time@Address 0012  
                       ?_I2C_Start 0001                         ?_I2C_Write 0001  
                       _tempSecond 006C                          _RCSTAbits 000FAB  
                          printf@c 0036                            printf@f 001B  
                          postdec1 000FE5                            postdec2 000FDD  
                          postinc0 000FEE                            postinc2 000FDE  
                       ??_spiwrite 000F                            strlen@s 000F  
      I2C_Write_Cmd_Write_Data@Cmd 0011                   drawtext@cursor_x 00E4  
                 drawtext@cursor_y 00E3                          _PORTCbits 000F82  
                        _PORTDbits 000F83                   I2C_Write@outByte 000F  
                      ?_fillScreen 0022                         _setup_hour 0066  
                       _setup_year 006A                         drawChar@bg 0030  
                        _TRISCbits 000F94                          _TRISDbits 000F95  
                     ??_i2cHighSda 000F                       ??_i2cHighScl 000F  
                __size_of_I2C_Init 000A                  __size_of_I2C_Read 0048  
                __size_of_I2C_Stop 0012                     ?_setAddrWindow 0012  
                       ?_LCD_Reset 0001                   drawtext@textsize 00DF  
                       drawPixel@x 0019                         drawPixel@y 0016  
                      _DS1621_Init 113A                        printf@width 0034  
                        _TXSTAbits 000FAC                     __end_of_i2cAck 1214  
         DS1621_Read_Temp@Data_Ret 0015                 __end_of_i2cHighSda 127C  
               __end_of_i2cHighScl 124E                     __end_of___wmul 10F8  
                    delay_ms@count 0019                         _write_data 1214  
                    __pidataCOMRAM 127C                     __end_of_chkisr 0C3C  
         ?_TFT_GreenTab_Initialize 0001                        _I2C_ReStart 118E  
                       drawtext@bg 003C                          _Nec_code1 004F  
                        _i2cLowSda 1262                          _i2cLowScl 126C  
                   __end_of_printf 0376                     __end_of_strcpy 1076  
                   __end_of_strlen 0F8C                          _Nec_state 0050  
              start_initialization 0AEA                    ??_write_command 0011  
                        _OpenUSART 0B64                   __CFG_OSC$INTIO67 000000  
                      ??_I2C_Start 000F                        ??_I2C_Write 000F  
                         ??_i2cAck 000F                  __size_of_Rcmd2red 003E  
              __size_of_fillScreen 001C                           ??___wmul 0013  
                         ??_chkisr 0001                        __pdataBANK0 0080  
                      __pdataBANK1 0100                    setAddrWindow@x0 0015  
                  setAddrWindow@x1 0013                    setAddrWindow@y0 0012  
                  setAddrWindow@y1 0014                           ??_printf 0029  
                 _DS1621_Read_Temp 1008                           ??_strcpy 0013  
                         ??_strlen 0011                         ?_i2cLowSda 0001  
                       ?_i2cLowScl 0001                        __pbssCOMRAM 0043  
       ??_I2C_Write_Cmd_Write_Data 0013                    ??_setAddrWindow 0015  
                    __pcstackBANK0 00DE                        ??_LCD_Reset 001B  
                     _isdigit$1488 0010                  __size_of_delay_ms 0052  
                         ?_Do_Init 0001                  __size_of_fillRect 004A  
                __size_of_drawChar 0156                         ?_OpenUSART 000F  
                 _DS3231_Read_Time 0C3C                           ?_i2cNack 0001  
                __size_of_drawtext 010A                   ___lwdiv@dividend 000F  
                      I2C_Read@ack 000F                          _bit_count 0057  
                        __pintcode 0008    __end_of_TFT_GreenTab_Initialize 10D0  
                    __pmediumconst FD9A                           ?___awdiv 000F  
                        __tft_type 0052                           ?___lwdiv 000F  
               _I2C_Write_Cmd_Only 1174                           ?___lwmod 0016  
               drawFastVLine@color 0018                        ?_write_data 0001  
                        _drawPixel 1076                  __size_of_spiwrite 0014  
              ?_I2C_Write_Cmd_Only 0011                           ?_isdigit 0001  
                         _I2C_Init 124E                           _I2C_Read 0E86  
                         _I2C_Stop 11DE                  _Initialize_Screen 094A  
                   __size_of_Rcmd1 0110                     __size_of_Rcmd3 00F2  
                        _init_UART 11A4           I2C_Write_Cmd_Only@Device 0012  
                        _hexpowers FF80                 ?_Initialize_Screen 0001  
                 ___lwdiv@quotient 0013                     __size_of_putch 000E  
                   ___wmul@product 0013                ??_Initialize_Screen 0041  
             ??_I2C_Write_Cmd_Only 0012                           _PIE1bits 000F9D  
           DS3231_Read_Time@Device 0013                           _PIR1bits 000F9E  
                         _PIR2bits 000FA1                          _setup_day 0065  
                DS1621_Init@Device 0014                          fillRect@h 0023  
                        fillRect@i 002A                          fillRect@w 0022  
                        fillRect@x 0029                          fillRect@y 0021  
                        drawChar@c 002D                          drawChar@i 0036  
                        drawChar@j 0035                          drawChar@x 0034  
                        drawChar@y 002C                         ?_drawPixel 0016  
           __size_of_fillRectangle 00DC                  ___wmul@multiplier 000F  
        __end_of_Initialize_Screen 09D8                        ??_i2cLowSda 000F  
                      ??_i2cLowScl 000F                       ??_fillScreen 0024  
                       printf@flag 0033                         printf@prec 0030  
                        main@tempC 0042                          main@tempF 0041  
                       ?_init_UART 0001                          copy_data0 0B16  
                        copy_data1 0B36                          drawtext@i 00E1  
           __size_of_drawFastVLine 0088                          drawtext@x 00DE  
                        drawtext@y 0037                           _Nec_code 0043  
                write_command@cmd_ 0011                        ??_OpenUSART 0011  
                     ?_DS1621_Init 0001                           _Rcmd2red 0F8C  
                 __size_of_Do_Init 0040                __size_of_write_data 0010  
                  OpenUSART@config 0011                       _Time_Elapsed 0047  
                 __size_of_i2cNack 000A                           __Hrparam 0000  
               __end_of_fillScreen 1174                           __Lrparam 0000  
                 __size_of___awdiv 0096                   __size_of___lwdiv 005C  
                 __size_of___lwmod 004C                       ?_I2C_ReStart 0001  
                 __size_of_isdigit 0022                           _delay_ms 0D50  
                  ___lwdiv@divisor 0011                    ___lwdiv@counter 0015  
                         __ptext10 094A                           __ptext11 1044  
                         __ptext20 0DA2                           __ptext12 1158  
                         __ptext21 10A6                           __ptext13 07D8  
                         __ptext30 10D0                           __ptext22 06E6  
                         __ptext14 05DC                           __ptext31 124E  
                         __ptext23 0F8C                           __ptext15 0F4E  
                         __ptext40 0E86                           __ptext32 113A  
                         __ptext24 04CC                           __ptext16 0376  
                         __ptext41 1258                           __ptext33 111A  
                         __ptext25 1214                           __ptext17 0E3C  
                         __ptext42 1202                           __ptext34 1174  
                         __ptext26 1224                           __ptext18 0A62  
                         __ptext43 118E                           __ptext35 0C3C  
                         __ptext27 11B8                           __ptext19 1076  
                         __ptext44 1262                           __ptext36 1008  
                         __ptext28 11CC                           __ptext45 126C  
                         __ptext37 0FCA                           __ptext29 0D50  
                         __ptext46 1274                           __ptext38 11DE  
                         __ptext47 1242                           __ptext39 11F0  
                         _fillRect 0E3C                           _drawChar 0376  
 __size_of_TFT_GreenTab_Initialize 002A                           _colstart 0058  
                         _drawtext 05DC                         strcpy@from 0011  
                    _fillRectangle 07D8           __end_of_DS1621_Read_Temp 1044  
                    __size_of_main 008A                    fillRectangle@hi 001F  
                  fillRectangle@lo 0020                      _drawFastVLine 0A62  
                        printf@idx 002D                           _spiwrite 11B8  
                        printf@val 0031                        ??_drawPixel 0019  
                         _rowstart 0060           __end_of_DS3231_Read_Time 0CA0  
       __size_of_Initialize_Screen 008E                     OpenUSART@spbrg 000F  
                      ??_init_UART 0012                           isdigit@c 0011  
                        spiwrite@x 000F                           intlevel2 0000  
                   ?_fillRectangle 0016                   ___lwmod@dividend 0016  
            __end_of_write_command 1234                    fillScreen@color 0022  
                   fillRectangle@h 0018                     fillRectangle@w 0017  
                   fillRectangle@x 0021                     fillRectangle@y 0016  
                   ?_drawFastVLine 0016                           printf@ap 002E  
                     ??_write_data 0011                      fillRect@color 0024  
                  ___lwmod@divisor 0018                           strcpy@cp 0013  
                         strlen@cp 0013                           strcpy@to 000F  
            I2C_Write_Cmd_Only@Cmd 0011                    ___lwmod@counter 001A  
                     _setup_minute 0067                       _setup_second 0069  
            __end_of_setAddrWindow 0DF0                 fillRectangle@color 0019  
                    drawChar@color 002E                        _setup_month 0068  
               __end_of_write_data 1224                       drawChar@line 0033  
                     drawChar@size 0032  __size_of_I2C_Write_Cmd_Write_Data 0020  
             __size_of_DS1621_Init 001E          ?_I2C_Write_Cmd_Write_Data 0011  
