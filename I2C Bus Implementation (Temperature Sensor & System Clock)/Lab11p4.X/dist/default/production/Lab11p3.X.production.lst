

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Nov 09 20:28:42 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    68                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    69                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    70  0000                     
    71                           	psect	idataCOMRAM
    72  0012E6                     __pidataCOMRAM:
    73                           	opt stack 0
    74                           
    75                           ;initializer for _tempSecond
    76  0012E6  FF                 	db	255
    77                           
    78                           ;initializer for _wrap
    79  0012E7  01                 	db	1
    80                           
    81                           	psect	idataBANK0
    82  000F78                     __pidataBANK0:
    83                           	opt stack 0
    84                           
    85                           ;initializer for _color
    86  000F78  F800               	dw	63488
    87  000F7A  00                 	db	0
    88  000F7B  00                 	db	0
    89  000F7C  00                 	db	0
    90  000F7D  00                 	db	0
    91  000F7E  00                 	db	0
    92  000F7F  00                 	db	0
    93  000F80  00                 	db	0
    94  000F81  00                 	db	0
    95  000F82  00                 	db	0
    96  000F83  00                 	db	0
    97  000F84  00                 	db	0
    98  000F85  00                 	db	0
    99  000F86  00                 	db	0
   100  000F87  00                 	db	0
   101  000F88  00                 	db	0
   102  000F89  00                 	db	0
   103  000F8A  00                 	db	0
   104  000F8B  00                 	db	0
   105  000F8C  00                 	db	0
   106  000F8D  00                 	db	0
   107  000F8E  00                 	db	0
   108  000F8F  00                 	db	0
   109  000F90  00                 	db	0
   110  000F91  00                 	db	0
   111  000F92  00                 	db	0
   112  000F93  00                 	db	0
   113  000F94  00                 	db	0
   114  000F95  00                 	db	0
   115  000F96  00                 	db	0
   116  000F97  00                 	db	0
   117  000F98  00                 	db	0
   118  000F99  00                 	db	0
   119  000F9A  00                 	db	0
   120  000F9B  00                 	db	0
   121  000F9C  00                 	db	0
   122  000F9D  00                 	db	0
   123  000F9E  00                 	db	0
   124  000F9F  00                 	db	0
   125  000FA0  00                 	db	0
   126  000FA1  00                 	db	0
   127                           
   128                           ;initializer for _array1
   129  000FA2  A2                 	db	162
   130  000FA3  00                 	db	0
   131  000FA4  00                 	db	0
   132  000FA5  00                 	db	0
   133  000FA6  00                 	db	0
   134  000FA7  00                 	db	0
   135  000FA8  00                 	db	0
   136  000FA9  00                 	db	0
   137  000FAA  00                 	db	0
   138  000FAB  00                 	db	0
   139  000FAC  00                 	db	0
   140  000FAD  00                 	db	0
   141  000FAE  00                 	db	0
   142  000FAF  00                 	db	0
   143  000FB0  00                 	db	0
   144  000FB1  00                 	db	0
   145  000FB2  00                 	db	0
   146  000FB3  00                 	db	0
   147  000FB4  00                 	db	0
   148  000FB5  00                 	db	0
   149  000FB6  00                 	db	0
   150                           
   151                           	psect	idataBANK1
   152  000D66                     __pidataBANK1:
   153                           	opt stack 0
   154                           
   155                           ;initializer for _txt1
   156  000D66  43                 	db	67
   157  000D67  48                 	db	72
   158  000D68  2D                 	db	45
   159  000D69  00                 	db	0
   160  000D6A  00                 	db	0
   161  000D6B  00                 	db	0
   162  000D6C  00                 	db	0
   163  000D6D  00                 	db	0
   164  000D6E  00                 	db	0
   165  000D6F  00                 	db	0
   166  000D70  00                 	db	0
   167  000D71  00                 	db	0
   168  000D72  00                 	db	0
   169  000D73  00                 	db	0
   170  000D74  00                 	db	0
   171  000D75  00                 	db	0
   172  000D76  00                 	db	0
   173  000D77  00                 	db	0
   174  000D78  00                 	db	0
   175  000D79  00                 	db	0
   176  000D7A  00                 	db	0
   177  000D7B  00                 	db	0
   178  000D7C  00                 	db	0
   179  000D7D  00                 	db	0
   180  000D7E  00                 	db	0
   181  000D7F  00                 	db	0
   182  000D80  00                 	db	0
   183  000D81  00                 	db	0
   184  000D82  00                 	db	0
   185  000D83  00                 	db	0
   186  000D84  00                 	db	0
   187  000D85  00                 	db	0
   188  000D86  00                 	db	0
   189  000D87  00                 	db	0
   190  000D88  00                 	db	0
   191  000D89  00                 	db	0
   192  000D8A  00                 	db	0
   193  000D8B  00                 	db	0
   194  000D8C  00                 	db	0
   195  000D8D  00                 	db	0
   196  000D8E  00                 	db	0
   197  000D8F  00                 	db	0
   198  000D90  00                 	db	0
   199  000D91  00                 	db	0
   200  000D92  00                 	db	0
   201  000D93  00                 	db	0
   202  000D94  00                 	db	0
   203  000D95  00                 	db	0
   204  000D96  00                 	db	0
   205  000D97  00                 	db	0
   206  000D98  00                 	db	0
   207  000D99  00                 	db	0
   208  000D9A  00                 	db	0
   209  000D9B  00                 	db	0
   210  000D9C  00                 	db	0
   211  000D9D  00                 	db	0
   212  000D9E  00                 	db	0
   213  000D9F  00                 	db	0
   214  000DA0  00                 	db	0
   215  000DA1  00                 	db	0
   216  000DA2  00                 	db	0
   217  000DA3  00                 	db	0
   218  000DA4  00                 	db	0
   219  000DA5  00                 	db	0
   220  000DA6  00                 	db	0
   221  000DA7  00                 	db	0
   222  000DA8  00                 	db	0
   223  000DA9  00                 	db	0
   224  000DAA  00                 	db	0
   225  000DAB  00                 	db	0
   226  000DAC  00                 	db	0
   227  000DAD  00                 	db	0
   228  000DAE  00                 	db	0
   229  000DAF  00                 	db	0
   230  000DB0  00                 	db	0
   231  000DB1  00                 	db	0
   232  000DB2  00                 	db	0
   233  000DB3  00                 	db	0
   234  000DB4  00                 	db	0
   235  000DB5  00                 	db	0
   236  000DB6  00                 	db	0
   237  000DB7  00                 	db	0
   238  000DB8  00                 	db	0
   239  000DB9  00                 	db	0
   240                           
   241                           	psect	mediumconst
   242  00FD9A                     __pmediumconst:
   243                           	opt stack 0
   244  00FD9A  00                 	db	0
   245  00FD9B                     _font:
   246                           	opt stack 0
   247  00FD9B  00                 	db	0
   248  00FD9C  00                 	db	0
   249  00FD9D  00                 	db	0
   250  00FD9E  00                 	db	0
   251  00FD9F  00                 	db	0
   252  00FDA0  00                 	db	0
   253  00FDA1  00                 	db	0
   254  00FDA2  5F                 	db	95
   255  00FDA3  00                 	db	0
   256  00FDA4  00                 	db	0
   257  00FDA5  00                 	db	0
   258  00FDA6  07                 	db	7
   259  00FDA7  00                 	db	0
   260  00FDA8  07                 	db	7
   261  00FDA9  00                 	db	0
   262  00FDAA  14                 	db	20
   263  00FDAB  7F                 	db	127
   264  00FDAC  14                 	db	20
   265  00FDAD  7F                 	db	127
   266  00FDAE  14                 	db	20
   267  00FDAF  24                 	db	36
   268  00FDB0  2A                 	db	42
   269  00FDB1  7F                 	db	127
   270  00FDB2  2A                 	db	42
   271  00FDB3  12                 	db	18
   272  00FDB4  23                 	db	35
   273  00FDB5  13                 	db	19
   274  00FDB6  08                 	db	8
   275  00FDB7  64                 	db	100
   276  00FDB8  62                 	db	98
   277  00FDB9  36                 	db	54
   278  00FDBA  49                 	db	73
   279  00FDBB  56                 	db	86
   280  00FDBC  20                 	db	32
   281  00FDBD  50                 	db	80
   282  00FDBE  00                 	db	0
   283  00FDBF  08                 	db	8
   284  00FDC0  07                 	db	7
   285  00FDC1  03                 	db	3
   286  00FDC2  00                 	db	0
   287  00FDC3  00                 	db	0
   288  00FDC4  1C                 	db	28
   289  00FDC5  22                 	db	34
   290  00FDC6  41                 	db	65
   291  00FDC7  00                 	db	0
   292  00FDC8  00                 	db	0
   293  00FDC9  41                 	db	65
   294  00FDCA  22                 	db	34
   295  00FDCB  1C                 	db	28
   296  00FDCC  00                 	db	0
   297  00FDCD  2A                 	db	42
   298  00FDCE  1C                 	db	28
   299  00FDCF  7F                 	db	127
   300  00FDD0  1C                 	db	28
   301  00FDD1  2A                 	db	42
   302  00FDD2  08                 	db	8
   303  00FDD3  08                 	db	8
   304  00FDD4  3E                 	db	62
   305  00FDD5  08                 	db	8
   306  00FDD6  08                 	db	8
   307  00FDD7  00                 	db	0
   308  00FDD8  80                 	db	128
   309  00FDD9  70                 	db	112
   310  00FDDA  30                 	db	48
   311  00FDDB  00                 	db	0
   312  00FDDC  08                 	db	8
   313  00FDDD  08                 	db	8
   314  00FDDE  08                 	db	8
   315  00FDDF  08                 	db	8
   316  00FDE0  08                 	db	8
   317  00FDE1  00                 	db	0
   318  00FDE2  00                 	db	0
   319  00FDE3  60                 	db	96
   320  00FDE4  60                 	db	96
   321  00FDE5  00                 	db	0
   322  00FDE6  20                 	db	32
   323  00FDE7  10                 	db	16
   324  00FDE8  08                 	db	8
   325  00FDE9  04                 	db	4
   326  00FDEA  02                 	db	2
   327  00FDEB  3E                 	db	62
   328  00FDEC  51                 	db	81
   329  00FDED  49                 	db	73
   330  00FDEE  45                 	db	69
   331  00FDEF  3E                 	db	62
   332  00FDF0  00                 	db	0
   333  00FDF1  42                 	db	66
   334  00FDF2  7F                 	db	127
   335  00FDF3  40                 	db	64
   336  00FDF4  00                 	db	0
   337  00FDF5  72                 	db	114
   338  00FDF6  49                 	db	73
   339  00FDF7  49                 	db	73
   340  00FDF8  49                 	db	73
   341  00FDF9  46                 	db	70
   342  00FDFA  21                 	db	33
   343  00FDFB  41                 	db	65
   344  00FDFC  49                 	db	73
   345  00FDFD  4D                 	db	77
   346  00FDFE  33                 	db	51
   347  00FDFF  18                 	db	24
   348  00FE00  14                 	db	20
   349  00FE01  12                 	db	18
   350  00FE02  7F                 	db	127
   351  00FE03  10                 	db	16
   352  00FE04  27                 	db	39
   353  00FE05  45                 	db	69
   354  00FE06  45                 	db	69
   355  00FE07  45                 	db	69
   356  00FE08  39                 	db	57
   357  00FE09  3C                 	db	60
   358  00FE0A  4A                 	db	74
   359  00FE0B  49                 	db	73
   360  00FE0C  49                 	db	73
   361  00FE0D  31                 	db	49
   362  00FE0E  41                 	db	65
   363  00FE0F  21                 	db	33
   364  00FE10  11                 	db	17
   365  00FE11  09                 	db	9
   366  00FE12  07                 	db	7
   367  00FE13  36                 	db	54
   368  00FE14  49                 	db	73
   369  00FE15  49                 	db	73
   370  00FE16  49                 	db	73
   371  00FE17  36                 	db	54
   372  00FE18  46                 	db	70
   373  00FE19  49                 	db	73
   374  00FE1A  49                 	db	73
   375  00FE1B  29                 	db	41
   376  00FE1C  1E                 	db	30
   377  00FE1D  00                 	db	0
   378  00FE1E  00                 	db	0
   379  00FE1F  14                 	db	20
   380  00FE20  00                 	db	0
   381  00FE21  00                 	db	0
   382  00FE22  00                 	db	0
   383  00FE23  40                 	db	64
   384  00FE24  34                 	db	52
   385  00FE25  00                 	db	0
   386  00FE26  00                 	db	0
   387  00FE27  00                 	db	0
   388  00FE28  08                 	db	8
   389  00FE29  14                 	db	20
   390  00FE2A  22                 	db	34
   391  00FE2B  41                 	db	65
   392  00FE2C  14                 	db	20
   393  00FE2D  14                 	db	20
   394  00FE2E  14                 	db	20
   395  00FE2F  14                 	db	20
   396  00FE30  14                 	db	20
   397  00FE31  00                 	db	0
   398  00FE32  41                 	db	65
   399  00FE33  22                 	db	34
   400  00FE34  14                 	db	20
   401  00FE35  08                 	db	8
   402  00FE36  02                 	db	2
   403  00FE37  01                 	db	1
   404  00FE38  59                 	db	89
   405  00FE39  09                 	db	9
   406  00FE3A  06                 	db	6
   407  00FE3B  3E                 	db	62
   408  00FE3C  41                 	db	65
   409  00FE3D  5D                 	db	93
   410  00FE3E  59                 	db	89
   411  00FE3F  4E                 	db	78
   412  00FE40  7C                 	db	124
   413  00FE41  12                 	db	18
   414  00FE42  11                 	db	17
   415  00FE43  12                 	db	18
   416  00FE44  7C                 	db	124
   417  00FE45  7F                 	db	127
   418  00FE46  49                 	db	73
   419  00FE47  49                 	db	73
   420  00FE48  49                 	db	73
   421  00FE49  36                 	db	54
   422  00FE4A  3E                 	db	62
   423  00FE4B  41                 	db	65
   424  00FE4C  41                 	db	65
   425  00FE4D  41                 	db	65
   426  00FE4E  22                 	db	34
   427  00FE4F  7F                 	db	127
   428  00FE50  41                 	db	65
   429  00FE51  41                 	db	65
   430  00FE52  41                 	db	65
   431  00FE53  3E                 	db	62
   432  00FE54  7F                 	db	127
   433  00FE55  49                 	db	73
   434  00FE56  49                 	db	73
   435  00FE57  49                 	db	73
   436  00FE58  41                 	db	65
   437  00FE59  7F                 	db	127
   438  00FE5A  09                 	db	9
   439  00FE5B  09                 	db	9
   440  00FE5C  09                 	db	9
   441  00FE5D  01                 	db	1
   442  00FE5E  3E                 	db	62
   443  00FE5F  41                 	db	65
   444  00FE60  41                 	db	65
   445  00FE61  51                 	db	81
   446  00FE62  73                 	db	115
   447  00FE63  7F                 	db	127
   448  00FE64  08                 	db	8
   449  00FE65  08                 	db	8
   450  00FE66  08                 	db	8
   451  00FE67  7F                 	db	127
   452  00FE68  00                 	db	0
   453  00FE69  41                 	db	65
   454  00FE6A  7F                 	db	127
   455  00FE6B  41                 	db	65
   456  00FE6C  00                 	db	0
   457  00FE6D  20                 	db	32
   458  00FE6E  40                 	db	64
   459  00FE6F  41                 	db	65
   460  00FE70  3F                 	db	63
   461  00FE71  01                 	db	1
   462  00FE72  7F                 	db	127
   463  00FE73  08                 	db	8
   464  00FE74  14                 	db	20
   465  00FE75  22                 	db	34
   466  00FE76  41                 	db	65
   467  00FE77  7F                 	db	127
   468  00FE78  40                 	db	64
   469  00FE79  40                 	db	64
   470  00FE7A  40                 	db	64
   471  00FE7B  40                 	db	64
   472  00FE7C  7F                 	db	127
   473  00FE7D  02                 	db	2
   474  00FE7E  1C                 	db	28
   475  00FE7F  02                 	db	2
   476  00FE80  7F                 	db	127
   477  00FE81  7F                 	db	127
   478  00FE82  04                 	db	4
   479  00FE83  08                 	db	8
   480  00FE84  10                 	db	16
   481  00FE85  7F                 	db	127
   482  00FE86  3E                 	db	62
   483  00FE87  41                 	db	65
   484  00FE88  41                 	db	65
   485  00FE89  41                 	db	65
   486  00FE8A  3E                 	db	62
   487  00FE8B  7F                 	db	127
   488  00FE8C  09                 	db	9
   489  00FE8D  09                 	db	9
   490  00FE8E  09                 	db	9
   491  00FE8F  06                 	db	6
   492  00FE90  3E                 	db	62
   493  00FE91  41                 	db	65
   494  00FE92  51                 	db	81
   495  00FE93  21                 	db	33
   496  00FE94  5E                 	db	94
   497  00FE95  7F                 	db	127
   498  00FE96  09                 	db	9
   499  00FE97  19                 	db	25
   500  00FE98  29                 	db	41
   501  00FE99  46                 	db	70
   502  00FE9A                     __end_of_font:
   503                           	opt stack 0
   504  00FE9A                     _font2:
   505                           	opt stack 0
   506  00FE9A  26                 	db	38
   507  00FE9B  49                 	db	73
   508  00FE9C  49                 	db	73
   509  00FE9D  49                 	db	73
   510  00FE9E  32                 	db	50
   511  00FE9F  03                 	db	3
   512  00FEA0  01                 	db	1
   513  00FEA1  7F                 	db	127
   514  00FEA2  01                 	db	1
   515  00FEA3  03                 	db	3
   516  00FEA4  3F                 	db	63
   517  00FEA5  40                 	db	64
   518  00FEA6  40                 	db	64
   519  00FEA7  40                 	db	64
   520  00FEA8  3F                 	db	63
   521  00FEA9  1F                 	db	31
   522  00FEAA  20                 	db	32
   523  00FEAB  40                 	db	64
   524  00FEAC  20                 	db	32
   525  00FEAD  1F                 	db	31
   526  00FEAE  3F                 	db	63
   527  00FEAF  40                 	db	64
   528  00FEB0  38                 	db	56
   529  00FEB1  40                 	db	64
   530  00FEB2  3F                 	db	63
   531  00FEB3  63                 	db	99
   532  00FEB4  14                 	db	20
   533  00FEB5  08                 	db	8
   534  00FEB6  14                 	db	20
   535  00FEB7  63                 	db	99
   536  00FEB8  03                 	db	3
   537  00FEB9  04                 	db	4
   538  00FEBA  78                 	db	120
   539  00FEBB  04                 	db	4
   540  00FEBC  03                 	db	3
   541  00FEBD  61                 	db	97
   542  00FEBE  59                 	db	89
   543  00FEBF  49                 	db	73
   544  00FEC0  4D                 	db	77
   545  00FEC1  43                 	db	67
   546  00FEC2  00                 	db	0
   547  00FEC3  7F                 	db	127
   548  00FEC4  41                 	db	65
   549  00FEC5  41                 	db	65
   550  00FEC6  41                 	db	65
   551  00FEC7  02                 	db	2
   552  00FEC8  04                 	db	4
   553  00FEC9  08                 	db	8
   554  00FECA  10                 	db	16
   555  00FECB  20                 	db	32
   556  00FECC  00                 	db	0
   557  00FECD  41                 	db	65
   558  00FECE  41                 	db	65
   559  00FECF  41                 	db	65
   560  00FED0  7F                 	db	127
   561  00FED1  04                 	db	4
   562  00FED2  02                 	db	2
   563  00FED3  01                 	db	1
   564  00FED4  02                 	db	2
   565  00FED5  04                 	db	4
   566  00FED6  40                 	db	64
   567  00FED7  40                 	db	64
   568  00FED8  40                 	db	64
   569  00FED9  40                 	db	64
   570  00FEDA  40                 	db	64
   571  00FEDB  00                 	db	0
   572  00FEDC  03                 	db	3
   573  00FEDD  07                 	db	7
   574  00FEDE  08                 	db	8
   575  00FEDF  00                 	db	0
   576  00FEE0  20                 	db	32
   577  00FEE1  54                 	db	84
   578  00FEE2  54                 	db	84
   579  00FEE3  78                 	db	120
   580  00FEE4  40                 	db	64
   581  00FEE5  7F                 	db	127
   582  00FEE6  28                 	db	40
   583  00FEE7  44                 	db	68
   584  00FEE8  44                 	db	68
   585  00FEE9  38                 	db	56
   586  00FEEA  38                 	db	56
   587  00FEEB  44                 	db	68
   588  00FEEC  44                 	db	68
   589  00FEED  44                 	db	68
   590  00FEEE  28                 	db	40
   591  00FEEF  38                 	db	56
   592  00FEF0  44                 	db	68
   593  00FEF1  44                 	db	68
   594  00FEF2  28                 	db	40
   595  00FEF3  7F                 	db	127
   596  00FEF4  38                 	db	56
   597  00FEF5  54                 	db	84
   598  00FEF6  54                 	db	84
   599  00FEF7  54                 	db	84
   600  00FEF8  18                 	db	24
   601  00FEF9  00                 	db	0
   602  00FEFA  08                 	db	8
   603  00FEFB  7E                 	db	126
   604  00FEFC  09                 	db	9
   605  00FEFD  02                 	db	2
   606  00FEFE  18                 	db	24
   607  00FEFF  A4                 	db	164
   608  00FF00  A4                 	db	164
   609  00FF01  9C                 	db	156
   610  00FF02  78                 	db	120
   611  00FF03  7F                 	db	127
   612  00FF04  08                 	db	8
   613  00FF05  04                 	db	4
   614  00FF06  04                 	db	4
   615  00FF07  78                 	db	120
   616  00FF08  00                 	db	0
   617  00FF09  44                 	db	68
   618  00FF0A  7D                 	db	125
   619  00FF0B  40                 	db	64
   620  00FF0C  00                 	db	0
   621  00FF0D  20                 	db	32
   622  00FF0E  40                 	db	64
   623  00FF0F  40                 	db	64
   624  00FF10  3D                 	db	61
   625  00FF11  00                 	db	0
   626  00FF12  7F                 	db	127
   627  00FF13  10                 	db	16
   628  00FF14  28                 	db	40
   629  00FF15  44                 	db	68
   630  00FF16  00                 	db	0
   631  00FF17  00                 	db	0
   632  00FF18  41                 	db	65
   633  00FF19  7F                 	db	127
   634  00FF1A  40                 	db	64
   635  00FF1B  00                 	db	0
   636  00FF1C  7C                 	db	124
   637  00FF1D  04                 	db	4
   638  00FF1E  78                 	db	120
   639  00FF1F  04                 	db	4
   640  00FF20  78                 	db	120
   641  00FF21  7C                 	db	124
   642  00FF22  08                 	db	8
   643  00FF23  04                 	db	4
   644  00FF24  04                 	db	4
   645  00FF25  78                 	db	120
   646  00FF26  38                 	db	56
   647  00FF27  44                 	db	68
   648  00FF28  44                 	db	68
   649  00FF29  44                 	db	68
   650  00FF2A  38                 	db	56
   651  00FF2B  FC                 	db	252
   652  00FF2C  18                 	db	24
   653  00FF2D  24                 	db	36
   654  00FF2E  24                 	db	36
   655  00FF2F  18                 	db	24
   656  00FF30  18                 	db	24
   657  00FF31  24                 	db	36
   658  00FF32  24                 	db	36
   659  00FF33  18                 	db	24
   660  00FF34  FC                 	db	252
   661  00FF35  7C                 	db	124
   662  00FF36  08                 	db	8
   663  00FF37  04                 	db	4
   664  00FF38  04                 	db	4
   665  00FF39  08                 	db	8
   666  00FF3A  48                 	db	72
   667  00FF3B  54                 	db	84
   668  00FF3C  54                 	db	84
   669  00FF3D  54                 	db	84
   670  00FF3E  24                 	db	36
   671  00FF3F  04                 	db	4
   672  00FF40  04                 	db	4
   673  00FF41  3F                 	db	63
   674  00FF42  44                 	db	68
   675  00FF43  24                 	db	36
   676  00FF44  3C                 	db	60
   677  00FF45  40                 	db	64
   678  00FF46  40                 	db	64
   679  00FF47  20                 	db	32
   680  00FF48  7C                 	db	124
   681  00FF49  1C                 	db	28
   682  00FF4A  20                 	db	32
   683  00FF4B  40                 	db	64
   684  00FF4C  20                 	db	32
   685  00FF4D  1C                 	db	28
   686  00FF4E  3C                 	db	60
   687  00FF4F  40                 	db	64
   688  00FF50  30                 	db	48
   689  00FF51  40                 	db	64
   690  00FF52  3C                 	db	60
   691  00FF53  44                 	db	68
   692  00FF54  28                 	db	40
   693  00FF55  10                 	db	16
   694  00FF56  28                 	db	40
   695  00FF57  44                 	db	68
   696  00FF58  4C                 	db	76
   697  00FF59  90                 	db	144
   698  00FF5A  90                 	db	144
   699  00FF5B  90                 	db	144
   700  00FF5C  7C                 	db	124
   701  00FF5D  44                 	db	68
   702  00FF5E  64                 	db	100
   703  00FF5F  54                 	db	84
   704  00FF60  4C                 	db	76
   705  00FF61  44                 	db	68
   706  00FF62  00                 	db	0
   707  00FF63  08                 	db	8
   708  00FF64  36                 	db	54
   709  00FF65  41                 	db	65
   710  00FF66  00                 	db	0
   711  00FF67  00                 	db	0
   712  00FF68  00                 	db	0
   713  00FF69  77                 	db	119
   714  00FF6A  00                 	db	0
   715  00FF6B  00                 	db	0
   716  00FF6C  00                 	db	0
   717  00FF6D  41                 	db	65
   718  00FF6E  36                 	db	54
   719  00FF6F  08                 	db	8
   720  00FF70  00                 	db	0
   721  00FF71  02                 	db	2
   722  00FF72  01                 	db	1
   723  00FF73  02                 	db	2
   724  00FF74  04                 	db	4
   725  00FF75  02                 	db	2
   726  00FF76                     __end_of_font2:
   727                           	opt stack 0
   728  00FF76                     _dpowers:
   729                           	opt stack 0
   730  00FF76  0001               	dw	1
   731  00FF78  000A               	dw	10
   732  00FF7A  0064               	dw	100
   733  00FF7C  03E8               	dw	1000
   734  00FF7E  2710               	dw	10000
   735  00FF80                     __end_of_dpowers:
   736                           	opt stack 0
   737  00FF80                     _hexpowers:
   738                           	opt stack 0
   739  00FF80  0001               	dw	1
   740  00FF82  0010               	dw	16
   741  00FF84  0100               	dw	256
   742  00FF86  1000               	dw	4096
   743  00FF88                     __end_of_hexpowers:
   744                           	opt stack 0
   745  0000                     _ADCON1	set	4033
   746  0000                     _OSCCON	set	4051
   747  0000                     _PIE1bits	set	3997
   748  0000                     _PIR1bits	set	3998
   749  0000                     _PIR2bits	set	4001
   750  0000                     _PORTAbits	set	3968
   751  0000                     _PORTCbits	set	3970
   752  0000                     _RCSTA	set	4011
   753  0000                     _RCSTAbits	set	4011
   754  0000                     _SPBRG	set	4015
   755  0000                     _SPBRGH	set	4016
   756  0000                     _SSPBUF	set	4041
   757  0000                     _SSPCON1	set	4038
   758  0000                     _SSPSTAT	set	4039
   759  0000                     _SSPSTATbits	set	4039
   760  0000                     _T3CON	set	4017
   761  0000                     _T3CONbits	set	4017
   762  0000                     _TMR3H	set	4019
   763  0000                     _TMR3L	set	4018
   764  0000                     _TRISA	set	3986
   765  0000                     _TRISAbits	set	3986
   766  0000                     _TRISB	set	3987
   767  0000                     _TRISC	set	3988
   768  0000                     _TRISCbits	set	3988
   769  0000                     _TRISD	set	3989
   770  0000                     _TRISE	set	3990
   771  0000                     _TXREG	set	4013
   772  0000                     _TXSTA	set	4012
   773  0000                     _TXSTAbits	set	4012
   774  0000                     _RBPU	set	32655
   775  0000                     _TRMT	set	32097
   776  00FF88                     STR_2:
   777  00FF88  20                 	db	32
   778  00FF89  54                 	db	84	;'T'
   779  00FF8A  65                 	db	101	;'e'
   780  00FF8B  6D                 	db	109	;'m'
   781  00FF8C  70                 	db	112	;'p'
   782  00FF8D  65                 	db	101	;'e'
   783  00FF8E  72                 	db	114	;'r'
   784  00FF8F  61                 	db	97	;'a'
   785  00FF90  74                 	db	116	;'t'
   786  00FF91  75                 	db	117	;'u'
   787  00FF92  72                 	db	114	;'r'
   788  00FF93  65                 	db	101	;'e'
   789  00FF94  20                 	db	32
   790  00FF95  3D                 	db	61	;'='
   791  00FF96  20                 	db	32
   792  00FF97  25                 	db	37
   793  00FF98  64                 	db	100	;'d'
   794  00FF99  20                 	db	32
   795  00FF9A  64                 	db	100	;'d'
   796  00FF9B  65                 	db	101	;'e'
   797  00FF9C  67                 	db	103	;'g'
   798  00FF9D  72                 	db	114	;'r'
   799  00FF9E  65                 	db	101	;'e'
   800  00FF9F  65                 	db	101	;'e'
   801  00FFA0  73                 	db	115	;'s'
   802  00FFA1  43                 	db	67	;'C'
   803  00FFA2  20                 	db	32
   804  00FFA3  3D                 	db	61	;'='
   805  00FFA4  20                 	db	32
   806  00FFA5  25                 	db	37
   807  00FFA6  64                 	db	100	;'d'
   808  00FFA7  20                 	db	32
   809  00FFA8  64                 	db	100	;'d'
   810  00FFA9  65                 	db	101	;'e'
   811  00FFAA  67                 	db	103	;'g'
   812  00FFAB  72                 	db	114	;'r'
   813  00FFAC  65                 	db	101	;'e'
   814  00FFAD  65                 	db	101	;'e'
   815  00FFAE  73                 	db	115	;'s'
   816  00FFAF  46                 	db	70	;'F'
   817  00FFB0  0D                 	db	13
   818  00FFB1  0A                 	db	10
   819  00FFB2  00                 	db	0
   820  00FFB3                     STR_1:
   821  00FFB3  25                 	db	37
   822  00FFB4  30                 	db	48	;'0'
   823  00FFB5  32                 	db	50	;'2'
   824  00FFB6  78                 	db	120	;'x'
   825  00FFB7  3A                 	db	58	;':'
   826  00FFB8  25                 	db	37
   827  00FFB9  30                 	db	48	;'0'
   828  00FFBA  32                 	db	50	;'2'
   829  00FFBB  78                 	db	120	;'x'
   830  00FFBC  3A                 	db	58	;':'
   831  00FFBD  25                 	db	37
   832  00FFBE  30                 	db	48	;'0'
   833  00FFBF  32                 	db	50	;'2'
   834  00FFC0  78                 	db	120	;'x'
   835  00FFC1  20                 	db	32
   836  00FFC2  25                 	db	37
   837  00FFC3  30                 	db	48	;'0'
   838  00FFC4  32                 	db	50	;'2'
   839  00FFC5  78                 	db	120	;'x'
   840  00FFC6  2F                 	db	47
   841  00FFC7  25                 	db	37
   842  00FFC8  30                 	db	48	;'0'
   843  00FFC9  32                 	db	50	;'2'
   844  00FFCA  78                 	db	120	;'x'
   845  00FFCB  2F                 	db	47
   846  00FFCC  25                 	db	37
   847  00FFCD  30                 	db	48	;'0'
   848  00FFCE  32                 	db	50	;'2'
   849  00FFCF  78                 	db	120	;'x'
   850  00FFD0  00                 	db	0
   851  00FFD1                     STR_3:
   852  00FFD1  45                 	db	69	;'E'
   853  00FFD2  43                 	db	67	;'C'
   854  00FFD3  45                 	db	69	;'E'
   855  00FFD4  33                 	db	51	;'3'
   856  00FFD5  33                 	db	51	;'3'
   857  00FFD6  30                 	db	48	;'0'
   858  00FFD7  31                 	db	49	;'1'
   859  00FFD8  4C                 	db	76	;'L'
   860  00FFD9  20                 	db	32
   861  00FFDA  46                 	db	70	;'F'
   862  00FFDB  61                 	db	97	;'a'
   863  00FFDC  6C                 	db	108	;'l'
   864  00FFDD  6C                 	db	108	;'l'
   865  00FFDE  20                 	db	32
   866  00FFDF  32                 	db	50	;'2'
   867  00FFE0  32                 	db	50	;'2'
   868  00FFE1  2D                 	db	45
   869  00FFE2  53                 	db	83	;'S'
   870  00FFE3  78                 	db	120	;'x'
   871  00FFE4  00                 	db	0
   872  00FFE5                     STR_5:
   873  00FFE5  30                 	db	48	;'0'
   874  00FFE6  31                 	db	49	;'1'
   875  00FFE7  32                 	db	50	;'2'
   876  00FFE8  33                 	db	51	;'3'
   877  00FFE9  34                 	db	52	;'4'
   878  00FFEA  35                 	db	53	;'5'
   879  00FFEB  36                 	db	54	;'6'
   880  00FFEC  37                 	db	55	;'7'
   881  00FFED  38                 	db	56	;'8'
   882  00FFEE  39                 	db	57	;'9'
   883  00FFEF  61                 	db	97	;'a'
   884  00FFF0  62                 	db	98	;'b'
   885  00FFF1  63                 	db	99	;'c'
   886  00FFF2  64                 	db	100	;'d'
   887  00FFF3  65                 	db	101	;'e'
   888  00FFF4  66                 	db	102	;'f'
   889  00FFF5  00                 	db	0
   890  00FFF6                     STR_4:
   891  00FFF6  4C                 	db	76	;'L'
   892  00FFF7  41                 	db	65	;'A'
   893  00FFF8  42                 	db	66	;'B'
   894  00FFF9  20                 	db	32
   895  00FFFA  31                 	db	49	;'1'
   896  00FFFB  30                 	db	48	;'0'
   897  00FFFC  20                 	db	32
   898  00FFFD  00                 	db	0
   899                           
   900                           ; #config settings
   901  00FFFE  00                 	db	0	; dummy byte at the end
   902  0000                     
   903                           	psect	cinit
   904  000AEE                     __pcinit:
   905                           	opt stack 0
   906  000AEE                     start_initialization:
   907                           	opt stack 0
   908  000AEE                     __initialization:
   909                           	opt stack 0
   910                           
   911                           ; Clear objects allocated to BANK0 (31 bytes)
   912  000AEE  EE00  F0BF         	lfsr	0,__pbssBANK0
   913  000AF2  0E1F               	movlw	31
   914  000AF4                     clear_0:
   915  000AF4  6AEE               	clrf	postinc0,c
   916  000AF6  06E8               	decf	wreg,f,c
   917  000AF8  E1FD               	bnz	clear_0
   918                           
   919                           ; Clear objects allocated to COMRAM (41 bytes)
   920  000AFA  EE00  F043         	lfsr	0,__pbssCOMRAM
   921  000AFE  0E29               	movlw	41
   922  000B00                     clear_1:
   923  000B00  6AEE               	clrf	postinc0,c
   924  000B02  06E8               	decf	wreg,f,c
   925  000B04  E1FD               	bnz	clear_1
   926                           
   927                           ; Initialize objects allocated to BANK1 (84 bytes)
   928                           ; load TBLPTR registers with __pidataBANK1
   929  000B06  0E66               	movlw	low __pidataBANK1
   930  000B08  6EF6               	movwf	tblptrl,c
   931  000B0A  0E0D               	movlw	high __pidataBANK1
   932  000B0C  6EF7               	movwf	tblptrh,c
   933  000B0E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   934  000B10  6EF8               	movwf	tblptru,c
   935  000B12  EE01  F000         	lfsr	0,__pdataBANK1
   936  000B16  EE10 F054          	lfsr	1,84
   937  000B1A                     copy_data0:
   938  000B1A  0009               	tblrd		*+
   939  000B1C  CFF5 FFEE          	movff	tablat,postinc0
   940  000B20  50E5               	movf	postdec1,w,c
   941  000B22  50E1               	movf	fsr1l,w,c
   942  000B24  E1FA               	bnz	copy_data0
   943                           
   944                           ; Initialize objects allocated to BANK0 (63 bytes)
   945                           ; load TBLPTR registers with __pidataBANK0
   946  000B26  0E78               	movlw	low __pidataBANK0
   947  000B28  6EF6               	movwf	tblptrl,c
   948  000B2A  0E0F               	movlw	high __pidataBANK0
   949  000B2C  6EF7               	movwf	tblptrh,c
   950  000B2E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   951  000B30  6EF8               	movwf	tblptru,c
   952  000B32  EE00  F080         	lfsr	0,__pdataBANK0
   953  000B36  EE10 F03F          	lfsr	1,63
   954  000B3A                     copy_data1:
   955  000B3A  0009               	tblrd		*+
   956  000B3C  CFF5 FFEE          	movff	tablat,postinc0
   957  000B40  50E5               	movf	postdec1,w,c
   958  000B42  50E1               	movf	fsr1l,w,c
   959  000B44  E1FA               	bnz	copy_data1
   960                           
   961                           ; Initialize objects allocated to COMRAM (2 bytes)
   962                           ; load TBLPTR registers with __pidataCOMRAM
   963  000B46  0EE6               	movlw	low __pidataCOMRAM
   964  000B48  6EF6               	movwf	tblptrl,c
   965  000B4A  0E12               	movlw	high __pidataCOMRAM
   966  000B4C  6EF7               	movwf	tblptrh,c
   967  000B4E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   968  000B50  6EF8               	movwf	tblptru,c
   969  000B52  0009               	tblrd		*+	;fetch initializer
   970  000B54  CFF5 F06C          	movff	tablat,__pdataCOMRAM
   971  000B58  0009               	tblrd		*+	;fetch initializer
   972  000B5A  CFF5 F06D          	movff	tablat,__pdataCOMRAM+1
   973  000B5E                     end_of_initialization:
   974                           	opt stack 0
   975  000B5E                     __end_of__initialization:
   976                           	opt stack 0
   977  000B5E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   978  000B60  6EF8               	movwf	tblptru,c
   979  000B62  0100               	movlb	0
   980  000B64  EFA5  F004         	goto	_main	;jump to C main() function
   981                           tblptru	equ	0xFF8
   982                           tblptrh	equ	0xFF7
   983                           tblptrl	equ	0xFF6
   984                           tablat	equ	0xFF5
   985                           postinc0	equ	0xFEE
   986                           wreg	equ	0xFE8
   987                           postdec1	equ	0xFE5
   988                           fsr1l	equ	0xFE1
   989                           
   990                           	psect	bssCOMRAM
   991  000043                     __pbssCOMRAM:
   992                           	opt stack 0
   993  000043                     _Nec_code:
   994                           	opt stack 0
   995  000043                     	ds	4
   996  000047                     _Time_Elapsed:
   997                           	opt stack 0
   998  000047                     	ds	2
   999  000049                     _nbr:
  1000                           	opt stack 0
  1001  000049                     	ds	2
  1002  00004B                     _nec_ok:
  1003                           	opt stack 0
  1004  00004B                     	ds	2
  1005  00004D                     _txt:
  1006                           	opt stack 0
  1007  00004D                     	ds	2
  1008  00004F                     _Nec_code1:
  1009                           	opt stack 0
  1010  00004F                     	ds	1
  1011  000050                     _Nec_state:
  1012                           	opt stack 0
  1013  000050                     	ds	1
  1014  000051                     _TempSecond:
  1015                           	opt stack 0
  1016  000051                     	ds	1
  1017  000052                     __tft_type:
  1018                           	opt stack 0
  1019  000052                     	ds	1
  1020  000053                     _alarm_date:
  1021                           	opt stack 0
  1022  000053                     	ds	1
  1023  000054                     _alarm_hour:
  1024                           	opt stack 0
  1025  000054                     	ds	1
  1026  000055                     _alarm_minute:
  1027                           	opt stack 0
  1028  000055                     	ds	1
  1029  000056                     _alarm_second:
  1030                           	opt stack 0
  1031  000056                     	ds	1
  1032  000057                     _bit_count:
  1033                           	opt stack 0
  1034  000057                     	ds	1
  1035  000058                     _colstart:
  1036                           	opt stack 0
  1037  000058                     	ds	1
  1038  000059                     _day:
  1039                           	opt stack 0
  1040  000059                     	ds	1
  1041  00005A                     _dow:
  1042                           	opt stack 0
  1043  00005A                     	ds	1
  1044  00005B                     _found:
  1045                           	opt stack 0
  1046  00005B                     	ds	1
  1047  00005C                     _hour:
  1048                           	opt stack 0
  1049  00005C                     	ds	1
  1050  00005D                     _i:
  1051                           	opt stack 0
  1052  00005D                     	ds	1
  1053  00005E                     _minute:
  1054                           	opt stack 0
  1055  00005E                     	ds	1
  1056  00005F                     _month:
  1057                           	opt stack 0
  1058  00005F                     	ds	1
  1059  000060                     _rowstart:
  1060                           	opt stack 0
  1061  000060                     	ds	1
  1062  000061                     _second:
  1063                           	opt stack 0
  1064  000061                     	ds	1
  1065  000062                     _setup_alarm_hour:
  1066                           	opt stack 0
  1067  000062                     	ds	1
  1068  000063                     _setup_alarm_minute:
  1069                           	opt stack 0
  1070  000063                     	ds	1
  1071  000064                     _setup_alarm_second:
  1072                           	opt stack 0
  1073  000064                     	ds	1
  1074  000065                     _setup_day:
  1075                           	opt stack 0
  1076  000065                     	ds	1
  1077  000066                     _setup_hour:
  1078                           	opt stack 0
  1079  000066                     	ds	1
  1080  000067                     _setup_minute:
  1081                           	opt stack 0
  1082  000067                     	ds	1
  1083  000068                     _setup_month:
  1084                           	opt stack 0
  1085  000068                     	ds	1
  1086  000069                     _setup_second:
  1087                           	opt stack 0
  1088  000069                     	ds	1
  1089  00006A                     _setup_year:
  1090                           	opt stack 0
  1091  00006A                     	ds	1
  1092  00006B                     _year:
  1093                           	opt stack 0
  1094  00006B                     	ds	1
  1095                           tblptru	equ	0xFF8
  1096                           tblptrh	equ	0xFF7
  1097                           tblptrl	equ	0xFF6
  1098                           tablat	equ	0xFF5
  1099                           postinc0	equ	0xFEE
  1100                           wreg	equ	0xFE8
  1101                           postdec1	equ	0xFE5
  1102                           fsr1l	equ	0xFE1
  1103                           
  1104                           	psect	dataCOMRAM
  1105  00006C                     __pdataCOMRAM:
  1106                           	opt stack 0
  1107  00006C                     _tempSecond:
  1108                           	opt stack 0
  1109  00006C                     	ds	1
  1110  00006D                     _wrap:
  1111                           	opt stack 0
  1112  00006D                     	ds	1
  1113                           tblptru	equ	0xFF8
  1114                           tblptrh	equ	0xFF7
  1115                           tblptrl	equ	0xFF6
  1116                           tablat	equ	0xFF5
  1117                           postinc0	equ	0xFEE
  1118                           wreg	equ	0xFE8
  1119                           postdec1	equ	0xFE5
  1120                           fsr1l	equ	0xFE1
  1121                           
  1122                           	psect	bssBANK0
  1123  0000BF                     __pbssBANK0:
  1124                           	opt stack 0
  1125  0000BF                     _buffer:
  1126                           	opt stack 0
  1127  0000BF                     	ds	31
  1128                           tblptru	equ	0xFF8
  1129                           tblptrh	equ	0xFF7
  1130                           tblptrl	equ	0xFF6
  1131                           tablat	equ	0xFF5
  1132                           postinc0	equ	0xFEE
  1133                           wreg	equ	0xFE8
  1134                           postdec1	equ	0xFE5
  1135                           fsr1l	equ	0xFE1
  1136                           
  1137                           	psect	dataBANK0
  1138  000080                     __pdataBANK0:
  1139                           	opt stack 0
  1140  000080                     _color:
  1141                           	opt stack 0
  1142  000080                     	ds	42
  1143  0000AA                     _array1:
  1144                           	opt stack 0
  1145  0000AA                     	ds	21
  1146                           tblptru	equ	0xFF8
  1147                           tblptrh	equ	0xFF7
  1148                           tblptrl	equ	0xFF6
  1149                           tablat	equ	0xFF5
  1150                           postinc0	equ	0xFEE
  1151                           wreg	equ	0xFE8
  1152                           postdec1	equ	0xFE5
  1153                           fsr1l	equ	0xFE1
  1154                           
  1155                           	psect	dataBANK1
  1156  000100                     __pdataBANK1:
  1157                           	opt stack 0
  1158  000100                     _txt1:
  1159                           	opt stack 0
  1160  000100                     	ds	84
  1161                           tblptru	equ	0xFF8
  1162                           tblptrh	equ	0xFF7
  1163                           tblptrl	equ	0xFF6
  1164                           tablat	equ	0xFF5
  1165                           postinc0	equ	0xFEE
  1166                           wreg	equ	0xFE8
  1167                           postdec1	equ	0xFE5
  1168                           fsr1l	equ	0xFE1
  1169                           
  1170                           	psect	cstackBANK0
  1171  0000DE                     __pcstackBANK0:
  1172                           	opt stack 0
  1173  0000DE                     drawtext@x:
  1174                           	opt stack 0
  1175                           
  1176                           ; 1 bytes @ 0x0
  1177  0000DE                     	ds	1
  1178  0000DF                     drawtext@textsize:
  1179                           	opt stack 0
  1180                           
  1181                           ; 2 bytes @ 0x1
  1182  0000DF                     	ds	2
  1183  0000E1                     drawtext@i:
  1184                           	opt stack 0
  1185                           
  1186                           ; 2 bytes @ 0x3
  1187  0000E1                     	ds	2
  1188  0000E3                     drawtext@cursor_y:
  1189                           	opt stack 0
  1190                           
  1191                           ; 1 bytes @ 0x5
  1192  0000E3                     	ds	1
  1193  0000E4                     drawtext@cursor_x:
  1194                           	opt stack 0
  1195                           
  1196                           ; 1 bytes @ 0x6
  1197  0000E4                     	ds	1
  1198                           tblptru	equ	0xFF8
  1199                           tblptrh	equ	0xFF7
  1200                           tblptrl	equ	0xFF6
  1201                           tablat	equ	0xFF5
  1202                           postinc0	equ	0xFEE
  1203                           wreg	equ	0xFE8
  1204                           postdec1	equ	0xFE5
  1205                           fsr1l	equ	0xFE1
  1206                           
  1207                           	psect	cstackCOMRAM
  1208  000001                     __pcstackCOMRAM:
  1209                           	opt stack 0
  1210  000001                     ??_chkisr:
  1211  000001                     
  1212                           ; 1 bytes @ 0x0
  1213  000001                     	ds	14
  1214  00000F                     ??_isdigit:
  1215  00000F                     ?_strlen:
  1216                           	opt stack 0
  1217  00000F                     ?___wmul:
  1218                           	opt stack 0
  1219  00000F                     ?___awdiv:
  1220                           	opt stack 0
  1221  00000F                     ?___lwdiv:
  1222                           	opt stack 0
  1223  00000F                     spiwrite@x:
  1224                           	opt stack 0
  1225  00000F                     I2C_Read@ack:
  1226                           	opt stack 0
  1227  00000F                     I2C_Write@outByte:
  1228                           	opt stack 0
  1229  00000F                     putch@c:
  1230                           	opt stack 0
  1231  00000F                     OpenUSART@spbrg:
  1232                           	opt stack 0
  1233  00000F                     ___wmul@multiplier:
  1234                           	opt stack 0
  1235  00000F                     ___awdiv@dividend:
  1236                           	opt stack 0
  1237  00000F                     ___lwdiv@dividend:
  1238                           	opt stack 0
  1239  00000F                     strcpy@to:
  1240                           	opt stack 0
  1241  00000F                     strlen@s:
  1242                           	opt stack 0
  1243  00000F                     I2C_Init@c:
  1244                           	opt stack 0
  1245                           
  1246                           ; 4 bytes @ 0xE
  1247  00000F                     	ds	1
  1248  000010                     spiwrite@spidata:
  1249                           	opt stack 0
  1250  000010                     I2C_Read@n:
  1251                           	opt stack 0
  1252  000010                     I2C_Write@n:
  1253                           	opt stack 0
  1254  000010                     _isdigit$1510:
  1255                           	opt stack 0
  1256                           
  1257                           ; 1 bytes @ 0xF
  1258  000010                     	ds	1
  1259  000011                     ??_strlen:
  1260  000011                     write_command@cmd_:
  1261                           	opt stack 0
  1262  000011                     write_data@data_:
  1263                           	opt stack 0
  1264  000011                     I2C_Read@inByte:
  1265                           	opt stack 0
  1266  000011                     I2C_Write_Cmd_Only@Cmd:
  1267                           	opt stack 0
  1268  000011                     I2C_Write_Cmd_Write_Data@Cmd:
  1269                           	opt stack 0
  1270  000011                     DS3231_Setup_Time@Device:
  1271                           	opt stack 0
  1272  000011                     OpenUSART@config:
  1273                           	opt stack 0
  1274  000011                     isdigit@c:
  1275                           	opt stack 0
  1276  000011                     ___wmul@multiplicand:
  1277                           	opt stack 0
  1278  000011                     ___awdiv@divisor:
  1279                           	opt stack 0
  1280  000011                     ___lwdiv@divisor:
  1281                           	opt stack 0
  1282  000011                     strcpy@from:
  1283                           	opt stack 0
  1284                           
  1285                           ; 2 bytes @ 0x10
  1286  000011                     	ds	1
  1287  000012                     ?_DS1621_Read_Temp:
  1288                           	opt stack 0
  1289  000012                     setAddrWindow@y0:
  1290                           	opt stack 0
  1291  000012                     I2C_Write_Cmd_Only@Device:
  1292                           	opt stack 0
  1293  000012                     I2C_Write_Cmd_Write_Data@Data_Out:
  1294                           	opt stack 0
  1295  000012                     DS3231_Read_Time@Address:
  1296                           	opt stack 0
  1297  000012                     DS3231_Setup_Time@Address:
  1298                           	opt stack 0
  1299                           
  1300                           ; 1 bytes @ 0x11
  1301  000012                     	ds	1
  1302  000013                     setAddrWindow@x1:
  1303                           	opt stack 0
  1304  000013                     I2C_Write_Cmd_Write_Data@Device:
  1305                           	opt stack 0
  1306  000013                     DS3231_Read_Time@Device:
  1307                           	opt stack 0
  1308  000013                     ___awdiv@counter:
  1309                           	opt stack 0
  1310  000013                     ___wmul@product:
  1311                           	opt stack 0
  1312  000013                     ___lwdiv@quotient:
  1313                           	opt stack 0
  1314  000013                     strcpy@cp:
  1315                           	opt stack 0
  1316  000013                     strlen@cp:
  1317                           	opt stack 0
  1318                           
  1319                           ; 2 bytes @ 0x12
  1320  000013                     	ds	1
  1321  000014                     setAddrWindow@y1:
  1322                           	opt stack 0
  1323  000014                     DS1621_Init@Device:
  1324                           	opt stack 0
  1325  000014                     DS1621_Read_Temp@Cmd:
  1326                           	opt stack 0
  1327  000014                     ___awdiv@sign:
  1328                           	opt stack 0
  1329                           
  1330                           ; 1 bytes @ 0x13
  1331  000014                     	ds	1
  1332  000015                     setAddrWindow@x0:
  1333                           	opt stack 0
  1334  000015                     DS1621_Read_Temp@Data_Ret:
  1335                           	opt stack 0
  1336  000015                     ___lwdiv@counter:
  1337                           	opt stack 0
  1338  000015                     delay_ms@ms:
  1339                           	opt stack 0
  1340  000015                     ___awdiv@quotient:
  1341                           	opt stack 0
  1342                           
  1343                           ; 2 bytes @ 0x14
  1344  000015                     	ds	1
  1345  000016                     ?___lwmod:
  1346                           	opt stack 0
  1347  000016                     drawPixel@y:
  1348                           	opt stack 0
  1349  000016                     drawFastVLine@y:
  1350                           	opt stack 0
  1351  000016                     fillRectangle@y:
  1352                           	opt stack 0
  1353  000016                     DS1621_Read_Temp@Device:
  1354                           	opt stack 0
  1355  000016                     ___lwmod@dividend:
  1356                           	opt stack 0
  1357                           
  1358                           ; 2 bytes @ 0x15
  1359  000016                     	ds	1
  1360  000017                     ??_delay_ms:
  1361  000017                     drawFastVLine@h:
  1362                           	opt stack 0
  1363  000017                     fillRectangle@w:
  1364                           	opt stack 0
  1365  000017                     drawPixel@color:
  1366                           	opt stack 0
  1367                           
  1368                           ; 2 bytes @ 0x16
  1369  000017                     	ds	1
  1370  000018                     fillRectangle@h:
  1371                           	opt stack 0
  1372  000018                     drawFastVLine@color:
  1373                           	opt stack 0
  1374  000018                     ___lwmod@divisor:
  1375                           	opt stack 0
  1376                           
  1377                           ; 2 bytes @ 0x17
  1378  000018                     	ds	1
  1379  000019                     drawPixel@x:
  1380                           	opt stack 0
  1381  000019                     delay_ms@count:
  1382                           	opt stack 0
  1383  000019                     fillRectangle@color:
  1384                           	opt stack 0
  1385                           
  1386                           ; 2 bytes @ 0x18
  1387  000019                     	ds	1
  1388  00001A                     ??_drawFastVLine:
  1389  00001A                     ___lwmod@counter:
  1390                           	opt stack 0
  1391                           
  1392                           ; 1 bytes @ 0x19
  1393  00001A                     	ds	1
  1394  00001B                     ??_fillRectangle:
  1395  00001B                     ?_printf:
  1396                           	opt stack 0
  1397  00001B                     printf@f:
  1398                           	opt stack 0
  1399                           
  1400                           ; 2 bytes @ 0x1A
  1401  00001B                     	ds	3
  1402  00001E                     drawFastVLine@hi:
  1403                           	opt stack 0
  1404                           
  1405                           ; 1 bytes @ 0x1D
  1406  00001E                     	ds	1
  1407  00001F                     drawFastVLine@lo:
  1408                           	opt stack 0
  1409  00001F                     fillRectangle@hi:
  1410                           	opt stack 0
  1411                           
  1412                           ; 1 bytes @ 0x1E
  1413  00001F                     	ds	1
  1414  000020                     drawFastVLine@x:
  1415                           	opt stack 0
  1416  000020                     fillRectangle@lo:
  1417                           	opt stack 0
  1418                           
  1419                           ; 1 bytes @ 0x1F
  1420  000020                     	ds	1
  1421  000021                     fillRect@y:
  1422                           	opt stack 0
  1423  000021                     fillRectangle@x:
  1424                           	opt stack 0
  1425                           
  1426                           ; 1 bytes @ 0x20
  1427  000021                     	ds	1
  1428  000022                     fillRect@w:
  1429                           	opt stack 0
  1430  000022                     fillScreen@color:
  1431                           	opt stack 0
  1432                           
  1433                           ; 2 bytes @ 0x21
  1434  000022                     	ds	1
  1435  000023                     fillRect@h:
  1436                           	opt stack 0
  1437                           
  1438                           ; 1 bytes @ 0x22
  1439  000023                     	ds	1
  1440  000024                     fillRect@color:
  1441                           	opt stack 0
  1442                           
  1443                           ; 2 bytes @ 0x23
  1444  000024                     	ds	2
  1445  000026                     ??_fillRect:
  1446                           
  1447                           ; 0 bytes @ 0x25
  1448  000026                     	ds	3
  1449  000029                     ??_printf:
  1450  000029                     fillRect@x:
  1451                           	opt stack 0
  1452                           
  1453                           ; 1 bytes @ 0x28
  1454  000029                     	ds	1
  1455  00002A                     fillRect@i:
  1456                           	opt stack 0
  1457                           
  1458                           ; 2 bytes @ 0x29
  1459  00002A                     	ds	2
  1460  00002C                     drawChar@y:
  1461                           	opt stack 0
  1462                           
  1463                           ; 1 bytes @ 0x2B
  1464  00002C                     	ds	1
  1465  00002D                     drawChar@c:
  1466                           	opt stack 0
  1467  00002D                     printf@idx:
  1468                           	opt stack 0
  1469                           
  1470                           ; 1 bytes @ 0x2C
  1471  00002D                     	ds	1
  1472  00002E                     drawChar@color:
  1473                           	opt stack 0
  1474  00002E                     printf@ap:
  1475                           	opt stack 0
  1476                           
  1477                           ; 2 bytes @ 0x2D
  1478  00002E                     	ds	2
  1479  000030                     printf@prec:
  1480                           	opt stack 0
  1481  000030                     drawChar@bg:
  1482                           	opt stack 0
  1483                           
  1484                           ; 2 bytes @ 0x2F
  1485  000030                     	ds	1
  1486  000031                     printf@val:
  1487                           	opt stack 0
  1488                           
  1489                           ; 2 bytes @ 0x30
  1490  000031                     	ds	1
  1491  000032                     drawChar@size:
  1492                           	opt stack 0
  1493                           
  1494                           ; 1 bytes @ 0x31
  1495  000032                     	ds	1
  1496  000033                     drawChar@line:
  1497                           	opt stack 0
  1498  000033                     printf@flag:
  1499                           	opt stack 0
  1500                           
  1501                           ; 1 bytes @ 0x32
  1502  000033                     	ds	1
  1503  000034                     drawChar@x:
  1504                           	opt stack 0
  1505  000034                     printf@width:
  1506                           	opt stack 0
  1507                           
  1508                           ; 2 bytes @ 0x33
  1509  000034                     	ds	1
  1510  000035                     drawChar@j:
  1511                           	opt stack 0
  1512                           
  1513                           ; 1 bytes @ 0x34
  1514  000035                     	ds	1
  1515  000036                     drawChar@i:
  1516                           	opt stack 0
  1517  000036                     printf@c:
  1518                           	opt stack 0
  1519                           
  1520                           ; 1 bytes @ 0x35
  1521  000036                     	ds	1
  1522  000037                     drawtext@y:
  1523                           	opt stack 0
  1524                           
  1525                           ; 1 bytes @ 0x36
  1526  000037                     	ds	1
  1527  000038                     drawtext@_text:
  1528                           	opt stack 0
  1529                           
  1530                           ; 2 bytes @ 0x37
  1531  000038                     	ds	2
  1532  00003A                     drawtext@color:
  1533                           	opt stack 0
  1534                           
  1535                           ; 2 bytes @ 0x39
  1536  00003A                     	ds	2
  1537  00003C                     drawtext@bg:
  1538                           	opt stack 0
  1539                           
  1540                           ; 2 bytes @ 0x3B
  1541  00003C                     	ds	2
  1542  00003E                     drawtext@size:
  1543                           	opt stack 0
  1544                           
  1545                           ; 1 bytes @ 0x3D
  1546  00003E                     	ds	1
  1547  00003F                     ??_drawtext:
  1548                           
  1549                           ; 0 bytes @ 0x3E
  1550  00003F                     	ds	2
  1551  000041                     main@tempF:
  1552                           	opt stack 0
  1553                           
  1554                           ; 1 bytes @ 0x40
  1555  000041                     	ds	1
  1556  000042                     main@tempC:
  1557                           	opt stack 0
  1558                           
  1559                           ; 1 bytes @ 0x41
  1560  000042                     	ds	1
  1561                           tblptru	equ	0xFF8
  1562                           tblptrh	equ	0xFF7
  1563                           tblptrl	equ	0xFF6
  1564                           tablat	equ	0xFF5
  1565                           postinc0	equ	0xFEE
  1566                           wreg	equ	0xFE8
  1567                           postdec1	equ	0xFE5
  1568                           fsr1l	equ	0xFE1
  1569                           
  1570 ;;
  1571 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1572 ;;
  1573 ;; *************** function _main *****************
  1574 ;; Defined at:
  1575 ;;		line 123 in file "Lab11p3.c"
  1576 ;; Parameters:    Size  Location     Type
  1577 ;;		None
  1578 ;; Auto vars:     Size  Location     Type
  1579 ;;  tempC           1   65[COMRAM] unsigned char 
  1580 ;;  tempF           1   64[COMRAM] unsigned char 
  1581 ;; Return value:  Size  Location     Type
  1582 ;;		None               void
  1583 ;; Registers used:
  1584 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1585 ;; Tracked objects:
  1586 ;;		On entry : 0/0
  1587 ;;		On exit  : 0/0
  1588 ;;		Unchanged: 0/0
  1589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1591 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1593 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1594 ;;Total ram usage:        2 bytes
  1595 ;; Hardware stack levels required when called:   10
  1596 ;; This function calls:
  1597 ;;		_DS1621_Read_Temp
  1598 ;;		_DS3231_Read_Time
  1599 ;;		_DS3231_Setup_Time
  1600 ;;		_Do_Init
  1601 ;;		___awdiv
  1602 ;;		_printf
  1603 ;; This function is called by:
  1604 ;;		Startup code after reset
  1605 ;; This function uses a non-reentrant model
  1606 ;;
  1607                           
  1608                           	psect	text0
  1609  00094A                     __ptext0:
  1610                           	opt stack 0
  1611  00094A                     _main:
  1612                           	opt stack 21
  1613                           
  1614                           ;Lab11p3.c: 125: Do_Init();
  1615                           
  1616                           ;incstack = 0
  1617  00094A  EC9C  F007         	call	_Do_Init	;wreg free
  1618                           
  1619                           ;Lab11p3.c: 126: DS3231_Setup_Time();
  1620  00094E  EC20  F006         	call	_DS3231_Setup_Time	;wreg free
  1621  000952  D000               	goto	l4416
  1622  000954                     l4416:
  1623                           
  1624                           ;Lab11p3.c: 137: {
  1625                           ;Lab11p3.c: 139: DS3231_Read_Time();
  1626  000954  EC53  F006         	call	_DS3231_Read_Time	;wreg free
  1627                           
  1628                           ;Lab11p3.c: 140: if(tempSecond != second)
  1629  000958  5061               	movf	_second,w,c
  1630  00095A  186C               	xorwf	_tempSecond,w,c
  1631  00095C  B4D8               	btfsc	status,2,c
  1632  00095E  D7FA               	goto	l4416
  1633                           
  1634                           ;Lab11p3.c: 141: {
  1635                           ;Lab11p3.c: 142: tempSecond = second;
  1636  000960  C061  F06C         	movff	_second,_tempSecond
  1637                           
  1638                           ;Lab11p3.c: 143: char tempC = DS1621_Read_Temp();
  1639  000964  EC39  F008         	call	_DS1621_Read_Temp	;wreg free
  1640  000968  5012               	movf	?_DS1621_Read_Temp,w,c
  1641  00096A  6E42               	movwf	main@tempC,c
  1642                           
  1643                           ;Lab11p3.c: 144: char tempF = (tempC * 9 / 5) + 32;
  1644  00096C  5042               	movf	main@tempC,w,c
  1645  00096E  0D09               	mullw	9
  1646  000970  CFF3 F00F          	movff	prodl,___awdiv@dividend
  1647  000974  CFF4 F010          	movff	prodh,___awdiv@dividend+1
  1648  000978  0E00               	movlw	0
  1649  00097A  6E12               	movwf	___awdiv@divisor+1,c
  1650  00097C  0E05               	movlw	5
  1651  00097E  6E11               	movwf	___awdiv@divisor,c
  1652  000980  EC5A  F004         	call	___awdiv	;wreg free
  1653  000984  500F               	movf	?___awdiv,w,c
  1654  000986  0F20               	addlw	32
  1655  000988  6E41               	movwf	main@tempF,c
  1656                           
  1657                           ;Lab11p3.c: 145: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,ye
      +                          ar);
  1658  00098A  0EB3               	movlw	low STR_1
  1659  00098C  6E1B               	movwf	printf@f,c
  1660  00098E  0EFF               	movlw	high STR_1
  1661  000990  6E1C               	movwf	printf@f+1,c
  1662  000992  C05C  F01D         	movff	_hour,?_printf+2
  1663  000996  6A1E               	clrf	?_printf+3,c
  1664  000998  C05E  F01F         	movff	_minute,?_printf+4
  1665  00099C  6A20               	clrf	?_printf+5,c
  1666  00099E  C061  F021         	movff	_second,?_printf+6
  1667  0009A2  6A22               	clrf	?_printf+7,c
  1668  0009A4  C05F  F023         	movff	_month,?_printf+8
  1669  0009A8  6A24               	clrf	?_printf+9,c
  1670  0009AA  C059  F025         	movff	_day,?_printf+10
  1671  0009AE  6A26               	clrf	?_printf+11,c
  1672  0009B0  C06B  F027         	movff	_year,?_printf+12
  1673  0009B4  6A28               	clrf	?_printf+13,c
  1674  0009B6  EC0E  F000         	call	_printf	;wreg free
  1675                           
  1676                           ;Lab11p3.c: 146: printf (" Temperature = %d degreesC = %d degreesF\r\n", tempC, tempF);
  1677  0009BA  0E88               	movlw	low STR_2
  1678  0009BC  6E1B               	movwf	printf@f,c
  1679  0009BE  0EFF               	movlw	high STR_2
  1680  0009C0  6E1C               	movwf	printf@f+1,c
  1681  0009C2  C042  F01D         	movff	main@tempC,?_printf+2
  1682  0009C6  6A1E               	clrf	?_printf+3,c
  1683  0009C8  C041  F01F         	movff	main@tempF,?_printf+4
  1684  0009CC  6A20               	clrf	?_printf+5,c
  1685  0009CE  EC0E  F000         	call	_printf	;wreg free
  1686  0009D2  D7C0               	goto	l4416
  1687  0009D4  EF0C  F000         	goto	start
  1688  0009D8                     __end_of_main:
  1689                           	opt stack 0
  1690                           tblptru	equ	0xFF8
  1691                           tblptrh	equ	0xFF7
  1692                           tblptrl	equ	0xFF6
  1693                           tablat	equ	0xFF5
  1694                           prodh	equ	0xFF4
  1695                           prodl	equ	0xFF3
  1696                           postinc0	equ	0xFEE
  1697                           wreg	equ	0xFE8
  1698                           postdec1	equ	0xFE5
  1699                           fsr1l	equ	0xFE1
  1700                           status	equ	0xFD8
  1701                           
  1702 ;; *************** function _printf *****************
  1703 ;; Defined at:
  1704 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1705 ;; Parameters:    Size  Location     Type
  1706 ;;  f               2   26[COMRAM] PTR const unsigned char 
  1707 ;;		 -> STR_2(43), STR_1(30), 
  1708 ;; Auto vars:     Size  Location     Type
  1709 ;;  idx             1   44[COMRAM] unsigned char 
  1710 ;;  tmpval          4    0        struct .
  1711 ;;  cp              3    0        PTR const unsigned char 
  1712 ;;  width           2   51[COMRAM] int 
  1713 ;;  val             2   48[COMRAM] unsigned int 
  1714 ;;  ap              2   45[COMRAM] PTR void [1]
  1715 ;;		 -> ?_printf(2), 
  1716 ;;  len             2    0        unsigned int 
  1717 ;;  c               1   53[COMRAM] char 
  1718 ;;  flag            1   50[COMRAM] unsigned char 
  1719 ;;  prec            1   47[COMRAM] char 
  1720 ;; Return value:  Size  Location     Type
  1721 ;;                  2   26[COMRAM] int 
  1722 ;; Registers used:
  1723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1724 ;; Tracked objects:
  1725 ;;		On entry : 0/0
  1726 ;;		On exit  : 0/0
  1727 ;;		Unchanged: 0/0
  1728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1729 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1730 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1731 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1732 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1733 ;;Total ram usage:       28 bytes
  1734 ;; Hardware stack levels used:    1
  1735 ;; Hardware stack levels required when called:    2
  1736 ;; This function calls:
  1737 ;;		___lwdiv
  1738 ;;		___lwmod
  1739 ;;		___wmul
  1740 ;;		_isdigit
  1741 ;;		_putch
  1742 ;; This function is called by:
  1743 ;;		_main
  1744 ;; This function uses a non-reentrant model
  1745 ;;
  1746                           
  1747                           	psect	text1
  1748  00001C                     __ptext1:
  1749                           	opt stack 0
  1750  00001C                     _printf:
  1751                           	opt stack 28
  1752                           
  1753                           ;doprnt.c: 466: va_list ap;
  1754                           ;doprnt.c: 499: signed char c;
  1755                           ;doprnt.c: 501: int width;
  1756                           ;doprnt.c: 506: signed char prec;
  1757                           ;doprnt.c: 508: unsigned char flag;
  1758                           ;doprnt.c: 523: union {
  1759                           ;doprnt.c: 524: unsigned long vd;
  1760                           ;doprnt.c: 525: double integ;
  1761                           ;doprnt.c: 526: } tmpval;
  1762                           ;doprnt.c: 528: unsigned int val;
  1763                           ;doprnt.c: 529: unsigned len;
  1764                           ;doprnt.c: 530: const char * cp;
  1765                           ;doprnt.c: 533: *ap = __va_start();
  1766                           
  1767                           ;incstack = 0
  1768  00001C  0E1D               	movlw	low (?_printf+2)
  1769  00001E  6E2E               	movwf	printf@ap,c
  1770  000020  0E00               	movlw	high (?_printf+2)
  1771  000022  6E2F               	movwf	printf@ap+1,c
  1772                           
  1773                           ;doprnt.c: 536: while(c = *f++) {
  1774  000024  D199               	goto	l4122
  1775  000026                     l3996:
  1776                           
  1777                           ;doprnt.c: 538: if(c != '%')
  1778  000026  0E25               	movlw	37
  1779  000028  1836               	xorwf	printf@c,w,c
  1780  00002A  B4D8               	btfsc	status,2,c
  1781  00002C  D004               	goto	l4000
  1782                           
  1783                           ;doprnt.c: 540: {
  1784                           ;doprnt.c: 541: (putch(c) );
  1785  00002E  5036               	movf	printf@c,w,c
  1786  000030  EC4F  F009         	call	_putch
  1787                           
  1788                           ;doprnt.c: 542: continue;
  1789  000034  D191               	goto	l4122
  1790  000036                     l4000:
  1791                           
  1792                           ;doprnt.c: 543: }
  1793                           ;doprnt.c: 546: width = 0;
  1794  000036  0E00               	movlw	0
  1795  000038  6E35               	movwf	printf@width+1,c
  1796  00003A  0E00               	movlw	0
  1797  00003C  6E34               	movwf	printf@width,c
  1798                           
  1799                           ;doprnt.c: 548: flag = 0;
  1800  00003E  0E00               	movlw	0
  1801  000040  6E33               	movwf	printf@flag,c
  1802                           
  1803                           ;doprnt.c: 551: switch(*f) {
  1804                           
  1805                           ;doprnt.c: 550: for(;;) {
  1806  000042  D005               	goto	l4006
  1807  000044                     l4002:
  1808                           
  1809                           ;doprnt.c: 580: flag |= 0x04;
  1810  000044  8433               	bsf	printf@flag,2,c
  1811                           
  1812                           ;doprnt.c: 581: f++;
  1813  000046  4A1B               	infsnz	printf@f,f,c
  1814  000048  2A1C               	incf	printf@f+1,f,c
  1815                           
  1816                           ;doprnt.c: 582: continue;
  1817  00004A  D001               	goto	l4006
  1818                           
  1819                           ;doprnt.c: 584: }
  1820  00004C  D00B               	goto	l4008
  1821  00004E                     l4006:
  1822  00004E  C01B  FFF6         	movff	printf@f,tblptrl
  1823  000052  C01C  FFF7         	movff	printf@f+1,tblptrh
  1824  000056                     	if	0	;tblptru may be non-zero
  1825  000056                     	endif
  1826  000056                     	if	0	;tblptru may be non-zero
  1827  000056                     	endif
  1828  000056  0008               	tblrd		*
  1829  000058  50F5               	movf	tablat,w,c
  1830                           
  1831                           ; Switch size 1, requested type "space"
  1832                           ; Number of cases is 1, Range of values is 48 to 48
  1833                           ; switch strategies available:
  1834                           ; Name         Instructions Cycles
  1835                           ; simple_byte            4     3 (average)
  1836                           ;	Chosen strategy is simple_byte
  1837  00005A  0A30               	xorlw	48	; case 48
  1838  00005C  B4D8               	btfsc	status,2,c
  1839  00005E  D7F2               	goto	l4002
  1840                           
  1841                           ;doprnt.c: 585: break;
  1842  000060  D001               	goto	l4008
  1843                           
  1844                           ;doprnt.c: 586: }
  1845  000062  D7F5               	goto	l4006
  1846  000064                     l4008:
  1847                           
  1848                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1849  000064  C01B  FFF6         	movff	printf@f,tblptrl
  1850  000068  C01C  FFF7         	movff	printf@f+1,tblptrh
  1851  00006C                     	if	0	;tblptru may be non-zero
  1852  00006C                     	endif
  1853  00006C                     	if	0	;tblptru may be non-zero
  1854  00006C                     	endif
  1855  00006C  0008               	tblrd		*
  1856  00006E  50F5               	movf	tablat,w,c
  1857  000070  ECB1  F008         	call	_isdigit
  1858  000074  A0D8               	btfss	status,0,c
  1859  000076  D03B               	goto	l4024
  1860                           
  1861                           ;doprnt.c: 598: width = 0;
  1862  000078  0E00               	movlw	0
  1863  00007A  6E35               	movwf	printf@width+1,c
  1864  00007C  0E00               	movlw	0
  1865  00007E  6E34               	movwf	printf@width,c
  1866  000080  D000               	goto	l4012
  1867  000082                     l4012:
  1868                           
  1869                           ;doprnt.c: 600: width *= 10;
  1870  000082  C034  F00F         	movff	printf@width,___wmul@multiplier
  1871  000086  C035  F010         	movff	printf@width+1,___wmul@multiplier+1
  1872  00008A  0E00               	movlw	0
  1873  00008C  6E12               	movwf	___wmul@multiplicand+1,c
  1874  00008E  0E0A               	movlw	10
  1875  000090  6E11               	movwf	___wmul@multiplicand,c
  1876  000092  EC9D  F008         	call	___wmul	;wreg free
  1877  000096  C00F  F034         	movff	?___wmul,printf@width
  1878  00009A  C010  F035         	movff	?___wmul+1,printf@width+1
  1879                           
  1880                           ;doprnt.c: 601: width += *f++ - '0';
  1881  00009E  0ED0               	movlw	208
  1882  0000A0  6E29               	movwf	??_printf& (0+255),c
  1883  0000A2  0EFF               	movlw	255
  1884  0000A4  6E2A               	movwf	(??_printf+1)& (0+255),c
  1885  0000A6  C01B  FFF6         	movff	printf@f,tblptrl
  1886  0000AA  C01C  FFF7         	movff	printf@f+1,tblptrh
  1887  0000AE                     	if	0	;tblptru may be non-zero
  1888  0000AE                     	endif
  1889  0000AE                     	if	0	;tblptru may be non-zero
  1890  0000AE                     	endif
  1891  0000AE  0008               	tblrd		*
  1892  0000B0  50F5               	movf	tablat,w,c
  1893  0000B2  6E2B               	movwf	(??_printf+2)& (0+255),c
  1894  0000B4  6A2C               	clrf	(??_printf+3)& (0+255),c
  1895  0000B6  5029               	movf	??_printf,w,c
  1896  0000B8  262B               	addwf	??_printf+2,f,c
  1897  0000BA  502A               	movf	??_printf+1,w,c
  1898  0000BC  222C               	addwfc	??_printf+3,f,c
  1899  0000BE  502B               	movf	??_printf+2,w,c
  1900  0000C0  2634               	addwf	printf@width,f,c
  1901  0000C2  502C               	movf	??_printf+3,w,c
  1902  0000C4  2235               	addwfc	printf@width+1,f,c
  1903  0000C6  4A1B               	infsnz	printf@f,f,c
  1904  0000C8  2A1C               	incf	printf@f+1,f,c
  1905                           
  1906                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1907  0000CA  C01B  FFF6         	movff	printf@f,tblptrl
  1908  0000CE  C01C  FFF7         	movff	printf@f+1,tblptrh
  1909  0000D2                     	if	0	;tblptru may be non-zero
  1910  0000D2                     	endif
  1911  0000D2                     	if	0	;tblptru may be non-zero
  1912  0000D2                     	endif
  1913  0000D2  0008               	tblrd		*
  1914  0000D4  50F5               	movf	tablat,w,c
  1915  0000D6  ECB1  F008         	call	_isdigit
  1916  0000DA  A0D8               	btfss	status,0,c
  1917  0000DC  D008               	goto	l4024
  1918  0000DE  D7D1               	goto	l4012
  1919                           
  1920                           ;doprnt.c: 608: }
  1921                           ;doprnt.c: 635: switch(c = *f++) {
  1922  0000E0  D006               	goto	l4024
  1923                           
  1924                           ;doprnt.c: 638: goto alldone;
  1925                           
  1926                           ;doprnt.c: 637: case 0:
  1927  0000E2  D148               	goto	l560
  1928                           
  1929                           ;doprnt.c: 698: case 'i':
  1930                           ;doprnt.c: 699: break;
  1931                           
  1932                           ;doprnt.c: 697: case 'd':
  1933  0000E4  D01B               	goto	l523
  1934  0000E6                     l4020:
  1935                           
  1936                           ;doprnt.c: 721: flag |= 0x80;
  1937  0000E6  8E33               	bsf	printf@flag,7,c
  1938                           
  1939                           ;doprnt.c: 723: break;
  1940  0000E8  D019               	goto	l523
  1941                           
  1942                           ;doprnt.c: 813: continue;
  1943                           
  1944                           ;doprnt.c: 802: default:
  1945  0000EA  D136               	goto	l4122
  1946                           
  1947                           ;doprnt.c: 822: }
  1948  0000EC  D017               	goto	l523
  1949  0000EE                     l4024:
  1950  0000EE  C01B  FFF6         	movff	printf@f,tblptrl
  1951  0000F2  C01C  FFF7         	movff	printf@f+1,tblptrh
  1952  0000F6  4A1B               	infsnz	printf@f,f,c
  1953  0000F8  2A1C               	incf	printf@f+1,f,c
  1954  0000FA                     	if	0	;tblptru may be non-zero
  1955  0000FA                     	endif
  1956  0000FA                     	if	0	;tblptru may be non-zero
  1957  0000FA                     	endif
  1958  0000FA  0008               	tblrd		*
  1959  0000FC  CFF5 F036          	movff	tablat,printf@c
  1960  000100  5036               	movf	printf@c,w,c
  1961                           
  1962                           ; Switch size 1, requested type "space"
  1963                           ; Number of cases is 4, Range of values is 0 to 120
  1964                           ; switch strategies available:
  1965                           ; Name         Instructions Cycles
  1966                           ; simple_byte           13     7 (average)
  1967                           ;	Chosen strategy is simple_byte
  1968  000102  0A00               	xorlw	0	; case 0
  1969  000104  B4D8               	btfsc	status,2,c
  1970  000106  D136               	goto	l560
  1971  000108  0A64               	xorlw	100	; case 100
  1972  00010A  B4D8               	btfsc	status,2,c
  1973  00010C  D007               	goto	l523
  1974  00010E  0A0D               	xorlw	13	; case 105
  1975  000110  B4D8               	btfsc	status,2,c
  1976  000112  D004               	goto	l523
  1977  000114  0A11               	xorlw	17	; case 120
  1978  000116  B4D8               	btfsc	status,2,c
  1979  000118  D7E6               	goto	l4020
  1980  00011A  D11E               	goto	l4122
  1981  00011C                     l523:
  1982                           
  1983                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  1984  00011C  BE33               	btfsc	printf@flag,7,c
  1985  00011E  D015               	goto	l4036
  1986                           
  1987                           ;doprnt.c: 1253: {
  1988                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1989  000120  C02E  FFD9         	movff	printf@ap,fsr2l
  1990  000124  C02F  FFDA         	movff	printf@ap+1,fsr2h
  1991  000128  CFDE F031          	movff	postinc2,printf@val
  1992  00012C  CFDD F032          	movff	postdec2,printf@val+1
  1993  000130  0E02               	movlw	2
  1994  000132  262E               	addwf	printf@ap,f,c
  1995  000134  0E00               	movlw	0
  1996  000136  222F               	addwfc	printf@ap+1,f,c
  1997                           
  1998                           ;doprnt.c: 1261: if((int)val < 0) {
  1999  000138  AE32               	btfss	printf@val+1,7,c
  2000  00013A  D04E               	goto	l4070
  2001                           
  2002                           ;doprnt.c: 1262: flag |= 0x03;
  2003  00013C  0E03               	movlw	3
  2004  00013E  1233               	iorwf	printf@flag,f,c
  2005                           
  2006                           ;doprnt.c: 1263: val = -val;
  2007  000140  6C31               	negf	printf@val,c
  2008  000142  1E32               	comf	printf@val+1,f,c
  2009  000144  B0D8               	btfsc	status,0,c
  2010  000146  2A32               	incf	printf@val+1,f,c
  2011                           
  2012                           ;doprnt.c: 1264: }
  2013                           ;doprnt.c: 1266: }
  2014  000148  D047               	goto	l4070
  2015  00014A                     l4036:
  2016                           
  2017                           ;doprnt.c: 1268: else
  2018                           ;doprnt.c: 1273: {
  2019                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2020  00014A  C02E  FFD9         	movff	printf@ap,fsr2l
  2021  00014E  C02F  FFDA         	movff	printf@ap+1,fsr2h
  2022  000152  CFDE F031          	movff	postinc2,printf@val
  2023  000156  CFDD F032          	movff	postdec2,printf@val+1
  2024  00015A  0E02               	movlw	2
  2025  00015C  262E               	addwf	printf@ap,f,c
  2026  00015E  0E00               	movlw	0
  2027  000160  222F               	addwfc	printf@ap+1,f,c
  2028                           
  2029                           ;doprnt.c: 1287: }
  2030                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2031  000162  D03A               	goto	l4070
  2032  000164                     l4040:
  2033                           
  2034                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2035  000164  0E01               	movlw	1
  2036  000166  6E36               	movwf	printf@c,c
  2037  000168                     l4042:
  2038  000168  0E05               	movlw	5
  2039  00016A  1836               	xorwf	printf@c,w,c
  2040  00016C  B4D8               	btfsc	status,2,c
  2041  00016E  D03D               	goto	l4072
  2042  000170  D001               	goto	l4046
  2043  000172  D03B               	goto	l4072
  2044  000174                     l4046:
  2045                           
  2046                           ;doprnt.c: 1306: if(val < dpowers[c])
  2047  000174  5036               	movf	printf@c,w,c
  2048  000176  0D02               	mullw	2
  2049  000178  0E76               	movlw	low _dpowers
  2050  00017A  24F3               	addwf	prodl,w,c
  2051  00017C  6EF6               	movwf	tblptrl,c
  2052  00017E  0EFF               	movlw	high _dpowers
  2053  000180  20F4               	addwfc	prodh,w,c
  2054  000182  6EF7               	movwf	tblptrh,c
  2055  000184                     	if	0	;There are less than 3 active tblptr bytes
  2056  000184                     	endif
  2057  000184  0009               	tblrd		*+
  2058  000186  50F5               	movf	tablat,w,c
  2059  000188  5C31               	subwf	printf@val,w,c
  2060  00018A  0009               	tblrd		*+
  2061  00018C  50F5               	movf	tablat,w,c
  2062  00018E  5832               	subwfb	printf@val+1,w,c
  2063  000190  A0D8               	btfss	status,0,c
  2064  000192  D02B               	goto	l4072
  2065  000194  D001               	goto	l4050
  2066                           
  2067                           ;doprnt.c: 1307: break;
  2068  000196  D029               	goto	l4072
  2069  000198                     l4050:
  2070  000198  2A36               	incf	printf@c,f,c
  2071  00019A  D7E6               	goto	l4042
  2072                           
  2073                           ;doprnt.c: 1309: break;
  2074  00019C  D026               	goto	l4072
  2075  00019E                     l4054:
  2076                           
  2077                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2078  00019E  0E01               	movlw	1
  2079  0001A0  6E36               	movwf	printf@c,c
  2080  0001A2                     l4056:
  2081  0001A2  0E04               	movlw	4
  2082  0001A4  1836               	xorwf	printf@c,w,c
  2083  0001A6  B4D8               	btfsc	status,2,c
  2084  0001A8  D020               	goto	l4072
  2085  0001AA  D001               	goto	l4060
  2086  0001AC  D01E               	goto	l4072
  2087  0001AE                     l4060:
  2088                           
  2089                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2090  0001AE  5036               	movf	printf@c,w,c
  2091  0001B0  0D02               	mullw	2
  2092  0001B2  0E80               	movlw	low _hexpowers
  2093  0001B4  24F3               	addwf	prodl,w,c
  2094  0001B6  6EF6               	movwf	tblptrl,c
  2095  0001B8  0EFF               	movlw	high _hexpowers
  2096  0001BA  20F4               	addwfc	prodh,w,c
  2097  0001BC  6EF7               	movwf	tblptrh,c
  2098  0001BE                     	if	0	;There are less than 3 active tblptr bytes
  2099  0001BE                     	endif
  2100  0001BE  0009               	tblrd		*+
  2101  0001C0  50F5               	movf	tablat,w,c
  2102  0001C2  5C31               	subwf	printf@val,w,c
  2103  0001C4  0009               	tblrd		*+
  2104  0001C6  50F5               	movf	tablat,w,c
  2105  0001C8  5832               	subwfb	printf@val+1,w,c
  2106  0001CA  A0D8               	btfss	status,0,c
  2107  0001CC  D00E               	goto	l4072
  2108  0001CE  D001               	goto	l4064
  2109                           
  2110                           ;doprnt.c: 1318: break;
  2111  0001D0  D00C               	goto	l4072
  2112  0001D2                     l4064:
  2113  0001D2  2A36               	incf	printf@c,f,c
  2114  0001D4  D7E6               	goto	l4056
  2115                           
  2116                           ;doprnt.c: 1336: }
  2117                           
  2118                           ;doprnt.c: 1320: break;
  2119  0001D6  D009               	goto	l4072
  2120  0001D8                     l4070:
  2121  0001D8  5033               	movf	printf@flag,w,c
  2122  0001DA  0B80               	andlw	128
  2123                           
  2124                           ; Switch size 1, requested type "space"
  2125                           ; Number of cases is 2, Range of values is 0 to 128
  2126                           ; switch strategies available:
  2127                           ; Name         Instructions Cycles
  2128                           ; simple_byte            7     4 (average)
  2129                           ;	Chosen strategy is simple_byte
  2130  0001DC  0A00               	xorlw	0	; case 0
  2131  0001DE  B4D8               	btfsc	status,2,c
  2132  0001E0  D7C1               	goto	l4040
  2133  0001E2  0A80               	xorlw	128	; case 128
  2134  0001E4  B4D8               	btfsc	status,2,c
  2135  0001E6  D7DB               	goto	l4054
  2136  0001E8  D000               	goto	l4072
  2137  0001EA                     l4072:
  2138                           
  2139                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2140  0001EA  5034               	movf	printf@width,w,c
  2141  0001EC  1035               	iorwf	printf@width+1,w,c
  2142  0001EE  B4D8               	btfsc	status,2,c
  2143  0001F0  D00A               	goto	l4078
  2144  0001F2  C033  F029         	movff	printf@flag,??_printf
  2145  0001F6  0E03               	movlw	3
  2146  0001F8  1629               	andwf	??_printf,f,c
  2147  0001FA  B4D8               	btfsc	status,2,c
  2148  0001FC  D004               	goto	l4078
  2149                           
  2150                           ;doprnt.c: 1346: width--;
  2151  0001FE  0634               	decf	printf@width,f,c
  2152  000200  A0D8               	btfss	status,0,c
  2153  000202  0635               	decf	printf@width+1,f,c
  2154  000204  D000               	goto	l4078
  2155  000206                     l4078:
  2156                           
  2157                           ;doprnt.c: 1381: if(width > c)
  2158  000206  0E80               	movlw	128
  2159  000208  BE36               	btfsc	printf@c,7,c
  2160  00020A  0E7F               	movlw	127
  2161  00020C  6E29               	movwf	??_printf& (0+255),c
  2162  00020E  5034               	movf	printf@width,w,c
  2163  000210  5C36               	subwf	printf@c,w,c
  2164  000212  5035               	movf	printf@width+1,w,c
  2165  000214  0A80               	xorlw	128
  2166  000216  5829               	subwfb	??_printf& (0+255),w,c
  2167  000218  B0D8               	btfsc	status,0,c
  2168  00021A  D007               	goto	l4082
  2169                           
  2170                           ;doprnt.c: 1382: width -= c;
  2171  00021C  5036               	movf	printf@c,w,c
  2172  00021E  5E34               	subwf	printf@width,f,c
  2173  000220  0E00               	movlw	0
  2174  000222  BE36               	btfsc	printf@c,7,c
  2175  000224  0EFF               	movlw	255
  2176  000226  5A35               	subwfb	printf@width+1,f,c
  2177  000228  D005               	goto	l4084
  2178  00022A                     l4082:
  2179                           
  2180                           ;doprnt.c: 1383: else
  2181                           ;doprnt.c: 1384: width = 0;
  2182  00022A  0E00               	movlw	0
  2183  00022C  6E35               	movwf	printf@width+1,c
  2184  00022E  0E00               	movlw	0
  2185  000230  6E34               	movwf	printf@width,c
  2186  000232  D000               	goto	l4084
  2187  000234                     l4084:
  2188                           
  2189                           ;doprnt.c: 1387: if(flag & 0x04) {
  2190  000234  A433               	btfss	printf@flag,2,c
  2191  000236  D01A               	goto	l4096
  2192                           
  2193                           ;doprnt.c: 1392: if(flag & 0x03)
  2194  000238  C033  F029         	movff	printf@flag,??_printf
  2195  00023C  0E03               	movlw	3
  2196  00023E  1629               	andwf	??_printf,f,c
  2197  000240  B4D8               	btfsc	status,2,c
  2198  000242  D004               	goto	l4090
  2199                           
  2200                           ;doprnt.c: 1393: (putch('-') );
  2201  000244  0E2D               	movlw	45
  2202  000246  EC4F  F009         	call	_putch
  2203  00024A  D000               	goto	l4090
  2204  00024C                     l4090:
  2205                           
  2206                           ;doprnt.c: 1415: if(width)
  2207  00024C  5034               	movf	printf@width,w,c
  2208  00024E  1035               	iorwf	printf@width+1,w,c
  2209  000250  B4D8               	btfsc	status,2,c
  2210  000252  D026               	goto	l4106
  2211  000254                     l4092:
  2212                           
  2213                           ;doprnt.c: 1417: (putch('0') );
  2214  000254  0E30               	movlw	48
  2215  000256  EC4F  F009         	call	_putch
  2216                           
  2217                           ;doprnt.c: 1418: while(--width);
  2218  00025A  0634               	decf	printf@width,f,c
  2219  00025C  A0D8               	btfss	status,0,c
  2220  00025E  0635               	decf	printf@width+1,f,c
  2221  000260  5034               	movf	printf@width,w,c
  2222  000262  1035               	iorwf	printf@width+1,w,c
  2223  000264  B4D8               	btfsc	status,2,c
  2224  000266  D01C               	goto	l4106
  2225  000268  D7F5               	goto	l4092
  2226                           
  2227                           ;doprnt.c: 1420: } else
  2228  00026A  D01A               	goto	l4106
  2229  00026C                     l4096:
  2230                           
  2231                           ;doprnt.c: 1422: {
  2232                           ;doprnt.c: 1424: if(width
  2233                           ;doprnt.c: 1428: )
  2234  00026C  5034               	movf	printf@width,w,c
  2235  00026E  1035               	iorwf	printf@width+1,w,c
  2236  000270  B4D8               	btfsc	status,2,c
  2237  000272  D00C               	goto	l4102
  2238  000274                     l4098:
  2239                           
  2240                           ;doprnt.c: 1430: (putch(' ') );
  2241  000274  0E20               	movlw	32
  2242  000276  EC4F  F009         	call	_putch
  2243                           
  2244                           ;doprnt.c: 1431: while(--width);
  2245  00027A  0634               	decf	printf@width,f,c
  2246  00027C  A0D8               	btfss	status,0,c
  2247  00027E  0635               	decf	printf@width+1,f,c
  2248  000280  5034               	movf	printf@width,w,c
  2249  000282  1035               	iorwf	printf@width+1,w,c
  2250  000284  B4D8               	btfsc	status,2,c
  2251  000286  D002               	goto	l4102
  2252  000288  D7F5               	goto	l4098
  2253  00028A  D000               	goto	l4102
  2254  00028C                     l4102:
  2255                           
  2256                           ;doprnt.c: 1438: if(flag & 0x03)
  2257  00028C  C033  F029         	movff	printf@flag,??_printf
  2258  000290  0E03               	movlw	3
  2259  000292  1629               	andwf	??_printf,f,c
  2260  000294  B4D8               	btfsc	status,2,c
  2261  000296  D004               	goto	l4106
  2262                           
  2263                           ;doprnt.c: 1439: (putch('-') );
  2264  000298  0E2D               	movlw	45
  2265  00029A  EC4F  F009         	call	_putch
  2266  00029E  D000               	goto	l4106
  2267  0002A0                     l4106:
  2268                           
  2269                           ;doprnt.c: 1469: }
  2270                           ;doprnt.c: 1472: prec = c;
  2271  0002A0  C036  F030         	movff	printf@c,printf@prec
  2272                           
  2273                           ;doprnt.c: 1474: while(prec--) {
  2274  0002A4  D053               	goto	l4120
  2275                           
  2276                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  2277  0002A6  D045               	goto	l4116
  2278  0002A8                     l4108:
  2279                           
  2280                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2281  0002A8  5030               	movf	printf@prec,w,c
  2282  0002AA  0D02               	mullw	2
  2283  0002AC  0E76               	movlw	low _dpowers
  2284  0002AE  24F3               	addwf	prodl,w,c
  2285  0002B0  6EF6               	movwf	tblptrl,c
  2286  0002B2  0EFF               	movlw	high _dpowers
  2287  0002B4  20F4               	addwfc	prodh,w,c
  2288  0002B6  6EF7               	movwf	tblptrh,c
  2289  0002B8                     	if	0	;There are less than 3 active tblptr bytes
  2290  0002B8                     	endif
  2291  0002B8  0009               	tblrd		*+
  2292  0002BA  CFF5 F011          	movff	tablat,___lwdiv@divisor
  2293  0002BE  000A               	tblrd		*-
  2294  0002C0  CFF5 F012          	movff	tablat,___lwdiv@divisor+1
  2295  0002C4  C031  F00F         	movff	printf@val,___lwdiv@dividend
  2296  0002C8  C032  F010         	movff	printf@val+1,___lwdiv@dividend+1
  2297  0002CC  EC85  F006         	call	___lwdiv	;wreg free
  2298  0002D0  C00F  F016         	movff	?___lwdiv,___lwmod@dividend
  2299  0002D4  C010  F017         	movff	?___lwdiv+1,___lwmod@dividend+1
  2300  0002D8  0E00               	movlw	0
  2301  0002DA  6E19               	movwf	___lwmod@divisor+1,c
  2302  0002DC  0E0A               	movlw	10
  2303  0002DE  6E18               	movwf	___lwmod@divisor,c
  2304  0002E0  EC2D  F007         	call	___lwmod	;wreg free
  2305  0002E4  5016               	movf	?___lwmod,w,c
  2306  0002E6  0F30               	addlw	48
  2307  0002E8  6E36               	movwf	printf@c,c
  2308                           
  2309                           ;doprnt.c: 1491: break;
  2310  0002EA  D02C               	goto	l4118
  2311  0002EC                     l4110:
  2312                           
  2313                           ;doprnt.c: 1499: {
  2314                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2315  0002EC  C031  F00F         	movff	printf@val,___lwdiv@dividend
  2316  0002F0  C032  F010         	movff	printf@val+1,___lwdiv@dividend+1
  2317  0002F4  5030               	movf	printf@prec,w,c
  2318  0002F6  0D02               	mullw	2
  2319  0002F8  0E80               	movlw	low _hexpowers
  2320  0002FA  24F3               	addwf	prodl,w,c
  2321  0002FC  6EF6               	movwf	tblptrl,c
  2322  0002FE  0EFF               	movlw	high _hexpowers
  2323  000300  20F4               	addwfc	prodh,w,c
  2324  000302  6EF7               	movwf	tblptrh,c
  2325  000304                     	if	0	;There are less than 3 active tblptr bytes
  2326  000304                     	endif
  2327  000304  0009               	tblrd		*+
  2328  000306  CFF5 F011          	movff	tablat,___lwdiv@divisor
  2329  00030A  000A               	tblrd		*-
  2330  00030C  CFF5 F012          	movff	tablat,___lwdiv@divisor+1
  2331  000310  EC85  F006         	call	___lwdiv	;wreg free
  2332  000314  500F               	movf	?___lwdiv,w,c
  2333  000316  0B0F               	andlw	15
  2334  000318  6E2D               	movwf	printf@idx,c
  2335                           
  2336                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2337  00031A  502D               	movf	printf@idx,w,c
  2338  00031C  0D01               	mullw	1
  2339  00031E  0EE5               	movlw	low STR_5
  2340  000320  24F3               	addwf	prodl,w,c
  2341  000322  6EF6               	movwf	tblptrl,c
  2342  000324  0EFF               	movlw	high STR_5
  2343  000326  20F4               	addwfc	prodh,w,c
  2344  000328  6EF7               	movwf	tblptrh,c
  2345  00032A                     	if	0	;There are less than 3 active tblptr bytes
  2346  00032A                     	endif
  2347  00032A  0008               	tblrd		*
  2348  00032C  CFF5 F036          	movff	tablat,printf@c
  2349                           
  2350                           ;doprnt.c: 1523: }
  2351                           
  2352                           ;doprnt.c: 1508: }
  2353                           ;doprnt.c: 1510: break;
  2354  000330  D009               	goto	l4118
  2355  000332                     l4116:
  2356  000332  5033               	movf	printf@flag,w,c
  2357  000334  0B80               	andlw	128
  2358                           
  2359                           ; Switch size 1, requested type "space"
  2360                           ; Number of cases is 2, Range of values is 0 to 128
  2361                           ; switch strategies available:
  2362                           ; Name         Instructions Cycles
  2363                           ; simple_byte            7     4 (average)
  2364                           ;	Chosen strategy is simple_byte
  2365  000336  0A00               	xorlw	0	; case 0
  2366  000338  B4D8               	btfsc	status,2,c
  2367  00033A  D7B6               	goto	l4108
  2368  00033C  0A80               	xorlw	128	; case 128
  2369  00033E  B4D8               	btfsc	status,2,c
  2370  000340  D7D5               	goto	l4110
  2371  000342  D000               	goto	l4118
  2372  000344                     l4118:
  2373                           
  2374                           ;doprnt.c: 1524: (putch(c) );
  2375  000344  5036               	movf	printf@c,w,c
  2376  000346  EC4F  F009         	call	_putch
  2377  00034A  D000               	goto	l4120
  2378  00034C                     l4120:
  2379  00034C  0630               	decf	printf@prec,f,c
  2380  00034E  2830               	incf	printf@prec,w,c
  2381  000350  B4D8               	btfsc	status,2,c
  2382  000352  D002               	goto	l4122
  2383  000354  D7EE               	goto	l4116
  2384  000356  D000               	goto	l4122
  2385  000358                     l4122:
  2386  000358  C01B  FFF6         	movff	printf@f,tblptrl
  2387  00035C  C01C  FFF7         	movff	printf@f+1,tblptrh
  2388  000360  4A1B               	infsnz	printf@f,f,c
  2389  000362  2A1C               	incf	printf@f+1,f,c
  2390  000364                     	if	0	;tblptru may be non-zero
  2391  000364                     	endif
  2392  000364                     	if	0	;tblptru may be non-zero
  2393  000364                     	endif
  2394  000364  0008               	tblrd		*
  2395  000366  CFF5 F036          	movff	tablat,printf@c
  2396  00036A  5036               	movf	printf@c,w,c
  2397  00036C  B4D8               	btfsc	status,2,c
  2398  00036E  D002               	goto	l560
  2399  000370  D65A               	goto	l3996
  2400  000372  D000               	goto	l560
  2401  000374                     l560:
  2402  000374  0012               	return		;funcret
  2403  000376                     __end_of_printf:
  2404                           	opt stack 0
  2405                           tblptru	equ	0xFF8
  2406                           tblptrh	equ	0xFF7
  2407                           tblptrl	equ	0xFF6
  2408                           tablat	equ	0xFF5
  2409                           prodh	equ	0xFF4
  2410                           prodl	equ	0xFF3
  2411                           postinc0	equ	0xFEE
  2412                           wreg	equ	0xFE8
  2413                           postdec1	equ	0xFE5
  2414                           fsr1l	equ	0xFE1
  2415                           postinc2	equ	0xFDE
  2416                           postdec2	equ	0xFDD
  2417                           fsr2h	equ	0xFDA
  2418                           fsr2l	equ	0xFD9
  2419                           status	equ	0xFD8
  2420                           
  2421 ;; *************** function _putch *****************
  2422 ;; Defined at:
  2423 ;;		line 82 in file "Lab11p3.c"
  2424 ;; Parameters:    Size  Location     Type
  2425 ;;  c               1    wreg     unsigned char 
  2426 ;; Auto vars:     Size  Location     Type
  2427 ;;  c               1   14[COMRAM] unsigned char 
  2428 ;; Return value:  Size  Location     Type
  2429 ;;		None               void
  2430 ;; Registers used:
  2431 ;;		wreg
  2432 ;; Tracked objects:
  2433 ;;		On entry : 0/0
  2434 ;;		On exit  : 0/0
  2435 ;;		Unchanged: 0/0
  2436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2438 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2440 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2441 ;;Total ram usage:        1 bytes
  2442 ;; Hardware stack levels used:    1
  2443 ;; Hardware stack levels required when called:    1
  2444 ;; This function calls:
  2445 ;;		Nothing
  2446 ;; This function is called by:
  2447 ;;		_printf
  2448 ;; This function uses a non-reentrant model
  2449 ;;
  2450                           
  2451                           	psect	text2
  2452  00129E                     __ptext2:
  2453                           	opt stack 0
  2454  00129E                     _putch:
  2455                           	opt stack 28
  2456                           
  2457                           ;incstack = 0
  2458                           ;putch@c stored from wreg
  2459  00129E  6E0F               	movwf	putch@c,c
  2460                           
  2461                           ;Lab11p3.c: 84: while (!TRMT);
  2462  0012A0  D000               	goto	l461
  2463  0012A2                     l461:
  2464  0012A2  A2AC               	btfss	4012,1,c	;volatile
  2465  0012A4  D7FE               	goto	l461
  2466                           
  2467                           ;Lab11p3.c: 85: TXREG = c;
  2468  0012A6  C00F  FFAD         	movff	putch@c,4013	;volatile
  2469  0012AA  0012               	return		;funcret
  2470  0012AC                     __end_of_putch:
  2471                           	opt stack 0
  2472                           tblptru	equ	0xFF8
  2473                           tblptrh	equ	0xFF7
  2474                           tblptrl	equ	0xFF6
  2475                           tablat	equ	0xFF5
  2476                           prodh	equ	0xFF4
  2477                           prodl	equ	0xFF3
  2478                           postinc0	equ	0xFEE
  2479                           wreg	equ	0xFE8
  2480                           postdec1	equ	0xFE5
  2481                           fsr1l	equ	0xFE1
  2482                           postinc2	equ	0xFDE
  2483                           postdec2	equ	0xFDD
  2484                           fsr2h	equ	0xFDA
  2485                           fsr2l	equ	0xFD9
  2486                           status	equ	0xFD8
  2487                           
  2488 ;; *************** function _isdigit *****************
  2489 ;; Defined at:
  2490 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2491 ;; Parameters:    Size  Location     Type
  2492 ;;  c               1    wreg     unsigned char 
  2493 ;; Auto vars:     Size  Location     Type
  2494 ;;  c               1   16[COMRAM] unsigned char 
  2495 ;; Return value:  Size  Location     Type
  2496 ;;		None               void
  2497 ;; Registers used:
  2498 ;;		wreg, status,2, status,0
  2499 ;; Tracked objects:
  2500 ;;		On entry : 0/0
  2501 ;;		On exit  : 0/0
  2502 ;;		Unchanged: 0/0
  2503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2505 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2506 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2507 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2508 ;;Total ram usage:        3 bytes
  2509 ;; Hardware stack levels used:    1
  2510 ;; Hardware stack levels required when called:    1
  2511 ;; This function calls:
  2512 ;;		Nothing
  2513 ;; This function is called by:
  2514 ;;		_printf
  2515 ;; This function uses a non-reentrant model
  2516 ;;
  2517                           
  2518                           	psect	text3
  2519  001162                     __ptext3:
  2520                           	opt stack 0
  2521  001162                     _isdigit:
  2522                           	opt stack 28
  2523                           
  2524                           ;incstack = 0
  2525                           ;isdigit@c stored from wreg
  2526  001162  6E11               	movwf	isdigit@c,c
  2527  001164  0E00               	movlw	0
  2528  001166  6E10               	movwf	_isdigit$1510,c
  2529  001168  0E3A               	movlw	58
  2530  00116A  6011               	cpfslt	isdigit@c,c
  2531  00116C  D006               	goto	l2932
  2532  00116E  0E2F               	movlw	47
  2533  001170  6411               	cpfsgt	isdigit@c,c
  2534  001172  D003               	goto	l2932
  2535  001174  0E01               	movlw	1
  2536  001176  6E10               	movwf	_isdigit$1510,c
  2537  001178  D000               	goto	l2932
  2538  00117A                     l2932:
  2539  00117A  C010  F00F         	movff	_isdigit$1510,??_isdigit
  2540  00117E  300F               	rrcf	??_isdigit,w,c
  2541  001180  D000               	goto	l1027
  2542  001182                     l1027:
  2543  001182  0012               	return		;funcret
  2544  001184                     __end_of_isdigit:
  2545                           	opt stack 0
  2546                           tblptru	equ	0xFF8
  2547                           tblptrh	equ	0xFF7
  2548                           tblptrl	equ	0xFF6
  2549                           tablat	equ	0xFF5
  2550                           prodh	equ	0xFF4
  2551                           prodl	equ	0xFF3
  2552                           postinc0	equ	0xFEE
  2553                           wreg	equ	0xFE8
  2554                           postdec1	equ	0xFE5
  2555                           fsr1l	equ	0xFE1
  2556                           postinc2	equ	0xFDE
  2557                           postdec2	equ	0xFDD
  2558                           fsr2h	equ	0xFDA
  2559                           fsr2l	equ	0xFD9
  2560                           status	equ	0xFD8
  2561                           
  2562 ;; *************** function ___lwmod *****************
  2563 ;; Defined at:
  2564 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  2565 ;; Parameters:    Size  Location     Type
  2566 ;;  dividend        2   21[COMRAM] unsigned int 
  2567 ;;  divisor         2   23[COMRAM] unsigned int 
  2568 ;; Auto vars:     Size  Location     Type
  2569 ;;  counter         1   25[COMRAM] unsigned char 
  2570 ;; Return value:  Size  Location     Type
  2571 ;;                  2   21[COMRAM] unsigned int 
  2572 ;; Registers used:
  2573 ;;		wreg, status,2, status,0
  2574 ;; Tracked objects:
  2575 ;;		On entry : 0/0
  2576 ;;		On exit  : 0/0
  2577 ;;		Unchanged: 0/0
  2578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2579 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2580 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2582 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2583 ;;Total ram usage:        5 bytes
  2584 ;; Hardware stack levels used:    1
  2585 ;; Hardware stack levels required when called:    1
  2586 ;; This function calls:
  2587 ;;		Nothing
  2588 ;; This function is called by:
  2589 ;;		_printf
  2590 ;; This function uses a non-reentrant model
  2591 ;;
  2592                           
  2593                           	psect	text4
  2594  000E5A                     __ptext4:
  2595                           	opt stack 0
  2596  000E5A                     ___lwmod:
  2597                           	opt stack 28
  2598                           
  2599                           ;incstack = 0
  2600  000E5A  5018               	movf	___lwmod@divisor,w,c
  2601  000E5C  1019               	iorwf	___lwmod@divisor+1,w,c
  2602  000E5E  B4D8               	btfsc	status,2,c
  2603  000E60  D01D               	goto	l1129
  2604  000E62  0E01               	movlw	1
  2605  000E64  6E1A               	movwf	___lwmod@counter,c
  2606  000E66  D005               	goto	l2964
  2607  000E68                     l2962:
  2608  000E68  90D8               	bcf	status,0,c
  2609  000E6A  3618               	rlcf	___lwmod@divisor,f,c
  2610  000E6C  3619               	rlcf	___lwmod@divisor+1,f,c
  2611  000E6E  2A1A               	incf	___lwmod@counter,f,c
  2612  000E70  D000               	goto	l2964
  2613  000E72                     l2964:
  2614  000E72  BE19               	btfsc	___lwmod@divisor+1,7,c
  2615  000E74  D002               	goto	l2966
  2616  000E76  D7F8               	goto	l2962
  2617  000E78  D000               	goto	l2966
  2618  000E7A                     l2966:
  2619  000E7A  5018               	movf	___lwmod@divisor,w,c
  2620  000E7C  5C16               	subwf	___lwmod@dividend,w,c
  2621  000E7E  5019               	movf	___lwmod@divisor+1,w,c
  2622  000E80  5817               	subwfb	___lwmod@dividend+1,w,c
  2623  000E82  A0D8               	btfss	status,0,c
  2624  000E84  D005               	goto	l2970
  2625  000E86  5018               	movf	___lwmod@divisor,w,c
  2626  000E88  5E16               	subwf	___lwmod@dividend,f,c
  2627  000E8A  5019               	movf	___lwmod@divisor+1,w,c
  2628  000E8C  5A17               	subwfb	___lwmod@dividend+1,f,c
  2629  000E8E  D000               	goto	l2970
  2630  000E90                     l2970:
  2631  000E90  90D8               	bcf	status,0,c
  2632  000E92  3219               	rrcf	___lwmod@divisor+1,f,c
  2633  000E94  3218               	rrcf	___lwmod@divisor,f,c
  2634  000E96  2E1A               	decfsz	___lwmod@counter,f,c
  2635  000E98  D7F0               	goto	l2966
  2636  000E9A  D000               	goto	l1129
  2637  000E9C                     l1129:
  2638  000E9C  C016  F016         	movff	___lwmod@dividend,?___lwmod
  2639  000EA0  C017  F017         	movff	___lwmod@dividend+1,?___lwmod+1
  2640  000EA4  0012               	return		;funcret
  2641  000EA6                     __end_of___lwmod:
  2642                           	opt stack 0
  2643                           tblptru	equ	0xFF8
  2644                           tblptrh	equ	0xFF7
  2645                           tblptrl	equ	0xFF6
  2646                           tablat	equ	0xFF5
  2647                           prodh	equ	0xFF4
  2648                           prodl	equ	0xFF3
  2649                           postinc0	equ	0xFEE
  2650                           wreg	equ	0xFE8
  2651                           postdec1	equ	0xFE5
  2652                           fsr1l	equ	0xFE1
  2653                           postinc2	equ	0xFDE
  2654                           postdec2	equ	0xFDD
  2655                           fsr2h	equ	0xFDA
  2656                           fsr2l	equ	0xFD9
  2657                           status	equ	0xFD8
  2658                           
  2659 ;; *************** function ___lwdiv *****************
  2660 ;; Defined at:
  2661 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2662 ;; Parameters:    Size  Location     Type
  2663 ;;  dividend        2   14[COMRAM] unsigned int 
  2664 ;;  divisor         2   16[COMRAM] unsigned int 
  2665 ;; Auto vars:     Size  Location     Type
  2666 ;;  quotient        2   18[COMRAM] unsigned int 
  2667 ;;  counter         1   20[COMRAM] unsigned char 
  2668 ;; Return value:  Size  Location     Type
  2669 ;;                  2   14[COMRAM] unsigned int 
  2670 ;; Registers used:
  2671 ;;		wreg, status,2, status,0
  2672 ;; Tracked objects:
  2673 ;;		On entry : 0/0
  2674 ;;		On exit  : 0/0
  2675 ;;		Unchanged: 0/0
  2676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2677 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2678 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2680 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2681 ;;Total ram usage:        7 bytes
  2682 ;; Hardware stack levels used:    1
  2683 ;; Hardware stack levels required when called:    1
  2684 ;; This function calls:
  2685 ;;		Nothing
  2686 ;; This function is called by:
  2687 ;;		_printf
  2688 ;; This function uses a non-reentrant model
  2689 ;;
  2690                           
  2691                           	psect	text5
  2692  000D0A                     __ptext5:
  2693                           	opt stack 0
  2694  000D0A                     ___lwdiv:
  2695                           	opt stack 28
  2696                           
  2697                           ;incstack = 0
  2698  000D0A  0E00               	movlw	0
  2699  000D0C  6E14               	movwf	___lwdiv@quotient+1,c
  2700  000D0E  0E00               	movlw	0
  2701  000D10  6E13               	movwf	___lwdiv@quotient,c
  2702  000D12  5011               	movf	___lwdiv@divisor,w,c
  2703  000D14  1012               	iorwf	___lwdiv@divisor+1,w,c
  2704  000D16  B4D8               	btfsc	status,2,c
  2705  000D18  D021               	goto	l1119
  2706  000D1A  0E01               	movlw	1
  2707  000D1C  6E15               	movwf	___lwdiv@counter,c
  2708  000D1E  D005               	goto	l2944
  2709  000D20                     l2942:
  2710  000D20  90D8               	bcf	status,0,c
  2711  000D22  3611               	rlcf	___lwdiv@divisor,f,c
  2712  000D24  3612               	rlcf	___lwdiv@divisor+1,f,c
  2713  000D26  2A15               	incf	___lwdiv@counter,f,c
  2714  000D28  D000               	goto	l2944
  2715  000D2A                     l2944:
  2716  000D2A  BE12               	btfsc	___lwdiv@divisor+1,7,c
  2717  000D2C  D002               	goto	l2946
  2718  000D2E  D7F8               	goto	l2942
  2719  000D30  D000               	goto	l2946
  2720  000D32                     l2946:
  2721  000D32  90D8               	bcf	status,0,c
  2722  000D34  3613               	rlcf	___lwdiv@quotient,f,c
  2723  000D36  3614               	rlcf	___lwdiv@quotient+1,f,c
  2724  000D38  5011               	movf	___lwdiv@divisor,w,c
  2725  000D3A  5C0F               	subwf	___lwdiv@dividend,w,c
  2726  000D3C  5012               	movf	___lwdiv@divisor+1,w,c
  2727  000D3E  5810               	subwfb	___lwdiv@dividend+1,w,c
  2728  000D40  A0D8               	btfss	status,0,c
  2729  000D42  D006               	goto	l2954
  2730  000D44  5011               	movf	___lwdiv@divisor,w,c
  2731  000D46  5E0F               	subwf	___lwdiv@dividend,f,c
  2732  000D48  5012               	movf	___lwdiv@divisor+1,w,c
  2733  000D4A  5A10               	subwfb	___lwdiv@dividend+1,f,c
  2734  000D4C  8013               	bsf	___lwdiv@quotient,0,c
  2735  000D4E  D000               	goto	l2954
  2736  000D50                     l2954:
  2737  000D50  90D8               	bcf	status,0,c
  2738  000D52  3212               	rrcf	___lwdiv@divisor+1,f,c
  2739  000D54  3211               	rrcf	___lwdiv@divisor,f,c
  2740  000D56  2E15               	decfsz	___lwdiv@counter,f,c
  2741  000D58  D7EC               	goto	l2946
  2742  000D5A  D000               	goto	l1119
  2743  000D5C                     l1119:
  2744  000D5C  C013  F00F         	movff	___lwdiv@quotient,?___lwdiv
  2745  000D60  C014  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2746  000D64  0012               	return		;funcret
  2747  000D66                     __end_of___lwdiv:
  2748                           	opt stack 0
  2749                           tblptru	equ	0xFF8
  2750                           tblptrh	equ	0xFF7
  2751                           tblptrl	equ	0xFF6
  2752                           tablat	equ	0xFF5
  2753                           prodh	equ	0xFF4
  2754                           prodl	equ	0xFF3
  2755                           postinc0	equ	0xFEE
  2756                           wreg	equ	0xFE8
  2757                           postdec1	equ	0xFE5
  2758                           fsr1l	equ	0xFE1
  2759                           postinc2	equ	0xFDE
  2760                           postdec2	equ	0xFDD
  2761                           fsr2h	equ	0xFDA
  2762                           fsr2l	equ	0xFD9
  2763                           status	equ	0xFD8
  2764                           
  2765 ;; *************** function ___awdiv *****************
  2766 ;; Defined at:
  2767 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  2768 ;; Parameters:    Size  Location     Type
  2769 ;;  dividend        2   14[COMRAM] int 
  2770 ;;  divisor         2   16[COMRAM] int 
  2771 ;; Auto vars:     Size  Location     Type
  2772 ;;  quotient        2   20[COMRAM] int 
  2773 ;;  sign            1   19[COMRAM] unsigned char 
  2774 ;;  counter         1   18[COMRAM] unsigned char 
  2775 ;; Return value:  Size  Location     Type
  2776 ;;                  2   14[COMRAM] int 
  2777 ;; Registers used:
  2778 ;;		wreg, status,2, status,0
  2779 ;; Tracked objects:
  2780 ;;		On entry : 0/0
  2781 ;;		On exit  : 0/0
  2782 ;;		Unchanged: 0/0
  2783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2784 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2785 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2787 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2788 ;;Total ram usage:        8 bytes
  2789 ;; Hardware stack levels used:    1
  2790 ;; Hardware stack levels required when called:    1
  2791 ;; This function calls:
  2792 ;;		Nothing
  2793 ;; This function is called by:
  2794 ;;		_main
  2795 ;; This function uses a non-reentrant model
  2796 ;;
  2797                           
  2798                           	psect	text6
  2799  0008B4                     __ptext6:
  2800                           	opt stack 0
  2801  0008B4                     ___awdiv:
  2802                           	opt stack 29
  2803                           
  2804                           ;incstack = 0
  2805  0008B4  0E00               	movlw	0
  2806  0008B6  6E14               	movwf	___awdiv@sign,c
  2807  0008B8  AE12               	btfss	___awdiv@divisor+1,7,c
  2808  0008BA  D007               	goto	l3212
  2809  0008BC  6C11               	negf	___awdiv@divisor,c
  2810  0008BE  1E12               	comf	___awdiv@divisor+1,f,c
  2811  0008C0  B0D8               	btfsc	status,0,c
  2812  0008C2  2A12               	incf	___awdiv@divisor+1,f,c
  2813  0008C4  0E01               	movlw	1
  2814  0008C6  6E14               	movwf	___awdiv@sign,c
  2815  0008C8  D000               	goto	l3212
  2816  0008CA                     l3212:
  2817  0008CA  AE10               	btfss	___awdiv@dividend+1,7,c
  2818  0008CC  D007               	goto	l3218
  2819  0008CE  6C0F               	negf	___awdiv@dividend,c
  2820  0008D0  1E10               	comf	___awdiv@dividend+1,f,c
  2821  0008D2  B0D8               	btfsc	status,0,c
  2822  0008D4  2A10               	incf	___awdiv@dividend+1,f,c
  2823  0008D6  0E01               	movlw	1
  2824  0008D8  1A14               	xorwf	___awdiv@sign,f,c
  2825  0008DA  D000               	goto	l3218
  2826  0008DC                     l3218:
  2827  0008DC  0E00               	movlw	0
  2828  0008DE  6E16               	movwf	___awdiv@quotient+1,c
  2829  0008E0  0E00               	movlw	0
  2830  0008E2  6E15               	movwf	___awdiv@quotient,c
  2831  0008E4  5011               	movf	___awdiv@divisor,w,c
  2832  0008E6  1012               	iorwf	___awdiv@divisor+1,w,c
  2833  0008E8  B4D8               	btfsc	status,2,c
  2834  0008EA  D021               	goto	l3240
  2835  0008EC  0E01               	movlw	1
  2836  0008EE  6E13               	movwf	___awdiv@counter,c
  2837  0008F0  D005               	goto	l3226
  2838  0008F2                     l3224:
  2839  0008F2  90D8               	bcf	status,0,c
  2840  0008F4  3611               	rlcf	___awdiv@divisor,f,c
  2841  0008F6  3612               	rlcf	___awdiv@divisor+1,f,c
  2842  0008F8  2A13               	incf	___awdiv@counter,f,c
  2843  0008FA  D000               	goto	l3226
  2844  0008FC                     l3226:
  2845  0008FC  BE12               	btfsc	___awdiv@divisor+1,7,c
  2846  0008FE  D002               	goto	l3228
  2847  000900  D7F8               	goto	l3224
  2848  000902  D000               	goto	l3228
  2849  000904                     l3228:
  2850  000904  90D8               	bcf	status,0,c
  2851  000906  3615               	rlcf	___awdiv@quotient,f,c
  2852  000908  3616               	rlcf	___awdiv@quotient+1,f,c
  2853  00090A  5011               	movf	___awdiv@divisor,w,c
  2854  00090C  5C0F               	subwf	___awdiv@dividend,w,c
  2855  00090E  5012               	movf	___awdiv@divisor+1,w,c
  2856  000910  5810               	subwfb	___awdiv@dividend+1,w,c
  2857  000912  A0D8               	btfss	status,0,c
  2858  000914  D006               	goto	l3236
  2859  000916  5011               	movf	___awdiv@divisor,w,c
  2860  000918  5E0F               	subwf	___awdiv@dividend,f,c
  2861  00091A  5012               	movf	___awdiv@divisor+1,w,c
  2862  00091C  5A10               	subwfb	___awdiv@dividend+1,f,c
  2863  00091E  8015               	bsf	___awdiv@quotient,0,c
  2864  000920  D000               	goto	l3236
  2865  000922                     l3236:
  2866  000922  90D8               	bcf	status,0,c
  2867  000924  3212               	rrcf	___awdiv@divisor+1,f,c
  2868  000926  3211               	rrcf	___awdiv@divisor,f,c
  2869  000928  2E13               	decfsz	___awdiv@counter,f,c
  2870  00092A  D7EC               	goto	l3228
  2871  00092C  D000               	goto	l3240
  2872  00092E                     l3240:
  2873  00092E  5014               	movf	___awdiv@sign,w,c
  2874  000930  B4D8               	btfsc	status,2,c
  2875  000932  D005               	goto	l3244
  2876  000934  6C15               	negf	___awdiv@quotient,c
  2877  000936  1E16               	comf	___awdiv@quotient+1,f,c
  2878  000938  B0D8               	btfsc	status,0,c
  2879  00093A  2A16               	incf	___awdiv@quotient+1,f,c
  2880  00093C  D000               	goto	l3244
  2881  00093E                     l3244:
  2882  00093E  C015  F00F         	movff	___awdiv@quotient,?___awdiv
  2883  000942  C016  F010         	movff	___awdiv@quotient+1,?___awdiv+1
  2884  000946  D000               	goto	l789
  2885  000948                     l789:
  2886  000948  0012               	return		;funcret
  2887  00094A                     __end_of___awdiv:
  2888                           	opt stack 0
  2889                           tblptru	equ	0xFF8
  2890                           tblptrh	equ	0xFF7
  2891                           tblptrl	equ	0xFF6
  2892                           tablat	equ	0xFF5
  2893                           prodh	equ	0xFF4
  2894                           prodl	equ	0xFF3
  2895                           postinc0	equ	0xFEE
  2896                           wreg	equ	0xFE8
  2897                           postdec1	equ	0xFE5
  2898                           fsr1l	equ	0xFE1
  2899                           postinc2	equ	0xFDE
  2900                           postdec2	equ	0xFDD
  2901                           fsr2h	equ	0xFDA
  2902                           fsr2l	equ	0xFD9
  2903                           status	equ	0xFD8
  2904                           
  2905 ;; *************** function _Do_Init *****************
  2906 ;; Defined at:
  2907 ;;		line 101 in file "Lab11p3.c"
  2908 ;; Parameters:    Size  Location     Type
  2909 ;;		None
  2910 ;; Auto vars:     Size  Location     Type
  2911 ;;		None
  2912 ;; Return value:  Size  Location     Type
  2913 ;;		None               void
  2914 ;; Registers used:
  2915 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2916 ;; Tracked objects:
  2917 ;;		On entry : 0/0
  2918 ;;		On exit  : 0/0
  2919 ;;		Unchanged: 0/0
  2920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2924 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2925 ;;Total ram usage:        0 bytes
  2926 ;; Hardware stack levels used:    1
  2927 ;; Hardware stack levels required when called:    9
  2928 ;; This function calls:
  2929 ;;		_DS1621_Init
  2930 ;;		_I2C_Init
  2931 ;;		_Initialize_Screen
  2932 ;;		_init_UART
  2933 ;; This function is called by:
  2934 ;;		_main
  2935 ;; This function uses a non-reentrant model
  2936 ;;
  2937                           
  2938                           	psect	text7
  2939  000F38                     __ptext7:
  2940                           	opt stack 0
  2941  000F38                     _Do_Init:
  2942                           	opt stack 21
  2943                           
  2944                           ;Lab11p3.c: 103: init_UART();
  2945                           
  2946                           ;incstack = 0
  2947  000F38  EC07  F009         	call	_init_UART	;wreg free
  2948                           
  2949                           ;Lab11p3.c: 105: OSCCON=0x70;
  2950  000F3C  0E70               	movlw	112
  2951  000F3E  6ED3               	movwf	4051,c	;volatile
  2952                           
  2953                           ;Lab11p3.c: 107: ADCON1= 0x0F;
  2954  000F40  0E0F               	movlw	15
  2955  000F42  6EC1               	movwf	4033,c	;volatile
  2956                           
  2957                           ;Lab11p3.c: 108: TRISA = 0x14;
  2958  000F44  0E14               	movlw	20
  2959  000F46  6E92               	movwf	3986,c	;volatile
  2960                           
  2961                           ;Lab11p3.c: 109: TRISB = 0x01;
  2962  000F48  0E01               	movlw	1
  2963  000F4A  6E93               	movwf	3987,c	;volatile
  2964                           
  2965                           ;Lab11p3.c: 110: TRISC = 0x00;
  2966  000F4C  0E00               	movlw	0
  2967  000F4E  6E94               	movwf	3988,c	;volatile
  2968                           
  2969                           ;Lab11p3.c: 111: TRISD = 0x00;
  2970  000F50  0E00               	movlw	0
  2971  000F52  6E95               	movwf	3989,c	;volatile
  2972                           
  2973                           ;Lab11p3.c: 112: TRISE = 0x00;
  2974  000F54  0E00               	movlw	0
  2975  000F56  6E96               	movwf	3990,c	;volatile
  2976                           
  2977                           ;Lab11p3.c: 113: RBPU=0;
  2978  000F58  9EF1               	bcf	intcon2,7,c	;volatile
  2979                           
  2980                           ;Lab11p3.c: 114: I2C_Init(100000);
  2981  000F5A  0EA0               	movlw	160
  2982  000F5C  6E0F               	movwf	I2C_Init@c,c
  2983  000F5E  0E86               	movlw	134
  2984  000F60  6E10               	movwf	I2C_Init@c+1,c
  2985  000F62  0E01               	movlw	1
  2986  000F64  6E11               	movwf	I2C_Init@c+2,c
  2987  000F66  0E00               	movlw	0
  2988  000F68  6E12               	movwf	I2C_Init@c+3,c
  2989  000F6A  EC5C  F009         	call	_I2C_Init	;wreg free
  2990                           
  2991                           ;Lab11p3.c: 116: Initialize_Screen();
  2992  000F6E  ECEC  F004         	call	_Initialize_Screen	;wreg free
  2993                           
  2994                           ;Lab11p3.c: 117: DS1621_Init();
  2995  000F72  ECD2  F008         	call	_DS1621_Init	;wreg free
  2996  000F76  0012               	return		;funcret
  2997  000F78                     __end_of_Do_Init:
  2998                           	opt stack 0
  2999                           tblptru	equ	0xFF8
  3000                           tblptrh	equ	0xFF7
  3001                           tblptrl	equ	0xFF6
  3002                           tablat	equ	0xFF5
  3003                           prodh	equ	0xFF4
  3004                           prodl	equ	0xFF3
  3005                           intcon2	equ	0xFF1
  3006                           postinc0	equ	0xFEE
  3007                           wreg	equ	0xFE8
  3008                           postdec1	equ	0xFE5
  3009                           fsr1l	equ	0xFE1
  3010                           postinc2	equ	0xFDE
  3011                           postdec2	equ	0xFDD
  3012                           fsr2h	equ	0xFDA
  3013                           fsr2l	equ	0xFD9
  3014                           status	equ	0xFD8
  3015                           
  3016 ;; *************** function _init_UART *****************
  3017 ;; Defined at:
  3018 ;;		line 88 in file "Lab11p3.c"
  3019 ;; Parameters:    Size  Location     Type
  3020 ;;		None
  3021 ;; Auto vars:     Size  Location     Type
  3022 ;;		None
  3023 ;; Return value:  Size  Location     Type
  3024 ;;		None               void
  3025 ;; Registers used:
  3026 ;;		wreg, status,2, cstack
  3027 ;; Tracked objects:
  3028 ;;		On entry : 0/0
  3029 ;;		On exit  : 0/0
  3030 ;;		Unchanged: 0/0
  3031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3036 ;;Total ram usage:        0 bytes
  3037 ;; Hardware stack levels used:    1
  3038 ;; Hardware stack levels required when called:    2
  3039 ;; This function calls:
  3040 ;;		_OpenUSART
  3041 ;; This function is called by:
  3042 ;;		_Do_Init
  3043 ;; This function uses a non-reentrant model
  3044 ;;
  3045                           
  3046                           	psect	text8
  3047  00120E                     __ptext8:
  3048                           	opt stack 0
  3049  00120E                     _init_UART:
  3050                           	opt stack 27
  3051                           
  3052                           ;Lab11p3.c: 90: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b1111111
      +                          1 & 0b11111111, 25);
  3053                           
  3054                           ;incstack = 0
  3055  00120E  0E00               	movlw	0
  3056  001210  6E10               	movwf	OpenUSART@spbrg+1,c
  3057  001212  0E19               	movlw	25
  3058  001214  6E0F               	movwf	OpenUSART@spbrg,c
  3059  001216  0E3C               	movlw	60
  3060  001218  ECB4  F005         	call	_OpenUSART
  3061                           
  3062                           ;Lab11p3.c: 91: OSCCON = 0x70;
  3063  00121C  0E70               	movlw	112
  3064  00121E  6ED3               	movwf	4051,c	;volatile
  3065  001220  0012               	return		;funcret
  3066  001222                     __end_of_init_UART:
  3067                           	opt stack 0
  3068                           tblptru	equ	0xFF8
  3069                           tblptrh	equ	0xFF7
  3070                           tblptrl	equ	0xFF6
  3071                           tablat	equ	0xFF5
  3072                           prodh	equ	0xFF4
  3073                           prodl	equ	0xFF3
  3074                           intcon2	equ	0xFF1
  3075                           postinc0	equ	0xFEE
  3076                           wreg	equ	0xFE8
  3077                           postdec1	equ	0xFE5
  3078                           fsr1l	equ	0xFE1
  3079                           postinc2	equ	0xFDE
  3080                           postdec2	equ	0xFDD
  3081                           fsr2h	equ	0xFDA
  3082                           fsr2l	equ	0xFD9
  3083                           status	equ	0xFD8
  3084                           
  3085 ;; *************** function _OpenUSART *****************
  3086 ;; Defined at:
  3087 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  3088 ;; Parameters:    Size  Location     Type
  3089 ;;  config          1    wreg     unsigned char 
  3090 ;;  spbrg           2   14[COMRAM] unsigned int 
  3091 ;; Auto vars:     Size  Location     Type
  3092 ;;  config          1   16[COMRAM] unsigned char 
  3093 ;; Return value:  Size  Location     Type
  3094 ;;		None               void
  3095 ;; Registers used:
  3096 ;;		wreg, status,2
  3097 ;; Tracked objects:
  3098 ;;		On entry : 0/0
  3099 ;;		On exit  : 0/0
  3100 ;;		Unchanged: 0/0
  3101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3102 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3103 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3105 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3106 ;;Total ram usage:        3 bytes
  3107 ;; Hardware stack levels used:    1
  3108 ;; Hardware stack levels required when called:    1
  3109 ;; This function calls:
  3110 ;;		Nothing
  3111 ;; This function is called by:
  3112 ;;		_init_UART
  3113 ;; This function uses a non-reentrant model
  3114 ;;
  3115                           
  3116                           	psect	text9
  3117  000B68                     __ptext9:
  3118                           	opt stack 0
  3119  000B68                     _OpenUSART:
  3120                           	opt stack 27
  3121                           
  3122                           ;incstack = 0
  3123                           ;OpenUSART@config stored from wreg
  3124  000B68  6E11               	movwf	OpenUSART@config,c
  3125  000B6A  0E00               	movlw	0
  3126  000B6C  6EAC               	movwf	4012,c	;volatile
  3127  000B6E  0E00               	movlw	0
  3128  000B70  6EAB               	movwf	4011,c	;volatile
  3129  000B72  A011               	btfss	OpenUSART@config,0,c
  3130  000B74  D002               	goto	l2846
  3131  000B76  88AC               	bsf	4012,4,c	;volatile
  3132  000B78  D000               	goto	l2846
  3133  000B7A                     l2846:
  3134  000B7A  A211               	btfss	OpenUSART@config,1,c
  3135  000B7C  D003               	goto	l2850
  3136  000B7E  8CAC               	bsf	4012,6,c	;volatile
  3137  000B80  8CAB               	bsf	4011,6,c	;volatile
  3138  000B82  D000               	goto	l2850
  3139  000B84                     l2850:
  3140  000B84  A411               	btfss	OpenUSART@config,2,c
  3141  000B86  D002               	goto	l2854
  3142  000B88  8EAC               	bsf	4012,7,c	;volatile
  3143  000B8A  D000               	goto	l2854
  3144  000B8C                     l2854:
  3145  000B8C  A611               	btfss	OpenUSART@config,3,c
  3146  000B8E  D002               	goto	l584
  3147  000B90  88AB               	bsf	4011,4,c	;volatile
  3148  000B92  D002               	goto	l2858
  3149  000B94                     l584:
  3150  000B94  8AAB               	bsf	4011,5,c	;volatile
  3151  000B96  D000               	goto	l2858
  3152  000B98                     l2858:
  3153  000B98  B811               	btfsc	OpenUSART@config,4,c
  3154  000B9A  84AC               	bsf	4012,2,c	;volatile
  3155  000B9C  989E               	bcf	3998,4,c	;volatile
  3156  000B9E  AA11               	btfss	OpenUSART@config,5,c
  3157  000BA0  D002               	goto	l2866
  3158  000BA2  86AB               	bsf	4011,3,c	;volatile
  3159  000BA4  D000               	goto	l2866
  3160  000BA6                     l2866:
  3161  000BA6  AC11               	btfss	OpenUSART@config,6,c
  3162  000BA8  D002               	goto	l588
  3163  000BAA  8A9D               	bsf	3997,5,c	;volatile
  3164  000BAC  D001               	goto	l589
  3165  000BAE                     l588:
  3166  000BAE  9A9D               	bcf	3997,5,c	;volatile
  3167  000BB0                     l589:
  3168  000BB0  9A9E               	bcf	3998,5,c	;volatile
  3169  000BB2  AE11               	btfss	OpenUSART@config,7,c
  3170  000BB4  D002               	goto	l590
  3171  000BB6  889D               	bsf	3997,4,c	;volatile
  3172  000BB8  D001               	goto	l591
  3173  000BBA                     l590:
  3174  000BBA  989D               	bcf	3997,4,c	;volatile
  3175  000BBC                     l591:
  3176  000BBC  C00F  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  3177  000BC0  5010               	movf	OpenUSART@spbrg+1,w,c
  3178  000BC2  6EB0               	movwf	4016,c	;volatile
  3179  000BC4  8AAC               	bsf	4012,5,c	;volatile
  3180  000BC6  8EAB               	bsf	4011,7,c	;volatile
  3181  000BC8  9C94               	bcf	3988,6,c	;volatile
  3182  000BCA  8E94               	bsf	3988,7,c	;volatile
  3183  000BCC  B8AC               	btfsc	4012,4,c	;volatile
  3184  000BCE  BEAC               	btfsc	4012,7,c	;volatile
  3185  000BD0  D002               	goto	l593
  3186  000BD2  8C94               	bsf	3988,6,c	;volatile
  3187  000BD4  D000               	goto	l593
  3188  000BD6                     l593:
  3189  000BD6  0012               	return		;funcret
  3190  000BD8                     __end_of_OpenUSART:
  3191                           	opt stack 0
  3192                           tblptru	equ	0xFF8
  3193                           tblptrh	equ	0xFF7
  3194                           tblptrl	equ	0xFF6
  3195                           tablat	equ	0xFF5
  3196                           prodh	equ	0xFF4
  3197                           prodl	equ	0xFF3
  3198                           intcon2	equ	0xFF1
  3199                           postinc0	equ	0xFEE
  3200                           wreg	equ	0xFE8
  3201                           postdec1	equ	0xFE5
  3202                           fsr1l	equ	0xFE1
  3203                           postinc2	equ	0xFDE
  3204                           postdec2	equ	0xFDD
  3205                           fsr2h	equ	0xFDA
  3206                           fsr2l	equ	0xFD9
  3207                           status	equ	0xFD8
  3208                           
  3209 ;; *************** function _Initialize_Screen *****************
  3210 ;; Defined at:
  3211 ;;		line 174 in file "Lab11p3.c"
  3212 ;; Parameters:    Size  Location     Type
  3213 ;;		None
  3214 ;; Auto vars:     Size  Location     Type
  3215 ;;		None
  3216 ;; Return value:  Size  Location     Type
  3217 ;;		None               void
  3218 ;; Registers used:
  3219 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3220 ;; Tracked objects:
  3221 ;;		On entry : 0/0
  3222 ;;		On exit  : 0/0
  3223 ;;		Unchanged: 0/0
  3224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3228 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3229 ;;Total ram usage:        0 bytes
  3230 ;; Hardware stack levels used:    1
  3231 ;; Hardware stack levels required when called:    8
  3232 ;; This function calls:
  3233 ;;		_LCD_Reset
  3234 ;;		_TFT_GreenTab_Initialize
  3235 ;;		_drawtext
  3236 ;;		_fillScreen
  3237 ;;		_strcpy
  3238 ;; This function is called by:
  3239 ;;		_Do_Init
  3240 ;; This function uses a non-reentrant model
  3241 ;;
  3242                           
  3243                           	psect	text10
  3244  0009D8                     __ptext10:
  3245                           	opt stack 0
  3246  0009D8                     _Initialize_Screen:
  3247                           	opt stack 21
  3248                           
  3249                           ;Lab11p3.c: 176: LCD_Reset();
  3250                           
  3251                           ;incstack = 0
  3252  0009D8  EC1B  F009         	call	_LCD_Reset	;wreg free
  3253                           
  3254                           ;Lab11p3.c: 177: TFT_GreenTab_Initialize();
  3255  0009DC  EC88  F008         	call	_TFT_GreenTab_Initialize	;wreg free
  3256                           
  3257                           ;Lab11p3.c: 178: fillScreen(0x0000);
  3258  0009E0  0E00               	movlw	0
  3259  0009E2  6E23               	movwf	fillScreen@color+1,c
  3260  0009E4  0E00               	movlw	0
  3261  0009E6  6E22               	movwf	fillScreen@color,c
  3262  0009E8  ECE1  F008         	call	_fillScreen	;wreg free
  3263                           
  3264                           ;Lab11p3.c: 181: txt = buffer;
  3265  0009EC  0EBF               	movlw	low _buffer
  3266  0009EE  6E4D               	movwf	_txt,c
  3267  0009F0  0E00               	movlw	high _buffer
  3268  0009F2  6E4E               	movwf	_txt+1,c
  3269                           
  3270                           ;Lab11p3.c: 182: strcpy(txt, "ECE3301L Fall 22-Sx");
  3271  0009F4  C04D  F00F         	movff	_txt,strcpy@to
  3272  0009F8  C04E  F010         	movff	_txt+1,strcpy@to+1
  3273  0009FC  0ED1               	movlw	low STR_3
  3274  0009FE  6E11               	movwf	strcpy@from,c
  3275  000A00  0EFF               	movlw	high STR_3
  3276  000A02  6E12               	movwf	strcpy@from+1,c
  3277  000A04  EC57  F008         	call	_strcpy	;wreg free
  3278                           
  3279                           ;Lab11p3.c: 183: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  3280  000A08  0E02               	movlw	2
  3281  000A0A  6E37               	movwf	drawtext@y,c
  3282  000A0C  C04D  F038         	movff	_txt,drawtext@_text
  3283  000A10  C04E  F039         	movff	_txt+1,drawtext@_text+1
  3284  000A14  0EFF               	movlw	255
  3285  000A16  6E3B               	movwf	drawtext@color+1,c
  3286  000A18  683A               	setf	drawtext@color,c
  3287  000A1A  0E00               	movlw	0
  3288  000A1C  6E3D               	movwf	drawtext@bg+1,c
  3289  000A1E  0E00               	movlw	0
  3290  000A20  6E3C               	movwf	drawtext@bg,c
  3291  000A22  0E01               	movlw	1
  3292  000A24  6E3E               	movwf	drawtext@size,c
  3293  000A26  0E02               	movlw	2
  3294  000A28  ECEE  F002         	call	_drawtext
  3295                           
  3296                           ;Lab11p3.c: 185: strcpy(txt, "LAB 10 ");
  3297  000A2C  C04D  F00F         	movff	_txt,strcpy@to
  3298  000A30  C04E  F010         	movff	_txt+1,strcpy@to+1
  3299  000A34  0EF6               	movlw	low STR_4
  3300  000A36  6E11               	movwf	strcpy@from,c
  3301  000A38  0EFF               	movlw	high STR_4
  3302  000A3A  6E12               	movwf	strcpy@from+1,c
  3303  000A3C  EC57  F008         	call	_strcpy	;wreg free
  3304                           
  3305                           ;Lab11p3.c: 186: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  3306  000A40  0E0A               	movlw	10
  3307  000A42  6E37               	movwf	drawtext@y,c
  3308  000A44  C04D  F038         	movff	_txt,drawtext@_text
  3309  000A48  C04E  F039         	movff	_txt+1,drawtext@_text+1
  3310  000A4C  0EFF               	movlw	255
  3311  000A4E  6E3B               	movwf	drawtext@color+1,c
  3312  000A50  683A               	setf	drawtext@color,c
  3313  000A52  0E00               	movlw	0
  3314  000A54  6E3D               	movwf	drawtext@bg+1,c
  3315  000A56  0E00               	movlw	0
  3316  000A58  6E3C               	movwf	drawtext@bg,c
  3317  000A5A  0E01               	movlw	1
  3318  000A5C  6E3E               	movwf	drawtext@size,c
  3319  000A5E  0E32               	movlw	50
  3320  000A60  ECEE  F002         	call	_drawtext
  3321  000A64  0012               	return		;funcret
  3322  000A66                     __end_of_Initialize_Screen:
  3323                           	opt stack 0
  3324                           tblptru	equ	0xFF8
  3325                           tblptrh	equ	0xFF7
  3326                           tblptrl	equ	0xFF6
  3327                           tablat	equ	0xFF5
  3328                           prodh	equ	0xFF4
  3329                           prodl	equ	0xFF3
  3330                           intcon2	equ	0xFF1
  3331                           postinc0	equ	0xFEE
  3332                           wreg	equ	0xFE8
  3333                           postdec1	equ	0xFE5
  3334                           fsr1l	equ	0xFE1
  3335                           postinc2	equ	0xFDE
  3336                           postdec2	equ	0xFDD
  3337                           fsr2h	equ	0xFDA
  3338                           fsr2l	equ	0xFD9
  3339                           status	equ	0xFD8
  3340                           
  3341 ;; *************** function _strcpy *****************
  3342 ;; Defined at:
  3343 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  3344 ;; Parameters:    Size  Location     Type
  3345 ;;  to              2   14[COMRAM] PTR unsigned char 
  3346 ;;		 -> NULL(0), buffer(31), 
  3347 ;;  from            2   16[COMRAM] PTR const unsigned char 
  3348 ;;		 -> STR_4(8), STR_3(20), 
  3349 ;; Auto vars:     Size  Location     Type
  3350 ;;  cp              2   18[COMRAM] PTR unsigned char 
  3351 ;;		 -> NULL(0), buffer(31), 
  3352 ;; Return value:  Size  Location     Type
  3353 ;;                  2   14[COMRAM] PTR unsigned char 
  3354 ;; Registers used:
  3355 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  3356 ;; Tracked objects:
  3357 ;;		On entry : 0/0
  3358 ;;		On exit  : 0/0
  3359 ;;		Unchanged: 0/0
  3360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3361 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3362 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3364 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3365 ;;Total ram usage:        6 bytes
  3366 ;; Hardware stack levels used:    1
  3367 ;; Hardware stack levels required when called:    1
  3368 ;; This function calls:
  3369 ;;		Nothing
  3370 ;; This function is called by:
  3371 ;;		_Initialize_Screen
  3372 ;; This function uses a non-reentrant model
  3373 ;;
  3374                           
  3375                           	psect	text11
  3376  0010AE                     __ptext11:
  3377                           	opt stack 0
  3378  0010AE                     _strcpy:
  3379                           	opt stack 27
  3380                           
  3381                           ;incstack = 0
  3382  0010AE  C00F  F013         	movff	strcpy@to,strcpy@cp
  3383  0010B2  C010  F014         	movff	strcpy@to+1,strcpy@cp+1
  3384  0010B6  D005               	goto	l2894
  3385  0010B8                     l2892:
  3386  0010B8  4A13               	infsnz	strcpy@cp,f,c
  3387  0010BA  2A14               	incf	strcpy@cp+1,f,c
  3388  0010BC  4A11               	infsnz	strcpy@from,f,c
  3389  0010BE  2A12               	incf	strcpy@from+1,f,c
  3390  0010C0  D000               	goto	l2894
  3391  0010C2                     l2894:
  3392  0010C2  C011  FFF6         	movff	strcpy@from,tblptrl
  3393  0010C6  C012  FFF7         	movff	strcpy@from+1,tblptrh
  3394  0010CA                     	if	0	;tblptru may be non-zero
  3395  0010CA                     	endif
  3396  0010CA                     	if	0	;tblptru may be non-zero
  3397  0010CA                     	endif
  3398  0010CA  C013  FFD9         	movff	strcpy@cp,fsr2l
  3399  0010CE  C014  FFDA         	movff	strcpy@cp+1,fsr2h
  3400  0010D2  0008               	tblrd		*
  3401  0010D4  CFF5 FFDF          	movff	tablat,indf2
  3402  0010D8  50DF               	movf	indf2,w,c
  3403  0010DA  A4D8               	btfss	status,2,c
  3404  0010DC  D7ED               	goto	l2892
  3405                           
  3406                           ;	Return value of _strcpy is never used
  3407  0010DE  0012               	return		;funcret
  3408  0010E0                     __end_of_strcpy:
  3409                           	opt stack 0
  3410                           tblptru	equ	0xFF8
  3411                           tblptrh	equ	0xFF7
  3412                           tblptrl	equ	0xFF6
  3413                           tablat	equ	0xFF5
  3414                           prodh	equ	0xFF4
  3415                           prodl	equ	0xFF3
  3416                           intcon2	equ	0xFF1
  3417                           postinc0	equ	0xFEE
  3418                           wreg	equ	0xFE8
  3419                           postdec1	equ	0xFE5
  3420                           fsr1l	equ	0xFE1
  3421                           indf2	equ	0xFDF
  3422                           postinc2	equ	0xFDE
  3423                           postdec2	equ	0xFDD
  3424                           fsr2h	equ	0xFDA
  3425                           fsr2l	equ	0xFD9
  3426                           status	equ	0xFD8
  3427                           
  3428 ;; *************** function _fillScreen *****************
  3429 ;; Defined at:
  3430 ;;		line 619 in file "ST7735_TFT.c"
  3431 ;; Parameters:    Size  Location     Type
  3432 ;;  color           2   33[COMRAM] unsigned int 
  3433 ;; Auto vars:     Size  Location     Type
  3434 ;;		None
  3435 ;; Return value:  Size  Location     Type
  3436 ;;		None               void
  3437 ;; Registers used:
  3438 ;;		wreg, status,2, status,0, cstack
  3439 ;; Tracked objects:
  3440 ;;		On entry : 0/0
  3441 ;;		On exit  : 0/0
  3442 ;;		Unchanged: 0/0
  3443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3444 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3447 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3448 ;;Total ram usage:        2 bytes
  3449 ;; Hardware stack levels used:    1
  3450 ;; Hardware stack levels required when called:    5
  3451 ;; This function calls:
  3452 ;;		_fillRectangle
  3453 ;; This function is called by:
  3454 ;;		_Initialize_Screen
  3455 ;; This function uses a non-reentrant model
  3456 ;;
  3457                           
  3458                           	psect	text12
  3459  0011C2                     __ptext12:
  3460                           	opt stack 0
  3461  0011C2                     _fillScreen:
  3462                           	opt stack 23
  3463                           
  3464                           ;ST7735_TFT.c: 621: fillRectangle(0, 0, 128, 160, color);
  3465                           
  3466                           ;incstack = 0
  3467  0011C2  0E00               	movlw	0
  3468  0011C4  6E16               	movwf	fillRectangle@y,c
  3469  0011C6  0E80               	movlw	128
  3470  0011C8  6E17               	movwf	fillRectangle@w,c
  3471  0011CA  0EA0               	movlw	160
  3472  0011CC  6E18               	movwf	fillRectangle@h,c
  3473  0011CE  C022  F019         	movff	fillScreen@color,fillRectangle@color
  3474  0011D2  C023  F01A         	movff	fillScreen@color+1,fillRectangle@color+1
  3475  0011D6  0E00               	movlw	0
  3476  0011D8  ECEC  F003         	call	_fillRectangle
  3477  0011DC  0012               	return		;funcret
  3478  0011DE                     __end_of_fillScreen:
  3479                           	opt stack 0
  3480                           tblptru	equ	0xFF8
  3481                           tblptrh	equ	0xFF7
  3482                           tblptrl	equ	0xFF6
  3483                           tablat	equ	0xFF5
  3484                           prodh	equ	0xFF4
  3485                           prodl	equ	0xFF3
  3486                           intcon2	equ	0xFF1
  3487                           postinc0	equ	0xFEE
  3488                           wreg	equ	0xFE8
  3489                           postdec1	equ	0xFE5
  3490                           fsr1l	equ	0xFE1
  3491                           indf2	equ	0xFDF
  3492                           postinc2	equ	0xFDE
  3493                           postdec2	equ	0xFDD
  3494                           fsr2h	equ	0xFDA
  3495                           fsr2l	equ	0xFD9
  3496                           status	equ	0xFD8
  3497                           
  3498 ;; *************** function _fillRectangle *****************
  3499 ;; Defined at:
  3500 ;;		line 503 in file "ST7735_TFT.c"
  3501 ;; Parameters:    Size  Location     Type
  3502 ;;  x               1    wreg     unsigned char 
  3503 ;;  y               1   21[COMRAM] unsigned char 
  3504 ;;  w               1   22[COMRAM] unsigned char 
  3505 ;;  h               1   23[COMRAM] unsigned char 
  3506 ;;  color           2   24[COMRAM] unsigned int 
  3507 ;; Auto vars:     Size  Location     Type
  3508 ;;  x               1   32[COMRAM] unsigned char 
  3509 ;;  lo              1   31[COMRAM] unsigned char 
  3510 ;;  hi              1   30[COMRAM] unsigned char 
  3511 ;; Return value:  Size  Location     Type
  3512 ;;		None               void
  3513 ;; Registers used:
  3514 ;;		wreg, status,2, status,0, cstack
  3515 ;; Tracked objects:
  3516 ;;		On entry : 0/0
  3517 ;;		On exit  : 0/0
  3518 ;;		Unchanged: 0/0
  3519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3520 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3521 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3522 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3523 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3524 ;;Total ram usage:       12 bytes
  3525 ;; Hardware stack levels used:    1
  3526 ;; Hardware stack levels required when called:    4
  3527 ;; This function calls:
  3528 ;;		_setAddrWindow
  3529 ;;		_spiwrite
  3530 ;; This function is called by:
  3531 ;;		_fillScreen
  3532 ;; This function uses a non-reentrant model
  3533 ;;
  3534                           
  3535                           	psect	text13
  3536  0007D8                     __ptext13:
  3537                           	opt stack 0
  3538  0007D8                     _fillRectangle:
  3539                           	opt stack 23
  3540                           
  3541                           ;incstack = 0
  3542                           ;fillRectangle@x stored from wreg
  3543  0007D8  6E21               	movwf	fillRectangle@x,c
  3544                           
  3545                           ;ST7735_TFT.c: 505: unsigned char hi, lo;
  3546                           ;ST7735_TFT.c: 506: if((x >= 128) || (y >= 160))
  3547  0007DA  0E80               	movlw	128
  3548  0007DC  6021               	cpfslt	fillRectangle@x,c
  3549  0007DE  D069               	goto	l148
  3550  0007E0  0E9F               	movlw	159
  3551  0007E2  6416               	cpfsgt	fillRectangle@y,c
  3552  0007E4  D001               	goto	l3804
  3553                           
  3554                           ;ST7735_TFT.c: 507: return;
  3555  0007E6  D065               	goto	l148
  3556  0007E8                     l3804:
  3557                           
  3558                           ;ST7735_TFT.c: 508: if((x + w - 1) >= 128)
  3559  0007E8  0EFF               	movlw	255
  3560  0007EA  6E1B               	movwf	??_fillRectangle& (0+255),c
  3561  0007EC  0EFF               	movlw	255
  3562  0007EE  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3563  0007F0  5017               	movf	fillRectangle@w,w,c
  3564  0007F2  C021  F01D         	movff	fillRectangle@x,??_fillRectangle+2
  3565  0007F6  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3566  0007F8  261D               	addwf	??_fillRectangle+2,f,c
  3567  0007FA  0E00               	movlw	0
  3568  0007FC  221E               	addwfc	??_fillRectangle+3,f,c
  3569  0007FE  501B               	movf	??_fillRectangle,w,c
  3570  000800  261D               	addwf	??_fillRectangle+2,f,c
  3571  000802  501C               	movf	??_fillRectangle+1,w,c
  3572  000804  221E               	addwfc	??_fillRectangle+3,f,c
  3573  000806  BE1E               	btfsc	??_fillRectangle+3,7,c
  3574  000808  D00A               	goto	l149
  3575  00080A  501E               	movf	??_fillRectangle+3,w,c
  3576  00080C  E104               	bnz	u2570
  3577  00080E  0E80               	movlw	128
  3578  000810  5C1D               	subwf	??_fillRectangle+2,w,c
  3579  000812  A0D8               	btfss	status,0,c
  3580  000814  D004               	goto	l149
  3581  000816                     u2570:
  3582                           
  3583                           ;ST7735_TFT.c: 509: w = 128 - x;
  3584  000816  5021               	movf	fillRectangle@x,w,c
  3585  000818  0800               	sublw	0
  3586  00081A  0F80               	addlw	128
  3587  00081C  6E17               	movwf	fillRectangle@w,c
  3588  00081E                     l149:
  3589                           
  3590                           ;ST7735_TFT.c: 510: if((y + h - 1) >= 160)
  3591  00081E  0EFF               	movlw	255
  3592  000820  6E1B               	movwf	??_fillRectangle& (0+255),c
  3593  000822  0EFF               	movlw	255
  3594  000824  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3595  000826  5018               	movf	fillRectangle@h,w,c
  3596  000828  C016  F01D         	movff	fillRectangle@y,??_fillRectangle+2
  3597  00082C  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3598  00082E  261D               	addwf	??_fillRectangle+2,f,c
  3599  000830  0E00               	movlw	0
  3600  000832  221E               	addwfc	??_fillRectangle+3,f,c
  3601  000834  501B               	movf	??_fillRectangle,w,c
  3602  000836  261D               	addwf	??_fillRectangle+2,f,c
  3603  000838  501C               	movf	??_fillRectangle+1,w,c
  3604  00083A  221E               	addwfc	??_fillRectangle+3,f,c
  3605  00083C  BE1E               	btfsc	??_fillRectangle+3,7,c
  3606  00083E  D00B               	goto	l3810
  3607  000840  501E               	movf	??_fillRectangle+3,w,c
  3608  000842  E104               	bnz	u2580
  3609  000844  0EA0               	movlw	160
  3610  000846  5C1D               	subwf	??_fillRectangle+2,w,c
  3611  000848  A0D8               	btfss	status,0,c
  3612  00084A  D005               	goto	l3810
  3613  00084C                     u2580:
  3614                           
  3615                           ;ST7735_TFT.c: 511: h = 160 - y;
  3616  00084C  5016               	movf	fillRectangle@y,w,c
  3617  00084E  0800               	sublw	0
  3618  000850  0FA0               	addlw	160
  3619  000852  6E18               	movwf	fillRectangle@h,c
  3620  000854  D000               	goto	l3810
  3621  000856                     l3810:
  3622                           
  3623                           ;ST7735_TFT.c: 512: setAddrWindow(x, y, x+w-1, y+h-1);
  3624  000856  C016  F012         	movff	fillRectangle@y,setAddrWindow@y0
  3625  00085A  5021               	movf	fillRectangle@x,w,c
  3626  00085C  2417               	addwf	fillRectangle@w,w,c
  3627  00085E  6E1B               	movwf	??_fillRectangle& (0+255),c
  3628  000860  041B               	decf	??_fillRectangle,w,c
  3629  000862  6E13               	movwf	setAddrWindow@x1,c
  3630  000864  5016               	movf	fillRectangle@y,w,c
  3631  000866  2418               	addwf	fillRectangle@h,w,c
  3632  000868  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3633  00086A  041C               	decf	??_fillRectangle+1,w,c
  3634  00086C  6E14               	movwf	setAddrWindow@y1,c
  3635  00086E  5021               	movf	fillRectangle@x,w,c
  3636  000870  EC06  F007         	call	_setAddrWindow
  3637                           
  3638                           ;ST7735_TFT.c: 513: hi = color >> 8; lo = color;
  3639  000874  501A               	movf	fillRectangle@color+1,w,c
  3640  000876  6E1F               	movwf	fillRectangle@hi,c
  3641  000878  C019  F020         	movff	fillRectangle@color,fillRectangle@lo
  3642                           
  3643                           ;ST7735_TFT.c: 514: PORTCbits.RC0 = 1;
  3644  00087C  8082               	bsf	3970,0,c	;volatile
  3645                           
  3646                           ;ST7735_TFT.c: 515: PORTCbits.RC1 = 0;
  3647  00087E  9282               	bcf	3970,1,c	;volatile
  3648                           
  3649                           ;ST7735_TFT.c: 517: for(y=h; y>0; y--) {
  3650  000880  C018  F016         	movff	fillRectangle@h,fillRectangle@y
  3651  000884                     l3822:
  3652  000884  5016               	movf	fillRectangle@y,w,c
  3653  000886  B4D8               	btfsc	status,2,c
  3654  000888  D013               	goto	l152
  3655  00088A  D001               	goto	l151
  3656  00088C  D011               	goto	l152
  3657  00088E                     l151:
  3658                           
  3659                           ;ST7735_TFT.c: 518: for(x = w; x > 0; x--) {
  3660  00088E  C017  F021         	movff	fillRectangle@w,fillRectangle@x
  3661  000892                     l3826:
  3662  000892  5021               	movf	fillRectangle@x,w,c
  3663  000894  B4D8               	btfsc	status,2,c
  3664  000896  D00A               	goto	l3836
  3665  000898  D001               	goto	l3830
  3666  00089A  D008               	goto	l3836
  3667  00089C                     l3830:
  3668                           
  3669                           ;ST7735_TFT.c: 519: spiwrite(hi);
  3670  00089C  501F               	movf	fillRectangle@hi,w,c
  3671  00089E  EC11  F009         	call	_spiwrite
  3672                           
  3673                           ;ST7735_TFT.c: 520: spiwrite(lo);
  3674  0008A2  5020               	movf	fillRectangle@lo,w,c
  3675  0008A4  EC11  F009         	call	_spiwrite
  3676  0008A8  0621               	decf	fillRectangle@x,f,c
  3677  0008AA  D7F3               	goto	l3826
  3678  0008AC                     l3836:
  3679  0008AC  0616               	decf	fillRectangle@y,f,c
  3680  0008AE  D7EA               	goto	l3822
  3681  0008B0                     l152:
  3682                           
  3683                           ;ST7735_TFT.c: 521: }
  3684                           ;ST7735_TFT.c: 522: }
  3685                           ;ST7735_TFT.c: 523: PORTCbits.RC1 = 1;
  3686  0008B0  8282               	bsf	3970,1,c	;volatile
  3687  0008B2                     l148:
  3688  0008B2  0012               	return		;funcret
  3689  0008B4                     __end_of_fillRectangle:
  3690                           	opt stack 0
  3691                           tblptru	equ	0xFF8
  3692                           tblptrh	equ	0xFF7
  3693                           tblptrl	equ	0xFF6
  3694                           tablat	equ	0xFF5
  3695                           prodh	equ	0xFF4
  3696                           prodl	equ	0xFF3
  3697                           intcon2	equ	0xFF1
  3698                           postinc0	equ	0xFEE
  3699                           wreg	equ	0xFE8
  3700                           postdec1	equ	0xFE5
  3701                           fsr1l	equ	0xFE1
  3702                           indf2	equ	0xFDF
  3703                           postinc2	equ	0xFDE
  3704                           postdec2	equ	0xFDD
  3705                           fsr2h	equ	0xFDA
  3706                           fsr2l	equ	0xFD9
  3707                           status	equ	0xFD8
  3708                           
  3709 ;; *************** function _drawtext *****************
  3710 ;; Defined at:
  3711 ;;		line 474 in file "ST7735_TFT.c"
  3712 ;; Parameters:    Size  Location     Type
  3713 ;;  x               1    wreg     unsigned char 
  3714 ;;  y               1   54[COMRAM] unsigned char 
  3715 ;;  _text           2   55[COMRAM] PTR unsigned char 
  3716 ;;		 -> NULL(0), buffer(31), 
  3717 ;;  color           2   57[COMRAM] unsigned int 
  3718 ;;  bg              2   59[COMRAM] unsigned int 
  3719 ;;  size            1   61[COMRAM] unsigned char 
  3720 ;; Auto vars:     Size  Location     Type
  3721 ;;  x               1    0[BANK0 ] unsigned char 
  3722 ;;  i               2    3[BANK0 ] unsigned int 
  3723 ;;  textsize        2    1[BANK0 ] unsigned int 
  3724 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  3725 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  3726 ;; Return value:  Size  Location     Type
  3727 ;;		None               void
  3728 ;; Registers used:
  3729 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3730 ;; Tracked objects:
  3731 ;;		On entry : 0/0
  3732 ;;		On exit  : 0/0
  3733 ;;		Unchanged: 0/0
  3734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3735 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3736 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3737 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3738 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3739 ;;Total ram usage:       17 bytes
  3740 ;; Hardware stack levels used:    1
  3741 ;; Hardware stack levels required when called:    7
  3742 ;; This function calls:
  3743 ;;		_drawChar
  3744 ;;		_strlen
  3745 ;; This function is called by:
  3746 ;;		_Initialize_Screen
  3747 ;; This function uses a non-reentrant model
  3748 ;;
  3749                           
  3750                           	psect	text14
  3751  0005DC                     __ptext14:
  3752                           	opt stack 0
  3753  0005DC                     _drawtext:
  3754                           	opt stack 21
  3755                           
  3756                           ;incstack = 0
  3757                           ;drawtext@x stored from wreg
  3758  0005DC  0100               	movlb	0	; () banked
  3759  0005DE  6FDE               	movwf	drawtext@x& (0+255),b
  3760                           
  3761                           ; BSR set to: 0
  3762                           ;ST7735_TFT.c: 476: unsigned char cursor_x, cursor_y;
  3763                           ;ST7735_TFT.c: 477: unsigned int textsize, i;
  3764                           ;ST7735_TFT.c: 478: cursor_x = x, cursor_y = y;
  3765  0005E0  C0DE  F0E4         	movff	drawtext@x,drawtext@cursor_x
  3766                           
  3767                           ; BSR set to: 0
  3768  0005E4  C037  F0E3         	movff	drawtext@y,drawtext@cursor_y
  3769                           
  3770                           ; BSR set to: 0
  3771                           ;ST7735_TFT.c: 479: textsize = strlen(_text);
  3772  0005E8  C038  F00F         	movff	drawtext@_text,strlen@s
  3773  0005EC  C039  F010         	movff	drawtext@_text+1,strlen@s+1
  3774  0005F0  ECDC  F007         	call	_strlen	;wreg free
  3775  0005F4  C00F  F0DF         	movff	?_strlen,drawtext@textsize
  3776  0005F8  C010  F0E0         	movff	?_strlen+1,drawtext@textsize+1
  3777                           
  3778                           ;ST7735_TFT.c: 480: for(i = 0; i < textsize; i++){
  3779  0005FC  0E00               	movlw	0
  3780  0005FE  0100               	movlb	0	; () banked
  3781  000600  6FE2               	movwf	(drawtext@i+1)& (0+255),b
  3782  000602  0E00               	movlw	0
  3783  000604  6FE1               	movwf	drawtext@i& (0+255),b
  3784  000606  D064               	goto	l3880
  3785  000608                     l3854:
  3786                           
  3787                           ; BSR set to: 0
  3788                           ;ST7735_TFT.c: 481: if(wrap && ((cursor_x + size * 5) > 128)){
  3789  000608  506D               	movf	_wrap,w,c
  3790  00060A  B4D8               	btfsc	status,2,c
  3791  00060C  D034               	goto	l3870
  3792                           
  3793                           ; BSR set to: 0
  3794  00060E  503E               	movf	drawtext@size,w,c
  3795  000610  0D05               	mullw	5
  3796  000612  0100               	movlb	0	; () banked
  3797  000614  51E4               	movf	drawtext@cursor_x& (0+255),w,b
  3798  000616  6E3F               	movwf	??_drawtext& (0+255),c
  3799  000618  6A40               	clrf	(??_drawtext+1)& (0+255),c
  3800  00061A  50F3               	movf	prodl,w,c
  3801  00061C  263F               	addwf	??_drawtext,f,c
  3802  00061E  50F4               	movf	prodh,w,c
  3803  000620  2240               	addwfc	??_drawtext+1,f,c
  3804  000622  BE40               	btfsc	??_drawtext+1,7,c
  3805  000624  D028               	goto	l3870
  3806  000626  5040               	movf	??_drawtext+1,w,c
  3807  000628  E104               	bnz	u2640
  3808  00062A  0E81               	movlw	129
  3809  00062C  5C3F               	subwf	??_drawtext,w,c
  3810  00062E  A0D8               	btfss	status,0,c
  3811  000630  D022               	goto	l3870
  3812  000632                     u2640:
  3813                           
  3814                           ; BSR set to: 0
  3815                           ;ST7735_TFT.c: 482: cursor_x = 0;
  3816  000632  0E00               	movlw	0
  3817  000634  0100               	movlb	0	; () banked
  3818  000636  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;ST7735_TFT.c: 483: cursor_y = cursor_y + size * 7 + 3 ;
  3822  000638  503E               	movf	drawtext@size,w,c
  3823  00063A  0D07               	mullw	7
  3824  00063C  50F3               	movf	prodl,w,c
  3825  00063E  0100               	movlb	0	; () banked
  3826  000640  25E3               	addwf	drawtext@cursor_y& (0+255),w,b
  3827  000642  0F03               	addlw	3
  3828  000644  0100               	movlb	0	; () banked
  3829  000646  6FE3               	movwf	drawtext@cursor_y& (0+255),b
  3830                           
  3831                           ; BSR set to: 0
  3832                           ;ST7735_TFT.c: 484: if(cursor_y > 160) cursor_y = 160;
  3833  000648  0EA0               	movlw	160
  3834  00064A  0100               	movlb	0	; () banked
  3835  00064C  65E3               	cpfsgt	drawtext@cursor_y& (0+255),b
  3836  00064E  D004               	goto	l3866
  3837                           
  3838                           ; BSR set to: 0
  3839  000650  0EA0               	movlw	160
  3840  000652  0100               	movlb	0	; () banked
  3841  000654  6FE3               	movwf	drawtext@cursor_y& (0+255),b
  3842  000656  D000               	goto	l3866
  3843  000658                     l3866:
  3844                           
  3845                           ; BSR set to: 0
  3846                           ;ST7735_TFT.c: 485: if(_text[i] == 0x20) goto _skip; }
  3847  000658  0100               	movlb	0	; () banked
  3848  00065A  51E1               	movf	drawtext@i& (0+255),w,b
  3849  00065C  2438               	addwf	drawtext@_text,w,c
  3850  00065E  6ED9               	movwf	fsr2l,c
  3851  000660  0100               	movlb	0	; () banked
  3852  000662  51E2               	movf	(drawtext@i+1)& (0+255),w,b
  3853  000664  2039               	addwfc	drawtext@_text+1,w,c
  3854  000666  6EDA               	movwf	fsr2h,c
  3855  000668  0E20               	movlw	32
  3856  00066A  18DE               	xorwf	postinc2,w,c
  3857  00066C  B4D8               	btfsc	status,2,c
  3858  00066E  D02C               	goto	l3878
  3859  000670  D002               	goto	l3870
  3860                           
  3861                           ; BSR set to: 0
  3862  000672  D02A               	goto	l3878
  3863                           
  3864                           ; BSR set to: 0
  3865  000674  D000               	goto	l3870
  3866  000676                     l3870:
  3867                           
  3868                           ; BSR set to: 0
  3869                           ;ST7735_TFT.c: 486: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  3870  000676  C0E3  F02C         	movff	drawtext@cursor_y,drawChar@y
  3871  00067A  0100               	movlb	0	; () banked
  3872  00067C  51E1               	movf	drawtext@i& (0+255),w,b
  3873  00067E  2438               	addwf	drawtext@_text,w,c
  3874  000680  6ED9               	movwf	fsr2l,c
  3875  000682  0100               	movlb	0	; () banked
  3876  000684  51E2               	movf	(drawtext@i+1)& (0+255),w,b
  3877  000686  2039               	addwfc	drawtext@_text+1,w,c
  3878  000688  6EDA               	movwf	fsr2h,c
  3879  00068A  50DF               	movf	indf2,w,c
  3880  00068C  6E2D               	movwf	drawChar@c,c
  3881  00068E  C03A  F02E         	movff	drawtext@color,drawChar@color
  3882  000692  C03B  F02F         	movff	drawtext@color+1,drawChar@color+1
  3883  000696  C03C  F030         	movff	drawtext@bg,drawChar@bg
  3884  00069A  C03D  F031         	movff	drawtext@bg+1,drawChar@bg+1
  3885  00069E  C03E  F032         	movff	drawtext@size,drawChar@size
  3886  0006A2  0100               	movlb	0	; () banked
  3887  0006A4  51E4               	movf	drawtext@cursor_x& (0+255),w,b
  3888  0006A6  ECBB  F001         	call	_drawChar
  3889                           
  3890                           ;ST7735_TFT.c: 487: cursor_x = cursor_x + size * 6;
  3891  0006AA  503E               	movf	drawtext@size,w,c
  3892  0006AC  0D06               	mullw	6
  3893  0006AE  50F3               	movf	prodl,w,c
  3894  0006B0  0100               	movlb	0	; () banked
  3895  0006B2  25E4               	addwf	drawtext@cursor_x& (0+255),w,b
  3896  0006B4  0100               	movlb	0	; () banked
  3897  0006B6  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  3898                           
  3899                           ; BSR set to: 0
  3900                           ;ST7735_TFT.c: 488: if(cursor_x > 128) cursor_x = 128;
  3901  0006B8  0E80               	movlw	128
  3902  0006BA  0100               	movlb	0	; () banked
  3903  0006BC  65E4               	cpfsgt	drawtext@cursor_x& (0+255),b
  3904  0006BE  D004               	goto	l3878
  3905                           
  3906                           ; BSR set to: 0
  3907  0006C0  0E80               	movlw	128
  3908  0006C2  0100               	movlb	0	; () banked
  3909  0006C4  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  3910                           
  3911                           ; BSR set to: 0
  3912  0006C6  D000               	goto	l3878
  3913  0006C8                     l3878:
  3914                           
  3915                           ; BSR set to: 0
  3916  0006C8  0100               	movlb	0	; () banked
  3917  0006CA  4BE1               	infsnz	drawtext@i& (0+255),f,b
  3918  0006CC  2BE2               	incf	(drawtext@i+1)& (0+255),f,b
  3919  0006CE  D000               	goto	l3880
  3920  0006D0                     l3880:
  3921                           
  3922                           ; BSR set to: 0
  3923  0006D0  0100               	movlb	0	; () banked
  3924  0006D2  51DF               	movf	drawtext@textsize& (0+255),w,b
  3925  0006D4  0100               	movlb	0	; () banked
  3926  0006D6  5DE1               	subwf	drawtext@i& (0+255),w,b
  3927  0006D8  0100               	movlb	0	; () banked
  3928  0006DA  51E0               	movf	(drawtext@textsize+1)& (0+255),w,b
  3929  0006DC  0100               	movlb	0	; () banked
  3930  0006DE  59E2               	subwfb	(drawtext@i+1)& (0+255),w,b
  3931  0006E0  A0D8               	btfss	status,0,c
  3932  0006E2  D792               	goto	l3854
  3933                           
  3934                           ; BSR set to: 0
  3935                           
  3936                           ; BSR set to: 0
  3937  0006E4  0012               	return		;funcret
  3938  0006E6                     __end_of_drawtext:
  3939                           	opt stack 0
  3940                           tblptru	equ	0xFF8
  3941                           tblptrh	equ	0xFF7
  3942                           tblptrl	equ	0xFF6
  3943                           tablat	equ	0xFF5
  3944                           prodh	equ	0xFF4
  3945                           prodl	equ	0xFF3
  3946                           intcon2	equ	0xFF1
  3947                           postinc0	equ	0xFEE
  3948                           wreg	equ	0xFE8
  3949                           postdec1	equ	0xFE5
  3950                           fsr1l	equ	0xFE1
  3951                           indf2	equ	0xFDF
  3952                           postinc2	equ	0xFDE
  3953                           postdec2	equ	0xFDD
  3954                           fsr2h	equ	0xFDA
  3955                           fsr2l	equ	0xFD9
  3956                           status	equ	0xFD8
  3957                           
  3958 ;; *************** function _strlen *****************
  3959 ;; Defined at:
  3960 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  3961 ;; Parameters:    Size  Location     Type
  3962 ;;  s               2   14[COMRAM] PTR const unsigned char 
  3963 ;;		 -> NULL(0), buffer(31), 
  3964 ;; Auto vars:     Size  Location     Type
  3965 ;;  cp              2   18[COMRAM] PTR const unsigned char 
  3966 ;;		 -> NULL(0), buffer(31), 
  3967 ;; Return value:  Size  Location     Type
  3968 ;;                  2   14[COMRAM] unsigned int 
  3969 ;; Registers used:
  3970 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3971 ;; Tracked objects:
  3972 ;;		On entry : 0/0
  3973 ;;		On exit  : 0/0
  3974 ;;		Unchanged: 0/0
  3975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3976 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3977 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3978 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3979 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3980 ;;Total ram usage:        6 bytes
  3981 ;; Hardware stack levels used:    1
  3982 ;; Hardware stack levels required when called:    1
  3983 ;; This function calls:
  3984 ;;		Nothing
  3985 ;; This function is called by:
  3986 ;;		_drawtext
  3987 ;; This function uses a non-reentrant model
  3988 ;;
  3989                           
  3990                           	psect	text15
  3991  000FB8                     __ptext15:
  3992                           	opt stack 0
  3993  000FB8                     _strlen:
  3994                           	opt stack 26
  3995                           
  3996                           ; BSR set to: 0
  3997                           ;incstack = 0
  3998  000FB8  C00F  F013         	movff	strlen@s,strlen@cp
  3999  000FBC  C010  F014         	movff	strlen@s+1,strlen@cp+1
  4000  000FC0  D003               	goto	l3794
  4001  000FC2                     l3792:
  4002  000FC2  4A13               	infsnz	strlen@cp,f,c
  4003  000FC4  2A14               	incf	strlen@cp+1,f,c
  4004  000FC6  D000               	goto	l3794
  4005  000FC8                     l3794:
  4006  000FC8  C013  FFD9         	movff	strlen@cp,fsr2l
  4007  000FCC  C014  FFDA         	movff	strlen@cp+1,fsr2h
  4008  000FD0  50DF               	movf	indf2,w,c
  4009  000FD2  A4D8               	btfss	status,2,c
  4010  000FD4  D7F6               	goto	l3792
  4011  000FD6  C00F  F011         	movff	strlen@s,??_strlen
  4012  000FDA  C010  F012         	movff	strlen@s+1,??_strlen+1
  4013  000FDE  1E11               	comf	??_strlen,f,c
  4014  000FE0  1E12               	comf	??_strlen+1,f,c
  4015  000FE2  4A11               	infsnz	??_strlen,f,c
  4016  000FE4  2A12               	incf	??_strlen+1,f,c
  4017  000FE6  5013               	movf	strlen@cp,w,c
  4018  000FE8  2411               	addwf	??_strlen,w,c
  4019  000FEA  6E0F               	movwf	?_strlen,c
  4020  000FEC  5014               	movf	strlen@cp+1,w,c
  4021  000FEE  2012               	addwfc	??_strlen+1,w,c
  4022  000FF0  6E10               	movwf	?_strlen+1,c
  4023  000FF2  D000               	goto	l1158
  4024  000FF4                     l1158:
  4025  000FF4  0012               	return		;funcret
  4026  000FF6                     __end_of_strlen:
  4027                           	opt stack 0
  4028                           tblptru	equ	0xFF8
  4029                           tblptrh	equ	0xFF7
  4030                           tblptrl	equ	0xFF6
  4031                           tablat	equ	0xFF5
  4032                           prodh	equ	0xFF4
  4033                           prodl	equ	0xFF3
  4034                           intcon2	equ	0xFF1
  4035                           postinc0	equ	0xFEE
  4036                           wreg	equ	0xFE8
  4037                           postdec1	equ	0xFE5
  4038                           fsr1l	equ	0xFE1
  4039                           indf2	equ	0xFDF
  4040                           postinc2	equ	0xFDE
  4041                           postdec2	equ	0xFDD
  4042                           fsr2h	equ	0xFDA
  4043                           fsr2l	equ	0xFD9
  4044                           status	equ	0xFD8
  4045                           
  4046 ;; *************** function _drawChar *****************
  4047 ;; Defined at:
  4048 ;;		line 447 in file "ST7735_TFT.c"
  4049 ;; Parameters:    Size  Location     Type
  4050 ;;  x               1    wreg     unsigned char 
  4051 ;;  y               1   43[COMRAM] unsigned char 
  4052 ;;  c               1   44[COMRAM] unsigned char 
  4053 ;;  color           2   45[COMRAM] unsigned int 
  4054 ;;  bg              2   47[COMRAM] unsigned int 
  4055 ;;  size            1   49[COMRAM] unsigned char 
  4056 ;; Auto vars:     Size  Location     Type
  4057 ;;  x               1   51[COMRAM] unsigned char 
  4058 ;;  line            1   50[COMRAM] unsigned char 
  4059 ;;  i               1   53[COMRAM] unsigned char 
  4060 ;;  j               1   52[COMRAM] unsigned char 
  4061 ;; Return value:  Size  Location     Type
  4062 ;;		None               void
  4063 ;; Registers used:
  4064 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4065 ;; Tracked objects:
  4066 ;;		On entry : 0/0
  4067 ;;		On exit  : 0/0
  4068 ;;		Unchanged: 0/0
  4069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4070 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4071 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4073 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4074 ;;Total ram usage:       11 bytes
  4075 ;; Hardware stack levels used:    1
  4076 ;; Hardware stack levels required when called:    6
  4077 ;; This function calls:
  4078 ;;		___wmul
  4079 ;;		_drawPixel
  4080 ;;		_fillRect
  4081 ;; This function is called by:
  4082 ;;		_drawtext
  4083 ;; This function uses a non-reentrant model
  4084 ;;
  4085                           
  4086                           	psect	text16
  4087  000376                     __ptext16:
  4088                           	opt stack 0
  4089  000376                     _drawChar:
  4090                           	opt stack 21
  4091                           
  4092                           ;incstack = 0
  4093                           ;drawChar@x stored from wreg
  4094  000376  6E34               	movwf	drawChar@x,c
  4095                           
  4096                           ;ST7735_TFT.c: 449: char i, j;
  4097                           ;ST7735_TFT.c: 450: if((x >= 128) || (y >= 160))
  4098  000378  0E80               	movlw	128
  4099  00037A  6034               	cpfslt	drawChar@x,c
  4100  00037C  D0A6               	goto	l111
  4101  00037E  0E9F               	movlw	159
  4102  000380  642C               	cpfsgt	drawChar@y,c
  4103  000382  D001               	goto	l3740
  4104                           
  4105                           ;ST7735_TFT.c: 451: return;
  4106  000384  D0A2               	goto	l111
  4107  000386                     l3740:
  4108                           
  4109                           ;ST7735_TFT.c: 452: if(size < 1) size = 1;
  4110  000386  5032               	movf	drawChar@size,w,c
  4111  000388  A4D8               	btfss	status,2,c
  4112  00038A  D003               	goto	l3744
  4113  00038C  0E01               	movlw	1
  4114  00038E  6E32               	movwf	drawChar@size,c
  4115  000390  D000               	goto	l3744
  4116  000392                     l3744:
  4117                           
  4118                           ;ST7735_TFT.c: 453: if((c < ' ') || (c > '~'))
  4119  000392  0E1F               	movlw	31
  4120  000394  642D               	cpfsgt	drawChar@c,c
  4121  000396  D004               	goto	l3748
  4122  000398  0E7E               	movlw	126
  4123  00039A  642D               	cpfsgt	drawChar@c,c
  4124  00039C  D003               	goto	l113
  4125  00039E  D000               	goto	l3748
  4126  0003A0                     l3748:
  4127                           
  4128                           ;ST7735_TFT.c: 454: c = '?';
  4129  0003A0  0E3F               	movlw	63
  4130  0003A2  6E2D               	movwf	drawChar@c,c
  4131  0003A4                     l113:
  4132                           
  4133                           ;ST7735_TFT.c: 455: for(i=0; i<5; i++ ) {
  4134  0003A4  0E00               	movlw	0
  4135  0003A6  6E36               	movwf	drawChar@i,c
  4136  0003A8                     l3750:
  4137  0003A8  0E04               	movlw	4
  4138  0003AA  6436               	cpfsgt	drawChar@i,c
  4139  0003AC  D001               	goto	l3754
  4140  0003AE  D08D               	goto	l111
  4141  0003B0                     l3754:
  4142                           
  4143                           ;ST7735_TFT.c: 456: unsigned char line;
  4144                           ;ST7735_TFT.c: 457: if(c < 'S')
  4145  0003B0  0E53               	movlw	83
  4146  0003B2  602D               	cpfslt	drawChar@c,c
  4147  0003B4  D015               	goto	l3758
  4148                           
  4149                           ;ST7735_TFT.c: 458: line = font[(c - 32)*5 + i];
  4150  0003B6  0EE0               	movlw	224
  4151  0003B8  242D               	addwf	drawChar@c,w,c
  4152  0003BA  6E0F               	movwf	___wmul@multiplier,c
  4153  0003BC  6A10               	clrf	___wmul@multiplier+1,c
  4154  0003BE  0EFF               	movlw	255
  4155  0003C0  2210               	addwfc	___wmul@multiplier+1,f,c
  4156  0003C2  0E00               	movlw	0
  4157  0003C4  6E12               	movwf	___wmul@multiplicand+1,c
  4158  0003C6  0E05               	movlw	5
  4159  0003C8  6E11               	movwf	___wmul@multiplicand,c
  4160  0003CA  EC9D  F008         	call	___wmul	;wreg free
  4161  0003CE  5036               	movf	drawChar@i,w,c
  4162  0003D0  260F               	addwf	?___wmul,f,c
  4163  0003D2  0E00               	movlw	0
  4164  0003D4  2210               	addwfc	?___wmul+1,f,c
  4165  0003D6  0E9B               	movlw	low _font
  4166  0003D8  240F               	addwf	?___wmul,w,c
  4167  0003DA  6EF6               	movwf	tblptrl,c
  4168  0003DC  0EFD               	movlw	high _font
  4169  0003DE  D014               	goto	L1
  4170  0003E0                     l3758:
  4171                           
  4172                           ;ST7735_TFT.c: 459: else
  4173                           ;ST7735_TFT.c: 460: line = font2[(c - 'S')*5 + i];
  4174  0003E0  0EAD               	movlw	173
  4175  0003E2  242D               	addwf	drawChar@c,w,c
  4176  0003E4  6E0F               	movwf	___wmul@multiplier,c
  4177  0003E6  6A10               	clrf	___wmul@multiplier+1,c
  4178  0003E8  0EFF               	movlw	255
  4179  0003EA  2210               	addwfc	___wmul@multiplier+1,f,c
  4180  0003EC  0E00               	movlw	0
  4181  0003EE  6E12               	movwf	___wmul@multiplicand+1,c
  4182  0003F0  0E05               	movlw	5
  4183  0003F2  6E11               	movwf	___wmul@multiplicand,c
  4184  0003F4  EC9D  F008         	call	___wmul	;wreg free
  4185  0003F8  5036               	movf	drawChar@i,w,c
  4186  0003FA  260F               	addwf	?___wmul,f,c
  4187  0003FC  0E00               	movlw	0
  4188  0003FE  2210               	addwfc	?___wmul+1,f,c
  4189  000400  0E9A               	movlw	low _font2
  4190  000402  240F               	addwf	?___wmul,w,c
  4191  000404  6EF6               	movwf	tblptrl,c
  4192  000406  0EFE               	movlw	high _font2
  4193  000408                     L1:
  4194  000408  2010               	addwfc	?___wmul+1,w,c
  4195  00040A  6EF7               	movwf	tblptrh,c
  4196  00040C                     	if	0	;There are less than 3 active tblptr bytes
  4197  00040C                     	endif
  4198  00040C  0008               	tblrd		*
  4199  00040E  CFF5 F033          	movff	tablat,drawChar@line
  4200  000412  D000               	goto	l3760
  4201  000414                     l3760:
  4202                           
  4203                           ;ST7735_TFT.c: 461: for(j=0; j<7; j++, line >>= 1) {
  4204  000414  0E00               	movlw	0
  4205  000416  6E35               	movwf	drawChar@j,c
  4206  000418                     l3762:
  4207  000418  0E06               	movlw	6
  4208  00041A  6435               	cpfsgt	drawChar@j,c
  4209  00041C  D001               	goto	l120
  4210  00041E  D053               	goto	l3786
  4211  000420                     l120:
  4212                           
  4213                           ;ST7735_TFT.c: 462: if(line & 0x01) {
  4214  000420  A033               	btfss	drawChar@line,0,c
  4215  000422  D023               	goto	l3772
  4216                           
  4217                           ;ST7735_TFT.c: 463: if(size == 1) drawPixel(x+i, y+j, color);
  4218  000424  0432               	decf	drawChar@size,w,c
  4219  000426  A4D8               	btfss	status,2,c
  4220  000428  D00C               	goto	l3770
  4221  00042A  502C               	movf	drawChar@y,w,c
  4222  00042C  2435               	addwf	drawChar@j,w,c
  4223  00042E  6E16               	movwf	drawPixel@y,c
  4224  000430  C02E  F017         	movff	drawChar@color,drawPixel@color
  4225  000434  C02F  F018         	movff	drawChar@color+1,drawPixel@color+1
  4226  000438  5034               	movf	drawChar@x,w,c
  4227  00043A  2436               	addwf	drawChar@i,w,c
  4228  00043C  EC70  F008         	call	_drawPixel
  4229  000440  D03E               	goto	l3780
  4230  000442                     l3770:
  4231                           
  4232                           ;ST7735_TFT.c: 464: else fillRect(x+(i*size), y+(j*size), size, size, color);
  4233  000442  5035               	movf	drawChar@j,w,c
  4234  000444  0232               	mulwf	drawChar@size,c
  4235  000446  50F3               	movf	prodl,w,c
  4236  000448  242C               	addwf	drawChar@y,w,c
  4237  00044A  6E21               	movwf	fillRect@y,c
  4238  00044C  C032  F022         	movff	drawChar@size,fillRect@w
  4239  000450  C032  F023         	movff	drawChar@size,fillRect@h
  4240  000454  C02E  F024         	movff	drawChar@color,fillRect@color
  4241  000458  C02F  F025         	movff	drawChar@color+1,fillRect@color+1
  4242  00045C  5036               	movf	drawChar@i,w,c
  4243  00045E  0232               	mulwf	drawChar@size,c
  4244  000460  50F3               	movf	prodl,w,c
  4245  000462  2434               	addwf	drawChar@x,w,c
  4246  000464  EC53  F007         	call	_fillRect
  4247                           
  4248                           ;ST7735_TFT.c: 465: }
  4249  000468  D02A               	goto	l3780
  4250  00046A                     l3772:
  4251                           
  4252                           ;ST7735_TFT.c: 466: else if(bg != color) {
  4253  00046A  502E               	movf	drawChar@color,w,c
  4254  00046C  1830               	xorwf	drawChar@bg,w,c
  4255  00046E  E104               	bnz	u2500
  4256  000470  502F               	movf	drawChar@color+1,w,c
  4257  000472  1831               	xorwf	drawChar@bg+1,w,c
  4258  000474  B4D8               	btfsc	status,2,c
  4259  000476  D023               	goto	l3780
  4260  000478                     u2500:
  4261                           
  4262                           ;ST7735_TFT.c: 467: if(size == 1) drawPixel(x+i, y+j, bg);
  4263  000478  0432               	decf	drawChar@size,w,c
  4264  00047A  A4D8               	btfss	status,2,c
  4265  00047C  D00C               	goto	l3778
  4266  00047E  502C               	movf	drawChar@y,w,c
  4267  000480  2435               	addwf	drawChar@j,w,c
  4268  000482  6E16               	movwf	drawPixel@y,c
  4269  000484  C030  F017         	movff	drawChar@bg,drawPixel@color
  4270  000488  C031  F018         	movff	drawChar@bg+1,drawPixel@color+1
  4271  00048C  5034               	movf	drawChar@x,w,c
  4272  00048E  2436               	addwf	drawChar@i,w,c
  4273  000490  EC70  F008         	call	_drawPixel
  4274  000494  D014               	goto	l3780
  4275  000496                     l3778:
  4276                           
  4277                           ;ST7735_TFT.c: 468: else fillRect(x+i*size, y+j*size, size, size, bg);
  4278  000496  5035               	movf	drawChar@j,w,c
  4279  000498  0232               	mulwf	drawChar@size,c
  4280  00049A  50F3               	movf	prodl,w,c
  4281  00049C  242C               	addwf	drawChar@y,w,c
  4282  00049E  6E21               	movwf	fillRect@y,c
  4283  0004A0  C032  F022         	movff	drawChar@size,fillRect@w
  4284  0004A4  C032  F023         	movff	drawChar@size,fillRect@h
  4285  0004A8  C030  F024         	movff	drawChar@bg,fillRect@color
  4286  0004AC  C031  F025         	movff	drawChar@bg+1,fillRect@color+1
  4287  0004B0  5036               	movf	drawChar@i,w,c
  4288  0004B2  0232               	mulwf	drawChar@size,c
  4289  0004B4  50F3               	movf	prodl,w,c
  4290  0004B6  2434               	addwf	drawChar@x,w,c
  4291  0004B8  EC53  F007         	call	_fillRect
  4292  0004BC  D000               	goto	l3780
  4293  0004BE                     l3780:
  4294  0004BE  2A35               	incf	drawChar@j,f,c
  4295  0004C0  90D8               	bcf	status,0,c
  4296  0004C2  3233               	rrcf	drawChar@line,f,c
  4297  0004C4  D7A9               	goto	l3762
  4298  0004C6                     l3786:
  4299  0004C6  2A36               	incf	drawChar@i,f,c
  4300  0004C8  D76F               	goto	l3750
  4301  0004CA                     l111:
  4302  0004CA  0012               	return		;funcret
  4303  0004CC                     __end_of_drawChar:
  4304                           	opt stack 0
  4305                           tblptru	equ	0xFF8
  4306                           tblptrh	equ	0xFF7
  4307                           tblptrl	equ	0xFF6
  4308                           tablat	equ	0xFF5
  4309                           prodh	equ	0xFF4
  4310                           prodl	equ	0xFF3
  4311                           intcon2	equ	0xFF1
  4312                           postinc0	equ	0xFEE
  4313                           wreg	equ	0xFE8
  4314                           postdec1	equ	0xFE5
  4315                           fsr1l	equ	0xFE1
  4316                           indf2	equ	0xFDF
  4317                           postinc2	equ	0xFDE
  4318                           postdec2	equ	0xFDD
  4319                           fsr2h	equ	0xFDA
  4320                           fsr2l	equ	0xFD9
  4321                           status	equ	0xFD8
  4322                           
  4323 ;; *************** function _fillRect *****************
  4324 ;; Defined at:
  4325 ;;		line 437 in file "ST7735_TFT.c"
  4326 ;; Parameters:    Size  Location     Type
  4327 ;;  x               1    wreg     unsigned char 
  4328 ;;  y               1   32[COMRAM] unsigned char 
  4329 ;;  w               1   33[COMRAM] unsigned char 
  4330 ;;  h               1   34[COMRAM] unsigned char 
  4331 ;;  color           2   35[COMRAM] unsigned int 
  4332 ;; Auto vars:     Size  Location     Type
  4333 ;;  x               1   40[COMRAM] unsigned char 
  4334 ;;  i               2   41[COMRAM] int 
  4335 ;; Return value:  Size  Location     Type
  4336 ;;		None               void
  4337 ;; Registers used:
  4338 ;;		wreg, status,2, status,0, cstack
  4339 ;; Tracked objects:
  4340 ;;		On entry : 0/0
  4341 ;;		On exit  : 0/0
  4342 ;;		Unchanged: 0/0
  4343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4344 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4345 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4346 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4347 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4348 ;;Total ram usage:       11 bytes
  4349 ;; Hardware stack levels used:    1
  4350 ;; Hardware stack levels required when called:    5
  4351 ;; This function calls:
  4352 ;;		_drawFastVLine
  4353 ;; This function is called by:
  4354 ;;		_drawChar
  4355 ;; This function uses a non-reentrant model
  4356 ;;
  4357                           
  4358                           	psect	text17
  4359  000EA6                     __ptext17:
  4360                           	opt stack 0
  4361  000EA6                     _fillRect:
  4362                           	opt stack 21
  4363                           
  4364                           ;incstack = 0
  4365                           ;fillRect@x stored from wreg
  4366  000EA6  6E29               	movwf	fillRect@x,c
  4367                           
  4368                           ;ST7735_TFT.c: 439: signed int i;
  4369                           ;ST7735_TFT.c: 441: for (i = x; i < x + w; i++)
  4370  000EA8  C029  F02A         	movff	fillRect@x,fillRect@i
  4371  000EAC  6A2B               	clrf	fillRect@i+1,c
  4372  000EAE  D00E               	goto	l3642
  4373  000EB0                     l3638:
  4374                           
  4375                           ;ST7735_TFT.c: 442: {
  4376                           ;ST7735_TFT.c: 443: drawFastVLine(i, y, h, color);
  4377  000EB0  C021  F016         	movff	fillRect@y,drawFastVLine@y
  4378  000EB4  C023  F017         	movff	fillRect@h,drawFastVLine@h
  4379  000EB8  C024  F018         	movff	fillRect@color,drawFastVLine@color
  4380  000EBC  C025  F019         	movff	fillRect@color+1,drawFastVLine@color+1
  4381  000EC0  502A               	movf	fillRect@i,w,c
  4382  000EC2  EC33  F005         	call	_drawFastVLine
  4383  000EC6  4A2A               	infsnz	fillRect@i,f,c
  4384  000EC8  2A2B               	incf	fillRect@i+1,f,c
  4385  000ECA  D000               	goto	l3642
  4386  000ECC                     l3642:
  4387  000ECC  5022               	movf	fillRect@w,w,c
  4388  000ECE  C029  F026         	movff	fillRect@x,??_fillRect
  4389  000ED2  6A27               	clrf	(??_fillRect+1)& (0+255),c
  4390  000ED4  2626               	addwf	??_fillRect,f,c
  4391  000ED6  0E00               	movlw	0
  4392  000ED8  2227               	addwfc	??_fillRect+1,f,c
  4393  000EDA  5026               	movf	??_fillRect,w,c
  4394  000EDC  5C2A               	subwf	fillRect@i,w,c
  4395  000EDE  502B               	movf	fillRect@i+1,w,c
  4396  000EE0  0A80               	xorlw	128
  4397  000EE2  6E28               	movwf	(??_fillRect+2)& (0+255),c
  4398  000EE4  5027               	movf	??_fillRect+1,w,c
  4399  000EE6  0A80               	xorlw	128
  4400  000EE8  5828               	subwfb	(??_fillRect+2)& (0+255),w,c
  4401  000EEA  A0D8               	btfss	status,0,c
  4402  000EEC  D7E1               	goto	l3638
  4403  000EEE  0012               	return		;funcret
  4404  000EF0                     __end_of_fillRect:
  4405                           	opt stack 0
  4406                           tblptru	equ	0xFF8
  4407                           tblptrh	equ	0xFF7
  4408                           tblptrl	equ	0xFF6
  4409                           tablat	equ	0xFF5
  4410                           prodh	equ	0xFF4
  4411                           prodl	equ	0xFF3
  4412                           intcon2	equ	0xFF1
  4413                           postinc0	equ	0xFEE
  4414                           wreg	equ	0xFE8
  4415                           postdec1	equ	0xFE5
  4416                           fsr1l	equ	0xFE1
  4417                           indf2	equ	0xFDF
  4418                           postinc2	equ	0xFDE
  4419                           postdec2	equ	0xFDD
  4420                           fsr2h	equ	0xFDA
  4421                           fsr2l	equ	0xFD9
  4422                           status	equ	0xFD8
  4423                           
  4424 ;; *************** function _drawFastVLine *****************
  4425 ;; Defined at:
  4426 ;;		line 416 in file "ST7735_TFT.c"
  4427 ;; Parameters:    Size  Location     Type
  4428 ;;  x               1    wreg     unsigned char 
  4429 ;;  y               1   21[COMRAM] unsigned char 
  4430 ;;  h               1   22[COMRAM] unsigned char 
  4431 ;;  color           2   23[COMRAM] unsigned int 
  4432 ;; Auto vars:     Size  Location     Type
  4433 ;;  x               1   31[COMRAM] unsigned char 
  4434 ;;  lo              1   30[COMRAM] unsigned char 
  4435 ;;  hi              1   29[COMRAM] unsigned char 
  4436 ;; Return value:  Size  Location     Type
  4437 ;;		None               void
  4438 ;; Registers used:
  4439 ;;		wreg, status,2, status,0, cstack
  4440 ;; Tracked objects:
  4441 ;;		On entry : 0/0
  4442 ;;		On exit  : 0/0
  4443 ;;		Unchanged: 0/0
  4444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4445 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4446 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4447 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4448 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4449 ;;Total ram usage:       11 bytes
  4450 ;; Hardware stack levels used:    1
  4451 ;; Hardware stack levels required when called:    4
  4452 ;; This function calls:
  4453 ;;		_setAddrWindow
  4454 ;;		_spiwrite
  4455 ;; This function is called by:
  4456 ;;		_fillRect
  4457 ;;		_fillCircleHelper
  4458 ;;		_fillCircle
  4459 ;;		_drawRect
  4460 ;; This function uses a non-reentrant model
  4461 ;;
  4462                           
  4463                           	psect	text18
  4464  000A66                     __ptext18:
  4465                           	opt stack 0
  4466  000A66                     _drawFastVLine:
  4467                           	opt stack 21
  4468                           
  4469                           ;incstack = 0
  4470                           ;drawFastVLine@x stored from wreg
  4471  000A66  6E20               	movwf	drawFastVLine@x,c
  4472                           
  4473                           ;ST7735_TFT.c: 418: unsigned char hi, lo;
  4474                           ;ST7735_TFT.c: 419: if((x >= 128) || (y >= 160))
  4475  000A68  0E80               	movlw	128
  4476  000A6A  6020               	cpfslt	drawFastVLine@x,c
  4477  000A6C  D03F               	goto	l95
  4478  000A6E  0E9F               	movlw	159
  4479  000A70  6416               	cpfsgt	drawFastVLine@y,c
  4480  000A72  D001               	goto	l3588
  4481                           
  4482                           ;ST7735_TFT.c: 420: return;
  4483  000A74  D03B               	goto	l95
  4484  000A76                     l3588:
  4485                           
  4486                           ;ST7735_TFT.c: 421: if((y + h - 1) >= 160)
  4487  000A76  0EFF               	movlw	255
  4488  000A78  6E1A               	movwf	??_drawFastVLine& (0+255),c
  4489  000A7A  0EFF               	movlw	255
  4490  000A7C  6E1B               	movwf	(??_drawFastVLine+1)& (0+255),c
  4491  000A7E  5017               	movf	drawFastVLine@h,w,c
  4492  000A80  C016  F01C         	movff	drawFastVLine@y,??_drawFastVLine+2
  4493  000A84  6A1D               	clrf	(??_drawFastVLine+3)& (0+255),c
  4494  000A86  261C               	addwf	??_drawFastVLine+2,f,c
  4495  000A88  0E00               	movlw	0
  4496  000A8A  221D               	addwfc	??_drawFastVLine+3,f,c
  4497  000A8C  501A               	movf	??_drawFastVLine,w,c
  4498  000A8E  261C               	addwf	??_drawFastVLine+2,f,c
  4499  000A90  501B               	movf	??_drawFastVLine+1,w,c
  4500  000A92  221D               	addwfc	??_drawFastVLine+3,f,c
  4501  000A94  BE1D               	btfsc	??_drawFastVLine+3,7,c
  4502  000A96  D00B               	goto	l3592
  4503  000A98  501D               	movf	??_drawFastVLine+3,w,c
  4504  000A9A  E104               	bnz	u2340
  4505  000A9C  0EA0               	movlw	160
  4506  000A9E  5C1C               	subwf	??_drawFastVLine+2,w,c
  4507  000AA0  A0D8               	btfss	status,0,c
  4508  000AA2  D005               	goto	l3592
  4509  000AA4                     u2340:
  4510                           
  4511                           ;ST7735_TFT.c: 422: h = 160 - y;
  4512  000AA4  5016               	movf	drawFastVLine@y,w,c
  4513  000AA6  0800               	sublw	0
  4514  000AA8  0FA0               	addlw	160
  4515  000AAA  6E17               	movwf	drawFastVLine@h,c
  4516  000AAC  D000               	goto	l3592
  4517  000AAE                     l3592:
  4518                           
  4519                           ;ST7735_TFT.c: 423: hi = color >> 8; lo = color;
  4520  000AAE  5019               	movf	drawFastVLine@color+1,w,c
  4521  000AB0  6E1E               	movwf	drawFastVLine@hi,c
  4522  000AB2  C018  F01F         	movff	drawFastVLine@color,drawFastVLine@lo
  4523                           
  4524                           ;ST7735_TFT.c: 424: setAddrWindow(x, y, x, y + h - 1);
  4525  000AB6  C016  F012         	movff	drawFastVLine@y,setAddrWindow@y0
  4526  000ABA  C020  F013         	movff	drawFastVLine@x,setAddrWindow@x1
  4527  000ABE  5016               	movf	drawFastVLine@y,w,c
  4528  000AC0  2417               	addwf	drawFastVLine@h,w,c
  4529  000AC2  6E1A               	movwf	??_drawFastVLine& (0+255),c
  4530  000AC4  041A               	decf	??_drawFastVLine,w,c
  4531  000AC6  6E14               	movwf	setAddrWindow@y1,c
  4532  000AC8  5020               	movf	drawFastVLine@x,w,c
  4533  000ACA  EC06  F007         	call	_setAddrWindow
  4534                           
  4535                           ;ST7735_TFT.c: 425: PORTCbits.RC0 = 1;
  4536  000ACE  8082               	bsf	3970,0,c	;volatile
  4537                           
  4538                           ;ST7735_TFT.c: 426: PORTCbits.RC1 = 0;
  4539  000AD0  9282               	bcf	3970,1,c	;volatile
  4540                           
  4541                           ;ST7735_TFT.c: 428: while (h--) {
  4542  000AD2  D007               	goto	l3604
  4543  000AD4                     l3602:
  4544                           
  4545                           ;ST7735_TFT.c: 429: spiwrite(hi);
  4546  000AD4  501E               	movf	drawFastVLine@hi,w,c
  4547  000AD6  EC11  F009         	call	_spiwrite
  4548                           
  4549                           ;ST7735_TFT.c: 430: spiwrite(lo);
  4550  000ADA  501F               	movf	drawFastVLine@lo,w,c
  4551  000ADC  EC11  F009         	call	_spiwrite
  4552  000AE0  D000               	goto	l3604
  4553  000AE2                     l3604:
  4554  000AE2  0617               	decf	drawFastVLine@h,f,c
  4555  000AE4  2817               	incf	drawFastVLine@h,w,c
  4556  000AE6  A4D8               	btfss	status,2,c
  4557  000AE8  D7F5               	goto	l3602
  4558                           
  4559                           ;ST7735_TFT.c: 431: }
  4560                           ;ST7735_TFT.c: 432: PORTCbits.RC1 = 1;
  4561  000AEA  8282               	bsf	3970,1,c	;volatile
  4562  000AEC                     l95:
  4563  000AEC  0012               	return		;funcret
  4564  000AEE                     __end_of_drawFastVLine:
  4565                           	opt stack 0
  4566                           tblptru	equ	0xFF8
  4567                           tblptrh	equ	0xFF7
  4568                           tblptrl	equ	0xFF6
  4569                           tablat	equ	0xFF5
  4570                           prodh	equ	0xFF4
  4571                           prodl	equ	0xFF3
  4572                           intcon2	equ	0xFF1
  4573                           postinc0	equ	0xFEE
  4574                           wreg	equ	0xFE8
  4575                           postdec1	equ	0xFE5
  4576                           fsr1l	equ	0xFE1
  4577                           indf2	equ	0xFDF
  4578                           postinc2	equ	0xFDE
  4579                           postdec2	equ	0xFDD
  4580                           fsr2h	equ	0xFDA
  4581                           fsr2l	equ	0xFD9
  4582                           status	equ	0xFD8
  4583                           
  4584 ;; *************** function _drawPixel *****************
  4585 ;; Defined at:
  4586 ;;		line 407 in file "ST7735_TFT.c"
  4587 ;; Parameters:    Size  Location     Type
  4588 ;;  x               1    wreg     unsigned char 
  4589 ;;  y               1   21[COMRAM] unsigned char 
  4590 ;;  color           2   22[COMRAM] unsigned int 
  4591 ;; Auto vars:     Size  Location     Type
  4592 ;;  x               1   24[COMRAM] unsigned char 
  4593 ;; Return value:  Size  Location     Type
  4594 ;;		None               void
  4595 ;; Registers used:
  4596 ;;		wreg, status,2, status,0, cstack
  4597 ;; Tracked objects:
  4598 ;;		On entry : 0/0
  4599 ;;		On exit  : 0/0
  4600 ;;		Unchanged: 0/0
  4601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4602 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4603 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4605 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4606 ;;Total ram usage:        4 bytes
  4607 ;; Hardware stack levels used:    1
  4608 ;; Hardware stack levels required when called:    4
  4609 ;; This function calls:
  4610 ;;		_setAddrWindow
  4611 ;;		_write_data
  4612 ;; This function is called by:
  4613 ;;		_drawChar
  4614 ;;		_drawCircle
  4615 ;;		_drawCircleHelper
  4616 ;; This function uses a non-reentrant model
  4617 ;;
  4618                           
  4619                           	psect	text19
  4620  0010E0                     __ptext19:
  4621                           	opt stack 0
  4622  0010E0                     _drawPixel:
  4623                           	opt stack 22
  4624                           
  4625                           ;incstack = 0
  4626                           ;drawPixel@x stored from wreg
  4627  0010E0  6E19               	movwf	drawPixel@x,c
  4628                           
  4629                           ;ST7735_TFT.c: 409: if((x >= 128) || (y >= 160))
  4630  0010E2  0E80               	movlw	128
  4631  0010E4  6019               	cpfslt	drawPixel@x,c
  4632  0010E6  D013               	goto	l89
  4633  0010E8  0E9F               	movlw	159
  4634  0010EA  6416               	cpfsgt	drawPixel@y,c
  4635  0010EC  D001               	goto	l3630
  4636                           
  4637                           ;ST7735_TFT.c: 410: return;
  4638  0010EE  D00F               	goto	l89
  4639  0010F0                     l3630:
  4640                           
  4641                           ;ST7735_TFT.c: 411: setAddrWindow(x,y,x+1,y+1);
  4642  0010F0  C016  F012         	movff	drawPixel@y,setAddrWindow@y0
  4643  0010F4  2819               	incf	drawPixel@x,w,c
  4644  0010F6  6E13               	movwf	setAddrWindow@x1,c
  4645  0010F8  2816               	incf	drawPixel@y,w,c
  4646  0010FA  6E14               	movwf	setAddrWindow@y1,c
  4647  0010FC  5019               	movf	drawPixel@x,w,c
  4648  0010FE  EC06  F007         	call	_setAddrWindow
  4649                           
  4650                           ;ST7735_TFT.c: 412: write_data(color >> 8);
  4651  001102  5018               	movf	drawPixel@color+1,w,c
  4652  001104  EC3F  F009         	call	_write_data
  4653                           
  4654                           ;ST7735_TFT.c: 413: write_data(color & 0xFF);
  4655  001108  5017               	movf	drawPixel@color,w,c
  4656  00110A  EC3F  F009         	call	_write_data
  4657  00110E                     l89:
  4658  00110E  0012               	return		;funcret
  4659  001110                     __end_of_drawPixel:
  4660                           	opt stack 0
  4661                           tblptru	equ	0xFF8
  4662                           tblptrh	equ	0xFF7
  4663                           tblptrl	equ	0xFF6
  4664                           tablat	equ	0xFF5
  4665                           prodh	equ	0xFF4
  4666                           prodl	equ	0xFF3
  4667                           intcon2	equ	0xFF1
  4668                           postinc0	equ	0xFEE
  4669                           wreg	equ	0xFE8
  4670                           postdec1	equ	0xFE5
  4671                           fsr1l	equ	0xFE1
  4672                           indf2	equ	0xFDF
  4673                           postinc2	equ	0xFDE
  4674                           postdec2	equ	0xFDD
  4675                           fsr2h	equ	0xFDA
  4676                           fsr2l	equ	0xFD9
  4677                           status	equ	0xFD8
  4678                           
  4679 ;; *************** function _setAddrWindow *****************
  4680 ;; Defined at:
  4681 ;;		line 392 in file "ST7735_TFT.c"
  4682 ;; Parameters:    Size  Location     Type
  4683 ;;  x0              1    wreg     unsigned char 
  4684 ;;  y0              1   17[COMRAM] unsigned char 
  4685 ;;  x1              1   18[COMRAM] unsigned char 
  4686 ;;  y1              1   19[COMRAM] unsigned char 
  4687 ;; Auto vars:     Size  Location     Type
  4688 ;;  x0              1   20[COMRAM] unsigned char 
  4689 ;; Return value:  Size  Location     Type
  4690 ;;		None               void
  4691 ;; Registers used:
  4692 ;;		wreg, status,2, status,0, cstack
  4693 ;; Tracked objects:
  4694 ;;		On entry : 0/0
  4695 ;;		On exit  : 0/0
  4696 ;;		Unchanged: 0/0
  4697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4698 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4699 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4701 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4702 ;;Total ram usage:        4 bytes
  4703 ;; Hardware stack levels used:    1
  4704 ;; Hardware stack levels required when called:    3
  4705 ;; This function calls:
  4706 ;;		_write_command
  4707 ;;		_write_data
  4708 ;; This function is called by:
  4709 ;;		_drawPixel
  4710 ;;		_drawFastVLine
  4711 ;;		_fillRectangle
  4712 ;;		_drawFastHLine
  4713 ;; This function uses a non-reentrant model
  4714 ;;
  4715                           
  4716                           	psect	text20
  4717  000E0C                     __ptext20:
  4718                           	opt stack 0
  4719  000E0C                     _setAddrWindow:
  4720                           	opt stack 23
  4721                           
  4722                           ;incstack = 0
  4723                           ;setAddrWindow@x0 stored from wreg
  4724  000E0C  6E15               	movwf	setAddrWindow@x0,c
  4725                           
  4726                           ;ST7735_TFT.c: 394: write_command(0x2A);
  4727  000E0E  0E2A               	movlw	42
  4728  000E10  EC47  F009         	call	_write_command
  4729                           
  4730                           ;ST7735_TFT.c: 395: write_data(0);
  4731  000E14  0E00               	movlw	0
  4732  000E16  EC3F  F009         	call	_write_data
  4733                           
  4734                           ;ST7735_TFT.c: 396: write_data(x0 + colstart);
  4735  000E1A  5015               	movf	setAddrWindow@x0,w,c
  4736  000E1C  2458               	addwf	_colstart,w,c
  4737  000E1E  EC3F  F009         	call	_write_data
  4738                           
  4739                           ;ST7735_TFT.c: 397: write_data(0);
  4740  000E22  0E00               	movlw	0
  4741  000E24  EC3F  F009         	call	_write_data
  4742                           
  4743                           ;ST7735_TFT.c: 398: write_data(x1 + colstart);
  4744  000E28  5013               	movf	setAddrWindow@x1,w,c
  4745  000E2A  2458               	addwf	_colstart,w,c
  4746  000E2C  EC3F  F009         	call	_write_data
  4747                           
  4748                           ;ST7735_TFT.c: 399: write_command(0x2B);
  4749  000E30  0E2B               	movlw	43
  4750  000E32  EC47  F009         	call	_write_command
  4751                           
  4752                           ;ST7735_TFT.c: 400: write_data(0);
  4753  000E36  0E00               	movlw	0
  4754  000E38  EC3F  F009         	call	_write_data
  4755                           
  4756                           ;ST7735_TFT.c: 401: write_data(y0 + rowstart);
  4757  000E3C  5012               	movf	setAddrWindow@y0,w,c
  4758  000E3E  2460               	addwf	_rowstart,w,c
  4759  000E40  EC3F  F009         	call	_write_data
  4760                           
  4761                           ;ST7735_TFT.c: 402: write_data(0);
  4762  000E44  0E00               	movlw	0
  4763  000E46  EC3F  F009         	call	_write_data
  4764                           
  4765                           ;ST7735_TFT.c: 403: write_data(y1 + rowstart);
  4766  000E4A  5014               	movf	setAddrWindow@y1,w,c
  4767  000E4C  2460               	addwf	_rowstart,w,c
  4768  000E4E  EC3F  F009         	call	_write_data
  4769                           
  4770                           ;ST7735_TFT.c: 404: write_command(0x2C);
  4771  000E52  0E2C               	movlw	44
  4772  000E54  EC47  F009         	call	_write_command
  4773  000E58  0012               	return		;funcret
  4774  000E5A                     __end_of_setAddrWindow:
  4775                           	opt stack 0
  4776                           tblptru	equ	0xFF8
  4777                           tblptrh	equ	0xFF7
  4778                           tblptrl	equ	0xFF6
  4779                           tablat	equ	0xFF5
  4780                           prodh	equ	0xFF4
  4781                           prodl	equ	0xFF3
  4782                           intcon2	equ	0xFF1
  4783                           postinc0	equ	0xFEE
  4784                           wreg	equ	0xFE8
  4785                           postdec1	equ	0xFE5
  4786                           fsr1l	equ	0xFE1
  4787                           indf2	equ	0xFDF
  4788                           postinc2	equ	0xFDE
  4789                           postdec2	equ	0xFDD
  4790                           fsr2h	equ	0xFDA
  4791                           fsr2l	equ	0xFD9
  4792                           status	equ	0xFD8
  4793                           
  4794 ;; *************** function _TFT_GreenTab_Initialize *****************
  4795 ;; Defined at:
  4796 ;;		line 644 in file "ST7735_TFT.c"
  4797 ;; Parameters:    Size  Location     Type
  4798 ;;		None
  4799 ;; Auto vars:     Size  Location     Type
  4800 ;;		None
  4801 ;; Return value:  Size  Location     Type
  4802 ;;		None               void
  4803 ;; Registers used:
  4804 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4805 ;; Tracked objects:
  4806 ;;		On entry : 0/0
  4807 ;;		On exit  : 0/0
  4808 ;;		Unchanged: 0/0
  4809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4813 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4814 ;;Total ram usage:        0 bytes
  4815 ;; Hardware stack levels used:    1
  4816 ;; Hardware stack levels required when called:    4
  4817 ;; This function calls:
  4818 ;;		_Rcmd1
  4819 ;;		_Rcmd2red
  4820 ;;		_Rcmd3
  4821 ;;		_write_command
  4822 ;;		_write_data
  4823 ;; This function is called by:
  4824 ;;		_Initialize_Screen
  4825 ;; This function uses a non-reentrant model
  4826 ;;
  4827                           
  4828                           	psect	text21
  4829  001110                     __ptext21:
  4830                           	opt stack 0
  4831  001110                     _TFT_GreenTab_Initialize:
  4832                           	opt stack 24
  4833                           
  4834                           ;ST7735_TFT.c: 646: PORTCbits.RC1 = 1;
  4835                           
  4836                           ;incstack = 0
  4837  001110  8282               	bsf	3970,1,c	;volatile
  4838                           
  4839                           ;ST7735_TFT.c: 647: PORTCbits.RC0 = 0;
  4840  001112  9082               	bcf	3970,0,c	;volatile
  4841                           
  4842                           ;ST7735_TFT.c: 649: SSPSTAT=0x80;
  4843  001114  0E80               	movlw	128
  4844  001116  6EC7               	movwf	4039,c	;volatile
  4845                           
  4846                           ;ST7735_TFT.c: 650: SSPCON1=0x30;
  4847  001118  0E30               	movlw	48
  4848  00111A  6EC6               	movwf	4038,c	;volatile
  4849                           
  4850                           ;ST7735_TFT.c: 653: Rcmd1();
  4851  00111C  EC66  F002         	call	_Rcmd1	;wreg free
  4852                           
  4853                           ;ST7735_TFT.c: 654: Rcmd2red();
  4854  001120  ECFB  F007         	call	_Rcmd2red	;wreg free
  4855                           
  4856                           ;ST7735_TFT.c: 655: Rcmd3();
  4857  001124  EC73  F003         	call	_Rcmd3	;wreg free
  4858                           
  4859                           ;ST7735_TFT.c: 656: write_command(0x36);
  4860  001128  0E36               	movlw	54
  4861  00112A  EC47  F009         	call	_write_command
  4862                           
  4863                           ;ST7735_TFT.c: 657: write_data(0xC0);
  4864  00112E  0EC0               	movlw	192
  4865  001130  EC3F  F009         	call	_write_data
  4866                           
  4867                           ;ST7735_TFT.c: 658: _tft_type = 1;
  4868  001134  0E01               	movlw	1
  4869  001136  6E52               	movwf	__tft_type,c
  4870  001138  0012               	return		;funcret
  4871  00113A                     __end_of_TFT_GreenTab_Initialize:
  4872                           	opt stack 0
  4873                           tblptru	equ	0xFF8
  4874                           tblptrh	equ	0xFF7
  4875                           tblptrl	equ	0xFF6
  4876                           tablat	equ	0xFF5
  4877                           prodh	equ	0xFF4
  4878                           prodl	equ	0xFF3
  4879                           intcon2	equ	0xFF1
  4880                           postinc0	equ	0xFEE
  4881                           wreg	equ	0xFE8
  4882                           postdec1	equ	0xFE5
  4883                           fsr1l	equ	0xFE1
  4884                           indf2	equ	0xFDF
  4885                           postinc2	equ	0xFDE
  4886                           postdec2	equ	0xFDD
  4887                           fsr2h	equ	0xFDA
  4888                           fsr2l	equ	0xFD9
  4889                           status	equ	0xFD8
  4890                           
  4891 ;; *************** function _Rcmd3 *****************
  4892 ;; Defined at:
  4893 ;;		line 338 in file "ST7735_TFT.c"
  4894 ;; Parameters:    Size  Location     Type
  4895 ;;		None
  4896 ;; Auto vars:     Size  Location     Type
  4897 ;;		None
  4898 ;; Return value:  Size  Location     Type
  4899 ;;		None               void
  4900 ;; Registers used:
  4901 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4902 ;; Tracked objects:
  4903 ;;		On entry : 0/0
  4904 ;;		On exit  : 0/0
  4905 ;;		Unchanged: 0/0
  4906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4911 ;;Total ram usage:        0 bytes
  4912 ;; Hardware stack levels used:    1
  4913 ;; Hardware stack levels required when called:    3
  4914 ;; This function calls:
  4915 ;;		_delay_ms
  4916 ;;		_write_command
  4917 ;;		_write_data
  4918 ;; This function is called by:
  4919 ;;		_TFT_GreenTab_Initialize
  4920 ;;		_TFT_BlackTab_Initialize
  4921 ;; This function uses a non-reentrant model
  4922 ;;
  4923                           
  4924                           	psect	text22
  4925  0006E6                     __ptext22:
  4926                           	opt stack 0
  4927  0006E6                     _Rcmd3:
  4928                           	opt stack 24
  4929                           
  4930                           ;ST7735_TFT.c: 340: write_command(0xE0);
  4931                           
  4932                           ;incstack = 0
  4933  0006E6  0EE0               	movlw	224
  4934  0006E8  EC47  F009         	call	_write_command
  4935                           
  4936                           ;ST7735_TFT.c: 341: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  4937  0006EC  0E02               	movlw	2
  4938  0006EE  EC3F  F009         	call	_write_data
  4939  0006F2  0E1C               	movlw	28
  4940  0006F4  EC3F  F009         	call	_write_data
  4941  0006F8  0E07               	movlw	7
  4942  0006FA  EC3F  F009         	call	_write_data
  4943  0006FE  0E12               	movlw	18
  4944  000700  EC3F  F009         	call	_write_data
  4945                           
  4946                           ;ST7735_TFT.c: 342: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  4947  000704  0E37               	movlw	55
  4948  000706  EC3F  F009         	call	_write_data
  4949  00070A  0E32               	movlw	50
  4950  00070C  EC3F  F009         	call	_write_data
  4951  000710  0E29               	movlw	41
  4952  000712  EC3F  F009         	call	_write_data
  4953  000716  0E2D               	movlw	45
  4954  000718  EC3F  F009         	call	_write_data
  4955                           
  4956                           ;ST7735_TFT.c: 343: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  4957  00071C  0E29               	movlw	41
  4958  00071E  EC3F  F009         	call	_write_data
  4959  000722  0E25               	movlw	37
  4960  000724  EC3F  F009         	call	_write_data
  4961  000728  0E2B               	movlw	43
  4962  00072A  EC3F  F009         	call	_write_data
  4963  00072E  0E39               	movlw	57
  4964  000730  EC3F  F009         	call	_write_data
  4965                           
  4966                           ;ST7735_TFT.c: 344: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  4967  000734  0E00               	movlw	0
  4968  000736  EC3F  F009         	call	_write_data
  4969  00073A  0E01               	movlw	1
  4970  00073C  EC3F  F009         	call	_write_data
  4971  000740  0E03               	movlw	3
  4972  000742  EC3F  F009         	call	_write_data
  4973  000746  0E10               	movlw	16
  4974  000748  EC3F  F009         	call	_write_data
  4975                           
  4976                           ;ST7735_TFT.c: 345: write_command(0xE1);
  4977  00074C  0EE1               	movlw	225
  4978  00074E  EC47  F009         	call	_write_command
  4979                           
  4980                           ;ST7735_TFT.c: 346: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  4981  000752  0E03               	movlw	3
  4982  000754  EC3F  F009         	call	_write_data
  4983  000758  0E1D               	movlw	29
  4984  00075A  EC3F  F009         	call	_write_data
  4985  00075E  0E07               	movlw	7
  4986  000760  EC3F  F009         	call	_write_data
  4987  000764  0E06               	movlw	6
  4988  000766  EC3F  F009         	call	_write_data
  4989                           
  4990                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  4991  00076A  0E2E               	movlw	46
  4992  00076C  EC3F  F009         	call	_write_data
  4993  000770  0E2C               	movlw	44
  4994  000772  EC3F  F009         	call	_write_data
  4995  000776  0E29               	movlw	41
  4996  000778  EC3F  F009         	call	_write_data
  4997  00077C  0E2D               	movlw	45
  4998  00077E  EC3F  F009         	call	_write_data
  4999                           
  5000                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  5001  000782  0E2E               	movlw	46
  5002  000784  EC3F  F009         	call	_write_data
  5003  000788  0E2E               	movlw	46
  5004  00078A  EC3F  F009         	call	_write_data
  5005  00078E  0E37               	movlw	55
  5006  000790  EC3F  F009         	call	_write_data
  5007  000794  0E3F               	movlw	63
  5008  000796  EC3F  F009         	call	_write_data
  5009                           
  5010                           ;ST7735_TFT.c: 349: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  5011  00079A  0E00               	movlw	0
  5012  00079C  EC3F  F009         	call	_write_data
  5013  0007A0  0E00               	movlw	0
  5014  0007A2  EC3F  F009         	call	_write_data
  5015  0007A6  0E02               	movlw	2
  5016  0007A8  EC3F  F009         	call	_write_data
  5017  0007AC  0E10               	movlw	16
  5018  0007AE  EC3F  F009         	call	_write_data
  5019                           
  5020                           ;ST7735_TFT.c: 350: write_command(0x13);
  5021  0007B2  0E13               	movlw	19
  5022  0007B4  EC47  F009         	call	_write_command
  5023                           
  5024                           ;ST7735_TFT.c: 351: delay_ms(10);
  5025  0007B8  0E00               	movlw	0
  5026  0007BA  6E16               	movwf	delay_ms@ms+1,c
  5027  0007BC  0E0A               	movlw	10
  5028  0007BE  6E15               	movwf	delay_ms@ms,c
  5029  0007C0  ECDD  F006         	call	_delay_ms	;wreg free
  5030                           
  5031                           ;ST7735_TFT.c: 352: write_command(0x29);
  5032  0007C4  0E29               	movlw	41
  5033  0007C6  EC47  F009         	call	_write_command
  5034                           
  5035                           ;ST7735_TFT.c: 353: delay_ms(100);
  5036  0007CA  0E00               	movlw	0
  5037  0007CC  6E16               	movwf	delay_ms@ms+1,c
  5038  0007CE  0E64               	movlw	100
  5039  0007D0  6E15               	movwf	delay_ms@ms,c
  5040  0007D2  ECDD  F006         	call	_delay_ms	;wreg free
  5041  0007D6  0012               	return		;funcret
  5042  0007D8                     __end_of_Rcmd3:
  5043                           	opt stack 0
  5044                           tblptru	equ	0xFF8
  5045                           tblptrh	equ	0xFF7
  5046                           tblptrl	equ	0xFF6
  5047                           tablat	equ	0xFF5
  5048                           prodh	equ	0xFF4
  5049                           prodl	equ	0xFF3
  5050                           intcon2	equ	0xFF1
  5051                           postinc0	equ	0xFEE
  5052                           wreg	equ	0xFE8
  5053                           postdec1	equ	0xFE5
  5054                           fsr1l	equ	0xFE1
  5055                           indf2	equ	0xFDF
  5056                           postinc2	equ	0xFDE
  5057                           postdec2	equ	0xFDD
  5058                           fsr2h	equ	0xFDA
  5059                           fsr2l	equ	0xFD9
  5060                           status	equ	0xFD8
  5061                           
  5062 ;; *************** function _Rcmd2red *****************
  5063 ;; Defined at:
  5064 ;;		line 328 in file "ST7735_TFT.c"
  5065 ;; Parameters:    Size  Location     Type
  5066 ;;		None
  5067 ;; Auto vars:     Size  Location     Type
  5068 ;;		None
  5069 ;; Return value:  Size  Location     Type
  5070 ;;		None               void
  5071 ;; Registers used:
  5072 ;;		wreg, status,2, cstack
  5073 ;; Tracked objects:
  5074 ;;		On entry : 0/0
  5075 ;;		On exit  : 0/0
  5076 ;;		Unchanged: 0/0
  5077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5082 ;;Total ram usage:        0 bytes
  5083 ;; Hardware stack levels used:    1
  5084 ;; Hardware stack levels required when called:    3
  5085 ;; This function calls:
  5086 ;;		_write_command
  5087 ;;		_write_data
  5088 ;; This function is called by:
  5089 ;;		_TFT_GreenTab_Initialize
  5090 ;; This function uses a non-reentrant model
  5091 ;;
  5092                           
  5093                           	psect	text23
  5094  000FF6                     __ptext23:
  5095                           	opt stack 0
  5096  000FF6                     _Rcmd2red:
  5097                           	opt stack 24
  5098                           
  5099                           ;ST7735_TFT.c: 330: write_command(0x2A);
  5100                           
  5101                           ;incstack = 0
  5102  000FF6  0E2A               	movlw	42
  5103  000FF8  EC47  F009         	call	_write_command
  5104                           
  5105                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x00);
  5106  000FFC  0E00               	movlw	0
  5107  000FFE  EC3F  F009         	call	_write_data
  5108  001002  0E00               	movlw	0
  5109  001004  EC3F  F009         	call	_write_data
  5110                           
  5111                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x7F);
  5112  001008  0E00               	movlw	0
  5113  00100A  EC3F  F009         	call	_write_data
  5114  00100E  0E7F               	movlw	127
  5115  001010  EC3F  F009         	call	_write_data
  5116                           
  5117                           ;ST7735_TFT.c: 333: write_command(0x2B);
  5118  001014  0E2B               	movlw	43
  5119  001016  EC47  F009         	call	_write_command
  5120                           
  5121                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x00);
  5122  00101A  0E00               	movlw	0
  5123  00101C  EC3F  F009         	call	_write_data
  5124  001020  0E00               	movlw	0
  5125  001022  EC3F  F009         	call	_write_data
  5126                           
  5127                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x9F);
  5128  001026  0E00               	movlw	0
  5129  001028  EC3F  F009         	call	_write_data
  5130  00102C  0E9F               	movlw	159
  5131  00102E  EC3F  F009         	call	_write_data
  5132  001032  0012               	return		;funcret
  5133  001034                     __end_of_Rcmd2red:
  5134                           	opt stack 0
  5135                           tblptru	equ	0xFF8
  5136                           tblptrh	equ	0xFF7
  5137                           tblptrl	equ	0xFF6
  5138                           tablat	equ	0xFF5
  5139                           prodh	equ	0xFF4
  5140                           prodl	equ	0xFF3
  5141                           intcon2	equ	0xFF1
  5142                           postinc0	equ	0xFEE
  5143                           wreg	equ	0xFE8
  5144                           postdec1	equ	0xFE5
  5145                           fsr1l	equ	0xFE1
  5146                           indf2	equ	0xFDF
  5147                           postinc2	equ	0xFDE
  5148                           postdec2	equ	0xFDD
  5149                           fsr2h	equ	0xFDA
  5150                           fsr2l	equ	0xFD9
  5151                           status	equ	0xFD8
  5152                           
  5153 ;; *************** function _Rcmd1 *****************
  5154 ;; Defined at:
  5155 ;;		line 281 in file "ST7735_TFT.c"
  5156 ;; Parameters:    Size  Location     Type
  5157 ;;		None
  5158 ;; Auto vars:     Size  Location     Type
  5159 ;;		None
  5160 ;; Return value:  Size  Location     Type
  5161 ;;		None               void
  5162 ;; Registers used:
  5163 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5164 ;; Tracked objects:
  5165 ;;		On entry : 0/0
  5166 ;;		On exit  : 0/0
  5167 ;;		Unchanged: 0/0
  5168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5173 ;;Total ram usage:        0 bytes
  5174 ;; Hardware stack levels used:    1
  5175 ;; Hardware stack levels required when called:    3
  5176 ;; This function calls:
  5177 ;;		_delay_ms
  5178 ;;		_write_command
  5179 ;;		_write_data
  5180 ;; This function is called by:
  5181 ;;		_TFT_GreenTab_Initialize
  5182 ;;		_TFT_BlackTab_Initialize
  5183 ;; This function uses a non-reentrant model
  5184 ;;
  5185                           
  5186                           	psect	text24
  5187  0004CC                     __ptext24:
  5188                           	opt stack 0
  5189  0004CC                     _Rcmd1:
  5190                           	opt stack 24
  5191                           
  5192                           ;ST7735_TFT.c: 283: write_command(0x01);
  5193                           
  5194                           ;incstack = 0
  5195  0004CC  0E01               	movlw	1
  5196  0004CE  EC47  F009         	call	_write_command
  5197                           
  5198                           ;ST7735_TFT.c: 284: delay_ms(150);
  5199  0004D2  0E00               	movlw	0
  5200  0004D4  6E16               	movwf	delay_ms@ms+1,c
  5201  0004D6  0E96               	movlw	150
  5202  0004D8  6E15               	movwf	delay_ms@ms,c
  5203  0004DA  ECDD  F006         	call	_delay_ms	;wreg free
  5204                           
  5205                           ;ST7735_TFT.c: 285: write_command(0x11);
  5206  0004DE  0E11               	movlw	17
  5207  0004E0  EC47  F009         	call	_write_command
  5208                           
  5209                           ;ST7735_TFT.c: 286: delay_ms(500);
  5210  0004E4  0E01               	movlw	1
  5211  0004E6  6E16               	movwf	delay_ms@ms+1,c
  5212  0004E8  0EF4               	movlw	244
  5213  0004EA  6E15               	movwf	delay_ms@ms,c
  5214  0004EC  ECDD  F006         	call	_delay_ms	;wreg free
  5215                           
  5216                           ;ST7735_TFT.c: 287: write_command(0xB1);
  5217  0004F0  0EB1               	movlw	177
  5218  0004F2  EC47  F009         	call	_write_command
  5219                           
  5220                           ;ST7735_TFT.c: 288: write_data(0x01);
  5221  0004F6  0E01               	movlw	1
  5222  0004F8  EC3F  F009         	call	_write_data
  5223                           
  5224                           ;ST7735_TFT.c: 289: write_data(0x2C);
  5225  0004FC  0E2C               	movlw	44
  5226  0004FE  EC3F  F009         	call	_write_data
  5227                           
  5228                           ;ST7735_TFT.c: 290: write_data(0x2D);
  5229  000502  0E2D               	movlw	45
  5230  000504  EC3F  F009         	call	_write_data
  5231                           
  5232                           ;ST7735_TFT.c: 291: write_command(0xB2);
  5233  000508  0EB2               	movlw	178
  5234  00050A  EC47  F009         	call	_write_command
  5235                           
  5236                           ;ST7735_TFT.c: 292: write_data(0x01);
  5237  00050E  0E01               	movlw	1
  5238  000510  EC3F  F009         	call	_write_data
  5239                           
  5240                           ;ST7735_TFT.c: 293: write_data(0x2C);
  5241  000514  0E2C               	movlw	44
  5242  000516  EC3F  F009         	call	_write_data
  5243                           
  5244                           ;ST7735_TFT.c: 294: write_data(0x2D);
  5245  00051A  0E2D               	movlw	45
  5246  00051C  EC3F  F009         	call	_write_data
  5247                           
  5248                           ;ST7735_TFT.c: 295: write_command(0xB3);
  5249  000520  0EB3               	movlw	179
  5250  000522  EC47  F009         	call	_write_command
  5251                           
  5252                           ;ST7735_TFT.c: 296: write_data(0x01);
  5253  000526  0E01               	movlw	1
  5254  000528  EC3F  F009         	call	_write_data
  5255                           
  5256                           ;ST7735_TFT.c: 297: write_data(0x2C);
  5257  00052C  0E2C               	movlw	44
  5258  00052E  EC3F  F009         	call	_write_data
  5259                           
  5260                           ;ST7735_TFT.c: 298: write_data(0x2D);
  5261  000532  0E2D               	movlw	45
  5262  000534  EC3F  F009         	call	_write_data
  5263                           
  5264                           ;ST7735_TFT.c: 299: write_data(0x01);
  5265  000538  0E01               	movlw	1
  5266  00053A  EC3F  F009         	call	_write_data
  5267                           
  5268                           ;ST7735_TFT.c: 300: write_data(0x2C);
  5269  00053E  0E2C               	movlw	44
  5270  000540  EC3F  F009         	call	_write_data
  5271                           
  5272                           ;ST7735_TFT.c: 301: write_data(0x2D);
  5273  000544  0E2D               	movlw	45
  5274  000546  EC3F  F009         	call	_write_data
  5275                           
  5276                           ;ST7735_TFT.c: 302: write_command(0xB4);
  5277  00054A  0EB4               	movlw	180
  5278  00054C  EC47  F009         	call	_write_command
  5279                           
  5280                           ;ST7735_TFT.c: 303: write_data(0x07);
  5281  000550  0E07               	movlw	7
  5282  000552  EC3F  F009         	call	_write_data
  5283                           
  5284                           ;ST7735_TFT.c: 304: write_command(0xC0);
  5285  000556  0EC0               	movlw	192
  5286  000558  EC47  F009         	call	_write_command
  5287                           
  5288                           ;ST7735_TFT.c: 305: write_data(0xA2);
  5289  00055C  0EA2               	movlw	162
  5290  00055E  EC3F  F009         	call	_write_data
  5291                           
  5292                           ;ST7735_TFT.c: 306: write_data(0x02);
  5293  000562  0E02               	movlw	2
  5294  000564  EC3F  F009         	call	_write_data
  5295                           
  5296                           ;ST7735_TFT.c: 307: write_data(0x84);
  5297  000568  0E84               	movlw	132
  5298  00056A  EC3F  F009         	call	_write_data
  5299                           
  5300                           ;ST7735_TFT.c: 308: write_command(0xC1);
  5301  00056E  0EC1               	movlw	193
  5302  000570  EC47  F009         	call	_write_command
  5303                           
  5304                           ;ST7735_TFT.c: 309: write_data(0xC5);
  5305  000574  0EC5               	movlw	197
  5306  000576  EC3F  F009         	call	_write_data
  5307                           
  5308                           ;ST7735_TFT.c: 310: write_command(0xC2);
  5309  00057A  0EC2               	movlw	194
  5310  00057C  EC47  F009         	call	_write_command
  5311                           
  5312                           ;ST7735_TFT.c: 311: write_data(0x0A);
  5313  000580  0E0A               	movlw	10
  5314  000582  EC3F  F009         	call	_write_data
  5315                           
  5316                           ;ST7735_TFT.c: 312: write_data(0x00);
  5317  000586  0E00               	movlw	0
  5318  000588  EC3F  F009         	call	_write_data
  5319                           
  5320                           ;ST7735_TFT.c: 313: write_command(0xC3);
  5321  00058C  0EC3               	movlw	195
  5322  00058E  EC47  F009         	call	_write_command
  5323                           
  5324                           ;ST7735_TFT.c: 314: write_data(0x8A);
  5325  000592  0E8A               	movlw	138
  5326  000594  EC3F  F009         	call	_write_data
  5327                           
  5328                           ;ST7735_TFT.c: 315: write_data(0x2A);
  5329  000598  0E2A               	movlw	42
  5330  00059A  EC3F  F009         	call	_write_data
  5331                           
  5332                           ;ST7735_TFT.c: 316: write_command(0xC4);
  5333  00059E  0EC4               	movlw	196
  5334  0005A0  EC47  F009         	call	_write_command
  5335                           
  5336                           ;ST7735_TFT.c: 317: write_data(0x8A);
  5337  0005A4  0E8A               	movlw	138
  5338  0005A6  EC3F  F009         	call	_write_data
  5339                           
  5340                           ;ST7735_TFT.c: 318: write_data(0xEE);
  5341  0005AA  0EEE               	movlw	238
  5342  0005AC  EC3F  F009         	call	_write_data
  5343                           
  5344                           ;ST7735_TFT.c: 319: write_command(0xC5);
  5345  0005B0  0EC5               	movlw	197
  5346  0005B2  EC47  F009         	call	_write_command
  5347                           
  5348                           ;ST7735_TFT.c: 320: write_data(0x0E);
  5349  0005B6  0E0E               	movlw	14
  5350  0005B8  EC3F  F009         	call	_write_data
  5351                           
  5352                           ;ST7735_TFT.c: 321: write_command(0x20);
  5353  0005BC  0E20               	movlw	32
  5354  0005BE  EC47  F009         	call	_write_command
  5355                           
  5356                           ;ST7735_TFT.c: 322: write_command(0x36);
  5357  0005C2  0E36               	movlw	54
  5358  0005C4  EC47  F009         	call	_write_command
  5359                           
  5360                           ;ST7735_TFT.c: 323: write_data(0xC8);
  5361  0005C8  0EC8               	movlw	200
  5362  0005CA  EC3F  F009         	call	_write_data
  5363                           
  5364                           ;ST7735_TFT.c: 324: write_command(0x3A);
  5365  0005CE  0E3A               	movlw	58
  5366  0005D0  EC47  F009         	call	_write_command
  5367                           
  5368                           ;ST7735_TFT.c: 325: write_data(0x05);
  5369  0005D4  0E05               	movlw	5
  5370  0005D6  EC3F  F009         	call	_write_data
  5371  0005DA  0012               	return		;funcret
  5372  0005DC                     __end_of_Rcmd1:
  5373                           	opt stack 0
  5374                           tblptru	equ	0xFF8
  5375                           tblptrh	equ	0xFF7
  5376                           tblptrl	equ	0xFF6
  5377                           tablat	equ	0xFF5
  5378                           prodh	equ	0xFF4
  5379                           prodl	equ	0xFF3
  5380                           intcon2	equ	0xFF1
  5381                           postinc0	equ	0xFEE
  5382                           wreg	equ	0xFE8
  5383                           postdec1	equ	0xFE5
  5384                           fsr1l	equ	0xFE1
  5385                           indf2	equ	0xFDF
  5386                           postinc2	equ	0xFDE
  5387                           postdec2	equ	0xFDD
  5388                           fsr2h	equ	0xFDA
  5389                           fsr2l	equ	0xFD9
  5390                           status	equ	0xFD8
  5391                           
  5392 ;; *************** function _write_data *****************
  5393 ;; Defined at:
  5394 ;;		line 209 in file "ST7735_TFT.c"
  5395 ;; Parameters:    Size  Location     Type
  5396 ;;  data_           1    wreg     unsigned char 
  5397 ;; Auto vars:     Size  Location     Type
  5398 ;;  data_           1   16[COMRAM] unsigned char 
  5399 ;; Return value:  Size  Location     Type
  5400 ;;		None               void
  5401 ;; Registers used:
  5402 ;;		wreg, status,2, cstack
  5403 ;; Tracked objects:
  5404 ;;		On entry : 0/0
  5405 ;;		On exit  : 0/0
  5406 ;;		Unchanged: 0/0
  5407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5409 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5411 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5412 ;;Total ram usage:        1 bytes
  5413 ;; Hardware stack levels used:    1
  5414 ;; Hardware stack levels required when called:    2
  5415 ;; This function calls:
  5416 ;;		_spiwrite
  5417 ;; This function is called by:
  5418 ;;		_Rcmd1
  5419 ;;		_Rcmd2red
  5420 ;;		_Rcmd3
  5421 ;;		_setAddrWindow
  5422 ;;		_drawPixel
  5423 ;;		_TFT_GreenTab_Initialize
  5424 ;;		_Bcmd
  5425 ;;		_setScrollDefinition
  5426 ;;		_Rcmd2green
  5427 ;;		_VerticalScroll
  5428 ;; This function uses a non-reentrant model
  5429 ;;
  5430                           
  5431                           	psect	text25
  5432  00127E                     __ptext25:
  5433                           	opt stack 0
  5434  00127E                     _write_data:
  5435                           	opt stack 23
  5436                           
  5437                           ;incstack = 0
  5438                           ;write_data@data_ stored from wreg
  5439  00127E  6E11               	movwf	write_data@data_,c
  5440                           
  5441                           ;ST7735_TFT.c: 211: PORTCbits.RC1 = 0;
  5442  001280  9282               	bcf	3970,1,c	;volatile
  5443                           
  5444                           ;ST7735_TFT.c: 212: PORTCbits.RC0 = 1;
  5445  001282  8082               	bsf	3970,0,c	;volatile
  5446                           
  5447                           ;ST7735_TFT.c: 213: spiwrite(data_);
  5448  001284  5011               	movf	write_data@data_,w,c
  5449  001286  EC11  F009         	call	_spiwrite
  5450                           
  5451                           ;ST7735_TFT.c: 214: PORTCbits.RC1 = 1;
  5452  00128A  8282               	bsf	3970,1,c	;volatile
  5453  00128C  0012               	return		;funcret
  5454  00128E                     __end_of_write_data:
  5455                           	opt stack 0
  5456                           tblptru	equ	0xFF8
  5457                           tblptrh	equ	0xFF7
  5458                           tblptrl	equ	0xFF6
  5459                           tablat	equ	0xFF5
  5460                           prodh	equ	0xFF4
  5461                           prodl	equ	0xFF3
  5462                           intcon2	equ	0xFF1
  5463                           postinc0	equ	0xFEE
  5464                           wreg	equ	0xFE8
  5465                           postdec1	equ	0xFE5
  5466                           fsr1l	equ	0xFE1
  5467                           indf2	equ	0xFDF
  5468                           postinc2	equ	0xFDE
  5469                           postdec2	equ	0xFDD
  5470                           fsr2h	equ	0xFDA
  5471                           fsr2l	equ	0xFD9
  5472                           status	equ	0xFD8
  5473                           
  5474 ;; *************** function _write_command *****************
  5475 ;; Defined at:
  5476 ;;		line 198 in file "ST7735_TFT.c"
  5477 ;; Parameters:    Size  Location     Type
  5478 ;;  cmd_            1    wreg     unsigned char 
  5479 ;; Auto vars:     Size  Location     Type
  5480 ;;  cmd_            1   16[COMRAM] unsigned char 
  5481 ;; Return value:  Size  Location     Type
  5482 ;;		None               void
  5483 ;; Registers used:
  5484 ;;		wreg, status,2, cstack
  5485 ;; Tracked objects:
  5486 ;;		On entry : 0/0
  5487 ;;		On exit  : 0/0
  5488 ;;		Unchanged: 0/0
  5489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5491 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5493 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5494 ;;Total ram usage:        1 bytes
  5495 ;; Hardware stack levels used:    1
  5496 ;; Hardware stack levels required when called:    2
  5497 ;; This function calls:
  5498 ;;		_spiwrite
  5499 ;; This function is called by:
  5500 ;;		_Rcmd1
  5501 ;;		_Rcmd2red
  5502 ;;		_Rcmd3
  5503 ;;		_setAddrWindow
  5504 ;;		_TFT_GreenTab_Initialize
  5505 ;;		_Bcmd
  5506 ;;		_setScrollDefinition
  5507 ;;		_Rcmd2green
  5508 ;;		_VerticalScroll
  5509 ;; This function uses a non-reentrant model
  5510 ;;
  5511                           
  5512                           	psect	text26
  5513  00128E                     __ptext26:
  5514                           	opt stack 0
  5515  00128E                     _write_command:
  5516                           	opt stack 23
  5517                           
  5518                           ;incstack = 0
  5519                           ;write_command@cmd_ stored from wreg
  5520  00128E  6E11               	movwf	write_command@cmd_,c
  5521                           
  5522                           ;ST7735_TFT.c: 200: PORTCbits.RC1 = 0;
  5523  001290  9282               	bcf	3970,1,c	;volatile
  5524                           
  5525                           ;ST7735_TFT.c: 202: PORTCbits.RC0 = 0;
  5526  001292  9082               	bcf	3970,0,c	;volatile
  5527                           
  5528                           ;ST7735_TFT.c: 203: spiwrite(cmd_);
  5529  001294  5011               	movf	write_command@cmd_,w,c
  5530  001296  EC11  F009         	call	_spiwrite
  5531                           
  5532                           ;ST7735_TFT.c: 205: PORTCbits.RC1 = 1;
  5533  00129A  8282               	bsf	3970,1,c	;volatile
  5534  00129C  0012               	return		;funcret
  5535  00129E                     __end_of_write_command:
  5536                           	opt stack 0
  5537                           tblptru	equ	0xFF8
  5538                           tblptrh	equ	0xFF7
  5539                           tblptrl	equ	0xFF6
  5540                           tablat	equ	0xFF5
  5541                           prodh	equ	0xFF4
  5542                           prodl	equ	0xFF3
  5543                           intcon2	equ	0xFF1
  5544                           postinc0	equ	0xFEE
  5545                           wreg	equ	0xFE8
  5546                           postdec1	equ	0xFE5
  5547                           fsr1l	equ	0xFE1
  5548                           indf2	equ	0xFDF
  5549                           postinc2	equ	0xFDE
  5550                           postdec2	equ	0xFDD
  5551                           fsr2h	equ	0xFDA
  5552                           fsr2l	equ	0xFD9
  5553                           status	equ	0xFD8
  5554                           
  5555 ;; *************** function _spiwrite *****************
  5556 ;; Defined at:
  5557 ;;		line 189 in file "ST7735_TFT.c"
  5558 ;; Parameters:    Size  Location     Type
  5559 ;;  spidata         1    wreg     unsigned char 
  5560 ;; Auto vars:     Size  Location     Type
  5561 ;;  spidata         1   15[COMRAM] unsigned char 
  5562 ;;  x               1   14[COMRAM] unsigned char 
  5563 ;; Return value:  Size  Location     Type
  5564 ;;		None               void
  5565 ;; Registers used:
  5566 ;;		wreg
  5567 ;; Tracked objects:
  5568 ;;		On entry : 0/0
  5569 ;;		On exit  : 0/0
  5570 ;;		Unchanged: 0/0
  5571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5573 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5575 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5576 ;;Total ram usage:        2 bytes
  5577 ;; Hardware stack levels used:    1
  5578 ;; Hardware stack levels required when called:    1
  5579 ;; This function calls:
  5580 ;;		Nothing
  5581 ;; This function is called by:
  5582 ;;		_write_command
  5583 ;;		_write_data
  5584 ;;		_drawFastVLine
  5585 ;;		_fillRectangle
  5586 ;;		_drawFastHLine
  5587 ;; This function uses a non-reentrant model
  5588 ;;
  5589                           
  5590                           	psect	text27
  5591  001222                     __ptext27:
  5592                           	opt stack 0
  5593  001222                     _spiwrite:
  5594                           	opt stack 25
  5595                           
  5596                           ;incstack = 0
  5597                           ;spiwrite@spidata stored from wreg
  5598  001222  6E10               	movwf	spiwrite@spidata,c
  5599                           
  5600                           ;ST7735_TFT.c: 191: char x;
  5601                           ;ST7735_TFT.c: 192: PIR1bits.SSPIF = 0;
  5602  001224  969E               	bcf	3998,3,c	;volatile
  5603                           
  5604                           ;ST7735_TFT.c: 193: x = SSPBUF;
  5605  001226  CFC9 F00F          	movff	4041,spiwrite@x	;volatile
  5606                           
  5607                           ;ST7735_TFT.c: 194: SSPBUF = spidata;
  5608  00122A  C010  FFC9         	movff	spiwrite@spidata,4041	;volatile
  5609                           
  5610                           ;ST7735_TFT.c: 195: while (!SSPSTATbits.BF);
  5611  00122E  D000               	goto	l45
  5612  001230                     l45:
  5613  001230  A0C7               	btfss	4039,0,c	;volatile
  5614  001232  D7FE               	goto	l45
  5615  001234  0012               	return		;funcret
  5616  001236                     __end_of_spiwrite:
  5617                           	opt stack 0
  5618                           tblptru	equ	0xFF8
  5619                           tblptrh	equ	0xFF7
  5620                           tblptrl	equ	0xFF6
  5621                           tablat	equ	0xFF5
  5622                           prodh	equ	0xFF4
  5623                           prodl	equ	0xFF3
  5624                           intcon2	equ	0xFF1
  5625                           postinc0	equ	0xFEE
  5626                           wreg	equ	0xFE8
  5627                           postdec1	equ	0xFE5
  5628                           fsr1l	equ	0xFE1
  5629                           indf2	equ	0xFDF
  5630                           postinc2	equ	0xFDE
  5631                           postdec2	equ	0xFDD
  5632                           fsr2h	equ	0xFDA
  5633                           fsr2l	equ	0xFD9
  5634                           status	equ	0xFD8
  5635                           
  5636 ;; *************** function _LCD_Reset *****************
  5637 ;; Defined at:
  5638 ;;		line 217 in file "ST7735_TFT.c"
  5639 ;; Parameters:    Size  Location     Type
  5640 ;;		None
  5641 ;; Auto vars:     Size  Location     Type
  5642 ;;		None
  5643 ;; Return value:  Size  Location     Type
  5644 ;;		None               void
  5645 ;; Registers used:
  5646 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5647 ;; Tracked objects:
  5648 ;;		On entry : 0/0
  5649 ;;		On exit  : 0/0
  5650 ;;		Unchanged: 0/0
  5651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5655 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5656 ;;Total ram usage:        0 bytes
  5657 ;; Hardware stack levels used:    1
  5658 ;; Hardware stack levels required when called:    3
  5659 ;; This function calls:
  5660 ;;		_delay_ms
  5661 ;; This function is called by:
  5662 ;;		_Initialize_Screen
  5663 ;; This function uses a non-reentrant model
  5664 ;;
  5665                           
  5666                           	psect	text28
  5667  001236                     __ptext28:
  5668                           	opt stack 0
  5669  001236                     _LCD_Reset:
  5670                           	opt stack 25
  5671                           
  5672                           ;ST7735_TFT.c: 219: PORTCbits.RC4 = 0;
  5673                           
  5674                           ;incstack = 0
  5675  001236  9882               	bcf	3970,4,c	;volatile
  5676                           
  5677                           ;ST7735_TFT.c: 220: delay_ms(100);
  5678  001238  0E00               	movlw	0
  5679  00123A  6E16               	movwf	delay_ms@ms+1,c
  5680  00123C  0E64               	movlw	100
  5681  00123E  6E15               	movwf	delay_ms@ms,c
  5682  001240  ECDD  F006         	call	_delay_ms	;wreg free
  5683                           
  5684                           ;ST7735_TFT.c: 221: PORTCbits.RC4 = 1;
  5685  001244  8882               	bsf	3970,4,c	;volatile
  5686  001246  0012               	return		;funcret
  5687  001248                     __end_of_LCD_Reset:
  5688                           	opt stack 0
  5689                           tblptru	equ	0xFF8
  5690                           tblptrh	equ	0xFF7
  5691                           tblptrl	equ	0xFF6
  5692                           tablat	equ	0xFF5
  5693                           prodh	equ	0xFF4
  5694                           prodl	equ	0xFF3
  5695                           intcon2	equ	0xFF1
  5696                           postinc0	equ	0xFEE
  5697                           wreg	equ	0xFE8
  5698                           postdec1	equ	0xFE5
  5699                           fsr1l	equ	0xFE1
  5700                           indf2	equ	0xFDF
  5701                           postinc2	equ	0xFDE
  5702                           postdec2	equ	0xFDD
  5703                           fsr2h	equ	0xFDA
  5704                           fsr2l	equ	0xFD9
  5705                           status	equ	0xFD8
  5706                           
  5707 ;; *************** function _delay_ms *****************
  5708 ;; Defined at:
  5709 ;;		line 64 in file "ST7735_TFT.c"
  5710 ;; Parameters:    Size  Location     Type
  5711 ;;  ms              2   20[COMRAM] int 
  5712 ;; Auto vars:     Size  Location     Type
  5713 ;;  count           2   24[COMRAM] int 
  5714 ;; Return value:  Size  Location     Type
  5715 ;;		None               void
  5716 ;; Registers used:
  5717 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5718 ;; Tracked objects:
  5719 ;;		On entry : 0/0
  5720 ;;		On exit  : 0/0
  5721 ;;		Unchanged: 0/0
  5722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5723 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5724 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5725 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5726 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5727 ;;Total ram usage:        6 bytes
  5728 ;; Hardware stack levels used:    1
  5729 ;; Hardware stack levels required when called:    2
  5730 ;; This function calls:
  5731 ;;		___wmul
  5732 ;; This function is called by:
  5733 ;;		_LCD_Reset
  5734 ;;		_Rcmd1
  5735 ;;		_Rcmd3
  5736 ;;		_Bcmd
  5737 ;; This function uses a non-reentrant model
  5738 ;;
  5739                           
  5740                           	psect	text29
  5741  000DBA                     __ptext29:
  5742                           	opt stack 0
  5743  000DBA                     _delay_ms:
  5744                           	opt stack 24
  5745                           
  5746                           ;ST7735_TFT.c: 70: int count;
  5747                           ;ST7735_TFT.c: 71: count = 8000000/4000/8 * ms;
  5748                           
  5749                           ;incstack = 0
  5750  000DBA  C015  F00F         	movff	delay_ms@ms,___wmul@multiplier
  5751  000DBE  C016  F010         	movff	delay_ms@ms+1,___wmul@multiplier+1
  5752  000DC2  0E00               	movlw	0
  5753  000DC4  6E12               	movwf	___wmul@multiplicand+1,c
  5754  000DC6  0EFA               	movlw	250
  5755  000DC8  6E11               	movwf	___wmul@multiplicand,c
  5756  000DCA  EC9D  F008         	call	___wmul	;wreg free
  5757  000DCE  C00F  F019         	movff	?___wmul,delay_ms@count
  5758  000DD2  C010  F01A         	movff	?___wmul+1,delay_ms@count+1
  5759                           
  5760                           ;ST7735_TFT.c: 72: count = (0xffff - count);
  5761  000DD6  C019  F017         	movff	delay_ms@count,??_delay_ms
  5762  000DDA  C01A  F018         	movff	delay_ms@count+1,??_delay_ms+1
  5763  000DDE  1E17               	comf	??_delay_ms,f,c
  5764  000DE0  1E18               	comf	??_delay_ms+1,f,c
  5765  000DE2  4A17               	infsnz	??_delay_ms,f,c
  5766  000DE4  2A18               	incf	??_delay_ms+1,f,c
  5767  000DE6  0EFF               	movlw	255
  5768  000DE8  2417               	addwf	??_delay_ms,w,c
  5769  000DEA  6E19               	movwf	delay_ms@count,c
  5770  000DEC  0EFF               	movlw	255
  5771  000DEE  2018               	addwfc	??_delay_ms+1,w,c
  5772  000DF0  6E1A               	movwf	delay_ms@count+1,c
  5773                           
  5774                           ;ST7735_TFT.c: 74: T3CON = 0xb8;
  5775  000DF2  0EB8               	movlw	184
  5776  000DF4  6EB1               	movwf	4017,c	;volatile
  5777                           
  5778                           ;ST7735_TFT.c: 76: TMR3L = count & 0x00ff;
  5779  000DF6  C019  FFB2         	movff	delay_ms@count,4018	;volatile
  5780                           
  5781                           ;ST7735_TFT.c: 77: TMR3H = count >> 8;
  5782  000DFA  501A               	movf	delay_ms@count+1,w,c
  5783  000DFC  6EB3               	movwf	4019,c	;volatile
  5784                           
  5785                           ;ST7735_TFT.c: 79: PIR2bits.TMR3IF = 0;
  5786  000DFE  92A1               	bcf	4001,1,c	;volatile
  5787                           
  5788                           ;ST7735_TFT.c: 80: T3CONbits.TMR3ON = 1;
  5789  000E00  80B1               	bsf	4017,0,c	;volatile
  5790                           
  5791                           ;ST7735_TFT.c: 82: while (PIR2bits.TMR3IF == 0);
  5792  000E02  D000               	goto	l35
  5793  000E04                     l35:
  5794  000E04  A2A1               	btfss	4001,1,c	;volatile
  5795  000E06  D7FE               	goto	l35
  5796                           
  5797                           ;ST7735_TFT.c: 83: T3CONbits.TMR3ON = 0;
  5798  000E08  90B1               	bcf	4017,0,c	;volatile
  5799  000E0A  0012               	return		;funcret
  5800  000E0C                     __end_of_delay_ms:
  5801                           	opt stack 0
  5802                           tblptru	equ	0xFF8
  5803                           tblptrh	equ	0xFF7
  5804                           tblptrl	equ	0xFF6
  5805                           tablat	equ	0xFF5
  5806                           prodh	equ	0xFF4
  5807                           prodl	equ	0xFF3
  5808                           intcon2	equ	0xFF1
  5809                           postinc0	equ	0xFEE
  5810                           wreg	equ	0xFE8
  5811                           postdec1	equ	0xFE5
  5812                           fsr1l	equ	0xFE1
  5813                           indf2	equ	0xFDF
  5814                           postinc2	equ	0xFDE
  5815                           postdec2	equ	0xFDD
  5816                           fsr2h	equ	0xFDA
  5817                           fsr2l	equ	0xFD9
  5818                           status	equ	0xFD8
  5819                           
  5820 ;; *************** function ___wmul *****************
  5821 ;; Defined at:
  5822 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  5823 ;; Parameters:    Size  Location     Type
  5824 ;;  multiplier      2   14[COMRAM] unsigned int 
  5825 ;;  multiplicand    2   16[COMRAM] unsigned int 
  5826 ;; Auto vars:     Size  Location     Type
  5827 ;;  product         2   18[COMRAM] unsigned int 
  5828 ;; Return value:  Size  Location     Type
  5829 ;;                  2   14[COMRAM] unsigned int 
  5830 ;; Registers used:
  5831 ;;		wreg, status,2, status,0, prodl, prodh
  5832 ;; Tracked objects:
  5833 ;;		On entry : 0/0
  5834 ;;		On exit  : 0/0
  5835 ;;		Unchanged: 0/0
  5836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5837 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5838 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5840 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5841 ;;Total ram usage:        6 bytes
  5842 ;; Hardware stack levels used:    1
  5843 ;; Hardware stack levels required when called:    1
  5844 ;; This function calls:
  5845 ;;		Nothing
  5846 ;; This function is called by:
  5847 ;;		_delay_ms
  5848 ;;		_drawChar
  5849 ;;		_printf
  5850 ;; This function uses a non-reentrant model
  5851 ;;
  5852                           
  5853                           	psect	text30
  5854  00113A                     __ptext30:
  5855                           	opt stack 0
  5856  00113A                     ___wmul:
  5857                           	opt stack 28
  5858                           
  5859                           ;incstack = 0
  5860  00113A  500F               	movf	___wmul@multiplier,w,c
  5861  00113C  0211               	mulwf	___wmul@multiplicand,c
  5862  00113E  CFF3 F013          	movff	prodl,___wmul@product
  5863  001142  CFF4 F014          	movff	prodh,___wmul@product+1
  5864  001146  500F               	movf	___wmul@multiplier,w,c
  5865  001148  0212               	mulwf	___wmul@multiplicand+1,c
  5866  00114A  50F3               	movf	prodl,w,c
  5867  00114C  2614               	addwf	___wmul@product+1,f,c
  5868  00114E  5010               	movf	___wmul@multiplier+1,w,c
  5869  001150  0211               	mulwf	___wmul@multiplicand,c
  5870  001152  50F3               	movf	prodl,w,c
  5871  001154  2614               	addwf	___wmul@product+1,f,c
  5872  001156  C013  F00F         	movff	___wmul@product,?___wmul
  5873  00115A  C014  F010         	movff	___wmul@product+1,?___wmul+1
  5874  00115E  D000               	goto	l596
  5875  001160                     l596:
  5876  001160  0012               	return		;funcret
  5877  001162                     __end_of___wmul:
  5878                           	opt stack 0
  5879                           tblptru	equ	0xFF8
  5880                           tblptrh	equ	0xFF7
  5881                           tblptrl	equ	0xFF6
  5882                           tablat	equ	0xFF5
  5883                           prodh	equ	0xFF4
  5884                           prodl	equ	0xFF3
  5885                           intcon2	equ	0xFF1
  5886                           postinc0	equ	0xFEE
  5887                           wreg	equ	0xFE8
  5888                           postdec1	equ	0xFE5
  5889                           fsr1l	equ	0xFE1
  5890                           indf2	equ	0xFDF
  5891                           postinc2	equ	0xFDE
  5892                           postdec2	equ	0xFDD
  5893                           fsr2h	equ	0xFDA
  5894                           fsr2l	equ	0xFD9
  5895                           status	equ	0xFD8
  5896                           
  5897 ;; *************** function _I2C_Init *****************
  5898 ;; Defined at:
  5899 ;;		line 10 in file "I2C_Soft.c"
  5900 ;; Parameters:    Size  Location     Type
  5901 ;;  c               4   14[COMRAM] unsigned long 
  5902 ;; Auto vars:     Size  Location     Type
  5903 ;;		None
  5904 ;; Return value:  Size  Location     Type
  5905 ;;		None               void
  5906 ;; Registers used:
  5907 ;;		wreg, cstack
  5908 ;; Tracked objects:
  5909 ;;		On entry : 0/0
  5910 ;;		On exit  : 0/0
  5911 ;;		Unchanged: 0/0
  5912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5913 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5916 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5917 ;;Total ram usage:        4 bytes
  5918 ;; Hardware stack levels used:    1
  5919 ;; Hardware stack levels required when called:    2
  5920 ;; This function calls:
  5921 ;;		_i2cHighScl
  5922 ;;		_i2cHighSda
  5923 ;; This function is called by:
  5924 ;;		_Do_Init
  5925 ;; This function uses a non-reentrant model
  5926 ;;
  5927                           
  5928                           	psect	text31
  5929  0012B8                     __ptext31:
  5930                           	opt stack 0
  5931  0012B8                     _I2C_Init:
  5932                           	opt stack 27
  5933                           
  5934                           ;I2C_Soft.c: 12: i2cHighScl();
  5935                           
  5936                           ;incstack = 0
  5937  0012B8  EC56  F009         	call	_i2cHighScl	;wreg free
  5938                           
  5939                           ;I2C_Soft.c: 13: i2cHighSda();
  5940  0012BC  EC6F  F009         	call	_i2cHighSda	;wreg free
  5941  0012C0  0012               	return		;funcret
  5942  0012C2                     __end_of_I2C_Init:
  5943                           	opt stack 0
  5944                           tblptru	equ	0xFF8
  5945                           tblptrh	equ	0xFF7
  5946                           tblptrl	equ	0xFF6
  5947                           tablat	equ	0xFF5
  5948                           prodh	equ	0xFF4
  5949                           prodl	equ	0xFF3
  5950                           intcon2	equ	0xFF1
  5951                           postinc0	equ	0xFEE
  5952                           wreg	equ	0xFE8
  5953                           postdec1	equ	0xFE5
  5954                           fsr1l	equ	0xFE1
  5955                           indf2	equ	0xFDF
  5956                           postinc2	equ	0xFDE
  5957                           postdec2	equ	0xFDD
  5958                           fsr2h	equ	0xFDA
  5959                           fsr2l	equ	0xFD9
  5960                           status	equ	0xFD8
  5961                           
  5962 ;; *************** function _DS1621_Init *****************
  5963 ;; Defined at:
  5964 ;;		line 21 in file "I2C_Support.c"
  5965 ;; Parameters:    Size  Location     Type
  5966 ;;		None
  5967 ;; Auto vars:     Size  Location     Type
  5968 ;;  Device          1   19[COMRAM] unsigned char 
  5969 ;; Return value:  Size  Location     Type
  5970 ;;		None               void
  5971 ;; Registers used:
  5972 ;;		wreg, status,2, status,0, cstack
  5973 ;; Tracked objects:
  5974 ;;		On entry : 0/0
  5975 ;;		On exit  : 0/0
  5976 ;;		Unchanged: 0/0
  5977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5979 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5981 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5982 ;;Total ram usage:        1 bytes
  5983 ;; Hardware stack levels used:    1
  5984 ;; Hardware stack levels required when called:    4
  5985 ;; This function calls:
  5986 ;;		_I2C_Write_Cmd_Only
  5987 ;;		_I2C_Write_Cmd_Write_Data
  5988 ;; This function is called by:
  5989 ;;		_Do_Init
  5990 ;; This function uses a non-reentrant model
  5991 ;;
  5992                           
  5993                           	psect	text32
  5994  0011A4                     __ptext32:
  5995                           	opt stack 0
  5996  0011A4                     _DS1621_Init:
  5997                           	opt stack 25
  5998                           
  5999                           ;I2C_Support.c: 23: char Device = 0x48;
  6000                           
  6001                           ;incstack = 0
  6002  0011A4  0E48               	movlw	72
  6003  0011A6  6E14               	movwf	DS1621_Init@Device,c
  6004                           
  6005                           ;I2C_Support.c: 24: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
  6006  0011A8  0EAC               	movlw	172
  6007  0011AA  6E11               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  6008  0011AC  0E02               	movlw	2
  6009  0011AE  6E12               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  6010  0011B0  5014               	movf	DS1621_Init@Device,w,c
  6011  0011B2  ECC2  F008         	call	_I2C_Write_Cmd_Write_Data
  6012                           
  6013                           ;I2C_Support.c: 25: I2C_Write_Cmd_Only(Device, 0xEE);
  6014  0011B6  0EEE               	movlw	238
  6015  0011B8  6E11               	movwf	I2C_Write_Cmd_Only@Cmd,c
  6016  0011BA  5014               	movf	DS1621_Init@Device,w,c
  6017  0011BC  ECEF  F008         	call	_I2C_Write_Cmd_Only
  6018  0011C0  0012               	return		;funcret
  6019  0011C2                     __end_of_DS1621_Init:
  6020                           	opt stack 0
  6021                           tblptru	equ	0xFF8
  6022                           tblptrh	equ	0xFF7
  6023                           tblptrl	equ	0xFF6
  6024                           tablat	equ	0xFF5
  6025                           prodh	equ	0xFF4
  6026                           prodl	equ	0xFF3
  6027                           intcon2	equ	0xFF1
  6028                           postinc0	equ	0xFEE
  6029                           wreg	equ	0xFE8
  6030                           postdec1	equ	0xFE5
  6031                           fsr1l	equ	0xFE1
  6032                           indf2	equ	0xFDF
  6033                           postinc2	equ	0xFDE
  6034                           postdec2	equ	0xFDD
  6035                           fsr2h	equ	0xFDA
  6036                           fsr2l	equ	0xFD9
  6037                           status	equ	0xFD8
  6038                           
  6039 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  6040 ;; Defined at:
  6041 ;;		line 148 in file "I2C_Soft.c"
  6042 ;; Parameters:    Size  Location     Type
  6043 ;;  Device          1    wreg     unsigned char 
  6044 ;;  Cmd             1   16[COMRAM] unsigned char 
  6045 ;;  Data_Out        1   17[COMRAM] unsigned char 
  6046 ;; Auto vars:     Size  Location     Type
  6047 ;;  Device          1   18[COMRAM] unsigned char 
  6048 ;; Return value:  Size  Location     Type
  6049 ;;		None               void
  6050 ;; Registers used:
  6051 ;;		wreg, status,2, status,0, cstack
  6052 ;; Tracked objects:
  6053 ;;		On entry : 0/0
  6054 ;;		On exit  : 0/0
  6055 ;;		Unchanged: 0/0
  6056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6057 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6058 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6060 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6061 ;;Total ram usage:        3 bytes
  6062 ;; Hardware stack levels used:    1
  6063 ;; Hardware stack levels required when called:    3
  6064 ;; This function calls:
  6065 ;;		_I2C_Start
  6066 ;;		_I2C_Stop
  6067 ;;		_I2C_Write
  6068 ;; This function is called by:
  6069 ;;		_DS1621_Init
  6070 ;; This function uses a non-reentrant model
  6071 ;;
  6072                           
  6073                           	psect	text33
  6074  001184                     __ptext33:
  6075                           	opt stack 0
  6076  001184                     _I2C_Write_Cmd_Write_Data:
  6077                           	opt stack 25
  6078                           
  6079                           ;incstack = 0
  6080                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  6081  001184  6E13               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  6082                           
  6083                           ;I2C_Soft.c: 150: I2C_Start();
  6084  001186  EC2D  F009         	call	_I2C_Start	;wreg free
  6085                           
  6086                           ;I2C_Soft.c: 151: I2C_Write((Device << 1) | 0);
  6087  00118A  5013               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  6088  00118C  2413               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  6089  00118E  EC1A  F008         	call	_I2C_Write
  6090                           
  6091                           ;I2C_Soft.c: 152: I2C_Write(Cmd);
  6092  001192  5011               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  6093  001194  EC1A  F008         	call	_I2C_Write
  6094                           
  6095                           ;I2C_Soft.c: 153: I2C_Write(Data_Out);
  6096  001198  5012               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  6097  00119A  EC1A  F008         	call	_I2C_Write
  6098                           
  6099                           ;I2C_Soft.c: 154: I2C_Stop();
  6100  00119E  EC24  F009         	call	_I2C_Stop	;wreg free
  6101  0011A2  0012               	return		;funcret
  6102  0011A4                     __end_of_I2C_Write_Cmd_Write_Data:
  6103                           	opt stack 0
  6104                           tblptru	equ	0xFF8
  6105                           tblptrh	equ	0xFF7
  6106                           tblptrl	equ	0xFF6
  6107                           tablat	equ	0xFF5
  6108                           prodh	equ	0xFF4
  6109                           prodl	equ	0xFF3
  6110                           intcon2	equ	0xFF1
  6111                           postinc0	equ	0xFEE
  6112                           wreg	equ	0xFE8
  6113                           postdec1	equ	0xFE5
  6114                           fsr1l	equ	0xFE1
  6115                           indf2	equ	0xFDF
  6116                           postinc2	equ	0xFDE
  6117                           postdec2	equ	0xFDD
  6118                           fsr2h	equ	0xFDA
  6119                           fsr2l	equ	0xFD9
  6120                           status	equ	0xFD8
  6121                           
  6122 ;; *************** function _I2C_Write_Cmd_Only *****************
  6123 ;; Defined at:
  6124 ;;		line 140 in file "I2C_Soft.c"
  6125 ;; Parameters:    Size  Location     Type
  6126 ;;  Device          1    wreg     unsigned char 
  6127 ;;  Cmd             1   16[COMRAM] unsigned char 
  6128 ;; Auto vars:     Size  Location     Type
  6129 ;;  Device          1   17[COMRAM] unsigned char 
  6130 ;; Return value:  Size  Location     Type
  6131 ;;		None               void
  6132 ;; Registers used:
  6133 ;;		wreg, status,2, status,0, cstack
  6134 ;; Tracked objects:
  6135 ;;		On entry : 0/0
  6136 ;;		On exit  : 0/0
  6137 ;;		Unchanged: 0/0
  6138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6139 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6140 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6142 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6143 ;;Total ram usage:        2 bytes
  6144 ;; Hardware stack levels used:    1
  6145 ;; Hardware stack levels required when called:    3
  6146 ;; This function calls:
  6147 ;;		_I2C_Start
  6148 ;;		_I2C_Stop
  6149 ;;		_I2C_Write
  6150 ;; This function is called by:
  6151 ;;		_DS1621_Init
  6152 ;; This function uses a non-reentrant model
  6153 ;;
  6154                           
  6155                           	psect	text34
  6156  0011DE                     __ptext34:
  6157                           	opt stack 0
  6158  0011DE                     _I2C_Write_Cmd_Only:
  6159                           	opt stack 25
  6160                           
  6161                           ;incstack = 0
  6162                           ;I2C_Write_Cmd_Only@Device stored from wreg
  6163  0011DE  6E12               	movwf	I2C_Write_Cmd_Only@Device,c
  6164                           
  6165                           ;I2C_Soft.c: 142: I2C_Start();
  6166  0011E0  EC2D  F009         	call	_I2C_Start	;wreg free
  6167                           
  6168                           ;I2C_Soft.c: 143: I2C_Write((Device << 1) | 0);
  6169  0011E4  5012               	movf	I2C_Write_Cmd_Only@Device,w,c
  6170  0011E6  2412               	addwf	I2C_Write_Cmd_Only@Device,w,c
  6171  0011E8  EC1A  F008         	call	_I2C_Write
  6172                           
  6173                           ;I2C_Soft.c: 144: I2C_Write(Cmd);
  6174  0011EC  5011               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  6175  0011EE  EC1A  F008         	call	_I2C_Write
  6176                           
  6177                           ;I2C_Soft.c: 145: I2C_Stop();
  6178  0011F2  EC24  F009         	call	_I2C_Stop	;wreg free
  6179  0011F6  0012               	return		;funcret
  6180  0011F8                     __end_of_I2C_Write_Cmd_Only:
  6181                           	opt stack 0
  6182                           tblptru	equ	0xFF8
  6183                           tblptrh	equ	0xFF7
  6184                           tblptrl	equ	0xFF6
  6185                           tablat	equ	0xFF5
  6186                           prodh	equ	0xFF4
  6187                           prodl	equ	0xFF3
  6188                           intcon2	equ	0xFF1
  6189                           postinc0	equ	0xFEE
  6190                           wreg	equ	0xFE8
  6191                           postdec1	equ	0xFE5
  6192                           fsr1l	equ	0xFE1
  6193                           indf2	equ	0xFDF
  6194                           postinc2	equ	0xFDE
  6195                           postdec2	equ	0xFDD
  6196                           fsr2h	equ	0xFDA
  6197                           fsr2l	equ	0xFD9
  6198                           status	equ	0xFD8
  6199                           
  6200 ;; *************** function _DS3231_Setup_Time *****************
  6201 ;; Defined at:
  6202 ;;		line 65 in file "I2C_Support.c"
  6203 ;; Parameters:    Size  Location     Type
  6204 ;;		None
  6205 ;; Auto vars:     Size  Location     Type
  6206 ;;  Address         1   17[COMRAM] unsigned char 
  6207 ;;  Device          1   16[COMRAM] unsigned char 
  6208 ;; Return value:  Size  Location     Type
  6209 ;;		None               void
  6210 ;; Registers used:
  6211 ;;		wreg, status,2, status,0, cstack
  6212 ;; Tracked objects:
  6213 ;;		On entry : 0/0
  6214 ;;		On exit  : 0/0
  6215 ;;		Unchanged: 0/0
  6216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6218 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6220 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6221 ;;Total ram usage:        2 bytes
  6222 ;; Hardware stack levels used:    1
  6223 ;; Hardware stack levels required when called:    3
  6224 ;; This function calls:
  6225 ;;		_I2C_Start
  6226 ;;		_I2C_Stop
  6227 ;;		_I2C_Write
  6228 ;; This function is called by:
  6229 ;;		_main
  6230 ;; This function uses a non-reentrant model
  6231 ;;
  6232                           
  6233                           	psect	text35
  6234  000C40                     __ptext35:
  6235                           	opt stack 0
  6236  000C40                     _DS3231_Setup_Time:
  6237                           	opt stack 27
  6238                           
  6239                           ;I2C_Support.c: 67: char Device = 0x68;
  6240                           
  6241                           ;incstack = 0
  6242  000C40  0E68               	movlw	104
  6243  000C42  6E11               	movwf	DS3231_Setup_Time@Device,c
  6244                           
  6245                           ;I2C_Support.c: 68: char Address = 0x00;
  6246  000C44  0E00               	movlw	0
  6247  000C46  6E12               	movwf	DS3231_Setup_Time@Address,c
  6248                           
  6249                           ;I2C_Support.c: 70: second = 0x35;
  6250  000C48  0E35               	movlw	53
  6251  000C4A  6E61               	movwf	_second,c
  6252                           
  6253                           ;I2C_Support.c: 71: minute = 0x15;
  6254  000C4C  0E15               	movlw	21
  6255  000C4E  6E5E               	movwf	_minute,c
  6256                           
  6257                           ;I2C_Support.c: 72: hour = 0x06;
  6258  000C50  0E06               	movlw	6
  6259  000C52  6E5C               	movwf	_hour,c
  6260                           
  6261                           ;I2C_Support.c: 73: dow = 0x04;
  6262  000C54  0E04               	movlw	4
  6263  000C56  6E5A               	movwf	_dow,c
  6264                           
  6265                           ;I2C_Support.c: 74: day = 0x10;
  6266  000C58  0E10               	movlw	16
  6267  000C5A  6E59               	movwf	_day,c
  6268                           
  6269                           ;I2C_Support.c: 75: month = 0x11;
  6270  000C5C  0E11               	movlw	17
  6271  000C5E  6E5F               	movwf	_month,c
  6272                           
  6273                           ;I2C_Support.c: 76: year = 0x22;
  6274  000C60  0E22               	movlw	34
  6275  000C62  6E6B               	movwf	_year,c
  6276                           
  6277                           ;I2C_Support.c: 78: I2C_Start();
  6278  000C64  EC2D  F009         	call	_I2C_Start	;wreg free
  6279                           
  6280                           ;I2C_Support.c: 79: I2C_Write((Device << 1) | 0);
  6281  000C68  5011               	movf	DS3231_Setup_Time@Device,w,c
  6282  000C6A  2411               	addwf	DS3231_Setup_Time@Device,w,c
  6283  000C6C  EC1A  F008         	call	_I2C_Write
  6284                           
  6285                           ;I2C_Support.c: 80: I2C_Write(Address);
  6286  000C70  5012               	movf	DS3231_Setup_Time@Address,w,c
  6287  000C72  EC1A  F008         	call	_I2C_Write
  6288                           
  6289                           ;I2C_Support.c: 81: I2C_Write(second);
  6290  000C76  5061               	movf	_second,w,c
  6291  000C78  EC1A  F008         	call	_I2C_Write
  6292                           
  6293                           ;I2C_Support.c: 82: I2C_Write(minute);
  6294  000C7C  505E               	movf	_minute,w,c
  6295  000C7E  EC1A  F008         	call	_I2C_Write
  6296                           
  6297                           ;I2C_Support.c: 83: I2C_Write(hour);
  6298  000C82  505C               	movf	_hour,w,c
  6299  000C84  EC1A  F008         	call	_I2C_Write
  6300                           
  6301                           ;I2C_Support.c: 84: I2C_Write(dow);
  6302  000C88  505A               	movf	_dow,w,c
  6303  000C8A  EC1A  F008         	call	_I2C_Write
  6304                           
  6305                           ;I2C_Support.c: 85: I2C_Write(day);
  6306  000C8E  5059               	movf	_day,w,c
  6307  000C90  EC1A  F008         	call	_I2C_Write
  6308                           
  6309                           ;I2C_Support.c: 86: I2C_Write(month);
  6310  000C94  505F               	movf	_month,w,c
  6311  000C96  EC1A  F008         	call	_I2C_Write
  6312                           
  6313                           ;I2C_Support.c: 87: I2C_Write(year);
  6314  000C9A  506B               	movf	_year,w,c
  6315  000C9C  EC1A  F008         	call	_I2C_Write
  6316                           
  6317                           ;I2C_Support.c: 88: I2C_Stop();
  6318  000CA0  EC24  F009         	call	_I2C_Stop	;wreg free
  6319  000CA4  0012               	return		;funcret
  6320  000CA6                     __end_of_DS3231_Setup_Time:
  6321                           	opt stack 0
  6322                           tblptru	equ	0xFF8
  6323                           tblptrh	equ	0xFF7
  6324                           tblptrl	equ	0xFF6
  6325                           tablat	equ	0xFF5
  6326                           prodh	equ	0xFF4
  6327                           prodl	equ	0xFF3
  6328                           intcon2	equ	0xFF1
  6329                           postinc0	equ	0xFEE
  6330                           wreg	equ	0xFE8
  6331                           postdec1	equ	0xFE5
  6332                           fsr1l	equ	0xFE1
  6333                           indf2	equ	0xFDF
  6334                           postinc2	equ	0xFDE
  6335                           postdec2	equ	0xFDD
  6336                           fsr2h	equ	0xFDA
  6337                           fsr2l	equ	0xFD9
  6338                           status	equ	0xFD8
  6339                           
  6340 ;; *************** function _DS3231_Read_Time *****************
  6341 ;; Defined at:
  6342 ;;		line 45 in file "I2C_Support.c"
  6343 ;; Parameters:    Size  Location     Type
  6344 ;;		None
  6345 ;; Auto vars:     Size  Location     Type
  6346 ;;  Device          1   18[COMRAM] unsigned char 
  6347 ;;  Address         1   17[COMRAM] unsigned char 
  6348 ;; Return value:  Size  Location     Type
  6349 ;;		None               void
  6350 ;; Registers used:
  6351 ;;		wreg, status,2, status,0, cstack
  6352 ;; Tracked objects:
  6353 ;;		On entry : 0/0
  6354 ;;		On exit  : 0/0
  6355 ;;		Unchanged: 0/0
  6356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6358 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6360 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6361 ;;Total ram usage:        2 bytes
  6362 ;; Hardware stack levels used:    1
  6363 ;; Hardware stack levels required when called:    4
  6364 ;; This function calls:
  6365 ;;		_I2C_ReStart
  6366 ;;		_I2C_Read
  6367 ;;		_I2C_Start
  6368 ;;		_I2C_Stop
  6369 ;;		_I2C_Write
  6370 ;; This function is called by:
  6371 ;;		_main
  6372 ;; This function uses a non-reentrant model
  6373 ;;
  6374                           
  6375                           	psect	text36
  6376  000CA6                     __ptext36:
  6377                           	opt stack 0
  6378  000CA6                     _DS3231_Read_Time:
  6379                           	opt stack 26
  6380                           
  6381                           ;I2C_Support.c: 47: char Device = 0x68;
  6382                           
  6383                           ;incstack = 0
  6384  000CA6  0E68               	movlw	104
  6385  000CA8  6E13               	movwf	DS3231_Read_Time@Device,c
  6386                           
  6387                           ;I2C_Support.c: 48: char Address = 0x00;
  6388  000CAA  0E00               	movlw	0
  6389  000CAC  6E12               	movwf	DS3231_Read_Time@Address,c
  6390                           
  6391                           ;I2C_Support.c: 50: I2C_Start();
  6392  000CAE  EC2D  F009         	call	_I2C_Start	;wreg free
  6393                           
  6394                           ;I2C_Support.c: 51: I2C_Write((Device << 1) | 0);
  6395  000CB2  5013               	movf	DS3231_Read_Time@Device,w,c
  6396  000CB4  2413               	addwf	DS3231_Read_Time@Device,w,c
  6397  000CB6  EC1A  F008         	call	_I2C_Write
  6398                           
  6399                           ;I2C_Support.c: 52: I2C_Write(Address);
  6400  000CBA  5012               	movf	DS3231_Read_Time@Address,w,c
  6401  000CBC  EC1A  F008         	call	_I2C_Write
  6402                           
  6403                           ;I2C_Support.c: 53: I2C_ReStart();
  6404  000CC0  ECFC  F008         	call	_I2C_ReStart	;wreg free
  6405                           
  6406                           ;I2C_Support.c: 54: I2C_Write((Device << 1) | 1);
  6407  000CC4  80D8               	bsf	status,0,c
  6408  000CC6  3413               	rlcf	DS3231_Read_Time@Device,w,c
  6409  000CC8  EC1A  F008         	call	_I2C_Write
  6410                           
  6411                           ;I2C_Support.c: 55: second = I2C_Read(1);
  6412  000CCC  0E01               	movlw	1
  6413  000CCE  EC78  F007         	call	_I2C_Read
  6414  000CD2  6E61               	movwf	_second,c
  6415                           
  6416                           ;I2C_Support.c: 56: minute = I2C_Read(1);
  6417  000CD4  0E01               	movlw	1
  6418  000CD6  EC78  F007         	call	_I2C_Read
  6419  000CDA  6E5E               	movwf	_minute,c
  6420                           
  6421                           ;I2C_Support.c: 57: hour = I2C_Read(1);
  6422  000CDC  0E01               	movlw	1
  6423  000CDE  EC78  F007         	call	_I2C_Read
  6424  000CE2  6E5C               	movwf	_hour,c
  6425                           
  6426                           ;I2C_Support.c: 58: dow = I2C_Read(1);
  6427  000CE4  0E01               	movlw	1
  6428  000CE6  EC78  F007         	call	_I2C_Read
  6429  000CEA  6E5A               	movwf	_dow,c
  6430                           
  6431                           ;I2C_Support.c: 59: day = I2C_Read(1);
  6432  000CEC  0E01               	movlw	1
  6433  000CEE  EC78  F007         	call	_I2C_Read
  6434  000CF2  6E59               	movwf	_day,c
  6435                           
  6436                           ;I2C_Support.c: 60: month = I2C_Read(1);
  6437  000CF4  0E01               	movlw	1
  6438  000CF6  EC78  F007         	call	_I2C_Read
  6439  000CFA  6E5F               	movwf	_month,c
  6440                           
  6441                           ;I2C_Support.c: 61: year = I2C_Read(0);
  6442  000CFC  0E00               	movlw	0
  6443  000CFE  EC78  F007         	call	_I2C_Read
  6444  000D02  6E6B               	movwf	_year,c
  6445                           
  6446                           ;I2C_Support.c: 62: I2C_Stop();
  6447  000D04  EC24  F009         	call	_I2C_Stop	;wreg free
  6448  000D08  0012               	return		;funcret
  6449  000D0A                     __end_of_DS3231_Read_Time:
  6450                           	opt stack 0
  6451                           tblptru	equ	0xFF8
  6452                           tblptrh	equ	0xFF7
  6453                           tblptrl	equ	0xFF6
  6454                           tablat	equ	0xFF5
  6455                           prodh	equ	0xFF4
  6456                           prodl	equ	0xFF3
  6457                           intcon2	equ	0xFF1
  6458                           postinc0	equ	0xFEE
  6459                           wreg	equ	0xFE8
  6460                           postdec1	equ	0xFE5
  6461                           fsr1l	equ	0xFE1
  6462                           indf2	equ	0xFDF
  6463                           postinc2	equ	0xFDE
  6464                           postdec2	equ	0xFDD
  6465                           fsr2h	equ	0xFDA
  6466                           fsr2l	equ	0xFD9
  6467                           status	equ	0xFD8
  6468                           
  6469 ;; *************** function _DS1621_Read_Temp *****************
  6470 ;; Defined at:
  6471 ;;		line 30 in file "I2C_Support.c"
  6472 ;; Parameters:    Size  Location     Type
  6473 ;;		None
  6474 ;; Auto vars:     Size  Location     Type
  6475 ;;  Device          1   21[COMRAM] unsigned char 
  6476 ;;  Data_Ret        1   20[COMRAM] unsigned char 
  6477 ;;  Cmd             1   19[COMRAM] unsigned char 
  6478 ;; Return value:  Size  Location     Type
  6479 ;;                  2   17[COMRAM] int 
  6480 ;; Registers used:
  6481 ;;		wreg, status,2, status,0, cstack
  6482 ;; Tracked objects:
  6483 ;;		On entry : 0/0
  6484 ;;		On exit  : 0/0
  6485 ;;		Unchanged: 0/0
  6486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6487 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6488 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6490 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6491 ;;Total ram usage:        5 bytes
  6492 ;; Hardware stack levels used:    1
  6493 ;; Hardware stack levels required when called:    4
  6494 ;; This function calls:
  6495 ;;		_I2C_ReStart
  6496 ;;		_I2C_Read
  6497 ;;		_I2C_Start
  6498 ;;		_I2C_Stop
  6499 ;;		_I2C_Write
  6500 ;; This function is called by:
  6501 ;;		_main
  6502 ;; This function uses a non-reentrant model
  6503 ;;
  6504                           
  6505                           	psect	text37
  6506  001072                     __ptext37:
  6507                           	opt stack 0
  6508  001072                     _DS1621_Read_Temp:
  6509                           	opt stack 26
  6510                           
  6511                           ;I2C_Support.c: 32: char Device = 0x48;
  6512                           
  6513                           ;incstack = 0
  6514  001072  0E48               	movlw	72
  6515  001074  6E16               	movwf	DS1621_Read_Temp@Device,c
  6516                           
  6517                           ;I2C_Support.c: 33: char Cmd = 0xAA;
  6518  001076  0EAA               	movlw	170
  6519  001078  6E14               	movwf	DS1621_Read_Temp@Cmd,c
  6520                           
  6521                           ;I2C_Support.c: 34: char Data_Ret;
  6522                           ;I2C_Support.c: 35: I2C_Start();
  6523  00107A  EC2D  F009         	call	_I2C_Start	;wreg free
  6524                           
  6525                           ;I2C_Support.c: 36: I2C_Write((Device << 1) | 0);
  6526  00107E  5016               	movf	DS1621_Read_Temp@Device,w,c
  6527  001080  2416               	addwf	DS1621_Read_Temp@Device,w,c
  6528  001082  EC1A  F008         	call	_I2C_Write
  6529                           
  6530                           ;I2C_Support.c: 37: I2C_Write(Cmd);
  6531  001086  5014               	movf	DS1621_Read_Temp@Cmd,w,c
  6532  001088  EC1A  F008         	call	_I2C_Write
  6533                           
  6534                           ;I2C_Support.c: 38: I2C_ReStart();
  6535  00108C  ECFC  F008         	call	_I2C_ReStart	;wreg free
  6536                           
  6537                           ;I2C_Support.c: 39: I2C_Write((Device << 1) | 1);
  6538  001090  80D8               	bsf	status,0,c
  6539  001092  3416               	rlcf	DS1621_Read_Temp@Device,w,c
  6540  001094  EC1A  F008         	call	_I2C_Write
  6541                           
  6542                           ;I2C_Support.c: 40: Data_Ret = I2C_Read(0);
  6543  001098  0E00               	movlw	0
  6544  00109A  EC78  F007         	call	_I2C_Read
  6545  00109E  6E15               	movwf	DS1621_Read_Temp@Data_Ret,c
  6546                           
  6547                           ;I2C_Support.c: 41: I2C_Stop();
  6548  0010A0  EC24  F009         	call	_I2C_Stop	;wreg free
  6549                           
  6550                           ;I2C_Support.c: 42: return Data_Ret;
  6551  0010A4  C015  F012         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
  6552  0010A8  6A13               	clrf	?_DS1621_Read_Temp+1,c
  6553  0010AA  D000               	goto	l322
  6554  0010AC                     l322:
  6555  0010AC  0012               	return		;funcret
  6556  0010AE                     __end_of_DS1621_Read_Temp:
  6557                           	opt stack 0
  6558                           tblptru	equ	0xFF8
  6559                           tblptrh	equ	0xFF7
  6560                           tblptrl	equ	0xFF6
  6561                           tablat	equ	0xFF5
  6562                           prodh	equ	0xFF4
  6563                           prodl	equ	0xFF3
  6564                           intcon2	equ	0xFF1
  6565                           postinc0	equ	0xFEE
  6566                           wreg	equ	0xFE8
  6567                           postdec1	equ	0xFE5
  6568                           fsr1l	equ	0xFE1
  6569                           indf2	equ	0xFDF
  6570                           postinc2	equ	0xFDE
  6571                           postdec2	equ	0xFDD
  6572                           fsr2h	equ	0xFDA
  6573                           fsr2l	equ	0xFD9
  6574                           status	equ	0xFD8
  6575                           
  6576 ;; *************** function _I2C_Write *****************
  6577 ;; Defined at:
  6578 ;;		line 37 in file "I2C_Soft.c"
  6579 ;; Parameters:    Size  Location     Type
  6580 ;;  outByte         1    wreg     unsigned char 
  6581 ;; Auto vars:     Size  Location     Type
  6582 ;;  outByte         1   14[COMRAM] unsigned char 
  6583 ;;  n               1   15[COMRAM] unsigned char 
  6584 ;; Return value:  Size  Location     Type
  6585 ;;		None               void
  6586 ;; Registers used:
  6587 ;;		wreg, status,2, status,0, cstack
  6588 ;; Tracked objects:
  6589 ;;		On entry : 0/0
  6590 ;;		On exit  : 0/0
  6591 ;;		Unchanged: 0/0
  6592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6594 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6596 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6597 ;;Total ram usage:        2 bytes
  6598 ;; Hardware stack levels used:    1
  6599 ;; Hardware stack levels required when called:    2
  6600 ;; This function calls:
  6601 ;;		_i2cHighScl
  6602 ;;		_i2cHighSda
  6603 ;;		_i2cLowScl
  6604 ;;		_i2cLowSda
  6605 ;; This function is called by:
  6606 ;;		_I2C_Write_Cmd_Only
  6607 ;;		_I2C_Write_Cmd_Write_Data
  6608 ;;		_DS1621_Read_Temp
  6609 ;;		_DS3231_Read_Time
  6610 ;;		_DS3231_Setup_Time
  6611 ;;		_I2C_Write_Address_Read_One_Byte
  6612 ;;		_I2C_Write_Address_Write_One_Byte
  6613 ;;		_I2C_Write_Cmd_Read_One_Byte
  6614 ;; This function uses a non-reentrant model
  6615 ;;
  6616                           
  6617                           	psect	text38
  6618  001034                     __ptext38:
  6619                           	opt stack 0
  6620  001034                     _I2C_Write:
  6621                           	opt stack 25
  6622                           
  6623                           ;incstack = 0
  6624                           ;I2C_Write@outByte stored from wreg
  6625  001034  6E0F               	movwf	I2C_Write@outByte,c
  6626                           
  6627                           ;I2C_Soft.c: 39: unsigned char n;
  6628                           ;I2C_Soft.c: 40: for(n=0; n<8; n++)
  6629  001036  0E00               	movlw	0
  6630  001038  6E10               	movwf	I2C_Write@n,c
  6631  00103A                     l1498:
  6632  00103A  0E07               	movlw	7
  6633  00103C  6410               	cpfsgt	I2C_Write@n,c
  6634  00103E  D001               	goto	l242
  6635  001040  D011               	goto	l1516
  6636  001042                     l242:
  6637                           
  6638                           ;I2C_Soft.c: 41: {
  6639                           ;I2C_Soft.c: 42: if(outByte&0x80) i2cHighSda();
  6640  001042  AE0F               	btfss	I2C_Write@outByte,7,c
  6641  001044  D003               	goto	l1504
  6642  001046  EC6F  F009         	call	_i2cHighSda	;wreg free
  6643  00104A  D003               	goto	l1506
  6644  00104C                     l1504:
  6645                           
  6646                           ;I2C_Soft.c: 43: else i2cLowSda();
  6647  00104C  EC66  F009         	call	_i2cLowSda	;wreg free
  6648  001050  D000               	goto	l1506
  6649  001052                     l1506:
  6650                           
  6651                           ;I2C_Soft.c: 44: i2cHighScl();
  6652  001052  EC56  F009         	call	_i2cHighScl	;wreg free
  6653                           
  6654                           ;I2C_Soft.c: 45: i2cLowScl();
  6655  001056  EC6B  F009         	call	_i2cLowScl	;wreg free
  6656                           
  6657                           ;I2C_Soft.c: 46: outByte = outByte << 1;
  6658  00105A  500F               	movf	I2C_Write@outByte,w,c
  6659  00105C  240F               	addwf	I2C_Write@outByte,w,c
  6660  00105E  6E0F               	movwf	I2C_Write@outByte,c
  6661  001060  2A10               	incf	I2C_Write@n,f,c
  6662  001062  D7EB               	goto	l1498
  6663  001064                     l1516:
  6664                           
  6665                           ;I2C_Soft.c: 47: }
  6666                           ;I2C_Soft.c: 48: i2cHighSda();
  6667  001064  EC6F  F009         	call	_i2cHighSda	;wreg free
  6668                           
  6669                           ;I2C_Soft.c: 49: i2cHighScl();
  6670  001068  EC56  F009         	call	_i2cHighScl	;wreg free
  6671                           
  6672                           ;I2C_Soft.c: 50: i2cLowScl();
  6673  00106C  EC6B  F009         	call	_i2cLowScl	;wreg free
  6674  001070  0012               	return		;funcret
  6675  001072                     __end_of_I2C_Write:
  6676                           	opt stack 0
  6677                           tblptru	equ	0xFF8
  6678                           tblptrh	equ	0xFF7
  6679                           tblptrl	equ	0xFF6
  6680                           tablat	equ	0xFF5
  6681                           prodh	equ	0xFF4
  6682                           prodl	equ	0xFF3
  6683                           intcon2	equ	0xFF1
  6684                           postinc0	equ	0xFEE
  6685                           wreg	equ	0xFE8
  6686                           postdec1	equ	0xFE5
  6687                           fsr1l	equ	0xFE1
  6688                           indf2	equ	0xFDF
  6689                           postinc2	equ	0xFDE
  6690                           postdec2	equ	0xFDD
  6691                           fsr2h	equ	0xFDA
  6692                           fsr2l	equ	0xFD9
  6693                           status	equ	0xFD8
  6694                           
  6695 ;; *************** function _I2C_Stop *****************
  6696 ;; Defined at:
  6697 ;;		line 84 in file "I2C_Soft.c"
  6698 ;; Parameters:    Size  Location     Type
  6699 ;;		None
  6700 ;; Auto vars:     Size  Location     Type
  6701 ;;		None
  6702 ;; Return value:  Size  Location     Type
  6703 ;;		None               void
  6704 ;; Registers used:
  6705 ;;		wreg, cstack
  6706 ;; Tracked objects:
  6707 ;;		On entry : 0/0
  6708 ;;		On exit  : 0/0
  6709 ;;		Unchanged: 0/0
  6710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6715 ;;Total ram usage:        0 bytes
  6716 ;; Hardware stack levels used:    1
  6717 ;; Hardware stack levels required when called:    2
  6718 ;; This function calls:
  6719 ;;		_i2cHighScl
  6720 ;;		_i2cHighSda
  6721 ;;		_i2cLowScl
  6722 ;;		_i2cLowSda
  6723 ;; This function is called by:
  6724 ;;		_I2C_Write_Cmd_Only
  6725 ;;		_I2C_Write_Cmd_Write_Data
  6726 ;;		_DS1621_Read_Temp
  6727 ;;		_DS3231_Read_Time
  6728 ;;		_DS3231_Setup_Time
  6729 ;;		_I2C_Write_Address_Read_One_Byte
  6730 ;;		_I2C_Write_Address_Write_One_Byte
  6731 ;;		_I2C_Write_Cmd_Read_One_Byte
  6732 ;; This function uses a non-reentrant model
  6733 ;;
  6734                           
  6735                           	psect	text39
  6736  001248                     __ptext39:
  6737                           	opt stack 0
  6738  001248                     _I2C_Stop:
  6739                           	opt stack 25
  6740                           
  6741                           ;I2C_Soft.c: 86: i2cLowScl();
  6742                           
  6743                           ;incstack = 0
  6744  001248  EC6B  F009         	call	_i2cLowScl	;wreg free
  6745                           
  6746                           ;I2C_Soft.c: 87: i2cLowSda();
  6747  00124C  EC66  F009         	call	_i2cLowSda	;wreg free
  6748                           
  6749                           ;I2C_Soft.c: 88: i2cHighScl();
  6750  001250  EC56  F009         	call	_i2cHighScl	;wreg free
  6751                           
  6752                           ;I2C_Soft.c: 89: i2cHighSda();
  6753  001254  EC6F  F009         	call	_i2cHighSda	;wreg free
  6754  001258  0012               	return		;funcret
  6755  00125A                     __end_of_I2C_Stop:
  6756                           	opt stack 0
  6757                           tblptru	equ	0xFF8
  6758                           tblptrh	equ	0xFF7
  6759                           tblptrl	equ	0xFF6
  6760                           tablat	equ	0xFF5
  6761                           prodh	equ	0xFF4
  6762                           prodl	equ	0xFF3
  6763                           intcon2	equ	0xFF1
  6764                           postinc0	equ	0xFEE
  6765                           wreg	equ	0xFE8
  6766                           postdec1	equ	0xFE5
  6767                           fsr1l	equ	0xFE1
  6768                           indf2	equ	0xFDF
  6769                           postinc2	equ	0xFDE
  6770                           postdec2	equ	0xFDD
  6771                           fsr2h	equ	0xFDA
  6772                           fsr2l	equ	0xFD9
  6773                           status	equ	0xFD8
  6774                           
  6775 ;; *************** function _I2C_Start *****************
  6776 ;; Defined at:
  6777 ;;		line 67 in file "I2C_Soft.c"
  6778 ;; Parameters:    Size  Location     Type
  6779 ;;		None
  6780 ;; Auto vars:     Size  Location     Type
  6781 ;;		None
  6782 ;; Return value:  Size  Location     Type
  6783 ;;		None               void
  6784 ;; Registers used:
  6785 ;;		wreg, cstack
  6786 ;; Tracked objects:
  6787 ;;		On entry : 0/0
  6788 ;;		On exit  : 0/0
  6789 ;;		Unchanged: 0/0
  6790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6794 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6795 ;;Total ram usage:        0 bytes
  6796 ;; Hardware stack levels used:    1
  6797 ;; Hardware stack levels required when called:    2
  6798 ;; This function calls:
  6799 ;;		_i2cHighScl
  6800 ;;		_i2cHighSda
  6801 ;;		_i2cLowScl
  6802 ;;		_i2cLowSda
  6803 ;; This function is called by:
  6804 ;;		_I2C_Write_Cmd_Only
  6805 ;;		_I2C_Write_Cmd_Write_Data
  6806 ;;		_DS1621_Read_Temp
  6807 ;;		_DS3231_Read_Time
  6808 ;;		_DS3231_Setup_Time
  6809 ;;		_I2C_Write_Address_Read_One_Byte
  6810 ;;		_I2C_Write_Address_Write_One_Byte
  6811 ;;		_I2C_Write_Cmd_Read_One_Byte
  6812 ;; This function uses a non-reentrant model
  6813 ;;
  6814                           
  6815                           	psect	text40
  6816  00125A                     __ptext40:
  6817                           	opt stack 0
  6818  00125A                     _I2C_Start:
  6819                           	opt stack 25
  6820                           
  6821                           ;I2C_Soft.c: 69: i2cHighSda();
  6822                           
  6823                           ;incstack = 0
  6824  00125A  EC6F  F009         	call	_i2cHighSda	;wreg free
  6825                           
  6826                           ;I2C_Soft.c: 70: i2cHighScl();
  6827  00125E  EC56  F009         	call	_i2cHighScl	;wreg free
  6828                           
  6829                           ;I2C_Soft.c: 71: i2cLowSda();
  6830  001262  EC66  F009         	call	_i2cLowSda	;wreg free
  6831                           
  6832                           ;I2C_Soft.c: 72: i2cLowScl();
  6833  001266  EC6B  F009         	call	_i2cLowScl	;wreg free
  6834  00126A  0012               	return		;funcret
  6835  00126C                     __end_of_I2C_Start:
  6836                           	opt stack 0
  6837                           tblptru	equ	0xFF8
  6838                           tblptrh	equ	0xFF7
  6839                           tblptrl	equ	0xFF6
  6840                           tablat	equ	0xFF5
  6841                           prodh	equ	0xFF4
  6842                           prodl	equ	0xFF3
  6843                           intcon2	equ	0xFF1
  6844                           postinc0	equ	0xFEE
  6845                           wreg	equ	0xFE8
  6846                           postdec1	equ	0xFE5
  6847                           fsr1l	equ	0xFE1
  6848                           indf2	equ	0xFDF
  6849                           postinc2	equ	0xFDE
  6850                           postdec2	equ	0xFDD
  6851                           fsr2h	equ	0xFDA
  6852                           fsr2l	equ	0xFD9
  6853                           status	equ	0xFD8
  6854                           
  6855 ;; *************** function _I2C_Read *****************
  6856 ;; Defined at:
  6857 ;;		line 16 in file "I2C_Soft.c"
  6858 ;; Parameters:    Size  Location     Type
  6859 ;;  ack             1    wreg     unsigned char 
  6860 ;; Auto vars:     Size  Location     Type
  6861 ;;  ack             1   14[COMRAM] unsigned char 
  6862 ;;  inByte          1   16[COMRAM] unsigned char 
  6863 ;;  n               1   15[COMRAM] unsigned char 
  6864 ;; Return value:  Size  Location     Type
  6865 ;;                  1    wreg      unsigned char 
  6866 ;; Registers used:
  6867 ;;		wreg, status,2, status,0, cstack
  6868 ;; Tracked objects:
  6869 ;;		On entry : 0/0
  6870 ;;		On exit  : 0/0
  6871 ;;		Unchanged: 0/0
  6872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6874 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6876 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6877 ;;Total ram usage:        3 bytes
  6878 ;; Hardware stack levels used:    1
  6879 ;; Hardware stack levels required when called:    3
  6880 ;; This function calls:
  6881 ;;		_i2cAck
  6882 ;;		_i2cHighScl
  6883 ;;		_i2cHighSda
  6884 ;;		_i2cLowScl
  6885 ;;		_i2cNack
  6886 ;; This function is called by:
  6887 ;;		_DS1621_Read_Temp
  6888 ;;		_DS3231_Read_Time
  6889 ;;		_I2C_Write_Address_Read_One_Byte
  6890 ;;		_I2C_Write_Cmd_Read_One_Byte
  6891 ;; This function uses a non-reentrant model
  6892 ;;
  6893                           
  6894                           	psect	text41
  6895  000EF0                     __ptext41:
  6896                           	opt stack 0
  6897  000EF0                     _I2C_Read:
  6898                           	opt stack 26
  6899                           
  6900                           ;incstack = 0
  6901                           ;I2C_Read@ack stored from wreg
  6902  000EF0  6E0F               	movwf	I2C_Read@ack,c
  6903                           
  6904                           ;I2C_Soft.c: 18: unsigned char inByte, n;
  6905                           ;I2C_Soft.c: 19: i2cHighSda();
  6906  000EF2  EC6F  F009         	call	_i2cHighSda	;wreg free
  6907                           
  6908                           ;I2C_Soft.c: 20: for (n=0; n<8; n++)
  6909  000EF6  0E00               	movlw	0
  6910  000EF8  6E10               	movwf	I2C_Read@n,c
  6911  000EFA                     l1688:
  6912  000EFA  0E07               	movlw	7
  6913  000EFC  6410               	cpfsgt	I2C_Read@n,c
  6914  000EFE  D001               	goto	l1692
  6915  000F00  D00F               	goto	l1706
  6916  000F02                     l1692:
  6917                           
  6918                           ;I2C_Soft.c: 21: {
  6919                           ;I2C_Soft.c: 22: i2cHighScl();
  6920  000F02  EC56  F009         	call	_i2cHighScl	;wreg free
  6921                           
  6922                           ;I2C_Soft.c: 24: if (PORTAbits.RA2)
  6923  000F06  A480               	btfss	3968,2,c	;volatile
  6924  000F08  D003               	goto	l1698
  6925                           
  6926                           ;I2C_Soft.c: 25: inByte = (inByte << 1) | 0x01;
  6927  000F0A  80D8               	bsf	status,0,c
  6928  000F0C  3611               	rlcf	I2C_Read@inByte,f,c
  6929  000F0E  D004               	goto	l1700
  6930  000F10                     l1698:
  6931                           
  6932                           ;I2C_Soft.c: 26: else
  6933                           ;I2C_Soft.c: 27: inByte = inByte << 1;
  6934  000F10  5011               	movf	I2C_Read@inByte,w,c
  6935  000F12  2411               	addwf	I2C_Read@inByte,w,c
  6936  000F14  6E11               	movwf	I2C_Read@inByte,c
  6937  000F16  D000               	goto	l1700
  6938  000F18                     l1700:
  6939                           
  6940                           ;I2C_Soft.c: 28: i2cLowScl();
  6941  000F18  EC6B  F009         	call	_i2cLowScl	;wreg free
  6942  000F1C  2A10               	incf	I2C_Read@n,f,c
  6943  000F1E  D7ED               	goto	l1688
  6944  000F20                     l1706:
  6945                           
  6946                           ;I2C_Soft.c: 29: }
  6947                           ;I2C_Soft.c: 30: if (ack) i2cAck();
  6948  000F20  500F               	movf	I2C_Read@ack,w,c
  6949  000F22  B4D8               	btfsc	status,2,c
  6950  000F24  D003               	goto	l1710
  6951  000F26  EC36  F009         	call	_i2cAck	;wreg free
  6952  000F2A  D003               	goto	l1712
  6953  000F2C                     l1710:
  6954                           
  6955                           ;I2C_Soft.c: 31: else i2cNack();
  6956  000F2C  EC61  F009         	call	_i2cNack	;wreg free
  6957  000F30  D000               	goto	l1712
  6958  000F32                     l1712:
  6959                           
  6960                           ;I2C_Soft.c: 34: return(inByte);
  6961  000F32  5011               	movf	I2C_Read@inByte,w,c
  6962  000F34  D000               	goto	l239
  6963  000F36                     l239:
  6964  000F36  0012               	return		;funcret
  6965  000F38                     __end_of_I2C_Read:
  6966                           	opt stack 0
  6967                           tblptru	equ	0xFF8
  6968                           tblptrh	equ	0xFF7
  6969                           tblptrl	equ	0xFF6
  6970                           tablat	equ	0xFF5
  6971                           prodh	equ	0xFF4
  6972                           prodl	equ	0xFF3
  6973                           intcon2	equ	0xFF1
  6974                           postinc0	equ	0xFEE
  6975                           wreg	equ	0xFE8
  6976                           postdec1	equ	0xFE5
  6977                           fsr1l	equ	0xFE1
  6978                           indf2	equ	0xFDF
  6979                           postinc2	equ	0xFDE
  6980                           postdec2	equ	0xFDD
  6981                           fsr2h	equ	0xFDA
  6982                           fsr2l	equ	0xFD9
  6983                           status	equ	0xFD8
  6984                           
  6985 ;; *************** function _i2cNack *****************
  6986 ;; Defined at:
  6987 ;;		line 53 in file "I2C_Soft.c"
  6988 ;; Parameters:    Size  Location     Type
  6989 ;;		None
  6990 ;; Auto vars:     Size  Location     Type
  6991 ;;		None
  6992 ;; Return value:  Size  Location     Type
  6993 ;;		None               void
  6994 ;; Registers used:
  6995 ;;		wreg, cstack
  6996 ;; Tracked objects:
  6997 ;;		On entry : 0/0
  6998 ;;		On exit  : 0/0
  6999 ;;		Unchanged: 0/0
  7000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7005 ;;Total ram usage:        0 bytes
  7006 ;; Hardware stack levels used:    1
  7007 ;; Hardware stack levels required when called:    2
  7008 ;; This function calls:
  7009 ;;		_i2cHighScl
  7010 ;;		_i2cLowScl
  7011 ;; This function is called by:
  7012 ;;		_I2C_Read
  7013 ;; This function uses a non-reentrant model
  7014 ;;
  7015                           
  7016                           	psect	text42
  7017  0012C2                     __ptext42:
  7018                           	opt stack 0
  7019  0012C2                     _i2cNack:
  7020                           	opt stack 26
  7021                           
  7022                           ;I2C_Soft.c: 55: i2cHighScl();
  7023                           
  7024                           ;incstack = 0
  7025  0012C2  EC56  F009         	call	_i2cHighScl	;wreg free
  7026                           
  7027                           ;I2C_Soft.c: 56: i2cLowScl();
  7028  0012C6  EC6B  F009         	call	_i2cLowScl	;wreg free
  7029  0012CA  0012               	return		;funcret
  7030  0012CC                     __end_of_i2cNack:
  7031                           	opt stack 0
  7032                           tblptru	equ	0xFF8
  7033                           tblptrh	equ	0xFF7
  7034                           tblptrl	equ	0xFF6
  7035                           tablat	equ	0xFF5
  7036                           prodh	equ	0xFF4
  7037                           prodl	equ	0xFF3
  7038                           intcon2	equ	0xFF1
  7039                           postinc0	equ	0xFEE
  7040                           wreg	equ	0xFE8
  7041                           postdec1	equ	0xFE5
  7042                           fsr1l	equ	0xFE1
  7043                           indf2	equ	0xFDF
  7044                           postinc2	equ	0xFDE
  7045                           postdec2	equ	0xFDD
  7046                           fsr2h	equ	0xFDA
  7047                           fsr2l	equ	0xFD9
  7048                           status	equ	0xFD8
  7049                           
  7050 ;; *************** function _i2cAck *****************
  7051 ;; Defined at:
  7052 ;;		line 59 in file "I2C_Soft.c"
  7053 ;; Parameters:    Size  Location     Type
  7054 ;;		None
  7055 ;; Auto vars:     Size  Location     Type
  7056 ;;		None
  7057 ;; Return value:  Size  Location     Type
  7058 ;;		None               void
  7059 ;; Registers used:
  7060 ;;		wreg, cstack
  7061 ;; Tracked objects:
  7062 ;;		On entry : 0/0
  7063 ;;		On exit  : 0/0
  7064 ;;		Unchanged: 0/0
  7065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7069 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7070 ;;Total ram usage:        0 bytes
  7071 ;; Hardware stack levels used:    1
  7072 ;; Hardware stack levels required when called:    2
  7073 ;; This function calls:
  7074 ;;		_i2cHighScl
  7075 ;;		_i2cHighSda
  7076 ;;		_i2cLowScl
  7077 ;;		_i2cLowSda
  7078 ;; This function is called by:
  7079 ;;		_I2C_Read
  7080 ;; This function uses a non-reentrant model
  7081 ;;
  7082                           
  7083                           	psect	text43
  7084  00126C                     __ptext43:
  7085                           	opt stack 0
  7086  00126C                     _i2cAck:
  7087                           	opt stack 26
  7088                           
  7089                           ;I2C_Soft.c: 61: i2cLowSda();
  7090                           
  7091                           ;incstack = 0
  7092  00126C  EC66  F009         	call	_i2cLowSda	;wreg free
  7093                           
  7094                           ;I2C_Soft.c: 62: i2cHighScl();
  7095  001270  EC56  F009         	call	_i2cHighScl	;wreg free
  7096                           
  7097                           ;I2C_Soft.c: 63: i2cLowScl();
  7098  001274  EC6B  F009         	call	_i2cLowScl	;wreg free
  7099                           
  7100                           ;I2C_Soft.c: 64: i2cHighSda();
  7101  001278  EC6F  F009         	call	_i2cHighSda	;wreg free
  7102  00127C  0012               	return		;funcret
  7103  00127E                     __end_of_i2cAck:
  7104                           	opt stack 0
  7105                           tblptru	equ	0xFF8
  7106                           tblptrh	equ	0xFF7
  7107                           tblptrl	equ	0xFF6
  7108                           tablat	equ	0xFF5
  7109                           prodh	equ	0xFF4
  7110                           prodl	equ	0xFF3
  7111                           intcon2	equ	0xFF1
  7112                           postinc0	equ	0xFEE
  7113                           wreg	equ	0xFE8
  7114                           postdec1	equ	0xFE5
  7115                           fsr1l	equ	0xFE1
  7116                           indf2	equ	0xFDF
  7117                           postinc2	equ	0xFDE
  7118                           postdec2	equ	0xFDD
  7119                           fsr2h	equ	0xFDA
  7120                           fsr2l	equ	0xFD9
  7121                           status	equ	0xFD8
  7122                           
  7123 ;; *************** function _I2C_ReStart *****************
  7124 ;; Defined at:
  7125 ;;		line 75 in file "I2C_Soft.c"
  7126 ;; Parameters:    Size  Location     Type
  7127 ;;		None
  7128 ;; Auto vars:     Size  Location     Type
  7129 ;;		None
  7130 ;; Return value:  Size  Location     Type
  7131 ;;		None               void
  7132 ;; Registers used:
  7133 ;;		wreg, cstack
  7134 ;; Tracked objects:
  7135 ;;		On entry : 0/0
  7136 ;;		On exit  : 0/0
  7137 ;;		Unchanged: 0/0
  7138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7142 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7143 ;;Total ram usage:        0 bytes
  7144 ;; Hardware stack levels used:    1
  7145 ;; Hardware stack levels required when called:    2
  7146 ;; This function calls:
  7147 ;;		_i2cHighScl
  7148 ;;		_i2cHighSda
  7149 ;;		_i2cLowScl
  7150 ;;		_i2cLowSda
  7151 ;; This function is called by:
  7152 ;;		_DS1621_Read_Temp
  7153 ;;		_DS3231_Read_Time
  7154 ;;		_I2C_Write_Address_Read_One_Byte
  7155 ;;		_I2C_Write_Cmd_Read_One_Byte
  7156 ;; This function uses a non-reentrant model
  7157 ;;
  7158                           
  7159                           	psect	text44
  7160  0011F8                     __ptext44:
  7161                           	opt stack 0
  7162  0011F8                     _I2C_ReStart:
  7163                           	opt stack 27
  7164                           
  7165                           ;I2C_Soft.c: 77: i2cLowScl();
  7166                           
  7167                           ;incstack = 0
  7168  0011F8  EC6B  F009         	call	_i2cLowScl	;wreg free
  7169                           
  7170                           ;I2C_Soft.c: 78: i2cHighSda();
  7171  0011FC  EC6F  F009         	call	_i2cHighSda	;wreg free
  7172                           
  7173                           ;I2C_Soft.c: 79: i2cHighScl();
  7174  001200  EC56  F009         	call	_i2cHighScl	;wreg free
  7175                           
  7176                           ;I2C_Soft.c: 80: i2cLowSda();
  7177  001204  EC66  F009         	call	_i2cLowSda	;wreg free
  7178                           
  7179                           ;I2C_Soft.c: 81: i2cLowScl();
  7180  001208  EC6B  F009         	call	_i2cLowScl	;wreg free
  7181  00120C  0012               	return		;funcret
  7182  00120E                     __end_of_I2C_ReStart:
  7183                           	opt stack 0
  7184                           tblptru	equ	0xFF8
  7185                           tblptrh	equ	0xFF7
  7186                           tblptrl	equ	0xFF6
  7187                           tablat	equ	0xFF5
  7188                           prodh	equ	0xFF4
  7189                           prodl	equ	0xFF3
  7190                           intcon2	equ	0xFF1
  7191                           postinc0	equ	0xFEE
  7192                           wreg	equ	0xFE8
  7193                           postdec1	equ	0xFE5
  7194                           fsr1l	equ	0xFE1
  7195                           indf2	equ	0xFDF
  7196                           postinc2	equ	0xFDE
  7197                           postdec2	equ	0xFDD
  7198                           fsr2h	equ	0xFDA
  7199                           fsr2l	equ	0xFD9
  7200                           status	equ	0xFD8
  7201                           
  7202 ;; *************** function _i2cLowSda *****************
  7203 ;; Defined at:
  7204 ;;		line 98 in file "I2C_Soft.c"
  7205 ;; Parameters:    Size  Location     Type
  7206 ;;		None
  7207 ;; Auto vars:     Size  Location     Type
  7208 ;;		None
  7209 ;; Return value:  Size  Location     Type
  7210 ;;		None               void
  7211 ;; Registers used:
  7212 ;;		None
  7213 ;; Tracked objects:
  7214 ;;		On entry : 0/0
  7215 ;;		On exit  : 0/0
  7216 ;;		Unchanged: 0/0
  7217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7222 ;;Total ram usage:        0 bytes
  7223 ;; Hardware stack levels used:    1
  7224 ;; Hardware stack levels required when called:    1
  7225 ;; This function calls:
  7226 ;;		Nothing
  7227 ;; This function is called by:
  7228 ;;		_I2C_Write
  7229 ;;		_i2cAck
  7230 ;;		_I2C_Start
  7231 ;;		_I2C_ReStart
  7232 ;;		_I2C_Stop
  7233 ;; This function uses a non-reentrant model
  7234 ;;
  7235                           
  7236                           	psect	text45
  7237  0012CC                     __ptext45:
  7238                           	opt stack 0
  7239  0012CC                     _i2cLowSda:
  7240                           	opt stack 25
  7241                           
  7242                           ;I2C_Soft.c: 100: PORTAbits.RA2 = 0;
  7243                           
  7244                           ;incstack = 0
  7245  0012CC  9480               	bcf	3968,2,c	;volatile
  7246                           
  7247                           ;I2C_Soft.c: 101: TRISAbits.RA2 = 0;
  7248  0012CE  9492               	bcf	3986,2,c	;volatile
  7249                           
  7250                           ;I2C_Soft.c: 102: _delay((unsigned long)((2)*(8000000/4000000.0)));
  7251  0012D0  D000               	nop2		;2 cycle nop
  7252  0012D2  D000               	nop2		;2 cycle nop
  7253  0012D4  0012               	return		;funcret
  7254  0012D6                     __end_of_i2cLowSda:
  7255                           	opt stack 0
  7256                           tblptru	equ	0xFF8
  7257                           tblptrh	equ	0xFF7
  7258                           tblptrl	equ	0xFF6
  7259                           tablat	equ	0xFF5
  7260                           prodh	equ	0xFF4
  7261                           prodl	equ	0xFF3
  7262                           intcon2	equ	0xFF1
  7263                           postinc0	equ	0xFEE
  7264                           wreg	equ	0xFE8
  7265                           postdec1	equ	0xFE5
  7266                           fsr1l	equ	0xFE1
  7267                           indf2	equ	0xFDF
  7268                           postinc2	equ	0xFDE
  7269                           postdec2	equ	0xFDD
  7270                           fsr2h	equ	0xFDA
  7271                           fsr2l	equ	0xFD9
  7272                           status	equ	0xFD8
  7273                           
  7274 ;; *************** function _i2cLowScl *****************
  7275 ;; Defined at:
  7276 ;;		line 111 in file "I2C_Soft.c"
  7277 ;; Parameters:    Size  Location     Type
  7278 ;;		None
  7279 ;; Auto vars:     Size  Location     Type
  7280 ;;		None
  7281 ;; Return value:  Size  Location     Type
  7282 ;;		None               void
  7283 ;; Registers used:
  7284 ;;		None
  7285 ;; Tracked objects:
  7286 ;;		On entry : 0/0
  7287 ;;		On exit  : 0/0
  7288 ;;		Unchanged: 0/0
  7289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7293 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7294 ;;Total ram usage:        0 bytes
  7295 ;; Hardware stack levels used:    1
  7296 ;; Hardware stack levels required when called:    1
  7297 ;; This function calls:
  7298 ;;		Nothing
  7299 ;; This function is called by:
  7300 ;;		_I2C_Read
  7301 ;;		_I2C_Write
  7302 ;;		_i2cNack
  7303 ;;		_i2cAck
  7304 ;;		_I2C_Start
  7305 ;;		_I2C_ReStart
  7306 ;;		_I2C_Stop
  7307 ;; This function uses a non-reentrant model
  7308 ;;
  7309                           
  7310                           	psect	text46
  7311  0012D6                     __ptext46:
  7312                           	opt stack 0
  7313  0012D6                     _i2cLowScl:
  7314                           	opt stack 25
  7315                           
  7316                           ;I2C_Soft.c: 113: PORTAbits.RA4 = 0;
  7317                           
  7318                           ;incstack = 0
  7319  0012D6  9880               	bcf	3968,4,c	;volatile
  7320                           
  7321                           ;I2C_Soft.c: 114: TRISAbits.RA4 = 0;
  7322  0012D8  9892               	bcf	3986,4,c	;volatile
  7323                           
  7324                           ;I2C_Soft.c: 115: _delay((unsigned long)((1)*(8000000/4000000.0)));
  7325  0012DA  D000               	nop2		;2 cycle nop
  7326  0012DC  0012               	return		;funcret
  7327  0012DE                     __end_of_i2cLowScl:
  7328                           	opt stack 0
  7329                           tblptru	equ	0xFF8
  7330                           tblptrh	equ	0xFF7
  7331                           tblptrl	equ	0xFF6
  7332                           tablat	equ	0xFF5
  7333                           prodh	equ	0xFF4
  7334                           prodl	equ	0xFF3
  7335                           intcon2	equ	0xFF1
  7336                           postinc0	equ	0xFEE
  7337                           wreg	equ	0xFE8
  7338                           postdec1	equ	0xFE5
  7339                           fsr1l	equ	0xFE1
  7340                           indf2	equ	0xFDF
  7341                           postinc2	equ	0xFDE
  7342                           postdec2	equ	0xFDD
  7343                           fsr2h	equ	0xFDA
  7344                           fsr2l	equ	0xFD9
  7345                           status	equ	0xFD8
  7346                           
  7347 ;; *************** function _i2cHighSda *****************
  7348 ;; Defined at:
  7349 ;;		line 92 in file "I2C_Soft.c"
  7350 ;; Parameters:    Size  Location     Type
  7351 ;;		None
  7352 ;; Auto vars:     Size  Location     Type
  7353 ;;		None
  7354 ;; Return value:  Size  Location     Type
  7355 ;;		None               void
  7356 ;; Registers used:
  7357 ;;		None
  7358 ;; Tracked objects:
  7359 ;;		On entry : 0/0
  7360 ;;		On exit  : 0/0
  7361 ;;		Unchanged: 0/0
  7362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7366 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7367 ;;Total ram usage:        0 bytes
  7368 ;; Hardware stack levels used:    1
  7369 ;; Hardware stack levels required when called:    1
  7370 ;; This function calls:
  7371 ;;		Nothing
  7372 ;; This function is called by:
  7373 ;;		_I2C_Init
  7374 ;;		_I2C_Read
  7375 ;;		_I2C_Write
  7376 ;;		_i2cAck
  7377 ;;		_I2C_Start
  7378 ;;		_I2C_ReStart
  7379 ;;		_I2C_Stop
  7380 ;; This function uses a non-reentrant model
  7381 ;;
  7382                           
  7383                           	psect	text47
  7384  0012DE                     __ptext47:
  7385                           	opt stack 0
  7386  0012DE                     _i2cHighSda:
  7387                           	opt stack 27
  7388                           
  7389                           ;I2C_Soft.c: 94: TRISAbits.RA2 = 1;
  7390                           
  7391                           ;incstack = 0
  7392  0012DE  8492               	bsf	3986,2,c	;volatile
  7393                           
  7394                           ;I2C_Soft.c: 95: _delay((unsigned long)((2)*(8000000/4000000.0)));
  7395  0012E0  D000               	nop2		;2 cycle nop
  7396  0012E2  D000               	nop2		;2 cycle nop
  7397  0012E4  0012               	return		;funcret
  7398  0012E6                     __end_of_i2cHighSda:
  7399                           	opt stack 0
  7400                           tblptru	equ	0xFF8
  7401                           tblptrh	equ	0xFF7
  7402                           tblptrl	equ	0xFF6
  7403                           tablat	equ	0xFF5
  7404                           prodh	equ	0xFF4
  7405                           prodl	equ	0xFF3
  7406                           intcon2	equ	0xFF1
  7407                           postinc0	equ	0xFEE
  7408                           wreg	equ	0xFE8
  7409                           postdec1	equ	0xFE5
  7410                           fsr1l	equ	0xFE1
  7411                           indf2	equ	0xFDF
  7412                           postinc2	equ	0xFDE
  7413                           postdec2	equ	0xFDD
  7414                           fsr2h	equ	0xFDA
  7415                           fsr2l	equ	0xFD9
  7416                           status	equ	0xFD8
  7417                           
  7418 ;; *************** function _i2cHighScl *****************
  7419 ;; Defined at:
  7420 ;;		line 105 in file "I2C_Soft.c"
  7421 ;; Parameters:    Size  Location     Type
  7422 ;;		None
  7423 ;; Auto vars:     Size  Location     Type
  7424 ;;		None
  7425 ;; Return value:  Size  Location     Type
  7426 ;;		None               void
  7427 ;; Registers used:
  7428 ;;		wreg
  7429 ;; Tracked objects:
  7430 ;;		On entry : 0/0
  7431 ;;		On exit  : 0/0
  7432 ;;		Unchanged: 0/0
  7433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7438 ;;Total ram usage:        0 bytes
  7439 ;; Hardware stack levels used:    1
  7440 ;; Hardware stack levels required when called:    1
  7441 ;; This function calls:
  7442 ;;		Nothing
  7443 ;; This function is called by:
  7444 ;;		_I2C_Init
  7445 ;;		_I2C_Read
  7446 ;;		_I2C_Write
  7447 ;;		_i2cNack
  7448 ;;		_i2cAck
  7449 ;;		_I2C_Start
  7450 ;;		_I2C_ReStart
  7451 ;;		_I2C_Stop
  7452 ;; This function uses a non-reentrant model
  7453 ;;
  7454                           
  7455                           	psect	text48
  7456  0012AC                     __ptext48:
  7457                           	opt stack 0
  7458  0012AC                     _i2cHighScl:
  7459                           	opt stack 27
  7460                           
  7461                           ;I2C_Soft.c: 107: TRISAbits.RA4 = 1;
  7462                           
  7463                           ;incstack = 0
  7464  0012AC  8892               	bsf	3986,4,c	;volatile
  7465                           
  7466                           ;I2C_Soft.c: 108: _delay((unsigned long)((10)*(8000000/4000000.0)));
  7467  0012AE  0E06               	movlw	6
  7468  0012B0                     u3167:
  7469  0012B0  2EE8               	decfsz	wreg,f,c
  7470  0012B2  D7FE               	goto	u3167
  7471  0012B4  D000               	nop2		;nop
  7472  0012B6  0012               	return		;funcret
  7473  0012B8                     __end_of_i2cHighScl:
  7474                           	opt stack 0
  7475                           tblptru	equ	0xFF8
  7476                           tblptrh	equ	0xFF7
  7477                           tblptrl	equ	0xFF6
  7478                           tablat	equ	0xFF5
  7479                           prodh	equ	0xFF4
  7480                           prodl	equ	0xFF3
  7481                           intcon2	equ	0xFF1
  7482                           postinc0	equ	0xFEE
  7483                           wreg	equ	0xFE8
  7484                           postdec1	equ	0xFE5
  7485                           fsr1l	equ	0xFE1
  7486                           indf2	equ	0xFDF
  7487                           postinc2	equ	0xFDE
  7488                           postdec2	equ	0xFDD
  7489                           fsr2h	equ	0xFDA
  7490                           fsr2l	equ	0xFD9
  7491                           status	equ	0xFD8
  7492                           
  7493 ;; *************** function _chkisr *****************
  7494 ;; Defined at:
  7495 ;;		line 14 in file "Interrupt.c"
  7496 ;; Parameters:    Size  Location     Type
  7497 ;;		None
  7498 ;; Auto vars:     Size  Location     Type
  7499 ;;		None
  7500 ;; Return value:  Size  Location     Type
  7501 ;;		None               void
  7502 ;; Registers used:
  7503 ;;		None
  7504 ;; Tracked objects:
  7505 ;;		On entry : 0/0
  7506 ;;		On exit  : 0/0
  7507 ;;		Unchanged: 0/0
  7508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7511 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7512 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7513 ;;Total ram usage:       14 bytes
  7514 ;; Hardware stack levels used:    1
  7515 ;; This function calls:
  7516 ;;		Nothing
  7517 ;; This function is called by:
  7518 ;;		Interrupt level 2
  7519 ;; This function uses a non-reentrant model
  7520 ;;
  7521                           
  7522                           	psect	intcode
  7523  000008                     __pintcode:
  7524                           	opt stack 0
  7525  000008                     _chkisr:
  7526                           	opt stack 21
  7527                           
  7528                           ;incstack = 0
  7529  000008  CFFA F001          	movff	pclath,??_chkisr
  7530  00000C  CFFB F002          	movff	pclatu,??_chkisr+1
  7531  000010  CFE9 F003          	movff	fsr0l,??_chkisr+2
  7532  000014  EDEC  F005         	call	int_func,f	;refresh shadow registers
  7533                           pclatu	equ	0xFFB
  7534                           pclath	equ	0xFFA
  7535                           tblptru	equ	0xFF8
  7536                           tblptrh	equ	0xFF7
  7537                           tblptrl	equ	0xFF6
  7538                           tablat	equ	0xFF5
  7539                           prodh	equ	0xFF4
  7540                           prodl	equ	0xFF3
  7541                           intcon2	equ	0xFF1
  7542                           postinc0	equ	0xFEE
  7543                           fsr0l	equ	0xFE9
  7544                           wreg	equ	0xFE8
  7545                           postdec1	equ	0xFE5
  7546                           fsr1l	equ	0xFE1
  7547                           indf2	equ	0xFDF
  7548                           postinc2	equ	0xFDE
  7549                           postdec2	equ	0xFDD
  7550                           fsr2h	equ	0xFDA
  7551                           fsr2l	equ	0xFD9
  7552                           status	equ	0xFD8
  7553                           
  7554                           	psect	intcode_body
  7555  000BD8                     __pintcode_body:
  7556                           	opt stack 21
  7557  000BD8                     int_func:
  7558                           	opt stack 21
  7559  000BD8  0006               	pop		; remove dummy address from shadow register refresh
  7560  000BDA  CFEA F004          	movff	fsr0h,??_chkisr+3
  7561  000BDE  CFE1 F005          	movff	fsr1l,??_chkisr+4
  7562  000BE2  CFE2 F006          	movff	fsr1h,??_chkisr+5
  7563  000BE6  CFD9 F007          	movff	fsr2l,??_chkisr+6
  7564  000BEA  CFDA F008          	movff	fsr2h,??_chkisr+7
  7565  000BEE  CFF3 F009          	movff	prodl,??_chkisr+8
  7566  000BF2  CFF4 F00A          	movff	prodh,??_chkisr+9
  7567  000BF6  CFF6 F00B          	movff	tblptrl,??_chkisr+10
  7568  000BFA  CFF7 F00C          	movff	tblptrh,??_chkisr+11
  7569  000BFE  CFF8 F00D          	movff	tblptru,??_chkisr+12
  7570  000C02  CFF5 F00E          	movff	tablat,??_chkisr+13
  7571  000C06  C00E  FFF5         	movff	??_chkisr+13,tablat
  7572  000C0A  C00D  FFF8         	movff	??_chkisr+12,tblptru
  7573  000C0E  C00C  FFF7         	movff	??_chkisr+11,tblptrh
  7574  000C12  C00B  FFF6         	movff	??_chkisr+10,tblptrl
  7575  000C16  C00A  FFF4         	movff	??_chkisr+9,prodh
  7576  000C1A  C009  FFF3         	movff	??_chkisr+8,prodl
  7577  000C1E  C008  FFDA         	movff	??_chkisr+7,fsr2h
  7578  000C22  C007  FFD9         	movff	??_chkisr+6,fsr2l
  7579  000C26  C006  FFE2         	movff	??_chkisr+5,fsr1h
  7580  000C2A  C005  FFE1         	movff	??_chkisr+4,fsr1l
  7581  000C2E  C004  FFEA         	movff	??_chkisr+3,fsr0h
  7582  000C32  C003  FFE9         	movff	??_chkisr+2,fsr0l
  7583  000C36  C002  FFFB         	movff	??_chkisr+1,pclatu
  7584  000C3A  C001  FFFA         	movff	??_chkisr,pclath
  7585  000C3E  0011               	retfie		f
  7586  000C40                     __end_of_chkisr:
  7587                           	opt stack 0
  7588                           pclatu	equ	0xFFB
  7589                           pclath	equ	0xFFA
  7590                           tblptru	equ	0xFF8
  7591                           tblptrh	equ	0xFF7
  7592                           tblptrl	equ	0xFF6
  7593                           tablat	equ	0xFF5
  7594                           prodh	equ	0xFF4
  7595                           prodl	equ	0xFF3
  7596                           intcon2	equ	0xFF1
  7597                           postinc0	equ	0xFEE
  7598                           fsr0h	equ	0xFEA
  7599                           fsr0l	equ	0xFE9
  7600                           wreg	equ	0xFE8
  7601                           postdec1	equ	0xFE5
  7602                           fsr1h	equ	0xFE2
  7603                           fsr1l	equ	0xFE1
  7604                           indf2	equ	0xFDF
  7605                           postinc2	equ	0xFDE
  7606                           postdec2	equ	0xFDD
  7607                           fsr2h	equ	0xFDA
  7608                           fsr2l	equ	0xFD9
  7609                           status	equ	0xFD8
  7610                           pclatu	equ	0xFFB
  7611                           pclath	equ	0xFFA
  7612                           tblptru	equ	0xFF8
  7613                           tblptrh	equ	0xFF7
  7614                           tblptrl	equ	0xFF6
  7615                           tablat	equ	0xFF5
  7616                           prodh	equ	0xFF4
  7617                           prodl	equ	0xFF3
  7618                           intcon2	equ	0xFF1
  7619                           postinc0	equ	0xFEE
  7620                           fsr0h	equ	0xFEA
  7621                           fsr0l	equ	0xFE9
  7622                           wreg	equ	0xFE8
  7623                           postdec1	equ	0xFE5
  7624                           fsr1h	equ	0xFE2
  7625                           fsr1l	equ	0xFE1
  7626                           indf2	equ	0xFDF
  7627                           postinc2	equ	0xFDE
  7628                           postdec2	equ	0xFDD
  7629                           fsr2h	equ	0xFDA
  7630                           fsr2l	equ	0xFD9
  7631                           status	equ	0xFD8
  7632                           
  7633                           	psect	rparam
  7634  0000                     pclatu	equ	0xFFB
  7635                           pclath	equ	0xFFA
  7636                           tblptru	equ	0xFF8
  7637                           tblptrh	equ	0xFF7
  7638                           tblptrl	equ	0xFF6
  7639                           tablat	equ	0xFF5
  7640                           prodh	equ	0xFF4
  7641                           prodl	equ	0xFF3
  7642                           intcon2	equ	0xFF1
  7643                           postinc0	equ	0xFEE
  7644                           fsr0h	equ	0xFEA
  7645                           fsr0l	equ	0xFE9
  7646                           wreg	equ	0xFE8
  7647                           postdec1	equ	0xFE5
  7648                           fsr1h	equ	0xFE2
  7649                           fsr1l	equ	0xFE1
  7650                           indf2	equ	0xFDF
  7651                           postinc2	equ	0xFDE
  7652                           postdec2	equ	0xFDD
  7653                           fsr2h	equ	0xFDA
  7654                           fsr2l	equ	0xFD9
  7655                           status	equ	0xFD8


Data Sizes:
    Strings     118
    Constant    493
    Data        149
    BSS         72
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     66     109
    BANK0           128      7     101
    BANK1           256      0      84
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_4(CODE[8]), STR_3(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 43
		 -> STR_2(CODE[43]), STR_1(CODE[30]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _printf->___lwmod
    ___lwmod->___lwdiv
    _init_UART->_OpenUSART
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS3231_Setup_Time->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    None.

Critical Paths under _main in BANK0

    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   25422
                                             64 COMRAM     2     2      0
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _DS3231_Setup_Time
                            _Do_Init
                            ___awdiv
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    3055
                                             26 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     265
                                             21 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     374
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     406
                                             14 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0   21336
                        _DS1621_Init
                           _I2C_Init
                  _Initialize_Screen
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     273
                                             14 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _Initialize_Screen                                    0     0      0   20576
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _strcpy                                               6     2      4     287
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _fillScreen                                           2     0      2    2192
                                             33 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (4) _fillRectangle                                       12     7      5    2096
                                             21 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawtext                                            17     9      8   12201
                                             54 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2     195
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (4) _drawChar                                            11     4      7   10644
                                             43 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (5) _fillRect                                            11     6      5    3876
                                             32 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (6) _drawFastVLine                                       11     7      4    3102
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _drawPixel                                            4     1      3    4207
                                             21 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _setAddrWindow                                        4     1      3    1034
                                             17 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _TFT_GreenTab_Initialize                              0     0      0    4104
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd3                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _Rcmd1                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _write_data                                           1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _write_command                                        1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _spiwrite                                             2     2      0      34
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _LCD_Reset                                            0     0      0    1792
                           _delay_ms
 ---------------------------------------------------------------------------------
 (5) _delay_ms                                             6     4      2    1792
                                             20 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     752
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      53
                                             14 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     434
                                             19 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     232
                                             16 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     157
                                             16 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Setup_Time                                    2     2      0      90
                                             16 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     2     2      0     195
                                             17 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     241
                                             17 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0      60
                                             14 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0      90
                                             14 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _chkisr                                             14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Setup_Time
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _Initialize_Screen
       _LCD_Reset
         _delay_ms
           ___wmul
       _TFT_GreenTab_Initialize
         _Rcmd1
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd2red
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _Rcmd3
           _delay_ms
             ___wmul
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _drawtext
         _drawChar
           ___wmul
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _fillScreen
         _fillRectangle
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
       _strcpy
     _init_UART
       _OpenUSART
   ___awdiv
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      54       7       32.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      7      65       5       78.9%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     42      6D       1       85.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     126      34        0.0%
DATA                 0      0     126       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Nov 09 20:28:42 2022

                                _i 005D                 __size_of_I2C_Start 0012  
                      _SSPSTATbits 000FC7                 __size_of_I2C_Write 003E  
                               l35 0E04                                 l45 1230  
                               l95 0AEC                                 l89 110E  
                     ___awdiv@sign 0014                ___wmul@multiplicand 0011  
                              l111 04CA                                l120 0420  
                              l113 03A4                                l151 088E  
                              l152 08B0                                l242 1042  
                              l322 10AC                                l148 08B2  
                              l149 081E                                l239 0F36  
                              l523 011C                                l461 12A2  
                              l560 0374                                l590 0BBA  
                              l591 0BBC                                l584 0B94  
                              l593 0BD6                                l596 1160  
                              l588 0BAE                                l589 0BB0  
                              l789 0948                                _day 0059  
             __size_of_I2C_ReStart 0016                                _dow 005A  
                              _nbr 0049                                _txt 004D  
                              wreg 000FE8                    ??_fillRectangle 001B  
                     __CFG_LVP$OFF 000000            _TFT_GreenTab_Initialize 1110  
                     __CFG_WDT$OFF 000000                               l1027 1182  
                   drawFastVLine@h 0017                               l1119 0D5C  
                             l1129 0E9C                               l1158 0FF4  
                             l1504 104C                               l4000 0036  
                             l1506 1052                               l4002 0044  
                             l1700 0F18                               l1516 1064  
                             l3212 08CA                               l4020 00E6  
                             l4012 0082                     drawFastVLine@x 0020  
                   drawFastVLine@y 0016                               l1710 0F2C  
                             l4110 02EC                               l4102 028C  
                             l4006 004E                               l1712 0F32  
                             l3224 08F2                               l3240 092E  
                             l4120 034C                               l4040 0164  
                             l4024 00EE                               l4008 0064  
                             l1706 0F20                               l3226 08FC  
                             l3218 08DC                               l4106 02A0  
                             l4050 0198                               l4042 0168  
                             l4122 0358                               l3244 093E  
                             l3236 0922                               l3228 0904  
                             l4108 02A8                               l4116 0332  
                             l4060 01AE                               l4036 014A  
                             l4118 0344                               l4054 019E  
                             l4046 0174                               l4070 01D8  
                             l4064 01D2                               l4056 01A2  
                             l4072 01EA                               l1498 103A  
                             l3602 0AD4                               l4090 024C  
                             l4082 022A                               l1692 0F02  
                             l3604 0AE2                               l4092 0254  
                             l4084 0234                               l3630 10F0  
                             l4078 0206                               l1688 0EFA  
                             l4096 026C                               l4416 0954  
                             l1698 0F10                               l3642 0ECC  
                             l3810 0856                               l2850 0B84  
                             l4098 0274                               l3740 0386  
                             l3804 07E8                               l2932 117A  
                             l3638 0EB0                               l3750 03A8  
                             l3830 089C                               l3822 0884  
                             l2854 0B8C                               l2846 0B7A  
                             l2942 0D20                               l3592 0AAE  
                             l3760 0414                               l3744 0392  
                             l2944 0D2A                               l3770 0442  
                             l3762 0418                               l3754 03B0  
                             l3826 0892                               l2866 0BA6  
                             l2858 0B98                               l2954 0D50  
                             l2946 0D32                               l2970 0E90  
                             l2962 0E68                               l3588 0A76  
                             l3780 04BE                               l3772 046A  
                             l3748 03A0                               l3836 08AC  
                             l2892 10B8                               l2964 0E72  
                             l3758 03E0                               l3870 0676  
                             l3854 0608                               l2894 10C2  
                             l2966 0E7A     I2C_Write_Cmd_Write_Data@Device 0013  
                             l3792 0FC2                               l3880 06D0  
                             l3778 0496                               l3786 04C6  
                             l3794 0FC8                               l3866 0658  
                             l3878 06C8                               l3996 0026  
                             STR_1 FFB3                               STR_2 FF88  
                             STR_3 FFD1                               STR_4 FFF6  
                             STR_5 FFE5                               u2340 0AA4  
                             u2500 0478                               u3167 12B0  
                             u2640 0632                               u2570 0816  
                             u2580 084C                               _RBPU 007F8F  
                             _TRMT 007D61                               _main 094A  
                             _font FD9B                               _hour 005C  
                 __end_of_I2C_Init 12C2                   __end_of_I2C_Read 0F38  
                             _year 006B                               fsr0h 000FEA  
                             _txt1 0100                               fsr1h 000FE2  
                             fsr0l 000FE9                               fsr2h 000FDA  
                             fsr1l 000FE1                               indf2 000FDF  
                             fsr2l 000FD9                               _wrap 006D  
                 __end_of_I2C_Stop 125A                               pclat 000FFA  
               __size_of_LCD_Reset 0012                               prodh 000FF4  
                             prodl 000FF3                               start 0018  
      __size_of_I2C_Write_Cmd_Only 001A                    __end_of_Do_Init 0F78  
                  ??_drawFastVLine 001A                    __end_of_i2cNack 12CC  
                     ___param_bank 000010                    drawFastVLine@hi 001E  
                  drawFastVLine@lo 001F                              ?_main 0001  
                  __end_of___awdiv 094A                    ___awdiv@divisor 0011  
                            _T3CON 000FB1                    __end_of___lwdiv 0D66  
                  __end_of___lwmod 0EA6                    ___awdiv@counter 0013  
                            _RCSTA 000FAB                              _TMR3H 000FB3  
                            _TMR3L 000FB2                              _SPBRG 000FAF  
                            _TRISA 000F92                              _TRISB 000F93  
                            _TRISC 000F94                              _TRISD 000F95  
                            _TRISE 000F96                              _TXREG 000FAD  
                            _TXSTA 000FAC                              _Rcmd1 04CC  
                            _Rcmd3 06E6                         _i2cHighSda 12DE  
                       _i2cHighScl 12AC                    __end_of_dpowers FF80  
                            _color 0080                              _font2 FE9A  
                            _found 005B                    __end_of_isdigit 1184  
                            _month 005F                              _putch 129E  
                __end_of_I2C_Start 126C                  __end_of_I2C_Write 1072  
                   __CFG_BOREN$OFF 000000                              tablat 000FF5  
                            status 000FD8                  ?_DS1621_Read_Temp 0012  
                  write_data@data_ 0011                 ??_DS1621_Read_Temp 0014  
                  __initialization 0AEE                       __end_of_main 09D8  
                     __end_of_font FE9A                   __end_of_Rcmd2red 1034  
                           ??_main 0041                      __activetblptr 000002  
                ?_DS3231_Read_Time 0001                  __end_of_LCD_Reset 1248  
        ??_TFT_GreenTab_Initialize 001B                 ??_DS3231_Read_Time 0012  
                           ?_Rcmd1 0001                             ?_Rcmd3 0001  
                        I2C_Init@c 000F                          I2C_Read@n 0010  
                           _ADCON1 000FC1                DS1621_Read_Temp@Cmd 0014  
                 ___awdiv@dividend 000F                 __size_of_i2cLowSda 000A  
               __size_of_i2cLowScl 0008                             ?_putch 0001  
                        ??_Do_Init 0041                             _OSCCON 000FD3  
                           _SPBRGH 000FB0                             _SSPBUF 000FC9  
                        ??_i2cNack 000F                   __end_of_delay_ms 0E0C  
                           _i2cAck 126C                         _TempSecond 0051  
                 __end_of_fillRect 0EF0                   __end_of_drawChar 04CC  
               __size_of_OpenUSART 0070                             ___wmul 113A  
                        ??___awdiv 0013                   __end_of_drawtext 06E6  
                           _chkisr 0008                          ??___lwdiv 0013  
                           _array1 00AA                          ??___lwmod 001A  
                           _buffer 00BF                             _nec_ok 004B  
                           clear_0 0AF4                             clear_1 0B00  
                 ___awdiv@quotient 0015                             _minute 005E  
                           _second 0061            DS3231_Setup_Time@Device 0011  
                           _printf 001C                       drawtext@size 003E  
                           _strcpy 10AE                             _strlen 0FB8  
                     __pdataCOMRAM 006C                          ??_isdigit 000F  
                        ?_I2C_Init 000F                          ?_I2C_Read 0001  
                        ?_I2C_Stop 0001                       __mediumconst FD9A  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8   __end_of_I2C_Write_Cmd_Write_Data 11A4  
                      ?_i2cHighSda 0001                        ?_i2cHighScl 0001  
                           putch@c 000F                   __end_of_spiwrite 1236  
                       __accesstop 0080            __end_of__initialization 0B5E  
               _setup_alarm_minute 0063                 _setup_alarm_second 0064  
                    ___rparam_used 000001                      __end_of_Rcmd1 05DC  
                    __end_of_Rcmd3 07D8                     __pcstackCOMRAM 0001  
                     __pidataBANK0 0F78                       __pidataBANK1 0D66  
                    __end_of_font2 FF76                  __end_of_i2cLowSda 12D6  
                __end_of_i2cLowScl 12DE                      __end_of_putch 12AC  
                   drawPixel@color 0017             __size_of_write_command 0010  
                       ??_I2C_Init 0013                         ??_I2C_Read 000F  
                     _alarm_minute 0055                       _alarm_second 0056  
                       ??_I2C_Stop 000F                            ??_Rcmd1 001B  
                          ??_Rcmd3 001B                 __size_of_drawPixel 0030  
                __end_of_OpenUSART 0BD8                            ??_putch 000F  
                       __pbssBANK0 00BF                   _setup_alarm_hour 0062  
                    ??_DS1621_Init 0014                          ?_Rcmd2red 0001  
               __size_of_init_UART 0014                    spiwrite@spidata 0010  
                       _alarm_date 0053                         _alarm_hour 0054  
                          ?_i2cAck 0001                 __CFG_CCP2MX$PORTBE 000000  
                   I2C_Read@inByte 0011                            ?___wmul 000F  
              __size_of_i2cHighSda 0008                __size_of_i2cHighScl 000C  
                          ?_chkisr 0001             __size_of_setAddrWindow 004E  
 I2C_Write_Cmd_Write_Data@Data_Out 0012                      ??_I2C_ReStart 000F  
                       I2C_Write@n 0010                            ?_printf 001B  
                          ?_strcpy 000F                            ?_strlen 000F  
                       _fillScreen 11C2                          ?_delay_ms 0015  
                        ?_fillRect 0021                          ?_drawChar 002C  
                          _SSPCON1 000FC6                            _SSPSTAT 000FC7  
            __end_of_fillRectangle 08B4                          ?_drawtext 0037  
                _DS3231_Setup_Time 0C40                            _Do_Init 0F38  
         _I2C_Write_Cmd_Write_Data 1184         __end_of_I2C_Write_Cmd_Only 11F8  
                       ??_Rcmd2red 0012             DS1621_Read_Temp@Device 0016  
                          _i2cNack 12C2                 ?_DS3231_Setup_Time 0001  
                    _write_command 128E                          _I2C_Start 125A  
                        _I2C_Write 1034                    __size_of_i2cAck 0012  
                          __Hparam 0000                            __Lparam 0000  
              __end_of_DS1621_Init 11C2                  __end_of_drawPixel 1110  
              ??_DS3231_Setup_Time 0011              __end_of_drawFastVLine 0AEE  
                          ___awdiv 08B4                    __size_of___wmul 0028  
                          ___lwdiv 0D0A                            ___lwmod 0E5A  
                  __size_of_chkisr 0C38                          ?_spiwrite 0001  
                          __pcinit 0AEE                            __ramtop 1000  
                          __ptext0 094A                            __ptext1 001C  
                          __ptext2 129E                            __ptext3 1162  
                          __ptext4 0E5A                            __ptext5 0D0A  
        __size_of_DS1621_Read_Temp 003C                            __ptext6 08B4  
                          __ptext7 0F38                            __ptext8 120E  
                          __ptext9 0B68                    __size_of_printf 035A  
                __end_of_init_UART 1222                    __size_of_strcpy 0032  
                  __size_of_strlen 003E                  __end_of_hexpowers FF88  
         DS3231_Setup_Time@Address 0012                            _dpowers FF76  
                          _isdigit 1162                          _T3CONbits 000FB1  
                       ??_delay_ms 0017                __end_of_I2C_ReStart 120E  
                    drawtext@_text 0038                      drawtext@color 003A  
                       ??_fillRect 0026          __end_of_DS3231_Setup_Time 0CA6  
                       ??_drawChar 0033                          _LCD_Reset 1236  
                    _setAddrWindow 0E0C                     __pintcode_body 0BD8  
                       delay_ms@ms 0015               end_of_initialization 0B5E  
                       ??_drawtext 003F                     ?_write_command 0001  
                    __Lmediumconst FD9A          __size_of_DS3231_Read_Time 0064  
                          int_func 0BD8            DS3231_Read_Time@Address 0012  
                       ?_I2C_Start 0001                         ?_I2C_Write 0001  
                       _tempSecond 006C                          _RCSTAbits 000FAB  
                          printf@c 0036                            printf@f 001B  
                          postdec1 000FE5                            postdec2 000FDD  
                          postinc0 000FEE                            postinc2 000FDE  
                       ??_spiwrite 000F                            strlen@s 000F  
      I2C_Write_Cmd_Write_Data@Cmd 0011                          _PORTAbits 000F80  
                 drawtext@cursor_x 00E4                   drawtext@cursor_y 00E3  
                        _PORTCbits 000F82                   I2C_Write@outByte 000F  
                      ?_fillScreen 0022                         _setup_hour 0066  
                       _setup_year 006A                         drawChar@bg 0030  
                        _TRISAbits 000F92                          _TRISCbits 000F94  
                     ??_i2cHighSda 000F                       ??_i2cHighScl 000F  
                __size_of_I2C_Init 000A                  __size_of_I2C_Read 0048  
                __size_of_I2C_Stop 0012                     ?_setAddrWindow 0012  
                       ?_LCD_Reset 0001                   drawtext@textsize 00DF  
                       drawPixel@x 0019                         drawPixel@y 0016  
                      _DS1621_Init 11A4                        printf@width 0034  
                        _TXSTAbits 000FAC                     __end_of_i2cAck 127E  
         DS1621_Read_Temp@Data_Ret 0015                 __end_of_i2cHighSda 12E6  
               __end_of_i2cHighScl 12B8                     __end_of___wmul 1162  
                    delay_ms@count 0019                         _write_data 127E  
                    __pidataCOMRAM 12E6                     __end_of_chkisr 0C40  
         ?_TFT_GreenTab_Initialize 0001                        _I2C_ReStart 11F8  
                       drawtext@bg 003C                          _Nec_code1 004F  
                        _i2cLowSda 12CC                          _i2cLowScl 12D6  
                   __end_of_printf 0376                     __end_of_strcpy 10E0  
                   __end_of_strlen 0FF6                          _Nec_state 0050  
              start_initialization 0AEE         __size_of_DS3231_Setup_Time 0066  
                  ??_write_command 0011                          _OpenUSART 0B68  
                 __CFG_OSC$INTIO67 000000                        ??_I2C_Start 000F  
                      ??_I2C_Write 000F                           ??_i2cAck 000F  
                __size_of_Rcmd2red 003E                __size_of_fillScreen 001C  
                         ??___wmul 0013                           ??_chkisr 0001  
                      __pdataBANK0 0080                        __pdataBANK1 0100  
                  setAddrWindow@x0 0015                    setAddrWindow@x1 0013  
                  setAddrWindow@y0 0012                    setAddrWindow@y1 0014  
                         ??_printf 0029                   _DS1621_Read_Temp 1072  
                         ??_strcpy 0013                           ??_strlen 0011  
                       ?_i2cLowSda 0001                         ?_i2cLowScl 0001  
                      __pbssCOMRAM 0043         ??_I2C_Write_Cmd_Write_Data 0013  
                  ??_setAddrWindow 0015                      __pcstackBANK0 00DE  
                      ??_LCD_Reset 001B                       _isdigit$1510 0010  
                __size_of_delay_ms 0052                           ?_Do_Init 0001  
                __size_of_fillRect 004A                  __size_of_drawChar 0156  
                       ?_OpenUSART 000F                   _DS3231_Read_Time 0CA6  
                         ?_i2cNack 0001                  __size_of_drawtext 010A  
                 ___lwdiv@dividend 000F                        I2C_Read@ack 000F  
                        _bit_count 0057                          __pintcode 0008  
  __end_of_TFT_GreenTab_Initialize 113A                      __pmediumconst FD9A  
                         ?___awdiv 000F                          __tft_type 0052  
                         ?___lwdiv 000F                 _I2C_Write_Cmd_Only 11DE  
                         ?___lwmod 0016                 drawFastVLine@color 0018  
                      ?_write_data 0001                          _drawPixel 10E0  
                __size_of_spiwrite 0014                ?_I2C_Write_Cmd_Only 0011  
                         ?_isdigit 0001                           _I2C_Init 12B8  
                         _I2C_Read 0EF0                           _I2C_Stop 1248  
                _Initialize_Screen 09D8                     __size_of_Rcmd1 0110  
                   __size_of_Rcmd3 00F2                          _init_UART 120E  
         I2C_Write_Cmd_Only@Device 0012                          _hexpowers FF80  
               ?_Initialize_Screen 0001                   ___lwdiv@quotient 0013  
                   __size_of_putch 000E                     ___wmul@product 0013  
              ??_Initialize_Screen 0041               ??_I2C_Write_Cmd_Only 0012  
                         _PIE1bits 000F9D             DS3231_Read_Time@Device 0013  
                         _PIR1bits 000F9E                           _PIR2bits 000FA1  
                        _setup_day 0065                  DS1621_Init@Device 0014  
                        fillRect@h 0023                          fillRect@i 002A  
                        fillRect@w 0022                          fillRect@x 0029  
                        fillRect@y 0021                          drawChar@c 002D  
                        drawChar@i 0036                          drawChar@j 0035  
                        drawChar@x 0034                          drawChar@y 002C  
                       ?_drawPixel 0016             __size_of_fillRectangle 00DC  
                ___wmul@multiplier 000F          __end_of_Initialize_Screen 0A66  
                      ??_i2cLowSda 000F                        ??_i2cLowScl 000F  
                     ??_fillScreen 0024                         printf@flag 0033  
                       printf@prec 0030                          main@tempC 0042  
                        main@tempF 0041                         ?_init_UART 0001  
                        copy_data0 0B1A                          copy_data1 0B3A  
                        drawtext@i 00E1             __size_of_drawFastVLine 0088  
                        drawtext@x 00DE                          drawtext@y 0037  
                         _Nec_code 0043                  write_command@cmd_ 0011  
                      ??_OpenUSART 0011                       ?_DS1621_Init 0001  
                         _Rcmd2red 0FF6                   __size_of_Do_Init 0040  
              __size_of_write_data 0010                    OpenUSART@config 0011  
                     _Time_Elapsed 0047                   __size_of_i2cNack 000A  
                         __Hrparam 0000                 __end_of_fillScreen 11DE  
                         __Lrparam 0000                   __size_of___awdiv 0096  
                 __size_of___lwdiv 005C                   __size_of___lwmod 004C  
                     ?_I2C_ReStart 0001                   __size_of_isdigit 0022  
                         _delay_ms 0DBA                    ___lwdiv@divisor 0011  
                  ___lwdiv@counter 0015                           __ptext10 09D8  
                         __ptext11 10AE                           __ptext20 0E0C  
                         __ptext12 11C2                           __ptext21 1110  
                         __ptext13 07D8                           __ptext30 113A  
                         __ptext22 06E6                           __ptext14 05DC  
                         __ptext31 12B8                           __ptext23 0FF6  
                         __ptext15 0FB8                           __ptext40 125A  
                         __ptext32 11A4                           __ptext24 04CC  
                         __ptext16 0376                           __ptext41 0EF0  
                         __ptext33 1184                           __ptext25 127E  
                         __ptext17 0EA6                           __ptext42 12C2  
                         __ptext34 11DE                           __ptext26 128E  
                         __ptext18 0A66                           __ptext43 126C  
                         __ptext35 0C40                           __ptext27 1222  
                         __ptext19 10E0                           __ptext44 11F8  
                         __ptext36 0CA6                           __ptext28 1236  
                         __ptext45 12CC                           __ptext37 1072  
                         __ptext29 0DBA                           __ptext46 12D6  
                         __ptext38 1034                           __ptext47 12DE  
                         __ptext39 1248                           __ptext48 12AC  
                         _fillRect 0EA6                           _drawChar 0376  
 __size_of_TFT_GreenTab_Initialize 002A                           _colstart 0058  
                         _drawtext 05DC                         strcpy@from 0011  
                    _fillRectangle 07D8           __end_of_DS1621_Read_Temp 10AE  
                    __size_of_main 008E                    fillRectangle@hi 001F  
                  fillRectangle@lo 0020                      _drawFastVLine 0A66  
                        printf@idx 002D                           _spiwrite 1222  
                        printf@val 0031                        ??_drawPixel 0019  
                         _rowstart 0060           __end_of_DS3231_Read_Time 0D0A  
       __size_of_Initialize_Screen 008E                     OpenUSART@spbrg 000F  
                      ??_init_UART 0012                           isdigit@c 0011  
                        spiwrite@x 000F                           intlevel2 0000  
                   ?_fillRectangle 0016                   ___lwmod@dividend 0016  
            __end_of_write_command 129E                    fillScreen@color 0022  
                   fillRectangle@h 0018                     fillRectangle@w 0017  
                   fillRectangle@x 0021                     fillRectangle@y 0016  
                   ?_drawFastVLine 0016                           printf@ap 002E  
                     ??_write_data 0011                      fillRect@color 0024  
                  ___lwmod@divisor 0018                           strcpy@cp 0013  
                         strlen@cp 0013                           strcpy@to 000F  
            I2C_Write_Cmd_Only@Cmd 0011                    ___lwmod@counter 001A  
                     _setup_minute 0067                       _setup_second 0069  
            __end_of_setAddrWindow 0E5A                 fillRectangle@color 0019  
                    drawChar@color 002E                        _setup_month 0068  
               __end_of_write_data 128E                       drawChar@line 0033  
                     drawChar@size 0032  __size_of_I2C_Write_Cmd_Write_Data 0020  
             __size_of_DS1621_Init 001E          ?_I2C_Write_Cmd_Write_Data 0011  
