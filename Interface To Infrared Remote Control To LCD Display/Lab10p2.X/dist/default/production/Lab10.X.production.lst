

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Nov 03 15:52:56 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    53                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    54  0000                     
    55                           	psect	idataCOMRAM
    56  0011BA                     __pidataCOMRAM:
    57                           	opt stack 0
    58                           
    59                           ;initializer for _array1
    60  0011BA  A2                 	db	162
    61  0011BB  00                 	db	0
    62  0011BC  00                 	db	0
    63  0011BD  00                 	db	0
    64  0011BE  00                 	db	0
    65  0011BF  00                 	db	0
    66  0011C0  00                 	db	0
    67  0011C1  00                 	db	0
    68  0011C2  00                 	db	0
    69  0011C3  00                 	db	0
    70  0011C4  00                 	db	0
    71  0011C5  00                 	db	0
    72  0011C6  00                 	db	0
    73  0011C7  00                 	db	0
    74  0011C8  00                 	db	0
    75  0011C9  00                 	db	0
    76  0011CA  00                 	db	0
    77  0011CB  00                 	db	0
    78  0011CC  00                 	db	0
    79  0011CD  00                 	db	0
    80  0011CE  00                 	db	0
    81                           
    82                           ;initializer for _wrap
    83  0011CF  01                 	db	1
    84                           
    85                           	psect	idataBANK0
    86  001122                     __pidataBANK0:
    87                           	opt stack 0
    88                           
    89                           ;initializer for _color
    90  001122  F800               	dw	63488
    91  001124  00                 	db	0
    92  001125  00                 	db	0
    93  001126  00                 	db	0
    94  001127  00                 	db	0
    95  001128  00                 	db	0
    96  001129  00                 	db	0
    97  00112A  00                 	db	0
    98  00112B  00                 	db	0
    99  00112C  00                 	db	0
   100  00112D  00                 	db	0
   101  00112E  00                 	db	0
   102  00112F  00                 	db	0
   103  001130  00                 	db	0
   104  001131  00                 	db	0
   105  001132  00                 	db	0
   106  001133  00                 	db	0
   107  001134  00                 	db	0
   108  001135  00                 	db	0
   109  001136  00                 	db	0
   110  001137  00                 	db	0
   111  001138  00                 	db	0
   112  001139  00                 	db	0
   113  00113A  00                 	db	0
   114  00113B  00                 	db	0
   115  00113C  00                 	db	0
   116  00113D  00                 	db	0
   117  00113E  00                 	db	0
   118  00113F  00                 	db	0
   119  001140  00                 	db	0
   120  001141  00                 	db	0
   121  001142  00                 	db	0
   122  001143  00                 	db	0
   123  001144  00                 	db	0
   124  001145  00                 	db	0
   125  001146  00                 	db	0
   126  001147  00                 	db	0
   127  001148  00                 	db	0
   128  001149  00                 	db	0
   129  00114A  00                 	db	0
   130  00114B  00                 	db	0
   131                           
   132                           	psect	idataBANK1
   133  000EB4                     __pidataBANK1:
   134                           	opt stack 0
   135                           
   136                           ;initializer for _txt1
   137  000EB4  43                 	db	67
   138  000EB5  48                 	db	72
   139  000EB6  2D                 	db	45
   140  000EB7  00                 	db	0
   141  000EB8  43                 	db	67
   142  000EB9  48                 	db	72
   143  000EBA  2B                 	db	43
   144  000EBB  00                 	db	0
   145  000EBC  56                 	db	86
   146  000EBD  4C                 	db	76
   147  000EBE  2B                 	db	43
   148  000EBF  00                 	db	0
   149  000EC0  20                 	db	32
   150  000EC1  30                 	db	48
   151  000EC2  20                 	db	32
   152  000EC3  00                 	db	0
   153  000EC4  00                 	db	0
   154  000EC5  00                 	db	0
   155  000EC6  00                 	db	0
   156  000EC7  00                 	db	0
   157  000EC8  00                 	db	0
   158  000EC9  00                 	db	0
   159  000ECA  00                 	db	0
   160  000ECB  00                 	db	0
   161  000ECC  00                 	db	0
   162  000ECD  00                 	db	0
   163  000ECE  00                 	db	0
   164  000ECF  00                 	db	0
   165  000ED0  00                 	db	0
   166  000ED1  00                 	db	0
   167  000ED2  00                 	db	0
   168  000ED3  00                 	db	0
   169  000ED4  00                 	db	0
   170  000ED5  00                 	db	0
   171  000ED6  00                 	db	0
   172  000ED7  00                 	db	0
   173  000ED8  00                 	db	0
   174  000ED9  00                 	db	0
   175  000EDA  00                 	db	0
   176  000EDB  00                 	db	0
   177  000EDC  00                 	db	0
   178  000EDD  00                 	db	0
   179  000EDE  00                 	db	0
   180  000EDF  00                 	db	0
   181  000EE0  00                 	db	0
   182  000EE1  00                 	db	0
   183  000EE2  00                 	db	0
   184  000EE3  00                 	db	0
   185  000EE4  00                 	db	0
   186  000EE5  00                 	db	0
   187  000EE6  00                 	db	0
   188  000EE7  00                 	db	0
   189  000EE8  00                 	db	0
   190  000EE9  00                 	db	0
   191  000EEA  00                 	db	0
   192  000EEB  00                 	db	0
   193  000EEC  00                 	db	0
   194  000EED  00                 	db	0
   195  000EEE  00                 	db	0
   196  000EEF  00                 	db	0
   197  000EF0  00                 	db	0
   198  000EF1  00                 	db	0
   199  000EF2  00                 	db	0
   200  000EF3  00                 	db	0
   201  000EF4  00                 	db	0
   202  000EF5  00                 	db	0
   203  000EF6  00                 	db	0
   204  000EF7  00                 	db	0
   205  000EF8  00                 	db	0
   206  000EF9  00                 	db	0
   207  000EFA  00                 	db	0
   208  000EFB  00                 	db	0
   209  000EFC  00                 	db	0
   210  000EFD  00                 	db	0
   211  000EFE  00                 	db	0
   212  000EFF  00                 	db	0
   213  000F00  00                 	db	0
   214  000F01  00                 	db	0
   215  000F02  00                 	db	0
   216  000F03  00                 	db	0
   217  000F04  00                 	db	0
   218  000F05  00                 	db	0
   219  000F06  00                 	db	0
   220  000F07  00                 	db	0
   221                           
   222                           	psect	mediumconst
   223  00FDD8                     __pmediumconst:
   224                           	opt stack 0
   225  00FDD8  00                 	db	0
   226  00FDD9                     _font:
   227                           	opt stack 0
   228  00FDD9  00                 	db	0
   229  00FDDA  00                 	db	0
   230  00FDDB  00                 	db	0
   231  00FDDC  00                 	db	0
   232  00FDDD  00                 	db	0
   233  00FDDE  00                 	db	0
   234  00FDDF  00                 	db	0
   235  00FDE0  5F                 	db	95
   236  00FDE1  00                 	db	0
   237  00FDE2  00                 	db	0
   238  00FDE3  00                 	db	0
   239  00FDE4  07                 	db	7
   240  00FDE5  00                 	db	0
   241  00FDE6  07                 	db	7
   242  00FDE7  00                 	db	0
   243  00FDE8  14                 	db	20
   244  00FDE9  7F                 	db	127
   245  00FDEA  14                 	db	20
   246  00FDEB  7F                 	db	127
   247  00FDEC  14                 	db	20
   248  00FDED  24                 	db	36
   249  00FDEE  2A                 	db	42
   250  00FDEF  7F                 	db	127
   251  00FDF0  2A                 	db	42
   252  00FDF1  12                 	db	18
   253  00FDF2  23                 	db	35
   254  00FDF3  13                 	db	19
   255  00FDF4  08                 	db	8
   256  00FDF5  64                 	db	100
   257  00FDF6  62                 	db	98
   258  00FDF7  36                 	db	54
   259  00FDF8  49                 	db	73
   260  00FDF9  56                 	db	86
   261  00FDFA  20                 	db	32
   262  00FDFB  50                 	db	80
   263  00FDFC  00                 	db	0
   264  00FDFD  08                 	db	8
   265  00FDFE  07                 	db	7
   266  00FDFF  03                 	db	3
   267  00FE00  00                 	db	0
   268  00FE01  00                 	db	0
   269  00FE02  1C                 	db	28
   270  00FE03  22                 	db	34
   271  00FE04  41                 	db	65
   272  00FE05  00                 	db	0
   273  00FE06  00                 	db	0
   274  00FE07  41                 	db	65
   275  00FE08  22                 	db	34
   276  00FE09  1C                 	db	28
   277  00FE0A  00                 	db	0
   278  00FE0B  2A                 	db	42
   279  00FE0C  1C                 	db	28
   280  00FE0D  7F                 	db	127
   281  00FE0E  1C                 	db	28
   282  00FE0F  2A                 	db	42
   283  00FE10  08                 	db	8
   284  00FE11  08                 	db	8
   285  00FE12  3E                 	db	62
   286  00FE13  08                 	db	8
   287  00FE14  08                 	db	8
   288  00FE15  00                 	db	0
   289  00FE16  80                 	db	128
   290  00FE17  70                 	db	112
   291  00FE18  30                 	db	48
   292  00FE19  00                 	db	0
   293  00FE1A  08                 	db	8
   294  00FE1B  08                 	db	8
   295  00FE1C  08                 	db	8
   296  00FE1D  08                 	db	8
   297  00FE1E  08                 	db	8
   298  00FE1F  00                 	db	0
   299  00FE20  00                 	db	0
   300  00FE21  60                 	db	96
   301  00FE22  60                 	db	96
   302  00FE23  00                 	db	0
   303  00FE24  20                 	db	32
   304  00FE25  10                 	db	16
   305  00FE26  08                 	db	8
   306  00FE27  04                 	db	4
   307  00FE28  02                 	db	2
   308  00FE29  3E                 	db	62
   309  00FE2A  51                 	db	81
   310  00FE2B  49                 	db	73
   311  00FE2C  45                 	db	69
   312  00FE2D  3E                 	db	62
   313  00FE2E  00                 	db	0
   314  00FE2F  42                 	db	66
   315  00FE30  7F                 	db	127
   316  00FE31  40                 	db	64
   317  00FE32  00                 	db	0
   318  00FE33  72                 	db	114
   319  00FE34  49                 	db	73
   320  00FE35  49                 	db	73
   321  00FE36  49                 	db	73
   322  00FE37  46                 	db	70
   323  00FE38  21                 	db	33
   324  00FE39  41                 	db	65
   325  00FE3A  49                 	db	73
   326  00FE3B  4D                 	db	77
   327  00FE3C  33                 	db	51
   328  00FE3D  18                 	db	24
   329  00FE3E  14                 	db	20
   330  00FE3F  12                 	db	18
   331  00FE40  7F                 	db	127
   332  00FE41  10                 	db	16
   333  00FE42  27                 	db	39
   334  00FE43  45                 	db	69
   335  00FE44  45                 	db	69
   336  00FE45  45                 	db	69
   337  00FE46  39                 	db	57
   338  00FE47  3C                 	db	60
   339  00FE48  4A                 	db	74
   340  00FE49  49                 	db	73
   341  00FE4A  49                 	db	73
   342  00FE4B  31                 	db	49
   343  00FE4C  41                 	db	65
   344  00FE4D  21                 	db	33
   345  00FE4E  11                 	db	17
   346  00FE4F  09                 	db	9
   347  00FE50  07                 	db	7
   348  00FE51  36                 	db	54
   349  00FE52  49                 	db	73
   350  00FE53  49                 	db	73
   351  00FE54  49                 	db	73
   352  00FE55  36                 	db	54
   353  00FE56  46                 	db	70
   354  00FE57  49                 	db	73
   355  00FE58  49                 	db	73
   356  00FE59  29                 	db	41
   357  00FE5A  1E                 	db	30
   358  00FE5B  00                 	db	0
   359  00FE5C  00                 	db	0
   360  00FE5D  14                 	db	20
   361  00FE5E  00                 	db	0
   362  00FE5F  00                 	db	0
   363  00FE60  00                 	db	0
   364  00FE61  40                 	db	64
   365  00FE62  34                 	db	52
   366  00FE63  00                 	db	0
   367  00FE64  00                 	db	0
   368  00FE65  00                 	db	0
   369  00FE66  08                 	db	8
   370  00FE67  14                 	db	20
   371  00FE68  22                 	db	34
   372  00FE69  41                 	db	65
   373  00FE6A  14                 	db	20
   374  00FE6B  14                 	db	20
   375  00FE6C  14                 	db	20
   376  00FE6D  14                 	db	20
   377  00FE6E  14                 	db	20
   378  00FE6F  00                 	db	0
   379  00FE70  41                 	db	65
   380  00FE71  22                 	db	34
   381  00FE72  14                 	db	20
   382  00FE73  08                 	db	8
   383  00FE74  02                 	db	2
   384  00FE75  01                 	db	1
   385  00FE76  59                 	db	89
   386  00FE77  09                 	db	9
   387  00FE78  06                 	db	6
   388  00FE79  3E                 	db	62
   389  00FE7A  41                 	db	65
   390  00FE7B  5D                 	db	93
   391  00FE7C  59                 	db	89
   392  00FE7D  4E                 	db	78
   393  00FE7E  7C                 	db	124
   394  00FE7F  12                 	db	18
   395  00FE80  11                 	db	17
   396  00FE81  12                 	db	18
   397  00FE82  7C                 	db	124
   398  00FE83  7F                 	db	127
   399  00FE84  49                 	db	73
   400  00FE85  49                 	db	73
   401  00FE86  49                 	db	73
   402  00FE87  36                 	db	54
   403  00FE88  3E                 	db	62
   404  00FE89  41                 	db	65
   405  00FE8A  41                 	db	65
   406  00FE8B  41                 	db	65
   407  00FE8C  22                 	db	34
   408  00FE8D  7F                 	db	127
   409  00FE8E  41                 	db	65
   410  00FE8F  41                 	db	65
   411  00FE90  41                 	db	65
   412  00FE91  3E                 	db	62
   413  00FE92  7F                 	db	127
   414  00FE93  49                 	db	73
   415  00FE94  49                 	db	73
   416  00FE95  49                 	db	73
   417  00FE96  41                 	db	65
   418  00FE97  7F                 	db	127
   419  00FE98  09                 	db	9
   420  00FE99  09                 	db	9
   421  00FE9A  09                 	db	9
   422  00FE9B  01                 	db	1
   423  00FE9C  3E                 	db	62
   424  00FE9D  41                 	db	65
   425  00FE9E  41                 	db	65
   426  00FE9F  51                 	db	81
   427  00FEA0  73                 	db	115
   428  00FEA1  7F                 	db	127
   429  00FEA2  08                 	db	8
   430  00FEA3  08                 	db	8
   431  00FEA4  08                 	db	8
   432  00FEA5  7F                 	db	127
   433  00FEA6  00                 	db	0
   434  00FEA7  41                 	db	65
   435  00FEA8  7F                 	db	127
   436  00FEA9  41                 	db	65
   437  00FEAA  00                 	db	0
   438  00FEAB  20                 	db	32
   439  00FEAC  40                 	db	64
   440  00FEAD  41                 	db	65
   441  00FEAE  3F                 	db	63
   442  00FEAF  01                 	db	1
   443  00FEB0  7F                 	db	127
   444  00FEB1  08                 	db	8
   445  00FEB2  14                 	db	20
   446  00FEB3  22                 	db	34
   447  00FEB4  41                 	db	65
   448  00FEB5  7F                 	db	127
   449  00FEB6  40                 	db	64
   450  00FEB7  40                 	db	64
   451  00FEB8  40                 	db	64
   452  00FEB9  40                 	db	64
   453  00FEBA  7F                 	db	127
   454  00FEBB  02                 	db	2
   455  00FEBC  1C                 	db	28
   456  00FEBD  02                 	db	2
   457  00FEBE  7F                 	db	127
   458  00FEBF  7F                 	db	127
   459  00FEC0  04                 	db	4
   460  00FEC1  08                 	db	8
   461  00FEC2  10                 	db	16
   462  00FEC3  7F                 	db	127
   463  00FEC4  3E                 	db	62
   464  00FEC5  41                 	db	65
   465  00FEC6  41                 	db	65
   466  00FEC7  41                 	db	65
   467  00FEC8  3E                 	db	62
   468  00FEC9  7F                 	db	127
   469  00FECA  09                 	db	9
   470  00FECB  09                 	db	9
   471  00FECC  09                 	db	9
   472  00FECD  06                 	db	6
   473  00FECE  3E                 	db	62
   474  00FECF  41                 	db	65
   475  00FED0  51                 	db	81
   476  00FED1  21                 	db	33
   477  00FED2  5E                 	db	94
   478  00FED3  7F                 	db	127
   479  00FED4  09                 	db	9
   480  00FED5  19                 	db	25
   481  00FED6  29                 	db	41
   482  00FED7  46                 	db	70
   483  00FED8                     __end_of_font:
   484                           	opt stack 0
   485  00FED8                     _font2:
   486                           	opt stack 0
   487  00FED8  26                 	db	38
   488  00FED9  49                 	db	73
   489  00FEDA  49                 	db	73
   490  00FEDB  49                 	db	73
   491  00FEDC  32                 	db	50
   492  00FEDD  03                 	db	3
   493  00FEDE  01                 	db	1
   494  00FEDF  7F                 	db	127
   495  00FEE0  01                 	db	1
   496  00FEE1  03                 	db	3
   497  00FEE2  3F                 	db	63
   498  00FEE3  40                 	db	64
   499  00FEE4  40                 	db	64
   500  00FEE5  40                 	db	64
   501  00FEE6  3F                 	db	63
   502  00FEE7  1F                 	db	31
   503  00FEE8  20                 	db	32
   504  00FEE9  40                 	db	64
   505  00FEEA  20                 	db	32
   506  00FEEB  1F                 	db	31
   507  00FEEC  3F                 	db	63
   508  00FEED  40                 	db	64
   509  00FEEE  38                 	db	56
   510  00FEEF  40                 	db	64
   511  00FEF0  3F                 	db	63
   512  00FEF1  63                 	db	99
   513  00FEF2  14                 	db	20
   514  00FEF3  08                 	db	8
   515  00FEF4  14                 	db	20
   516  00FEF5  63                 	db	99
   517  00FEF6  03                 	db	3
   518  00FEF7  04                 	db	4
   519  00FEF8  78                 	db	120
   520  00FEF9  04                 	db	4
   521  00FEFA  03                 	db	3
   522  00FEFB  61                 	db	97
   523  00FEFC  59                 	db	89
   524  00FEFD  49                 	db	73
   525  00FEFE  4D                 	db	77
   526  00FEFF  43                 	db	67
   527  00FF00  00                 	db	0
   528  00FF01  7F                 	db	127
   529  00FF02  41                 	db	65
   530  00FF03  41                 	db	65
   531  00FF04  41                 	db	65
   532  00FF05  02                 	db	2
   533  00FF06  04                 	db	4
   534  00FF07  08                 	db	8
   535  00FF08  10                 	db	16
   536  00FF09  20                 	db	32
   537  00FF0A  00                 	db	0
   538  00FF0B  41                 	db	65
   539  00FF0C  41                 	db	65
   540  00FF0D  41                 	db	65
   541  00FF0E  7F                 	db	127
   542  00FF0F  04                 	db	4
   543  00FF10  02                 	db	2
   544  00FF11  01                 	db	1
   545  00FF12  02                 	db	2
   546  00FF13  04                 	db	4
   547  00FF14  40                 	db	64
   548  00FF15  40                 	db	64
   549  00FF16  40                 	db	64
   550  00FF17  40                 	db	64
   551  00FF18  40                 	db	64
   552  00FF19  00                 	db	0
   553  00FF1A  03                 	db	3
   554  00FF1B  07                 	db	7
   555  00FF1C  08                 	db	8
   556  00FF1D  00                 	db	0
   557  00FF1E  20                 	db	32
   558  00FF1F  54                 	db	84
   559  00FF20  54                 	db	84
   560  00FF21  78                 	db	120
   561  00FF22  40                 	db	64
   562  00FF23  7F                 	db	127
   563  00FF24  28                 	db	40
   564  00FF25  44                 	db	68
   565  00FF26  44                 	db	68
   566  00FF27  38                 	db	56
   567  00FF28  38                 	db	56
   568  00FF29  44                 	db	68
   569  00FF2A  44                 	db	68
   570  00FF2B  44                 	db	68
   571  00FF2C  28                 	db	40
   572  00FF2D  38                 	db	56
   573  00FF2E  44                 	db	68
   574  00FF2F  44                 	db	68
   575  00FF30  28                 	db	40
   576  00FF31  7F                 	db	127
   577  00FF32  38                 	db	56
   578  00FF33  54                 	db	84
   579  00FF34  54                 	db	84
   580  00FF35  54                 	db	84
   581  00FF36  18                 	db	24
   582  00FF37  00                 	db	0
   583  00FF38  08                 	db	8
   584  00FF39  7E                 	db	126
   585  00FF3A  09                 	db	9
   586  00FF3B  02                 	db	2
   587  00FF3C  18                 	db	24
   588  00FF3D  A4                 	db	164
   589  00FF3E  A4                 	db	164
   590  00FF3F  9C                 	db	156
   591  00FF40  78                 	db	120
   592  00FF41  7F                 	db	127
   593  00FF42  08                 	db	8
   594  00FF43  04                 	db	4
   595  00FF44  04                 	db	4
   596  00FF45  78                 	db	120
   597  00FF46  00                 	db	0
   598  00FF47  44                 	db	68
   599  00FF48  7D                 	db	125
   600  00FF49  40                 	db	64
   601  00FF4A  00                 	db	0
   602  00FF4B  20                 	db	32
   603  00FF4C  40                 	db	64
   604  00FF4D  40                 	db	64
   605  00FF4E  3D                 	db	61
   606  00FF4F  00                 	db	0
   607  00FF50  7F                 	db	127
   608  00FF51  10                 	db	16
   609  00FF52  28                 	db	40
   610  00FF53  44                 	db	68
   611  00FF54  00                 	db	0
   612  00FF55  00                 	db	0
   613  00FF56  41                 	db	65
   614  00FF57  7F                 	db	127
   615  00FF58  40                 	db	64
   616  00FF59  00                 	db	0
   617  00FF5A  7C                 	db	124
   618  00FF5B  04                 	db	4
   619  00FF5C  78                 	db	120
   620  00FF5D  04                 	db	4
   621  00FF5E  78                 	db	120
   622  00FF5F  7C                 	db	124
   623  00FF60  08                 	db	8
   624  00FF61  04                 	db	4
   625  00FF62  04                 	db	4
   626  00FF63  78                 	db	120
   627  00FF64  38                 	db	56
   628  00FF65  44                 	db	68
   629  00FF66  44                 	db	68
   630  00FF67  44                 	db	68
   631  00FF68  38                 	db	56
   632  00FF69  FC                 	db	252
   633  00FF6A  18                 	db	24
   634  00FF6B  24                 	db	36
   635  00FF6C  24                 	db	36
   636  00FF6D  18                 	db	24
   637  00FF6E  18                 	db	24
   638  00FF6F  24                 	db	36
   639  00FF70  24                 	db	36
   640  00FF71  18                 	db	24
   641  00FF72  FC                 	db	252
   642  00FF73  7C                 	db	124
   643  00FF74  08                 	db	8
   644  00FF75  04                 	db	4
   645  00FF76  04                 	db	4
   646  00FF77  08                 	db	8
   647  00FF78  48                 	db	72
   648  00FF79  54                 	db	84
   649  00FF7A  54                 	db	84
   650  00FF7B  54                 	db	84
   651  00FF7C  24                 	db	36
   652  00FF7D  04                 	db	4
   653  00FF7E  04                 	db	4
   654  00FF7F  3F                 	db	63
   655  00FF80  44                 	db	68
   656  00FF81  24                 	db	36
   657  00FF82  3C                 	db	60
   658  00FF83  40                 	db	64
   659  00FF84  40                 	db	64
   660  00FF85  20                 	db	32
   661  00FF86  7C                 	db	124
   662  00FF87  1C                 	db	28
   663  00FF88  20                 	db	32
   664  00FF89  40                 	db	64
   665  00FF8A  20                 	db	32
   666  00FF8B  1C                 	db	28
   667  00FF8C  3C                 	db	60
   668  00FF8D  40                 	db	64
   669  00FF8E  30                 	db	48
   670  00FF8F  40                 	db	64
   671  00FF90  3C                 	db	60
   672  00FF91  44                 	db	68
   673  00FF92  28                 	db	40
   674  00FF93  10                 	db	16
   675  00FF94  28                 	db	40
   676  00FF95  44                 	db	68
   677  00FF96  4C                 	db	76
   678  00FF97  90                 	db	144
   679  00FF98  90                 	db	144
   680  00FF99  90                 	db	144
   681  00FF9A  7C                 	db	124
   682  00FF9B  44                 	db	68
   683  00FF9C  64                 	db	100
   684  00FF9D  54                 	db	84
   685  00FF9E  4C                 	db	76
   686  00FF9F  44                 	db	68
   687  00FFA0  00                 	db	0
   688  00FFA1  08                 	db	8
   689  00FFA2  36                 	db	54
   690  00FFA3  41                 	db	65
   691  00FFA4  00                 	db	0
   692  00FFA5  00                 	db	0
   693  00FFA6  00                 	db	0
   694  00FFA7  77                 	db	119
   695  00FFA8  00                 	db	0
   696  00FFA9  00                 	db	0
   697  00FFAA  00                 	db	0
   698  00FFAB  41                 	db	65
   699  00FFAC  36                 	db	54
   700  00FFAD  08                 	db	8
   701  00FFAE  00                 	db	0
   702  00FFAF  02                 	db	2
   703  00FFB0  01                 	db	1
   704  00FFB1  02                 	db	2
   705  00FFB2  04                 	db	4
   706  00FFB3  02                 	db	2
   707  00FFB4                     __end_of_font2:
   708                           	opt stack 0
   709  00FFB4                     _hexpowers:
   710                           	opt stack 0
   711  00FFB4  0001               	dw	1
   712  00FFB6  0010               	dw	16
   713  00FFB8  0100               	dw	256
   714  00FFBA  1000               	dw	4096
   715  00FFBC                     __end_of_hexpowers:
   716                           	opt stack 0
   717  0000                     _ADCON1	set	4033
   718  0000                     _INTCON2bits	set	4081
   719  0000                     _INTCONbits	set	4082
   720  0000                     _OSCCON	set	4051
   721  0000                     _PIE1bits	set	3997
   722  0000                     _PIR1bits	set	3998
   723  0000                     _PIR2bits	set	4001
   724  0000                     _PORTCbits	set	3970
   725  0000                     _RCSTA	set	4011
   726  0000                     _RCSTAbits	set	4011
   727  0000                     _SPBRG	set	4015
   728  0000                     _SPBRGH	set	4016
   729  0000                     _SSPBUF	set	4041
   730  0000                     _SSPCON1	set	4038
   731  0000                     _SSPSTAT	set	4039
   732  0000                     _SSPSTATbits	set	4039
   733  0000                     _T1CON	set	4045
   734  0000                     _T1CONbits	set	4045
   735  0000                     _T3CON	set	4017
   736  0000                     _T3CONbits	set	4017
   737  0000                     _TMR1H	set	4047
   738  0000                     _TMR1L	set	4046
   739  0000                     _TMR3H	set	4019
   740  0000                     _TMR3L	set	4018
   741  0000                     _TRISA	set	3986
   742  0000                     _TRISB	set	3987
   743  0000                     _TRISC	set	3988
   744  0000                     _TRISCbits	set	3988
   745  0000                     _TRISD	set	3989
   746  0000                     _TRISE	set	3990
   747  0000                     _TXREG	set	4013
   748  0000                     _TXSTA	set	4012
   749  0000                     _TXSTAbits	set	4012
   750  0000                     _TRMT	set	32097
   751  0000                     _nRBPU	set	32655
   752  00FFBC                     STR_2:
   753  00FFBC  45                 	db	69	;'E'
   754  00FFBD  43                 	db	67	;'C'
   755  00FFBE  45                 	db	69	;'E'
   756  00FFBF  33                 	db	51	;'3'
   757  00FFC0  33                 	db	51	;'3'
   758  00FFC1  30                 	db	48	;'0'
   759  00FFC2  31                 	db	49	;'1'
   760  00FFC3  4C                 	db	76	;'L'
   761  00FFC4  20                 	db	32
   762  00FFC5  53                 	db	83	;'S'
   763  00FFC6  70                 	db	112	;'p'
   764  00FFC7  72                 	db	114	;'r'
   765  00FFC8  69                 	db	105	;'i'
   766  00FFC9  6E                 	db	110	;'n'
   767  00FFCA  67                 	db	103	;'g'
   768  00FFCB  20                 	db	32
   769  00FFCC  32                 	db	50	;'2'
   770  00FFCD  31                 	db	49	;'1'
   771  00FFCE  2D                 	db	45
   772  00FFCF  53                 	db	83	;'S'
   773  00FFD0  31                 	db	49	;'1'
   774  00FFD1  00                 	db	0
   775  00FFD2                     STR_1:
   776  00FFD2  4E                 	db	78	;'N'
   777  00FFD3  45                 	db	69	;'E'
   778  00FFD4  43                 	db	67	;'C'
   779  00FFD5  5F                 	db	95	;'_'
   780  00FFD6  43                 	db	67	;'C'
   781  00FFD7  6F                 	db	111	;'o'
   782  00FFD8  64                 	db	100	;'d'
   783  00FFD9  65                 	db	101	;'e'
   784  00FFDA  20                 	db	32
   785  00FFDB  3D                 	db	61	;'='
   786  00FFDC  20                 	db	32
   787  00FFDD  25                 	db	37
   788  00FFDE  78                 	db	120	;'x'
   789  00FFDF  20                 	db	32
   790  00FFE0  25                 	db	37
   791  00FFE1  78                 	db	120	;'x'
   792  00FFE2  0D                 	db	13
   793  00FFE3  0A                 	db	10
   794  00FFE4  00                 	db	0
   795  00FFE5                     STR_4:
   796  00FFE5  30                 	db	48	;'0'
   797  00FFE6  31                 	db	49	;'1'
   798  00FFE7  32                 	db	50	;'2'
   799  00FFE8  33                 	db	51	;'3'
   800  00FFE9  34                 	db	52	;'4'
   801  00FFEA  35                 	db	53	;'5'
   802  00FFEB  36                 	db	54	;'6'
   803  00FFEC  37                 	db	55	;'7'
   804  00FFED  38                 	db	56	;'8'
   805  00FFEE  39                 	db	57	;'9'
   806  00FFEF  61                 	db	97	;'a'
   807  00FFF0  62                 	db	98	;'b'
   808  00FFF1  63                 	db	99	;'c'
   809  00FFF2  64                 	db	100	;'d'
   810  00FFF3  65                 	db	101	;'e'
   811  00FFF4  66                 	db	102	;'f'
   812  00FFF5  00                 	db	0
   813  00FFF6                     STR_3:
   814  00FFF6  4C                 	db	76	;'L'
   815  00FFF7  41                 	db	65	;'A'
   816  00FFF8  42                 	db	66	;'B'
   817  00FFF9  20                 	db	32
   818  00FFFA  31                 	db	49	;'1'
   819  00FFFB  30                 	db	48	;'0'
   820  00FFFC  20                 	db	32
   821  00FFFD  00                 	db	0
   822                           
   823                           ; #config settings
   824  00FFFE  00                 	db	0	; dummy byte at the end
   825  0000                     
   826                           	psect	cinit
   827  000CEA                     __pcinit:
   828                           	opt stack 0
   829  000CEA                     start_initialization:
   830                           	opt stack 0
   831  000CEA                     __initialization:
   832                           	opt stack 0
   833                           
   834                           ; Clear objects allocated to BANK0 (31 bytes)
   835  000CEA  EE00  F0AA         	lfsr	0,__pbssBANK0
   836  000CEE  0E1F               	movlw	31
   837  000CF0                     clear_0:
   838  000CF0  6AEE               	clrf	postinc0,c
   839  000CF2  06E8               	decf	wreg,f,c
   840  000CF4  E1FD               	bnz	clear_0
   841                           
   842                           ; Clear objects allocated to COMRAM (19 bytes)
   843  000CF6  EE00  F05A         	lfsr	0,__pbssCOMRAM
   844  000CFA  0E13               	movlw	19
   845  000CFC                     clear_1:
   846  000CFC  6AEE               	clrf	postinc0,c
   847  000CFE  06E8               	decf	wreg,f,c
   848  000D00  E1FD               	bnz	clear_1
   849                           
   850                           ; Initialize objects allocated to BANK1 (84 bytes)
   851                           ; load TBLPTR registers with __pidataBANK1
   852  000D02  0EB4               	movlw	low __pidataBANK1
   853  000D04  6EF6               	movwf	tblptrl,c
   854  000D06  0E0E               	movlw	high __pidataBANK1
   855  000D08  6EF7               	movwf	tblptrh,c
   856  000D0A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   857  000D0C  6EF8               	movwf	tblptru,c
   858  000D0E  EE01  F000         	lfsr	0,__pdataBANK1
   859  000D12  EE10 F054          	lfsr	1,84
   860  000D16                     copy_data0:
   861  000D16  0009               	tblrd		*+
   862  000D18  CFF5 FFEE          	movff	tablat,postinc0
   863  000D1C  50E5               	movf	postdec1,w,c
   864  000D1E  50E1               	movf	fsr1l,w,c
   865  000D20  E1FA               	bnz	copy_data0
   866                           
   867                           ; Initialize objects allocated to BANK0 (42 bytes)
   868                           ; load TBLPTR registers with __pidataBANK0
   869  000D22  0E22               	movlw	low __pidataBANK0
   870  000D24  6EF6               	movwf	tblptrl,c
   871  000D26  0E11               	movlw	high __pidataBANK0
   872  000D28  6EF7               	movwf	tblptrh,c
   873  000D2A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   874  000D2C  6EF8               	movwf	tblptru,c
   875  000D2E  EE00  F080         	lfsr	0,__pdataBANK0
   876  000D32  EE10 F02A          	lfsr	1,42
   877  000D36                     copy_data1:
   878  000D36  0009               	tblrd		*+
   879  000D38  CFF5 FFEE          	movff	tablat,postinc0
   880  000D3C  50E5               	movf	postdec1,w,c
   881  000D3E  50E1               	movf	fsr1l,w,c
   882  000D40  E1FA               	bnz	copy_data1
   883                           
   884                           ; Initialize objects allocated to COMRAM (22 bytes)
   885                           ; load TBLPTR registers with __pidataCOMRAM
   886  000D42  0EBA               	movlw	low __pidataCOMRAM
   887  000D44  6EF6               	movwf	tblptrl,c
   888  000D46  0E11               	movlw	high __pidataCOMRAM
   889  000D48  6EF7               	movwf	tblptrh,c
   890  000D4A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   891  000D4C  6EF8               	movwf	tblptru,c
   892  000D4E  EE00  F044         	lfsr	0,__pdataCOMRAM
   893  000D52  EE10 F016          	lfsr	1,22
   894  000D56                     copy_data2:
   895  000D56  0009               	tblrd		*+
   896  000D58  CFF5 FFEE          	movff	tablat,postinc0
   897  000D5C  50E5               	movf	postdec1,w,c
   898  000D5E  50E1               	movf	fsr1l,w,c
   899  000D60  E1FA               	bnz	copy_data2
   900  000D62                     end_of_initialization:
   901                           	opt stack 0
   902  000D62                     __end_of__initialization:
   903                           	opt stack 0
   904  000D62  0E00               	movlw	low (__Lmediumconst shr (0+16))
   905  000D64  6EF8               	movwf	tblptru,c
   906  000D66  0100               	movlb	0
   907  000D68  EFDC  F002         	goto	_main	;jump to C main() function
   908                           tblptru	equ	0xFF8
   909                           tblptrh	equ	0xFF7
   910                           tblptrl	equ	0xFF6
   911                           tablat	equ	0xFF5
   912                           postinc0	equ	0xFEE
   913                           wreg	equ	0xFE8
   914                           postdec1	equ	0xFE5
   915                           fsr1l	equ	0xFE1
   916                           
   917                           	psect	bssCOMRAM
   918  00005A                     __pbssCOMRAM:
   919                           	opt stack 0
   920  00005A                     _Nec_code:
   921                           	opt stack 0
   922  00005A                     	ds	4
   923  00005E                     _Time_Elapsed:
   924                           	opt stack 0
   925  00005E                     	ds	2
   926  000060                     _nbr:
   927                           	opt stack 0
   928  000060                     	ds	2
   929  000062                     _nec_ok:
   930                           	opt stack 0
   931  000062                     	ds	2
   932  000064                     _txt:
   933                           	opt stack 0
   934  000064                     	ds	2
   935  000066                     _Nec_code1:
   936                           	opt stack 0
   937  000066                     	ds	1
   938  000067                     _Nec_state:
   939                           	opt stack 0
   940  000067                     	ds	1
   941  000068                     __tft_type:
   942                           	opt stack 0
   943  000068                     	ds	1
   944  000069                     _bit_count:
   945                           	opt stack 0
   946  000069                     	ds	1
   947  00006A                     _colstart:
   948                           	opt stack 0
   949  00006A                     	ds	1
   950  00006B                     _i:
   951                           	opt stack 0
   952  00006B                     	ds	1
   953  00006C                     _rowstart:
   954                           	opt stack 0
   955  00006C                     	ds	1
   956                           tblptru	equ	0xFF8
   957                           tblptrh	equ	0xFF7
   958                           tblptrl	equ	0xFF6
   959                           tablat	equ	0xFF5
   960                           postinc0	equ	0xFEE
   961                           wreg	equ	0xFE8
   962                           postdec1	equ	0xFE5
   963                           fsr1l	equ	0xFE1
   964                           
   965                           	psect	dataCOMRAM
   966  000044                     __pdataCOMRAM:
   967                           	opt stack 0
   968  000044                     _array1:
   969                           	opt stack 0
   970  000044                     	ds	21
   971  000059                     _wrap:
   972                           	opt stack 0
   973  000059                     	ds	1
   974                           tblptru	equ	0xFF8
   975                           tblptrh	equ	0xFF7
   976                           tblptrl	equ	0xFF6
   977                           tablat	equ	0xFF5
   978                           postinc0	equ	0xFEE
   979                           wreg	equ	0xFE8
   980                           postdec1	equ	0xFE5
   981                           fsr1l	equ	0xFE1
   982                           
   983                           	psect	bssBANK0
   984  0000AA                     __pbssBANK0:
   985                           	opt stack 0
   986  0000AA                     _buffer:
   987                           	opt stack 0
   988  0000AA                     	ds	31
   989                           tblptru	equ	0xFF8
   990                           tblptrh	equ	0xFF7
   991                           tblptrl	equ	0xFF6
   992                           tablat	equ	0xFF5
   993                           postinc0	equ	0xFEE
   994                           wreg	equ	0xFE8
   995                           postdec1	equ	0xFE5
   996                           fsr1l	equ	0xFE1
   997                           
   998                           	psect	dataBANK0
   999  000080                     __pdataBANK0:
  1000                           	opt stack 0
  1001  000080                     _color:
  1002                           	opt stack 0
  1003  000080                     	ds	42
  1004                           tblptru	equ	0xFF8
  1005                           tblptrh	equ	0xFF7
  1006                           tblptrl	equ	0xFF6
  1007                           tablat	equ	0xFF5
  1008                           postinc0	equ	0xFEE
  1009                           wreg	equ	0xFE8
  1010                           postdec1	equ	0xFE5
  1011                           fsr1l	equ	0xFE1
  1012                           
  1013                           	psect	dataBANK1
  1014  000100                     __pdataBANK1:
  1015                           	opt stack 0
  1016  000100                     _txt1:
  1017                           	opt stack 0
  1018  000100                     	ds	84
  1019                           tblptru	equ	0xFF8
  1020                           tblptrh	equ	0xFF7
  1021                           tblptrl	equ	0xFF6
  1022                           tablat	equ	0xFF5
  1023                           postinc0	equ	0xFEE
  1024                           wreg	equ	0xFE8
  1025                           postdec1	equ	0xFE5
  1026                           fsr1l	equ	0xFE1
  1027                           
  1028                           	psect	cstackBANK0
  1029  0000C9                     __pcstackBANK0:
  1030                           	opt stack 0
  1031  0000C9                     drawtext@x:
  1032                           	opt stack 0
  1033                           
  1034                           ; 1 bytes @ 0x0
  1035  0000C9                     	ds	1
  1036  0000CA                     drawtext@textsize:
  1037                           	opt stack 0
  1038                           
  1039                           ; 2 bytes @ 0x1
  1040  0000CA                     	ds	2
  1041  0000CC                     drawtext@i:
  1042                           	opt stack 0
  1043                           
  1044                           ; 2 bytes @ 0x3
  1045  0000CC                     	ds	2
  1046  0000CE                     drawtext@cursor_y:
  1047                           	opt stack 0
  1048                           
  1049                           ; 1 bytes @ 0x5
  1050  0000CE                     	ds	1
  1051  0000CF                     drawtext@cursor_x:
  1052                           	opt stack 0
  1053                           
  1054                           ; 1 bytes @ 0x6
  1055  0000CF                     	ds	1
  1056                           tblptru	equ	0xFF8
  1057                           tblptrh	equ	0xFF7
  1058                           tblptrl	equ	0xFF6
  1059                           tablat	equ	0xFF5
  1060                           postinc0	equ	0xFEE
  1061                           wreg	equ	0xFE8
  1062                           postdec1	equ	0xFE5
  1063                           fsr1l	equ	0xFE1
  1064                           
  1065                           	psect	cstackCOMRAM
  1066  000001                     __pcstackCOMRAM:
  1067                           	opt stack 0
  1068  000001                     ??_INT0_isr:
  1069  000001                     
  1070                           ; 0 bytes @ 0x0
  1071  000001                     	ds	2
  1072  000003                     ??_chkisr:
  1073                           
  1074                           ; 0 bytes @ 0x2
  1075  000003                     	ds	14
  1076  000011                     ?_strlen:
  1077                           	opt stack 0
  1078  000011                     ?___wmul:
  1079                           	opt stack 0
  1080  000011                     ?___lwdiv:
  1081                           	opt stack 0
  1082  000011                     spiwrite@x:
  1083                           	opt stack 0
  1084  000011                     putch@c:
  1085                           	opt stack 0
  1086  000011                     OpenUSART@spbrg:
  1087                           	opt stack 0
  1088  000011                     ___wmul@multiplier:
  1089                           	opt stack 0
  1090  000011                     ___lwdiv@dividend:
  1091                           	opt stack 0
  1092  000011                     strcpy@to:
  1093                           	opt stack 0
  1094  000011                     strlen@s:
  1095                           	opt stack 0
  1096                           
  1097                           ; 2 bytes @ 0x10
  1098  000011                     	ds	1
  1099  000012                     spiwrite@spidata:
  1100                           	opt stack 0
  1101                           
  1102                           ; 1 bytes @ 0x11
  1103  000012                     	ds	1
  1104  000013                     ??_strlen:
  1105  000013                     write_command@cmd_:
  1106                           	opt stack 0
  1107  000013                     write_data@data_:
  1108                           	opt stack 0
  1109  000013                     OpenUSART@config:
  1110                           	opt stack 0
  1111  000013                     ___wmul@multiplicand:
  1112                           	opt stack 0
  1113  000013                     ___lwdiv@divisor:
  1114                           	opt stack 0
  1115  000013                     strcpy@from:
  1116                           	opt stack 0
  1117                           
  1118                           ; 2 bytes @ 0x12
  1119  000013                     	ds	1
  1120  000014                     setAddrWindow@y0:
  1121                           	opt stack 0
  1122                           
  1123                           ; 1 bytes @ 0x13
  1124  000014                     	ds	1
  1125  000015                     setAddrWindow@x1:
  1126                           	opt stack 0
  1127  000015                     ___wmul@product:
  1128                           	opt stack 0
  1129  000015                     ___lwdiv@quotient:
  1130                           	opt stack 0
  1131  000015                     strcpy@cp:
  1132                           	opt stack 0
  1133  000015                     strlen@cp:
  1134                           	opt stack 0
  1135                           
  1136                           ; 2 bytes @ 0x14
  1137  000015                     	ds	1
  1138  000016                     setAddrWindow@y1:
  1139                           	opt stack 0
  1140                           
  1141                           ; 1 bytes @ 0x15
  1142  000016                     	ds	1
  1143  000017                     setAddrWindow@x0:
  1144                           	opt stack 0
  1145  000017                     ___lwdiv@counter:
  1146                           	opt stack 0
  1147  000017                     delay_ms@ms:
  1148                           	opt stack 0
  1149                           
  1150                           ; 2 bytes @ 0x16
  1151  000017                     	ds	1
  1152  000018                     ?_printf:
  1153                           	opt stack 0
  1154  000018                     drawPixel@y:
  1155                           	opt stack 0
  1156  000018                     drawFastVLine@y:
  1157                           	opt stack 0
  1158  000018                     fillRectangle@y:
  1159                           	opt stack 0
  1160  000018                     printf@f:
  1161                           	opt stack 0
  1162                           
  1163                           ; 2 bytes @ 0x17
  1164  000018                     	ds	1
  1165  000019                     ??_delay_ms:
  1166  000019                     drawFastVLine@h:
  1167                           	opt stack 0
  1168  000019                     fillRectangle@w:
  1169                           	opt stack 0
  1170  000019                     drawPixel@color:
  1171                           	opt stack 0
  1172                           
  1173                           ; 2 bytes @ 0x18
  1174  000019                     	ds	1
  1175  00001A                     fillRectangle@h:
  1176                           	opt stack 0
  1177  00001A                     drawFastVLine@color:
  1178                           	opt stack 0
  1179                           
  1180                           ; 2 bytes @ 0x19
  1181  00001A                     	ds	1
  1182  00001B                     drawPixel@x:
  1183                           	opt stack 0
  1184  00001B                     delay_ms@count:
  1185                           	opt stack 0
  1186  00001B                     fillRectangle@color:
  1187                           	opt stack 0
  1188                           
  1189                           ; 2 bytes @ 0x1A
  1190  00001B                     	ds	1
  1191  00001C                     ??_drawFastVLine:
  1192  00001C                     drawCircle@x0:
  1193                           	opt stack 0
  1194                           
  1195                           ; 2 bytes @ 0x1B
  1196  00001C                     	ds	1
  1197  00001D                     ??_fillRectangle:
  1198  00001D                     
  1199                           ; 0 bytes @ 0x1C
  1200  00001D                     	ds	1
  1201  00001E                     drawCircle@y0:
  1202                           	opt stack 0
  1203                           
  1204                           ; 2 bytes @ 0x1D
  1205  00001E                     	ds	2
  1206  000020                     drawFastVLine@hi:
  1207                           	opt stack 0
  1208  000020                     printf@flag:
  1209                           	opt stack 0
  1210  000020                     drawCircle@r:
  1211                           	opt stack 0
  1212                           
  1213                           ; 2 bytes @ 0x1F
  1214  000020                     	ds	1
  1215  000021                     drawFastVLine@lo:
  1216                           	opt stack 0
  1217  000021                     fillRectangle@hi:
  1218                           	opt stack 0
  1219  000021                     printf@ap:
  1220                           	opt stack 0
  1221                           
  1222                           ; 2 bytes @ 0x20
  1223  000021                     	ds	1
  1224  000022                     drawFastVLine@x:
  1225                           	opt stack 0
  1226  000022                     fillRectangle@lo:
  1227                           	opt stack 0
  1228  000022                     drawCircle@color:
  1229                           	opt stack 0
  1230                           
  1231                           ; 2 bytes @ 0x21
  1232  000022                     	ds	1
  1233  000023                     fillRect@y:
  1234                           	opt stack 0
  1235  000023                     fillRectangle@x:
  1236                           	opt stack 0
  1237  000023                     printf@idx:
  1238                           	opt stack 0
  1239  000023                     fillCircleHelper@x0:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x22
  1243  000023                     	ds	1
  1244  000024                     ??_drawCircle:
  1245  000024                     fillRect@w:
  1246                           	opt stack 0
  1247  000024                     fillScreen@color:
  1248                           	opt stack 0
  1249  000024                     printf@val:
  1250                           	opt stack 0
  1251                           
  1252                           ; 2 bytes @ 0x23
  1253  000024                     	ds	1
  1254  000025                     fillRect@h:
  1255                           	opt stack 0
  1256  000025                     fillCircleHelper@y0:
  1257                           	opt stack 0
  1258                           
  1259                           ; 2 bytes @ 0x24
  1260  000025                     	ds	1
  1261  000026                     printf@prec:
  1262                           	opt stack 0
  1263  000026                     fillRect@color:
  1264                           	opt stack 0
  1265  000026                     drawCircle@ddF_x:
  1266                           	opt stack 0
  1267                           
  1268                           ; 2 bytes @ 0x25
  1269  000026                     	ds	1
  1270  000027                     printf@c:
  1271                           	opt stack 0
  1272  000027                     fillCircleHelper@r:
  1273                           	opt stack 0
  1274                           
  1275                           ; 2 bytes @ 0x26
  1276  000027                     	ds	1
  1277  000028                     ??_fillRect:
  1278  000028                     drawCircle@ddF_y:
  1279                           	opt stack 0
  1280                           
  1281                           ; 2 bytes @ 0x27
  1282  000028                     	ds	1
  1283  000029                     fillCircleHelper@cornername:
  1284                           	opt stack 0
  1285                           
  1286                           ; 2 bytes @ 0x28
  1287  000029                     	ds	1
  1288  00002A                     drawCircle@f:
  1289                           	opt stack 0
  1290                           
  1291                           ; 2 bytes @ 0x29
  1292  00002A                     	ds	1
  1293  00002B                     fillRect@x:
  1294                           	opt stack 0
  1295  00002B                     fillCircleHelper@delta:
  1296                           	opt stack 0
  1297                           
  1298                           ; 2 bytes @ 0x2A
  1299  00002B                     	ds	1
  1300  00002C                     fillRect@i:
  1301                           	opt stack 0
  1302  00002C                     drawCircle@x:
  1303                           	opt stack 0
  1304                           
  1305                           ; 2 bytes @ 0x2B
  1306  00002C                     	ds	1
  1307  00002D                     fillCircleHelper@color:
  1308                           	opt stack 0
  1309                           
  1310                           ; 2 bytes @ 0x2C
  1311  00002D                     	ds	1
  1312  00002E                     drawChar@y:
  1313                           	opt stack 0
  1314  00002E                     drawCircle@y:
  1315                           	opt stack 0
  1316                           
  1317                           ; 2 bytes @ 0x2D
  1318  00002E                     	ds	1
  1319  00002F                     ??_fillCircleHelper:
  1320  00002F                     drawChar@c:
  1321                           	opt stack 0
  1322                           
  1323                           ; 1 bytes @ 0x2E
  1324  00002F                     	ds	1
  1325  000030                     drawChar@color:
  1326                           	opt stack 0
  1327                           
  1328                           ; 2 bytes @ 0x2F
  1329  000030                     	ds	1
  1330  000031                     fillCircleHelper@ddF_x:
  1331                           	opt stack 0
  1332                           
  1333                           ; 2 bytes @ 0x30
  1334  000031                     	ds	1
  1335  000032                     drawChar@bg:
  1336                           	opt stack 0
  1337                           
  1338                           ; 2 bytes @ 0x31
  1339  000032                     	ds	1
  1340  000033                     fillCircleHelper@ddF_y:
  1341                           	opt stack 0
  1342                           
  1343                           ; 2 bytes @ 0x32
  1344  000033                     	ds	1
  1345  000034                     drawChar@size:
  1346                           	opt stack 0
  1347                           
  1348                           ; 1 bytes @ 0x33
  1349  000034                     	ds	1
  1350  000035                     drawChar@line:
  1351                           	opt stack 0
  1352  000035                     fillCircleHelper@f:
  1353                           	opt stack 0
  1354                           
  1355                           ; 2 bytes @ 0x34
  1356  000035                     	ds	1
  1357  000036                     drawChar@x:
  1358                           	opt stack 0
  1359                           
  1360                           ; 1 bytes @ 0x35
  1361  000036                     	ds	1
  1362  000037                     drawChar@j:
  1363                           	opt stack 0
  1364  000037                     fillCircleHelper@x:
  1365                           	opt stack 0
  1366                           
  1367                           ; 2 bytes @ 0x36
  1368  000037                     	ds	1
  1369  000038                     drawChar@i:
  1370                           	opt stack 0
  1371                           
  1372                           ; 1 bytes @ 0x37
  1373  000038                     	ds	1
  1374  000039                     drawtext@y:
  1375                           	opt stack 0
  1376  000039                     fillCircleHelper@y:
  1377                           	opt stack 0
  1378                           
  1379                           ; 2 bytes @ 0x38
  1380  000039                     	ds	1
  1381  00003A                     drawtext@_text:
  1382                           	opt stack 0
  1383                           
  1384                           ; 2 bytes @ 0x39
  1385  00003A                     	ds	1
  1386  00003B                     fillCircle@x0:
  1387                           	opt stack 0
  1388                           
  1389                           ; 2 bytes @ 0x3A
  1390  00003B                     	ds	1
  1391  00003C                     drawtext@color:
  1392                           	opt stack 0
  1393                           
  1394                           ; 2 bytes @ 0x3B
  1395  00003C                     	ds	1
  1396  00003D                     fillCircle@y0:
  1397                           	opt stack 0
  1398                           
  1399                           ; 2 bytes @ 0x3C
  1400  00003D                     	ds	1
  1401  00003E                     drawtext@bg:
  1402                           	opt stack 0
  1403                           
  1404                           ; 2 bytes @ 0x3D
  1405  00003E                     	ds	1
  1406  00003F                     fillCircle@r:
  1407                           	opt stack 0
  1408                           
  1409                           ; 2 bytes @ 0x3E
  1410  00003F                     	ds	1
  1411  000040                     drawtext@size:
  1412                           	opt stack 0
  1413                           
  1414                           ; 1 bytes @ 0x3F
  1415  000040                     	ds	1
  1416  000041                     ??_drawtext:
  1417  000041                     fillCircle@color:
  1418                           	opt stack 0
  1419                           
  1420                           ; 2 bytes @ 0x40
  1421  000041                     	ds	2
  1422  000043                     main@found:
  1423                           	opt stack 0
  1424                           
  1425                           ; 1 bytes @ 0x42
  1426  000043                     	ds	1
  1427                           tblptru	equ	0xFF8
  1428                           tblptrh	equ	0xFF7
  1429                           tblptrl	equ	0xFF6
  1430                           tablat	equ	0xFF5
  1431                           postinc0	equ	0xFEE
  1432                           wreg	equ	0xFE8
  1433                           postdec1	equ	0xFE5
  1434                           fsr1l	equ	0xFE1
  1435                           
  1436 ;;
  1437 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1438 ;;
  1439 ;; *************** function _main *****************
  1440 ;; Defined at:
  1441 ;;		line 162 in file "Lab10p1.c"
  1442 ;; Parameters:    Size  Location     Type
  1443 ;;		None
  1444 ;; Auto vars:     Size  Location     Type
  1445 ;;  found           1   66[COMRAM] unsigned char 
  1446 ;; Return value:  Size  Location     Type
  1447 ;;		None               void
  1448 ;; Registers used:
  1449 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1450 ;; Tracked objects:
  1451 ;;		On entry : 0/0
  1452 ;;		On exit  : 0/0
  1453 ;;		Unchanged: 0/0
  1454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1456 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1458 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1459 ;;Total ram usage:        1 bytes
  1460 ;; Hardware stack levels required when called:   11
  1461 ;; This function calls:
  1462 ;;		_Initialize_Screen
  1463 ;;		_drawCircle
  1464 ;;		_drawtext
  1465 ;;		_fillCircle
  1466 ;;		_init_UART
  1467 ;;		_printf
  1468 ;; This function is called by:
  1469 ;;		Startup code after reset
  1470 ;; This function uses a non-reentrant model
  1471 ;;
  1472                           
  1473                           	psect	text0
  1474  0005B8                     __ptext0:
  1475                           	opt stack 0
  1476  0005B8                     _main:
  1477                           	opt stack 20
  1478                           
  1479                           ;Lab10p1.c: 164: init_UART();
  1480                           
  1481                           ;incstack = 0
  1482  0005B8  ECFB  F008         	call	_init_UART	;wreg free
  1483                           
  1484                           ;Lab10p1.c: 165: OSCCON = 0x70;
  1485  0005BC  0E70               	movlw	112
  1486  0005BE  6ED3               	movwf	4051,c	;volatile
  1487                           
  1488                           ;Lab10p1.c: 166: nRBPU = 0;
  1489  0005C0  9EF1               	bcf	intcon2,7,c	;volatile
  1490                           
  1491                           ;Lab10p1.c: 167: TRISA = 0x00;
  1492  0005C2  0E00               	movlw	0
  1493  0005C4  6E92               	movwf	3986,c	;volatile
  1494                           
  1495                           ;Lab10p1.c: 168: TRISB = 0x01;
  1496  0005C6  0E01               	movlw	1
  1497  0005C8  6E93               	movwf	3987,c	;volatile
  1498                           
  1499                           ;Lab10p1.c: 169: TRISC = 0x00;
  1500  0005CA  0E00               	movlw	0
  1501  0005CC  6E94               	movwf	3988,c	;volatile
  1502                           
  1503                           ;Lab10p1.c: 170: TRISD = 0x00;
  1504  0005CE  0E00               	movlw	0
  1505  0005D0  6E95               	movwf	3989,c	;volatile
  1506                           
  1507                           ;Lab10p1.c: 171: TRISE = 0x00;
  1508  0005D2  0E00               	movlw	0
  1509  0005D4  6E96               	movwf	3990,c	;volatile
  1510                           
  1511                           ;Lab10p1.c: 172: ADCON1 = 0x0F;
  1512  0005D6  0E0F               	movlw	15
  1513  0005D8  6EC1               	movwf	4033,c	;volatile
  1514                           
  1515                           ;Lab10p1.c: 173: Initialize_Screen();
  1516  0005DA  ECEA  F005         	call	_Initialize_Screen	;wreg free
  1517                           
  1518                           ;Lab10p1.c: 174: INTCONbits.INT0IF = 0;
  1519  0005DE  92F2               	bcf	intcon,1,c	;volatile
  1520                           
  1521                           ;Lab10p1.c: 175: INTCON2bits.INTEDG0 = 0;
  1522  0005E0  9CF1               	bcf	intcon2,6,c	;volatile
  1523                           
  1524                           ;Lab10p1.c: 176: INTCONbits.INT0IE = 1;
  1525  0005E2  88F2               	bsf	intcon,4,c	;volatile
  1526                           
  1527                           ;Lab10p1.c: 177: TMR1H = 0;
  1528  0005E4  0E00               	movlw	0
  1529  0005E6  6ECF               	movwf	4047,c	;volatile
  1530                           
  1531                           ;Lab10p1.c: 178: TMR1L = 0;
  1532  0005E8  0E00               	movlw	0
  1533  0005EA  6ECE               	movwf	4046,c	;volatile
  1534                           
  1535                           ;Lab10p1.c: 179: PIR1bits.TMR1IF = 0;
  1536  0005EC  909E               	bcf	3998,0,c	;volatile
  1537                           
  1538                           ;Lab10p1.c: 180: PIE1bits.TMR1IE = 1;
  1539  0005EE  809D               	bsf	3997,0,c	;volatile
  1540                           
  1541                           ;Lab10p1.c: 181: INTCONbits.PEIE = 1;
  1542  0005F0  8CF2               	bsf	intcon,6,c	;volatile
  1543                           
  1544                           ;Lab10p1.c: 182: INTCONbits.GIE = 1;
  1545  0005F2  8EF2               	bsf	intcon,7,c	;volatile
  1546                           
  1547                           ;Lab10p1.c: 183: nec_ok = 0;
  1548  0005F4  0E00               	movlw	0
  1549  0005F6  6E63               	movwf	_nec_ok+1,c
  1550  0005F8  0E00               	movlw	0
  1551  0005FA  6E62               	movwf	_nec_ok,c
  1552                           
  1553                           ;Lab10p1.c: 184: Nec_code = 0x0;
  1554  0005FC  0E00               	movlw	0
  1555  0005FE  6E5A               	movwf	_Nec_code,c
  1556  000600  0E00               	movlw	0
  1557  000602  6E5B               	movwf	_Nec_code+1,c
  1558  000604  0E00               	movlw	0
  1559  000606  6E5C               	movwf	_Nec_code+2,c
  1560  000608  0E00               	movlw	0
  1561  00060A  6E5D               	movwf	_Nec_code+3,c
  1562  00060C  D000               	goto	l3652
  1563  00060E                     l3652:
  1564                           
  1565                           ;Lab10p1.c: 190: {
  1566                           ;Lab10p1.c: 191: if (nec_ok == 1)
  1567  00060E  0462               	decf	_nec_ok,w,c
  1568  000610  1063               	iorwf	_nec_ok+1,w,c
  1569  000612  A4D8               	btfss	status,2,c
  1570  000614  D7FC               	goto	l3652
  1571                           
  1572                           ;Lab10p1.c: 192: {
  1573                           ;Lab10p1.c: 193: nec_ok = 0;
  1574  000616  0E00               	movlw	0
  1575  000618  6E63               	movwf	_nec_ok+1,c
  1576  00061A  0E00               	movlw	0
  1577  00061C  6E62               	movwf	_nec_ok,c
  1578                           
  1579                           ;Lab10p1.c: 195: Nec_code1 = (char) ((Nec_code >> 8));
  1580  00061E  C05B  F066         	movff	_Nec_code+1,_Nec_code1
  1581                           
  1582                           ;Lab10p1.c: 196: printf ("NEC_Code = %x %x\r\n", Nec_code, Nec_code1);
  1583  000622  0ED2               	movlw	low STR_1
  1584  000624  6E18               	movwf	printf@f,c
  1585  000626  0EFF               	movlw	high STR_1
  1586  000628  6E19               	movwf	printf@f+1,c
  1587  00062A  C05A  F01A         	movff	_Nec_code,?_printf+2
  1588  00062E  C05B  F01B         	movff	_Nec_code+1,?_printf+3
  1589  000632  C05C  F01C         	movff	_Nec_code+2,?_printf+4
  1590  000636  C05D  F01D         	movff	_Nec_code+3,?_printf+5
  1591  00063A  C066  F01E         	movff	_Nec_code1,?_printf+6
  1592  00063E  6A1F               	clrf	?_printf+7,c
  1593  000640  EC6C  F003         	call	_printf	;wreg free
  1594                           
  1595                           ;Lab10p1.c: 197: INTCONbits.INT0IE = 1;
  1596  000644  88F2               	bsf	intcon,4,c	;volatile
  1597                           
  1598                           ;Lab10p1.c: 198: INTCON2bits.INTEDG0 = 0;
  1599  000646  9CF1               	bcf	intcon2,6,c	;volatile
  1600                           
  1601                           ;Lab10p1.c: 200: char found = 0xff;
  1602  000648  6843               	setf	main@found,c
  1603                           
  1604                           ;Lab10p1.c: 204: if (found != 0xff)
  1605  00064A  2843               	incf	main@found,w,c
  1606  00064C  B4D8               	btfsc	status,2,c
  1607  00064E  D7DF               	goto	l3652
  1608                           
  1609                           ;Lab10p1.c: 205: {
  1610                           ;Lab10p1.c: 206: fillCircle(60, 80, 20, color[found]);
  1611  000650  0E00               	movlw	0
  1612  000652  6E3C               	movwf	fillCircle@x0+1,c
  1613  000654  0E3C               	movlw	60
  1614  000656  6E3B               	movwf	fillCircle@x0,c
  1615  000658  0E00               	movlw	0
  1616  00065A  6E3E               	movwf	fillCircle@y0+1,c
  1617  00065C  0E50               	movlw	80
  1618  00065E  6E3D               	movwf	fillCircle@y0,c
  1619  000660  0E00               	movlw	0
  1620  000662  6E40               	movwf	fillCircle@r+1,c
  1621  000664  0E14               	movlw	20
  1622  000666  6E3F               	movwf	fillCircle@r,c
  1623  000668  5043               	movf	main@found,w,c
  1624  00066A  0D02               	mullw	2
  1625  00066C  0E80               	movlw	low _color
  1626  00066E  24F3               	addwf	prodl,w,c
  1627  000670  6ED9               	movwf	fsr2l,c
  1628  000672  0E00               	movlw	high _color
  1629  000674  20F4               	addwfc	prodh,w,c
  1630  000676  6EDA               	movwf	fsr2h,c
  1631  000678  CFDE F041          	movff	postinc2,fillCircle@color
  1632  00067C  CFDD F042          	movff	postdec2,fillCircle@color+1
  1633  000680  EC84  F007         	call	_fillCircle	;wreg free
  1634                           
  1635                           ;Lab10p1.c: 207: drawCircle(60, 80, 20, 0xFFFF);
  1636  000684  0E00               	movlw	0
  1637  000686  6E1D               	movwf	drawCircle@x0+1,c
  1638  000688  0E3C               	movlw	60
  1639  00068A  6E1C               	movwf	drawCircle@x0,c
  1640  00068C  0E00               	movlw	0
  1641  00068E  6E1F               	movwf	drawCircle@y0+1,c
  1642  000690  0E50               	movlw	80
  1643  000692  6E1E               	movwf	drawCircle@y0,c
  1644  000694  0E00               	movlw	0
  1645  000696  6E21               	movwf	drawCircle@r+1,c
  1646  000698  0E14               	movlw	20
  1647  00069A  6E20               	movwf	drawCircle@r,c
  1648  00069C  0EFF               	movlw	255
  1649  00069E  6E23               	movwf	drawCircle@color+1,c
  1650  0006A0  6822               	setf	drawCircle@color,c
  1651  0006A2  EC0E  F000         	call	_drawCircle	;wreg free
  1652                           
  1653                           ;Lab10p1.c: 208: drawtext(52, 77, txt1[found], 0xFFFF, 0x0000,1);
  1654  0006A6  0E4D               	movlw	77
  1655  0006A8  6E39               	movwf	drawtext@y,c
  1656  0006AA  5043               	movf	main@found,w,c
  1657  0006AC  0D04               	mullw	4
  1658  0006AE  0E00               	movlw	low _txt1
  1659  0006B0  24F3               	addwf	prodl,w,c
  1660  0006B2  6E3A               	movwf	drawtext@_text,c
  1661  0006B4  0E01               	movlw	high _txt1
  1662  0006B6  20F4               	addwfc	prodh,w,c
  1663  0006B8  6E3B               	movwf	drawtext@_text+1,c
  1664  0006BA  0EFF               	movlw	255
  1665  0006BC  6E3D               	movwf	drawtext@color+1,c
  1666  0006BE  683C               	setf	drawtext@color,c
  1667  0006C0  0E00               	movlw	0
  1668  0006C2  6E3F               	movwf	drawtext@bg+1,c
  1669  0006C4  0E00               	movlw	0
  1670  0006C6  6E3E               	movwf	drawtext@bg,c
  1671  0006C8  0E01               	movlw	1
  1672  0006CA  6E40               	movwf	drawtext@size,c
  1673  0006CC  0E34               	movlw	52
  1674  0006CE  EC7E  F004         	call	_drawtext
  1675  0006D2  D79D               	goto	l3652
  1676  0006D4  EF0C  F000         	goto	start
  1677  0006D8                     __end_of_main:
  1678                           	opt stack 0
  1679                           tblptru	equ	0xFF8
  1680                           tblptrh	equ	0xFF7
  1681                           tblptrl	equ	0xFF6
  1682                           tablat	equ	0xFF5
  1683                           prodh	equ	0xFF4
  1684                           prodl	equ	0xFF3
  1685                           intcon	equ	0xFF2
  1686                           intcon2	equ	0xFF1
  1687                           postinc0	equ	0xFEE
  1688                           wreg	equ	0xFE8
  1689                           postdec1	equ	0xFE5
  1690                           fsr1l	equ	0xFE1
  1691                           postinc2	equ	0xFDE
  1692                           postdec2	equ	0xFDD
  1693                           fsr2h	equ	0xFDA
  1694                           fsr2l	equ	0xFD9
  1695                           status	equ	0xFD8
  1696                           
  1697 ;; *************** function _printf *****************
  1698 ;; Defined at:
  1699 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1700 ;; Parameters:    Size  Location     Type
  1701 ;;  f               2   23[COMRAM] PTR const unsigned char 
  1702 ;;		 -> STR_1(19), 
  1703 ;; Auto vars:     Size  Location     Type
  1704 ;;  idx             1   34[COMRAM] unsigned char 
  1705 ;;  tmpval          4    0        struct .
  1706 ;;  cp              3    0        PTR const unsigned char 
  1707 ;;  val             2   35[COMRAM] unsigned int 
  1708 ;;  ap              2   32[COMRAM] PTR void [1]
  1709 ;;		 -> ?_printf(2), 
  1710 ;;  len             2    0        unsigned int 
  1711 ;;  c               1   38[COMRAM] char 
  1712 ;;  prec            1   37[COMRAM] char 
  1713 ;;  flag            1   31[COMRAM] unsigned char 
  1714 ;; Return value:  Size  Location     Type
  1715 ;;                  2   23[COMRAM] int 
  1716 ;; Registers used:
  1717 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1718 ;; Tracked objects:
  1719 ;;		On entry : 0/0
  1720 ;;		On exit  : 0/0
  1721 ;;		Unchanged: 0/0
  1722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1723 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1724 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1726 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1727 ;;Total ram usage:       16 bytes
  1728 ;; Hardware stack levels used:    1
  1729 ;; Hardware stack levels required when called:    4
  1730 ;; This function calls:
  1731 ;;		___lwdiv
  1732 ;;		_putch
  1733 ;; This function is called by:
  1734 ;;		_main
  1735 ;; This function uses a non-reentrant model
  1736 ;;
  1737                           
  1738                           	psect	text1
  1739  0006D8                     __ptext1:
  1740                           	opt stack 0
  1741  0006D8                     _printf:
  1742                           	opt stack 26
  1743                           
  1744                           ;doprnt.c: 466: va_list ap;
  1745                           ;doprnt.c: 499: signed char c;
  1746                           ;doprnt.c: 506: signed char prec;
  1747                           ;doprnt.c: 508: unsigned char flag;
  1748                           ;doprnt.c: 523: union {
  1749                           ;doprnt.c: 524: unsigned long vd;
  1750                           ;doprnt.c: 525: double integ;
  1751                           ;doprnt.c: 526: } tmpval;
  1752                           ;doprnt.c: 528: unsigned int val;
  1753                           ;doprnt.c: 529: unsigned len;
  1754                           ;doprnt.c: 530: const char * cp;
  1755                           ;doprnt.c: 533: *ap = __va_start();
  1756                           
  1757                           ;incstack = 0
  1758  0006D8  0E1A               	movlw	low (?_printf+2)
  1759  0006DA  6E21               	movwf	printf@ap,c
  1760  0006DC  0E00               	movlw	high (?_printf+2)
  1761  0006DE  6E22               	movwf	printf@ap+1,c
  1762                           
  1763                           ;doprnt.c: 536: while(c = *f++) {
  1764  0006E0  D076               	goto	l2602
  1765  0006E2                     l2566:
  1766                           
  1767                           ;doprnt.c: 538: if(c != '%')
  1768  0006E2  0E25               	movlw	37
  1769  0006E4  1827               	xorwf	printf@c,w,c
  1770  0006E6  B4D8               	btfsc	status,2,c
  1771  0006E8  D004               	goto	l2570
  1772                           
  1773                           ;doprnt.c: 540: {
  1774                           ;doprnt.c: 541: (putch(c) );
  1775  0006EA  5027               	movf	printf@c,w,c
  1776  0006EC  EC13  F009         	call	_putch
  1777                           
  1778                           ;doprnt.c: 542: continue;
  1779  0006F0  D06E               	goto	l2602
  1780  0006F2                     l2570:
  1781                           
  1782                           ;doprnt.c: 543: }
  1783                           ;doprnt.c: 548: flag = 0;
  1784  0006F2  0E00               	movlw	0
  1785  0006F4  6E20               	movwf	printf@flag,c
  1786                           
  1787                           ;doprnt.c: 635: switch(c = *f++) {
  1788  0006F6  D004               	goto	l2574
  1789                           
  1790                           ;doprnt.c: 638: goto alldone;
  1791                           
  1792                           ;doprnt.c: 637: case 0:
  1793  0006F8  D078               	goto	l379
  1794                           
  1795                           ;doprnt.c: 723: break;
  1796                           
  1797                           ;doprnt.c: 718: case 'x':
  1798  0006FA  D012               	goto	l2576
  1799                           
  1800                           ;doprnt.c: 813: continue;
  1801                           
  1802                           ;doprnt.c: 802: default:
  1803  0006FC  D068               	goto	l2602
  1804                           
  1805                           ;doprnt.c: 822: }
  1806  0006FE  D010               	goto	l2576
  1807  000700                     l2574:
  1808  000700  C018  FFF6         	movff	printf@f,tblptrl
  1809  000704  C019  FFF7         	movff	printf@f+1,tblptrh
  1810  000708  4A18               	infsnz	printf@f,f,c
  1811  00070A  2A19               	incf	printf@f+1,f,c
  1812  00070C                     	if	0	;tblptru may be non-zero
  1813  00070C                     	endif
  1814  00070C                     	if	0	;tblptru may be non-zero
  1815  00070C                     	endif
  1816  00070C  0008               	tblrd		*
  1817  00070E  CFF5 F027          	movff	tablat,printf@c
  1818  000712  5027               	movf	printf@c,w,c
  1819                           
  1820                           ; Switch size 1, requested type "space"
  1821                           ; Number of cases is 2, Range of values is 0 to 120
  1822                           ; switch strategies available:
  1823                           ; Name         Instructions Cycles
  1824                           ; simple_byte            7     4 (average)
  1825                           ;	Chosen strategy is simple_byte
  1826  000714  0A00               	xorlw	0	; case 0
  1827  000716  B4D8               	btfsc	status,2,c
  1828  000718  D068               	goto	l379
  1829  00071A  0A78               	xorlw	120	; case 120
  1830  00071C  A4D8               	btfss	status,2,c
  1831  00071E  D057               	goto	l2602
  1832  000720                     l2576:
  1833                           
  1834                           ;doprnt.c: 1273: {
  1835                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1836  000720  C021  FFD9         	movff	printf@ap,fsr2l
  1837  000724  C022  FFDA         	movff	printf@ap+1,fsr2h
  1838  000728  CFDE F024          	movff	postinc2,printf@val
  1839  00072C  CFDD F025          	movff	postdec2,printf@val+1
  1840  000730  0E02               	movlw	2
  1841  000732  2621               	addwf	printf@ap,f,c
  1842  000734  0E00               	movlw	0
  1843  000736  2222               	addwfc	printf@ap+1,f,c
  1844                           
  1845                           ;doprnt.c: 1287: }
  1846                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1847  000738  0E01               	movlw	1
  1848  00073A  6E27               	movwf	printf@c,c
  1849  00073C                     l2582:
  1850  00073C  0E04               	movlw	4
  1851  00073E  1827               	xorwf	printf@c,w,c
  1852  000740  B4D8               	btfsc	status,2,c
  1853  000742  D016               	goto	l373
  1854  000744  D001               	goto	l2586
  1855  000746  D014               	goto	l373
  1856  000748                     l2586:
  1857                           
  1858                           ;doprnt.c: 1317: if(val < hexpowers[c])
  1859  000748  5027               	movf	printf@c,w,c
  1860  00074A  0D02               	mullw	2
  1861  00074C  0EB4               	movlw	low _hexpowers
  1862  00074E  24F3               	addwf	prodl,w,c
  1863  000750  6EF6               	movwf	tblptrl,c
  1864  000752  0EFF               	movlw	high _hexpowers
  1865  000754  20F4               	addwfc	prodh,w,c
  1866  000756  6EF7               	movwf	tblptrh,c
  1867  000758                     	if	0	;There are less than 3 active tblptr bytes
  1868  000758                     	endif
  1869  000758  0009               	tblrd		*+
  1870  00075A  50F5               	movf	tablat,w,c
  1871  00075C  5C24               	subwf	printf@val,w,c
  1872  00075E  0009               	tblrd		*+
  1873  000760  50F5               	movf	tablat,w,c
  1874  000762  5825               	subwfb	printf@val+1,w,c
  1875  000764  A0D8               	btfss	status,0,c
  1876  000766  D004               	goto	l373
  1877  000768  D001               	goto	l2590
  1878                           
  1879                           ;doprnt.c: 1318: break;
  1880  00076A  D002               	goto	l373
  1881  00076C                     l2590:
  1882  00076C  2A27               	incf	printf@c,f,c
  1883  00076E  D7E6               	goto	l2582
  1884  000770                     l373:
  1885                           
  1886                           ;doprnt.c: 1422: {
  1887                           ;doprnt.c: 1469: }
  1888                           ;doprnt.c: 1472: prec = c;
  1889  000770  C027  F026         	movff	printf@c,printf@prec
  1890                           
  1891                           ;doprnt.c: 1474: while(prec--) {
  1892  000774  D026               	goto	l2600
  1893  000776                     l2594:
  1894                           
  1895                           ;doprnt.c: 1478: {
  1896                           ;doprnt.c: 1499: {
  1897                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  1898  000776  C024  F011         	movff	printf@val,___lwdiv@dividend
  1899  00077A  C025  F012         	movff	printf@val+1,___lwdiv@dividend+1
  1900  00077E  5026               	movf	printf@prec,w,c
  1901  000780  0D02               	mullw	2
  1902  000782  0EB4               	movlw	low _hexpowers
  1903  000784  24F3               	addwf	prodl,w,c
  1904  000786  6EF6               	movwf	tblptrl,c
  1905  000788  0EFF               	movlw	high _hexpowers
  1906  00078A  20F4               	addwfc	prodh,w,c
  1907  00078C  6EF7               	movwf	tblptrh,c
  1908  00078E                     	if	0	;There are less than 3 active tblptr bytes
  1909  00078E                     	endif
  1910  00078E  0009               	tblrd		*+
  1911  000790  CFF5 F013          	movff	tablat,___lwdiv@divisor
  1912  000794  000A               	tblrd		*-
  1913  000796  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  1914  00079A  EC2C  F007         	call	___lwdiv	;wreg free
  1915  00079E  5011               	movf	?___lwdiv,w,c
  1916  0007A0  0B0F               	andlw	15
  1917  0007A2  6E23               	movwf	printf@idx,c
  1918                           
  1919                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  1920  0007A4  5023               	movf	printf@idx,w,c
  1921  0007A6  0D01               	mullw	1
  1922  0007A8  0EE5               	movlw	low STR_4
  1923  0007AA  24F3               	addwf	prodl,w,c
  1924  0007AC  6EF6               	movwf	tblptrl,c
  1925  0007AE  0EFF               	movlw	high STR_4
  1926  0007B0  20F4               	addwfc	prodh,w,c
  1927  0007B2  6EF7               	movwf	tblptrh,c
  1928  0007B4                     	if	0	;There are less than 3 active tblptr bytes
  1929  0007B4                     	endif
  1930  0007B4  0008               	tblrd		*
  1931  0007B6  CFF5 F027          	movff	tablat,printf@c
  1932                           
  1933                           ;doprnt.c: 1508: }
  1934                           ;doprnt.c: 1523: }
  1935                           ;doprnt.c: 1524: (putch(c) );
  1936  0007BA  5027               	movf	printf@c,w,c
  1937  0007BC  EC13  F009         	call	_putch
  1938  0007C0  D000               	goto	l2600
  1939  0007C2                     l2600:
  1940  0007C2  0626               	decf	printf@prec,f,c
  1941  0007C4  2826               	incf	printf@prec,w,c
  1942  0007C6  B4D8               	btfsc	status,2,c
  1943  0007C8  D002               	goto	l2602
  1944  0007CA  D7D5               	goto	l2594
  1945  0007CC  D000               	goto	l2602
  1946  0007CE                     l2602:
  1947  0007CE  C018  FFF6         	movff	printf@f,tblptrl
  1948  0007D2  C019  FFF7         	movff	printf@f+1,tblptrh
  1949  0007D6  4A18               	infsnz	printf@f,f,c
  1950  0007D8  2A19               	incf	printf@f+1,f,c
  1951  0007DA                     	if	0	;tblptru may be non-zero
  1952  0007DA                     	endif
  1953  0007DA                     	if	0	;tblptru may be non-zero
  1954  0007DA                     	endif
  1955  0007DA  0008               	tblrd		*
  1956  0007DC  CFF5 F027          	movff	tablat,printf@c
  1957  0007E0  5027               	movf	printf@c,w,c
  1958  0007E2  B4D8               	btfsc	status,2,c
  1959  0007E4  D002               	goto	l379
  1960  0007E6  D77D               	goto	l2566
  1961  0007E8  D000               	goto	l379
  1962  0007EA                     l379:
  1963  0007EA  0012               	return		;funcret
  1964  0007EC                     __end_of_printf:
  1965                           	opt stack 0
  1966                           tblptru	equ	0xFF8
  1967                           tblptrh	equ	0xFF7
  1968                           tblptrl	equ	0xFF6
  1969                           tablat	equ	0xFF5
  1970                           prodh	equ	0xFF4
  1971                           prodl	equ	0xFF3
  1972                           intcon	equ	0xFF2
  1973                           intcon2	equ	0xFF1
  1974                           postinc0	equ	0xFEE
  1975                           wreg	equ	0xFE8
  1976                           postdec1	equ	0xFE5
  1977                           fsr1l	equ	0xFE1
  1978                           postinc2	equ	0xFDE
  1979                           postdec2	equ	0xFDD
  1980                           fsr2h	equ	0xFDA
  1981                           fsr2l	equ	0xFD9
  1982                           status	equ	0xFD8
  1983                           
  1984 ;; *************** function _putch *****************
  1985 ;; Defined at:
  1986 ;;		line 53 in file "Lab10p1.c"
  1987 ;; Parameters:    Size  Location     Type
  1988 ;;  c               1    wreg     unsigned char 
  1989 ;; Auto vars:     Size  Location     Type
  1990 ;;  c               1   16[COMRAM] unsigned char 
  1991 ;; Return value:  Size  Location     Type
  1992 ;;		None               void
  1993 ;; Registers used:
  1994 ;;		wreg
  1995 ;; Tracked objects:
  1996 ;;		On entry : 0/0
  1997 ;;		On exit  : 0/0
  1998 ;;		Unchanged: 0/0
  1999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2001 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2003 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2004 ;;Total ram usage:        1 bytes
  2005 ;; Hardware stack levels used:    1
  2006 ;; Hardware stack levels required when called:    3
  2007 ;; This function calls:
  2008 ;;		Nothing
  2009 ;; This function is called by:
  2010 ;;		_printf
  2011 ;; This function uses a non-reentrant model
  2012 ;;
  2013                           
  2014                           	psect	text2
  2015  001226                     __ptext2:
  2016                           	opt stack 0
  2017  001226                     _putch:
  2018                           	opt stack 26
  2019                           
  2020                           ;incstack = 0
  2021                           ;putch@c stored from wreg
  2022  001226  6E11               	movwf	putch@c,c
  2023                           
  2024                           ;Lab10p1.c: 55: while (!TRMT);
  2025  001228  D000               	goto	l298
  2026  00122A                     l298:
  2027  00122A  A2AC               	btfss	4012,1,c	;volatile
  2028  00122C  D7FE               	goto	l298
  2029                           
  2030                           ;Lab10p1.c: 56: TXREG = c;
  2031  00122E  C011  FFAD         	movff	putch@c,4013	;volatile
  2032  001232  0012               	return		;funcret
  2033  001234                     __end_of_putch:
  2034                           	opt stack 0
  2035                           tblptru	equ	0xFF8
  2036                           tblptrh	equ	0xFF7
  2037                           tblptrl	equ	0xFF6
  2038                           tablat	equ	0xFF5
  2039                           prodh	equ	0xFF4
  2040                           prodl	equ	0xFF3
  2041                           intcon	equ	0xFF2
  2042                           intcon2	equ	0xFF1
  2043                           postinc0	equ	0xFEE
  2044                           wreg	equ	0xFE8
  2045                           postdec1	equ	0xFE5
  2046                           fsr1l	equ	0xFE1
  2047                           postinc2	equ	0xFDE
  2048                           postdec2	equ	0xFDD
  2049                           fsr2h	equ	0xFDA
  2050                           fsr2l	equ	0xFD9
  2051                           status	equ	0xFD8
  2052                           
  2053 ;; *************** function ___lwdiv *****************
  2054 ;; Defined at:
  2055 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2056 ;; Parameters:    Size  Location     Type
  2057 ;;  dividend        2   16[COMRAM] unsigned int 
  2058 ;;  divisor         2   18[COMRAM] unsigned int 
  2059 ;; Auto vars:     Size  Location     Type
  2060 ;;  quotient        2   20[COMRAM] unsigned int 
  2061 ;;  counter         1   22[COMRAM] unsigned char 
  2062 ;; Return value:  Size  Location     Type
  2063 ;;                  2   16[COMRAM] unsigned int 
  2064 ;; Registers used:
  2065 ;;		wreg, status,2, status,0
  2066 ;; Tracked objects:
  2067 ;;		On entry : 0/0
  2068 ;;		On exit  : 0/0
  2069 ;;		Unchanged: 0/0
  2070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2071 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2072 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2074 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2075 ;;Total ram usage:        7 bytes
  2076 ;; Hardware stack levels used:    1
  2077 ;; Hardware stack levels required when called:    3
  2078 ;; This function calls:
  2079 ;;		Nothing
  2080 ;; This function is called by:
  2081 ;;		_printf
  2082 ;; This function uses a non-reentrant model
  2083 ;;
  2084                           
  2085                           	psect	text3
  2086  000E58                     __ptext3:
  2087                           	opt stack 0
  2088  000E58                     ___lwdiv:
  2089                           	opt stack 26
  2090                           
  2091                           ;incstack = 0
  2092  000E58  0E00               	movlw	0
  2093  000E5A  6E16               	movwf	___lwdiv@quotient+1,c
  2094  000E5C  0E00               	movlw	0
  2095  000E5E  6E15               	movwf	___lwdiv@quotient,c
  2096  000E60  5013               	movf	___lwdiv@divisor,w,c
  2097  000E62  1014               	iorwf	___lwdiv@divisor+1,w,c
  2098  000E64  B4D8               	btfsc	status,2,c
  2099  000E66  D021               	goto	l933
  2100  000E68  0E01               	movlw	1
  2101  000E6A  6E17               	movwf	___lwdiv@counter,c
  2102  000E6C  D005               	goto	l2460
  2103  000E6E                     l2458:
  2104  000E6E  90D8               	bcf	status,0,c
  2105  000E70  3613               	rlcf	___lwdiv@divisor,f,c
  2106  000E72  3614               	rlcf	___lwdiv@divisor+1,f,c
  2107  000E74  2A17               	incf	___lwdiv@counter,f,c
  2108  000E76  D000               	goto	l2460
  2109  000E78                     l2460:
  2110  000E78  BE14               	btfsc	___lwdiv@divisor+1,7,c
  2111  000E7A  D002               	goto	l2462
  2112  000E7C  D7F8               	goto	l2458
  2113  000E7E  D000               	goto	l2462
  2114  000E80                     l2462:
  2115  000E80  90D8               	bcf	status,0,c
  2116  000E82  3615               	rlcf	___lwdiv@quotient,f,c
  2117  000E84  3616               	rlcf	___lwdiv@quotient+1,f,c
  2118  000E86  5013               	movf	___lwdiv@divisor,w,c
  2119  000E88  5C11               	subwf	___lwdiv@dividend,w,c
  2120  000E8A  5014               	movf	___lwdiv@divisor+1,w,c
  2121  000E8C  5812               	subwfb	___lwdiv@dividend+1,w,c
  2122  000E8E  A0D8               	btfss	status,0,c
  2123  000E90  D006               	goto	l2470
  2124  000E92  5013               	movf	___lwdiv@divisor,w,c
  2125  000E94  5E11               	subwf	___lwdiv@dividend,f,c
  2126  000E96  5014               	movf	___lwdiv@divisor+1,w,c
  2127  000E98  5A12               	subwfb	___lwdiv@dividend+1,f,c
  2128  000E9A  8015               	bsf	___lwdiv@quotient,0,c
  2129  000E9C  D000               	goto	l2470
  2130  000E9E                     l2470:
  2131  000E9E  90D8               	bcf	status,0,c
  2132  000EA0  3214               	rrcf	___lwdiv@divisor+1,f,c
  2133  000EA2  3213               	rrcf	___lwdiv@divisor,f,c
  2134  000EA4  2E17               	decfsz	___lwdiv@counter,f,c
  2135  000EA6  D7EC               	goto	l2462
  2136  000EA8  D000               	goto	l933
  2137  000EAA                     l933:
  2138  000EAA  C015  F011         	movff	___lwdiv@quotient,?___lwdiv
  2139  000EAE  C016  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2140  000EB2  0012               	return		;funcret
  2141  000EB4                     __end_of___lwdiv:
  2142                           	opt stack 0
  2143                           tblptru	equ	0xFF8
  2144                           tblptrh	equ	0xFF7
  2145                           tblptrl	equ	0xFF6
  2146                           tablat	equ	0xFF5
  2147                           prodh	equ	0xFF4
  2148                           prodl	equ	0xFF3
  2149                           intcon	equ	0xFF2
  2150                           intcon2	equ	0xFF1
  2151                           postinc0	equ	0xFEE
  2152                           wreg	equ	0xFE8
  2153                           postdec1	equ	0xFE5
  2154                           fsr1l	equ	0xFE1
  2155                           postinc2	equ	0xFDE
  2156                           postdec2	equ	0xFDD
  2157                           fsr2h	equ	0xFDA
  2158                           fsr2l	equ	0xFD9
  2159                           status	equ	0xFD8
  2160                           
  2161 ;; *************** function _init_UART *****************
  2162 ;; Defined at:
  2163 ;;		line 58 in file "Lab10p1.c"
  2164 ;; Parameters:    Size  Location     Type
  2165 ;;		None
  2166 ;; Auto vars:     Size  Location     Type
  2167 ;;		None
  2168 ;; Return value:  Size  Location     Type
  2169 ;;		None               void
  2170 ;; Registers used:
  2171 ;;		wreg, status,2, cstack
  2172 ;; Tracked objects:
  2173 ;;		On entry : 0/0
  2174 ;;		On exit  : 0/0
  2175 ;;		Unchanged: 0/0
  2176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2181 ;;Total ram usage:        0 bytes
  2182 ;; Hardware stack levels used:    1
  2183 ;; Hardware stack levels required when called:    4
  2184 ;; This function calls:
  2185 ;;		_OpenUSART
  2186 ;; This function is called by:
  2187 ;;		_main
  2188 ;; This function uses a non-reentrant model
  2189 ;;
  2190                           
  2191                           	psect	text4
  2192  0011F6                     __ptext4:
  2193                           	opt stack 0
  2194  0011F6                     _init_UART:
  2195                           	opt stack 26
  2196                           
  2197                           ;Lab10p1.c: 60: OpenUSART (0b01111111 & 0b10111111 &
  2198                           ;Lab10p1.c: 61: 0b11111110 & 0b11111101 & 0b11111111 &
  2199                           ;Lab10p1.c: 62: 0b11111111, 25);
  2200                           
  2201                           ;incstack = 0
  2202  0011F6  0E00               	movlw	0
  2203  0011F8  6E12               	movwf	OpenUSART@spbrg+1,c
  2204  0011FA  0E19               	movlw	25
  2205  0011FC  6E11               	movwf	OpenUSART@spbrg,c
  2206  0011FE  0E3C               	movlw	60
  2207  001200  ECF4  F006         	call	_OpenUSART
  2208  001204  0012               	return		;funcret
  2209  001206                     __end_of_init_UART:
  2210                           	opt stack 0
  2211                           tblptru	equ	0xFF8
  2212                           tblptrh	equ	0xFF7
  2213                           tblptrl	equ	0xFF6
  2214                           tablat	equ	0xFF5
  2215                           prodh	equ	0xFF4
  2216                           prodl	equ	0xFF3
  2217                           intcon	equ	0xFF2
  2218                           intcon2	equ	0xFF1
  2219                           postinc0	equ	0xFEE
  2220                           wreg	equ	0xFE8
  2221                           postdec1	equ	0xFE5
  2222                           fsr1l	equ	0xFE1
  2223                           postinc2	equ	0xFDE
  2224                           postdec2	equ	0xFDD
  2225                           fsr2h	equ	0xFDA
  2226                           fsr2l	equ	0xFD9
  2227                           status	equ	0xFD8
  2228                           
  2229 ;; *************** function _OpenUSART *****************
  2230 ;; Defined at:
  2231 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  2232 ;; Parameters:    Size  Location     Type
  2233 ;;  config          1    wreg     unsigned char 
  2234 ;;  spbrg           2   16[COMRAM] unsigned int 
  2235 ;; Auto vars:     Size  Location     Type
  2236 ;;  config          1   18[COMRAM] unsigned char 
  2237 ;; Return value:  Size  Location     Type
  2238 ;;		None               void
  2239 ;; Registers used:
  2240 ;;		wreg, status,2
  2241 ;; Tracked objects:
  2242 ;;		On entry : 0/0
  2243 ;;		On exit  : 0/0
  2244 ;;		Unchanged: 0/0
  2245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2246 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2247 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2249 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2250 ;;Total ram usage:        3 bytes
  2251 ;; Hardware stack levels used:    1
  2252 ;; Hardware stack levels required when called:    3
  2253 ;; This function calls:
  2254 ;;		Nothing
  2255 ;; This function is called by:
  2256 ;;		_init_UART
  2257 ;; This function uses a non-reentrant model
  2258 ;;
  2259                           
  2260                           	psect	text5
  2261  000DE8                     __ptext5:
  2262                           	opt stack 0
  2263  000DE8                     _OpenUSART:
  2264                           	opt stack 26
  2265                           
  2266                           ;incstack = 0
  2267                           ;OpenUSART@config stored from wreg
  2268  000DE8  6E13               	movwf	OpenUSART@config,c
  2269  000DEA  0E00               	movlw	0
  2270  000DEC  6EAC               	movwf	4012,c	;volatile
  2271  000DEE  0E00               	movlw	0
  2272  000DF0  6EAB               	movwf	4011,c	;volatile
  2273  000DF2  A013               	btfss	OpenUSART@config,0,c
  2274  000DF4  D002               	goto	l2402
  2275  000DF6  88AC               	bsf	4012,4,c	;volatile
  2276  000DF8  D000               	goto	l2402
  2277  000DFA                     l2402:
  2278  000DFA  A213               	btfss	OpenUSART@config,1,c
  2279  000DFC  D003               	goto	l2406
  2280  000DFE  8CAC               	bsf	4012,6,c	;volatile
  2281  000E00  8CAB               	bsf	4011,6,c	;volatile
  2282  000E02  D000               	goto	l2406
  2283  000E04                     l2406:
  2284  000E04  A413               	btfss	OpenUSART@config,2,c
  2285  000E06  D002               	goto	l2410
  2286  000E08  8EAC               	bsf	4012,7,c	;volatile
  2287  000E0A  D000               	goto	l2410
  2288  000E0C                     l2410:
  2289  000E0C  A613               	btfss	OpenUSART@config,3,c
  2290  000E0E  D002               	goto	l403
  2291  000E10  88AB               	bsf	4011,4,c	;volatile
  2292  000E12  D002               	goto	l2414
  2293  000E14                     l403:
  2294  000E14  8AAB               	bsf	4011,5,c	;volatile
  2295  000E16  D000               	goto	l2414
  2296  000E18                     l2414:
  2297  000E18  B813               	btfsc	OpenUSART@config,4,c
  2298  000E1A  84AC               	bsf	4012,2,c	;volatile
  2299  000E1C  989E               	bcf	3998,4,c	;volatile
  2300  000E1E  AA13               	btfss	OpenUSART@config,5,c
  2301  000E20  D002               	goto	l2422
  2302  000E22  86AB               	bsf	4011,3,c	;volatile
  2303  000E24  D000               	goto	l2422
  2304  000E26                     l2422:
  2305  000E26  AC13               	btfss	OpenUSART@config,6,c
  2306  000E28  D002               	goto	l407
  2307  000E2A  8A9D               	bsf	3997,5,c	;volatile
  2308  000E2C  D001               	goto	l408
  2309  000E2E                     l407:
  2310  000E2E  9A9D               	bcf	3997,5,c	;volatile
  2311  000E30                     l408:
  2312  000E30  9A9E               	bcf	3998,5,c	;volatile
  2313  000E32  AE13               	btfss	OpenUSART@config,7,c
  2314  000E34  D002               	goto	l409
  2315  000E36  889D               	bsf	3997,4,c	;volatile
  2316  000E38  D001               	goto	l410
  2317  000E3A                     l409:
  2318  000E3A  989D               	bcf	3997,4,c	;volatile
  2319  000E3C                     l410:
  2320  000E3C  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  2321  000E40  5012               	movf	OpenUSART@spbrg+1,w,c
  2322  000E42  6EB0               	movwf	4016,c	;volatile
  2323  000E44  8AAC               	bsf	4012,5,c	;volatile
  2324  000E46  8EAB               	bsf	4011,7,c	;volatile
  2325  000E48  9C94               	bcf	3988,6,c	;volatile
  2326  000E4A  8E94               	bsf	3988,7,c	;volatile
  2327  000E4C  B8AC               	btfsc	4012,4,c	;volatile
  2328  000E4E  BEAC               	btfsc	4012,7,c	;volatile
  2329  000E50  D002               	goto	l412
  2330  000E52  8C94               	bsf	3988,6,c	;volatile
  2331  000E54  D000               	goto	l412
  2332  000E56                     l412:
  2333  000E56  0012               	return		;funcret
  2334  000E58                     __end_of_OpenUSART:
  2335                           	opt stack 0
  2336                           tblptru	equ	0xFF8
  2337                           tblptrh	equ	0xFF7
  2338                           tblptrl	equ	0xFF6
  2339                           tablat	equ	0xFF5
  2340                           prodh	equ	0xFF4
  2341                           prodl	equ	0xFF3
  2342                           intcon	equ	0xFF2
  2343                           intcon2	equ	0xFF1
  2344                           postinc0	equ	0xFEE
  2345                           wreg	equ	0xFE8
  2346                           postdec1	equ	0xFE5
  2347                           fsr1l	equ	0xFE1
  2348                           postinc2	equ	0xFDE
  2349                           postdec2	equ	0xFDD
  2350                           fsr2h	equ	0xFDA
  2351                           fsr2l	equ	0xFD9
  2352                           status	equ	0xFD8
  2353                           
  2354 ;; *************** function _fillCircle *****************
  2355 ;; Defined at:
  2356 ;;		line 614 in file "ST7735_TFT.c"
  2357 ;; Parameters:    Size  Location     Type
  2358 ;;  x0              2   58[COMRAM] int 
  2359 ;;  y0              2   60[COMRAM] int 
  2360 ;;  r               2   62[COMRAM] int 
  2361 ;;  color           2   64[COMRAM] unsigned int 
  2362 ;; Auto vars:     Size  Location     Type
  2363 ;;		None
  2364 ;; Return value:  Size  Location     Type
  2365 ;;		None               void
  2366 ;; Registers used:
  2367 ;;		wreg, status,2, status,0, cstack
  2368 ;; Tracked objects:
  2369 ;;		On entry : 0/0
  2370 ;;		On exit  : 0/0
  2371 ;;		Unchanged: 0/0
  2372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2373 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2376 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2377 ;;Total ram usage:        8 bytes
  2378 ;; Hardware stack levels used:    1
  2379 ;; Hardware stack levels required when called:    8
  2380 ;; This function calls:
  2381 ;;		_drawFastVLine
  2382 ;;		_fillCircleHelper
  2383 ;; This function is called by:
  2384 ;;		_main
  2385 ;; This function uses a non-reentrant model
  2386 ;;
  2387                           
  2388                           	psect	text6
  2389  000F08                     __ptext6:
  2390                           	opt stack 0
  2391  000F08                     _fillCircle:
  2392                           	opt stack 22
  2393                           
  2394                           ;ST7735_TFT.c: 616: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  2395                           
  2396                           ;incstack = 0
  2397  000F08  503F               	movf	fillCircle@r,w,c
  2398  000F0A  0800               	sublw	0
  2399  000F0C  243D               	addwf	fillCircle@y0,w,c
  2400  000F0E  6E18               	movwf	drawFastVLine@y,c
  2401  000F10  80D8               	bsf	status,0,c
  2402  000F12  343F               	rlcf	fillCircle@r,w,c
  2403  000F14  6E19               	movwf	drawFastVLine@h,c
  2404  000F16  C041  F01A         	movff	fillCircle@color,drawFastVLine@color
  2405  000F1A  C042  F01B         	movff	fillCircle@color+1,drawFastVLine@color+1
  2406  000F1E  503B               	movf	fillCircle@x0,w,c
  2407  000F20  EC31  F006         	call	_drawFastVLine
  2408                           
  2409                           ;ST7735_TFT.c: 617: fillCircleHelper(x0, y0, r, 3, 0, color);
  2410  000F24  C03B  F023         	movff	fillCircle@x0,fillCircleHelper@x0
  2411  000F28  C03C  F024         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  2412  000F2C  C03D  F025         	movff	fillCircle@y0,fillCircleHelper@y0
  2413  000F30  C03E  F026         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  2414  000F34  C03F  F027         	movff	fillCircle@r,fillCircleHelper@r
  2415  000F38  C040  F028         	movff	fillCircle@r+1,fillCircleHelper@r+1
  2416  000F3C  0E00               	movlw	0
  2417  000F3E  6E2A               	movwf	fillCircleHelper@cornername+1,c
  2418  000F40  0E03               	movlw	3
  2419  000F42  6E29               	movwf	fillCircleHelper@cornername,c
  2420  000F44  0E00               	movlw	0
  2421  000F46  6E2C               	movwf	fillCircleHelper@delta+1,c
  2422  000F48  0E00               	movlw	0
  2423  000F4A  6E2B               	movwf	fillCircleHelper@delta,c
  2424  000F4C  C041  F02D         	movff	fillCircle@color,fillCircleHelper@color
  2425  000F50  C042  F02E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  2426  000F54  EC40  F002         	call	_fillCircleHelper	;wreg free
  2427  000F58  0012               	return		;funcret
  2428  000F5A                     __end_of_fillCircle:
  2429                           	opt stack 0
  2430                           tblptru	equ	0xFF8
  2431                           tblptrh	equ	0xFF7
  2432                           tblptrl	equ	0xFF6
  2433                           tablat	equ	0xFF5
  2434                           prodh	equ	0xFF4
  2435                           prodl	equ	0xFF3
  2436                           intcon	equ	0xFF2
  2437                           intcon2	equ	0xFF1
  2438                           postinc0	equ	0xFEE
  2439                           wreg	equ	0xFE8
  2440                           postdec1	equ	0xFE5
  2441                           fsr1l	equ	0xFE1
  2442                           postinc2	equ	0xFDE
  2443                           postdec2	equ	0xFDD
  2444                           fsr2h	equ	0xFDA
  2445                           fsr2l	equ	0xFD9
  2446                           status	equ	0xFD8
  2447                           
  2448 ;; *************** function _fillCircleHelper *****************
  2449 ;; Defined at:
  2450 ;;		line 589 in file "ST7735_TFT.c"
  2451 ;; Parameters:    Size  Location     Type
  2452 ;;  x0              2   34[COMRAM] int 
  2453 ;;  y0              2   36[COMRAM] int 
  2454 ;;  r               2   38[COMRAM] int 
  2455 ;;  cornername      2   40[COMRAM] unsigned int 
  2456 ;;  delta           2   42[COMRAM] int 
  2457 ;;  color           2   44[COMRAM] unsigned int 
  2458 ;; Auto vars:     Size  Location     Type
  2459 ;;  y               2   56[COMRAM] int 
  2460 ;;  x               2   54[COMRAM] int 
  2461 ;;  f               2   52[COMRAM] int 
  2462 ;;  ddF_y           2   50[COMRAM] int 
  2463 ;;  ddF_x           2   48[COMRAM] int 
  2464 ;; Return value:  Size  Location     Type
  2465 ;;		None               void
  2466 ;; Registers used:
  2467 ;;		wreg, status,2, status,0, cstack
  2468 ;; Tracked objects:
  2469 ;;		On entry : 0/0
  2470 ;;		On exit  : 0/0
  2471 ;;		Unchanged: 0/0
  2472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2473 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2474 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2475 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2476 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2477 ;;Total ram usage:       24 bytes
  2478 ;; Hardware stack levels used:    1
  2479 ;; Hardware stack levels required when called:    7
  2480 ;; This function calls:
  2481 ;;		_drawFastVLine
  2482 ;; This function is called by:
  2483 ;;		_fillCircle
  2484 ;; This function uses a non-reentrant model
  2485 ;;
  2486                           
  2487                           	psect	text7
  2488  000480                     __ptext7:
  2489                           	opt stack 0
  2490  000480                     _fillCircleHelper:
  2491                           	opt stack 22
  2492                           
  2493                           ;ST7735_TFT.c: 591: signed int f, ddF_x, ddF_y, x, y;
  2494                           ;ST7735_TFT.c: 592: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  2495                           
  2496                           ;incstack = 0
  2497  000480  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  2498  000484  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  2499  000488  1E2F               	comf	??_fillCircleHelper,f,c
  2500  00048A  1E30               	comf	??_fillCircleHelper+1,f,c
  2501  00048C  4A2F               	infsnz	??_fillCircleHelper,f,c
  2502  00048E  2A30               	incf	??_fillCircleHelper+1,f,c
  2503  000490  0E01               	movlw	1
  2504  000492  242F               	addwf	??_fillCircleHelper,w,c
  2505  000494  6E35               	movwf	fillCircleHelper@f,c
  2506  000496  0E00               	movlw	0
  2507  000498  2030               	addwfc	??_fillCircleHelper+1,w,c
  2508  00049A  6E36               	movwf	fillCircleHelper@f+1,c
  2509  00049C  0E00               	movlw	0
  2510  00049E  6E32               	movwf	fillCircleHelper@ddF_x+1,c
  2511  0004A0  0E01               	movlw	1
  2512  0004A2  6E31               	movwf	fillCircleHelper@ddF_x,c
  2513  0004A4  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  2514  0004A8  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  2515  0004AC  90D8               	bcf	status,0,c
  2516  0004AE  362F               	rlcf	??_fillCircleHelper,f,c
  2517  0004B0  3630               	rlcf	??_fillCircleHelper+1,f,c
  2518  0004B2  1E2F               	comf	??_fillCircleHelper,f,c
  2519  0004B4  1E30               	comf	??_fillCircleHelper+1,f,c
  2520  0004B6  4A2F               	infsnz	??_fillCircleHelper,f,c
  2521  0004B8  2A30               	incf	??_fillCircleHelper+1,f,c
  2522  0004BA  C02F  F033         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  2523  0004BE  C030  F034         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  2524  0004C2  0E00               	movlw	0
  2525  0004C4  6E38               	movwf	fillCircleHelper@x+1,c
  2526  0004C6  0E00               	movlw	0
  2527  0004C8  6E37               	movwf	fillCircleHelper@x,c
  2528  0004CA  C027  F039         	movff	fillCircleHelper@r,fillCircleHelper@y
  2529  0004CE  C028  F03A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  2530                           
  2531                           ;ST7735_TFT.c: 593: while (x<y) {
  2532  0004D2  D067               	goto	l3264
  2533  0004D4                     l3244:
  2534                           
  2535                           ;ST7735_TFT.c: 594: if (f >= 0) {
  2536  0004D4  BE36               	btfsc	fillCircleHelper@f+1,7,c
  2537  0004D6  D00B               	goto	l177
  2538                           
  2539                           ;ST7735_TFT.c: 595: y--;
  2540  0004D8  0639               	decf	fillCircleHelper@y,f,c
  2541  0004DA  A0D8               	btfss	status,0,c
  2542  0004DC  063A               	decf	fillCircleHelper@y+1,f,c
  2543                           
  2544                           ;ST7735_TFT.c: 596: ddF_y += 2;
  2545  0004DE  0E02               	movlw	2
  2546  0004E0  2633               	addwf	fillCircleHelper@ddF_y,f,c
  2547  0004E2  0E00               	movlw	0
  2548  0004E4  2234               	addwfc	fillCircleHelper@ddF_y+1,f,c
  2549                           
  2550                           ;ST7735_TFT.c: 597: f += ddF_y;
  2551  0004E6  5033               	movf	fillCircleHelper@ddF_y,w,c
  2552  0004E8  2635               	addwf	fillCircleHelper@f,f,c
  2553  0004EA  5034               	movf	fillCircleHelper@ddF_y+1,w,c
  2554  0004EC  2236               	addwfc	fillCircleHelper@f+1,f,c
  2555  0004EE                     l177:
  2556                           
  2557                           ;ST7735_TFT.c: 598: }
  2558                           ;ST7735_TFT.c: 599: x++;
  2559  0004EE  4A37               	infsnz	fillCircleHelper@x,f,c
  2560  0004F0  2A38               	incf	fillCircleHelper@x+1,f,c
  2561                           
  2562                           ;ST7735_TFT.c: 600: ddF_x += 2;
  2563  0004F2  0E02               	movlw	2
  2564  0004F4  2631               	addwf	fillCircleHelper@ddF_x,f,c
  2565  0004F6  0E00               	movlw	0
  2566  0004F8  2232               	addwfc	fillCircleHelper@ddF_x+1,f,c
  2567                           
  2568                           ;ST7735_TFT.c: 601: f += ddF_x;
  2569  0004FA  5031               	movf	fillCircleHelper@ddF_x,w,c
  2570  0004FC  2635               	addwf	fillCircleHelper@f,f,c
  2571  0004FE  5032               	movf	fillCircleHelper@ddF_x+1,w,c
  2572  000500  2236               	addwfc	fillCircleHelper@f+1,f,c
  2573                           
  2574                           ;ST7735_TFT.c: 603: if (cornername & 0x1) {
  2575  000502  A029               	btfss	fillCircleHelper@cornername,0,c
  2576  000504  D025               	goto	l3260
  2577                           
  2578                           ;ST7735_TFT.c: 604: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  2579  000506  5039               	movf	fillCircleHelper@y,w,c
  2580  000508  0800               	sublw	0
  2581  00050A  2425               	addwf	fillCircleHelper@y0,w,c
  2582  00050C  6E18               	movwf	drawFastVLine@y,c
  2583  00050E  5039               	movf	fillCircleHelper@y,w,c
  2584  000510  2439               	addwf	fillCircleHelper@y,w,c
  2585  000512  242B               	addwf	fillCircleHelper@delta,w,c
  2586  000514  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  2587  000516  282F               	incf	??_fillCircleHelper,w,c
  2588  000518  6E19               	movwf	drawFastVLine@h,c
  2589  00051A  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  2590  00051E  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  2591  000522  5023               	movf	fillCircleHelper@x0,w,c
  2592  000524  2437               	addwf	fillCircleHelper@x,w,c
  2593  000526  EC31  F006         	call	_drawFastVLine
  2594                           
  2595                           ;ST7735_TFT.c: 605: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  2596  00052A  5037               	movf	fillCircleHelper@x,w,c
  2597  00052C  0800               	sublw	0
  2598  00052E  2425               	addwf	fillCircleHelper@y0,w,c
  2599  000530  6E18               	movwf	drawFastVLine@y,c
  2600  000532  5037               	movf	fillCircleHelper@x,w,c
  2601  000534  2437               	addwf	fillCircleHelper@x,w,c
  2602  000536  242B               	addwf	fillCircleHelper@delta,w,c
  2603  000538  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  2604  00053A  282F               	incf	??_fillCircleHelper,w,c
  2605  00053C  6E19               	movwf	drawFastVLine@h,c
  2606  00053E  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  2607  000542  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  2608  000546  5023               	movf	fillCircleHelper@x0,w,c
  2609  000548  2439               	addwf	fillCircleHelper@y,w,c
  2610  00054A  EC31  F006         	call	_drawFastVLine
  2611  00054E  D000               	goto	l3260
  2612  000550                     l3260:
  2613                           
  2614                           ;ST7735_TFT.c: 606: }
  2615                           ;ST7735_TFT.c: 607: if (cornername & 0x2) {
  2616  000550  A229               	btfss	fillCircleHelper@cornername,1,c
  2617  000552  D027               	goto	l3264
  2618                           
  2619                           ;ST7735_TFT.c: 608: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  2620  000554  5039               	movf	fillCircleHelper@y,w,c
  2621  000556  0800               	sublw	0
  2622  000558  2425               	addwf	fillCircleHelper@y0,w,c
  2623  00055A  6E18               	movwf	drawFastVLine@y,c
  2624  00055C  5039               	movf	fillCircleHelper@y,w,c
  2625  00055E  2439               	addwf	fillCircleHelper@y,w,c
  2626  000560  242B               	addwf	fillCircleHelper@delta,w,c
  2627  000562  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  2628  000564  282F               	incf	??_fillCircleHelper,w,c
  2629  000566  6E19               	movwf	drawFastVLine@h,c
  2630  000568  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  2631  00056C  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  2632  000570  5037               	movf	fillCircleHelper@x,w,c
  2633  000572  0800               	sublw	0
  2634  000574  2423               	addwf	fillCircleHelper@x0,w,c
  2635  000576  EC31  F006         	call	_drawFastVLine
  2636                           
  2637                           ;ST7735_TFT.c: 609: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  2638  00057A  5037               	movf	fillCircleHelper@x,w,c
  2639  00057C  0800               	sublw	0
  2640  00057E  2425               	addwf	fillCircleHelper@y0,w,c
  2641  000580  6E18               	movwf	drawFastVLine@y,c
  2642  000582  5037               	movf	fillCircleHelper@x,w,c
  2643  000584  2437               	addwf	fillCircleHelper@x,w,c
  2644  000586  242B               	addwf	fillCircleHelper@delta,w,c
  2645  000588  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  2646  00058A  282F               	incf	??_fillCircleHelper,w,c
  2647  00058C  6E19               	movwf	drawFastVLine@h,c
  2648  00058E  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  2649  000592  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  2650  000596  5039               	movf	fillCircleHelper@y,w,c
  2651  000598  0800               	sublw	0
  2652  00059A  2423               	addwf	fillCircleHelper@x0,w,c
  2653  00059C  EC31  F006         	call	_drawFastVLine
  2654  0005A0  D000               	goto	l3264
  2655  0005A2                     l3264:
  2656  0005A2  5039               	movf	fillCircleHelper@y,w,c
  2657  0005A4  5C37               	subwf	fillCircleHelper@x,w,c
  2658  0005A6  5038               	movf	fillCircleHelper@x+1,w,c
  2659  0005A8  0A80               	xorlw	128
  2660  0005AA  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  2661  0005AC  503A               	movf	fillCircleHelper@y+1,w,c
  2662  0005AE  0A80               	xorlw	128
  2663  0005B0  582F               	subwfb	??_fillCircleHelper& (0+255),w,c
  2664  0005B2  A0D8               	btfss	status,0,c
  2665  0005B4  D78F               	goto	l3244
  2666  0005B6  0012               	return		;funcret
  2667  0005B8                     __end_of_fillCircleHelper:
  2668                           	opt stack 0
  2669                           tblptru	equ	0xFF8
  2670                           tblptrh	equ	0xFF7
  2671                           tblptrl	equ	0xFF6
  2672                           tablat	equ	0xFF5
  2673                           prodh	equ	0xFF4
  2674                           prodl	equ	0xFF3
  2675                           intcon	equ	0xFF2
  2676                           intcon2	equ	0xFF1
  2677                           postinc0	equ	0xFEE
  2678                           wreg	equ	0xFE8
  2679                           postdec1	equ	0xFE5
  2680                           fsr1l	equ	0xFE1
  2681                           postinc2	equ	0xFDE
  2682                           postdec2	equ	0xFDD
  2683                           fsr2h	equ	0xFDA
  2684                           fsr2l	equ	0xFD9
  2685                           status	equ	0xFD8
  2686                           
  2687 ;; *************** function _drawCircle *****************
  2688 ;; Defined at:
  2689 ;;		line 528 in file "ST7735_TFT.c"
  2690 ;; Parameters:    Size  Location     Type
  2691 ;;  x0              2   27[COMRAM] int 
  2692 ;;  y0              2   29[COMRAM] int 
  2693 ;;  r               2   31[COMRAM] int 
  2694 ;;  color           2   33[COMRAM] unsigned int 
  2695 ;; Auto vars:     Size  Location     Type
  2696 ;;  y               2   45[COMRAM] int 
  2697 ;;  x               2   43[COMRAM] int 
  2698 ;;  f               2   41[COMRAM] int 
  2699 ;;  ddF_y           2   39[COMRAM] int 
  2700 ;;  ddF_x           2   37[COMRAM] int 
  2701 ;; Return value:  Size  Location     Type
  2702 ;;		None               void
  2703 ;; Registers used:
  2704 ;;		wreg, status,2, status,0, cstack
  2705 ;; Tracked objects:
  2706 ;;		On entry : 0/0
  2707 ;;		On exit  : 0/0
  2708 ;;		Unchanged: 0/0
  2709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2710 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2711 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2712 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2713 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2714 ;;Total ram usage:       20 bytes
  2715 ;; Hardware stack levels used:    1
  2716 ;; Hardware stack levels required when called:    7
  2717 ;; This function calls:
  2718 ;;		_drawPixel
  2719 ;; This function is called by:
  2720 ;;		_main
  2721 ;; This function uses a non-reentrant model
  2722 ;;
  2723                           
  2724                           	psect	text8
  2725  00001C                     __ptext8:
  2726                           	opt stack 0
  2727  00001C                     _drawCircle:
  2728                           	opt stack 23
  2729                           
  2730                           ;ST7735_TFT.c: 530: signed int f, ddF_x, ddF_y, x, y;
  2731                           ;ST7735_TFT.c: 531: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  2732                           
  2733                           ;incstack = 0
  2734  00001C  C020  F024         	movff	drawCircle@r,??_drawCircle
  2735  000020  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  2736  000024  1E24               	comf	??_drawCircle,f,c
  2737  000026  1E25               	comf	??_drawCircle+1,f,c
  2738  000028  4A24               	infsnz	??_drawCircle,f,c
  2739  00002A  2A25               	incf	??_drawCircle+1,f,c
  2740  00002C  0E01               	movlw	1
  2741  00002E  2424               	addwf	??_drawCircle,w,c
  2742  000030  6E2A               	movwf	drawCircle@f,c
  2743  000032  0E00               	movlw	0
  2744  000034  2025               	addwfc	??_drawCircle+1,w,c
  2745  000036  6E2B               	movwf	drawCircle@f+1,c
  2746  000038  0E00               	movlw	0
  2747  00003A  6E27               	movwf	drawCircle@ddF_x+1,c
  2748  00003C  0E01               	movlw	1
  2749  00003E  6E26               	movwf	drawCircle@ddF_x,c
  2750  000040  C020  F024         	movff	drawCircle@r,??_drawCircle
  2751  000044  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  2752  000048  90D8               	bcf	status,0,c
  2753  00004A  3624               	rlcf	??_drawCircle,f,c
  2754  00004C  3625               	rlcf	??_drawCircle+1,f,c
  2755  00004E  1E24               	comf	??_drawCircle,f,c
  2756  000050  1E25               	comf	??_drawCircle+1,f,c
  2757  000052  4A24               	infsnz	??_drawCircle,f,c
  2758  000054  2A25               	incf	??_drawCircle+1,f,c
  2759  000056  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  2760  00005A  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  2761  00005E  0E00               	movlw	0
  2762  000060  6E2D               	movwf	drawCircle@x+1,c
  2763  000062  0E00               	movlw	0
  2764  000064  6E2C               	movwf	drawCircle@x,c
  2765  000066  C020  F02E         	movff	drawCircle@r,drawCircle@y
  2766  00006A  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  2767                           
  2768                           ;ST7735_TFT.c: 532: drawPixel(x0 , y0 + r, color);
  2769  00006E  501E               	movf	drawCircle@y0,w,c
  2770  000070  2420               	addwf	drawCircle@r,w,c
  2771  000072  6E18               	movwf	drawPixel@y,c
  2772  000074  C022  F019         	movff	drawCircle@color,drawPixel@color
  2773  000078  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  2774  00007C  501C               	movf	drawCircle@x0,w,c
  2775  00007E  EC79  F008         	call	_drawPixel
  2776                           
  2777                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 - r, color);
  2778  000082  5020               	movf	drawCircle@r,w,c
  2779  000084  0800               	sublw	0
  2780  000086  241E               	addwf	drawCircle@y0,w,c
  2781  000088  6E18               	movwf	drawPixel@y,c
  2782  00008A  C022  F019         	movff	drawCircle@color,drawPixel@color
  2783  00008E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  2784  000092  501C               	movf	drawCircle@x0,w,c
  2785  000094  EC79  F008         	call	_drawPixel
  2786                           
  2787                           ;ST7735_TFT.c: 534: drawPixel(x0+r, y0 , color);
  2788  000098  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  2789  00009C  C022  F019         	movff	drawCircle@color,drawPixel@color
  2790  0000A0  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  2791  0000A4  501C               	movf	drawCircle@x0,w,c
  2792  0000A6  2420               	addwf	drawCircle@r,w,c
  2793  0000A8  EC79  F008         	call	_drawPixel
  2794                           
  2795                           ;ST7735_TFT.c: 535: drawPixel(x0-r, y0 , color);
  2796  0000AC  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  2797  0000B0  C022  F019         	movff	drawCircle@color,drawPixel@color
  2798  0000B4  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  2799  0000B8  5020               	movf	drawCircle@r,w,c
  2800  0000BA  0800               	sublw	0
  2801  0000BC  241C               	addwf	drawCircle@x0,w,c
  2802  0000BE  EC79  F008         	call	_drawPixel
  2803                           
  2804                           ;ST7735_TFT.c: 536: while (x < y) {
  2805  0000C2  D078               	goto	l3332
  2806  0000C4                     l3304:
  2807                           
  2808                           ;ST7735_TFT.c: 537: if (f >= 0) {
  2809  0000C4  BE2B               	btfsc	drawCircle@f+1,7,c
  2810  0000C6  D00B               	goto	l159
  2811                           
  2812                           ;ST7735_TFT.c: 538: y--;
  2813  0000C8  062E               	decf	drawCircle@y,f,c
  2814  0000CA  A0D8               	btfss	status,0,c
  2815  0000CC  062F               	decf	drawCircle@y+1,f,c
  2816                           
  2817                           ;ST7735_TFT.c: 539: ddF_y += 2;
  2818  0000CE  0E02               	movlw	2
  2819  0000D0  2628               	addwf	drawCircle@ddF_y,f,c
  2820  0000D2  0E00               	movlw	0
  2821  0000D4  2229               	addwfc	drawCircle@ddF_y+1,f,c
  2822                           
  2823                           ;ST7735_TFT.c: 540: f += ddF_y;
  2824  0000D6  5028               	movf	drawCircle@ddF_y,w,c
  2825  0000D8  262A               	addwf	drawCircle@f,f,c
  2826  0000DA  5029               	movf	drawCircle@ddF_y+1,w,c
  2827  0000DC  222B               	addwfc	drawCircle@f+1,f,c
  2828  0000DE                     l159:
  2829                           
  2830                           ;ST7735_TFT.c: 541: }
  2831                           ;ST7735_TFT.c: 542: x++;
  2832  0000DE  4A2C               	infsnz	drawCircle@x,f,c
  2833  0000E0  2A2D               	incf	drawCircle@x+1,f,c
  2834                           
  2835                           ;ST7735_TFT.c: 543: ddF_x += 2;
  2836  0000E2  0E02               	movlw	2
  2837  0000E4  2626               	addwf	drawCircle@ddF_x,f,c
  2838  0000E6  0E00               	movlw	0
  2839  0000E8  2227               	addwfc	drawCircle@ddF_x+1,f,c
  2840                           
  2841                           ;ST7735_TFT.c: 544: f += ddF_x;
  2842  0000EA  5026               	movf	drawCircle@ddF_x,w,c
  2843  0000EC  262A               	addwf	drawCircle@f,f,c
  2844  0000EE  5027               	movf	drawCircle@ddF_x+1,w,c
  2845  0000F0  222B               	addwfc	drawCircle@f+1,f,c
  2846                           
  2847                           ;ST7735_TFT.c: 545: drawPixel(x0 + x, y0 + y, color);
  2848  0000F2  501E               	movf	drawCircle@y0,w,c
  2849  0000F4  242E               	addwf	drawCircle@y,w,c
  2850  0000F6  6E18               	movwf	drawPixel@y,c
  2851  0000F8  C022  F019         	movff	drawCircle@color,drawPixel@color
  2852  0000FC  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  2853  000100  501C               	movf	drawCircle@x0,w,c
  2854  000102  242C               	addwf	drawCircle@x,w,c
  2855  000104  EC79  F008         	call	_drawPixel
  2856                           
  2857                           ;ST7735_TFT.c: 546: drawPixel(x0 - x, y0 + y, color);
  2858  000108  501E               	movf	drawCircle@y0,w,c
  2859  00010A  242E               	addwf	drawCircle@y,w,c
  2860  00010C  6E18               	movwf	drawPixel@y,c
  2861  00010E  C022  F019         	movff	drawCircle@color,drawPixel@color
  2862  000112  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  2863  000116  502C               	movf	drawCircle@x,w,c
  2864  000118  0800               	sublw	0
  2865  00011A  241C               	addwf	drawCircle@x0,w,c
  2866  00011C  EC79  F008         	call	_drawPixel
  2867                           
  2868                           ;ST7735_TFT.c: 547: drawPixel(x0 + x, y0 - y, color);
  2869  000120  502E               	movf	drawCircle@y,w,c
  2870  000122  0800               	sublw	0
  2871  000124  241E               	addwf	drawCircle@y0,w,c
  2872  000126  6E18               	movwf	drawPixel@y,c
  2873  000128  C022  F019         	movff	drawCircle@color,drawPixel@color
  2874  00012C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  2875  000130  501C               	movf	drawCircle@x0,w,c
  2876  000132  242C               	addwf	drawCircle@x,w,c
  2877  000134  EC79  F008         	call	_drawPixel
  2878                           
  2879                           ;ST7735_TFT.c: 548: drawPixel(x0 - x, y0 - y, color);
  2880  000138  502E               	movf	drawCircle@y,w,c
  2881  00013A  0800               	sublw	0
  2882  00013C  241E               	addwf	drawCircle@y0,w,c
  2883  00013E  6E18               	movwf	drawPixel@y,c
  2884  000140  C022  F019         	movff	drawCircle@color,drawPixel@color
  2885  000144  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  2886  000148  502C               	movf	drawCircle@x,w,c
  2887  00014A  0800               	sublw	0
  2888  00014C  241C               	addwf	drawCircle@x0,w,c
  2889  00014E  EC79  F008         	call	_drawPixel
  2890                           
  2891                           ;ST7735_TFT.c: 549: drawPixel(x0 + y, y0 + x, color);
  2892  000152  501E               	movf	drawCircle@y0,w,c
  2893  000154  242C               	addwf	drawCircle@x,w,c
  2894  000156  6E18               	movwf	drawPixel@y,c
  2895  000158  C022  F019         	movff	drawCircle@color,drawPixel@color
  2896  00015C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  2897  000160  501C               	movf	drawCircle@x0,w,c
  2898  000162  242E               	addwf	drawCircle@y,w,c
  2899  000164  EC79  F008         	call	_drawPixel
  2900                           
  2901                           ;ST7735_TFT.c: 550: drawPixel(x0 - y, y0 + x, color);
  2902  000168  501E               	movf	drawCircle@y0,w,c
  2903  00016A  242C               	addwf	drawCircle@x,w,c
  2904  00016C  6E18               	movwf	drawPixel@y,c
  2905  00016E  C022  F019         	movff	drawCircle@color,drawPixel@color
  2906  000172  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  2907  000176  502E               	movf	drawCircle@y,w,c
  2908  000178  0800               	sublw	0
  2909  00017A  241C               	addwf	drawCircle@x0,w,c
  2910  00017C  EC79  F008         	call	_drawPixel
  2911                           
  2912                           ;ST7735_TFT.c: 551: drawPixel(x0 + y, y0 - x, color);
  2913  000180  502C               	movf	drawCircle@x,w,c
  2914  000182  0800               	sublw	0
  2915  000184  241E               	addwf	drawCircle@y0,w,c
  2916  000186  6E18               	movwf	drawPixel@y,c
  2917  000188  C022  F019         	movff	drawCircle@color,drawPixel@color
  2918  00018C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  2919  000190  501C               	movf	drawCircle@x0,w,c
  2920  000192  242E               	addwf	drawCircle@y,w,c
  2921  000194  EC79  F008         	call	_drawPixel
  2922                           
  2923                           ;ST7735_TFT.c: 552: drawPixel(x0 - y, y0 - x, color);
  2924  000198  502C               	movf	drawCircle@x,w,c
  2925  00019A  0800               	sublw	0
  2926  00019C  241E               	addwf	drawCircle@y0,w,c
  2927  00019E  6E18               	movwf	drawPixel@y,c
  2928  0001A0  C022  F019         	movff	drawCircle@color,drawPixel@color
  2929  0001A4  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  2930  0001A8  502E               	movf	drawCircle@y,w,c
  2931  0001AA  0800               	sublw	0
  2932  0001AC  241C               	addwf	drawCircle@x0,w,c
  2933  0001AE  EC79  F008         	call	_drawPixel
  2934  0001B2  D000               	goto	l3332
  2935  0001B4                     l3332:
  2936  0001B4  502E               	movf	drawCircle@y,w,c
  2937  0001B6  5C2C               	subwf	drawCircle@x,w,c
  2938  0001B8  502D               	movf	drawCircle@x+1,w,c
  2939  0001BA  0A80               	xorlw	128
  2940  0001BC  6E24               	movwf	??_drawCircle& (0+255),c
  2941  0001BE  502F               	movf	drawCircle@y+1,w,c
  2942  0001C0  0A80               	xorlw	128
  2943  0001C2  5824               	subwfb	??_drawCircle& (0+255),w,c
  2944  0001C4  A0D8               	btfss	status,0,c
  2945  0001C6  D77E               	goto	l3304
  2946  0001C8  0012               	return		;funcret
  2947  0001CA                     __end_of_drawCircle:
  2948                           	opt stack 0
  2949                           tblptru	equ	0xFF8
  2950                           tblptrh	equ	0xFF7
  2951                           tblptrl	equ	0xFF6
  2952                           tablat	equ	0xFF5
  2953                           prodh	equ	0xFF4
  2954                           prodl	equ	0xFF3
  2955                           intcon	equ	0xFF2
  2956                           intcon2	equ	0xFF1
  2957                           postinc0	equ	0xFEE
  2958                           wreg	equ	0xFE8
  2959                           postdec1	equ	0xFE5
  2960                           fsr1l	equ	0xFE1
  2961                           postinc2	equ	0xFDE
  2962                           postdec2	equ	0xFDD
  2963                           fsr2h	equ	0xFDA
  2964                           fsr2l	equ	0xFD9
  2965                           status	equ	0xFD8
  2966                           
  2967 ;; *************** function _Initialize_Screen *****************
  2968 ;; Defined at:
  2969 ;;		line 220 in file "Lab10p1.c"
  2970 ;; Parameters:    Size  Location     Type
  2971 ;;		None
  2972 ;; Auto vars:     Size  Location     Type
  2973 ;;		None
  2974 ;; Return value:  Size  Location     Type
  2975 ;;		None               void
  2976 ;; Registers used:
  2977 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2978 ;; Tracked objects:
  2979 ;;		On entry : 0/0
  2980 ;;		On exit  : 0/0
  2981 ;;		Unchanged: 0/0
  2982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2987 ;;Total ram usage:        0 bytes
  2988 ;; Hardware stack levels used:    1
  2989 ;; Hardware stack levels required when called:   10
  2990 ;; This function calls:
  2991 ;;		_LCD_Reset
  2992 ;;		_TFT_GreenTab_Initialize
  2993 ;;		_drawtext
  2994 ;;		_fillScreen
  2995 ;;		_strcpy
  2996 ;; This function is called by:
  2997 ;;		_main
  2998 ;; This function uses a non-reentrant model
  2999 ;;
  3000                           
  3001                           	psect	text9
  3002  000BD4                     __ptext9:
  3003                           	opt stack 0
  3004  000BD4                     _Initialize_Screen:
  3005                           	opt stack 20
  3006                           
  3007                           ;Lab10p1.c: 222: LCD_Reset();
  3008                           
  3009                           ;incstack = 0
  3010  000BD4  ECF2  F008         	call	_LCD_Reset	;wreg free
  3011                           
  3012                           ;Lab10p1.c: 223: TFT_GreenTab_Initialize();
  3013  000BD8  ECA6  F008         	call	_TFT_GreenTab_Initialize	;wreg free
  3014                           
  3015                           ;Lab10p1.c: 224: fillScreen(0x0000);
  3016  000BDC  0E00               	movlw	0
  3017  000BDE  6E25               	movwf	fillScreen@color+1,c
  3018  000BE0  0E00               	movlw	0
  3019  000BE2  6E24               	movwf	fillScreen@color,c
  3020  000BE4  ECCF  F008         	call	_fillScreen	;wreg free
  3021                           
  3022                           ;Lab10p1.c: 227: txt = buffer;
  3023  000BE8  0EAA               	movlw	low _buffer
  3024  000BEA  6E64               	movwf	_txt,c
  3025  000BEC  0E00               	movlw	high _buffer
  3026  000BEE  6E65               	movwf	_txt+1,c
  3027                           
  3028                           ;Lab10p1.c: 228: strcpy(txt, "ECE3301L Spring 21-S1");
  3029  000BF0  C064  F011         	movff	_txt,strcpy@to
  3030  000BF4  C065  F012         	movff	_txt+1,strcpy@to+1
  3031  000BF8  0EBC               	movlw	low STR_2
  3032  000BFA  6E13               	movwf	strcpy@from,c
  3033  000BFC  0EFF               	movlw	high STR_2
  3034  000BFE  6E14               	movwf	strcpy@from+1,c
  3035  000C00  EC60  F008         	call	_strcpy	;wreg free
  3036                           
  3037                           ;Lab10p1.c: 229: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  3038  000C04  0E02               	movlw	2
  3039  000C06  6E39               	movwf	drawtext@y,c
  3040  000C08  C064  F03A         	movff	_txt,drawtext@_text
  3041  000C0C  C065  F03B         	movff	_txt+1,drawtext@_text+1
  3042  000C10  0EFF               	movlw	255
  3043  000C12  6E3D               	movwf	drawtext@color+1,c
  3044  000C14  683C               	setf	drawtext@color,c
  3045  000C16  0E00               	movlw	0
  3046  000C18  6E3F               	movwf	drawtext@bg+1,c
  3047  000C1A  0E00               	movlw	0
  3048  000C1C  6E3E               	movwf	drawtext@bg,c
  3049  000C1E  0E01               	movlw	1
  3050  000C20  6E40               	movwf	drawtext@size,c
  3051  000C22  0E02               	movlw	2
  3052  000C24  EC7E  F004         	call	_drawtext
  3053                           
  3054                           ;Lab10p1.c: 231: strcpy(txt, "LAB 10 ");
  3055  000C28  C064  F011         	movff	_txt,strcpy@to
  3056  000C2C  C065  F012         	movff	_txt+1,strcpy@to+1
  3057  000C30  0EF6               	movlw	low STR_3
  3058  000C32  6E13               	movwf	strcpy@from,c
  3059  000C34  0EFF               	movlw	high STR_3
  3060  000C36  6E14               	movwf	strcpy@from+1,c
  3061  000C38  EC60  F008         	call	_strcpy	;wreg free
  3062                           
  3063                           ;Lab10p1.c: 232: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  3064  000C3C  0E0A               	movlw	10
  3065  000C3E  6E39               	movwf	drawtext@y,c
  3066  000C40  C064  F03A         	movff	_txt,drawtext@_text
  3067  000C44  C065  F03B         	movff	_txt+1,drawtext@_text+1
  3068  000C48  0EFF               	movlw	255
  3069  000C4A  6E3D               	movwf	drawtext@color+1,c
  3070  000C4C  683C               	setf	drawtext@color,c
  3071  000C4E  0E00               	movlw	0
  3072  000C50  6E3F               	movwf	drawtext@bg+1,c
  3073  000C52  0E00               	movlw	0
  3074  000C54  6E3E               	movwf	drawtext@bg,c
  3075  000C56  0E01               	movlw	1
  3076  000C58  6E40               	movwf	drawtext@size,c
  3077  000C5A  0E32               	movlw	50
  3078  000C5C  EC7E  F004         	call	_drawtext
  3079  000C60  0012               	return		;funcret
  3080  000C62                     __end_of_Initialize_Screen:
  3081                           	opt stack 0
  3082                           tblptru	equ	0xFF8
  3083                           tblptrh	equ	0xFF7
  3084                           tblptrl	equ	0xFF6
  3085                           tablat	equ	0xFF5
  3086                           prodh	equ	0xFF4
  3087                           prodl	equ	0xFF3
  3088                           intcon	equ	0xFF2
  3089                           intcon2	equ	0xFF1
  3090                           postinc0	equ	0xFEE
  3091                           wreg	equ	0xFE8
  3092                           postdec1	equ	0xFE5
  3093                           fsr1l	equ	0xFE1
  3094                           postinc2	equ	0xFDE
  3095                           postdec2	equ	0xFDD
  3096                           fsr2h	equ	0xFDA
  3097                           fsr2l	equ	0xFD9
  3098                           status	equ	0xFD8
  3099                           
  3100 ;; *************** function _strcpy *****************
  3101 ;; Defined at:
  3102 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  3103 ;; Parameters:    Size  Location     Type
  3104 ;;  to              2   16[COMRAM] PTR unsigned char 
  3105 ;;		 -> NULL(0), buffer(31), 
  3106 ;;  from            2   18[COMRAM] PTR const unsigned char 
  3107 ;;		 -> STR_3(8), STR_2(22), 
  3108 ;; Auto vars:     Size  Location     Type
  3109 ;;  cp              2   20[COMRAM] PTR unsigned char 
  3110 ;;		 -> NULL(0), buffer(31), 
  3111 ;; Return value:  Size  Location     Type
  3112 ;;                  2   16[COMRAM] PTR unsigned char 
  3113 ;; Registers used:
  3114 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  3115 ;; Tracked objects:
  3116 ;;		On entry : 0/0
  3117 ;;		On exit  : 0/0
  3118 ;;		Unchanged: 0/0
  3119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3120 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3121 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3123 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3124 ;;Total ram usage:        6 bytes
  3125 ;; Hardware stack levels used:    1
  3126 ;; Hardware stack levels required when called:    3
  3127 ;; This function calls:
  3128 ;;		Nothing
  3129 ;; This function is called by:
  3130 ;;		_Initialize_Screen
  3131 ;; This function uses a non-reentrant model
  3132 ;;
  3133                           
  3134                           	psect	text10
  3135  0010C0                     __ptext10:
  3136                           	opt stack 0
  3137  0010C0                     _strcpy:
  3138                           	opt stack 26
  3139                           
  3140                           ;incstack = 0
  3141  0010C0  C011  F015         	movff	strcpy@to,strcpy@cp
  3142  0010C4  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  3143  0010C8  D005               	goto	l2450
  3144  0010CA                     l2448:
  3145  0010CA  4A15               	infsnz	strcpy@cp,f,c
  3146  0010CC  2A16               	incf	strcpy@cp+1,f,c
  3147  0010CE  4A13               	infsnz	strcpy@from,f,c
  3148  0010D0  2A14               	incf	strcpy@from+1,f,c
  3149  0010D2  D000               	goto	l2450
  3150  0010D4                     l2450:
  3151  0010D4  C013  FFF6         	movff	strcpy@from,tblptrl
  3152  0010D8  C014  FFF7         	movff	strcpy@from+1,tblptrh
  3153  0010DC                     	if	0	;tblptru may be non-zero
  3154  0010DC                     	endif
  3155  0010DC                     	if	0	;tblptru may be non-zero
  3156  0010DC                     	endif
  3157  0010DC  C015  FFD9         	movff	strcpy@cp,fsr2l
  3158  0010E0  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  3159  0010E4  0008               	tblrd		*
  3160  0010E6  CFF5 FFDF          	movff	tablat,indf2
  3161  0010EA  50DF               	movf	indf2,w,c
  3162  0010EC  A4D8               	btfss	status,2,c
  3163  0010EE  D7ED               	goto	l2448
  3164                           
  3165                           ;	Return value of _strcpy is never used
  3166  0010F0  0012               	return		;funcret
  3167  0010F2                     __end_of_strcpy:
  3168                           	opt stack 0
  3169                           tblptru	equ	0xFF8
  3170                           tblptrh	equ	0xFF7
  3171                           tblptrl	equ	0xFF6
  3172                           tablat	equ	0xFF5
  3173                           prodh	equ	0xFF4
  3174                           prodl	equ	0xFF3
  3175                           intcon	equ	0xFF2
  3176                           intcon2	equ	0xFF1
  3177                           postinc0	equ	0xFEE
  3178                           wreg	equ	0xFE8
  3179                           postdec1	equ	0xFE5
  3180                           fsr1l	equ	0xFE1
  3181                           indf2	equ	0xFDF
  3182                           postinc2	equ	0xFDE
  3183                           postdec2	equ	0xFDD
  3184                           fsr2h	equ	0xFDA
  3185                           fsr2l	equ	0xFD9
  3186                           status	equ	0xFD8
  3187                           
  3188 ;; *************** function _fillScreen *****************
  3189 ;; Defined at:
  3190 ;;		line 619 in file "ST7735_TFT.c"
  3191 ;; Parameters:    Size  Location     Type
  3192 ;;  color           2   35[COMRAM] unsigned int 
  3193 ;; Auto vars:     Size  Location     Type
  3194 ;;		None
  3195 ;; Return value:  Size  Location     Type
  3196 ;;		None               void
  3197 ;; Registers used:
  3198 ;;		wreg, status,2, status,0, cstack
  3199 ;; Tracked objects:
  3200 ;;		On entry : 0/0
  3201 ;;		On exit  : 0/0
  3202 ;;		Unchanged: 0/0
  3203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3204 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3207 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3208 ;;Total ram usage:        2 bytes
  3209 ;; Hardware stack levels used:    1
  3210 ;; Hardware stack levels required when called:    7
  3211 ;; This function calls:
  3212 ;;		_fillRectangle
  3213 ;; This function is called by:
  3214 ;;		_Initialize_Screen
  3215 ;; This function uses a non-reentrant model
  3216 ;;
  3217                           
  3218                           	psect	text11
  3219  00119E                     __ptext11:
  3220                           	opt stack 0
  3221  00119E                     _fillScreen:
  3222                           	opt stack 22
  3223                           
  3224                           ;ST7735_TFT.c: 621: fillRectangle(0, 0, 128, 160, color);
  3225                           
  3226                           ;incstack = 0
  3227  00119E  0E00               	movlw	0
  3228  0011A0  6E18               	movwf	fillRectangle@y,c
  3229  0011A2  0E80               	movlw	128
  3230  0011A4  6E19               	movwf	fillRectangle@w,c
  3231  0011A6  0EA0               	movlw	160
  3232  0011A8  6E1A               	movwf	fillRectangle@h,c
  3233  0011AA  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  3234  0011AE  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  3235  0011B2  0E00               	movlw	0
  3236  0011B4  EC7C  F005         	call	_fillRectangle
  3237  0011B8  0012               	return		;funcret
  3238  0011BA                     __end_of_fillScreen:
  3239                           	opt stack 0
  3240                           tblptru	equ	0xFF8
  3241                           tblptrh	equ	0xFF7
  3242                           tblptrl	equ	0xFF6
  3243                           tablat	equ	0xFF5
  3244                           prodh	equ	0xFF4
  3245                           prodl	equ	0xFF3
  3246                           intcon	equ	0xFF2
  3247                           intcon2	equ	0xFF1
  3248                           postinc0	equ	0xFEE
  3249                           wreg	equ	0xFE8
  3250                           postdec1	equ	0xFE5
  3251                           fsr1l	equ	0xFE1
  3252                           indf2	equ	0xFDF
  3253                           postinc2	equ	0xFDE
  3254                           postdec2	equ	0xFDD
  3255                           fsr2h	equ	0xFDA
  3256                           fsr2l	equ	0xFD9
  3257                           status	equ	0xFD8
  3258                           
  3259 ;; *************** function _fillRectangle *****************
  3260 ;; Defined at:
  3261 ;;		line 503 in file "ST7735_TFT.c"
  3262 ;; Parameters:    Size  Location     Type
  3263 ;;  x               1    wreg     unsigned char 
  3264 ;;  y               1   23[COMRAM] unsigned char 
  3265 ;;  w               1   24[COMRAM] unsigned char 
  3266 ;;  h               1   25[COMRAM] unsigned char 
  3267 ;;  color           2   26[COMRAM] unsigned int 
  3268 ;; Auto vars:     Size  Location     Type
  3269 ;;  x               1   34[COMRAM] unsigned char 
  3270 ;;  lo              1   33[COMRAM] unsigned char 
  3271 ;;  hi              1   32[COMRAM] unsigned char 
  3272 ;; Return value:  Size  Location     Type
  3273 ;;		None               void
  3274 ;; Registers used:
  3275 ;;		wreg, status,2, status,0, cstack
  3276 ;; Tracked objects:
  3277 ;;		On entry : 0/0
  3278 ;;		On exit  : 0/0
  3279 ;;		Unchanged: 0/0
  3280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3281 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3282 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3283 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3284 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3285 ;;Total ram usage:       12 bytes
  3286 ;; Hardware stack levels used:    1
  3287 ;; Hardware stack levels required when called:    6
  3288 ;; This function calls:
  3289 ;;		_setAddrWindow
  3290 ;;		_spiwrite
  3291 ;; This function is called by:
  3292 ;;		_fillScreen
  3293 ;; This function uses a non-reentrant model
  3294 ;;
  3295                           
  3296                           	psect	text12
  3297  000AF8                     __ptext12:
  3298                           	opt stack 0
  3299  000AF8                     _fillRectangle:
  3300                           	opt stack 22
  3301                           
  3302                           ;incstack = 0
  3303                           ;fillRectangle@x stored from wreg
  3304  000AF8  6E23               	movwf	fillRectangle@x,c
  3305                           
  3306                           ;ST7735_TFT.c: 505: unsigned char hi, lo;
  3307                           ;ST7735_TFT.c: 506: if((x >= 128) || (y >= 160))
  3308  000AFA  0E80               	movlw	128
  3309  000AFC  6023               	cpfslt	fillRectangle@x,c
  3310  000AFE  D069               	goto	l148
  3311  000B00  0E9F               	movlw	159
  3312  000B02  6418               	cpfsgt	fillRectangle@y,c
  3313  000B04  D001               	goto	l3156
  3314                           
  3315                           ;ST7735_TFT.c: 507: return;
  3316  000B06  D065               	goto	l148
  3317  000B08                     l3156:
  3318                           
  3319                           ;ST7735_TFT.c: 508: if((x + w - 1) >= 128)
  3320  000B08  0EFF               	movlw	255
  3321  000B0A  6E1D               	movwf	??_fillRectangle& (0+255),c
  3322  000B0C  0EFF               	movlw	255
  3323  000B0E  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  3324  000B10  5019               	movf	fillRectangle@w,w,c
  3325  000B12  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  3326  000B16  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  3327  000B18  261F               	addwf	??_fillRectangle+2,f,c
  3328  000B1A  0E00               	movlw	0
  3329  000B1C  2220               	addwfc	??_fillRectangle+3,f,c
  3330  000B1E  501D               	movf	??_fillRectangle,w,c
  3331  000B20  261F               	addwf	??_fillRectangle+2,f,c
  3332  000B22  501E               	movf	??_fillRectangle+1,w,c
  3333  000B24  2220               	addwfc	??_fillRectangle+3,f,c
  3334  000B26  BE20               	btfsc	??_fillRectangle+3,7,c
  3335  000B28  D00A               	goto	l149
  3336  000B2A  5020               	movf	??_fillRectangle+3,w,c
  3337  000B2C  E104               	bnz	u2100
  3338  000B2E  0E80               	movlw	128
  3339  000B30  5C1F               	subwf	??_fillRectangle+2,w,c
  3340  000B32  A0D8               	btfss	status,0,c
  3341  000B34  D004               	goto	l149
  3342  000B36                     u2100:
  3343                           
  3344                           ;ST7735_TFT.c: 509: w = 128 - x;
  3345  000B36  5023               	movf	fillRectangle@x,w,c
  3346  000B38  0800               	sublw	0
  3347  000B3A  0F80               	addlw	128
  3348  000B3C  6E19               	movwf	fillRectangle@w,c
  3349  000B3E                     l149:
  3350                           
  3351                           ;ST7735_TFT.c: 510: if((y + h - 1) >= 160)
  3352  000B3E  0EFF               	movlw	255
  3353  000B40  6E1D               	movwf	??_fillRectangle& (0+255),c
  3354  000B42  0EFF               	movlw	255
  3355  000B44  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  3356  000B46  501A               	movf	fillRectangle@h,w,c
  3357  000B48  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  3358  000B4C  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  3359  000B4E  261F               	addwf	??_fillRectangle+2,f,c
  3360  000B50  0E00               	movlw	0
  3361  000B52  2220               	addwfc	??_fillRectangle+3,f,c
  3362  000B54  501D               	movf	??_fillRectangle,w,c
  3363  000B56  261F               	addwf	??_fillRectangle+2,f,c
  3364  000B58  501E               	movf	??_fillRectangle+1,w,c
  3365  000B5A  2220               	addwfc	??_fillRectangle+3,f,c
  3366  000B5C  BE20               	btfsc	??_fillRectangle+3,7,c
  3367  000B5E  D00B               	goto	l3162
  3368  000B60  5020               	movf	??_fillRectangle+3,w,c
  3369  000B62  E104               	bnz	u2110
  3370  000B64  0EA0               	movlw	160
  3371  000B66  5C1F               	subwf	??_fillRectangle+2,w,c
  3372  000B68  A0D8               	btfss	status,0,c
  3373  000B6A  D005               	goto	l3162
  3374  000B6C                     u2110:
  3375                           
  3376                           ;ST7735_TFT.c: 511: h = 160 - y;
  3377  000B6C  5018               	movf	fillRectangle@y,w,c
  3378  000B6E  0800               	sublw	0
  3379  000B70  0FA0               	addlw	160
  3380  000B72  6E1A               	movwf	fillRectangle@h,c
  3381  000B74  D000               	goto	l3162
  3382  000B76                     l3162:
  3383                           
  3384                           ;ST7735_TFT.c: 512: setAddrWindow(x, y, x+w-1, y+h-1);
  3385  000B76  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  3386  000B7A  5023               	movf	fillRectangle@x,w,c
  3387  000B7C  2419               	addwf	fillRectangle@w,w,c
  3388  000B7E  6E1D               	movwf	??_fillRectangle& (0+255),c
  3389  000B80  041D               	decf	??_fillRectangle,w,c
  3390  000B82  6E15               	movwf	setAddrWindow@x1,c
  3391  000B84  5018               	movf	fillRectangle@y,w,c
  3392  000B86  241A               	addwf	fillRectangle@h,w,c
  3393  000B88  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  3394  000B8A  041E               	decf	??_fillRectangle+1,w,c
  3395  000B8C  6E16               	movwf	setAddrWindow@y1,c
  3396  000B8E  5023               	movf	fillRectangle@x,w,c
  3397  000B90  ECD6  F007         	call	_setAddrWindow
  3398                           
  3399                           ;ST7735_TFT.c: 513: hi = color >> 8; lo = color;
  3400  000B94  501C               	movf	fillRectangle@color+1,w,c
  3401  000B96  6E21               	movwf	fillRectangle@hi,c
  3402  000B98  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  3403                           
  3404                           ;ST7735_TFT.c: 514: PORTCbits.RC0 = 1;
  3405  000B9C  8082               	bsf	3970,0,c	;volatile
  3406                           
  3407                           ;ST7735_TFT.c: 515: PORTCbits.RC1 = 0;
  3408  000B9E  9282               	bcf	3970,1,c	;volatile
  3409                           
  3410                           ;ST7735_TFT.c: 517: for(y=h; y>0; y--) {
  3411  000BA0  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  3412  000BA4                     l3174:
  3413  000BA4  5018               	movf	fillRectangle@y,w,c
  3414  000BA6  B4D8               	btfsc	status,2,c
  3415  000BA8  D013               	goto	l152
  3416  000BAA  D001               	goto	l151
  3417  000BAC  D011               	goto	l152
  3418  000BAE                     l151:
  3419                           
  3420                           ;ST7735_TFT.c: 518: for(x = w; x > 0; x--) {
  3421  000BAE  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  3422  000BB2                     l3178:
  3423  000BB2  5023               	movf	fillRectangle@x,w,c
  3424  000BB4  B4D8               	btfsc	status,2,c
  3425  000BB6  D00A               	goto	l3188
  3426  000BB8  D001               	goto	l3182
  3427  000BBA  D008               	goto	l3188
  3428  000BBC                     l3182:
  3429                           
  3430                           ;ST7735_TFT.c: 519: spiwrite(hi);
  3431  000BBC  5021               	movf	fillRectangle@hi,w,c
  3432  000BBE  ECE8  F008         	call	_spiwrite
  3433                           
  3434                           ;ST7735_TFT.c: 520: spiwrite(lo);
  3435  000BC2  5022               	movf	fillRectangle@lo,w,c
  3436  000BC4  ECE8  F008         	call	_spiwrite
  3437  000BC8  0623               	decf	fillRectangle@x,f,c
  3438  000BCA  D7F3               	goto	l3178
  3439  000BCC                     l3188:
  3440  000BCC  0618               	decf	fillRectangle@y,f,c
  3441  000BCE  D7EA               	goto	l3174
  3442  000BD0                     l152:
  3443                           
  3444                           ;ST7735_TFT.c: 521: }
  3445                           ;ST7735_TFT.c: 522: }
  3446                           ;ST7735_TFT.c: 523: PORTCbits.RC1 = 1;
  3447  000BD0  8282               	bsf	3970,1,c	;volatile
  3448  000BD2                     l148:
  3449  000BD2  0012               	return		;funcret
  3450  000BD4                     __end_of_fillRectangle:
  3451                           	opt stack 0
  3452                           tblptru	equ	0xFF8
  3453                           tblptrh	equ	0xFF7
  3454                           tblptrl	equ	0xFF6
  3455                           tablat	equ	0xFF5
  3456                           prodh	equ	0xFF4
  3457                           prodl	equ	0xFF3
  3458                           intcon	equ	0xFF2
  3459                           intcon2	equ	0xFF1
  3460                           postinc0	equ	0xFEE
  3461                           wreg	equ	0xFE8
  3462                           postdec1	equ	0xFE5
  3463                           fsr1l	equ	0xFE1
  3464                           indf2	equ	0xFDF
  3465                           postinc2	equ	0xFDE
  3466                           postdec2	equ	0xFDD
  3467                           fsr2h	equ	0xFDA
  3468                           fsr2l	equ	0xFD9
  3469                           status	equ	0xFD8
  3470                           
  3471 ;; *************** function _drawtext *****************
  3472 ;; Defined at:
  3473 ;;		line 474 in file "ST7735_TFT.c"
  3474 ;; Parameters:    Size  Location     Type
  3475 ;;  x               1    wreg     unsigned char 
  3476 ;;  y               1   56[COMRAM] unsigned char 
  3477 ;;  _text           2   57[COMRAM] PTR unsigned char 
  3478 ;;		 -> NULL(0), buffer(31), txt1(84), 
  3479 ;;  color           2   59[COMRAM] unsigned int 
  3480 ;;  bg              2   61[COMRAM] unsigned int 
  3481 ;;  size            1   63[COMRAM] unsigned char 
  3482 ;; Auto vars:     Size  Location     Type
  3483 ;;  x               1    0[BANK0 ] unsigned char 
  3484 ;;  i               2    3[BANK0 ] unsigned int 
  3485 ;;  textsize        2    1[BANK0 ] unsigned int 
  3486 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  3487 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  3488 ;; Return value:  Size  Location     Type
  3489 ;;		None               void
  3490 ;; Registers used:
  3491 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3492 ;; Tracked objects:
  3493 ;;		On entry : 0/0
  3494 ;;		On exit  : 0/0
  3495 ;;		Unchanged: 0/0
  3496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3497 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3498 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3499 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3500 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3501 ;;Total ram usage:       17 bytes
  3502 ;; Hardware stack levels used:    1
  3503 ;; Hardware stack levels required when called:    9
  3504 ;; This function calls:
  3505 ;;		_drawChar
  3506 ;;		_strlen
  3507 ;; This function is called by:
  3508 ;;		_main
  3509 ;;		_Initialize_Screen
  3510 ;; This function uses a non-reentrant model
  3511 ;;
  3512                           
  3513                           	psect	text13
  3514  0008FC                     __ptext13:
  3515                           	opt stack 0
  3516  0008FC                     _drawtext:
  3517                           	opt stack 21
  3518                           
  3519                           ;incstack = 0
  3520                           ;drawtext@x stored from wreg
  3521  0008FC  0100               	movlb	0	; () banked
  3522  0008FE  6FC9               	movwf	drawtext@x& (0+255),b
  3523                           
  3524                           ; BSR set to: 0
  3525                           ;ST7735_TFT.c: 476: unsigned char cursor_x, cursor_y;
  3526                           ;ST7735_TFT.c: 477: unsigned int textsize, i;
  3527                           ;ST7735_TFT.c: 478: cursor_x = x, cursor_y = y;
  3528  000900  C0C9  F0CF         	movff	drawtext@x,drawtext@cursor_x
  3529                           
  3530                           ; BSR set to: 0
  3531  000904  C039  F0CE         	movff	drawtext@y,drawtext@cursor_y
  3532                           
  3533                           ; BSR set to: 0
  3534                           ;ST7735_TFT.c: 479: textsize = strlen(_text);
  3535  000908  C03A  F011         	movff	drawtext@_text,strlen@s
  3536  00090C  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  3537  000910  EC22  F008         	call	_strlen	;wreg free
  3538  000914  C011  F0CA         	movff	?_strlen,drawtext@textsize
  3539  000918  C012  F0CB         	movff	?_strlen+1,drawtext@textsize+1
  3540                           
  3541                           ;ST7735_TFT.c: 480: for(i = 0; i < textsize; i++){
  3542  00091C  0E00               	movlw	0
  3543  00091E  0100               	movlb	0	; () banked
  3544  000920  6FCD               	movwf	(drawtext@i+1)& (0+255),b
  3545  000922  0E00               	movlw	0
  3546  000924  6FCC               	movwf	drawtext@i& (0+255),b
  3547  000926  D064               	goto	l3232
  3548  000928                     l3206:
  3549                           
  3550                           ; BSR set to: 0
  3551                           ;ST7735_TFT.c: 481: if(wrap && ((cursor_x + size * 5) > 128)){
  3552  000928  5059               	movf	_wrap,w,c
  3553  00092A  B4D8               	btfsc	status,2,c
  3554  00092C  D034               	goto	l3222
  3555                           
  3556                           ; BSR set to: 0
  3557  00092E  5040               	movf	drawtext@size,w,c
  3558  000930  0D05               	mullw	5
  3559  000932  0100               	movlb	0	; () banked
  3560  000934  51CF               	movf	drawtext@cursor_x& (0+255),w,b
  3561  000936  6E41               	movwf	??_drawtext& (0+255),c
  3562  000938  6A42               	clrf	(??_drawtext+1)& (0+255),c
  3563  00093A  50F3               	movf	prodl,w,c
  3564  00093C  2641               	addwf	??_drawtext,f,c
  3565  00093E  50F4               	movf	prodh,w,c
  3566  000940  2242               	addwfc	??_drawtext+1,f,c
  3567  000942  BE42               	btfsc	??_drawtext+1,7,c
  3568  000944  D028               	goto	l3222
  3569  000946  5042               	movf	??_drawtext+1,w,c
  3570  000948  E104               	bnz	u2170
  3571  00094A  0E81               	movlw	129
  3572  00094C  5C41               	subwf	??_drawtext,w,c
  3573  00094E  A0D8               	btfss	status,0,c
  3574  000950  D022               	goto	l3222
  3575  000952                     u2170:
  3576                           
  3577                           ; BSR set to: 0
  3578                           ;ST7735_TFT.c: 482: cursor_x = 0;
  3579  000952  0E00               	movlw	0
  3580  000954  0100               	movlb	0	; () banked
  3581  000956  6FCF               	movwf	drawtext@cursor_x& (0+255),b
  3582                           
  3583                           ; BSR set to: 0
  3584                           ;ST7735_TFT.c: 483: cursor_y = cursor_y + size * 7 + 3 ;
  3585  000958  5040               	movf	drawtext@size,w,c
  3586  00095A  0D07               	mullw	7
  3587  00095C  50F3               	movf	prodl,w,c
  3588  00095E  0100               	movlb	0	; () banked
  3589  000960  25CE               	addwf	drawtext@cursor_y& (0+255),w,b
  3590  000962  0F03               	addlw	3
  3591  000964  0100               	movlb	0	; () banked
  3592  000966  6FCE               	movwf	drawtext@cursor_y& (0+255),b
  3593                           
  3594                           ; BSR set to: 0
  3595                           ;ST7735_TFT.c: 484: if(cursor_y > 160) cursor_y = 160;
  3596  000968  0EA0               	movlw	160
  3597  00096A  0100               	movlb	0	; () banked
  3598  00096C  65CE               	cpfsgt	drawtext@cursor_y& (0+255),b
  3599  00096E  D004               	goto	l3218
  3600                           
  3601                           ; BSR set to: 0
  3602  000970  0EA0               	movlw	160
  3603  000972  0100               	movlb	0	; () banked
  3604  000974  6FCE               	movwf	drawtext@cursor_y& (0+255),b
  3605  000976  D000               	goto	l3218
  3606  000978                     l3218:
  3607                           
  3608                           ; BSR set to: 0
  3609                           ;ST7735_TFT.c: 485: if(_text[i] == 0x20) goto _skip; }
  3610  000978  0100               	movlb	0	; () banked
  3611  00097A  51CC               	movf	drawtext@i& (0+255),w,b
  3612  00097C  243A               	addwf	drawtext@_text,w,c
  3613  00097E  6ED9               	movwf	fsr2l,c
  3614  000980  0100               	movlb	0	; () banked
  3615  000982  51CD               	movf	(drawtext@i+1)& (0+255),w,b
  3616  000984  203B               	addwfc	drawtext@_text+1,w,c
  3617  000986  6EDA               	movwf	fsr2h,c
  3618  000988  0E20               	movlw	32
  3619  00098A  18DE               	xorwf	postinc2,w,c
  3620  00098C  B4D8               	btfsc	status,2,c
  3621  00098E  D02C               	goto	l3230
  3622  000990  D002               	goto	l3222
  3623                           
  3624                           ; BSR set to: 0
  3625  000992  D02A               	goto	l3230
  3626                           
  3627                           ; BSR set to: 0
  3628  000994  D000               	goto	l3222
  3629  000996                     l3222:
  3630                           
  3631                           ; BSR set to: 0
  3632                           ;ST7735_TFT.c: 486: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  3633  000996  C0CE  F02E         	movff	drawtext@cursor_y,drawChar@y
  3634  00099A  0100               	movlb	0	; () banked
  3635  00099C  51CC               	movf	drawtext@i& (0+255),w,b
  3636  00099E  243A               	addwf	drawtext@_text,w,c
  3637  0009A0  6ED9               	movwf	fsr2l,c
  3638  0009A2  0100               	movlb	0	; () banked
  3639  0009A4  51CD               	movf	(drawtext@i+1)& (0+255),w,b
  3640  0009A6  203B               	addwfc	drawtext@_text+1,w,c
  3641  0009A8  6EDA               	movwf	fsr2h,c
  3642  0009AA  50DF               	movf	indf2,w,c
  3643  0009AC  6E2F               	movwf	drawChar@c,c
  3644  0009AE  C03C  F030         	movff	drawtext@color,drawChar@color
  3645  0009B2  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  3646  0009B6  C03E  F032         	movff	drawtext@bg,drawChar@bg
  3647  0009BA  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  3648  0009BE  C040  F034         	movff	drawtext@size,drawChar@size
  3649  0009C2  0100               	movlb	0	; () banked
  3650  0009C4  51CF               	movf	drawtext@cursor_x& (0+255),w,b
  3651  0009C6  EC95  F001         	call	_drawChar
  3652                           
  3653                           ;ST7735_TFT.c: 487: cursor_x = cursor_x + size * 6;
  3654  0009CA  5040               	movf	drawtext@size,w,c
  3655  0009CC  0D06               	mullw	6
  3656  0009CE  50F3               	movf	prodl,w,c
  3657  0009D0  0100               	movlb	0	; () banked
  3658  0009D2  25CF               	addwf	drawtext@cursor_x& (0+255),w,b
  3659  0009D4  0100               	movlb	0	; () banked
  3660  0009D6  6FCF               	movwf	drawtext@cursor_x& (0+255),b
  3661                           
  3662                           ; BSR set to: 0
  3663                           ;ST7735_TFT.c: 488: if(cursor_x > 128) cursor_x = 128;
  3664  0009D8  0E80               	movlw	128
  3665  0009DA  0100               	movlb	0	; () banked
  3666  0009DC  65CF               	cpfsgt	drawtext@cursor_x& (0+255),b
  3667  0009DE  D004               	goto	l3230
  3668                           
  3669                           ; BSR set to: 0
  3670  0009E0  0E80               	movlw	128
  3671  0009E2  0100               	movlb	0	; () banked
  3672  0009E4  6FCF               	movwf	drawtext@cursor_x& (0+255),b
  3673                           
  3674                           ; BSR set to: 0
  3675  0009E6  D000               	goto	l3230
  3676  0009E8                     l3230:
  3677                           
  3678                           ; BSR set to: 0
  3679  0009E8  0100               	movlb	0	; () banked
  3680  0009EA  4BCC               	infsnz	drawtext@i& (0+255),f,b
  3681  0009EC  2BCD               	incf	(drawtext@i+1)& (0+255),f,b
  3682  0009EE  D000               	goto	l3232
  3683  0009F0                     l3232:
  3684                           
  3685                           ; BSR set to: 0
  3686  0009F0  0100               	movlb	0	; () banked
  3687  0009F2  51CA               	movf	drawtext@textsize& (0+255),w,b
  3688  0009F4  0100               	movlb	0	; () banked
  3689  0009F6  5DCC               	subwf	drawtext@i& (0+255),w,b
  3690  0009F8  0100               	movlb	0	; () banked
  3691  0009FA  51CB               	movf	(drawtext@textsize+1)& (0+255),w,b
  3692  0009FC  0100               	movlb	0	; () banked
  3693  0009FE  59CD               	subwfb	(drawtext@i+1)& (0+255),w,b
  3694  000A00  A0D8               	btfss	status,0,c
  3695  000A02  D792               	goto	l3206
  3696                           
  3697                           ; BSR set to: 0
  3698                           
  3699                           ; BSR set to: 0
  3700  000A04  0012               	return		;funcret
  3701  000A06                     __end_of_drawtext:
  3702                           	opt stack 0
  3703                           tblptru	equ	0xFF8
  3704                           tblptrh	equ	0xFF7
  3705                           tblptrl	equ	0xFF6
  3706                           tablat	equ	0xFF5
  3707                           prodh	equ	0xFF4
  3708                           prodl	equ	0xFF3
  3709                           intcon	equ	0xFF2
  3710                           intcon2	equ	0xFF1
  3711                           postinc0	equ	0xFEE
  3712                           wreg	equ	0xFE8
  3713                           postdec1	equ	0xFE5
  3714                           fsr1l	equ	0xFE1
  3715                           indf2	equ	0xFDF
  3716                           postinc2	equ	0xFDE
  3717                           postdec2	equ	0xFDD
  3718                           fsr2h	equ	0xFDA
  3719                           fsr2l	equ	0xFD9
  3720                           status	equ	0xFD8
  3721                           
  3722 ;; *************** function _strlen *****************
  3723 ;; Defined at:
  3724 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  3725 ;; Parameters:    Size  Location     Type
  3726 ;;  s               2   16[COMRAM] PTR const unsigned char 
  3727 ;;		 -> NULL(0), buffer(31), txt1(84), 
  3728 ;; Auto vars:     Size  Location     Type
  3729 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  3730 ;;		 -> NULL(0), buffer(31), txt1(84), 
  3731 ;; Return value:  Size  Location     Type
  3732 ;;                  2   16[COMRAM] unsigned int 
  3733 ;; Registers used:
  3734 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3735 ;; Tracked objects:
  3736 ;;		On entry : 0/0
  3737 ;;		On exit  : 0/0
  3738 ;;		Unchanged: 0/0
  3739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3740 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3741 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3742 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3743 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3744 ;;Total ram usage:        6 bytes
  3745 ;; Hardware stack levels used:    1
  3746 ;; Hardware stack levels required when called:    3
  3747 ;; This function calls:
  3748 ;;		Nothing
  3749 ;; This function is called by:
  3750 ;;		_drawtext
  3751 ;; This function uses a non-reentrant model
  3752 ;;
  3753                           
  3754                           	psect	text14
  3755  001044                     __ptext14:
  3756                           	opt stack 0
  3757  001044                     _strlen:
  3758                           	opt stack 26
  3759                           
  3760                           ; BSR set to: 0
  3761                           ;incstack = 0
  3762  001044  C011  F015         	movff	strlen@s,strlen@cp
  3763  001048  C012  F016         	movff	strlen@s+1,strlen@cp+1
  3764  00104C  D003               	goto	l3146
  3765  00104E                     l3144:
  3766  00104E  4A15               	infsnz	strlen@cp,f,c
  3767  001050  2A16               	incf	strlen@cp+1,f,c
  3768  001052  D000               	goto	l3146
  3769  001054                     l3146:
  3770  001054  C015  FFD9         	movff	strlen@cp,fsr2l
  3771  001058  C016  FFDA         	movff	strlen@cp+1,fsr2h
  3772  00105C  50DF               	movf	indf2,w,c
  3773  00105E  A4D8               	btfss	status,2,c
  3774  001060  D7F6               	goto	l3144
  3775  001062  C011  F013         	movff	strlen@s,??_strlen
  3776  001066  C012  F014         	movff	strlen@s+1,??_strlen+1
  3777  00106A  1E13               	comf	??_strlen,f,c
  3778  00106C  1E14               	comf	??_strlen+1,f,c
  3779  00106E  4A13               	infsnz	??_strlen,f,c
  3780  001070  2A14               	incf	??_strlen+1,f,c
  3781  001072  5015               	movf	strlen@cp,w,c
  3782  001074  2413               	addwf	??_strlen,w,c
  3783  001076  6E11               	movwf	?_strlen,c
  3784  001078  5016               	movf	strlen@cp+1,w,c
  3785  00107A  2014               	addwfc	??_strlen+1,w,c
  3786  00107C  6E12               	movwf	?_strlen+1,c
  3787  00107E  D000               	goto	l972
  3788  001080                     l972:
  3789  001080  0012               	return		;funcret
  3790  001082                     __end_of_strlen:
  3791                           	opt stack 0
  3792                           tblptru	equ	0xFF8
  3793                           tblptrh	equ	0xFF7
  3794                           tblptrl	equ	0xFF6
  3795                           tablat	equ	0xFF5
  3796                           prodh	equ	0xFF4
  3797                           prodl	equ	0xFF3
  3798                           intcon	equ	0xFF2
  3799                           intcon2	equ	0xFF1
  3800                           postinc0	equ	0xFEE
  3801                           wreg	equ	0xFE8
  3802                           postdec1	equ	0xFE5
  3803                           fsr1l	equ	0xFE1
  3804                           indf2	equ	0xFDF
  3805                           postinc2	equ	0xFDE
  3806                           postdec2	equ	0xFDD
  3807                           fsr2h	equ	0xFDA
  3808                           fsr2l	equ	0xFD9
  3809                           status	equ	0xFD8
  3810                           
  3811 ;; *************** function _drawChar *****************
  3812 ;; Defined at:
  3813 ;;		line 447 in file "ST7735_TFT.c"
  3814 ;; Parameters:    Size  Location     Type
  3815 ;;  x               1    wreg     unsigned char 
  3816 ;;  y               1   45[COMRAM] unsigned char 
  3817 ;;  c               1   46[COMRAM] unsigned char 
  3818 ;;  color           2   47[COMRAM] unsigned int 
  3819 ;;  bg              2   49[COMRAM] unsigned int 
  3820 ;;  size            1   51[COMRAM] unsigned char 
  3821 ;; Auto vars:     Size  Location     Type
  3822 ;;  x               1   53[COMRAM] unsigned char 
  3823 ;;  line            1   52[COMRAM] unsigned char 
  3824 ;;  i               1   55[COMRAM] unsigned char 
  3825 ;;  j               1   54[COMRAM] unsigned char 
  3826 ;; Return value:  Size  Location     Type
  3827 ;;		None               void
  3828 ;; Registers used:
  3829 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3830 ;; Tracked objects:
  3831 ;;		On entry : 0/0
  3832 ;;		On exit  : 0/0
  3833 ;;		Unchanged: 0/0
  3834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3835 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3836 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3838 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3839 ;;Total ram usage:       11 bytes
  3840 ;; Hardware stack levels used:    1
  3841 ;; Hardware stack levels required when called:    8
  3842 ;; This function calls:
  3843 ;;		___wmul
  3844 ;;		_drawPixel
  3845 ;;		_fillRect
  3846 ;; This function is called by:
  3847 ;;		_drawtext
  3848 ;; This function uses a non-reentrant model
  3849 ;;
  3850                           
  3851                           	psect	text15
  3852  00032A                     __ptext15:
  3853                           	opt stack 0
  3854  00032A                     _drawChar:
  3855                           	opt stack 21
  3856                           
  3857                           ;incstack = 0
  3858                           ;drawChar@x stored from wreg
  3859  00032A  6E36               	movwf	drawChar@x,c
  3860                           
  3861                           ;ST7735_TFT.c: 449: char i, j;
  3862                           ;ST7735_TFT.c: 450: if((x >= 128) || (y >= 160))
  3863  00032C  0E80               	movlw	128
  3864  00032E  6036               	cpfslt	drawChar@x,c
  3865  000330  D0A6               	goto	l111
  3866  000332  0E9F               	movlw	159
  3867  000334  642E               	cpfsgt	drawChar@y,c
  3868  000336  D001               	goto	l3092
  3869                           
  3870                           ;ST7735_TFT.c: 451: return;
  3871  000338  D0A2               	goto	l111
  3872  00033A                     l3092:
  3873                           
  3874                           ;ST7735_TFT.c: 452: if(size < 1) size = 1;
  3875  00033A  5034               	movf	drawChar@size,w,c
  3876  00033C  A4D8               	btfss	status,2,c
  3877  00033E  D003               	goto	l3096
  3878  000340  0E01               	movlw	1
  3879  000342  6E34               	movwf	drawChar@size,c
  3880  000344  D000               	goto	l3096
  3881  000346                     l3096:
  3882                           
  3883                           ;ST7735_TFT.c: 453: if((c < ' ') || (c > '~'))
  3884  000346  0E1F               	movlw	31
  3885  000348  642F               	cpfsgt	drawChar@c,c
  3886  00034A  D004               	goto	l3100
  3887  00034C  0E7E               	movlw	126
  3888  00034E  642F               	cpfsgt	drawChar@c,c
  3889  000350  D003               	goto	l113
  3890  000352  D000               	goto	l3100
  3891  000354                     l3100:
  3892                           
  3893                           ;ST7735_TFT.c: 454: c = '?';
  3894  000354  0E3F               	movlw	63
  3895  000356  6E2F               	movwf	drawChar@c,c
  3896  000358                     l113:
  3897                           
  3898                           ;ST7735_TFT.c: 455: for(i=0; i<5; i++ ) {
  3899  000358  0E00               	movlw	0
  3900  00035A  6E38               	movwf	drawChar@i,c
  3901  00035C                     l3102:
  3902  00035C  0E04               	movlw	4
  3903  00035E  6438               	cpfsgt	drawChar@i,c
  3904  000360  D001               	goto	l3106
  3905  000362  D08D               	goto	l111
  3906  000364                     l3106:
  3907                           
  3908                           ;ST7735_TFT.c: 456: unsigned char line;
  3909                           ;ST7735_TFT.c: 457: if(c < 'S')
  3910  000364  0E53               	movlw	83
  3911  000366  602F               	cpfslt	drawChar@c,c
  3912  000368  D015               	goto	l3110
  3913                           
  3914                           ;ST7735_TFT.c: 458: line = font[(c - 32)*5 + i];
  3915  00036A  0EE0               	movlw	224
  3916  00036C  242F               	addwf	drawChar@c,w,c
  3917  00036E  6E11               	movwf	___wmul@multiplier,c
  3918  000370  6A12               	clrf	___wmul@multiplier+1,c
  3919  000372  0EFF               	movlw	255
  3920  000374  2212               	addwfc	___wmul@multiplier+1,f,c
  3921  000376  0E00               	movlw	0
  3922  000378  6E14               	movwf	___wmul@multiplicand+1,c
  3923  00037A  0E05               	movlw	5
  3924  00037C  6E13               	movwf	___wmul@multiplicand,c
  3925  00037E  ECBB  F008         	call	___wmul	;wreg free
  3926  000382  5038               	movf	drawChar@i,w,c
  3927  000384  2611               	addwf	?___wmul,f,c
  3928  000386  0E00               	movlw	0
  3929  000388  2212               	addwfc	?___wmul+1,f,c
  3930  00038A  0ED9               	movlw	low _font
  3931  00038C  2411               	addwf	?___wmul,w,c
  3932  00038E  6EF6               	movwf	tblptrl,c
  3933  000390  0EFD               	movlw	high _font
  3934  000392  D014               	goto	L1
  3935  000394                     l3110:
  3936                           
  3937                           ;ST7735_TFT.c: 459: else
  3938                           ;ST7735_TFT.c: 460: line = font2[(c - 'S')*5 + i];
  3939  000394  0EAD               	movlw	173
  3940  000396  242F               	addwf	drawChar@c,w,c
  3941  000398  6E11               	movwf	___wmul@multiplier,c
  3942  00039A  6A12               	clrf	___wmul@multiplier+1,c
  3943  00039C  0EFF               	movlw	255
  3944  00039E  2212               	addwfc	___wmul@multiplier+1,f,c
  3945  0003A0  0E00               	movlw	0
  3946  0003A2  6E14               	movwf	___wmul@multiplicand+1,c
  3947  0003A4  0E05               	movlw	5
  3948  0003A6  6E13               	movwf	___wmul@multiplicand,c
  3949  0003A8  ECBB  F008         	call	___wmul	;wreg free
  3950  0003AC  5038               	movf	drawChar@i,w,c
  3951  0003AE  2611               	addwf	?___wmul,f,c
  3952  0003B0  0E00               	movlw	0
  3953  0003B2  2212               	addwfc	?___wmul+1,f,c
  3954  0003B4  0ED8               	movlw	low _font2
  3955  0003B6  2411               	addwf	?___wmul,w,c
  3956  0003B8  6EF6               	movwf	tblptrl,c
  3957  0003BA  0EFE               	movlw	high _font2
  3958  0003BC                     L1:
  3959  0003BC  2012               	addwfc	?___wmul+1,w,c
  3960  0003BE  6EF7               	movwf	tblptrh,c
  3961  0003C0                     	if	0	;There are less than 3 active tblptr bytes
  3962  0003C0                     	endif
  3963  0003C0  0008               	tblrd		*
  3964  0003C2  CFF5 F035          	movff	tablat,drawChar@line
  3965  0003C6  D000               	goto	l3112
  3966  0003C8                     l3112:
  3967                           
  3968                           ;ST7735_TFT.c: 461: for(j=0; j<7; j++, line >>= 1) {
  3969  0003C8  0E00               	movlw	0
  3970  0003CA  6E37               	movwf	drawChar@j,c
  3971  0003CC                     l3114:
  3972  0003CC  0E06               	movlw	6
  3973  0003CE  6437               	cpfsgt	drawChar@j,c
  3974  0003D0  D001               	goto	l120
  3975  0003D2  D053               	goto	l3138
  3976  0003D4                     l120:
  3977                           
  3978                           ;ST7735_TFT.c: 462: if(line & 0x01) {
  3979  0003D4  A035               	btfss	drawChar@line,0,c
  3980  0003D6  D023               	goto	l3124
  3981                           
  3982                           ;ST7735_TFT.c: 463: if(size == 1) drawPixel(x+i, y+j, color);
  3983  0003D8  0434               	decf	drawChar@size,w,c
  3984  0003DA  A4D8               	btfss	status,2,c
  3985  0003DC  D00C               	goto	l3122
  3986  0003DE  502E               	movf	drawChar@y,w,c
  3987  0003E0  2437               	addwf	drawChar@j,w,c
  3988  0003E2  6E18               	movwf	drawPixel@y,c
  3989  0003E4  C030  F019         	movff	drawChar@color,drawPixel@color
  3990  0003E8  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  3991  0003EC  5036               	movf	drawChar@x,w,c
  3992  0003EE  2438               	addwf	drawChar@i,w,c
  3993  0003F0  EC79  F008         	call	_drawPixel
  3994  0003F4  D03E               	goto	l3132
  3995  0003F6                     l3122:
  3996                           
  3997                           ;ST7735_TFT.c: 464: else fillRect(x+(i*size), y+(j*size), size, size, color);
  3998  0003F6  5037               	movf	drawChar@j,w,c
  3999  0003F8  0234               	mulwf	drawChar@size,c
  4000  0003FA  50F3               	movf	prodl,w,c
  4001  0003FC  242E               	addwf	drawChar@y,w,c
  4002  0003FE  6E23               	movwf	fillRect@y,c
  4003  000400  C034  F024         	movff	drawChar@size,fillRect@w
  4004  000404  C034  F025         	movff	drawChar@size,fillRect@h
  4005  000408  C030  F026         	movff	drawChar@color,fillRect@color
  4006  00040C  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  4007  000410  5038               	movf	drawChar@i,w,c
  4008  000412  0234               	mulwf	drawChar@size,c
  4009  000414  50F3               	movf	prodl,w,c
  4010  000416  2436               	addwf	drawChar@x,w,c
  4011  000418  ECFD  F007         	call	_fillRect
  4012                           
  4013                           ;ST7735_TFT.c: 465: }
  4014  00041C  D02A               	goto	l3132
  4015  00041E                     l3124:
  4016                           
  4017                           ;ST7735_TFT.c: 466: else if(bg != color) {
  4018  00041E  5030               	movf	drawChar@color,w,c
  4019  000420  1832               	xorwf	drawChar@bg,w,c
  4020  000422  E104               	bnz	u2030
  4021  000424  5031               	movf	drawChar@color+1,w,c
  4022  000426  1833               	xorwf	drawChar@bg+1,w,c
  4023  000428  B4D8               	btfsc	status,2,c
  4024  00042A  D023               	goto	l3132
  4025  00042C                     u2030:
  4026                           
  4027                           ;ST7735_TFT.c: 467: if(size == 1) drawPixel(x+i, y+j, bg);
  4028  00042C  0434               	decf	drawChar@size,w,c
  4029  00042E  A4D8               	btfss	status,2,c
  4030  000430  D00C               	goto	l3130
  4031  000432  502E               	movf	drawChar@y,w,c
  4032  000434  2437               	addwf	drawChar@j,w,c
  4033  000436  6E18               	movwf	drawPixel@y,c
  4034  000438  C032  F019         	movff	drawChar@bg,drawPixel@color
  4035  00043C  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  4036  000440  5036               	movf	drawChar@x,w,c
  4037  000442  2438               	addwf	drawChar@i,w,c
  4038  000444  EC79  F008         	call	_drawPixel
  4039  000448  D014               	goto	l3132
  4040  00044A                     l3130:
  4041                           
  4042                           ;ST7735_TFT.c: 468: else fillRect(x+i*size, y+j*size, size, size, bg);
  4043  00044A  5037               	movf	drawChar@j,w,c
  4044  00044C  0234               	mulwf	drawChar@size,c
  4045  00044E  50F3               	movf	prodl,w,c
  4046  000450  242E               	addwf	drawChar@y,w,c
  4047  000452  6E23               	movwf	fillRect@y,c
  4048  000454  C034  F024         	movff	drawChar@size,fillRect@w
  4049  000458  C034  F025         	movff	drawChar@size,fillRect@h
  4050  00045C  C032  F026         	movff	drawChar@bg,fillRect@color
  4051  000460  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  4052  000464  5038               	movf	drawChar@i,w,c
  4053  000466  0234               	mulwf	drawChar@size,c
  4054  000468  50F3               	movf	prodl,w,c
  4055  00046A  2436               	addwf	drawChar@x,w,c
  4056  00046C  ECFD  F007         	call	_fillRect
  4057  000470  D000               	goto	l3132
  4058  000472                     l3132:
  4059  000472  2A37               	incf	drawChar@j,f,c
  4060  000474  90D8               	bcf	status,0,c
  4061  000476  3235               	rrcf	drawChar@line,f,c
  4062  000478  D7A9               	goto	l3114
  4063  00047A                     l3138:
  4064  00047A  2A38               	incf	drawChar@i,f,c
  4065  00047C  D76F               	goto	l3102
  4066  00047E                     l111:
  4067  00047E  0012               	return		;funcret
  4068  000480                     __end_of_drawChar:
  4069                           	opt stack 0
  4070                           tblptru	equ	0xFF8
  4071                           tblptrh	equ	0xFF7
  4072                           tblptrl	equ	0xFF6
  4073                           tablat	equ	0xFF5
  4074                           prodh	equ	0xFF4
  4075                           prodl	equ	0xFF3
  4076                           intcon	equ	0xFF2
  4077                           intcon2	equ	0xFF1
  4078                           postinc0	equ	0xFEE
  4079                           wreg	equ	0xFE8
  4080                           postdec1	equ	0xFE5
  4081                           fsr1l	equ	0xFE1
  4082                           indf2	equ	0xFDF
  4083                           postinc2	equ	0xFDE
  4084                           postdec2	equ	0xFDD
  4085                           fsr2h	equ	0xFDA
  4086                           fsr2l	equ	0xFD9
  4087                           status	equ	0xFD8
  4088                           
  4089 ;; *************** function _fillRect *****************
  4090 ;; Defined at:
  4091 ;;		line 437 in file "ST7735_TFT.c"
  4092 ;; Parameters:    Size  Location     Type
  4093 ;;  x               1    wreg     unsigned char 
  4094 ;;  y               1   34[COMRAM] unsigned char 
  4095 ;;  w               1   35[COMRAM] unsigned char 
  4096 ;;  h               1   36[COMRAM] unsigned char 
  4097 ;;  color           2   37[COMRAM] unsigned int 
  4098 ;; Auto vars:     Size  Location     Type
  4099 ;;  x               1   42[COMRAM] unsigned char 
  4100 ;;  i               2   43[COMRAM] int 
  4101 ;; Return value:  Size  Location     Type
  4102 ;;		None               void
  4103 ;; Registers used:
  4104 ;;		wreg, status,2, status,0, cstack
  4105 ;; Tracked objects:
  4106 ;;		On entry : 0/0
  4107 ;;		On exit  : 0/0
  4108 ;;		Unchanged: 0/0
  4109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4110 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4111 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4112 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4113 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4114 ;;Total ram usage:       11 bytes
  4115 ;; Hardware stack levels used:    1
  4116 ;; Hardware stack levels required when called:    7
  4117 ;; This function calls:
  4118 ;;		_drawFastVLine
  4119 ;; This function is called by:
  4120 ;;		_drawChar
  4121 ;; This function uses a non-reentrant model
  4122 ;;
  4123                           
  4124                           	psect	text16
  4125  000FFA                     __ptext16:
  4126                           	opt stack 0
  4127  000FFA                     _fillRect:
  4128                           	opt stack 21
  4129                           
  4130                           ;incstack = 0
  4131                           ;fillRect@x stored from wreg
  4132  000FFA  6E2B               	movwf	fillRect@x,c
  4133                           
  4134                           ;ST7735_TFT.c: 439: signed int i;
  4135                           ;ST7735_TFT.c: 441: for (i = x; i < x + w; i++)
  4136  000FFC  C02B  F02C         	movff	fillRect@x,fillRect@i
  4137  001000  6A2D               	clrf	fillRect@i+1,c
  4138  001002  D00E               	goto	l2994
  4139  001004                     l2990:
  4140                           
  4141                           ;ST7735_TFT.c: 442: {
  4142                           ;ST7735_TFT.c: 443: drawFastVLine(i, y, h, color);
  4143  001004  C023  F018         	movff	fillRect@y,drawFastVLine@y
  4144  001008  C025  F019         	movff	fillRect@h,drawFastVLine@h
  4145  00100C  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  4146  001010  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  4147  001014  502C               	movf	fillRect@i,w,c
  4148  001016  EC31  F006         	call	_drawFastVLine
  4149  00101A  4A2C               	infsnz	fillRect@i,f,c
  4150  00101C  2A2D               	incf	fillRect@i+1,f,c
  4151  00101E  D000               	goto	l2994
  4152  001020                     l2994:
  4153  001020  5024               	movf	fillRect@w,w,c
  4154  001022  C02B  F028         	movff	fillRect@x,??_fillRect
  4155  001026  6A29               	clrf	(??_fillRect+1)& (0+255),c
  4156  001028  2628               	addwf	??_fillRect,f,c
  4157  00102A  0E00               	movlw	0
  4158  00102C  2229               	addwfc	??_fillRect+1,f,c
  4159  00102E  5028               	movf	??_fillRect,w,c
  4160  001030  5C2C               	subwf	fillRect@i,w,c
  4161  001032  502D               	movf	fillRect@i+1,w,c
  4162  001034  0A80               	xorlw	128
  4163  001036  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  4164  001038  5029               	movf	??_fillRect+1,w,c
  4165  00103A  0A80               	xorlw	128
  4166  00103C  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  4167  00103E  A0D8               	btfss	status,0,c
  4168  001040  D7E1               	goto	l2990
  4169  001042  0012               	return		;funcret
  4170  001044                     __end_of_fillRect:
  4171                           	opt stack 0
  4172                           tblptru	equ	0xFF8
  4173                           tblptrh	equ	0xFF7
  4174                           tblptrl	equ	0xFF6
  4175                           tablat	equ	0xFF5
  4176                           prodh	equ	0xFF4
  4177                           prodl	equ	0xFF3
  4178                           intcon	equ	0xFF2
  4179                           intcon2	equ	0xFF1
  4180                           postinc0	equ	0xFEE
  4181                           wreg	equ	0xFE8
  4182                           postdec1	equ	0xFE5
  4183                           fsr1l	equ	0xFE1
  4184                           indf2	equ	0xFDF
  4185                           postinc2	equ	0xFDE
  4186                           postdec2	equ	0xFDD
  4187                           fsr2h	equ	0xFDA
  4188                           fsr2l	equ	0xFD9
  4189                           status	equ	0xFD8
  4190                           
  4191 ;; *************** function _drawFastVLine *****************
  4192 ;; Defined at:
  4193 ;;		line 416 in file "ST7735_TFT.c"
  4194 ;; Parameters:    Size  Location     Type
  4195 ;;  x               1    wreg     unsigned char 
  4196 ;;  y               1   23[COMRAM] unsigned char 
  4197 ;;  h               1   24[COMRAM] unsigned char 
  4198 ;;  color           2   25[COMRAM] unsigned int 
  4199 ;; Auto vars:     Size  Location     Type
  4200 ;;  x               1   33[COMRAM] unsigned char 
  4201 ;;  lo              1   32[COMRAM] unsigned char 
  4202 ;;  hi              1   31[COMRAM] unsigned char 
  4203 ;; Return value:  Size  Location     Type
  4204 ;;		None               void
  4205 ;; Registers used:
  4206 ;;		wreg, status,2, status,0, cstack
  4207 ;; Tracked objects:
  4208 ;;		On entry : 0/0
  4209 ;;		On exit  : 0/0
  4210 ;;		Unchanged: 0/0
  4211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4212 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4213 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4214 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4215 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4216 ;;Total ram usage:       11 bytes
  4217 ;; Hardware stack levels used:    1
  4218 ;; Hardware stack levels required when called:    6
  4219 ;; This function calls:
  4220 ;;		_setAddrWindow
  4221 ;;		_spiwrite
  4222 ;; This function is called by:
  4223 ;;		_fillRect
  4224 ;;		_fillCircleHelper
  4225 ;;		_fillCircle
  4226 ;;		_drawRect
  4227 ;; This function uses a non-reentrant model
  4228 ;;
  4229                           
  4230                           	psect	text17
  4231  000C62                     __ptext17:
  4232                           	opt stack 0
  4233  000C62                     _drawFastVLine:
  4234                           	opt stack 22
  4235                           
  4236                           ;incstack = 0
  4237                           ;drawFastVLine@x stored from wreg
  4238  000C62  6E22               	movwf	drawFastVLine@x,c
  4239                           
  4240                           ;ST7735_TFT.c: 418: unsigned char hi, lo;
  4241                           ;ST7735_TFT.c: 419: if((x >= 128) || (y >= 160))
  4242  000C64  0E80               	movlw	128
  4243  000C66  6022               	cpfslt	drawFastVLine@x,c
  4244  000C68  D03F               	goto	l95
  4245  000C6A  0E9F               	movlw	159
  4246  000C6C  6418               	cpfsgt	drawFastVLine@y,c
  4247  000C6E  D001               	goto	l2940
  4248                           
  4249                           ;ST7735_TFT.c: 420: return;
  4250  000C70  D03B               	goto	l95
  4251  000C72                     l2940:
  4252                           
  4253                           ;ST7735_TFT.c: 421: if((y + h - 1) >= 160)
  4254  000C72  0EFF               	movlw	255
  4255  000C74  6E1C               	movwf	??_drawFastVLine& (0+255),c
  4256  000C76  0EFF               	movlw	255
  4257  000C78  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  4258  000C7A  5019               	movf	drawFastVLine@h,w,c
  4259  000C7C  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  4260  000C80  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  4261  000C82  261E               	addwf	??_drawFastVLine+2,f,c
  4262  000C84  0E00               	movlw	0
  4263  000C86  221F               	addwfc	??_drawFastVLine+3,f,c
  4264  000C88  501C               	movf	??_drawFastVLine,w,c
  4265  000C8A  261E               	addwf	??_drawFastVLine+2,f,c
  4266  000C8C  501D               	movf	??_drawFastVLine+1,w,c
  4267  000C8E  221F               	addwfc	??_drawFastVLine+3,f,c
  4268  000C90  BE1F               	btfsc	??_drawFastVLine+3,7,c
  4269  000C92  D00B               	goto	l2944
  4270  000C94  501F               	movf	??_drawFastVLine+3,w,c
  4271  000C96  E104               	bnz	u1870
  4272  000C98  0EA0               	movlw	160
  4273  000C9A  5C1E               	subwf	??_drawFastVLine+2,w,c
  4274  000C9C  A0D8               	btfss	status,0,c
  4275  000C9E  D005               	goto	l2944
  4276  000CA0                     u1870:
  4277                           
  4278                           ;ST7735_TFT.c: 422: h = 160 - y;
  4279  000CA0  5018               	movf	drawFastVLine@y,w,c
  4280  000CA2  0800               	sublw	0
  4281  000CA4  0FA0               	addlw	160
  4282  000CA6  6E19               	movwf	drawFastVLine@h,c
  4283  000CA8  D000               	goto	l2944
  4284  000CAA                     l2944:
  4285                           
  4286                           ;ST7735_TFT.c: 423: hi = color >> 8; lo = color;
  4287  000CAA  501B               	movf	drawFastVLine@color+1,w,c
  4288  000CAC  6E20               	movwf	drawFastVLine@hi,c
  4289  000CAE  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  4290                           
  4291                           ;ST7735_TFT.c: 424: setAddrWindow(x, y, x, y + h - 1);
  4292  000CB2  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  4293  000CB6  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  4294  000CBA  5018               	movf	drawFastVLine@y,w,c
  4295  000CBC  2419               	addwf	drawFastVLine@h,w,c
  4296  000CBE  6E1C               	movwf	??_drawFastVLine& (0+255),c
  4297  000CC0  041C               	decf	??_drawFastVLine,w,c
  4298  000CC2  6E16               	movwf	setAddrWindow@y1,c
  4299  000CC4  5022               	movf	drawFastVLine@x,w,c
  4300  000CC6  ECD6  F007         	call	_setAddrWindow
  4301                           
  4302                           ;ST7735_TFT.c: 425: PORTCbits.RC0 = 1;
  4303  000CCA  8082               	bsf	3970,0,c	;volatile
  4304                           
  4305                           ;ST7735_TFT.c: 426: PORTCbits.RC1 = 0;
  4306  000CCC  9282               	bcf	3970,1,c	;volatile
  4307                           
  4308                           ;ST7735_TFT.c: 428: while (h--) {
  4309  000CCE  D007               	goto	l2956
  4310  000CD0                     l2954:
  4311                           
  4312                           ;ST7735_TFT.c: 429: spiwrite(hi);
  4313  000CD0  5020               	movf	drawFastVLine@hi,w,c
  4314  000CD2  ECE8  F008         	call	_spiwrite
  4315                           
  4316                           ;ST7735_TFT.c: 430: spiwrite(lo);
  4317  000CD6  5021               	movf	drawFastVLine@lo,w,c
  4318  000CD8  ECE8  F008         	call	_spiwrite
  4319  000CDC  D000               	goto	l2956
  4320  000CDE                     l2956:
  4321  000CDE  0619               	decf	drawFastVLine@h,f,c
  4322  000CE0  2819               	incf	drawFastVLine@h,w,c
  4323  000CE2  A4D8               	btfss	status,2,c
  4324  000CE4  D7F5               	goto	l2954
  4325                           
  4326                           ;ST7735_TFT.c: 431: }
  4327                           ;ST7735_TFT.c: 432: PORTCbits.RC1 = 1;
  4328  000CE6  8282               	bsf	3970,1,c	;volatile
  4329  000CE8                     l95:
  4330  000CE8  0012               	return		;funcret
  4331  000CEA                     __end_of_drawFastVLine:
  4332                           	opt stack 0
  4333                           tblptru	equ	0xFF8
  4334                           tblptrh	equ	0xFF7
  4335                           tblptrl	equ	0xFF6
  4336                           tablat	equ	0xFF5
  4337                           prodh	equ	0xFF4
  4338                           prodl	equ	0xFF3
  4339                           intcon	equ	0xFF2
  4340                           intcon2	equ	0xFF1
  4341                           postinc0	equ	0xFEE
  4342                           wreg	equ	0xFE8
  4343                           postdec1	equ	0xFE5
  4344                           fsr1l	equ	0xFE1
  4345                           indf2	equ	0xFDF
  4346                           postinc2	equ	0xFDE
  4347                           postdec2	equ	0xFDD
  4348                           fsr2h	equ	0xFDA
  4349                           fsr2l	equ	0xFD9
  4350                           status	equ	0xFD8
  4351                           
  4352 ;; *************** function _drawPixel *****************
  4353 ;; Defined at:
  4354 ;;		line 407 in file "ST7735_TFT.c"
  4355 ;; Parameters:    Size  Location     Type
  4356 ;;  x               1    wreg     unsigned char 
  4357 ;;  y               1   23[COMRAM] unsigned char 
  4358 ;;  color           2   24[COMRAM] unsigned int 
  4359 ;; Auto vars:     Size  Location     Type
  4360 ;;  x               1   26[COMRAM] unsigned char 
  4361 ;; Return value:  Size  Location     Type
  4362 ;;		None               void
  4363 ;; Registers used:
  4364 ;;		wreg, status,2, status,0, cstack
  4365 ;; Tracked objects:
  4366 ;;		On entry : 0/0
  4367 ;;		On exit  : 0/0
  4368 ;;		Unchanged: 0/0
  4369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4370 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4371 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4373 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4374 ;;Total ram usage:        4 bytes
  4375 ;; Hardware stack levels used:    1
  4376 ;; Hardware stack levels required when called:    6
  4377 ;; This function calls:
  4378 ;;		_setAddrWindow
  4379 ;;		_write_data
  4380 ;; This function is called by:
  4381 ;;		_drawChar
  4382 ;;		_drawCircle
  4383 ;;		_drawCircleHelper
  4384 ;; This function uses a non-reentrant model
  4385 ;;
  4386                           
  4387                           	psect	text18
  4388  0010F2                     __ptext18:
  4389                           	opt stack 0
  4390  0010F2                     _drawPixel:
  4391                           	opt stack 22
  4392                           
  4393                           ;incstack = 0
  4394                           ;drawPixel@x stored from wreg
  4395  0010F2  6E1B               	movwf	drawPixel@x,c
  4396                           
  4397                           ;ST7735_TFT.c: 409: if((x >= 128) || (y >= 160))
  4398  0010F4  0E80               	movlw	128
  4399  0010F6  601B               	cpfslt	drawPixel@x,c
  4400  0010F8  D013               	goto	l89
  4401  0010FA  0E9F               	movlw	159
  4402  0010FC  6418               	cpfsgt	drawPixel@y,c
  4403  0010FE  D001               	goto	l2982
  4404                           
  4405                           ;ST7735_TFT.c: 410: return;
  4406  001100  D00F               	goto	l89
  4407  001102                     l2982:
  4408                           
  4409                           ;ST7735_TFT.c: 411: setAddrWindow(x,y,x+1,y+1);
  4410  001102  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  4411  001106  281B               	incf	drawPixel@x,w,c
  4412  001108  6E15               	movwf	setAddrWindow@x1,c
  4413  00110A  2818               	incf	drawPixel@y,w,c
  4414  00110C  6E16               	movwf	setAddrWindow@y1,c
  4415  00110E  501B               	movf	drawPixel@x,w,c
  4416  001110  ECD6  F007         	call	_setAddrWindow
  4417                           
  4418                           ;ST7735_TFT.c: 412: write_data(color >> 8);
  4419  001114  501A               	movf	drawPixel@color+1,w,c
  4420  001116  EC03  F009         	call	_write_data
  4421                           
  4422                           ;ST7735_TFT.c: 413: write_data(color & 0xFF);
  4423  00111A  5019               	movf	drawPixel@color,w,c
  4424  00111C  EC03  F009         	call	_write_data
  4425  001120                     l89:
  4426  001120  0012               	return		;funcret
  4427  001122                     __end_of_drawPixel:
  4428                           	opt stack 0
  4429                           tblptru	equ	0xFF8
  4430                           tblptrh	equ	0xFF7
  4431                           tblptrl	equ	0xFF6
  4432                           tablat	equ	0xFF5
  4433                           prodh	equ	0xFF4
  4434                           prodl	equ	0xFF3
  4435                           intcon	equ	0xFF2
  4436                           intcon2	equ	0xFF1
  4437                           postinc0	equ	0xFEE
  4438                           wreg	equ	0xFE8
  4439                           postdec1	equ	0xFE5
  4440                           fsr1l	equ	0xFE1
  4441                           indf2	equ	0xFDF
  4442                           postinc2	equ	0xFDE
  4443                           postdec2	equ	0xFDD
  4444                           fsr2h	equ	0xFDA
  4445                           fsr2l	equ	0xFD9
  4446                           status	equ	0xFD8
  4447                           
  4448 ;; *************** function _setAddrWindow *****************
  4449 ;; Defined at:
  4450 ;;		line 392 in file "ST7735_TFT.c"
  4451 ;; Parameters:    Size  Location     Type
  4452 ;;  x0              1    wreg     unsigned char 
  4453 ;;  y0              1   19[COMRAM] unsigned char 
  4454 ;;  x1              1   20[COMRAM] unsigned char 
  4455 ;;  y1              1   21[COMRAM] unsigned char 
  4456 ;; Auto vars:     Size  Location     Type
  4457 ;;  x0              1   22[COMRAM] unsigned char 
  4458 ;; Return value:  Size  Location     Type
  4459 ;;		None               void
  4460 ;; Registers used:
  4461 ;;		wreg, status,2, status,0, cstack
  4462 ;; Tracked objects:
  4463 ;;		On entry : 0/0
  4464 ;;		On exit  : 0/0
  4465 ;;		Unchanged: 0/0
  4466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4467 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4468 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4470 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4471 ;;Total ram usage:        4 bytes
  4472 ;; Hardware stack levels used:    1
  4473 ;; Hardware stack levels required when called:    5
  4474 ;; This function calls:
  4475 ;;		_write_command
  4476 ;;		_write_data
  4477 ;; This function is called by:
  4478 ;;		_drawPixel
  4479 ;;		_drawFastVLine
  4480 ;;		_fillRectangle
  4481 ;;		_drawFastHLine
  4482 ;; This function uses a non-reentrant model
  4483 ;;
  4484                           
  4485                           	psect	text19
  4486  000FAC                     __ptext19:
  4487                           	opt stack 0
  4488  000FAC                     _setAddrWindow:
  4489                           	opt stack 22
  4490                           
  4491                           ;incstack = 0
  4492                           ;setAddrWindow@x0 stored from wreg
  4493  000FAC  6E17               	movwf	setAddrWindow@x0,c
  4494                           
  4495                           ;ST7735_TFT.c: 394: write_command(0x2A);
  4496  000FAE  0E2A               	movlw	42
  4497  000FB0  EC0B  F009         	call	_write_command
  4498                           
  4499                           ;ST7735_TFT.c: 395: write_data(0);
  4500  000FB4  0E00               	movlw	0
  4501  000FB6  EC03  F009         	call	_write_data
  4502                           
  4503                           ;ST7735_TFT.c: 396: write_data(x0 + colstart);
  4504  000FBA  5017               	movf	setAddrWindow@x0,w,c
  4505  000FBC  246A               	addwf	_colstart,w,c
  4506  000FBE  EC03  F009         	call	_write_data
  4507                           
  4508                           ;ST7735_TFT.c: 397: write_data(0);
  4509  000FC2  0E00               	movlw	0
  4510  000FC4  EC03  F009         	call	_write_data
  4511                           
  4512                           ;ST7735_TFT.c: 398: write_data(x1 + colstart);
  4513  000FC8  5015               	movf	setAddrWindow@x1,w,c
  4514  000FCA  246A               	addwf	_colstart,w,c
  4515  000FCC  EC03  F009         	call	_write_data
  4516                           
  4517                           ;ST7735_TFT.c: 399: write_command(0x2B);
  4518  000FD0  0E2B               	movlw	43
  4519  000FD2  EC0B  F009         	call	_write_command
  4520                           
  4521                           ;ST7735_TFT.c: 400: write_data(0);
  4522  000FD6  0E00               	movlw	0
  4523  000FD8  EC03  F009         	call	_write_data
  4524                           
  4525                           ;ST7735_TFT.c: 401: write_data(y0 + rowstart);
  4526  000FDC  5014               	movf	setAddrWindow@y0,w,c
  4527  000FDE  246C               	addwf	_rowstart,w,c
  4528  000FE0  EC03  F009         	call	_write_data
  4529                           
  4530                           ;ST7735_TFT.c: 402: write_data(0);
  4531  000FE4  0E00               	movlw	0
  4532  000FE6  EC03  F009         	call	_write_data
  4533                           
  4534                           ;ST7735_TFT.c: 403: write_data(y1 + rowstart);
  4535  000FEA  5016               	movf	setAddrWindow@y1,w,c
  4536  000FEC  246C               	addwf	_rowstart,w,c
  4537  000FEE  EC03  F009         	call	_write_data
  4538                           
  4539                           ;ST7735_TFT.c: 404: write_command(0x2C);
  4540  000FF2  0E2C               	movlw	44
  4541  000FF4  EC0B  F009         	call	_write_command
  4542  000FF8  0012               	return		;funcret
  4543  000FFA                     __end_of_setAddrWindow:
  4544                           	opt stack 0
  4545                           tblptru	equ	0xFF8
  4546                           tblptrh	equ	0xFF7
  4547                           tblptrl	equ	0xFF6
  4548                           tablat	equ	0xFF5
  4549                           prodh	equ	0xFF4
  4550                           prodl	equ	0xFF3
  4551                           intcon	equ	0xFF2
  4552                           intcon2	equ	0xFF1
  4553                           postinc0	equ	0xFEE
  4554                           wreg	equ	0xFE8
  4555                           postdec1	equ	0xFE5
  4556                           fsr1l	equ	0xFE1
  4557                           indf2	equ	0xFDF
  4558                           postinc2	equ	0xFDE
  4559                           postdec2	equ	0xFDD
  4560                           fsr2h	equ	0xFDA
  4561                           fsr2l	equ	0xFD9
  4562                           status	equ	0xFD8
  4563                           
  4564 ;; *************** function _TFT_GreenTab_Initialize *****************
  4565 ;; Defined at:
  4566 ;;		line 644 in file "ST7735_TFT.c"
  4567 ;; Parameters:    Size  Location     Type
  4568 ;;		None
  4569 ;; Auto vars:     Size  Location     Type
  4570 ;;		None
  4571 ;; Return value:  Size  Location     Type
  4572 ;;		None               void
  4573 ;; Registers used:
  4574 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4575 ;; Tracked objects:
  4576 ;;		On entry : 0/0
  4577 ;;		On exit  : 0/0
  4578 ;;		Unchanged: 0/0
  4579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4583 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4584 ;;Total ram usage:        0 bytes
  4585 ;; Hardware stack levels used:    1
  4586 ;; Hardware stack levels required when called:    6
  4587 ;; This function calls:
  4588 ;;		_Rcmd1
  4589 ;;		_Rcmd2red
  4590 ;;		_Rcmd3
  4591 ;;		_write_command
  4592 ;;		_write_data
  4593 ;; This function is called by:
  4594 ;;		_Initialize_Screen
  4595 ;; This function uses a non-reentrant model
  4596 ;;
  4597                           
  4598                           	psect	text20
  4599  00114C                     __ptext20:
  4600                           	opt stack 0
  4601  00114C                     _TFT_GreenTab_Initialize:
  4602                           	opt stack 23
  4603                           
  4604                           ;ST7735_TFT.c: 646: PORTCbits.RC1 = 1;
  4605                           
  4606                           ;incstack = 0
  4607  00114C  8282               	bsf	3970,1,c	;volatile
  4608                           
  4609                           ;ST7735_TFT.c: 647: PORTCbits.RC0 = 0;
  4610  00114E  9082               	bcf	3970,0,c	;volatile
  4611                           
  4612                           ;ST7735_TFT.c: 649: SSPSTAT=0x80;
  4613  001150  0E80               	movlw	128
  4614  001152  6EC7               	movwf	4039,c	;volatile
  4615                           
  4616                           ;ST7735_TFT.c: 650: SSPCON1=0x30;
  4617  001154  0E30               	movlw	48
  4618  001156  6EC6               	movwf	4038,c	;volatile
  4619                           
  4620                           ;ST7735_TFT.c: 653: Rcmd1();
  4621  001158  ECF6  F003         	call	_Rcmd1	;wreg free
  4622                           
  4623                           ;ST7735_TFT.c: 654: Rcmd2red();
  4624  00115C  EC41  F008         	call	_Rcmd2red	;wreg free
  4625                           
  4626                           ;ST7735_TFT.c: 655: Rcmd3();
  4627  001160  EC03  F005         	call	_Rcmd3	;wreg free
  4628                           
  4629                           ;ST7735_TFT.c: 656: write_command(0x36);
  4630  001164  0E36               	movlw	54
  4631  001166  EC0B  F009         	call	_write_command
  4632                           
  4633                           ;ST7735_TFT.c: 657: write_data(0xC0);
  4634  00116A  0EC0               	movlw	192
  4635  00116C  EC03  F009         	call	_write_data
  4636                           
  4637                           ;ST7735_TFT.c: 658: _tft_type = 1;
  4638  001170  0E01               	movlw	1
  4639  001172  6E68               	movwf	__tft_type,c
  4640  001174  0012               	return		;funcret
  4641  001176                     __end_of_TFT_GreenTab_Initialize:
  4642                           	opt stack 0
  4643                           tblptru	equ	0xFF8
  4644                           tblptrh	equ	0xFF7
  4645                           tblptrl	equ	0xFF6
  4646                           tablat	equ	0xFF5
  4647                           prodh	equ	0xFF4
  4648                           prodl	equ	0xFF3
  4649                           intcon	equ	0xFF2
  4650                           intcon2	equ	0xFF1
  4651                           postinc0	equ	0xFEE
  4652                           wreg	equ	0xFE8
  4653                           postdec1	equ	0xFE5
  4654                           fsr1l	equ	0xFE1
  4655                           indf2	equ	0xFDF
  4656                           postinc2	equ	0xFDE
  4657                           postdec2	equ	0xFDD
  4658                           fsr2h	equ	0xFDA
  4659                           fsr2l	equ	0xFD9
  4660                           status	equ	0xFD8
  4661                           
  4662 ;; *************** function _Rcmd3 *****************
  4663 ;; Defined at:
  4664 ;;		line 338 in file "ST7735_TFT.c"
  4665 ;; Parameters:    Size  Location     Type
  4666 ;;		None
  4667 ;; Auto vars:     Size  Location     Type
  4668 ;;		None
  4669 ;; Return value:  Size  Location     Type
  4670 ;;		None               void
  4671 ;; Registers used:
  4672 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4673 ;; Tracked objects:
  4674 ;;		On entry : 0/0
  4675 ;;		On exit  : 0/0
  4676 ;;		Unchanged: 0/0
  4677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4682 ;;Total ram usage:        0 bytes
  4683 ;; Hardware stack levels used:    1
  4684 ;; Hardware stack levels required when called:    5
  4685 ;; This function calls:
  4686 ;;		_delay_ms
  4687 ;;		_write_command
  4688 ;;		_write_data
  4689 ;; This function is called by:
  4690 ;;		_TFT_GreenTab_Initialize
  4691 ;;		_TFT_BlackTab_Initialize
  4692 ;; This function uses a non-reentrant model
  4693 ;;
  4694                           
  4695                           	psect	text21
  4696  000A06                     __ptext21:
  4697                           	opt stack 0
  4698  000A06                     _Rcmd3:
  4699                           	opt stack 23
  4700                           
  4701                           ;ST7735_TFT.c: 340: write_command(0xE0);
  4702                           
  4703                           ;incstack = 0
  4704  000A06  0EE0               	movlw	224
  4705  000A08  EC0B  F009         	call	_write_command
  4706                           
  4707                           ;ST7735_TFT.c: 341: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  4708  000A0C  0E02               	movlw	2
  4709  000A0E  EC03  F009         	call	_write_data
  4710  000A12  0E1C               	movlw	28
  4711  000A14  EC03  F009         	call	_write_data
  4712  000A18  0E07               	movlw	7
  4713  000A1A  EC03  F009         	call	_write_data
  4714  000A1E  0E12               	movlw	18
  4715  000A20  EC03  F009         	call	_write_data
  4716                           
  4717                           ;ST7735_TFT.c: 342: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  4718  000A24  0E37               	movlw	55
  4719  000A26  EC03  F009         	call	_write_data
  4720  000A2A  0E32               	movlw	50
  4721  000A2C  EC03  F009         	call	_write_data
  4722  000A30  0E29               	movlw	41
  4723  000A32  EC03  F009         	call	_write_data
  4724  000A36  0E2D               	movlw	45
  4725  000A38  EC03  F009         	call	_write_data
  4726                           
  4727                           ;ST7735_TFT.c: 343: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  4728  000A3C  0E29               	movlw	41
  4729  000A3E  EC03  F009         	call	_write_data
  4730  000A42  0E25               	movlw	37
  4731  000A44  EC03  F009         	call	_write_data
  4732  000A48  0E2B               	movlw	43
  4733  000A4A  EC03  F009         	call	_write_data
  4734  000A4E  0E39               	movlw	57
  4735  000A50  EC03  F009         	call	_write_data
  4736                           
  4737                           ;ST7735_TFT.c: 344: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  4738  000A54  0E00               	movlw	0
  4739  000A56  EC03  F009         	call	_write_data
  4740  000A5A  0E01               	movlw	1
  4741  000A5C  EC03  F009         	call	_write_data
  4742  000A60  0E03               	movlw	3
  4743  000A62  EC03  F009         	call	_write_data
  4744  000A66  0E10               	movlw	16
  4745  000A68  EC03  F009         	call	_write_data
  4746                           
  4747                           ;ST7735_TFT.c: 345: write_command(0xE1);
  4748  000A6C  0EE1               	movlw	225
  4749  000A6E  EC0B  F009         	call	_write_command
  4750                           
  4751                           ;ST7735_TFT.c: 346: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  4752  000A72  0E03               	movlw	3
  4753  000A74  EC03  F009         	call	_write_data
  4754  000A78  0E1D               	movlw	29
  4755  000A7A  EC03  F009         	call	_write_data
  4756  000A7E  0E07               	movlw	7
  4757  000A80  EC03  F009         	call	_write_data
  4758  000A84  0E06               	movlw	6
  4759  000A86  EC03  F009         	call	_write_data
  4760                           
  4761                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  4762  000A8A  0E2E               	movlw	46
  4763  000A8C  EC03  F009         	call	_write_data
  4764  000A90  0E2C               	movlw	44
  4765  000A92  EC03  F009         	call	_write_data
  4766  000A96  0E29               	movlw	41
  4767  000A98  EC03  F009         	call	_write_data
  4768  000A9C  0E2D               	movlw	45
  4769  000A9E  EC03  F009         	call	_write_data
  4770                           
  4771                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  4772  000AA2  0E2E               	movlw	46
  4773  000AA4  EC03  F009         	call	_write_data
  4774  000AA8  0E2E               	movlw	46
  4775  000AAA  EC03  F009         	call	_write_data
  4776  000AAE  0E37               	movlw	55
  4777  000AB0  EC03  F009         	call	_write_data
  4778  000AB4  0E3F               	movlw	63
  4779  000AB6  EC03  F009         	call	_write_data
  4780                           
  4781                           ;ST7735_TFT.c: 349: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  4782  000ABA  0E00               	movlw	0
  4783  000ABC  EC03  F009         	call	_write_data
  4784  000AC0  0E00               	movlw	0
  4785  000AC2  EC03  F009         	call	_write_data
  4786  000AC6  0E02               	movlw	2
  4787  000AC8  EC03  F009         	call	_write_data
  4788  000ACC  0E10               	movlw	16
  4789  000ACE  EC03  F009         	call	_write_data
  4790                           
  4791                           ;ST7735_TFT.c: 350: write_command(0x13);
  4792  000AD2  0E13               	movlw	19
  4793  000AD4  EC0B  F009         	call	_write_command
  4794                           
  4795                           ;ST7735_TFT.c: 351: delay_ms(10);
  4796  000AD8  0E00               	movlw	0
  4797  000ADA  6E18               	movwf	delay_ms@ms+1,c
  4798  000ADC  0E0A               	movlw	10
  4799  000ADE  6E17               	movwf	delay_ms@ms,c
  4800  000AE0  ECAD  F007         	call	_delay_ms	;wreg free
  4801                           
  4802                           ;ST7735_TFT.c: 352: write_command(0x29);
  4803  000AE4  0E29               	movlw	41
  4804  000AE6  EC0B  F009         	call	_write_command
  4805                           
  4806                           ;ST7735_TFT.c: 353: delay_ms(100);
  4807  000AEA  0E00               	movlw	0
  4808  000AEC  6E18               	movwf	delay_ms@ms+1,c
  4809  000AEE  0E64               	movlw	100
  4810  000AF0  6E17               	movwf	delay_ms@ms,c
  4811  000AF2  ECAD  F007         	call	_delay_ms	;wreg free
  4812  000AF6  0012               	return		;funcret
  4813  000AF8                     __end_of_Rcmd3:
  4814                           	opt stack 0
  4815                           tblptru	equ	0xFF8
  4816                           tblptrh	equ	0xFF7
  4817                           tblptrl	equ	0xFF6
  4818                           tablat	equ	0xFF5
  4819                           prodh	equ	0xFF4
  4820                           prodl	equ	0xFF3
  4821                           intcon	equ	0xFF2
  4822                           intcon2	equ	0xFF1
  4823                           postinc0	equ	0xFEE
  4824                           wreg	equ	0xFE8
  4825                           postdec1	equ	0xFE5
  4826                           fsr1l	equ	0xFE1
  4827                           indf2	equ	0xFDF
  4828                           postinc2	equ	0xFDE
  4829                           postdec2	equ	0xFDD
  4830                           fsr2h	equ	0xFDA
  4831                           fsr2l	equ	0xFD9
  4832                           status	equ	0xFD8
  4833                           
  4834 ;; *************** function _Rcmd2red *****************
  4835 ;; Defined at:
  4836 ;;		line 328 in file "ST7735_TFT.c"
  4837 ;; Parameters:    Size  Location     Type
  4838 ;;		None
  4839 ;; Auto vars:     Size  Location     Type
  4840 ;;		None
  4841 ;; Return value:  Size  Location     Type
  4842 ;;		None               void
  4843 ;; Registers used:
  4844 ;;		wreg, status,2, cstack
  4845 ;; Tracked objects:
  4846 ;;		On entry : 0/0
  4847 ;;		On exit  : 0/0
  4848 ;;		Unchanged: 0/0
  4849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4854 ;;Total ram usage:        0 bytes
  4855 ;; Hardware stack levels used:    1
  4856 ;; Hardware stack levels required when called:    5
  4857 ;; This function calls:
  4858 ;;		_write_command
  4859 ;;		_write_data
  4860 ;; This function is called by:
  4861 ;;		_TFT_GreenTab_Initialize
  4862 ;; This function uses a non-reentrant model
  4863 ;;
  4864                           
  4865                           	psect	text22
  4866  001082                     __ptext22:
  4867                           	opt stack 0
  4868  001082                     _Rcmd2red:
  4869                           	opt stack 23
  4870                           
  4871                           ;ST7735_TFT.c: 330: write_command(0x2A);
  4872                           
  4873                           ;incstack = 0
  4874  001082  0E2A               	movlw	42
  4875  001084  EC0B  F009         	call	_write_command
  4876                           
  4877                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x00);
  4878  001088  0E00               	movlw	0
  4879  00108A  EC03  F009         	call	_write_data
  4880  00108E  0E00               	movlw	0
  4881  001090  EC03  F009         	call	_write_data
  4882                           
  4883                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x7F);
  4884  001094  0E00               	movlw	0
  4885  001096  EC03  F009         	call	_write_data
  4886  00109A  0E7F               	movlw	127
  4887  00109C  EC03  F009         	call	_write_data
  4888                           
  4889                           ;ST7735_TFT.c: 333: write_command(0x2B);
  4890  0010A0  0E2B               	movlw	43
  4891  0010A2  EC0B  F009         	call	_write_command
  4892                           
  4893                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x00);
  4894  0010A6  0E00               	movlw	0
  4895  0010A8  EC03  F009         	call	_write_data
  4896  0010AC  0E00               	movlw	0
  4897  0010AE  EC03  F009         	call	_write_data
  4898                           
  4899                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x9F);
  4900  0010B2  0E00               	movlw	0
  4901  0010B4  EC03  F009         	call	_write_data
  4902  0010B8  0E9F               	movlw	159
  4903  0010BA  EC03  F009         	call	_write_data
  4904  0010BE  0012               	return		;funcret
  4905  0010C0                     __end_of_Rcmd2red:
  4906                           	opt stack 0
  4907                           tblptru	equ	0xFF8
  4908                           tblptrh	equ	0xFF7
  4909                           tblptrl	equ	0xFF6
  4910                           tablat	equ	0xFF5
  4911                           prodh	equ	0xFF4
  4912                           prodl	equ	0xFF3
  4913                           intcon	equ	0xFF2
  4914                           intcon2	equ	0xFF1
  4915                           postinc0	equ	0xFEE
  4916                           wreg	equ	0xFE8
  4917                           postdec1	equ	0xFE5
  4918                           fsr1l	equ	0xFE1
  4919                           indf2	equ	0xFDF
  4920                           postinc2	equ	0xFDE
  4921                           postdec2	equ	0xFDD
  4922                           fsr2h	equ	0xFDA
  4923                           fsr2l	equ	0xFD9
  4924                           status	equ	0xFD8
  4925                           
  4926 ;; *************** function _Rcmd1 *****************
  4927 ;; Defined at:
  4928 ;;		line 281 in file "ST7735_TFT.c"
  4929 ;; Parameters:    Size  Location     Type
  4930 ;;		None
  4931 ;; Auto vars:     Size  Location     Type
  4932 ;;		None
  4933 ;; Return value:  Size  Location     Type
  4934 ;;		None               void
  4935 ;; Registers used:
  4936 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4937 ;; Tracked objects:
  4938 ;;		On entry : 0/0
  4939 ;;		On exit  : 0/0
  4940 ;;		Unchanged: 0/0
  4941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4946 ;;Total ram usage:        0 bytes
  4947 ;; Hardware stack levels used:    1
  4948 ;; Hardware stack levels required when called:    5
  4949 ;; This function calls:
  4950 ;;		_delay_ms
  4951 ;;		_write_command
  4952 ;;		_write_data
  4953 ;; This function is called by:
  4954 ;;		_TFT_GreenTab_Initialize
  4955 ;;		_TFT_BlackTab_Initialize
  4956 ;; This function uses a non-reentrant model
  4957 ;;
  4958                           
  4959                           	psect	text23
  4960  0007EC                     __ptext23:
  4961                           	opt stack 0
  4962  0007EC                     _Rcmd1:
  4963                           	opt stack 23
  4964                           
  4965                           ;ST7735_TFT.c: 283: write_command(0x01);
  4966                           
  4967                           ;incstack = 0
  4968  0007EC  0E01               	movlw	1
  4969  0007EE  EC0B  F009         	call	_write_command
  4970                           
  4971                           ;ST7735_TFT.c: 284: delay_ms(150);
  4972  0007F2  0E00               	movlw	0
  4973  0007F4  6E18               	movwf	delay_ms@ms+1,c
  4974  0007F6  0E96               	movlw	150
  4975  0007F8  6E17               	movwf	delay_ms@ms,c
  4976  0007FA  ECAD  F007         	call	_delay_ms	;wreg free
  4977                           
  4978                           ;ST7735_TFT.c: 285: write_command(0x11);
  4979  0007FE  0E11               	movlw	17
  4980  000800  EC0B  F009         	call	_write_command
  4981                           
  4982                           ;ST7735_TFT.c: 286: delay_ms(500);
  4983  000804  0E01               	movlw	1
  4984  000806  6E18               	movwf	delay_ms@ms+1,c
  4985  000808  0EF4               	movlw	244
  4986  00080A  6E17               	movwf	delay_ms@ms,c
  4987  00080C  ECAD  F007         	call	_delay_ms	;wreg free
  4988                           
  4989                           ;ST7735_TFT.c: 287: write_command(0xB1);
  4990  000810  0EB1               	movlw	177
  4991  000812  EC0B  F009         	call	_write_command
  4992                           
  4993                           ;ST7735_TFT.c: 288: write_data(0x01);
  4994  000816  0E01               	movlw	1
  4995  000818  EC03  F009         	call	_write_data
  4996                           
  4997                           ;ST7735_TFT.c: 289: write_data(0x2C);
  4998  00081C  0E2C               	movlw	44
  4999  00081E  EC03  F009         	call	_write_data
  5000                           
  5001                           ;ST7735_TFT.c: 290: write_data(0x2D);
  5002  000822  0E2D               	movlw	45
  5003  000824  EC03  F009         	call	_write_data
  5004                           
  5005                           ;ST7735_TFT.c: 291: write_command(0xB2);
  5006  000828  0EB2               	movlw	178
  5007  00082A  EC0B  F009         	call	_write_command
  5008                           
  5009                           ;ST7735_TFT.c: 292: write_data(0x01);
  5010  00082E  0E01               	movlw	1
  5011  000830  EC03  F009         	call	_write_data
  5012                           
  5013                           ;ST7735_TFT.c: 293: write_data(0x2C);
  5014  000834  0E2C               	movlw	44
  5015  000836  EC03  F009         	call	_write_data
  5016                           
  5017                           ;ST7735_TFT.c: 294: write_data(0x2D);
  5018  00083A  0E2D               	movlw	45
  5019  00083C  EC03  F009         	call	_write_data
  5020                           
  5021                           ;ST7735_TFT.c: 295: write_command(0xB3);
  5022  000840  0EB3               	movlw	179
  5023  000842  EC0B  F009         	call	_write_command
  5024                           
  5025                           ;ST7735_TFT.c: 296: write_data(0x01);
  5026  000846  0E01               	movlw	1
  5027  000848  EC03  F009         	call	_write_data
  5028                           
  5029                           ;ST7735_TFT.c: 297: write_data(0x2C);
  5030  00084C  0E2C               	movlw	44
  5031  00084E  EC03  F009         	call	_write_data
  5032                           
  5033                           ;ST7735_TFT.c: 298: write_data(0x2D);
  5034  000852  0E2D               	movlw	45
  5035  000854  EC03  F009         	call	_write_data
  5036                           
  5037                           ;ST7735_TFT.c: 299: write_data(0x01);
  5038  000858  0E01               	movlw	1
  5039  00085A  EC03  F009         	call	_write_data
  5040                           
  5041                           ;ST7735_TFT.c: 300: write_data(0x2C);
  5042  00085E  0E2C               	movlw	44
  5043  000860  EC03  F009         	call	_write_data
  5044                           
  5045                           ;ST7735_TFT.c: 301: write_data(0x2D);
  5046  000864  0E2D               	movlw	45
  5047  000866  EC03  F009         	call	_write_data
  5048                           
  5049                           ;ST7735_TFT.c: 302: write_command(0xB4);
  5050  00086A  0EB4               	movlw	180
  5051  00086C  EC0B  F009         	call	_write_command
  5052                           
  5053                           ;ST7735_TFT.c: 303: write_data(0x07);
  5054  000870  0E07               	movlw	7
  5055  000872  EC03  F009         	call	_write_data
  5056                           
  5057                           ;ST7735_TFT.c: 304: write_command(0xC0);
  5058  000876  0EC0               	movlw	192
  5059  000878  EC0B  F009         	call	_write_command
  5060                           
  5061                           ;ST7735_TFT.c: 305: write_data(0xA2);
  5062  00087C  0EA2               	movlw	162
  5063  00087E  EC03  F009         	call	_write_data
  5064                           
  5065                           ;ST7735_TFT.c: 306: write_data(0x02);
  5066  000882  0E02               	movlw	2
  5067  000884  EC03  F009         	call	_write_data
  5068                           
  5069                           ;ST7735_TFT.c: 307: write_data(0x84);
  5070  000888  0E84               	movlw	132
  5071  00088A  EC03  F009         	call	_write_data
  5072                           
  5073                           ;ST7735_TFT.c: 308: write_command(0xC1);
  5074  00088E  0EC1               	movlw	193
  5075  000890  EC0B  F009         	call	_write_command
  5076                           
  5077                           ;ST7735_TFT.c: 309: write_data(0xC5);
  5078  000894  0EC5               	movlw	197
  5079  000896  EC03  F009         	call	_write_data
  5080                           
  5081                           ;ST7735_TFT.c: 310: write_command(0xC2);
  5082  00089A  0EC2               	movlw	194
  5083  00089C  EC0B  F009         	call	_write_command
  5084                           
  5085                           ;ST7735_TFT.c: 311: write_data(0x0A);
  5086  0008A0  0E0A               	movlw	10
  5087  0008A2  EC03  F009         	call	_write_data
  5088                           
  5089                           ;ST7735_TFT.c: 312: write_data(0x00);
  5090  0008A6  0E00               	movlw	0
  5091  0008A8  EC03  F009         	call	_write_data
  5092                           
  5093                           ;ST7735_TFT.c: 313: write_command(0xC3);
  5094  0008AC  0EC3               	movlw	195
  5095  0008AE  EC0B  F009         	call	_write_command
  5096                           
  5097                           ;ST7735_TFT.c: 314: write_data(0x8A);
  5098  0008B2  0E8A               	movlw	138
  5099  0008B4  EC03  F009         	call	_write_data
  5100                           
  5101                           ;ST7735_TFT.c: 315: write_data(0x2A);
  5102  0008B8  0E2A               	movlw	42
  5103  0008BA  EC03  F009         	call	_write_data
  5104                           
  5105                           ;ST7735_TFT.c: 316: write_command(0xC4);
  5106  0008BE  0EC4               	movlw	196
  5107  0008C0  EC0B  F009         	call	_write_command
  5108                           
  5109                           ;ST7735_TFT.c: 317: write_data(0x8A);
  5110  0008C4  0E8A               	movlw	138
  5111  0008C6  EC03  F009         	call	_write_data
  5112                           
  5113                           ;ST7735_TFT.c: 318: write_data(0xEE);
  5114  0008CA  0EEE               	movlw	238
  5115  0008CC  EC03  F009         	call	_write_data
  5116                           
  5117                           ;ST7735_TFT.c: 319: write_command(0xC5);
  5118  0008D0  0EC5               	movlw	197
  5119  0008D2  EC0B  F009         	call	_write_command
  5120                           
  5121                           ;ST7735_TFT.c: 320: write_data(0x0E);
  5122  0008D6  0E0E               	movlw	14
  5123  0008D8  EC03  F009         	call	_write_data
  5124                           
  5125                           ;ST7735_TFT.c: 321: write_command(0x20);
  5126  0008DC  0E20               	movlw	32
  5127  0008DE  EC0B  F009         	call	_write_command
  5128                           
  5129                           ;ST7735_TFT.c: 322: write_command(0x36);
  5130  0008E2  0E36               	movlw	54
  5131  0008E4  EC0B  F009         	call	_write_command
  5132                           
  5133                           ;ST7735_TFT.c: 323: write_data(0xC8);
  5134  0008E8  0EC8               	movlw	200
  5135  0008EA  EC03  F009         	call	_write_data
  5136                           
  5137                           ;ST7735_TFT.c: 324: write_command(0x3A);
  5138  0008EE  0E3A               	movlw	58
  5139  0008F0  EC0B  F009         	call	_write_command
  5140                           
  5141                           ;ST7735_TFT.c: 325: write_data(0x05);
  5142  0008F4  0E05               	movlw	5
  5143  0008F6  EC03  F009         	call	_write_data
  5144  0008FA  0012               	return		;funcret
  5145  0008FC                     __end_of_Rcmd1:
  5146                           	opt stack 0
  5147                           tblptru	equ	0xFF8
  5148                           tblptrh	equ	0xFF7
  5149                           tblptrl	equ	0xFF6
  5150                           tablat	equ	0xFF5
  5151                           prodh	equ	0xFF4
  5152                           prodl	equ	0xFF3
  5153                           intcon	equ	0xFF2
  5154                           intcon2	equ	0xFF1
  5155                           postinc0	equ	0xFEE
  5156                           wreg	equ	0xFE8
  5157                           postdec1	equ	0xFE5
  5158                           fsr1l	equ	0xFE1
  5159                           indf2	equ	0xFDF
  5160                           postinc2	equ	0xFDE
  5161                           postdec2	equ	0xFDD
  5162                           fsr2h	equ	0xFDA
  5163                           fsr2l	equ	0xFD9
  5164                           status	equ	0xFD8
  5165                           
  5166 ;; *************** function _write_data *****************
  5167 ;; Defined at:
  5168 ;;		line 209 in file "ST7735_TFT.c"
  5169 ;; Parameters:    Size  Location     Type
  5170 ;;  data_           1    wreg     unsigned char 
  5171 ;; Auto vars:     Size  Location     Type
  5172 ;;  data_           1   18[COMRAM] unsigned char 
  5173 ;; Return value:  Size  Location     Type
  5174 ;;		None               void
  5175 ;; Registers used:
  5176 ;;		wreg, status,2, cstack
  5177 ;; Tracked objects:
  5178 ;;		On entry : 0/0
  5179 ;;		On exit  : 0/0
  5180 ;;		Unchanged: 0/0
  5181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5183 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5185 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5186 ;;Total ram usage:        1 bytes
  5187 ;; Hardware stack levels used:    1
  5188 ;; Hardware stack levels required when called:    4
  5189 ;; This function calls:
  5190 ;;		_spiwrite
  5191 ;; This function is called by:
  5192 ;;		_Rcmd1
  5193 ;;		_Rcmd2red
  5194 ;;		_Rcmd3
  5195 ;;		_setAddrWindow
  5196 ;;		_drawPixel
  5197 ;;		_TFT_GreenTab_Initialize
  5198 ;;		_Bcmd
  5199 ;;		_setScrollDefinition
  5200 ;;		_Rcmd2green
  5201 ;;		_VerticalScroll
  5202 ;; This function uses a non-reentrant model
  5203 ;;
  5204                           
  5205                           	psect	text24
  5206  001206                     __ptext24:
  5207                           	opt stack 0
  5208  001206                     _write_data:
  5209                           	opt stack 22
  5210                           
  5211                           ;incstack = 0
  5212                           ;write_data@data_ stored from wreg
  5213  001206  6E13               	movwf	write_data@data_,c
  5214                           
  5215                           ;ST7735_TFT.c: 211: PORTCbits.RC1 = 0;
  5216  001208  9282               	bcf	3970,1,c	;volatile
  5217                           
  5218                           ;ST7735_TFT.c: 212: PORTCbits.RC0 = 1;
  5219  00120A  8082               	bsf	3970,0,c	;volatile
  5220                           
  5221                           ;ST7735_TFT.c: 213: spiwrite(data_);
  5222  00120C  5013               	movf	write_data@data_,w,c
  5223  00120E  ECE8  F008         	call	_spiwrite
  5224                           
  5225                           ;ST7735_TFT.c: 214: PORTCbits.RC1 = 1;
  5226  001212  8282               	bsf	3970,1,c	;volatile
  5227  001214  0012               	return		;funcret
  5228  001216                     __end_of_write_data:
  5229                           	opt stack 0
  5230                           tblptru	equ	0xFF8
  5231                           tblptrh	equ	0xFF7
  5232                           tblptrl	equ	0xFF6
  5233                           tablat	equ	0xFF5
  5234                           prodh	equ	0xFF4
  5235                           prodl	equ	0xFF3
  5236                           intcon	equ	0xFF2
  5237                           intcon2	equ	0xFF1
  5238                           postinc0	equ	0xFEE
  5239                           wreg	equ	0xFE8
  5240                           postdec1	equ	0xFE5
  5241                           fsr1l	equ	0xFE1
  5242                           indf2	equ	0xFDF
  5243                           postinc2	equ	0xFDE
  5244                           postdec2	equ	0xFDD
  5245                           fsr2h	equ	0xFDA
  5246                           fsr2l	equ	0xFD9
  5247                           status	equ	0xFD8
  5248                           
  5249 ;; *************** function _write_command *****************
  5250 ;; Defined at:
  5251 ;;		line 198 in file "ST7735_TFT.c"
  5252 ;; Parameters:    Size  Location     Type
  5253 ;;  cmd_            1    wreg     unsigned char 
  5254 ;; Auto vars:     Size  Location     Type
  5255 ;;  cmd_            1   18[COMRAM] unsigned char 
  5256 ;; Return value:  Size  Location     Type
  5257 ;;		None               void
  5258 ;; Registers used:
  5259 ;;		wreg, status,2, cstack
  5260 ;; Tracked objects:
  5261 ;;		On entry : 0/0
  5262 ;;		On exit  : 0/0
  5263 ;;		Unchanged: 0/0
  5264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5266 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5268 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5269 ;;Total ram usage:        1 bytes
  5270 ;; Hardware stack levels used:    1
  5271 ;; Hardware stack levels required when called:    4
  5272 ;; This function calls:
  5273 ;;		_spiwrite
  5274 ;; This function is called by:
  5275 ;;		_Rcmd1
  5276 ;;		_Rcmd2red
  5277 ;;		_Rcmd3
  5278 ;;		_setAddrWindow
  5279 ;;		_TFT_GreenTab_Initialize
  5280 ;;		_Bcmd
  5281 ;;		_setScrollDefinition
  5282 ;;		_Rcmd2green
  5283 ;;		_VerticalScroll
  5284 ;; This function uses a non-reentrant model
  5285 ;;
  5286                           
  5287                           	psect	text25
  5288  001216                     __ptext25:
  5289                           	opt stack 0
  5290  001216                     _write_command:
  5291                           	opt stack 22
  5292                           
  5293                           ;incstack = 0
  5294                           ;write_command@cmd_ stored from wreg
  5295  001216  6E13               	movwf	write_command@cmd_,c
  5296                           
  5297                           ;ST7735_TFT.c: 200: PORTCbits.RC1 = 0;
  5298  001218  9282               	bcf	3970,1,c	;volatile
  5299                           
  5300                           ;ST7735_TFT.c: 202: PORTCbits.RC0 = 0;
  5301  00121A  9082               	bcf	3970,0,c	;volatile
  5302                           
  5303                           ;ST7735_TFT.c: 203: spiwrite(cmd_);
  5304  00121C  5013               	movf	write_command@cmd_,w,c
  5305  00121E  ECE8  F008         	call	_spiwrite
  5306                           
  5307                           ;ST7735_TFT.c: 205: PORTCbits.RC1 = 1;
  5308  001222  8282               	bsf	3970,1,c	;volatile
  5309  001224  0012               	return		;funcret
  5310  001226                     __end_of_write_command:
  5311                           	opt stack 0
  5312                           tblptru	equ	0xFF8
  5313                           tblptrh	equ	0xFF7
  5314                           tblptrl	equ	0xFF6
  5315                           tablat	equ	0xFF5
  5316                           prodh	equ	0xFF4
  5317                           prodl	equ	0xFF3
  5318                           intcon	equ	0xFF2
  5319                           intcon2	equ	0xFF1
  5320                           postinc0	equ	0xFEE
  5321                           wreg	equ	0xFE8
  5322                           postdec1	equ	0xFE5
  5323                           fsr1l	equ	0xFE1
  5324                           indf2	equ	0xFDF
  5325                           postinc2	equ	0xFDE
  5326                           postdec2	equ	0xFDD
  5327                           fsr2h	equ	0xFDA
  5328                           fsr2l	equ	0xFD9
  5329                           status	equ	0xFD8
  5330                           
  5331 ;; *************** function _spiwrite *****************
  5332 ;; Defined at:
  5333 ;;		line 189 in file "ST7735_TFT.c"
  5334 ;; Parameters:    Size  Location     Type
  5335 ;;  spidata         1    wreg     unsigned char 
  5336 ;; Auto vars:     Size  Location     Type
  5337 ;;  spidata         1   17[COMRAM] unsigned char 
  5338 ;;  x               1   16[COMRAM] unsigned char 
  5339 ;; Return value:  Size  Location     Type
  5340 ;;		None               void
  5341 ;; Registers used:
  5342 ;;		wreg
  5343 ;; Tracked objects:
  5344 ;;		On entry : 0/0
  5345 ;;		On exit  : 0/0
  5346 ;;		Unchanged: 0/0
  5347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5349 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5351 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5352 ;;Total ram usage:        2 bytes
  5353 ;; Hardware stack levels used:    1
  5354 ;; Hardware stack levels required when called:    3
  5355 ;; This function calls:
  5356 ;;		Nothing
  5357 ;; This function is called by:
  5358 ;;		_write_command
  5359 ;;		_write_data
  5360 ;;		_drawFastVLine
  5361 ;;		_fillRectangle
  5362 ;;		_drawFastHLine
  5363 ;; This function uses a non-reentrant model
  5364 ;;
  5365                           
  5366                           	psect	text26
  5367  0011D0                     __ptext26:
  5368                           	opt stack 0
  5369  0011D0                     _spiwrite:
  5370                           	opt stack 24
  5371                           
  5372                           ;incstack = 0
  5373                           ;spiwrite@spidata stored from wreg
  5374  0011D0  6E12               	movwf	spiwrite@spidata,c
  5375                           
  5376                           ;ST7735_TFT.c: 191: char x;
  5377                           ;ST7735_TFT.c: 192: PIR1bits.SSPIF = 0;
  5378  0011D2  969E               	bcf	3998,3,c	;volatile
  5379                           
  5380                           ;ST7735_TFT.c: 193: x = SSPBUF;
  5381  0011D4  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  5382                           
  5383                           ;ST7735_TFT.c: 194: SSPBUF = spidata;
  5384  0011D8  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  5385                           
  5386                           ;ST7735_TFT.c: 195: while (!SSPSTATbits.BF);
  5387  0011DC  D000               	goto	l45
  5388  0011DE                     l45:
  5389  0011DE  A0C7               	btfss	4039,0,c	;volatile
  5390  0011E0  D7FE               	goto	l45
  5391  0011E2  0012               	return		;funcret
  5392  0011E4                     __end_of_spiwrite:
  5393                           	opt stack 0
  5394                           tblptru	equ	0xFF8
  5395                           tblptrh	equ	0xFF7
  5396                           tblptrl	equ	0xFF6
  5397                           tablat	equ	0xFF5
  5398                           prodh	equ	0xFF4
  5399                           prodl	equ	0xFF3
  5400                           intcon	equ	0xFF2
  5401                           intcon2	equ	0xFF1
  5402                           postinc0	equ	0xFEE
  5403                           wreg	equ	0xFE8
  5404                           postdec1	equ	0xFE5
  5405                           fsr1l	equ	0xFE1
  5406                           indf2	equ	0xFDF
  5407                           postinc2	equ	0xFDE
  5408                           postdec2	equ	0xFDD
  5409                           fsr2h	equ	0xFDA
  5410                           fsr2l	equ	0xFD9
  5411                           status	equ	0xFD8
  5412                           
  5413 ;; *************** function _LCD_Reset *****************
  5414 ;; Defined at:
  5415 ;;		line 217 in file "ST7735_TFT.c"
  5416 ;; Parameters:    Size  Location     Type
  5417 ;;		None
  5418 ;; Auto vars:     Size  Location     Type
  5419 ;;		None
  5420 ;; Return value:  Size  Location     Type
  5421 ;;		None               void
  5422 ;; Registers used:
  5423 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5424 ;; Tracked objects:
  5425 ;;		On entry : 0/0
  5426 ;;		On exit  : 0/0
  5427 ;;		Unchanged: 0/0
  5428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5432 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5433 ;;Total ram usage:        0 bytes
  5434 ;; Hardware stack levels used:    1
  5435 ;; Hardware stack levels required when called:    5
  5436 ;; This function calls:
  5437 ;;		_delay_ms
  5438 ;; This function is called by:
  5439 ;;		_Initialize_Screen
  5440 ;; This function uses a non-reentrant model
  5441 ;;
  5442                           
  5443                           	psect	text27
  5444  0011E4                     __ptext27:
  5445                           	opt stack 0
  5446  0011E4                     _LCD_Reset:
  5447                           	opt stack 24
  5448                           
  5449                           ;ST7735_TFT.c: 219: PORTCbits.RC4 = 0;
  5450                           
  5451                           ;incstack = 0
  5452  0011E4  9882               	bcf	3970,4,c	;volatile
  5453                           
  5454                           ;ST7735_TFT.c: 220: delay_ms(100);
  5455  0011E6  0E00               	movlw	0
  5456  0011E8  6E18               	movwf	delay_ms@ms+1,c
  5457  0011EA  0E64               	movlw	100
  5458  0011EC  6E17               	movwf	delay_ms@ms,c
  5459  0011EE  ECAD  F007         	call	_delay_ms	;wreg free
  5460                           
  5461                           ;ST7735_TFT.c: 221: PORTCbits.RC4 = 1;
  5462  0011F2  8882               	bsf	3970,4,c	;volatile
  5463  0011F4  0012               	return		;funcret
  5464  0011F6                     __end_of_LCD_Reset:
  5465                           	opt stack 0
  5466                           tblptru	equ	0xFF8
  5467                           tblptrh	equ	0xFF7
  5468                           tblptrl	equ	0xFF6
  5469                           tablat	equ	0xFF5
  5470                           prodh	equ	0xFF4
  5471                           prodl	equ	0xFF3
  5472                           intcon	equ	0xFF2
  5473                           intcon2	equ	0xFF1
  5474                           postinc0	equ	0xFEE
  5475                           wreg	equ	0xFE8
  5476                           postdec1	equ	0xFE5
  5477                           fsr1l	equ	0xFE1
  5478                           indf2	equ	0xFDF
  5479                           postinc2	equ	0xFDE
  5480                           postdec2	equ	0xFDD
  5481                           fsr2h	equ	0xFDA
  5482                           fsr2l	equ	0xFD9
  5483                           status	equ	0xFD8
  5484                           
  5485 ;; *************** function _delay_ms *****************
  5486 ;; Defined at:
  5487 ;;		line 64 in file "ST7735_TFT.c"
  5488 ;; Parameters:    Size  Location     Type
  5489 ;;  ms              2   22[COMRAM] int 
  5490 ;; Auto vars:     Size  Location     Type
  5491 ;;  count           2   26[COMRAM] int 
  5492 ;; Return value:  Size  Location     Type
  5493 ;;		None               void
  5494 ;; Registers used:
  5495 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5496 ;; Tracked objects:
  5497 ;;		On entry : 0/0
  5498 ;;		On exit  : 0/0
  5499 ;;		Unchanged: 0/0
  5500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5501 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5502 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5503 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5504 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5505 ;;Total ram usage:        6 bytes
  5506 ;; Hardware stack levels used:    1
  5507 ;; Hardware stack levels required when called:    4
  5508 ;; This function calls:
  5509 ;;		___wmul
  5510 ;; This function is called by:
  5511 ;;		_LCD_Reset
  5512 ;;		_Rcmd1
  5513 ;;		_Rcmd3
  5514 ;;		_Bcmd
  5515 ;; This function uses a non-reentrant model
  5516 ;;
  5517                           
  5518                           	psect	text28
  5519  000F5A                     __ptext28:
  5520                           	opt stack 0
  5521  000F5A                     _delay_ms:
  5522                           	opt stack 23
  5523                           
  5524                           ;ST7735_TFT.c: 70: int count;
  5525                           ;ST7735_TFT.c: 71: count = 8000000/4000/8 * ms;
  5526                           
  5527                           ;incstack = 0
  5528  000F5A  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  5529  000F5E  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  5530  000F62  0E00               	movlw	0
  5531  000F64  6E14               	movwf	___wmul@multiplicand+1,c
  5532  000F66  0EFA               	movlw	250
  5533  000F68  6E13               	movwf	___wmul@multiplicand,c
  5534  000F6A  ECBB  F008         	call	___wmul	;wreg free
  5535  000F6E  C011  F01B         	movff	?___wmul,delay_ms@count
  5536  000F72  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  5537                           
  5538                           ;ST7735_TFT.c: 72: count = (0xffff - count);
  5539  000F76  C01B  F019         	movff	delay_ms@count,??_delay_ms
  5540  000F7A  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  5541  000F7E  1E19               	comf	??_delay_ms,f,c
  5542  000F80  1E1A               	comf	??_delay_ms+1,f,c
  5543  000F82  4A19               	infsnz	??_delay_ms,f,c
  5544  000F84  2A1A               	incf	??_delay_ms+1,f,c
  5545  000F86  0EFF               	movlw	255
  5546  000F88  2419               	addwf	??_delay_ms,w,c
  5547  000F8A  6E1B               	movwf	delay_ms@count,c
  5548  000F8C  0EFF               	movlw	255
  5549  000F8E  201A               	addwfc	??_delay_ms+1,w,c
  5550  000F90  6E1C               	movwf	delay_ms@count+1,c
  5551                           
  5552                           ;ST7735_TFT.c: 74: T3CON = 0xb8;
  5553  000F92  0EB8               	movlw	184
  5554  000F94  6EB1               	movwf	4017,c	;volatile
  5555                           
  5556                           ;ST7735_TFT.c: 76: TMR3L = count & 0x00ff;
  5557  000F96  C01B  FFB2         	movff	delay_ms@count,4018	;volatile
  5558                           
  5559                           ;ST7735_TFT.c: 77: TMR3H = count >> 8;
  5560  000F9A  501C               	movf	delay_ms@count+1,w,c
  5561  000F9C  6EB3               	movwf	4019,c	;volatile
  5562                           
  5563                           ;ST7735_TFT.c: 79: PIR2bits.TMR3IF = 0;
  5564  000F9E  92A1               	bcf	4001,1,c	;volatile
  5565                           
  5566                           ;ST7735_TFT.c: 80: T3CONbits.TMR3ON = 1;
  5567  000FA0  80B1               	bsf	4017,0,c	;volatile
  5568                           
  5569                           ;ST7735_TFT.c: 82: while (PIR2bits.TMR3IF == 0);
  5570  000FA2  D000               	goto	l35
  5571  000FA4                     l35:
  5572  000FA4  A2A1               	btfss	4001,1,c	;volatile
  5573  000FA6  D7FE               	goto	l35
  5574                           
  5575                           ;ST7735_TFT.c: 83: T3CONbits.TMR3ON = 0;
  5576  000FA8  90B1               	bcf	4017,0,c	;volatile
  5577  000FAA  0012               	return		;funcret
  5578  000FAC                     __end_of_delay_ms:
  5579                           	opt stack 0
  5580                           tblptru	equ	0xFF8
  5581                           tblptrh	equ	0xFF7
  5582                           tblptrl	equ	0xFF6
  5583                           tablat	equ	0xFF5
  5584                           prodh	equ	0xFF4
  5585                           prodl	equ	0xFF3
  5586                           intcon	equ	0xFF2
  5587                           intcon2	equ	0xFF1
  5588                           postinc0	equ	0xFEE
  5589                           wreg	equ	0xFE8
  5590                           postdec1	equ	0xFE5
  5591                           fsr1l	equ	0xFE1
  5592                           indf2	equ	0xFDF
  5593                           postinc2	equ	0xFDE
  5594                           postdec2	equ	0xFDD
  5595                           fsr2h	equ	0xFDA
  5596                           fsr2l	equ	0xFD9
  5597                           status	equ	0xFD8
  5598                           
  5599 ;; *************** function ___wmul *****************
  5600 ;; Defined at:
  5601 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  5602 ;; Parameters:    Size  Location     Type
  5603 ;;  multiplier      2   16[COMRAM] unsigned int 
  5604 ;;  multiplicand    2   18[COMRAM] unsigned int 
  5605 ;; Auto vars:     Size  Location     Type
  5606 ;;  product         2   20[COMRAM] unsigned int 
  5607 ;; Return value:  Size  Location     Type
  5608 ;;                  2   16[COMRAM] unsigned int 
  5609 ;; Registers used:
  5610 ;;		wreg, status,2, status,0, prodl, prodh
  5611 ;; Tracked objects:
  5612 ;;		On entry : 0/0
  5613 ;;		On exit  : 0/0
  5614 ;;		Unchanged: 0/0
  5615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5616 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5617 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5619 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5620 ;;Total ram usage:        6 bytes
  5621 ;; Hardware stack levels used:    1
  5622 ;; Hardware stack levels required when called:    3
  5623 ;; This function calls:
  5624 ;;		Nothing
  5625 ;; This function is called by:
  5626 ;;		_delay_ms
  5627 ;;		_drawChar
  5628 ;; This function uses a non-reentrant model
  5629 ;;
  5630                           
  5631                           	psect	text29
  5632  001176                     __ptext29:
  5633                           	opt stack 0
  5634  001176                     ___wmul:
  5635                           	opt stack 25
  5636                           
  5637                           ;incstack = 0
  5638  001176  5011               	movf	___wmul@multiplier,w,c
  5639  001178  0213               	mulwf	___wmul@multiplicand,c
  5640  00117A  CFF3 F015          	movff	prodl,___wmul@product
  5641  00117E  CFF4 F016          	movff	prodh,___wmul@product+1
  5642  001182  5011               	movf	___wmul@multiplier,w,c
  5643  001184  0214               	mulwf	___wmul@multiplicand+1,c
  5644  001186  50F3               	movf	prodl,w,c
  5645  001188  2616               	addwf	___wmul@product+1,f,c
  5646  00118A  5012               	movf	___wmul@multiplier+1,w,c
  5647  00118C  0213               	mulwf	___wmul@multiplicand,c
  5648  00118E  50F3               	movf	prodl,w,c
  5649  001190  2616               	addwf	___wmul@product+1,f,c
  5650  001192  C015  F011         	movff	___wmul@product,?___wmul
  5651  001196  C016  F012         	movff	___wmul@product+1,?___wmul+1
  5652  00119A  D000               	goto	l415
  5653  00119C                     l415:
  5654  00119C  0012               	return		;funcret
  5655  00119E                     __end_of___wmul:
  5656                           	opt stack 0
  5657                           tblptru	equ	0xFF8
  5658                           tblptrh	equ	0xFF7
  5659                           tblptrl	equ	0xFF6
  5660                           tablat	equ	0xFF5
  5661                           prodh	equ	0xFF4
  5662                           prodl	equ	0xFF3
  5663                           intcon	equ	0xFF2
  5664                           intcon2	equ	0xFF1
  5665                           postinc0	equ	0xFEE
  5666                           wreg	equ	0xFE8
  5667                           postdec1	equ	0xFE5
  5668                           fsr1l	equ	0xFE1
  5669                           indf2	equ	0xFDF
  5670                           postinc2	equ	0xFDE
  5671                           postdec2	equ	0xFDD
  5672                           fsr2h	equ	0xFDA
  5673                           fsr2l	equ	0xFD9
  5674                           status	equ	0xFD8
  5675                           
  5676 ;; *************** function _chkisr *****************
  5677 ;; Defined at:
  5678 ;;		line 66 in file "Lab10p1.c"
  5679 ;; Parameters:    Size  Location     Type
  5680 ;;		None
  5681 ;; Auto vars:     Size  Location     Type
  5682 ;;		None
  5683 ;; Return value:  Size  Location     Type
  5684 ;;		None               void
  5685 ;; Registers used:
  5686 ;;		wreg, status,2, status,0, cstack
  5687 ;; Tracked objects:
  5688 ;;		On entry : 0/0
  5689 ;;		On exit  : 0/0
  5690 ;;		Unchanged: 0/0
  5691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5694 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5695 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5696 ;;Total ram usage:       14 bytes
  5697 ;; Hardware stack levels used:    1
  5698 ;; Hardware stack levels required when called:    2
  5699 ;; This function calls:
  5700 ;;		_INT0_isr
  5701 ;;		_TIMER1_isr
  5702 ;; This function is called by:
  5703 ;;		Interrupt level 2
  5704 ;; This function uses a non-reentrant model
  5705 ;;
  5706                           
  5707                           	psect	intcode
  5708  000008                     __pintcode:
  5709                           	opt stack 0
  5710  000008                     _chkisr:
  5711                           	opt stack 20
  5712                           
  5713                           ;incstack = 0
  5714  000008  CFFA F003          	movff	pclath,??_chkisr
  5715  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
  5716  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
  5717  000014  EDB6  F006         	call	int_func,f	;refresh shadow registers
  5718                           pclatu	equ	0xFFB
  5719                           pclath	equ	0xFFA
  5720                           tblptru	equ	0xFF8
  5721                           tblptrh	equ	0xFF7
  5722                           tblptrl	equ	0xFF6
  5723                           tablat	equ	0xFF5
  5724                           prodh	equ	0xFF4
  5725                           prodl	equ	0xFF3
  5726                           intcon	equ	0xFF2
  5727                           intcon2	equ	0xFF1
  5728                           postinc0	equ	0xFEE
  5729                           fsr0l	equ	0xFE9
  5730                           wreg	equ	0xFE8
  5731                           postdec1	equ	0xFE5
  5732                           fsr1l	equ	0xFE1
  5733                           indf2	equ	0xFDF
  5734                           postinc2	equ	0xFDE
  5735                           postdec2	equ	0xFDD
  5736                           fsr2h	equ	0xFDA
  5737                           fsr2l	equ	0xFD9
  5738                           status	equ	0xFD8
  5739                           
  5740                           	psect	intcode_body
  5741  000D6C                     __pintcode_body:
  5742                           	opt stack 20
  5743  000D6C                     int_func:
  5744                           	opt stack 20
  5745  000D6C  0006               	pop		; remove dummy address from shadow register refresh
  5746  000D6E  CFEA F006          	movff	fsr0h,??_chkisr+3
  5747  000D72  CFE1 F007          	movff	fsr1l,??_chkisr+4
  5748  000D76  CFE2 F008          	movff	fsr1h,??_chkisr+5
  5749  000D7A  CFD9 F009          	movff	fsr2l,??_chkisr+6
  5750  000D7E  CFDA F00A          	movff	fsr2h,??_chkisr+7
  5751  000D82  CFF3 F00B          	movff	prodl,??_chkisr+8
  5752  000D86  CFF4 F00C          	movff	prodh,??_chkisr+9
  5753  000D8A  CFF6 F00D          	movff	tblptrl,??_chkisr+10
  5754  000D8E  CFF7 F00E          	movff	tblptrh,??_chkisr+11
  5755  000D92  CFF8 F00F          	movff	tblptru,??_chkisr+12
  5756  000D96  CFF5 F010          	movff	tablat,??_chkisr+13
  5757                           
  5758                           ;Lab10p1.c: 68: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
  5759  000D9A  A09E               	btfss	3998,0,c	;volatile
  5760  000D9C  D003               	goto	i2l1936
  5761  000D9E  EC1A  F009         	call	_TIMER1_isr	;wreg free
  5762  000DA2  D000               	goto	i2l1936
  5763  000DA4                     i2l1936:
  5764                           
  5765                           ;Lab10p1.c: 69: if (INTCONbits.INT0IF == 1) INT0_isr();
  5766  000DA4  A2F2               	btfss	intcon,1,c	;volatile
  5767  000DA6  D003               	goto	i2l309
  5768  000DA8  ECE5  F000         	call	_INT0_isr	;wreg free
  5769  000DAC  D000               	goto	i2l309
  5770  000DAE                     i2l309:
  5771  000DAE  C010  FFF5         	movff	??_chkisr+13,tablat
  5772  000DB2  C00F  FFF8         	movff	??_chkisr+12,tblptru
  5773  000DB6  C00E  FFF7         	movff	??_chkisr+11,tblptrh
  5774  000DBA  C00D  FFF6         	movff	??_chkisr+10,tblptrl
  5775  000DBE  C00C  FFF4         	movff	??_chkisr+9,prodh
  5776  000DC2  C00B  FFF3         	movff	??_chkisr+8,prodl
  5777  000DC6  C00A  FFDA         	movff	??_chkisr+7,fsr2h
  5778  000DCA  C009  FFD9         	movff	??_chkisr+6,fsr2l
  5779  000DCE  C008  FFE2         	movff	??_chkisr+5,fsr1h
  5780  000DD2  C007  FFE1         	movff	??_chkisr+4,fsr1l
  5781  000DD6  C006  FFEA         	movff	??_chkisr+3,fsr0h
  5782  000DDA  C005  FFE9         	movff	??_chkisr+2,fsr0l
  5783  000DDE  C004  FFFB         	movff	??_chkisr+1,pclatu
  5784  000DE2  C003  FFFA         	movff	??_chkisr,pclath
  5785  000DE6  0011               	retfie		f
  5786  000DE8                     __end_of_chkisr:
  5787                           	opt stack 0
  5788                           pclatu	equ	0xFFB
  5789                           pclath	equ	0xFFA
  5790                           tblptru	equ	0xFF8
  5791                           tblptrh	equ	0xFF7
  5792                           tblptrl	equ	0xFF6
  5793                           tablat	equ	0xFF5
  5794                           prodh	equ	0xFF4
  5795                           prodl	equ	0xFF3
  5796                           intcon	equ	0xFF2
  5797                           intcon2	equ	0xFF1
  5798                           postinc0	equ	0xFEE
  5799                           fsr0h	equ	0xFEA
  5800                           fsr0l	equ	0xFE9
  5801                           wreg	equ	0xFE8
  5802                           postdec1	equ	0xFE5
  5803                           fsr1h	equ	0xFE2
  5804                           fsr1l	equ	0xFE1
  5805                           indf2	equ	0xFDF
  5806                           postinc2	equ	0xFDE
  5807                           postdec2	equ	0xFDD
  5808                           fsr2h	equ	0xFDA
  5809                           fsr2l	equ	0xFD9
  5810                           status	equ	0xFD8
  5811                           
  5812 ;; *************** function _TIMER1_isr *****************
  5813 ;; Defined at:
  5814 ;;		line 72 in file "Lab10p1.c"
  5815 ;; Parameters:    Size  Location     Type
  5816 ;;		None
  5817 ;; Auto vars:     Size  Location     Type
  5818 ;;		None
  5819 ;; Return value:  Size  Location     Type
  5820 ;;		None               void
  5821 ;; Registers used:
  5822 ;;		wreg, status,2
  5823 ;; Tracked objects:
  5824 ;;		On entry : 0/0
  5825 ;;		On exit  : 0/0
  5826 ;;		Unchanged: 0/0
  5827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5832 ;;Total ram usage:        0 bytes
  5833 ;; Hardware stack levels used:    1
  5834 ;; This function calls:
  5835 ;;		Nothing
  5836 ;; This function is called by:
  5837 ;;		_chkisr
  5838 ;; This function uses a non-reentrant model
  5839 ;;
  5840                           
  5841                           	psect	text31
  5842  001234                     __ptext31:
  5843                           	opt stack 0
  5844  001234                     _TIMER1_isr:
  5845                           	opt stack 21
  5846                           
  5847                           ;Lab10p1.c: 74: Nec_state = 0;
  5848                           
  5849                           ;incstack = 0
  5850  001234  0E00               	movlw	0
  5851  001236  6E67               	movwf	_Nec_state,c
  5852                           
  5853                           ;Lab10p1.c: 75: INTCON2bits.INTEDG0 = 0;
  5854  001238  9CF1               	bcf	intcon2,6,c	;volatile
  5855                           
  5856                           ;Lab10p1.c: 76: T1CONbits.TMR1ON = 0;
  5857  00123A  90CD               	bcf	4045,0,c	;volatile
  5858                           
  5859                           ;Lab10p1.c: 77: PIR1bits.TMR1IF = 0;
  5860  00123C  909E               	bcf	3998,0,c	;volatile
  5861  00123E  0012               	return		;funcret
  5862  001240                     __end_of_TIMER1_isr:
  5863                           	opt stack 0
  5864                           pclatu	equ	0xFFB
  5865                           pclath	equ	0xFFA
  5866                           tblptru	equ	0xFF8
  5867                           tblptrh	equ	0xFF7
  5868                           tblptrl	equ	0xFF6
  5869                           tablat	equ	0xFF5
  5870                           prodh	equ	0xFF4
  5871                           prodl	equ	0xFF3
  5872                           intcon	equ	0xFF2
  5873                           intcon2	equ	0xFF1
  5874                           postinc0	equ	0xFEE
  5875                           fsr0h	equ	0xFEA
  5876                           fsr0l	equ	0xFE9
  5877                           wreg	equ	0xFE8
  5878                           postdec1	equ	0xFE5
  5879                           fsr1h	equ	0xFE2
  5880                           fsr1l	equ	0xFE1
  5881                           indf2	equ	0xFDF
  5882                           postinc2	equ	0xFDE
  5883                           postdec2	equ	0xFDD
  5884                           fsr2h	equ	0xFDA
  5885                           fsr2l	equ	0xFD9
  5886                           status	equ	0xFD8
  5887                           
  5888 ;; *************** function _INT0_isr *****************
  5889 ;; Defined at:
  5890 ;;		line 86 in file "Lab10p1.c"
  5891 ;; Parameters:    Size  Location     Type
  5892 ;;		None
  5893 ;; Auto vars:     Size  Location     Type
  5894 ;;		None
  5895 ;; Return value:  Size  Location     Type
  5896 ;;		None               void
  5897 ;; Registers used:
  5898 ;;		wreg, status,2, status,0, cstack
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5906 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5907 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5908 ;;Total ram usage:        2 bytes
  5909 ;; Hardware stack levels used:    1
  5910 ;; Hardware stack levels required when called:    1
  5911 ;; This function calls:
  5912 ;;		_force_nec_state0
  5913 ;; This function is called by:
  5914 ;;		_chkisr
  5915 ;; This function uses a non-reentrant model
  5916 ;;
  5917                           
  5918                           	psect	text32
  5919  0001CA                     __ptext32:
  5920                           	opt stack 0
  5921  0001CA                     _INT0_isr:
  5922                           	opt stack 20
  5923                           
  5924                           ;Lab10p1.c: 88: INTCONbits.INT0IF = 0;
  5925                           
  5926                           ;incstack = 0
  5927  0001CA  92F2               	bcf	intcon,1,c	;volatile
  5928                           
  5929                           ;Lab10p1.c: 89: if (Nec_state != 0)
  5930  0001CC  5067               	movf	_Nec_state,w,c
  5931  0001CE  B4D8               	btfsc	status,2,c
  5932  0001D0  D09A               	goto	i2l1638
  5933                           
  5934                           ;Lab10p1.c: 90: {
  5935                           ;Lab10p1.c: 91: Time_Elapsed = (TMR1H << 8) | TMR1L;
  5936  0001D2  50CE               	movf	4046,w,c	;volatile
  5937  0001D4  CFCF F001          	movff	4047,??_INT0_isr	;volatile
  5938  0001D8  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
  5939  0001DA  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
  5940  0001DE  6A01               	clrf	??_INT0_isr,c
  5941  0001E0  1001               	iorwf	??_INT0_isr,w,c
  5942  0001E2  6E5E               	movwf	_Time_Elapsed,c
  5943  0001E4  5002               	movf	??_INT0_isr+1,w,c
  5944  0001E6  6E5F               	movwf	_Time_Elapsed+1,c
  5945                           
  5946                           ;Lab10p1.c: 92: TMR1H = 0;
  5947  0001E8  0E00               	movlw	0
  5948  0001EA  6ECF               	movwf	4047,c	;volatile
  5949                           
  5950                           ;Lab10p1.c: 93: TMR1L = 0;
  5951  0001EC  0E00               	movlw	0
  5952  0001EE  6ECE               	movwf	4046,c	;volatile
  5953                           
  5954                           ;Lab10p1.c: 94: }
  5955                           ;Lab10p1.c: 96: switch(Nec_state)
  5956  0001F0  D08A               	goto	i2l1638
  5957  0001F2                     i2l1572:
  5958                           
  5959                           ;Lab10p1.c: 99: {
  5960                           ;Lab10p1.c: 101: TMR1H = 0;
  5961  0001F2  0E00               	movlw	0
  5962  0001F4  6ECF               	movwf	4047,c	;volatile
  5963                           
  5964                           ;Lab10p1.c: 102: TMR1L = 0;
  5965  0001F6  0E00               	movlw	0
  5966  0001F8  6ECE               	movwf	4046,c	;volatile
  5967                           
  5968                           ;Lab10p1.c: 103: PIR1bits.TMR1IF = 0;
  5969  0001FA  909E               	bcf	3998,0,c	;volatile
  5970                           
  5971                           ;Lab10p1.c: 104: T1CON= 0x90;
  5972  0001FC  0E90               	movlw	144
  5973  0001FE  6ECD               	movwf	4045,c	;volatile
  5974                           
  5975                           ;Lab10p1.c: 105: T1CONbits.TMR1ON = 1;
  5976  000200  80CD               	bsf	4045,0,c	;volatile
  5977                           
  5978                           ;Lab10p1.c: 106: bit_count = 0;
  5979  000202  0E00               	movlw	0
  5980  000204  6E69               	movwf	_bit_count,c
  5981                           
  5982                           ;Lab10p1.c: 107: Nec_code = 0;
  5983  000206  0E00               	movlw	0
  5984  000208  6E5A               	movwf	_Nec_code,c
  5985  00020A  0E00               	movlw	0
  5986  00020C  6E5B               	movwf	_Nec_code+1,c
  5987  00020E  0E00               	movlw	0
  5988  000210  6E5C               	movwf	_Nec_code+2,c
  5989  000212  0E00               	movlw	0
  5990  000214  6E5D               	movwf	_Nec_code+3,c
  5991                           
  5992                           ;Lab10p1.c: 108: Nec_state = 1;
  5993  000216  0E01               	movlw	1
  5994  000218  6E67               	movwf	_Nec_state,c
  5995  00021A  D073               	goto	i2l1632
  5996                           
  5997                           ;Lab10p1.c: 110: return;
  5998                           
  5999                           ;Lab10p1.c: 109: INTCON2bits.INTEDG0 = 1;
  6000  00021C  D085               	goto	i2l321
  6001  00021E                     i2l1582:
  6002                           
  6003                           ;Lab10p1.c: 114: {
  6004                           ;Lab10p1.c: 115: if(Time_Elapsed > 8500 && Time_Elapsed < 9500) Nec_state = 2;
  6005  00021E  0E35               	movlw	53
  6006  000220  5C5E               	subwf	_Time_Elapsed,w,c
  6007  000222  0E21               	movlw	33
  6008  000224  585F               	subwfb	_Time_Elapsed+1,w,c
  6009  000226  A0D8               	btfss	status,0,c
  6010  000228  D009               	goto	i2l1588
  6011  00022A  0E1C               	movlw	28
  6012  00022C  5C5E               	subwf	_Time_Elapsed,w,c
  6013  00022E  0E25               	movlw	37
  6014  000230  585F               	subwfb	_Time_Elapsed+1,w,c
  6015  000232  B0D8               	btfsc	status,0,c
  6016  000234  D003               	goto	i2l1588
  6017  000236  0E02               	movlw	2
  6018  000238  6E67               	movwf	_Nec_state,c
  6019  00023A  D02A               	goto	i2l1614
  6020  00023C                     i2l1588:
  6021                           
  6022                           ;Lab10p1.c: 116: else force_nec_state0();
  6023  00023C  EC20  F009         	call	_force_nec_state0	;wreg free
  6024  000240  D027               	goto	i2l1614
  6025  000242  D026               	goto	i2l1614
  6026                           
  6027                           ;Lab10p1.c: 118: return;
  6028                           
  6029                           ;Lab10p1.c: 117: INTCON2bits.INTEDG0 = 0;
  6030  000244  D071               	goto	i2l321
  6031  000246                     i2l1594:
  6032                           
  6033                           ;Lab10p1.c: 122: {
  6034                           ;Lab10p1.c: 123: if(Time_Elapsed > 4000 && Time_Elapsed < 5000) Nec_state = 3;
  6035  000246  0EA1               	movlw	161
  6036  000248  5C5E               	subwf	_Time_Elapsed,w,c
  6037  00024A  0E0F               	movlw	15
  6038  00024C  585F               	subwfb	_Time_Elapsed+1,w,c
  6039  00024E  A0D8               	btfss	status,0,c
  6040  000250  D009               	goto	i2l1600
  6041  000252  0E88               	movlw	136
  6042  000254  5C5E               	subwf	_Time_Elapsed,w,c
  6043  000256  0E13               	movlw	19
  6044  000258  585F               	subwfb	_Time_Elapsed+1,w,c
  6045  00025A  B0D8               	btfsc	status,0,c
  6046  00025C  D003               	goto	i2l1600
  6047  00025E  0E03               	movlw	3
  6048  000260  6E67               	movwf	_Nec_state,c
  6049  000262  D04F               	goto	i2l1632
  6050  000264                     i2l1600:
  6051                           
  6052                           ;Lab10p1.c: 124: else force_nec_state0();
  6053  000264  EC20  F009         	call	_force_nec_state0	;wreg free
  6054  000268  D04C               	goto	i2l1632
  6055  00026A  D04B               	goto	i2l1632
  6056                           
  6057                           ;Lab10p1.c: 126: return;
  6058                           
  6059                           ;Lab10p1.c: 125: INTCON2bits.INTEDG0 = 1;
  6060  00026C  D05D               	goto	i2l321
  6061  00026E                     i2l1606:
  6062                           
  6063                           ;Lab10p1.c: 130: {
  6064                           ;Lab10p1.c: 131: if(Time_Elapsed >= 400 && Time_Elapsed <= 700) Nec_state = 4;
  6065  00026E  0E90               	movlw	144
  6066  000270  5C5E               	subwf	_Time_Elapsed,w,c
  6067  000272  0E01               	movlw	1
  6068  000274  585F               	subwfb	_Time_Elapsed+1,w,c
  6069  000276  A0D8               	btfss	status,0,c
  6070  000278  D008               	goto	i2l1612
  6071  00027A  0EBD               	movlw	189
  6072  00027C  5C5E               	subwf	_Time_Elapsed,w,c
  6073  00027E  0E02               	movlw	2
  6074  000280  585F               	subwfb	_Time_Elapsed+1,w,c
  6075  000282  B0D8               	btfsc	status,0,c
  6076  000284  D002               	goto	i2l1612
  6077  000286  0E04               	movlw	4
  6078  000288  D7D7               	goto	L2
  6079  00028A                     i2l1612:
  6080                           
  6081                           ;Lab10p1.c: 132: else force_nec_state0();
  6082  00028A  EC20  F009         	call	_force_nec_state0	;wreg free
  6083  00028E  D000               	goto	i2l1614
  6084  000290                     i2l1614:
  6085                           
  6086                           ;Lab10p1.c: 133: INTCON2bits.INTEDG0 = 0;
  6087  000290  9CF1               	bcf	intcon2,6,c	;volatile
  6088                           
  6089                           ;Lab10p1.c: 134: return;
  6090  000292  D04A               	goto	i2l321
  6091  000294                     i2l1618:
  6092                           
  6093                           ;Lab10p1.c: 138: {
  6094                           ;Lab10p1.c: 139: if(Time_Elapsed > 400 && Time_Elapsed < 1800)
  6095  000294  0E91               	movlw	145
  6096  000296  5C5E               	subwf	_Time_Elapsed,w,c
  6097  000298  0E01               	movlw	1
  6098  00029A  585F               	subwfb	_Time_Elapsed+1,w,c
  6099  00029C  A0D8               	btfss	status,0,c
  6100  00029E  D02E               	goto	i2l1630
  6101  0002A0  0E08               	movlw	8
  6102  0002A2  5C5E               	subwf	_Time_Elapsed,w,c
  6103  0002A4  0E07               	movlw	7
  6104  0002A6  585F               	subwfb	_Time_Elapsed+1,w,c
  6105  0002A8  B0D8               	btfsc	status,0,c
  6106  0002AA  D028               	goto	i2l1630
  6107                           
  6108                           ;Lab10p1.c: 140: {
  6109                           ;Lab10p1.c: 141: Nec_code = Nec_code << 1;
  6110  0002AC  90D8               	bcf	status,0,c
  6111  0002AE  345A               	rlcf	_Nec_code,w,c
  6112  0002B0  6E5A               	movwf	_Nec_code,c
  6113  0002B2  345B               	rlcf	_Nec_code+1,w,c
  6114  0002B4  6E5B               	movwf	_Nec_code+1,c
  6115  0002B6  345C               	rlcf	_Nec_code+2,w,c
  6116  0002B8  6E5C               	movwf	_Nec_code+2,c
  6117  0002BA  345D               	rlcf	_Nec_code+3,w,c
  6118  0002BC  6E5D               	movwf	_Nec_code+3,c
  6119                           
  6120                           ;Lab10p1.c: 142: if(Time_Elapsed > 1000)
  6121  0002BE  0EE9               	movlw	233
  6122  0002C0  5C5E               	subwf	_Time_Elapsed,w,c
  6123  0002C2  0E03               	movlw	3
  6124  0002C4  585F               	subwfb	_Time_Elapsed+1,w,c
  6125  0002C6  A0D8               	btfss	status,0,c
  6126  0002C8  D00C               	goto	i2l333
  6127                           
  6128                           ;Lab10p1.c: 143: {
  6129                           ;Lab10p1.c: 144: Nec_code = Nec_code +1;
  6130  0002CA  0E01               	movlw	1
  6131  0002CC  245A               	addwf	_Nec_code,w,c
  6132  0002CE  6E5A               	movwf	_Nec_code,c
  6133  0002D0  0E00               	movlw	0
  6134  0002D2  205B               	addwfc	_Nec_code+1,w,c
  6135  0002D4  6E5B               	movwf	_Nec_code+1,c
  6136  0002D6  0E00               	movlw	0
  6137  0002D8  205C               	addwfc	_Nec_code+2,w,c
  6138  0002DA  6E5C               	movwf	_Nec_code+2,c
  6139  0002DC  0E00               	movlw	0
  6140  0002DE  205D               	addwfc	_Nec_code+3,w,c
  6141  0002E0  6E5D               	movwf	_Nec_code+3,c
  6142  0002E2                     i2l333:
  6143                           
  6144                           ;Lab10p1.c: 145: }
  6145                           ;Lab10p1.c: 146: bit_count = bit_count + 1;
  6146  0002E2  2869               	incf	_bit_count,w,c
  6147  0002E4  6E69               	movwf	_bit_count,c
  6148                           
  6149                           ;Lab10p1.c: 147: if (bit_count > 31)
  6150  0002E6  0E1F               	movlw	31
  6151  0002E8  6469               	cpfsgt	_bit_count,c
  6152  0002EA  D7B9               	goto	L3
  6153                           
  6154                           ;Lab10p1.c: 148: {
  6155                           ;Lab10p1.c: 149: nec_ok = 1;
  6156  0002EC  0E00               	movlw	0
  6157  0002EE  6E63               	movwf	_nec_ok+1,c
  6158  0002F0  0E01               	movlw	1
  6159  0002F2  6E62               	movwf	_nec_ok,c
  6160                           
  6161                           ;Lab10p1.c: 150: INTCONbits.INT0IE =0;
  6162  0002F4  98F2               	bcf	intcon,4,c	;volatile
  6163                           
  6164                           ;Lab10p1.c: 151: Nec_state = 0;
  6165  0002F6  0E00               	movlw	0
  6166  0002F8  6E67               	movwf	_Nec_state,c
  6167  0002FA  D7B1               	goto	L3
  6168  0002FC                     i2l1630:
  6169                           
  6170                           ;Lab10p1.c: 155: else force_nec_state0();
  6171  0002FC  EC20  F009         	call	_force_nec_state0	;wreg free
  6172  000300  D000               	goto	i2l1632
  6173  000302                     i2l1632:
  6174                           
  6175                           ;Lab10p1.c: 156: INTCON2bits.INTEDG0 = 1;
  6176  000302  8CF1               	bsf	intcon2,6,c	;volatile
  6177                           
  6178                           ;Lab10p1.c: 158: }
  6179                           ;Lab10p1.c: 159: }
  6180                           
  6181                           ;Lab10p1.c: 157: return;
  6182  000304  D011               	goto	i2l321
  6183  000306                     i2l1638:
  6184  000306  5067               	movf	_Nec_state,w,c
  6185                           
  6186                           ; Switch size 1, requested type "space"
  6187                           ; Number of cases is 5, Range of values is 0 to 4
  6188                           ; switch strategies available:
  6189                           ; Name         Instructions Cycles
  6190                           ; simple_byte           16     9 (average)
  6191                           ;	Chosen strategy is simple_byte
  6192  000308  0A00               	xorlw	0	; case 0
  6193  00030A  B4D8               	btfsc	status,2,c
  6194  00030C  D772               	goto	i2l1572
  6195  00030E  0A01               	xorlw	1	; case 1
  6196  000310  B4D8               	btfsc	status,2,c
  6197  000312  D785               	goto	i2l1582
  6198  000314  0A03               	xorlw	3	; case 2
  6199  000316  B4D8               	btfsc	status,2,c
  6200  000318  D796               	goto	i2l1594
  6201  00031A  0A01               	xorlw	1	; case 3
  6202  00031C  B4D8               	btfsc	status,2,c
  6203  00031E  D7A7               	goto	i2l1606
  6204  000320  0A07               	xorlw	7	; case 4
  6205  000322  B4D8               	btfsc	status,2,c
  6206  000324  D7B7               	goto	i2l1618
  6207  000326  D000               	goto	i2l321
  6208  000328                     i2l321:
  6209  000328  0012               	return		;funcret
  6210  00032A                     __end_of_INT0_isr:
  6211                           	opt stack 0
  6212                           pclatu	equ	0xFFB
  6213                           pclath	equ	0xFFA
  6214                           tblptru	equ	0xFF8
  6215                           tblptrh	equ	0xFF7
  6216                           tblptrl	equ	0xFF6
  6217                           tablat	equ	0xFF5
  6218                           prodh	equ	0xFF4
  6219                           prodl	equ	0xFF3
  6220                           intcon	equ	0xFF2
  6221                           intcon2	equ	0xFF1
  6222                           postinc0	equ	0xFEE
  6223                           fsr0h	equ	0xFEA
  6224                           fsr0l	equ	0xFE9
  6225                           wreg	equ	0xFE8
  6226                           postdec1	equ	0xFE5
  6227                           fsr1h	equ	0xFE2
  6228                           fsr1l	equ	0xFE1
  6229                           indf2	equ	0xFDF
  6230                           postinc2	equ	0xFDE
  6231                           postdec2	equ	0xFDD
  6232                           fsr2h	equ	0xFDA
  6233                           fsr2l	equ	0xFD9
  6234                           status	equ	0xFD8
  6235                           
  6236 ;; *************** function _force_nec_state0 *****************
  6237 ;; Defined at:
  6238 ;;		line 80 in file "Lab10p1.c"
  6239 ;; Parameters:    Size  Location     Type
  6240 ;;		None
  6241 ;; Auto vars:     Size  Location     Type
  6242 ;;		None
  6243 ;; Return value:  Size  Location     Type
  6244 ;;		None               void
  6245 ;; Registers used:
  6246 ;;		wreg, status,2
  6247 ;; Tracked objects:
  6248 ;;		On entry : 0/0
  6249 ;;		On exit  : 0/0
  6250 ;;		Unchanged: 0/0
  6251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6256 ;;Total ram usage:        0 bytes
  6257 ;; Hardware stack levels used:    1
  6258 ;; This function calls:
  6259 ;;		Nothing
  6260 ;; This function is called by:
  6261 ;;		_INT0_isr
  6262 ;; This function uses a non-reentrant model
  6263 ;;
  6264                           
  6265                           	psect	text33
  6266  001240                     __ptext33:
  6267                           	opt stack 0
  6268  001240                     _force_nec_state0:
  6269                           	opt stack 20
  6270                           
  6271                           ;Lab10p1.c: 82: Nec_state=0;
  6272                           
  6273                           ;incstack = 0
  6274  001240  0E00               	movlw	0
  6275  001242  6E67               	movwf	_Nec_state,c
  6276                           
  6277                           ;Lab10p1.c: 83: T1CONbits.TMR1ON = 0;
  6278  001244  90CD               	bcf	4045,0,c	;volatile
  6279  001246  0012               	return		;funcret
  6280  001248                     __end_of_force_nec_state0:
  6281                           	opt stack 0
  6282                           pclatu	equ	0xFFB
  6283                           pclath	equ	0xFFA
  6284                           tblptru	equ	0xFF8
  6285                           tblptrh	equ	0xFF7
  6286                           tblptrl	equ	0xFF6
  6287                           tablat	equ	0xFF5
  6288                           prodh	equ	0xFF4
  6289                           prodl	equ	0xFF3
  6290                           intcon	equ	0xFF2
  6291                           intcon2	equ	0xFF1
  6292                           postinc0	equ	0xFEE
  6293                           fsr0h	equ	0xFEA
  6294                           fsr0l	equ	0xFE9
  6295                           wreg	equ	0xFE8
  6296                           postdec1	equ	0xFE5
  6297                           fsr1h	equ	0xFE2
  6298                           fsr1l	equ	0xFE1
  6299                           indf2	equ	0xFDF
  6300                           postinc2	equ	0xFDE
  6301                           postdec2	equ	0xFDD
  6302                           fsr2h	equ	0xFDA
  6303                           fsr2l	equ	0xFD9
  6304                           status	equ	0xFD8
  6305                           pclatu	equ	0xFFB
  6306                           pclath	equ	0xFFA
  6307                           tblptru	equ	0xFF8
  6308                           tblptrh	equ	0xFF7
  6309                           tblptrl	equ	0xFF6
  6310                           tablat	equ	0xFF5
  6311                           prodh	equ	0xFF4
  6312                           prodl	equ	0xFF3
  6313                           intcon	equ	0xFF2
  6314                           intcon2	equ	0xFF1
  6315                           postinc0	equ	0xFEE
  6316                           fsr0h	equ	0xFEA
  6317                           fsr0l	equ	0xFE9
  6318                           wreg	equ	0xFE8
  6319                           postdec1	equ	0xFE5
  6320                           fsr1h	equ	0xFE2
  6321                           fsr1l	equ	0xFE1
  6322                           indf2	equ	0xFDF
  6323                           postinc2	equ	0xFDE
  6324                           postdec2	equ	0xFDD
  6325                           fsr2h	equ	0xFDA
  6326                           fsr2l	equ	0xFD9
  6327                           status	equ	0xFD8
  6328                           
  6329                           	psect	rparam
  6330  0000                     pclatu	equ	0xFFB
  6331                           pclath	equ	0xFFA
  6332                           tblptru	equ	0xFF8
  6333                           tblptrh	equ	0xFF7
  6334                           tblptrl	equ	0xFF6
  6335                           tablat	equ	0xFF5
  6336                           prodh	equ	0xFF4
  6337                           prodl	equ	0xFF3
  6338                           intcon	equ	0xFF2
  6339                           intcon2	equ	0xFF1
  6340                           postinc0	equ	0xFEE
  6341                           fsr0h	equ	0xFEA
  6342                           fsr0l	equ	0xFE9
  6343                           wreg	equ	0xFE8
  6344                           postdec1	equ	0xFE5
  6345                           fsr1h	equ	0xFE2
  6346                           fsr1l	equ	0xFE1
  6347                           indf2	equ	0xFDF
  6348                           postinc2	equ	0xFDE
  6349                           postdec2	equ	0xFDD
  6350                           fsr2h	equ	0xFDA
  6351                           fsr2l	equ	0xFD9
  6352                           status	equ	0xFD8


Data Sizes:
    Strings     66
    Constant    483
    Data        148
    BSS         50
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     67     108
    BANK0           128      7      80
    BANK1           256      0      84
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_3(CODE[8]), STR_2(CODE[22]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_1(CODE[19]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 


Critical Paths under _main in COMRAM

    _main->_drawtext
    _main->_fillCircle
    _printf->___lwdiv
    _init_UART->_OpenUSART
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_drawtext
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   48658
                                             66 COMRAM     1     1      0
                  _Initialize_Screen
                         _drawCircle
                           _drawtext
                         _fillCircle
                          _init_UART
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              25    17      8     684
                                             23 COMRAM    16     8      8
                            ___lwdiv
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     268
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     273
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _fillCircle                                           8     0      8    8344
                                             58 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (2) _fillCircleHelper                                    24    12     12    4703
                                             34 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (1) _drawCircle                                          20    12      8    6484
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   20381
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     287
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (1) _drawtext                                            17     9      8   12396
                                             56 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _drawChar                                            11     4      7   10514
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (3) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    3844
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    1792
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    1792
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1662
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1662
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     622
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (11) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _drawCircle
     _drawPixel
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_data
         _spiwrite
   _drawtext
     _drawChar
       ___wmul
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _strlen
   _fillCircle
     _drawFastVLine
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _spiwrite
     _fillCircleHelper
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
   _init_UART
     _OpenUSART
   _printf
     ___lwdiv
     _putch

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      54       7       32.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      7      50       5       62.5%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     43      6C       1       85.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     110      34        0.0%
DATA                 0      0     110       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Nov 03 15:52:56 2022

                     drawCircle@f 002A                       drawCircle@r 0020  
                     drawCircle@x 002C                       drawCircle@y 002E  
                               _i 006B                       _SSPSTATbits 000FC7  
                    drawCircle@x0 001C                      drawCircle@y0 001E  
                              l35 0FA4                                l45 11DE  
                              l95 0CE8                                l89 1120  
             ___wmul@multiplicand 0013                               l111 047E  
                             l120 03D4                               l113 0358  
                             l151 0BAE                               l152 0BD0  
                             l410 0E3C                               l403 0E14  
                             l148 0BD2                               l412 0E56  
                             l149 0B3E                               l415 119C  
                             l159 00DE                               l407 0E2E  
                             l408 0E30                               l177 04EE  
                             l409 0E3A                               l373 0770  
                             l298 122A                               l379 07EA  
                             l933 0EAA                               l972 1080  
                             _nbr 0060                               _txt 0064  
                             prod 000FF3                               wreg 000FE8  
                 ??_fillRectangle 001D                      __CFG_LVP$OFF 000000  
         _TFT_GreenTab_Initialize 114C                      __CFG_WDT$OFF 000000  
                  drawFastVLine@h 0019                              l3100 0354  
                            l3110 0394                              l3102 035C  
                            l3112 03C8                              l3130 044A  
                            l3122 03F6                              l3114 03CC  
                            l3106 0364                              l2410 0E0C  
                            l2402 0DFA                              l3132 0472  
                            l3124 041E                    drawFastVLine@x 0022  
                  drawFastVLine@y 0018                              l3230 09E8  
                            l3222 0996                              l3206 0928  
                            l2422 0E26                              l2414 0E18  
                            l2406 0E04                              l3144 104E  
                            l3232 09F0                              l3304 00C4  
                            l2600 07C2                              l3138 047A  
                            l3146 1054                              l3218 0978  
                            l3162 0B76                              l2450 10D4  
                            l2602 07CE                              l3092 033A  
                            l3156 0B08                              l3332 01B4  
                            l3260 0550                              l3244 04D4  
                            l2460 0E78                              l3182 0BBC  
                            l3174 0BA4                              l2470 0E9E  
                            l2462 0E80                              l3096 0346  
                            l2448 10CA                              l3264 05A2  
                            l3178 0BB2                              l2458 0E6E  
                            l2570 06F2                              l3188 0BCC  
                            l2590 076C                              l2582 073C  
                            l2574 0700                              l2566 06E2  
                            l2576 0720                              l2594 0776  
                            l2586 0748                              l2940 0C72  
                            l3652 060E                              l2944 0CAA  
                            l2954 0CD0                              l2956 0CDE  
                            l2982 1102                              l2990 1004  
                            l2994 1020                              STR_1 FFD2  
                            STR_2 FFBC                              STR_3 FFF6  
                            STR_4 FFE5                              u2100 0B36  
                            u2030 042C                              u2110 0B6C  
                            u2170 0952                              u1870 0CA0  
                            _TRMT 007D61                              _main 05B8  
                            _font FDD9                              fsr0h 000FEA  
                            _txt1 0100                              fsr1h 000FE2  
                            fsr0l 000FE9                              fsr2h 000FDA  
                            fsr1l 000FE1                              indf2 000FDF  
                            fsr2l 000FD9                              _wrap 0059  
                            pclat 000FFA                __size_of_LCD_Reset 0012  
                            prodh 000FF4                              prodl 000FF3  
                            start 0018                   ??_drawFastVLine 001C  
                    ___param_bank 000010                       ?_TIMER1_isr 0001  
                __end_of_INT0_isr 032A                   drawFastVLine@hi 0020  
                 drawFastVLine@lo 0021                             ?_main 0001  
                 drawCircle@ddF_x 0026                   drawCircle@ddF_y 0028  
                           _T1CON 000FCD                             _T3CON 000FB1  
                 __end_of___lwdiv 0EB4                             i2l321 0328  
                           i2l333 02E2                             i2l309 0DAE  
                 drawCircle@color 0022                             _RCSTA 000FAB  
                           _TMR1H 000FCF                             _TMR3H 000FB3  
                           _TMR1L 000FCE                             _TMR3L 000FB2  
                           _SPBRG 000FAF                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TXREG 000FAD                             _TXSTA 000FAC  
                           _Rcmd1 07EC                             _Rcmd3 0A06  
                           _nRBPU 007F8F                             _color 0080  
                           _font2 FED8             fillCircleHelper@ddF_x 0031  
           fillCircleHelper@ddF_y 0033             fillCircleHelper@delta 002B  
                           _putch 1226             fillCircleHelper@color 002D  
                  __CFG_BOREN$OFF 000000                             tablat 000FF5  
                           status 000FD8                   write_data@data_ 0013  
                 __initialization 0CEA                      __end_of_main 06D8  
                    __end_of_font FED8                  __end_of_Rcmd2red 10C0  
                          ??_main 0043                     __activetblptr 000002  
               __end_of_LCD_Reset 11F6         ??_TFT_GreenTab_Initialize 001D  
                          ?_Rcmd1 0001                            ?_Rcmd3 0001  
                          _ADCON1 000FC1                            ?_putch 0001  
                          i2l1600 0264                            i2l1612 028A  
                          i2l1630 02FC                            i2l1614 0290  
                          i2l1606 026E                            i2l1632 0302  
                          i2l1618 0294                            i2l1572 01F2  
                          i2l1582 021E                            i2l1638 0306  
                          i2l1594 0246                            i2l1588 023C  
                          i2l1936 0DA4                            _OSCCON 000FD3  
             __size_of_TIMER1_isr 000C                            _SPBRGH 000FB0  
                          _SSPBUF 000FC9                  _force_nec_state0 1240  
                __end_of_delay_ms 0FAC                  __end_of_fillRect 1044  
                __end_of_drawChar 0480                __size_of_OpenUSART 0070  
                          ___wmul 1176         __size_of_fillCircleHelper 0138  
                __end_of_drawtext 0A06                            _chkisr 0008  
                       ??___lwdiv 0015                            _array1 0044  
                          _buffer 00AA                            _nec_ok 0062  
                          clear_0 0CF0                            clear_1 0CFC  
                          _printf 06D8                      drawtext@size 0040  
                          _strcpy 10C0                            _strlen 1044  
                    __pdataCOMRAM 0044                      __mediumconst FDD8  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                            putch@c 0011  
                __end_of_spiwrite 11E4                        __accesstop 0080  
         __end_of__initialization 0D62                         ?_INT0_isr 0001  
                   ___rparam_used 000001                     __end_of_Rcmd1 08FC  
                   __end_of_Rcmd3 0AF8                    __pcstackCOMRAM 0001  
                    __pidataBANK0 1122                      __pidataBANK1 0EB4  
                   __end_of_font2 FFB4                     __end_of_putch 1234  
                  drawPixel@color 0019            __size_of_write_command 0010  
      fillCircleHelper@cornername 0029                           ??_Rcmd1 001D  
                         ??_Rcmd3 001D                __size_of_drawPixel 0030  
               __end_of_OpenUSART 0E58                           ??_putch 0011  
                      __pbssBANK0 00AA                         ?_Rcmd2red 0001  
              __size_of_init_UART 0010                   spiwrite@spidata 0012  
                      ??_INT0_isr 0001                __CFG_CCP2MX$PORTBE 000000  
                         ?___wmul 0011                           ?_chkisr 0001  
          __size_of_setAddrWindow 004E                      ??_TIMER1_isr 0001  
                      _fillCircle 0F08                           ?_printf 0018  
                         ?_strcpy 0011                           ?_strlen 0011  
                      _fillScreen 119E                        _drawCircle 001C  
                       ?_delay_ms 0017                         ?_fillRect 0023  
                       ?_drawChar 002E                           _SSPCON1 000FC6  
                         _SSPSTAT 000FC7             __end_of_fillRectangle 0BD4  
                       ?_drawtext 0039                        ??_Rcmd2red 0014  
              __end_of_TIMER1_isr 1240                     _write_command 1216  
                         __Hparam 0000                           __Lparam 0000  
               __end_of_drawPixel 1122             __end_of_drawFastVLine 0CEA  
                _fillCircleHelper 0480                   __size_of___wmul 0028  
                         ___lwdiv 0E58                   __size_of_chkisr 0DE0  
                       ?_spiwrite 0001                           __pcinit 0CEA  
                         __ramtop 1000                           __ptext0 05B8  
                         __ptext1 06D8                           __ptext2 1226  
                         __ptext3 0E58                           __ptext4 11F6  
                         __ptext5 0DE8                           __ptext6 0F08  
                         __ptext7 0480                           __ptext8 001C  
                         __ptext9 0BD4                   __size_of_printf 0114  
               __end_of_init_UART 1206                   __size_of_strcpy 0032  
                 __size_of_strlen 003E                 __end_of_hexpowers FFBC  
        __end_of_force_nec_state0 1248                         _T1CONbits 000FCD  
                       _T3CONbits 000FB1                        ??_delay_ms 0019  
                   drawtext@_text 003A                     drawtext@color 003C  
                      ??_fillRect 0028                        ??_drawChar 0035  
                       _LCD_Reset 11E4                     _setAddrWindow 0FAC  
                  __pintcode_body 0D6C                        delay_ms@ms 0017  
            end_of_initialization 0D62                        ??_drawtext 0041  
                  ?_write_command 0001                     __Lmediumconst FDD8  
                         int_func 0D6C                         _RCSTAbits 000FAB  
                         printf@c 0027                           printf@f 0018  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc2 000FDE  
                      ??_spiwrite 0011                           strlen@s 0011  
                 fillCircle@color 0041                       ?_fillCircle 003B  
                drawtext@cursor_x 00CF                  drawtext@cursor_y 00CE  
                       _PORTCbits 000F82                       ?_fillScreen 0024  
                     ?_drawCircle 001C                        drawChar@bg 0032  
                       _TRISCbits 000F94                    ?_setAddrWindow 0014  
                      ?_LCD_Reset 0001                  drawtext@textsize 00CA  
                      drawPixel@x 001B                        drawPixel@y 0018  
                       _TXSTAbits 000FAC                 __size_of_INT0_isr 0160  
                  __end_of___wmul 119E                     delay_ms@count 001B  
                      _write_data 1206                     __pidataCOMRAM 11BA  
                  __end_of_chkisr 0DE8          ?_TFT_GreenTab_Initialize 0001  
                      drawtext@bg 003E                         _Nec_code1 0066  
                  __end_of_printf 07EC                    __end_of_strcpy 10F2  
                  __end_of_strlen 1082                         _Nec_state 0067  
             start_initialization 0CEA                   ??_write_command 0013  
                       _OpenUSART 0DE8               __size_of_fillCircle 0052  
                __CFG_OSC$INTIO67 000000                 __size_of_Rcmd2red 003E  
             __size_of_fillScreen 001C               __size_of_drawCircle 01AE  
                        ??___wmul 0015                          ??_chkisr 0003  
                     __pdataBANK0 0080                       __pdataBANK1 0100  
                 setAddrWindow@x0 0017                   setAddrWindow@x1 0015  
                 setAddrWindow@y0 0014                   setAddrWindow@y1 0016  
                        ??_printf 0020                          ??_strcpy 0015  
                        ??_strlen 0013                       __pbssCOMRAM 005A  
                 ??_setAddrWindow 0017                     __pcstackBANK0 00C9  
                     ??_LCD_Reset 001D          __end_of_fillCircleHelper 05B8  
               __size_of_delay_ms 0052                 __size_of_fillRect 004A  
               __size_of_drawChar 0156                        ?_OpenUSART 0011  
               __size_of_drawtext 010A                  ___lwdiv@dividend 0011  
                       _bit_count 0069                         __pintcode 0008  
 __end_of_TFT_GreenTab_Initialize 1176                     __pmediumconst FDD8  
                       __tft_type 0068                          ?___lwdiv 0011  
              drawFastVLine@color 001A                       ?_write_data 0001  
                       _drawPixel 10F2                 __size_of_spiwrite 0014  
               ?_force_nec_state0 0001                 _Initialize_Screen 0BD4  
                  __size_of_Rcmd1 0110                    __size_of_Rcmd3 00F2  
                       _init_UART 11F6                ??_force_nec_state0 0001  
                       _hexpowers FFB4                ?_Initialize_Screen 0001  
                ___lwdiv@quotient 0015                    __size_of_putch 000E  
                  ___wmul@product 0015               ??_Initialize_Screen 0043  
                        _INT0_isr 01CA                          _PIE1bits 000F9D  
                        _PIR1bits 000F9E                          _PIR2bits 000FA1  
                       fillRect@h 0025                         fillRect@i 002C  
                       fillRect@w 0024                         fillRect@x 002B  
                       fillRect@y 0023                         drawChar@c 002F  
                       drawChar@i 0038                         drawChar@j 0037  
                    ??_fillCircle 0043                         drawChar@x 0036  
                       drawChar@y 002E                        ?_drawPixel 0018  
          __size_of_fillRectangle 00DC                 ___wmul@multiplier 0011  
       __end_of_Initialize_Screen 0C62                      ??_fillScreen 0026  
                    ??_drawCircle 0024                        printf@flag 0020  
                      printf@prec 0026                         main@found 0043  
                      ?_init_UART 0001                       _INTCON2bits 000FF1  
                       copy_data0 0D16                         copy_data1 0D36  
                       copy_data2 0D56                         drawtext@i 00CC  
          __size_of_drawFastVLine 0088                         drawtext@x 00C9  
                       drawtext@y 0039                          _Nec_code 005A  
               write_command@cmd_ 0013                       ??_OpenUSART 0013  
                        _Rcmd2red 1082               __size_of_write_data 0010  
                 OpenUSART@config 0013                      _Time_Elapsed 005E  
              __end_of_fillCircle 0F5A                          __Hrparam 0000  
              __end_of_fillScreen 11BA                          __Lrparam 0000  
              __end_of_drawCircle 01CA                  __size_of___lwdiv 005C  
                        _delay_ms 0F5A                   ___lwdiv@divisor 0013  
                 ___lwdiv@counter 0017                          __ptext10 10C0  
                        __ptext11 119E                          __ptext20 114C  
                        __ptext12 0AF8                          __ptext21 0A06  
                        __ptext13 08FC                          __ptext22 1082  
                        __ptext14 1044                          __ptext31 1234  
                        __ptext23 07EC                          __ptext15 032A  
                        __ptext32 01CA                          __ptext24 1206  
                        __ptext16 0FFA                          __ptext33 1240  
                        __ptext25 1216                          __ptext17 0C62  
                        __ptext26 11D0                          __ptext18 10F2  
                        __ptext27 11E4                          __ptext19 0FAC  
                        __ptext28 0F5A                          __ptext29 1176  
                        _fillRect 0FFA                          _drawChar 032A  
__size_of_TFT_GreenTab_Initialize 002A                          _colstart 006A  
                        _drawtext 08FC                        strcpy@from 0013  
                   _fillRectangle 0AF8                     __size_of_main 0120  
                 fillRectangle@hi 0021                   fillRectangle@lo 0022  
                   _drawFastVLine 0C62                         printf@idx 0023  
                        _spiwrite 11D0                         printf@val 0024  
                     ??_drawPixel 001B                          _rowstart 006C  
              fillCircleHelper@x0 0023                fillCircleHelper@y0 0025  
      __size_of_Initialize_Screen 008E                        _INTCONbits 000FF2  
                  OpenUSART@spbrg 0011                       ??_init_UART 0014  
               ?_fillCircleHelper 0023                         spiwrite@x 0011  
                        intlevel2 0000                    ?_fillRectangle 0018  
              ??_fillCircleHelper 002F             __end_of_write_command 1226  
                 fillScreen@color 0024                      fillCircle@x0 003B  
                    fillCircle@y0 003D                    fillRectangle@h 001A  
                  fillRectangle@w 0019                    fillRectangle@x 0023  
                  fillRectangle@y 0018                    ?_drawFastVLine 0018  
                        printf@ap 0021                 fillCircleHelper@f 0035  
               fillCircleHelper@r 0027                 fillCircleHelper@x 0037  
               fillCircleHelper@y 0039                      ??_write_data 0013  
                      _TIMER1_isr 1234                     fillRect@color 0026  
                        strcpy@cp 0015                          strlen@cp 0015  
                        strcpy@to 0011                       fillCircle@r 003F  
           __end_of_setAddrWindow 0FFA                fillRectangle@color 001B  
                   drawChar@color 0030                __end_of_write_data 1216  
       __size_of_force_nec_state0 0008                      drawChar@line 0035  
                    drawChar@size 0034  
