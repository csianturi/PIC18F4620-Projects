

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Nov 02 18:54:37 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    87                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    92                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    93  0000                     
    94                           	psect	idataCOMRAM
    95  003C42                     __pidataCOMRAM:
    96                           	opt stack 0
    97                           
    98                           ;initializer for _wrap
    99  003C42  01                 	db	1
   100                           
   101                           	psect	idataBANK0
   102  003A2A                     __pidataBANK0:
   103                           	opt stack 0
   104                           
   105                           ;initializer for _LED_7seg
   106  003A2A  40                 	db	64
   107  003A2B  79                 	db	121
   108  003A2C  24                 	db	36
   109  003A2D  30                 	db	48
   110  003A2E  19                 	db	25
   111  003A2F  12                 	db	18
   112  003A30  02                 	db	2
   113  003A31  78                 	db	120
   114  003A32  00                 	db	0
   115  003A33  18                 	db	24
   116                           
   117                           ;initializer for _EWLT_Count
   118  003A34  30                 	db	48
   119  003A35  30                 	db	48
   120  003A36  00                 	db	0
   121                           
   122                           ;initializer for _EW_Count
   123  003A37  30                 	db	48
   124  003A38  30                 	db	48
   125  003A39  00                 	db	0
   126                           
   127                           ;initializer for _NSLT_Count
   128  003A3A  30                 	db	48
   129  003A3B  30                 	db	48
   130  003A3C  00                 	db	0
   131                           
   132                           ;initializer for _NS_Count
   133  003A3D  30                 	db	48
   134  003A3E  30                 	db	48
   135  003A3F  00                 	db	0
   136                           
   137                           ;initializer for _PED_EW_Count
   138  003A40  30                 	db	48
   139  003A41  30                 	db	48
   140  003A42  00                 	db	0
   141                           
   142                           ;initializer for _PED_NS_Count
   143  003A43  30                 	db	48
   144  003A44  30                 	db	48
   145  003A45  00                 	db	0
   146                           
   147                           ;initializer for _Act_Mode_Txt
   148  003A46  44                 	db	68
   149  003A47  00                 	db	0
   150                           
   151                           ;initializer for _FlashingR_Txt
   152  003A48  30                 	db	48
   153  003A49  00                 	db	0
   154                           
   155                           ;initializer for _FlashingS_Txt
   156  003A4A  30                 	db	48
   157  003A4B  00                 	db	0
   158                           
   159                           ;initializer for _SW_EWLT_Txt
   160  003A4C  30                 	db	48
   161  003A4D  00                 	db	0
   162                           
   163                           ;initializer for _SW_EWPED_Txt
   164  003A4E  30                 	db	48
   165  003A4F  00                 	db	0
   166                           
   167                           ;initializer for _SW_MODE_Txt
   168  003A50  44                 	db	68
   169  003A51  00                 	db	0
   170                           
   171                           ;initializer for _SW_NSLT_Txt
   172  003A52  30                 	db	48
   173  003A53  00                 	db	0
   174                           
   175                           ;initializer for _SW_NSPED_Txt
   176  003A54  30                 	db	48
   177  003A55  00                 	db	0
   178                           
   179                           	psect	mediumconst
   180  00FD32                     __pmediumconst:
   181                           	opt stack 0
   182  00FD32  00                 	db	0
   183  00FD33                     _font:
   184                           	opt stack 0
   185  00FD33  00                 	db	0
   186  00FD34  00                 	db	0
   187  00FD35  00                 	db	0
   188  00FD36  00                 	db	0
   189  00FD37  00                 	db	0
   190  00FD38  00                 	db	0
   191  00FD39  00                 	db	0
   192  00FD3A  5F                 	db	95
   193  00FD3B  00                 	db	0
   194  00FD3C  00                 	db	0
   195  00FD3D  00                 	db	0
   196  00FD3E  07                 	db	7
   197  00FD3F  00                 	db	0
   198  00FD40  07                 	db	7
   199  00FD41  00                 	db	0
   200  00FD42  14                 	db	20
   201  00FD43  7F                 	db	127
   202  00FD44  14                 	db	20
   203  00FD45  7F                 	db	127
   204  00FD46  14                 	db	20
   205  00FD47  24                 	db	36
   206  00FD48  2A                 	db	42
   207  00FD49  7F                 	db	127
   208  00FD4A  2A                 	db	42
   209  00FD4B  12                 	db	18
   210  00FD4C  23                 	db	35
   211  00FD4D  13                 	db	19
   212  00FD4E  08                 	db	8
   213  00FD4F  64                 	db	100
   214  00FD50  62                 	db	98
   215  00FD51  36                 	db	54
   216  00FD52  49                 	db	73
   217  00FD53  56                 	db	86
   218  00FD54  20                 	db	32
   219  00FD55  50                 	db	80
   220  00FD56  00                 	db	0
   221  00FD57  08                 	db	8
   222  00FD58  07                 	db	7
   223  00FD59  03                 	db	3
   224  00FD5A  00                 	db	0
   225  00FD5B  00                 	db	0
   226  00FD5C  1C                 	db	28
   227  00FD5D  22                 	db	34
   228  00FD5E  41                 	db	65
   229  00FD5F  00                 	db	0
   230  00FD60  00                 	db	0
   231  00FD61  41                 	db	65
   232  00FD62  22                 	db	34
   233  00FD63  1C                 	db	28
   234  00FD64  00                 	db	0
   235  00FD65  2A                 	db	42
   236  00FD66  1C                 	db	28
   237  00FD67  7F                 	db	127
   238  00FD68  1C                 	db	28
   239  00FD69  2A                 	db	42
   240  00FD6A  08                 	db	8
   241  00FD6B  08                 	db	8
   242  00FD6C  3E                 	db	62
   243  00FD6D  08                 	db	8
   244  00FD6E  08                 	db	8
   245  00FD6F  00                 	db	0
   246  00FD70  80                 	db	128
   247  00FD71  70                 	db	112
   248  00FD72  30                 	db	48
   249  00FD73  00                 	db	0
   250  00FD74  08                 	db	8
   251  00FD75  08                 	db	8
   252  00FD76  08                 	db	8
   253  00FD77  08                 	db	8
   254  00FD78  08                 	db	8
   255  00FD79  00                 	db	0
   256  00FD7A  00                 	db	0
   257  00FD7B  60                 	db	96
   258  00FD7C  60                 	db	96
   259  00FD7D  00                 	db	0
   260  00FD7E  20                 	db	32
   261  00FD7F  10                 	db	16
   262  00FD80  08                 	db	8
   263  00FD81  04                 	db	4
   264  00FD82  02                 	db	2
   265  00FD83  3E                 	db	62
   266  00FD84  51                 	db	81
   267  00FD85  49                 	db	73
   268  00FD86  45                 	db	69
   269  00FD87  3E                 	db	62
   270  00FD88  00                 	db	0
   271  00FD89  42                 	db	66
   272  00FD8A  7F                 	db	127
   273  00FD8B  40                 	db	64
   274  00FD8C  00                 	db	0
   275  00FD8D  72                 	db	114
   276  00FD8E  49                 	db	73
   277  00FD8F  49                 	db	73
   278  00FD90  49                 	db	73
   279  00FD91  46                 	db	70
   280  00FD92  21                 	db	33
   281  00FD93  41                 	db	65
   282  00FD94  49                 	db	73
   283  00FD95  4D                 	db	77
   284  00FD96  33                 	db	51
   285  00FD97  18                 	db	24
   286  00FD98  14                 	db	20
   287  00FD99  12                 	db	18
   288  00FD9A  7F                 	db	127
   289  00FD9B  10                 	db	16
   290  00FD9C  27                 	db	39
   291  00FD9D  45                 	db	69
   292  00FD9E  45                 	db	69
   293  00FD9F  45                 	db	69
   294  00FDA0  39                 	db	57
   295  00FDA1  3C                 	db	60
   296  00FDA2  4A                 	db	74
   297  00FDA3  49                 	db	73
   298  00FDA4  49                 	db	73
   299  00FDA5  31                 	db	49
   300  00FDA6  41                 	db	65
   301  00FDA7  21                 	db	33
   302  00FDA8  11                 	db	17
   303  00FDA9  09                 	db	9
   304  00FDAA  07                 	db	7
   305  00FDAB  36                 	db	54
   306  00FDAC  49                 	db	73
   307  00FDAD  49                 	db	73
   308  00FDAE  49                 	db	73
   309  00FDAF  36                 	db	54
   310  00FDB0  46                 	db	70
   311  00FDB1  49                 	db	73
   312  00FDB2  49                 	db	73
   313  00FDB3  29                 	db	41
   314  00FDB4  1E                 	db	30
   315  00FDB5  00                 	db	0
   316  00FDB6  00                 	db	0
   317  00FDB7  14                 	db	20
   318  00FDB8  00                 	db	0
   319  00FDB9  00                 	db	0
   320  00FDBA  00                 	db	0
   321  00FDBB  40                 	db	64
   322  00FDBC  34                 	db	52
   323  00FDBD  00                 	db	0
   324  00FDBE  00                 	db	0
   325  00FDBF  00                 	db	0
   326  00FDC0  08                 	db	8
   327  00FDC1  14                 	db	20
   328  00FDC2  22                 	db	34
   329  00FDC3  41                 	db	65
   330  00FDC4  14                 	db	20
   331  00FDC5  14                 	db	20
   332  00FDC6  14                 	db	20
   333  00FDC7  14                 	db	20
   334  00FDC8  14                 	db	20
   335  00FDC9  00                 	db	0
   336  00FDCA  41                 	db	65
   337  00FDCB  22                 	db	34
   338  00FDCC  14                 	db	20
   339  00FDCD  08                 	db	8
   340  00FDCE  02                 	db	2
   341  00FDCF  01                 	db	1
   342  00FDD0  59                 	db	89
   343  00FDD1  09                 	db	9
   344  00FDD2  06                 	db	6
   345  00FDD3  3E                 	db	62
   346  00FDD4  41                 	db	65
   347  00FDD5  5D                 	db	93
   348  00FDD6  59                 	db	89
   349  00FDD7  4E                 	db	78
   350  00FDD8  7C                 	db	124
   351  00FDD9  12                 	db	18
   352  00FDDA  11                 	db	17
   353  00FDDB  12                 	db	18
   354  00FDDC  7C                 	db	124
   355  00FDDD  7F                 	db	127
   356  00FDDE  49                 	db	73
   357  00FDDF  49                 	db	73
   358  00FDE0  49                 	db	73
   359  00FDE1  36                 	db	54
   360  00FDE2  3E                 	db	62
   361  00FDE3  41                 	db	65
   362  00FDE4  41                 	db	65
   363  00FDE5  41                 	db	65
   364  00FDE6  22                 	db	34
   365  00FDE7  7F                 	db	127
   366  00FDE8  41                 	db	65
   367  00FDE9  41                 	db	65
   368  00FDEA  41                 	db	65
   369  00FDEB  3E                 	db	62
   370  00FDEC  7F                 	db	127
   371  00FDED  49                 	db	73
   372  00FDEE  49                 	db	73
   373  00FDEF  49                 	db	73
   374  00FDF0  41                 	db	65
   375  00FDF1  7F                 	db	127
   376  00FDF2  09                 	db	9
   377  00FDF3  09                 	db	9
   378  00FDF4  09                 	db	9
   379  00FDF5  01                 	db	1
   380  00FDF6  3E                 	db	62
   381  00FDF7  41                 	db	65
   382  00FDF8  41                 	db	65
   383  00FDF9  51                 	db	81
   384  00FDFA  73                 	db	115
   385  00FDFB  7F                 	db	127
   386  00FDFC  08                 	db	8
   387  00FDFD  08                 	db	8
   388  00FDFE  08                 	db	8
   389  00FDFF  7F                 	db	127
   390  00FE00  00                 	db	0
   391  00FE01  41                 	db	65
   392  00FE02  7F                 	db	127
   393  00FE03  41                 	db	65
   394  00FE04  00                 	db	0
   395  00FE05  20                 	db	32
   396  00FE06  40                 	db	64
   397  00FE07  41                 	db	65
   398  00FE08  3F                 	db	63
   399  00FE09  01                 	db	1
   400  00FE0A  7F                 	db	127
   401  00FE0B  08                 	db	8
   402  00FE0C  14                 	db	20
   403  00FE0D  22                 	db	34
   404  00FE0E  41                 	db	65
   405  00FE0F  7F                 	db	127
   406  00FE10  40                 	db	64
   407  00FE11  40                 	db	64
   408  00FE12  40                 	db	64
   409  00FE13  40                 	db	64
   410  00FE14  7F                 	db	127
   411  00FE15  02                 	db	2
   412  00FE16  1C                 	db	28
   413  00FE17  02                 	db	2
   414  00FE18  7F                 	db	127
   415  00FE19  7F                 	db	127
   416  00FE1A  04                 	db	4
   417  00FE1B  08                 	db	8
   418  00FE1C  10                 	db	16
   419  00FE1D  7F                 	db	127
   420  00FE1E  3E                 	db	62
   421  00FE1F  41                 	db	65
   422  00FE20  41                 	db	65
   423  00FE21  41                 	db	65
   424  00FE22  3E                 	db	62
   425  00FE23  7F                 	db	127
   426  00FE24  09                 	db	9
   427  00FE25  09                 	db	9
   428  00FE26  09                 	db	9
   429  00FE27  06                 	db	6
   430  00FE28  3E                 	db	62
   431  00FE29  41                 	db	65
   432  00FE2A  51                 	db	81
   433  00FE2B  21                 	db	33
   434  00FE2C  5E                 	db	94
   435  00FE2D  7F                 	db	127
   436  00FE2E  09                 	db	9
   437  00FE2F  19                 	db	25
   438  00FE30  29                 	db	41
   439  00FE31  46                 	db	70
   440  00FE32                     __end_of_font:
   441                           	opt stack 0
   442  00FE32                     _font2:
   443                           	opt stack 0
   444  00FE32  26                 	db	38
   445  00FE33  49                 	db	73
   446  00FE34  49                 	db	73
   447  00FE35  49                 	db	73
   448  00FE36  32                 	db	50
   449  00FE37  03                 	db	3
   450  00FE38  01                 	db	1
   451  00FE39  7F                 	db	127
   452  00FE3A  01                 	db	1
   453  00FE3B  03                 	db	3
   454  00FE3C  3F                 	db	63
   455  00FE3D  40                 	db	64
   456  00FE3E  40                 	db	64
   457  00FE3F  40                 	db	64
   458  00FE40  3F                 	db	63
   459  00FE41  1F                 	db	31
   460  00FE42  20                 	db	32
   461  00FE43  40                 	db	64
   462  00FE44  20                 	db	32
   463  00FE45  1F                 	db	31
   464  00FE46  3F                 	db	63
   465  00FE47  40                 	db	64
   466  00FE48  38                 	db	56
   467  00FE49  40                 	db	64
   468  00FE4A  3F                 	db	63
   469  00FE4B  63                 	db	99
   470  00FE4C  14                 	db	20
   471  00FE4D  08                 	db	8
   472  00FE4E  14                 	db	20
   473  00FE4F  63                 	db	99
   474  00FE50  03                 	db	3
   475  00FE51  04                 	db	4
   476  00FE52  78                 	db	120
   477  00FE53  04                 	db	4
   478  00FE54  03                 	db	3
   479  00FE55  61                 	db	97
   480  00FE56  59                 	db	89
   481  00FE57  49                 	db	73
   482  00FE58  4D                 	db	77
   483  00FE59  43                 	db	67
   484  00FE5A  00                 	db	0
   485  00FE5B  7F                 	db	127
   486  00FE5C  41                 	db	65
   487  00FE5D  41                 	db	65
   488  00FE5E  41                 	db	65
   489  00FE5F  02                 	db	2
   490  00FE60  04                 	db	4
   491  00FE61  08                 	db	8
   492  00FE62  10                 	db	16
   493  00FE63  20                 	db	32
   494  00FE64  00                 	db	0
   495  00FE65  41                 	db	65
   496  00FE66  41                 	db	65
   497  00FE67  41                 	db	65
   498  00FE68  7F                 	db	127
   499  00FE69  04                 	db	4
   500  00FE6A  02                 	db	2
   501  00FE6B  01                 	db	1
   502  00FE6C  02                 	db	2
   503  00FE6D  04                 	db	4
   504  00FE6E  40                 	db	64
   505  00FE6F  40                 	db	64
   506  00FE70  40                 	db	64
   507  00FE71  40                 	db	64
   508  00FE72  40                 	db	64
   509  00FE73  00                 	db	0
   510  00FE74  03                 	db	3
   511  00FE75  07                 	db	7
   512  00FE76  08                 	db	8
   513  00FE77  00                 	db	0
   514  00FE78  20                 	db	32
   515  00FE79  54                 	db	84
   516  00FE7A  54                 	db	84
   517  00FE7B  78                 	db	120
   518  00FE7C  40                 	db	64
   519  00FE7D  7F                 	db	127
   520  00FE7E  28                 	db	40
   521  00FE7F  44                 	db	68
   522  00FE80  44                 	db	68
   523  00FE81  38                 	db	56
   524  00FE82  38                 	db	56
   525  00FE83  44                 	db	68
   526  00FE84  44                 	db	68
   527  00FE85  44                 	db	68
   528  00FE86  28                 	db	40
   529  00FE87  38                 	db	56
   530  00FE88  44                 	db	68
   531  00FE89  44                 	db	68
   532  00FE8A  28                 	db	40
   533  00FE8B  7F                 	db	127
   534  00FE8C  38                 	db	56
   535  00FE8D  54                 	db	84
   536  00FE8E  54                 	db	84
   537  00FE8F  54                 	db	84
   538  00FE90  18                 	db	24
   539  00FE91  00                 	db	0
   540  00FE92  08                 	db	8
   541  00FE93  7E                 	db	126
   542  00FE94  09                 	db	9
   543  00FE95  02                 	db	2
   544  00FE96  18                 	db	24
   545  00FE97  A4                 	db	164
   546  00FE98  A4                 	db	164
   547  00FE99  9C                 	db	156
   548  00FE9A  78                 	db	120
   549  00FE9B  7F                 	db	127
   550  00FE9C  08                 	db	8
   551  00FE9D  04                 	db	4
   552  00FE9E  04                 	db	4
   553  00FE9F  78                 	db	120
   554  00FEA0  00                 	db	0
   555  00FEA1  44                 	db	68
   556  00FEA2  7D                 	db	125
   557  00FEA3  40                 	db	64
   558  00FEA4  00                 	db	0
   559  00FEA5  20                 	db	32
   560  00FEA6  40                 	db	64
   561  00FEA7  40                 	db	64
   562  00FEA8  3D                 	db	61
   563  00FEA9  00                 	db	0
   564  00FEAA  7F                 	db	127
   565  00FEAB  10                 	db	16
   566  00FEAC  28                 	db	40
   567  00FEAD  44                 	db	68
   568  00FEAE  00                 	db	0
   569  00FEAF  00                 	db	0
   570  00FEB0  41                 	db	65
   571  00FEB1  7F                 	db	127
   572  00FEB2  40                 	db	64
   573  00FEB3  00                 	db	0
   574  00FEB4  7C                 	db	124
   575  00FEB5  04                 	db	4
   576  00FEB6  78                 	db	120
   577  00FEB7  04                 	db	4
   578  00FEB8  78                 	db	120
   579  00FEB9  7C                 	db	124
   580  00FEBA  08                 	db	8
   581  00FEBB  04                 	db	4
   582  00FEBC  04                 	db	4
   583  00FEBD  78                 	db	120
   584  00FEBE  38                 	db	56
   585  00FEBF  44                 	db	68
   586  00FEC0  44                 	db	68
   587  00FEC1  44                 	db	68
   588  00FEC2  38                 	db	56
   589  00FEC3  FC                 	db	252
   590  00FEC4  18                 	db	24
   591  00FEC5  24                 	db	36
   592  00FEC6  24                 	db	36
   593  00FEC7  18                 	db	24
   594  00FEC8  18                 	db	24
   595  00FEC9  24                 	db	36
   596  00FECA  24                 	db	36
   597  00FECB  18                 	db	24
   598  00FECC  FC                 	db	252
   599  00FECD  7C                 	db	124
   600  00FECE  08                 	db	8
   601  00FECF  04                 	db	4
   602  00FED0  04                 	db	4
   603  00FED1  08                 	db	8
   604  00FED2  48                 	db	72
   605  00FED3  54                 	db	84
   606  00FED4  54                 	db	84
   607  00FED5  54                 	db	84
   608  00FED6  24                 	db	36
   609  00FED7  04                 	db	4
   610  00FED8  04                 	db	4
   611  00FED9  3F                 	db	63
   612  00FEDA  44                 	db	68
   613  00FEDB  24                 	db	36
   614  00FEDC  3C                 	db	60
   615  00FEDD  40                 	db	64
   616  00FEDE  40                 	db	64
   617  00FEDF  20                 	db	32
   618  00FEE0  7C                 	db	124
   619  00FEE1  1C                 	db	28
   620  00FEE2  20                 	db	32
   621  00FEE3  40                 	db	64
   622  00FEE4  20                 	db	32
   623  00FEE5  1C                 	db	28
   624  00FEE6  3C                 	db	60
   625  00FEE7  40                 	db	64
   626  00FEE8  30                 	db	48
   627  00FEE9  40                 	db	64
   628  00FEEA  3C                 	db	60
   629  00FEEB  44                 	db	68
   630  00FEEC  28                 	db	40
   631  00FEED  10                 	db	16
   632  00FEEE  28                 	db	40
   633  00FEEF  44                 	db	68
   634  00FEF0  4C                 	db	76
   635  00FEF1  90                 	db	144
   636  00FEF2  90                 	db	144
   637  00FEF3  90                 	db	144
   638  00FEF4  7C                 	db	124
   639  00FEF5  44                 	db	68
   640  00FEF6  64                 	db	100
   641  00FEF7  54                 	db	84
   642  00FEF8  4C                 	db	76
   643  00FEF9  44                 	db	68
   644  00FEFA  00                 	db	0
   645  00FEFB  08                 	db	8
   646  00FEFC  36                 	db	54
   647  00FEFD  41                 	db	65
   648  00FEFE  00                 	db	0
   649  00FEFF  00                 	db	0
   650  00FF00  00                 	db	0
   651  00FF01  77                 	db	119
   652  00FF02  00                 	db	0
   653  00FF03  00                 	db	0
   654  00FF04  00                 	db	0
   655  00FF05  41                 	db	65
   656  00FF06  36                 	db	54
   657  00FF07  08                 	db	8
   658  00FF08  00                 	db	0
   659  00FF09  02                 	db	2
   660  00FF0A  01                 	db	1
   661  00FF0B  02                 	db	2
   662  00FF0C  04                 	db	4
   663  00FF0D  02                 	db	2
   664  00FF0E                     __end_of_font2:
   665                           	opt stack 0
   666  00FF0E                     _dpowers:
   667                           	opt stack 0
   668  00FF0E  0001               	dw	1
   669  00FF10  0000               	dw	0
   670  00FF12  000A               	dw	10
   671  00FF14  0000               	dw	0
   672  00FF16  0064               	dw	100
   673  00FF18  0000               	dw	0
   674  00FF1A  03E8               	dw	1000
   675  00FF1C  0000               	dw	0
   676  00FF1E  2710               	dw	10000
   677  00FF20  0000               	dw	0
   678  00FF22  86A0               	dw	34464
   679  00FF24  0001               	dw	1
   680  00FF26  4240               	dw	16960
   681  00FF28  000F               	dw	15
   682  00FF2A  9680               	dw	38528
   683  00FF2C  0098               	dw	152
   684  00FF2E  E100               	dw	57600
   685  00FF30  05F5               	dw	1525
   686  00FF32  CA00               	dw	51712
   687  00FF34  3B9A               	dw	15258
   688  00FF36                     __end_of_dpowers:
   689                           	opt stack 0
   690  00FF36                     __npowers_:
   691                           	opt stack 0
   692  00FF36  00                 	db	0
   693  00FF37  80                 	db	128
   694  00FF38  3F                 	db	63
   695  00FF39  CD                 	db	205
   696  00FF3A  CC                 	db	204
   697  00FF3B  3D                 	db	61
   698  00FF3C  D7                 	db	215
   699  00FF3D  23                 	db	35
   700  00FF3E  3C                 	db	60
   701  00FF3F  12                 	db	18
   702  00FF40  83                 	db	131
   703  00FF41  3A                 	db	58
   704  00FF42  B7                 	db	183
   705  00FF43  D1                 	db	209
   706  00FF44  38                 	db	56
   707  00FF45  C6                 	db	198
   708  00FF46  27                 	db	39
   709  00FF47  37                 	db	55
   710  00FF48  38                 	db	56
   711  00FF49  86                 	db	134
   712  00FF4A  35                 	db	53
   713  00FF4B  C0                 	db	192
   714  00FF4C  D6                 	db	214
   715  00FF4D  33                 	db	51
   716  00FF4E  CC                 	db	204
   717  00FF4F  2B                 	db	43
   718  00FF50  32                 	db	50
   719  00FF51  70                 	db	112
   720  00FF52  89                 	db	137
   721  00FF53  30                 	db	48
   722  00FF54  E7                 	db	231
   723  00FF55  DB                 	db	219
   724  00FF56  2E                 	db	46
   725  00FF57  E5                 	db	229
   726  00FF58  3C                 	db	60
   727  00FF59  1E                 	db	30
   728  00FF5A  42                 	db	66
   729  00FF5B  A2                 	db	162
   730  00FF5C  0D                 	db	13
   731  00FF5D                     __end_of__npowers_:
   732                           	opt stack 0
   733  00FF5D                     __powers_:
   734                           	opt stack 0
   735  00FF5D  00                 	db	0
   736  00FF5E  80                 	db	128
   737  00FF5F  3F                 	db	63
   738  00FF60  00                 	db	0
   739  00FF61  20                 	db	32
   740  00FF62  41                 	db	65
   741  00FF63  00                 	db	0
   742  00FF64  C8                 	db	200
   743  00FF65  42                 	db	66
   744  00FF66  00                 	db	0
   745  00FF67  7A                 	db	122
   746  00FF68  44                 	db	68
   747  00FF69  40                 	db	64
   748  00FF6A  1C                 	db	28
   749  00FF6B  46                 	db	70
   750  00FF6C  50                 	db	80
   751  00FF6D  C3                 	db	195
   752  00FF6E  47                 	db	71
   753  00FF6F  24                 	db	36
   754  00FF70  74                 	db	116
   755  00FF71  49                 	db	73
   756  00FF72  97                 	db	151
   757  00FF73  18                 	db	24
   758  00FF74  4B                 	db	75
   759  00FF75  BC                 	db	188
   760  00FF76  BE                 	db	190
   761  00FF77  4C                 	db	76
   762  00FF78  6B                 	db	107
   763  00FF79  6E                 	db	110
   764  00FF7A  4E                 	db	78
   765  00FF7B  03                 	db	3
   766  00FF7C  15                 	db	21
   767  00FF7D  50                 	db	80
   768  00FF7E  79                 	db	121
   769  00FF7F  AD                 	db	173
   770  00FF80  60                 	db	96
   771  00FF81  F3                 	db	243
   772  00FF82  49                 	db	73
   773  00FF83  71                 	db	113
   774  00FF84                     __end_of__powers_:
   775                           	opt stack 0
   776  0000                     _ADCON0	set	4034
   777  0000                     _ADCON0bits	set	4034
   778  0000                     _ADCON1	set	4033
   779  0000                     _ADCON2	set	4032
   780  0000                     _ADRESH	set	4036
   781  0000                     _ADRESL	set	4035
   782  0000                     _CCP2CON	set	4026
   783  0000                     _CCPR2L	set	4027
   784  0000                     _INTCON2bits	set	4081
   785  0000                     _INTCON3bits	set	4080
   786  0000                     _INTCONbits	set	4082
   787  0000                     _OSCCON	set	4051
   788  0000                     _PIE1bits	set	3997
   789  0000                     _PIR1bits	set	3998
   790  0000                     _PIR2bits	set	4001
   791  0000                     _PORTAbits	set	3968
   792  0000                     _PORTBbits	set	3969
   793  0000                     _PORTCbits	set	3970
   794  0000                     _PORTD	set	3971
   795  0000                     _PORTDbits	set	3971
   796  0000                     _PORTEbits	set	3972
   797  0000                     _PR2	set	4043
   798  0000                     _RCSTA	set	4011
   799  0000                     _RCSTAbits	set	4011
   800  0000                     _SPBRG	set	4015
   801  0000                     _SPBRGH	set	4016
   802  0000                     _SSPBUF	set	4041
   803  0000                     _SSPCON1	set	4038
   804  0000                     _SSPSTAT	set	4039
   805  0000                     _SSPSTATbits	set	4039
   806  0000                     _T0CON	set	4053
   807  0000                     _T0CONbits	set	4053
   808  0000                     _T2CON	set	4042
   809  0000                     _T3CON	set	4017
   810  0000                     _T3CONbits	set	4017
   811  0000                     _TMR0H	set	4055
   812  0000                     _TMR0L	set	4054
   813  0000                     _TRISA	set	3986
   814  0000                     _TRISB	set	3987
   815  0000                     _TRISC	set	3988
   816  0000                     _TRISCbits	set	3988
   817  0000                     _TRISD	set	3989
   818  0000                     _TRISE	set	3990
   819  0000                     _TXREG	set	4013
   820  0000                     _TXSTA	set	4012
   821  0000                     _TXSTAbits	set	4012
   822  0000                     _RBPU	set	32655
   823  0000                     _TRMT	set	32097
   824  00FF84                     STR_12:
   825                           
   826                           ; BSR set to: 0
   827  00FF84  45                 	db	69	;'E'
   828  00FF85  57                 	db	87	;'W'
   829  00FF86  50                 	db	80	;'P'
   830  00FF87  20                 	db	32
   831  00FF88  45                 	db	69	;'E'
   832  00FF89  57                 	db	87	;'W'
   833  00FF8A  4C                 	db	76	;'L'
   834  00FF8B  54                 	db	84	;'T'
   835  00FF8C  20                 	db	32
   836  00FF8D  4E                 	db	78	;'N'
   837  00FF8E  53                 	db	83	;'S'
   838  00FF8F  50                 	db	80	;'P'
   839  00FF90  20                 	db	32
   840  00FF91  4E                 	db	78	;'N'
   841  00FF92  53                 	db	83	;'S'
   842  00FF93  4C                 	db	76	;'L'
   843  00FF94  54                 	db	84	;'T'
   844  00FF95  20                 	db	32
   845  00FF96  4D                 	db	77	;'M'
   846  00FF97  44                 	db	68	;'D'
   847  00FF98  00                 	db	0
   848  00FF99                     STR_1:
   849                           
   850                           ; BSR set to: 0
   851  00FF99  45                 	db	69	;'E'
   852  00FF9A  43                 	db	67	;'C'
   853  00FF9B  45                 	db	69	;'E'
   854  00FF9C  33                 	db	51	;'3'
   855  00FF9D  33                 	db	51	;'3'
   856  00FF9E  30                 	db	48	;'0'
   857  00FF9F  31                 	db	49	;'1'
   858  00FFA0  4C                 	db	76	;'L'
   859  00FFA1  20                 	db	32
   860  00FFA2  46                 	db	70	;'F'
   861  00FFA3  61                 	db	97	;'a'
   862  00FFA4  6C                 	db	108	;'l'
   863  00FFA5  6C                 	db	108	;'l'
   864  00FFA6  20                 	db	32
   865  00FFA7  32                 	db	50	;'2'
   866  00FFA8  32                 	db	50	;'2'
   867  00FFA9  2D                 	db	45
   868  00FFAA  53                 	db	83	;'S'
   869  00FFAB  33                 	db	51	;'3'
   870  00FFAC  00                 	db	0
   871  00FFAD                     STR_13:
   872                           
   873                           ; BSR set to: 0
   874  00FFAD  56                 	db	86	;'V'
   875  00FFAE  6F                 	db	111	;'o'
   876  00FFAF  6C                 	db	108	;'l'
   877  00FFB0  74                 	db	116	;'t'
   878  00FFB1  61                 	db	97	;'a'
   879  00FFB2  67                 	db	103	;'g'
   880  00FFB3  65                 	db	101	;'e'
   881  00FFB4  20                 	db	32
   882  00FFB5  3D                 	db	61	;'='
   883  00FFB6  20                 	db	32
   884  00FFB7  25                 	db	37
   885  00FFB8  66                 	db	102	;'f'
   886  00FFB9  20                 	db	32
   887  00FFBA  0D                 	db	13
   888  00FFBB  0A                 	db	10
   889  00FFBC  00                 	db	0
   890  00FFBD                     STR_8:
   891                           
   892                           ; BSR set to: 0
   893  00FFBD  4E                 	db	78	;'N'
   894  00FFBE  4F                 	db	79	;'O'
   895  00FFBF  52                 	db	82	;'R'
   896  00FFC0  54                 	db	84	;'T'
   897  00FFC1  48                 	db	72	;'H'
   898  00FFC2  2F                 	db	47
   899  00FFC3  53                 	db	83	;'S'
   900  00FFC4  4F                 	db	79	;'O'
   901  00FFC5  55                 	db	85	;'U'
   902  00FFC6  54                 	db	84	;'T'
   903  00FFC7  48                 	db	72	;'H'
   904  00FFC8  00                 	db	0
   905  00FFC9                     STR_6:
   906                           
   907                           ; BSR set to: 0
   908  00FFC9  45                 	db	69	;'E'
   909  00FFCA  41                 	db	65	;'A'
   910  00FFCB  53                 	db	83	;'S'
   911  00FFCC  54                 	db	84	;'T'
   912  00FFCD  2F                 	db	47
   913  00FFCE  57                 	db	87	;'W'
   914  00FFCF  45                 	db	69	;'E'
   915  00FFD0  53                 	db	83	;'S'
   916  00FFD1  54                 	db	84	;'T'
   917  00FFD2  00                 	db	0
   918  00FFD3                     STR_9:
   919                           
   920                           ; BSR set to: 0
   921  00FFD3  4E                 	db	78	;'N'
   922  00FFD4  2F                 	db	47
   923  00FFD5  53                 	db	83	;'S'
   924  00FFD6  20                 	db	32
   925  00FFD7  4C                 	db	76	;'L'
   926  00FFD8  54                 	db	84	;'T'
   927  00FFD9  00                 	db	0
   928  00FFDA                     STR_7:
   929                           
   930                           ; BSR set to: 0
   931  00FFDA  45                 	db	69	;'E'
   932  00FFDB  2F                 	db	47
   933  00FFDC  57                 	db	87	;'W'
   934  00FFDD  20                 	db	32
   935  00FFDE  4C                 	db	76	;'L'
   936  00FFDF  54                 	db	84	;'T'
   937  00FFE0  00                 	db	0
   938  00FFE1                     STR_2:
   939                           
   940                           ; BSR set to: 0
   941  00FFE1  4D                 	db	77	;'M'
   942  00FFE2  6F                 	db	111	;'o'
   943  00FFE3  64                 	db	100	;'d'
   944  00FFE4  65                 	db	101	;'e'
   945  00FFE5  3A                 	db	58	;':'
   946  00FFE6  00                 	db	0
   947  00FFE7                     STR_3:
   948                           
   949                           ; BSR set to: 0
   950  00FFE7  46                 	db	70	;'F'
   951  00FFE8  52                 	db	82	;'R'
   952  00FFE9  3A                 	db	58	;':'
   953  00FFEA  00                 	db	0
   954  00FFEB                     STR_4:
   955                           
   956                           ; BSR set to: 0
   957  00FFEB  46                 	db	70	;'F'
   958  00FFEC  53                 	db	83	;'S'
   959  00FFED  3A                 	db	58	;':'
   960  00FFEE  00                 	db	0
   961  00FFEF                     STR_11:
   962                           
   963                           ; BSR set to: 0
   964  00FFEF  50                 	db	80	;'P'
   965  00FFF0  4E                 	db	78	;'N'
   966  00FFF1  53                 	db	83	;'S'
   967  00FFF2  00                 	db	0
   968  00FFF3                     STR_10:
   969                           
   970                           ; BSR set to: 0
   971  00FFF3  50                 	db	80	;'P'
   972  00FFF4  45                 	db	69	;'E'
   973  00FFF5  57                 	db	87	;'W'
   974  00FFF6  00                 	db	0
   975  00FFF7                     STR_14:
   976                           
   977                           ; BSR set to: 0
   978  00FFF7  25                 	db	37
   979  00FFF8  64                 	db	100	;'d'
   980  00FFF9  00                 	db	0
   981  00FFFA                     STR_16:
   982                           
   983                           ; BSR set to: 0
   984  00FFFA  20                 	db	32
   985  00FFFB  00                 	db	0
   986  00FFFC                     STR_5:
   987                           
   988                           ; BSR set to: 0
   989  00FFFC  2A                 	db	42
   990  00FFFD  00                 	db	0
   991  0000                     
   992                           ; #config settings
   993  00FFFE  00                 	db	0	; dummy byte at the end
   994  0000                     
   995                           	psect	cinit
   996  003596                     __pcinit:
   997                           	opt stack 0
   998  003596                     start_initialization:
   999                           	opt stack 0
  1000  003596                     __initialization:
  1001                           	opt stack 0
  1002                           
  1003                           ; Clear objects allocated to BANK0 (43 bytes)
  1004  003596  EE00  F0AC         	lfsr	0,__pbssBANK0
  1005  00359A  0E2B               	movlw	43
  1006  00359C                     clear_0:
  1007  00359C  6AEE               	clrf	postinc0,c
  1008  00359E  06E8               	decf	wreg,f,c
  1009  0035A0  E1FD               	bnz	clear_0
  1010                           
  1011                           ; Clear objects allocated to COMRAM (13 bytes)
  1012  0035A2  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1013  0035A6  0E0D               	movlw	13
  1014  0035A8                     clear_1:
  1015  0035A8  6AEE               	clrf	postinc0,c
  1016  0035AA  06E8               	decf	wreg,f,c
  1017  0035AC  E1FD               	bnz	clear_1
  1018                           
  1019                           ; Initialize objects allocated to BANK0 (44 bytes)
  1020                           ; load TBLPTR registers with __pidataBANK0
  1021  0035AE  0E2A               	movlw	low __pidataBANK0
  1022  0035B0  6EF6               	movwf	tblptrl,c
  1023  0035B2  0E3A               	movlw	high __pidataBANK0
  1024  0035B4  6EF7               	movwf	tblptrh,c
  1025  0035B6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1026  0035B8  6EF8               	movwf	tblptru,c
  1027  0035BA  EE00  F080         	lfsr	0,__pdataBANK0
  1028  0035BE  EE10 F02C          	lfsr	1,44
  1029  0035C2                     copy_data0:
  1030  0035C2  0009               	tblrd		*+
  1031  0035C4  CFF5 FFEE          	movff	tablat,postinc0
  1032  0035C8  50E5               	movf	postdec1,w,c
  1033  0035CA  50E1               	movf	fsr1l,w,c
  1034  0035CC  E1FA               	bnz	copy_data0
  1035                           
  1036                           ; Initialize objects allocated to COMRAM (1 bytes)
  1037                           ; load TBLPTR registers with __pidataCOMRAM
  1038  0035CE  0E42               	movlw	low __pidataCOMRAM
  1039  0035D0  6EF6               	movwf	tblptrl,c
  1040  0035D2  0E3C               	movlw	high __pidataCOMRAM
  1041  0035D4  6EF7               	movwf	tblptrh,c
  1042  0035D6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1043  0035D8  6EF8               	movwf	tblptru,c
  1044  0035DA  0009               	tblrd		*+	;fetch initializer
  1045  0035DC  CFF5 F068          	movff	tablat,__pdataCOMRAM
  1046  0035E0                     end_of_initialization:
  1047                           	opt stack 0
  1048  0035E0                     __end_of__initialization:
  1049                           	opt stack 0
  1050  0035E0  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1051  0035E2  6EF8               	movwf	tblptru,c
  1052  0035E4  0100               	movlb	0
  1053  0035E6  EFDB  F013         	goto	_main	;jump to C main() function
  1054                           tblptru	equ	0xFF8
  1055                           tblptrh	equ	0xFF7
  1056                           tblptrl	equ	0xFF6
  1057                           tablat	equ	0xFF5
  1058                           postinc0	equ	0xFEE
  1059                           wreg	equ	0xFE8
  1060                           postdec1	equ	0xFE5
  1061                           fsr1l	equ	0xFE1
  1062                           
  1063                           	psect	bssCOMRAM
  1064  00005B                     __pbssCOMRAM:
  1065                           	opt stack 0
  1066  00005B                     _txt:
  1067                           	opt stack 0
  1068  00005B                     	ds	2
  1069  00005D                     _EW_PED_SW:
  1070                           	opt stack 0
  1071  00005D                     	ds	1
  1072  00005E                     _FLASHING:
  1073                           	opt stack 0
  1074  00005E                     	ds	1
  1075  00005F                     _FLASHING_REQUEST:
  1076                           	opt stack 0
  1077  00005F                     	ds	1
  1078  000060                     _NS_PED_SW:
  1079                           	opt stack 0
  1080  000060                     	ds	1
  1081  000061                     _SW_EWLT:
  1082                           	opt stack 0
  1083  000061                     	ds	1
  1084  000062                     _SW_EWPED:
  1085                           	opt stack 0
  1086  000062                     	ds	1
  1087  000063                     _SW_MODE:
  1088                           	opt stack 0
  1089  000063                     	ds	1
  1090  000064                     __tft_type:
  1091                           	opt stack 0
  1092  000064                     	ds	1
  1093  000065                     _colstart:
  1094                           	opt stack 0
  1095  000065                     	ds	1
  1096  000066                     _direction:
  1097                           	opt stack 0
  1098  000066                     	ds	1
  1099  000067                     _rowstart:
  1100                           	opt stack 0
  1101  000067                     	ds	1
  1102                           tblptru	equ	0xFF8
  1103                           tblptrh	equ	0xFF7
  1104                           tblptrl	equ	0xFF6
  1105                           tablat	equ	0xFF5
  1106                           postinc0	equ	0xFEE
  1107                           wreg	equ	0xFE8
  1108                           postdec1	equ	0xFE5
  1109                           fsr1l	equ	0xFE1
  1110                           
  1111                           	psect	dataCOMRAM
  1112  000068                     __pdataCOMRAM:
  1113                           	opt stack 0
  1114  000068                     _wrap:
  1115                           	opt stack 0
  1116  000068                     	ds	1
  1117                           tblptru	equ	0xFF8
  1118                           tblptrh	equ	0xFF7
  1119                           tblptrl	equ	0xFF6
  1120                           tablat	equ	0xFF5
  1121                           postinc0	equ	0xFEE
  1122                           wreg	equ	0xFE8
  1123                           postdec1	equ	0xFE5
  1124                           fsr1l	equ	0xFE1
  1125                           
  1126                           	psect	bssBANK0
  1127  0000AC                     __pbssBANK0:
  1128                           	opt stack 0
  1129  0000AC                     _volt:
  1130                           	opt stack 0
  1131  0000AC                     	ds	3
  1132  0000AF                     _MODE:
  1133                           	opt stack 0
  1134  0000AF                     	ds	2
  1135  0000B1                     _nbr:
  1136                           	opt stack 0
  1137  0000B1                     	ds	2
  1138  0000B3                     _Count:
  1139                           	opt stack 0
  1140  0000B3                     	ds	1
  1141  0000B4                     _PED_Count:
  1142                           	opt stack 0
  1143  0000B4                     	ds	1
  1144  0000B5                     _SW_NSLT:
  1145                           	opt stack 0
  1146  0000B5                     	ds	1
  1147  0000B6                     _SW_NSPED:
  1148                           	opt stack 0
  1149  0000B6                     	ds	1
  1150  0000B7                     _dir:
  1151                           	opt stack 0
  1152  0000B7                     	ds	1
  1153  0000B8                     _buffer:
  1154                           	opt stack 0
  1155  0000B8                     	ds	31
  1156                           tblptru	equ	0xFF8
  1157                           tblptrh	equ	0xFF7
  1158                           tblptrl	equ	0xFF6
  1159                           tablat	equ	0xFF5
  1160                           postinc0	equ	0xFEE
  1161                           wreg	equ	0xFE8
  1162                           postdec1	equ	0xFE5
  1163                           fsr1l	equ	0xFE1
  1164                           
  1165                           	psect	dataBANK0
  1166  000080                     __pdataBANK0:
  1167                           	opt stack 0
  1168  000080                     _LED_7seg:
  1169                           	opt stack 0
  1170  000080                     	ds	10
  1171  00008A                     _EWLT_Count:
  1172                           	opt stack 0
  1173  00008A                     	ds	3
  1174  00008D                     _EW_Count:
  1175                           	opt stack 0
  1176  00008D                     	ds	3
  1177  000090                     _NSLT_Count:
  1178                           	opt stack 0
  1179  000090                     	ds	3
  1180  000093                     _NS_Count:
  1181                           	opt stack 0
  1182  000093                     	ds	3
  1183  000096                     _PED_EW_Count:
  1184                           	opt stack 0
  1185  000096                     	ds	3
  1186  000099                     _PED_NS_Count:
  1187                           	opt stack 0
  1188  000099                     	ds	3
  1189  00009C                     _Act_Mode_Txt:
  1190                           	opt stack 0
  1191  00009C                     	ds	2
  1192  00009E                     _FlashingR_Txt:
  1193                           	opt stack 0
  1194  00009E                     	ds	2
  1195  0000A0                     _FlashingS_Txt:
  1196                           	opt stack 0
  1197  0000A0                     	ds	2
  1198  0000A2                     _SW_EWLT_Txt:
  1199                           	opt stack 0
  1200  0000A2                     	ds	2
  1201  0000A4                     _SW_EWPED_Txt:
  1202                           	opt stack 0
  1203  0000A4                     	ds	2
  1204  0000A6                     _SW_MODE_Txt:
  1205                           	opt stack 0
  1206  0000A6                     	ds	2
  1207  0000A8                     _SW_NSLT_Txt:
  1208                           	opt stack 0
  1209  0000A8                     	ds	2
  1210  0000AA                     _SW_NSPED_Txt:
  1211                           	opt stack 0
  1212  0000AA                     	ds	2
  1213                           tblptru	equ	0xFF8
  1214                           tblptrh	equ	0xFF7
  1215                           tblptrl	equ	0xFF6
  1216                           tablat	equ	0xFF5
  1217                           postinc0	equ	0xFEE
  1218                           wreg	equ	0xFE8
  1219                           postdec1	equ	0xFE5
  1220                           fsr1l	equ	0xFE1
  1221                           
  1222                           	psect	cstackBANK0
  1223  0000D7                     __pcstackBANK0:
  1224                           	opt stack 0
  1225  0000D7                     _printf$2495:
  1226                           	opt stack 0
  1227                           
  1228                           ; 3 bytes @ 0x0
  1229  0000D7                     	ds	3
  1230  0000DA                     printf@ap:
  1231                           	opt stack 0
  1232                           
  1233                           ; 2 bytes @ 0x3
  1234  0000DA                     	ds	2
  1235  0000DC                     printf@flag:
  1236                           	opt stack 0
  1237                           
  1238                           ; 2 bytes @ 0x5
  1239  0000DC                     	ds	2
  1240  0000DE                     printf@prec:
  1241                           	opt stack 0
  1242                           
  1243                           ; 2 bytes @ 0x7
  1244  0000DE                     	ds	2
  1245  0000E0                     printf@val:
  1246                           	opt stack 0
  1247                           
  1248                           ; 4 bytes @ 0x9
  1249  0000E0                     	ds	4
  1250  0000E4                     printf@exp:
  1251                           	opt stack 0
  1252                           
  1253                           ; 2 bytes @ 0xD
  1254  0000E4                     	ds	2
  1255  0000E6                     printf@tmpval:
  1256                           	opt stack 0
  1257                           
  1258                           ; 4 bytes @ 0xF
  1259  0000E6                     	ds	4
  1260  0000EA                     printf@fval:
  1261                           	opt stack 0
  1262                           
  1263                           ; 3 bytes @ 0x13
  1264  0000EA                     	ds	3
  1265  0000ED                     printf@c:
  1266                           	opt stack 0
  1267                           
  1268                           ; 1 bytes @ 0x16
  1269  0000ED                     	ds	1
  1270                           tblptru	equ	0xFF8
  1271                           tblptrh	equ	0xFF7
  1272                           tblptrl	equ	0xFF6
  1273                           tablat	equ	0xFF5
  1274                           postinc0	equ	0xFEE
  1275                           wreg	equ	0xFE8
  1276                           postdec1	equ	0xFE5
  1277                           fsr1l	equ	0xFE1
  1278                           
  1279                           	psect	cstackCOMRAM
  1280  000001                     __pcstackCOMRAM:
  1281                           	opt stack 0
  1282  000001                     ??_chkisr:
  1283  000001                     
  1284                           ; 0 bytes @ 0x0
  1285  000001                     	ds	14
  1286  00000F                     ?_strlen:
  1287                           	opt stack 0
  1288  00000F                     ?_get_full_ADC:
  1289                           	opt stack 0
  1290  00000F                     ?___awmod:
  1291                           	opt stack 0
  1292  00000F                     ?___ftpack:
  1293                           	opt stack 0
  1294  00000F                     ?___ftneg:
  1295                           	opt stack 0
  1296  00000F                     ?__tdiv_to_l_:
  1297                           	opt stack 0
  1298  00000F                     ?__div_to_l_:
  1299                           	opt stack 0
  1300  00000F                     ?___lldiv:
  1301                           	opt stack 0
  1302  00000F                     spiwrite@x:
  1303                           	opt stack 0
  1304  00000F                     putch@c:
  1305                           	opt stack 0
  1306  00000F                     OpenUSART@spbrg:
  1307                           	opt stack 0
  1308  00000F                     ___awmod@dividend:
  1309                           	opt stack 0
  1310  00000F                     strcpy@to:
  1311                           	opt stack 0
  1312  00000F                     strlen@s:
  1313                           	opt stack 0
  1314  00000F                     __div_to_l_@f1:
  1315                           	opt stack 0
  1316  00000F                     ___ftpack@arg:
  1317                           	opt stack 0
  1318  00000F                     __tdiv_to_l_@f1:
  1319                           	opt stack 0
  1320  00000F                     ___ftge@ff1:
  1321                           	opt stack 0
  1322  00000F                     ___ftneg@f1:
  1323                           	opt stack 0
  1324  00000F                     ___lldiv@dividend:
  1325                           	opt stack 0
  1326                           
  1327                           ; 4 bytes @ 0xE
  1328  00000F                     	ds	1
  1329  000010                     spiwrite@spidata:
  1330                           	opt stack 0
  1331                           
  1332                           ; 1 bytes @ 0xF
  1333  000010                     	ds	1
  1334  000011                     ??_strlen:
  1335  000011                     ??_get_full_ADC:
  1336  000011                     write_command@cmd_:
  1337                           	opt stack 0
  1338  000011                     write_data@data_:
  1339                           	opt stack 0
  1340  000011                     OpenUSART@config:
  1341                           	opt stack 0
  1342  000011                     ___awmod@divisor:
  1343                           	opt stack 0
  1344  000011                     strcpy@from:
  1345                           	opt stack 0
  1346                           
  1347                           ; 2 bytes @ 0x10
  1348  000011                     	ds	1
  1349  000012                     setAddrWindow@y0:
  1350                           	opt stack 0
  1351  000012                     ___ftpack@exp:
  1352                           	opt stack 0
  1353  000012                     __div_to_l_@f2:
  1354                           	opt stack 0
  1355  000012                     __tdiv_to_l_@f2:
  1356                           	opt stack 0
  1357  000012                     ___ftge@ff2:
  1358                           	opt stack 0
  1359                           
  1360                           ; 3 bytes @ 0x11
  1361  000012                     	ds	1
  1362  000013                     setAddrWindow@x1:
  1363                           	opt stack 0
  1364  000013                     ___awmod@counter:
  1365                           	opt stack 0
  1366  000013                     ___ftpack@sign:
  1367                           	opt stack 0
  1368  000013                     get_full_ADC@result:
  1369                           	opt stack 0
  1370  000013                     strcpy@cp:
  1371                           	opt stack 0
  1372  000013                     strlen@cp:
  1373                           	opt stack 0
  1374  000013                     ___lldiv@divisor:
  1375                           	opt stack 0
  1376                           
  1377                           ; 4 bytes @ 0x12
  1378  000013                     	ds	1
  1379  000014                     ??___ftpack:
  1380  000014                     setAddrWindow@y1:
  1381                           	opt stack 0
  1382  000014                     ___awmod@sign:
  1383                           	opt stack 0
  1384                           
  1385                           ; 1 bytes @ 0x13
  1386  000014                     	ds	1
  1387  000015                     ??__tdiv_to_l_:
  1388  000015                     ??___ftge:
  1389  000015                     ?___awdiv:
  1390                           	opt stack 0
  1391  000015                     setAddrWindow@x0:
  1392                           	opt stack 0
  1393  000015                     ___awdiv@dividend:
  1394                           	opt stack 0
  1395  000015                     __div_to_l_@quot:
  1396                           	opt stack 0
  1397                           
  1398                           ; 4 bytes @ 0x14
  1399  000015                     	ds	1
  1400  000016                     drawPixel@y:
  1401                           	opt stack 0
  1402  000016                     drawFastVLine@y:
  1403                           	opt stack 0
  1404  000016                     fillRectangle@y:
  1405                           	opt stack 0
  1406  000016                     drawFastHLine@y:
  1407                           	opt stack 0
  1408                           
  1409                           ; 1 bytes @ 0x15
  1410  000016                     	ds	1
  1411  000017                     ?___lltoft:
  1412                           	opt stack 0
  1413  000017                     drawFastVLine@h:
  1414                           	opt stack 0
  1415  000017                     fillRectangle@w:
  1416                           	opt stack 0
  1417  000017                     drawFastHLine@w:
  1418                           	opt stack 0
  1419  000017                     drawPixel@color:
  1420                           	opt stack 0
  1421  000017                     ___awdiv@divisor:
  1422                           	opt stack 0
  1423  000017                     ___lldiv@quotient:
  1424                           	opt stack 0
  1425  000017                     ___lltoft@c:
  1426                           	opt stack 0
  1427                           
  1428                           ; 4 bytes @ 0x16
  1429  000017                     	ds	1
  1430  000018                     fillRectangle@h:
  1431                           	opt stack 0
  1432  000018                     drawFastVLine@color:
  1433                           	opt stack 0
  1434  000018                     drawFastHLine@color:
  1435                           	opt stack 0
  1436  000018                     __tdiv_to_l_@quot:
  1437                           	opt stack 0
  1438                           
  1439                           ; 4 bytes @ 0x17
  1440  000018                     	ds	1
  1441  000019                     drawPixel@x:
  1442                           	opt stack 0
  1443  000019                     ___awdiv@counter:
  1444                           	opt stack 0
  1445  000019                     __div_to_l_@cntr:
  1446                           	opt stack 0
  1447  000019                     fillRectangle@color:
  1448                           	opt stack 0
  1449                           
  1450                           ; 2 bytes @ 0x18
  1451  000019                     	ds	1
  1452  00001A                     ??_drawFastVLine:
  1453  00001A                     ??_drawFastHLine:
  1454  00001A                     ___awdiv@sign:
  1455                           	opt stack 0
  1456  00001A                     __div_to_l_@exp1:
  1457                           	opt stack 0
  1458  00001A                     drawCircle@x0:
  1459                           	opt stack 0
  1460                           
  1461                           ; 2 bytes @ 0x19
  1462  00001A                     	ds	1
  1463  00001B                     ??_fillRectangle:
  1464  00001B                     ??___lltoft:
  1465  00001B                     ___lldiv@counter:
  1466                           	opt stack 0
  1467  00001B                     ___awdiv@quotient:
  1468                           	opt stack 0
  1469                           
  1470                           ; 2 bytes @ 0x1A
  1471  00001B                     	ds	1
  1472  00001C                     ?___llmod:
  1473                           	opt stack 0
  1474  00001C                     __tdiv_to_l_@cntr:
  1475                           	opt stack 0
  1476  00001C                     drawCircle@y0:
  1477                           	opt stack 0
  1478  00001C                     ___llmod@dividend:
  1479                           	opt stack 0
  1480                           
  1481                           ; 4 bytes @ 0x1B
  1482  00001C                     	ds	1
  1483  00001D                     ?___wmul:
  1484                           	opt stack 0
  1485  00001D                     __tdiv_to_l_@exp1:
  1486                           	opt stack 0
  1487  00001D                     ___wmul@multiplier:
  1488                           	opt stack 0
  1489                           
  1490                           ; 2 bytes @ 0x1C
  1491  00001D                     	ds	1
  1492  00001E                     drawFastVLine@hi:
  1493                           	opt stack 0
  1494  00001E                     drawFastHLine@hi:
  1495                           	opt stack 0
  1496  00001E                     drawCircle@r:
  1497                           	opt stack 0
  1498                           
  1499                           ; 2 bytes @ 0x1D
  1500  00001E                     	ds	1
  1501  00001F                     drawFastVLine@lo:
  1502                           	opt stack 0
  1503  00001F                     fillRectangle@hi:
  1504                           	opt stack 0
  1505  00001F                     drawFastHLine@lo:
  1506                           	opt stack 0
  1507  00001F                     ___lltoft@exp:
  1508                           	opt stack 0
  1509  00001F                     ___wmul@multiplicand:
  1510                           	opt stack 0
  1511                           
  1512                           ; 2 bytes @ 0x1E
  1513  00001F                     	ds	1
  1514  000020                     drawFastVLine@x:
  1515                           	opt stack 0
  1516  000020                     fillRectangle@lo:
  1517                           	opt stack 0
  1518  000020                     drawFastHLine@x:
  1519                           	opt stack 0
  1520  000020                     drawCircle@color:
  1521                           	opt stack 0
  1522  000020                     ___llmod@divisor:
  1523                           	opt stack 0
  1524                           
  1525                           ; 4 bytes @ 0x1F
  1526  000020                     	ds	1
  1527  000021                     fillRect@y:
  1528                           	opt stack 0
  1529  000021                     fillRectangle@x:
  1530                           	opt stack 0
  1531  000021                     fillCircleHelper@x0:
  1532                           	opt stack 0
  1533  000021                     drawRect@x:
  1534                           	opt stack 0
  1535  000021                     ___wmul@product:
  1536                           	opt stack 0
  1537                           
  1538                           ; 2 bytes @ 0x20
  1539  000021                     	ds	1
  1540  000022                     ??_drawCircle:
  1541  000022                     fillRect@w:
  1542                           	opt stack 0
  1543  000022                     fillScreen@color:
  1544                           	opt stack 0
  1545                           
  1546                           ; 2 bytes @ 0x21
  1547  000022                     	ds	1
  1548  000023                     ?___ftmul:
  1549                           	opt stack 0
  1550  000023                     ?___awtoft:
  1551                           	opt stack 0
  1552  000023                     fillRect@h:
  1553                           	opt stack 0
  1554  000023                     delay_ms@ms:
  1555                           	opt stack 0
  1556  000023                     fillCircleHelper@y0:
  1557                           	opt stack 0
  1558  000023                     drawRect@y:
  1559                           	opt stack 0
  1560  000023                     ___awtoft@c:
  1561                           	opt stack 0
  1562  000023                     ___ftmul@f1:
  1563                           	opt stack 0
  1564                           
  1565                           ; 3 bytes @ 0x22
  1566  000023                     	ds	1
  1567  000024                     ___llmod@counter:
  1568                           	opt stack 0
  1569  000024                     fillRect@color:
  1570                           	opt stack 0
  1571  000024                     drawCircle@ddF_x:
  1572                           	opt stack 0
  1573                           
  1574                           ; 2 bytes @ 0x23
  1575  000024                     	ds	1
  1576  000025                     ??_delay_ms:
  1577  000025                     fillCircleHelper@r:
  1578                           	opt stack 0
  1579  000025                     drawRect@w:
  1580                           	opt stack 0
  1581                           
  1582                           ; 2 bytes @ 0x24
  1583  000025                     	ds	1
  1584  000026                     ??_fillRect:
  1585  000026                     ___awtoft@sign:
  1586                           	opt stack 0
  1587  000026                     drawCircle@ddF_y:
  1588                           	opt stack 0
  1589  000026                     ___ftmul@f2:
  1590                           	opt stack 0
  1591                           
  1592                           ; 3 bytes @ 0x25
  1593  000026                     	ds	1
  1594  000027                     ?___ftdiv:
  1595                           	opt stack 0
  1596  000027                     delay_ms@count:
  1597                           	opt stack 0
  1598  000027                     fillCircleHelper@cornername:
  1599                           	opt stack 0
  1600  000027                     drawRect@h:
  1601                           	opt stack 0
  1602  000027                     ___ftdiv@f1:
  1603                           	opt stack 0
  1604                           
  1605                           ; 3 bytes @ 0x26
  1606  000027                     	ds	1
  1607  000028                     drawCircle@f:
  1608                           	opt stack 0
  1609                           
  1610                           ; 2 bytes @ 0x27
  1611  000028                     	ds	1
  1612  000029                     ??___ftmul:
  1613  000029                     fillRect@x:
  1614                           	opt stack 0
  1615  000029                     fillCircleHelper@delta:
  1616                           	opt stack 0
  1617  000029                     drawRect@color:
  1618                           	opt stack 0
  1619                           
  1620                           ; 2 bytes @ 0x28
  1621  000029                     	ds	1
  1622  00002A                     fillRect@i:
  1623                           	opt stack 0
  1624  00002A                     drawCircle@x:
  1625                           	opt stack 0
  1626  00002A                     ___ftdiv@f2:
  1627                           	opt stack 0
  1628                           
  1629                           ; 3 bytes @ 0x29
  1630  00002A                     	ds	1
  1631  00002B                     ??_drawRect:
  1632  00002B                     fillCircleHelper@color:
  1633                           	opt stack 0
  1634                           
  1635                           ; 2 bytes @ 0x2A
  1636  00002B                     	ds	1
  1637  00002C                     drawChar@y:
  1638                           	opt stack 0
  1639  00002C                     ___ftmul@exp:
  1640                           	opt stack 0
  1641  00002C                     drawCircle@y:
  1642                           	opt stack 0
  1643                           
  1644                           ; 2 bytes @ 0x2B
  1645  00002C                     	ds	1
  1646  00002D                     ??___ftdiv:
  1647  00002D                     ??_fillCircleHelper:
  1648  00002D                     drawChar@c:
  1649                           	opt stack 0
  1650  00002D                     ___ftmul@f3_as_product:
  1651                           	opt stack 0
  1652                           
  1653                           ; 3 bytes @ 0x2C
  1654  00002D                     	ds	1
  1655  00002E                     drawChar@color:
  1656                           	opt stack 0
  1657                           
  1658                           ; 2 bytes @ 0x2D
  1659  00002E                     	ds	1
  1660  00002F                     fillCircleHelper@ddF_x:
  1661                           	opt stack 0
  1662                           
  1663                           ; 2 bytes @ 0x2E
  1664  00002F                     	ds	1
  1665  000030                     ___ftdiv@cntr:
  1666                           	opt stack 0
  1667  000030                     ___ftmul@cntr:
  1668                           	opt stack 0
  1669  000030                     drawChar@bg:
  1670                           	opt stack 0
  1671                           
  1672                           ; 2 bytes @ 0x2F
  1673  000030                     	ds	1
  1674  000031                     ___ftmul@sign:
  1675                           	opt stack 0
  1676  000031                     fillCircleHelper@ddF_y:
  1677                           	opt stack 0
  1678  000031                     ___ftdiv@f3:
  1679                           	opt stack 0
  1680                           
  1681                           ; 3 bytes @ 0x30
  1682  000031                     	ds	1
  1683  000032                     ?_fround:
  1684                           	opt stack 0
  1685  000032                     ?_scale:
  1686                           	opt stack 0
  1687  000032                     drawChar@size:
  1688                           	opt stack 0
  1689                           
  1690                           ; 1 bytes @ 0x31
  1691  000032                     	ds	1
  1692  000033                     drawChar@line:
  1693                           	opt stack 0
  1694  000033                     fillCircleHelper@f:
  1695                           	opt stack 0
  1696                           
  1697                           ; 2 bytes @ 0x32
  1698  000033                     	ds	1
  1699  000034                     drawChar@x:
  1700                           	opt stack 0
  1701  000034                     ___ftdiv@exp:
  1702                           	opt stack 0
  1703                           
  1704                           ; 1 bytes @ 0x33
  1705  000034                     	ds	1
  1706  000035                     drawChar@j:
  1707                           	opt stack 0
  1708  000035                     ___ftdiv@sign:
  1709                           	opt stack 0
  1710  000035                     fillCircleHelper@x:
  1711                           	opt stack 0
  1712  000035                     _fround$2493:
  1713                           	opt stack 0
  1714  000035                     _scale$2494:
  1715                           	opt stack 0
  1716                           
  1717                           ; 3 bytes @ 0x34
  1718  000035                     	ds	1
  1719  000036                     drawChar@i:
  1720                           	opt stack 0
  1721                           
  1722                           ; 1 bytes @ 0x35
  1723  000036                     	ds	1
  1724  000037                     drawtext@y:
  1725                           	opt stack 0
  1726  000037                     fillCircleHelper@y:
  1727                           	opt stack 0
  1728                           
  1729                           ; 2 bytes @ 0x36
  1730  000037                     	ds	1
  1731  000038                     scale@scl:
  1732                           	opt stack 0
  1733  000038                     drawtext@_text:
  1734                           	opt stack 0
  1735  000038                     _fround$2492:
  1736                           	opt stack 0
  1737                           
  1738                           ; 3 bytes @ 0x37
  1739  000038                     	ds	1
  1740  000039                     ?___fttol:
  1741                           	opt stack 0
  1742  000039                     fillCircle@x0:
  1743                           	opt stack 0
  1744  000039                     ___fttol@f1:
  1745                           	opt stack 0
  1746                           
  1747                           ; 3 bytes @ 0x38
  1748  000039                     	ds	1
  1749  00003A                     drawtext@color:
  1750                           	opt stack 0
  1751                           
  1752                           ; 2 bytes @ 0x39
  1753  00003A                     	ds	1
  1754  00003B                     fround@prec:
  1755                           	opt stack 0
  1756  00003B                     fillCircle@y0:
  1757                           	opt stack 0
  1758                           
  1759                           ; 2 bytes @ 0x3A
  1760  00003B                     	ds	1
  1761  00003C                     ?___ftadd:
  1762                           	opt stack 0
  1763  00003C                     drawtext@bg:
  1764                           	opt stack 0
  1765  00003C                     ___ftadd@f1:
  1766                           	opt stack 0
  1767                           
  1768                           ; 3 bytes @ 0x3B
  1769  00003C                     	ds	1
  1770  00003D                     ??___fttol:
  1771  00003D                     fillCircle@r:
  1772                           	opt stack 0
  1773                           
  1774                           ; 2 bytes @ 0x3C
  1775  00003D                     	ds	1
  1776  00003E                     drawtext@size:
  1777                           	opt stack 0
  1778                           
  1779                           ; 1 bytes @ 0x3D
  1780  00003E                     	ds	1
  1781  00003F                     ??_drawtext:
  1782  00003F                     fillCircle@color:
  1783                           	opt stack 0
  1784  00003F                     ___ftadd@f2:
  1785                           	opt stack 0
  1786                           
  1787                           ; 3 bytes @ 0x3E
  1788  00003F                     	ds	2
  1789  000041                     drawtext@x:
  1790                           	opt stack 0
  1791  000041                     update_LCD_color@color:
  1792                           	opt stack 0
  1793                           
  1794                           ; 1 bytes @ 0x40
  1795  000041                     	ds	1
  1796  000042                     ??___ftadd:
  1797  000042                     update_LCD_color@direction:
  1798                           	opt stack 0
  1799  000042                     ___fttol@sign1:
  1800                           	opt stack 0
  1801  000042                     drawtext@textsize:
  1802                           	opt stack 0
  1803                           
  1804                           ; 2 bytes @ 0x41
  1805  000042                     	ds	1
  1806  000043                     update_LCD_color@Circle_Y:
  1807                           	opt stack 0
  1808  000043                     ___fttol@lval:
  1809                           	opt stack 0
  1810                           
  1811                           ; 4 bytes @ 0x42
  1812  000043                     	ds	1
  1813  000044                     Set_NS@color:
  1814                           	opt stack 0
  1815  000044                     Set_NS_LT@color:
  1816                           	opt stack 0
  1817  000044                     Set_EW@color:
  1818                           	opt stack 0
  1819  000044                     Set_EW_LT@color:
  1820                           	opt stack 0
  1821  000044                     drawtext@i:
  1822                           	opt stack 0
  1823                           
  1824                           ; 2 bytes @ 0x43
  1825  000044                     	ds	1
  1826  000045                     ___ftadd@sign:
  1827                           	opt stack 0
  1828                           
  1829                           ; 1 bytes @ 0x44
  1830  000045                     	ds	1
  1831  000046                     drawtext@cursor_y:
  1832                           	opt stack 0
  1833  000046                     ___ftadd@exp2:
  1834                           	opt stack 0
  1835                           
  1836                           ; 1 bytes @ 0x45
  1837  000046                     	ds	1
  1838  000047                     drawtext@cursor_x:
  1839                           	opt stack 0
  1840  000047                     ___ftadd@exp1:
  1841                           	opt stack 0
  1842  000047                     ___fttol@exp1:
  1843                           	opt stack 0
  1844                           
  1845                           ; 1 bytes @ 0x46
  1846  000047                     	ds	1
  1847  000048                     ?___ftsub:
  1848                           	opt stack 0
  1849  000048                     update_LCD_count@count:
  1850                           	opt stack 0
  1851  000048                     update_LCD_PED_Count@count:
  1852                           	opt stack 0
  1853  000048                     update_LCD_misc@nStep:
  1854                           	opt stack 0
  1855  000048                     ___ftsub@f1:
  1856                           	opt stack 0
  1857                           
  1858                           ; 3 bytes @ 0x47
  1859  000048                     	ds	1
  1860  000049                     update_LCD_count@direction:
  1861                           	opt stack 0
  1862  000049                     update_LCD_PED_Count@direction:
  1863                           	opt stack 0
  1864                           
  1865                           ; 1 bytes @ 0x48
  1866  000049                     	ds	1
  1867  00004A                     ?_Do_Flashing:
  1868                           	opt stack 0
  1869  00004A                     PED_Control@Num_Sec:
  1870                           	opt stack 0
  1871  00004A                     Wait_N_Seconds@seconds:
  1872                           	opt stack 0
  1873                           
  1874                           ; 1 bytes @ 0x49
  1875  00004A                     	ds	1
  1876  00004B                     PED_Control@direction:
  1877                           	opt stack 0
  1878  00004B                     Wait_N_Seconds@I:
  1879                           	opt stack 0
  1880  00004B                     ___ftsub@f2:
  1881                           	opt stack 0
  1882                           
  1883                           ; 3 bytes @ 0x4A
  1884  00004B                     	ds	1
  1885  00004C                     PED_Control@i:
  1886                           	opt stack 0
  1887                           
  1888                           ; 1 bytes @ 0x4B
  1889  00004C                     	ds	1
  1890  00004D                     
  1891                           ; 0 bytes @ 0x4C
  1892  00004D                     	ds	1
  1893  00004E                     ?_printf:
  1894                           	opt stack 0
  1895  00004E                     printf@f:
  1896                           	opt stack 0
  1897                           
  1898                           ; 2 bytes @ 0x4D
  1899  00004E                     	ds	5
  1900  000053                     ??_printf:
  1901                           
  1902                           ; 0 bytes @ 0x52
  1903  000053                     	ds	6
  1904  000059                     main@nStep:
  1905                           	opt stack 0
  1906                           
  1907                           ; 2 bytes @ 0x58
  1908  000059                     	ds	2
  1909                           tblptru	equ	0xFF8
  1910                           tblptrh	equ	0xFF7
  1911                           tblptrl	equ	0xFF6
  1912                           tablat	equ	0xFF5
  1913                           postinc0	equ	0xFEE
  1914                           wreg	equ	0xFE8
  1915                           postdec1	equ	0xFE5
  1916                           fsr1l	equ	0xFE1
  1917                           
  1918 ;;
  1919 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1920 ;;
  1921 ;; *************** function _main *****************
  1922 ;; Defined at:
  1923 ;;		line 339 in file "Lab9pC.c"
  1924 ;; Parameters:    Size  Location     Type
  1925 ;;		None
  1926 ;; Auto vars:     Size  Location     Type
  1927 ;;  nStep           2   88[COMRAM] int 
  1928 ;; Return value:  Size  Location     Type
  1929 ;;		None               void
  1930 ;; Registers used:
  1931 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1932 ;; Tracked objects:
  1933 ;;		On entry : 0/0
  1934 ;;		On exit  : 0/0
  1935 ;;		Unchanged: 0/0
  1936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1938 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1940 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1941 ;;Total ram usage:        2 bytes
  1942 ;; Hardware stack levels required when called:   13
  1943 ;; This function calls:
  1944 ;;		_Day_Mode
  1945 ;;		_Do_Flashing
  1946 ;;		_Do_Init
  1947 ;;		_Initialize_Screen
  1948 ;;		_Night_Mode
  1949 ;;		___awtoft
  1950 ;;		___ftdiv
  1951 ;;		___ftge
  1952 ;;		___wmul
  1953 ;;		_get_full_ADC
  1954 ;;		_init_IO
  1955 ;;		_printf
  1956 ;; This function is called by:
  1957 ;;		Startup code after reset
  1958 ;; This function uses a non-reentrant model
  1959 ;;
  1960                           
  1961                           	psect	text0
  1962  0027B6                     __ptext0:
  1963                           	opt stack 0
  1964  0027B6                     _main:
  1965                           	opt stack 18
  1966                           
  1967                           ;Lab9pC.c: 341: Do_Init();
  1968                           
  1969                           ; BSR set to: 0
  1970                           ;incstack = 0
  1971  0027B6  EC79  F01D         	call	_Do_Init	;wreg free
  1972                           
  1973                           ;Lab9pC.c: 342: init_IO();
  1974  0027BA  ECBF  F01D         	call	_init_IO	;wreg free
  1975                           
  1976                           ;Lab9pC.c: 344: RBPU = 0;
  1977  0027BE  9EF1               	bcf	intcon2,7,c	;volatile
  1978                           
  1979                           ;Lab9pC.c: 345: Initialize_Screen();
  1980  0027C0  EC1F  F004         	call	_Initialize_Screen	;wreg free
  1981  0027C4  D000               	goto	l7086
  1982  0027C6                     l7086:
  1983                           
  1984                           ;Lab9pC.c: 348: {
  1985                           ;Lab9pC.c: 350: int nStep = get_full_ADC();
  1986  0027C6  EC54  F01D         	call	_get_full_ADC	;wreg free
  1987  0027CA  C00F  F059         	movff	?_get_full_ADC,main@nStep
  1988  0027CE  C010  F05A         	movff	?_get_full_ADC+1,main@nStep+1
  1989                           
  1990                           ;Lab9pC.c: 351: volt = nStep * 5 /1024.0;
  1991  0027D2  C059  F01D         	movff	main@nStep,___wmul@multiplier
  1992  0027D6  C05A  F01E         	movff	main@nStep+1,___wmul@multiplier+1
  1993  0027DA  0E00               	movlw	0
  1994  0027DC  6E20               	movwf	___wmul@multiplicand+1,c
  1995  0027DE  0E05               	movlw	5
  1996  0027E0  6E1F               	movwf	___wmul@multiplicand,c
  1997  0027E2  EC40  F01D         	call	___wmul	;wreg free
  1998  0027E6  C01D  F023         	movff	?___wmul,___awtoft@c
  1999  0027EA  C01E  F024         	movff	?___wmul+1,___awtoft@c+1
  2000  0027EE  ECC6  F01C         	call	___awtoft	;wreg free
  2001  0027F2  C023  F027         	movff	?___awtoft,___ftdiv@f1
  2002  0027F6  C024  F028         	movff	?___awtoft+1,___ftdiv@f1+1
  2003  0027FA  C025  F029         	movff	?___awtoft+2,___ftdiv@f1+2
  2004  0027FE  0E00               	movlw	0
  2005  002800  6E2A               	movwf	___ftdiv@f2,c
  2006  002802  0E80               	movlw	128
  2007  002804  6E2B               	movwf	___ftdiv@f2+1,c
  2008  002806  0E44               	movlw	68
  2009  002808  6E2C               	movwf	___ftdiv@f2+2,c
  2010  00280A  ECC5  F014         	call	___ftdiv	;wreg free
  2011  00280E  C027  F0AC         	movff	?___ftdiv,_volt
  2012  002812  C028  F0AD         	movff	?___ftdiv+1,_volt+1
  2013  002816  C029  F0AE         	movff	?___ftdiv+2,_volt+2
  2014                           
  2015                           ;Lab9pC.c: 352: printf("Voltage = %f \r\n", volt);
  2016  00281A  0EAD               	movlw	low STR_13
  2017  00281C  6E4E               	movwf	printf@f,c
  2018  00281E  0EFF               	movlw	high STR_13
  2019  002820  6E4F               	movwf	printf@f+1,c
  2020  002822  C0AC  F050         	movff	_volt,?_printf+2
  2021  002826  C0AD  F051         	movff	_volt+1,?_printf+3
  2022  00282A  C0AE  F052         	movff	_volt+2,?_printf+4
  2023  00282E  EC0E  F000         	call	_printf	;wreg free
  2024                           
  2025                           ;Lab9pC.c: 353: SW_MODE = volt < 3.5 ? 1:0;
  2026  002832  C0AC  F00F         	movff	_volt,___ftge@ff1
  2027  002836  C0AD  F010         	movff	_volt+1,___ftge@ff1+1
  2028  00283A  C0AE  F011         	movff	_volt+2,___ftge@ff1+2
  2029  00283E  0E00               	movlw	0
  2030  002840  6E12               	movwf	___ftge@ff2,c
  2031  002842  0E60               	movlw	96
  2032  002844  6E13               	movwf	___ftge@ff2+1,c
  2033  002846  0E40               	movlw	64
  2034  002848  6E14               	movwf	___ftge@ff2+2,c
  2035  00284A  EC9B  F017         	call	___ftge	;wreg free
  2036  00284E  B0D8               	btfsc	status,0,c
  2037  002850  D002               	goto	u6490
  2038  002852  0E01               	movlw	1
  2039  002854  D001               	goto	u6500
  2040  002856                     u6490:
  2041  002856  0E00               	movlw	0
  2042  002858                     u6500:
  2043  002858  6E63               	movwf	_SW_MODE,c
  2044                           
  2045                           ;Lab9pC.c: 354: printf("%d", SW_MODE);
  2046  00285A  0EF7               	movlw	low STR_14
  2047  00285C  6E4E               	movwf	printf@f,c
  2048  00285E  0EFF               	movlw	high STR_14
  2049  002860  6E4F               	movwf	printf@f+1,c
  2050  002862  C063  F050         	movff	_SW_MODE,?_printf+2
  2051  002866  6A51               	clrf	?_printf+3,c
  2052  002868  EC0E  F000         	call	_printf	;wreg free
  2053                           
  2054                           ;Lab9pC.c: 355: if(FLASHING_REQUEST)
  2055  00286C  505F               	movf	_FLASHING_REQUEST,w,c
  2056  00286E  B4D8               	btfsc	status,2,c
  2057  002870  D00A               	goto	l7102
  2058                           
  2059                           ;Lab9pC.c: 356: {
  2060                           ;Lab9pC.c: 357: FLASHING_REQUEST = 0;
  2061  002872  0E00               	movlw	0
  2062  002874  6E5F               	movwf	_FLASHING_REQUEST,c
  2063                           
  2064                           ;Lab9pC.c: 358: FLASHING = 1;
  2065  002876  0E01               	movlw	1
  2066  002878  6E5E               	movwf	_FLASHING,c
  2067                           
  2068                           ;Lab9pC.c: 359: Do_Flashing(FLASHING);
  2069  00287A  C05E  F04A         	movff	_FLASHING,?_Do_Flashing
  2070  00287E  6A4B               	clrf	?_Do_Flashing+1,c
  2071  002880  ECF5  F01A         	call	_Do_Flashing	;wreg free
  2072  002884  D000               	goto	l7102
  2073  002886                     l7102:
  2074                           
  2075                           ;Lab9pC.c: 360: }
  2076                           ;Lab9pC.c: 361: if (SW_MODE)
  2077  002886  5063               	movf	_SW_MODE,w,c
  2078  002888  B4D8               	btfsc	status,2,c
  2079  00288A  D003               	goto	l7106
  2080                           
  2081                           ;Lab9pC.c: 362: {
  2082                           ;Lab9pC.c: 363: Day_Mode();
  2083  00288C  EC13  F016         	call	_Day_Mode	;wreg free
  2084                           
  2085                           ;Lab9pC.c: 364: }
  2086  002890  D79A               	goto	l7086
  2087  002892                     l7106:
  2088                           
  2089                           ;Lab9pC.c: 365: else
  2090                           ;Lab9pC.c: 366: {
  2091                           ;Lab9pC.c: 367: NS_PED_SW = 0;
  2092  002892  0E00               	movlw	0
  2093  002894  6E60               	movwf	_NS_PED_SW,c
  2094                           
  2095                           ;Lab9pC.c: 368: EW_PED_SW = 0;
  2096  002896  0E00               	movlw	0
  2097  002898  6E5D               	movwf	_EW_PED_SW,c
  2098                           
  2099                           ;Lab9pC.c: 369: Night_Mode();
  2100  00289A  EC46  F017         	call	_Night_Mode	;wreg free
  2101  00289E  D793               	goto	l7086
  2102  0028A0  EF0C  F000         	goto	start
  2103  0028A4                     __end_of_main:
  2104                           	opt stack 0
  2105                           tblptru	equ	0xFF8
  2106                           tblptrh	equ	0xFF7
  2107                           tblptrl	equ	0xFF6
  2108                           tablat	equ	0xFF5
  2109                           intcon2	equ	0xFF1
  2110                           postinc0	equ	0xFEE
  2111                           wreg	equ	0xFE8
  2112                           postdec1	equ	0xFE5
  2113                           fsr1l	equ	0xFE1
  2114                           status	equ	0xFD8
  2115                           
  2116 ;; *************** function _printf *****************
  2117 ;; Defined at:
  2118 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2119 ;; Parameters:    Size  Location     Type
  2120 ;;  f               2   77[COMRAM] PTR const unsigned char 
  2121 ;;		 -> STR_14(3), STR_13(16), 
  2122 ;; Auto vars:     Size  Location     Type
  2123 ;;  tmpval          4   15[BANK0 ] struct .
  2124 ;;  val             4    9[BANK0 ] unsigned long 
  2125 ;;  fval            3   19[BANK0 ] unsigned long 
  2126 ;;  cp              3    0        PTR const unsigned char 
  2127 ;;  exp             2   13[BANK0 ] int 
  2128 ;;  prec            2    7[BANK0 ] int 
  2129 ;;  flag            2    5[BANK0 ] unsigned short 
  2130 ;;  ap              2    3[BANK0 ] PTR void [1]
  2131 ;;		 -> ?_printf(2), 
  2132 ;;  len             2    0        unsigned int 
  2133 ;;  width           2    0        int 
  2134 ;;  c               1   22[BANK0 ] char 
  2135 ;;  d               1    0        unsigned char 
  2136 ;; Return value:  Size  Location     Type
  2137 ;;                  2   77[COMRAM] int 
  2138 ;; Registers used:
  2139 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2140 ;; Tracked objects:
  2141 ;;		On entry : 0/0
  2142 ;;		On exit  : 0/0
  2143 ;;		Unchanged: 0/0
  2144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2145 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2146 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2147 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2148 ;;      Totals:        11      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2149 ;;Total ram usage:       34 bytes
  2150 ;; Hardware stack levels used:    1
  2151 ;; Hardware stack levels required when called:    5
  2152 ;; This function calls:
  2153 ;;		___awdiv
  2154 ;;		___ftadd
  2155 ;;		___ftge
  2156 ;;		___ftmul
  2157 ;;		___ftneg
  2158 ;;		___ftsub
  2159 ;;		___fttol
  2160 ;;		___lldiv
  2161 ;;		___llmod
  2162 ;;		___lltoft
  2163 ;;		___wmul
  2164 ;;		__div_to_l_
  2165 ;;		__tdiv_to_l_
  2166 ;;		_fround
  2167 ;;		_putch
  2168 ;;		_scale
  2169 ;; This function is called by:
  2170 ;;		_main
  2171 ;; This function uses a non-reentrant model
  2172 ;;
  2173                           
  2174                           	psect	text1
  2175  00001C                     __ptext1:
  2176                           	opt stack 0
  2177  00001C                     _printf:
  2178                           	opt stack 25
  2179                           
  2180                           ;doprnt.c: 466: va_list ap;
  2181                           ;doprnt.c: 499: signed char c;
  2182                           ;doprnt.c: 501: int width;
  2183                           ;doprnt.c: 504: int prec;
  2184                           ;doprnt.c: 508: unsigned short flag;
  2185                           ;doprnt.c: 515: char d;
  2186                           ;doprnt.c: 516: double fval;
  2187                           ;doprnt.c: 517: int exp;
  2188                           ;doprnt.c: 523: union {
  2189                           ;doprnt.c: 524: unsigned long vd;
  2190                           ;doprnt.c: 525: double integ;
  2191                           ;doprnt.c: 526: } tmpval;
  2192                           ;doprnt.c: 528: unsigned long val;
  2193                           ;doprnt.c: 529: unsigned len;
  2194                           ;doprnt.c: 530: const char * cp;
  2195                           ;doprnt.c: 533: *ap = __va_start();
  2196                           
  2197                           ;incstack = 0
  2198  00001C  0E50               	movlw	low (?_printf+2)
  2199  00001E  0100               	movlb	0	; () banked
  2200  000020  6FDA               	movwf	printf@ap& (0+255),b
  2201  000022  0E00               	movlw	high (?_printf+2)
  2202  000024  0100               	movlb	0	; () banked
  2203  000026  6FDB               	movwf	(printf@ap+1)& (0+255),b
  2204                           
  2205                           ;doprnt.c: 536: while(c = *f++) {
  2206  000028  D3F9               	goto	l6802
  2207  00002A                     l6622:
  2208                           
  2209                           ; BSR set to: 0
  2210                           ;doprnt.c: 538: if(c != '%')
  2211  00002A  0E25               	movlw	37
  2212  00002C  0100               	movlb	0	; () banked
  2213  00002E  19ED               	xorwf	printf@c& (0+255),w,b
  2214  000030  B4D8               	btfsc	status,2,c
  2215  000032  D005               	goto	l6626
  2216                           
  2217                           ; BSR set to: 0
  2218                           ;doprnt.c: 540: {
  2219                           ;doprnt.c: 541: (putch(c) );
  2220  000034  0100               	movlb	0	; () banked
  2221  000036  51ED               	movf	printf@c& (0+255),w,b
  2222  000038  EC0B  F01E         	call	_putch
  2223                           
  2224                           ;doprnt.c: 542: continue;
  2225  00003C  D3EF               	goto	l6802
  2226  00003E                     l6626:
  2227                           
  2228                           ;doprnt.c: 543: }
  2229                           ;doprnt.c: 548: flag = 0;
  2230  00003E  0E00               	movlw	0
  2231  000040  0100               	movlb	0	; () banked
  2232  000042  6FDD               	movwf	(printf@flag+1)& (0+255),b
  2233  000044  0E00               	movlw	0
  2234  000046  6FDC               	movwf	printf@flag& (0+255),b
  2235                           
  2236                           ;doprnt.c: 635: switch(c = *f++) {
  2237  000048  D006               	goto	l6632
  2238                           
  2239                           ; BSR set to: 0
  2240                           ;doprnt.c: 638: goto alldone;
  2241                           
  2242                           ;doprnt.c: 637: case 0:
  2243  00004A  D3F8               	goto	l647
  2244  00004C                     l6628:
  2245                           
  2246                           ; BSR set to: 0
  2247                           ;doprnt.c: 663: flag |= 0x400;
  2248  00004C  0100               	movlb	0	; () banked
  2249  00004E  85DD               	bsf	(printf@flag+1)& (0+255),2,b
  2250                           
  2251                           ; BSR set to: 0
  2252                           ;doprnt.c: 698: case 'i':
  2253                           ;doprnt.c: 699: break;
  2254                           
  2255                           ; BSR set to: 0
  2256                           
  2257                           ;doprnt.c: 697: case 'd':
  2258                           
  2259                           ;doprnt.c: 664: break;
  2260  000050  D019               	goto	l6634
  2261                           
  2262                           ; BSR set to: 0
  2263                           ;doprnt.c: 813: continue;
  2264                           
  2265                           ;doprnt.c: 802: default:
  2266  000052  D3E4               	goto	l6802
  2267                           
  2268                           ; BSR set to: 0
  2269                           ;doprnt.c: 822: }
  2270  000054  D017               	goto	l6634
  2271  000056                     l6632:
  2272                           
  2273                           ; BSR set to: 0
  2274  000056  C04E  FFF6         	movff	printf@f,tblptrl
  2275  00005A  C04F  FFF7         	movff	printf@f+1,tblptrh
  2276  00005E  4A4E               	infsnz	printf@f,f,c
  2277  000060  2A4F               	incf	printf@f+1,f,c
  2278  000062                     	if	0	;tblptru may be non-zero
  2279  000062                     	endif
  2280  000062                     	if	0	;tblptru may be non-zero
  2281  000062                     	endif
  2282  000062  0008               	tblrd		*
  2283  000064  CFF5 F0ED          	movff	tablat,printf@c
  2284  000068  0100               	movlb	0	; () banked
  2285  00006A  51ED               	movf	printf@c& (0+255),w,b
  2286                           
  2287                           ; Switch size 1, requested type "space"
  2288                           ; Number of cases is 4, Range of values is 0 to 105
  2289                           ; switch strategies available:
  2290                           ; Name         Instructions Cycles
  2291                           ; simple_byte           13     7 (average)
  2292                           ;	Chosen strategy is simple_byte
  2293  00006C  0A00               	xorlw	0	; case 0
  2294  00006E  B4D8               	btfsc	status,2,c
  2295  000070  D3E5               	goto	l647
  2296  000072  0A64               	xorlw	100	; case 100
  2297  000074  B4D8               	btfsc	status,2,c
  2298  000076  D006               	goto	l6634
  2299  000078  0A02               	xorlw	2	; case 102
  2300  00007A  B4D8               	btfsc	status,2,c
  2301  00007C  D7E7               	goto	l6628
  2302  00007E  0A0F               	xorlw	15	; case 105
  2303  000080  A4D8               	btfss	status,2,c
  2304  000082  D3CC               	goto	l6802
  2305  000084                     l6634:
  2306                           
  2307                           ; BSR set to: 0
  2308                           ;doprnt.c: 825: if(flag & (0x700)) {
  2309  000084  0E07               	movlw	7
  2310  000086  0100               	movlb	0	; () banked
  2311  000088  15DD               	andwf	(printf@flag+1)& (0+255),w,b
  2312  00008A  B4D8               	btfsc	status,2,c
  2313  00008C  D314               	goto	l6766
  2314                           
  2315                           ; BSR set to: 0
  2316                           ;doprnt.c: 829: prec = 6;
  2317  00008E  0E00               	movlw	0
  2318  000090  0100               	movlb	0	; () banked
  2319  000092  6FDF               	movwf	(printf@prec+1)& (0+255),b
  2320  000094  0E06               	movlw	6
  2321  000096  6FDE               	movwf	printf@prec& (0+255),b
  2322                           
  2323                           ; BSR set to: 0
  2324                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2325  000098  C0DA  FFD9         	movff	printf@ap,fsr2l
  2326  00009C  C0DB  FFDA         	movff	printf@ap+1,fsr2h
  2327  0000A0  CFDE F0EA          	movff	postinc2,printf@fval
  2328  0000A4  CFDE F0EB          	movff	postinc2,printf@fval+1
  2329  0000A8  CFDD F0EC          	movff	postdec2,printf@fval+2
  2330                           
  2331                           ; BSR set to: 0
  2332  0000AC  0E03               	movlw	3
  2333  0000AE  0100               	movlb	0	; () banked
  2334  0000B0  27DA               	addwf	printf@ap& (0+255),f,b
  2335  0000B2  0E00               	movlw	0
  2336  0000B4  23DB               	addwfc	(printf@ap+1)& (0+255),f,b
  2337                           
  2338                           ; BSR set to: 0
  2339                           ;doprnt.c: 831: if(fval < 0.0) {
  2340  0000B6  0100               	movlb	0	; () banked
  2341  0000B8  AFEC               	btfss	(printf@fval+2)& (0+255),7,b
  2342  0000BA  D012               	goto	l6648
  2343                           
  2344                           ; BSR set to: 0
  2345                           ;doprnt.c: 832: fval = -fval;
  2346  0000BC  C0EA  F00F         	movff	printf@fval,___ftneg@f1
  2347  0000C0  C0EB  F010         	movff	printf@fval+1,___ftneg@f1+1
  2348  0000C4  C0EC  F011         	movff	printf@fval+2,___ftneg@f1+2
  2349  0000C8  EC67  F01D         	call	___ftneg	;wreg free
  2350  0000CC  C00F  F0EA         	movff	?___ftneg,printf@fval
  2351  0000D0  C010  F0EB         	movff	?___ftneg+1,printf@fval+1
  2352  0000D4  C011  F0EC         	movff	?___ftneg+2,printf@fval+2
  2353                           
  2354                           ;doprnt.c: 833: flag |= 0x03;
  2355  0000D8  0E03               	movlw	3
  2356  0000DA  0100               	movlb	0	; () banked
  2357  0000DC  13DC               	iorwf	printf@flag& (0+255),f,b
  2358  0000DE  D000               	goto	l6648
  2359  0000E0                     l6648:
  2360                           
  2361                           ; BSR set to: 0
  2362                           ;doprnt.c: 834: }
  2363                           ;doprnt.c: 835: exp = 0;
  2364  0000E0  0E00               	movlw	0
  2365  0000E2  0100               	movlb	0	; () banked
  2366  0000E4  6FE5               	movwf	(printf@exp+1)& (0+255),b
  2367  0000E6  0E00               	movlw	0
  2368  0000E8  6FE4               	movwf	printf@exp& (0+255),b
  2369                           
  2370                           ; BSR set to: 0
  2371                           ;doprnt.c: 836: if( fval!=0) {
  2372  0000EA  0100               	movlb	0	; () banked
  2373  0000EC  51EA               	movf	printf@fval& (0+255),w,b
  2374  0000EE  0100               	movlb	0	; () banked
  2375  0000F0  11EB               	iorwf	(printf@fval+1)& (0+255),w,b
  2376  0000F2  0100               	movlb	0	; () banked
  2377  0000F4  11EC               	iorwf	(printf@fval+2)& (0+255),w,b
  2378  0000F6  B4D8               	btfsc	status,2,c
  2379  0000F8  D08D               	goto	l6676
  2380                           
  2381                           ; BSR set to: 0
  2382                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2383  0000FA  0E82               	movlw	130
  2384  0000FC  6E53               	movwf	??_printf& (0+255),c
  2385  0000FE  0EFF               	movlw	255
  2386  000100  6E54               	movwf	(??_printf+1)& (0+255),c
  2387  000102  C0EA  F055         	movff	printf@fval,??_printf+2
  2388  000106  C0EB  F056         	movff	printf@fval+1,??_printf+3
  2389  00010A  C0EC  F057         	movff	printf@fval+2,??_printf+4
  2390  00010E  C0ED  F058         	movff	printf@fval+3,??_printf+5
  2391  000112  0E10               	movlw	16
  2392  000114  D005               	goto	u6140
  2393  000116                     u6145:
  2394  000116  90D8               	bcf	status,0,c
  2395  000118  3258               	rrcf	??_printf+5,f,c
  2396  00011A  3257               	rrcf	??_printf+4,f,c
  2397  00011C  3256               	rrcf	??_printf+3,f,c
  2398  00011E  3255               	rrcf	??_printf+2,f,c
  2399  000120                     u6140:
  2400  000120  2EE8               	decfsz	wreg,f,c
  2401  000122  D7F9               	goto	u6145
  2402  000124  5055               	movf	??_printf+2,w,c
  2403  000126  2453               	addwf	??_printf,w,c
  2404  000128  0100               	movlb	0	; () banked
  2405  00012A  6FE4               	movwf	printf@exp& (0+255),b
  2406  00012C  0E00               	movlw	0
  2407  00012E  2054               	addwfc	??_printf+1,w,c
  2408  000130  0100               	movlb	0	; () banked
  2409  000132  6FE5               	movwf	(printf@exp+1)& (0+255),b
  2410                           
  2411                           ; BSR set to: 0
  2412                           ;doprnt.c: 838: exp--;
  2413  000134  0100               	movlb	0	; () banked
  2414  000136  07E4               	decf	printf@exp& (0+255),f,b
  2415  000138  A0D8               	btfss	status,0,c
  2416  00013A  07E5               	decf	(printf@exp+1)& (0+255),f,b
  2417                           
  2418                           ; BSR set to: 0
  2419                           ;doprnt.c: 839: exp *= 3;
  2420  00013C  C0E4  F01D         	movff	printf@exp,___wmul@multiplier
  2421  000140  C0E5  F01E         	movff	printf@exp+1,___wmul@multiplier+1
  2422  000144  0E00               	movlw	0
  2423  000146  6E20               	movwf	___wmul@multiplicand+1,c
  2424  000148  0E03               	movlw	3
  2425  00014A  6E1F               	movwf	___wmul@multiplicand,c
  2426  00014C  EC40  F01D         	call	___wmul	;wreg free
  2427  000150  C01D  F0E4         	movff	?___wmul,printf@exp
  2428  000154  C01E  F0E5         	movff	?___wmul+1,printf@exp+1
  2429                           
  2430                           ;doprnt.c: 840: exp /= 10;
  2431  000158  C0E4  F015         	movff	printf@exp,___awdiv@dividend
  2432  00015C  C0E5  F016         	movff	printf@exp+1,___awdiv@dividend+1
  2433  000160  0E00               	movlw	0
  2434  000162  6E18               	movwf	___awdiv@divisor+1,c
  2435  000164  0E0A               	movlw	10
  2436  000166  6E17               	movwf	___awdiv@divisor,c
  2437  000168  ECE6  F017         	call	___awdiv	;wreg free
  2438  00016C  C015  F0E4         	movff	?___awdiv,printf@exp
  2439  000170  C016  F0E5         	movff	?___awdiv+1,printf@exp+1
  2440                           
  2441                           ;doprnt.c: 841: if(exp < 0)
  2442  000174  0100               	movlb	0	; () banked
  2443  000176  AFE5               	btfss	(printf@exp+1)& (0+255),7,b
  2444  000178  D005               	goto	l6664
  2445                           
  2446                           ; BSR set to: 0
  2447                           ;doprnt.c: 842: exp--;
  2448  00017A  0100               	movlb	0	; () banked
  2449  00017C  07E4               	decf	printf@exp& (0+255),f,b
  2450  00017E  A0D8               	btfss	status,0,c
  2451  000180  07E5               	decf	(printf@exp+1)& (0+255),f,b
  2452  000182  D000               	goto	l6664
  2453  000184                     l6664:
  2454                           
  2455                           ; BSR set to: 0
  2456                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2457  000184  0100               	movlb	0	; () banked
  2458  000186  51E4               	movf	printf@exp& (0+255),w,b
  2459  000188  0800               	sublw	0
  2460  00018A  ECAE  F007         	call	_scale
  2461  00018E  C032  F0E6         	movff	?_scale,printf@tmpval
  2462  000192  C033  F0E7         	movff	?_scale+1,printf@tmpval+1
  2463  000196  C034  F0E8         	movff	?_scale+2,printf@tmpval+2
  2464                           
  2465                           ;doprnt.c: 847: tmpval.integ *= fval;
  2466  00019A  C0E6  F023         	movff	printf@tmpval,___ftmul@f1
  2467  00019E  C0E7  F024         	movff	printf@tmpval+1,___ftmul@f1+1
  2468  0001A2  C0E8  F025         	movff	printf@tmpval+2,___ftmul@f1+2
  2469  0001A6  C0EA  F026         	movff	printf@fval,___ftmul@f2
  2470  0001AA  C0EB  F027         	movff	printf@fval+1,___ftmul@f2+1
  2471  0001AE  C0EC  F028         	movff	printf@fval+2,___ftmul@f2+2
  2472  0001B2  ECE6  F012         	call	___ftmul	;wreg free
  2473  0001B6  C023  F0E6         	movff	?___ftmul,printf@tmpval
  2474  0001BA  C024  F0E7         	movff	?___ftmul+1,printf@tmpval+1
  2475  0001BE  C025  F0E8         	movff	?___ftmul+2,printf@tmpval+2
  2476                           
  2477                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2478  0001C2  C0E6  F00F         	movff	printf@tmpval,___ftge@ff1
  2479  0001C6  C0E7  F010         	movff	printf@tmpval+1,___ftge@ff1+1
  2480  0001CA  C0E8  F011         	movff	printf@tmpval+2,___ftge@ff1+2
  2481  0001CE  0E00               	movlw	0
  2482  0001D0  6E12               	movwf	___ftge@ff2,c
  2483  0001D2  0E80               	movlw	128
  2484  0001D4  6E13               	movwf	___ftge@ff2+1,c
  2485  0001D6  0E3F               	movlw	63
  2486  0001D8  6E14               	movwf	___ftge@ff2+2,c
  2487  0001DA  EC9B  F017         	call	___ftge	;wreg free
  2488  0001DE  B0D8               	btfsc	status,0,c
  2489  0001E0  D005               	goto	l6672
  2490                           
  2491                           ;doprnt.c: 849: exp--;
  2492  0001E2  0100               	movlb	0	; () banked
  2493  0001E4  07E4               	decf	printf@exp& (0+255),f,b
  2494  0001E6  A0D8               	btfss	status,0,c
  2495  0001E8  07E5               	decf	(printf@exp+1)& (0+255),f,b
  2496  0001EA  D014               	goto	l6676
  2497  0001EC                     l6672:
  2498                           
  2499                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2500  0001EC  C0E6  F00F         	movff	printf@tmpval,___ftge@ff1
  2501  0001F0  C0E7  F010         	movff	printf@tmpval+1,___ftge@ff1+1
  2502  0001F4  C0E8  F011         	movff	printf@tmpval+2,___ftge@ff1+2
  2503  0001F8  0E00               	movlw	0
  2504  0001FA  6E12               	movwf	___ftge@ff2,c
  2505  0001FC  0E20               	movlw	32
  2506  0001FE  6E13               	movwf	___ftge@ff2+1,c
  2507  000200  0E41               	movlw	65
  2508  000202  6E14               	movwf	___ftge@ff2+2,c
  2509  000204  EC9B  F017         	call	___ftge	;wreg free
  2510  000208  A0D8               	btfss	status,0,c
  2511  00020A  D004               	goto	l6676
  2512                           
  2513                           ;doprnt.c: 851: exp++;
  2514  00020C  0100               	movlb	0	; () banked
  2515  00020E  4BE4               	infsnz	printf@exp& (0+255),f,b
  2516  000210  2BE5               	incf	(printf@exp+1)& (0+255),f,b
  2517                           
  2518                           ; BSR set to: 0
  2519                           
  2520                           ; BSR set to: 0
  2521  000212  D000               	goto	l6676
  2522  000214                     l6676:
  2523                           
  2524                           ;doprnt.c: 852: }
  2525                           ;doprnt.c: 1112: if(prec <= 12)
  2526  000214  0100               	movlb	0	; () banked
  2527  000216  BFDF               	btfsc	(printf@prec+1)& (0+255),7,b
  2528  000218  D008               	goto	l6678
  2529  00021A  0100               	movlb	0	; () banked
  2530  00021C  51DF               	movf	(printf@prec+1)& (0+255),w,b
  2531  00021E  E11E               	bnz	l6680
  2532  000220  0E0D               	movlw	13
  2533  000222  0100               	movlb	0	; () banked
  2534  000224  5DDE               	subwf	printf@prec& (0+255),w,b
  2535  000226  B0D8               	btfsc	status,0,c
  2536  000228  D019               	goto	l6680
  2537  00022A                     l6678:
  2538                           
  2539                           ; BSR set to: 0
  2540                           ;doprnt.c: 1113: fval += fround(prec);
  2541  00022A  C0EA  F03C         	movff	printf@fval,___ftadd@f1
  2542  00022E  C0EB  F03D         	movff	printf@fval+1,___ftadd@f1+1
  2543  000232  C0EC  F03E         	movff	printf@fval+2,___ftadd@f1+2
  2544  000236  0100               	movlb	0	; () banked
  2545  000238  51DE               	movf	printf@prec& (0+255),w,b
  2546  00023A  EC4F  F00B         	call	_fround
  2547  00023E  C032  F03F         	movff	?_fround,___ftadd@f2
  2548  000242  C033  F040         	movff	?_fround+1,___ftadd@f2+1
  2549  000246  C034  F041         	movff	?_fround+2,___ftadd@f2+2
  2550  00024A  EC8A  F00D         	call	___ftadd	;wreg free
  2551  00024E  C03C  F0EA         	movff	?___ftadd,printf@fval
  2552  000252  C03D  F0EB         	movff	?___ftadd+1,printf@fval+1
  2553  000256  C03E  F0EC         	movff	?___ftadd+2,printf@fval+2
  2554  00025A  D000               	goto	l6680
  2555  00025C                     l6680:
  2556                           
  2557                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2558  00025C  0100               	movlb	0	; () banked
  2559  00025E  BFE5               	btfsc	(printf@exp+1)& (0+255),7,b
  2560  000260  D008               	goto	l6682
  2561  000262  0100               	movlb	0	; () banked
  2562  000264  51E5               	movf	(printf@exp+1)& (0+255),w,b
  2563  000266  E128               	bnz	l6688
  2564  000268  0E0A               	movlw	10
  2565  00026A  0100               	movlb	0	; () banked
  2566  00026C  5DE4               	subwf	printf@exp& (0+255),w,b
  2567  00026E  B0D8               	btfsc	status,0,c
  2568  000270  D023               	goto	l6688
  2569  000272                     l6682:
  2570                           
  2571                           ; BSR set to: 0
  2572  000272  0100               	movlb	0	; () banked
  2573  000274  51EA               	movf	printf@fval& (0+255),w,b
  2574  000276  0100               	movlb	0	; () banked
  2575  000278  11EB               	iorwf	(printf@fval+1)& (0+255),w,b
  2576  00027A  0100               	movlb	0	; () banked
  2577  00027C  11EC               	iorwf	(printf@fval+2)& (0+255),w,b
  2578  00027E  B4D8               	btfsc	status,2,c
  2579  000280  D077               	goto	l6702
  2580                           
  2581                           ; BSR set to: 0
  2582  000282  C0EA  F039         	movff	printf@fval,___fttol@f1
  2583  000286  C0EB  F03A         	movff	printf@fval+1,___fttol@f1+1
  2584  00028A  C0EC  F03B         	movff	printf@fval+2,___fttol@f1+2
  2585  00028E  EC52  F014         	call	___fttol	;wreg free
  2586  000292  5039               	movf	?___fttol,w,c
  2587  000294  103A               	iorwf	?___fttol+1,w,c
  2588  000296  103B               	iorwf	?___fttol+2,w,c
  2589  000298  103C               	iorwf	?___fttol+3,w,c
  2590  00029A  A4D8               	btfss	status,2,c
  2591  00029C  D069               	goto	l6702
  2592  00029E  0100               	movlb	0	; () banked
  2593  0002A0  BFE5               	btfsc	(printf@exp+1)& (0+255),7,b
  2594  0002A2  D066               	goto	l6702
  2595  0002A4  0100               	movlb	0	; () banked
  2596  0002A6  51E5               	movf	(printf@exp+1)& (0+255),w,b
  2597  0002A8  E107               	bnz	l6688
  2598  0002AA  0E02               	movlw	2
  2599  0002AC  0100               	movlb	0	; () banked
  2600  0002AE  5DE4               	subwf	printf@exp& (0+255),w,b
  2601  0002B0  B0D8               	btfsc	status,0,c
  2602  0002B2  D002               	goto	l6688
  2603  0002B4  D05D               	goto	l6702
  2604  0002B6  D000               	goto	l6688
  2605  0002B8                     l6688:
  2606                           
  2607                           ; BSR set to: 0
  2608                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2609  0002B8  C0E6  F00F         	movff	printf@tmpval,___ftge@ff1
  2610  0002BC  C0E7  F010         	movff	printf@tmpval+1,___ftge@ff1+1
  2611  0002C0  C0E8  F011         	movff	printf@tmpval+2,___ftge@ff1+2
  2612  0002C4  0E70               	movlw	112
  2613  0002C6  6E12               	movwf	___ftge@ff2,c
  2614  0002C8  0E89               	movlw	137
  2615  0002CA  6E13               	movwf	___ftge@ff2+1,c
  2616  0002CC  0E40               	movlw	64
  2617  0002CE  6E14               	movwf	___ftge@ff2+2,c
  2618  0002D0  EC9B  F017         	call	___ftge	;wreg free
  2619  0002D4  B0D8               	btfsc	status,0,c
  2620  0002D6  D003               	goto	l6692
  2621                           
  2622                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2623  0002D8  0100               	movlb	0	; () banked
  2624  0002DA  0EF7               	movlw	247
  2625  0002DC  D002               	goto	L1
  2626  0002DE                     l6692:
  2627                           
  2628                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2629  0002DE  0100               	movlb	0	; () banked
  2630  0002E0  0EF8               	movlw	248
  2631  0002E2                     L1:
  2632  0002E2  27E4               	addwf	printf@exp& (0+255),f,b
  2633  0002E4  0EFF               	movlw	255
  2634  0002E6  23E5               	addwfc	(printf@exp+1)& (0+255),f,b
  2635  0002E8  D000               	goto	l6694
  2636  0002EA                     l6694:
  2637                           
  2638                           ; BSR set to: 0
  2639                           ;doprnt.c: 1124: }
  2640                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2641  0002EA  0100               	movlb	0	; () banked
  2642  0002EC  51E4               	movf	printf@exp& (0+255),w,b
  2643  0002EE  ECAE  F007         	call	_scale
  2644  0002F2  C032  F0E6         	movff	?_scale,printf@tmpval
  2645  0002F6  C033  F0E7         	movff	?_scale+1,printf@tmpval+1
  2646  0002FA  C034  F0E8         	movff	?_scale+2,printf@tmpval+2
  2647                           
  2648                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2649  0002FE  D017               	goto	l6698
  2650  000300  C0EA  F00F         	movff	printf@fval,__div_to_l_@f1
  2651  000304  C0EB  F010         	movff	printf@fval+1,__div_to_l_@f1+1
  2652  000308  C0EC  F011         	movff	printf@fval+2,__div_to_l_@f1+2
  2653  00030C  C0E6  F012         	movff	printf@tmpval,__div_to_l_@f2
  2654  000310  C0E7  F013         	movff	printf@tmpval+1,__div_to_l_@f2+1
  2655  000314  C0E8  F014         	movff	printf@tmpval+2,__div_to_l_@f2+2
  2656  000318  EC61  F012         	call	__div_to_l_	;wreg free
  2657  00031C  C00F  F0E0         	movff	?__div_to_l_,printf@val
  2658  000320  C010  F0E1         	movff	?__div_to_l_+1,printf@val+1
  2659  000324  C011  F0E2         	movff	?__div_to_l_+2,printf@val+2
  2660  000328  C012  F0E3         	movff	?__div_to_l_+3,printf@val+3
  2661  00032C  D017               	goto	l6700
  2662  00032E                     l6698:
  2663  00032E  C0EA  F00F         	movff	printf@fval,__tdiv_to_l_@f1
  2664  000332  C0EB  F010         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  2665  000336  C0EC  F011         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  2666  00033A  C0E6  F012         	movff	printf@tmpval,__tdiv_to_l_@f2
  2667  00033E  C0E7  F013         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  2668  000342  C0E8  F014         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  2669  000346  EC51  F011         	call	__tdiv_to_l_	;wreg free
  2670  00034A  C00F  F0E0         	movff	?__tdiv_to_l_,printf@val
  2671  00034E  C010  F0E1         	movff	?__tdiv_to_l_+1,printf@val+1
  2672  000352  C011  F0E2         	movff	?__tdiv_to_l_+2,printf@val+2
  2673  000356  C012  F0E3         	movff	?__tdiv_to_l_+3,printf@val+3
  2674  00035A  D000               	goto	l6700
  2675  00035C                     l6700:
  2676                           
  2677                           ;doprnt.c: 1129: fval = 0.0;
  2678  00035C  0E00               	movlw	0
  2679  00035E  0100               	movlb	0	; () banked
  2680  000360  6FEA               	movwf	printf@fval& (0+255),b
  2681  000362  0E00               	movlw	0
  2682  000364  0100               	movlb	0	; () banked
  2683  000366  6FEB               	movwf	(printf@fval+1)& (0+255),b
  2684  000368  0E00               	movlw	0
  2685  00036A  0100               	movlb	0	; () banked
  2686  00036C  6FEC               	movwf	(printf@fval+2)& (0+255),b
  2687                           
  2688                           ;doprnt.c: 1130: } else {
  2689  00036E  D034               	goto	l6706
  2690  000370                     l6702:
  2691                           
  2692                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2693  000370  C0EA  F039         	movff	printf@fval,___fttol@f1
  2694  000374  C0EB  F03A         	movff	printf@fval+1,___fttol@f1+1
  2695  000378  C0EC  F03B         	movff	printf@fval+2,___fttol@f1+2
  2696  00037C  EC52  F014         	call	___fttol	;wreg free
  2697  000380  C039  F0E0         	movff	?___fttol,printf@val
  2698  000384  C03A  F0E1         	movff	?___fttol+1,printf@val+1
  2699  000388  C03B  F0E2         	movff	?___fttol+2,printf@val+2
  2700  00038C  C03C  F0E3         	movff	?___fttol+3,printf@val+3
  2701                           
  2702                           ;doprnt.c: 1132: fval -= (double)val;
  2703  000390  C0EA  F048         	movff	printf@fval,___ftsub@f1
  2704  000394  C0EB  F049         	movff	printf@fval+1,___ftsub@f1+1
  2705  000398  C0EC  F04A         	movff	printf@fval+2,___ftsub@f1+2
  2706  00039C  C0E0  F017         	movff	printf@val,___lltoft@c
  2707  0003A0  C0E1  F018         	movff	printf@val+1,___lltoft@c+1
  2708  0003A4  C0E2  F019         	movff	printf@val+2,___lltoft@c+2
  2709  0003A8  C0E3  F01A         	movff	printf@val+3,___lltoft@c+3
  2710  0003AC  EC9B  F01A         	call	___lltoft	;wreg free
  2711  0003B0  C017  F04B         	movff	?___lltoft,___ftsub@f2
  2712  0003B4  C018  F04C         	movff	?___lltoft+1,___ftsub@f2+1
  2713  0003B8  C019  F04D         	movff	?___lltoft+2,___ftsub@f2+2
  2714  0003BC  ECBD  F01B         	call	___ftsub	;wreg free
  2715  0003C0  C048  F0EA         	movff	?___ftsub,printf@fval
  2716  0003C4  C049  F0EB         	movff	?___ftsub+1,printf@fval+1
  2717  0003C8  C04A  F0EC         	movff	?___ftsub+2,printf@fval+2
  2718                           
  2719                           ;doprnt.c: 1133: exp = 0;
  2720  0003CC  0E00               	movlw	0
  2721  0003CE  0100               	movlb	0	; () banked
  2722  0003D0  6FE5               	movwf	(printf@exp+1)& (0+255),b
  2723  0003D2  0E00               	movlw	0
  2724  0003D4  6FE4               	movwf	printf@exp& (0+255),b
  2725  0003D6  D000               	goto	l6706
  2726  0003D8                     l6706:
  2727                           
  2728                           ; BSR set to: 0
  2729                           ;doprnt.c: 1134: }
  2730                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2731  0003D8  0E01               	movlw	1
  2732  0003DA  0100               	movlb	0	; () banked
  2733  0003DC  6FED               	movwf	printf@c& (0+255),b
  2734  0003DE                     l6708:
  2735                           
  2736                           ; BSR set to: 0
  2737  0003DE  0E0A               	movlw	10
  2738  0003E0  0100               	movlb	0	; () banked
  2739  0003E2  19ED               	xorwf	printf@c& (0+255),w,b
  2740  0003E4  B4D8               	btfsc	status,2,c
  2741  0003E6  D022               	goto	l6720
  2742  0003E8  D001               	goto	l6712
  2743                           
  2744                           ; BSR set to: 0
  2745  0003EA  D020               	goto	l6720
  2746  0003EC                     l6712:
  2747                           
  2748                           ; BSR set to: 0
  2749                           ;doprnt.c: 1137: if(val < dpowers[c])
  2750  0003EC  0100               	movlb	0	; () banked
  2751  0003EE  51ED               	movf	printf@c& (0+255),w,b
  2752  0003F0  0D04               	mullw	4
  2753  0003F2  0E0E               	movlw	low _dpowers
  2754  0003F4  24F3               	addwf	prodl,w,c
  2755  0003F6  6EF6               	movwf	tblptrl,c
  2756  0003F8  0EFF               	movlw	high _dpowers
  2757  0003FA  20F4               	addwfc	prodh,w,c
  2758  0003FC  6EF7               	movwf	tblptrh,c
  2759  0003FE                     	if	0	;There are less than 3 active tblptr bytes
  2760  0003FE                     	endif
  2761  0003FE  0009               	tblrd		*+
  2762  000400  50F5               	movf	tablat,w,c
  2763  000402  0100               	movlb	0	; () banked
  2764  000404  5DE0               	subwf	printf@val& (0+255),w,b
  2765  000406  0009               	tblrd		*+
  2766  000408  50F5               	movf	tablat,w,c
  2767  00040A  0100               	movlb	0	; () banked
  2768  00040C  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  2769  00040E  0009               	tblrd		*+
  2770  000410  50F5               	movf	tablat,w,c
  2771  000412  0100               	movlb	0	; () banked
  2772  000414  59E2               	subwfb	(printf@val+2)& (0+255),w,b
  2773  000416  0009               	tblrd		*+
  2774  000418  50F5               	movf	tablat,w,c
  2775  00041A  0100               	movlb	0	; () banked
  2776  00041C  59E3               	subwfb	(printf@val+3)& (0+255),w,b
  2777  00041E  A0D8               	btfss	status,0,c
  2778  000420  D005               	goto	l6720
  2779  000422  D001               	goto	l6716
  2780                           
  2781                           ; BSR set to: 0
  2782                           ;doprnt.c: 1138: break;
  2783  000424  D003               	goto	l6720
  2784  000426                     l6716:
  2785                           
  2786                           ; BSR set to: 0
  2787  000426  0100               	movlb	0	; () banked
  2788  000428  2BED               	incf	printf@c& (0+255),f,b
  2789  00042A  D7D9               	goto	l6708
  2790  00042C                     l6720:
  2791                           
  2792                           ; BSR set to: 0
  2793                           ;doprnt.c: 1175: {
  2794                           ;doprnt.c: 1188: if(flag & 0x03)
  2795  00042C  0E03               	movlw	3
  2796  00042E  0100               	movlb	0	; () banked
  2797  000430  15DC               	andwf	printf@flag& (0+255),w,b
  2798  000432  6E53               	movwf	??_printf& (0+255),c
  2799  000434  0E00               	movlw	0
  2800  000436  0100               	movlb	0	; () banked
  2801  000438  15DD               	andwf	(printf@flag+1)& (0+255),w,b
  2802  00043A  6E54               	movwf	(??_printf+1)& (0+255),c
  2803  00043C  5053               	movf	??_printf,w,c
  2804  00043E  1054               	iorwf	??_printf+1,w,c
  2805  000440  B4D8               	btfsc	status,2,c
  2806  000442  D04B               	goto	l6730
  2807                           
  2808                           ; BSR set to: 0
  2809                           ;doprnt.c: 1190: (putch('-') );
  2810  000444  0E2D               	movlw	45
  2811  000446  EC0B  F01E         	call	_putch
  2812                           
  2813                           ;doprnt.c: 1195: }
  2814                           ;doprnt.c: 1196: while(c--) {
  2815  00044A  D047               	goto	l6730
  2816  00044C                     l6724:
  2817                           
  2818                           ;doprnt.c: 1200: {
  2819                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2820  00044C  C0E0  F00F         	movff	printf@val,___lldiv@dividend
  2821  000450  C0E1  F010         	movff	printf@val+1,___lldiv@dividend+1
  2822  000454  C0E2  F011         	movff	printf@val+2,___lldiv@dividend+2
  2823  000458  C0E3  F012         	movff	printf@val+3,___lldiv@dividend+3
  2824  00045C  0100               	movlb	0	; () banked
  2825  00045E  51ED               	movf	printf@c& (0+255),w,b
  2826  000460  0D04               	mullw	4
  2827  000462  0E0E               	movlw	low _dpowers
  2828  000464  24F3               	addwf	prodl,w,c
  2829  000466  6EF6               	movwf	tblptrl,c
  2830  000468  0EFF               	movlw	high _dpowers
  2831  00046A  20F4               	addwfc	prodh,w,c
  2832  00046C  6EF7               	movwf	tblptrh,c
  2833  00046E                     	if	0	;There are less than 3 active tblptr bytes
  2834  00046E                     	endif
  2835  00046E  0009               	tblrd		*+
  2836  000470  CFF5 F013          	movff	tablat,___lldiv@divisor
  2837  000474  0009               	tblrd		*+
  2838  000476  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  2839  00047A  0009               	tblrd		*+
  2840  00047C  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  2841  000480  000A               	tblrd		*-
  2842  000482  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  2843  000486  EC31  F018         	call	___lldiv	;wreg free
  2844  00048A  C00F  F0E6         	movff	?___lldiv,printf@tmpval
  2845  00048E  C010  F0E7         	movff	?___lldiv+1,printf@tmpval+1
  2846  000492  C011  F0E8         	movff	?___lldiv+2,printf@tmpval+2
  2847  000496  C012  F0E9         	movff	?___lldiv+3,printf@tmpval+3
  2848                           
  2849                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2850  00049A  C0E6  F01C         	movff	printf@tmpval,___llmod@dividend
  2851  00049E  C0E7  F01D         	movff	printf@tmpval+1,___llmod@dividend+1
  2852  0004A2  C0E8  F01E         	movff	printf@tmpval+2,___llmod@dividend+2
  2853  0004A6  C0E9  F01F         	movff	printf@tmpval+3,___llmod@dividend+3
  2854  0004AA  0E0A               	movlw	10
  2855  0004AC  6E20               	movwf	___llmod@divisor,c
  2856  0004AE  0E00               	movlw	0
  2857  0004B0  6E21               	movwf	___llmod@divisor+1,c
  2858  0004B2  0E00               	movlw	0
  2859  0004B4  6E22               	movwf	___llmod@divisor+2,c
  2860  0004B6  0E00               	movlw	0
  2861  0004B8  6E23               	movwf	___llmod@divisor+3,c
  2862  0004BA  ECC4  F019         	call	___llmod	;wreg free
  2863  0004BE  C01C  F0E6         	movff	?___llmod,printf@tmpval
  2864  0004C2  C01D  F0E7         	movff	?___llmod+1,printf@tmpval+1
  2865  0004C6  C01E  F0E8         	movff	?___llmod+2,printf@tmpval+2
  2866  0004CA  C01F  F0E9         	movff	?___llmod+3,printf@tmpval+3
  2867                           
  2868                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  2869  0004CE  0100               	movlb	0	; () banked
  2870  0004D0  51E6               	movf	printf@tmpval& (0+255),w,b
  2871  0004D2  0F30               	addlw	48
  2872  0004D4  EC0B  F01E         	call	_putch
  2873  0004D8  D000               	goto	l6730
  2874  0004DA                     l6730:
  2875  0004DA  0100               	movlb	0	; () banked
  2876  0004DC  07ED               	decf	printf@c& (0+255),f,b
  2877  0004DE  0100               	movlb	0	; () banked
  2878  0004E0  29ED               	incf	printf@c& (0+255),w,b
  2879  0004E2  B4D8               	btfsc	status,2,c
  2880  0004E4  D00A               	goto	l6736
  2881  0004E6  D7B2               	goto	l6724
  2882                           
  2883                           ; BSR set to: 0
  2884                           ;doprnt.c: 1204: }
  2885                           ;doprnt.c: 1206: }
  2886                           ;doprnt.c: 1207: while(exp > 0) {
  2887  0004E8  D008               	goto	l6736
  2888  0004EA                     l6732:
  2889                           
  2890                           ; BSR set to: 0
  2891                           ;doprnt.c: 1208: (putch('0') );
  2892  0004EA  0E30               	movlw	48
  2893  0004EC  EC0B  F01E         	call	_putch
  2894                           
  2895                           ;doprnt.c: 1209: exp--;
  2896  0004F0  0100               	movlb	0	; () banked
  2897  0004F2  07E4               	decf	printf@exp& (0+255),f,b
  2898  0004F4  A0D8               	btfss	status,0,c
  2899  0004F6  07E5               	decf	(printf@exp+1)& (0+255),f,b
  2900  0004F8  D000               	goto	l6736
  2901  0004FA                     l6736:
  2902                           
  2903                           ; BSR set to: 0
  2904  0004FA  0100               	movlb	0	; () banked
  2905  0004FC  BFE5               	btfsc	(printf@exp+1)& (0+255),7,b
  2906  0004FE  D007               	goto	l6738
  2907  000500  0100               	movlb	0	; () banked
  2908  000502  51E5               	movf	(printf@exp+1)& (0+255),w,b
  2909  000504  E1F2               	bnz	l6732
  2910  000506  0100               	movlb	0	; () banked
  2911  000508  05E4               	decf	printf@exp& (0+255),w,b
  2912  00050A  B0D8               	btfsc	status,0,c
  2913  00050C  D7EE               	goto	l6732
  2914  00050E                     l6738:
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;doprnt.c: 1210: }
  2918                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2919  00050E  0100               	movlb	0	; () banked
  2920  000510  BFDF               	btfsc	(printf@prec+1)& (0+255),7,b
  2921  000512  D00C               	goto	l629
  2922  000514  0100               	movlb	0	; () banked
  2923  000516  51DF               	movf	(printf@prec+1)& (0+255),w,b
  2924  000518  E105               	bnz	u6300
  2925  00051A  0E09               	movlw	9
  2926  00051C  0100               	movlb	0	; () banked
  2927  00051E  5DDE               	subwf	printf@prec& (0+255),w,b
  2928  000520  A0D8               	btfss	status,0,c
  2929  000522  D004               	goto	l629
  2930  000524                     u6300:
  2931                           
  2932                           ; BSR set to: 0
  2933                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2934  000524  0E08               	movlw	8
  2935  000526  0100               	movlb	0	; () banked
  2936  000528  6FED               	movwf	printf@c& (0+255),b
  2937  00052A  D003               	goto	l6742
  2938  00052C                     l629:
  2939                           
  2940                           ; BSR set to: 0
  2941                           ;doprnt.c: 1213: else
  2942                           ;doprnt.c: 1214: c = prec;
  2943  00052C  C0DE  F0ED         	movff	printf@prec,printf@c
  2944  000530  D000               	goto	l6742
  2945  000532                     l6742:
  2946                           
  2947                           ; BSR set to: 0
  2948                           ;doprnt.c: 1215: prec -= c;
  2949  000532  0100               	movlb	0	; () banked
  2950  000534  51ED               	movf	printf@c& (0+255),w,b
  2951  000536  0100               	movlb	0	; () banked
  2952  000538  5FDE               	subwf	printf@prec& (0+255),f,b
  2953  00053A  0E00               	movlw	0
  2954  00053C  0100               	movlb	0	; () banked
  2955  00053E  BFED               	btfsc	printf@c& (0+255),7,b
  2956  000540  0EFF               	movlw	255
  2957  000542  0100               	movlb	0	; () banked
  2958  000544  5BDF               	subwfb	(printf@prec+1)& (0+255),f,b
  2959                           
  2960                           ; BSR set to: 0
  2961                           ;doprnt.c: 1219: if(c)
  2962  000546  0100               	movlb	0	; () banked
  2963  000548  51ED               	movf	printf@c& (0+255),w,b
  2964  00054A  0100               	movlb	0	; () banked
  2965  00054C  B4D8               	btfsc	status,2,c
  2966  00054E  D004               	goto	l6748
  2967                           
  2968                           ; BSR set to: 0
  2969                           ;doprnt.c: 1221: (putch('.') );
  2970  000550  0E2E               	movlw	46
  2971  000552  EC0B  F01E         	call	_putch
  2972  000556  D000               	goto	l6748
  2973  000558                     l6748:
  2974                           
  2975                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2976  000558  0100               	movlb	0	; () banked
  2977  00055A  51ED               	movf	printf@c& (0+255),w,b
  2978  00055C  ECAE  F007         	call	_scale
  2979  000560  C032  F0D7         	movff	?_scale,_printf$2495
  2980  000564  C033  F0D8         	movff	?_scale+1,_printf$2495+1
  2981  000568  C034  F0D9         	movff	?_scale+2,_printf$2495+2
  2982                           
  2983                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2984  00056C  C0EA  F026         	movff	printf@fval,___ftmul@f2
  2985  000570  C0EB  F027         	movff	printf@fval+1,___ftmul@f2+1
  2986  000574  C0EC  F028         	movff	printf@fval+2,___ftmul@f2+2
  2987  000578  C0D7  F023         	movff	_printf$2495,___ftmul@f1
  2988  00057C  C0D8  F024         	movff	_printf$2495+1,___ftmul@f1+1
  2989  000580  C0D9  F025         	movff	_printf$2495+2,___ftmul@f1+2
  2990  000584  ECE6  F012         	call	___ftmul	;wreg free
  2991  000588  C023  F039         	movff	?___ftmul,___fttol@f1
  2992  00058C  C024  F03A         	movff	?___ftmul+1,___fttol@f1+1
  2993  000590  C025  F03B         	movff	?___ftmul+2,___fttol@f1+2
  2994  000594  EC52  F014         	call	___fttol	;wreg free
  2995  000598  C039  F0E0         	movff	?___fttol,printf@val
  2996  00059C  C03A  F0E1         	movff	?___fttol+1,printf@val+1
  2997  0005A0  C03B  F0E2         	movff	?___fttol+2,printf@val+2
  2998  0005A4  C03C  F0E3         	movff	?___fttol+3,printf@val+3
  2999                           
  3000                           ;doprnt.c: 1228: while(c--) {
  3001  0005A8  D06E               	goto	l6758
  3002  0005AA                     l6752:
  3003                           
  3004                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3005  0005AA  C0E0  F00F         	movff	printf@val,___lldiv@dividend
  3006  0005AE  C0E1  F010         	movff	printf@val+1,___lldiv@dividend+1
  3007  0005B2  C0E2  F011         	movff	printf@val+2,___lldiv@dividend+2
  3008  0005B6  C0E3  F012         	movff	printf@val+3,___lldiv@dividend+3
  3009  0005BA  0100               	movlb	0	; () banked
  3010  0005BC  51ED               	movf	printf@c& (0+255),w,b
  3011  0005BE  0D04               	mullw	4
  3012  0005C0  0E0E               	movlw	low _dpowers
  3013  0005C2  24F3               	addwf	prodl,w,c
  3014  0005C4  6EF6               	movwf	tblptrl,c
  3015  0005C6  0EFF               	movlw	high _dpowers
  3016  0005C8  20F4               	addwfc	prodh,w,c
  3017  0005CA  6EF7               	movwf	tblptrh,c
  3018  0005CC                     	if	0	;There are less than 3 active tblptr bytes
  3019  0005CC                     	endif
  3020  0005CC  0009               	tblrd		*+
  3021  0005CE  CFF5 F013          	movff	tablat,___lldiv@divisor
  3022  0005D2  0009               	tblrd		*+
  3023  0005D4  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  3024  0005D8  0009               	tblrd		*+
  3025  0005DA  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  3026  0005DE  000A               	tblrd		*-
  3027  0005E0  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  3028  0005E4  EC31  F018         	call	___lldiv	;wreg free
  3029  0005E8  C00F  F0E6         	movff	?___lldiv,printf@tmpval
  3030  0005EC  C010  F0E7         	movff	?___lldiv+1,printf@tmpval+1
  3031  0005F0  C011  F0E8         	movff	?___lldiv+2,printf@tmpval+2
  3032  0005F4  C012  F0E9         	movff	?___lldiv+3,printf@tmpval+3
  3033                           
  3034                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3035  0005F8  C0E6  F01C         	movff	printf@tmpval,___llmod@dividend
  3036  0005FC  C0E7  F01D         	movff	printf@tmpval+1,___llmod@dividend+1
  3037  000600  C0E8  F01E         	movff	printf@tmpval+2,___llmod@dividend+2
  3038  000604  C0E9  F01F         	movff	printf@tmpval+3,___llmod@dividend+3
  3039  000608  0E0A               	movlw	10
  3040  00060A  6E20               	movwf	___llmod@divisor,c
  3041  00060C  0E00               	movlw	0
  3042  00060E  6E21               	movwf	___llmod@divisor+1,c
  3043  000610  0E00               	movlw	0
  3044  000612  6E22               	movwf	___llmod@divisor+2,c
  3045  000614  0E00               	movlw	0
  3046  000616  6E23               	movwf	___llmod@divisor+3,c
  3047  000618  ECC4  F019         	call	___llmod	;wreg free
  3048  00061C  C01C  F0E6         	movff	?___llmod,printf@tmpval
  3049  000620  C01D  F0E7         	movff	?___llmod+1,printf@tmpval+1
  3050  000624  C01E  F0E8         	movff	?___llmod+2,printf@tmpval+2
  3051  000628  C01F  F0E9         	movff	?___llmod+3,printf@tmpval+3
  3052                           
  3053                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  3054  00062C  0100               	movlb	0	; () banked
  3055  00062E  51E6               	movf	printf@tmpval& (0+255),w,b
  3056  000630  0F30               	addlw	48
  3057  000632  EC0B  F01E         	call	_putch
  3058                           
  3059                           ;doprnt.c: 1232: val %= dpowers[c];
  3060  000636  C0E0  F01C         	movff	printf@val,___llmod@dividend
  3061  00063A  C0E1  F01D         	movff	printf@val+1,___llmod@dividend+1
  3062  00063E  C0E2  F01E         	movff	printf@val+2,___llmod@dividend+2
  3063  000642  C0E3  F01F         	movff	printf@val+3,___llmod@dividend+3
  3064  000646  0100               	movlb	0	; () banked
  3065  000648  51ED               	movf	printf@c& (0+255),w,b
  3066  00064A  0D04               	mullw	4
  3067  00064C  0E0E               	movlw	low _dpowers
  3068  00064E  24F3               	addwf	prodl,w,c
  3069  000650  6EF6               	movwf	tblptrl,c
  3070  000652  0EFF               	movlw	high _dpowers
  3071  000654  20F4               	addwfc	prodh,w,c
  3072  000656  6EF7               	movwf	tblptrh,c
  3073  000658                     	if	0	;There are less than 3 active tblptr bytes
  3074  000658                     	endif
  3075  000658  0009               	tblrd		*+
  3076  00065A  CFF5 F020          	movff	tablat,___llmod@divisor
  3077  00065E  0009               	tblrd		*+
  3078  000660  CFF5 F021          	movff	tablat,___llmod@divisor+1
  3079  000664  0009               	tblrd		*+
  3080  000666  CFF5 F022          	movff	tablat,___llmod@divisor+2
  3081  00066A  000A               	tblrd		*-
  3082  00066C  CFF5 F023          	movff	tablat,___llmod@divisor+3
  3083  000670  ECC4  F019         	call	___llmod	;wreg free
  3084  000674  C01C  F0E0         	movff	?___llmod,printf@val
  3085  000678  C01D  F0E1         	movff	?___llmod+1,printf@val+1
  3086  00067C  C01E  F0E2         	movff	?___llmod+2,printf@val+2
  3087  000680  C01F  F0E3         	movff	?___llmod+3,printf@val+3
  3088  000684  D000               	goto	l6758
  3089  000686                     l6758:
  3090  000686  0100               	movlb	0	; () banked
  3091  000688  07ED               	decf	printf@c& (0+255),f,b
  3092  00068A  0100               	movlb	0	; () banked
  3093  00068C  29ED               	incf	printf@c& (0+255),w,b
  3094  00068E  B4D8               	btfsc	status,2,c
  3095  000690  D00A               	goto	l6764
  3096  000692  D78B               	goto	l6752
  3097                           
  3098                           ; BSR set to: 0
  3099                           ;doprnt.c: 1233: }
  3100                           ;doprnt.c: 1235: while(prec) {
  3101  000694  D008               	goto	l6764
  3102  000696                     l6760:
  3103                           
  3104                           ; BSR set to: 0
  3105                           ;doprnt.c: 1236: (putch('0') );
  3106  000696  0E30               	movlw	48
  3107  000698  EC0B  F01E         	call	_putch
  3108                           
  3109                           ;doprnt.c: 1237: prec--;
  3110  00069C  0100               	movlb	0	; () banked
  3111  00069E  07DE               	decf	printf@prec& (0+255),f,b
  3112  0006A0  A0D8               	btfss	status,0,c
  3113  0006A2  07DF               	decf	(printf@prec+1)& (0+255),f,b
  3114  0006A4  D000               	goto	l6764
  3115  0006A6                     l6764:
  3116                           
  3117                           ; BSR set to: 0
  3118  0006A6  0100               	movlb	0	; () banked
  3119  0006A8  51DE               	movf	printf@prec& (0+255),w,b
  3120  0006AA  0100               	movlb	0	; () banked
  3121  0006AC  11DF               	iorwf	(printf@prec+1)& (0+255),w,b
  3122  0006AE  B4D8               	btfsc	status,2,c
  3123  0006B0  D0B5               	goto	l6802
  3124  0006B2  D7F1               	goto	l6760
  3125                           
  3126                           ; BSR set to: 0
  3127                           ;doprnt.c: 1238: }
  3128                           ;doprnt.c: 1245: continue;
  3129  0006B4  D0B3               	goto	l6802
  3130  0006B6                     l6766:
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;doprnt.c: 1246: }
  3134                           ;doprnt.c: 1253: {
  3135                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3136  0006B6  C0DA  FFD9         	movff	printf@ap,fsr2l
  3137  0006BA  C0DB  FFDA         	movff	printf@ap+1,fsr2h
  3138  0006BE  CFDE F0E0          	movff	postinc2,printf@val
  3139  0006C2  CFDD F0E1          	movff	postdec2,printf@val+1
  3140  0006C6  0100               	movlb	0	; () banked
  3141  0006C8  0E00               	movlw	0
  3142  0006CA  BFE1               	btfsc	(printf@val+1)& (0+255),7,b
  3143  0006CC  0EFF               	movlw	-1
  3144  0006CE  6FE2               	movwf	(printf@val+2)& (0+255),b
  3145  0006D0  6FE3               	movwf	(printf@val+3)& (0+255),b
  3146                           
  3147                           ; BSR set to: 0
  3148  0006D2  0E02               	movlw	2
  3149  0006D4  0100               	movlb	0	; () banked
  3150  0006D6  27DA               	addwf	printf@ap& (0+255),f,b
  3151  0006D8  0E00               	movlw	0
  3152  0006DA  23DB               	addwfc	(printf@ap+1)& (0+255),f,b
  3153                           
  3154                           ; BSR set to: 0
  3155                           ;doprnt.c: 1261: if((long)val < 0) {
  3156  0006DC  0100               	movlb	0	; () banked
  3157  0006DE  AFE3               	btfss	(printf@val+3)& (0+255),7,b
  3158  0006E0  D00D               	goto	l6776
  3159                           
  3160                           ; BSR set to: 0
  3161                           ;doprnt.c: 1262: flag |= 0x03;
  3162  0006E2  0E03               	movlw	3
  3163  0006E4  0100               	movlb	0	; () banked
  3164  0006E6  13DC               	iorwf	printf@flag& (0+255),f,b
  3165                           
  3166                           ; BSR set to: 0
  3167                           ;doprnt.c: 1263: val = -val;
  3168  0006E8  0100               	movlb	0	; () banked
  3169  0006EA  1FE3               	comf	(printf@val+3)& (0+255),f,b
  3170  0006EC  1FE2               	comf	(printf@val+2)& (0+255),f,b
  3171  0006EE  1FE1               	comf	(printf@val+1)& (0+255),f,b
  3172  0006F0  6DE0               	negf	printf@val& (0+255),b
  3173  0006F2  0E00               	movlw	0
  3174  0006F4  23E1               	addwfc	(printf@val+1)& (0+255),f,b
  3175  0006F6  23E2               	addwfc	(printf@val+2)& (0+255),f,b
  3176  0006F8  23E3               	addwfc	(printf@val+3)& (0+255),f,b
  3177  0006FA  D000               	goto	l6776
  3178  0006FC                     l6776:
  3179                           
  3180                           ; BSR set to: 0
  3181                           ;doprnt.c: 1264: }
  3182                           ;doprnt.c: 1266: }
  3183                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3184  0006FC  0E01               	movlw	1
  3185  0006FE  0100               	movlb	0	; () banked
  3186  000700  6FED               	movwf	printf@c& (0+255),b
  3187  000702                     l6778:
  3188                           
  3189                           ; BSR set to: 0
  3190  000702  0E0A               	movlw	10
  3191  000704  0100               	movlb	0	; () banked
  3192  000706  19ED               	xorwf	printf@c& (0+255),w,b
  3193  000708  B4D8               	btfsc	status,2,c
  3194  00070A  D022               	goto	l6790
  3195  00070C  D001               	goto	l6782
  3196                           
  3197                           ; BSR set to: 0
  3198  00070E  D020               	goto	l6790
  3199  000710                     l6782:
  3200                           
  3201                           ; BSR set to: 0
  3202                           ;doprnt.c: 1306: if(val < dpowers[c])
  3203  000710  0100               	movlb	0	; () banked
  3204  000712  51ED               	movf	printf@c& (0+255),w,b
  3205  000714  0D04               	mullw	4
  3206  000716  0E0E               	movlw	low _dpowers
  3207  000718  24F3               	addwf	prodl,w,c
  3208  00071A  6EF6               	movwf	tblptrl,c
  3209  00071C  0EFF               	movlw	high _dpowers
  3210  00071E  20F4               	addwfc	prodh,w,c
  3211  000720  6EF7               	movwf	tblptrh,c
  3212  000722                     	if	0	;There are less than 3 active tblptr bytes
  3213  000722                     	endif
  3214  000722  0009               	tblrd		*+
  3215  000724  50F5               	movf	tablat,w,c
  3216  000726  0100               	movlb	0	; () banked
  3217  000728  5DE0               	subwf	printf@val& (0+255),w,b
  3218  00072A  0009               	tblrd		*+
  3219  00072C  50F5               	movf	tablat,w,c
  3220  00072E  0100               	movlb	0	; () banked
  3221  000730  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  3222  000732  0009               	tblrd		*+
  3223  000734  50F5               	movf	tablat,w,c
  3224  000736  0100               	movlb	0	; () banked
  3225  000738  59E2               	subwfb	(printf@val+2)& (0+255),w,b
  3226  00073A  0009               	tblrd		*+
  3227  00073C  50F5               	movf	tablat,w,c
  3228  00073E  0100               	movlb	0	; () banked
  3229  000740  59E3               	subwfb	(printf@val+3)& (0+255),w,b
  3230  000742  A0D8               	btfss	status,0,c
  3231  000744  D005               	goto	l6790
  3232  000746  D001               	goto	l6786
  3233                           
  3234                           ; BSR set to: 0
  3235                           ;doprnt.c: 1307: break;
  3236  000748  D003               	goto	l6790
  3237  00074A                     l6786:
  3238                           
  3239                           ; BSR set to: 0
  3240  00074A  0100               	movlb	0	; () banked
  3241  00074C  2BED               	incf	printf@c& (0+255),f,b
  3242  00074E  D7D9               	goto	l6778
  3243  000750                     l6790:
  3244                           
  3245                           ; BSR set to: 0
  3246                           ;doprnt.c: 1422: {
  3247                           ;doprnt.c: 1438: if(flag & 0x03)
  3248  000750  0E03               	movlw	3
  3249  000752  0100               	movlb	0	; () banked
  3250  000754  15DC               	andwf	printf@flag& (0+255),w,b
  3251  000756  6E53               	movwf	??_printf& (0+255),c
  3252  000758  0E00               	movlw	0
  3253  00075A  0100               	movlb	0	; () banked
  3254  00075C  15DD               	andwf	(printf@flag+1)& (0+255),w,b
  3255  00075E  6E54               	movwf	(??_printf+1)& (0+255),c
  3256  000760  5053               	movf	??_printf,w,c
  3257  000762  1054               	iorwf	??_printf+1,w,c
  3258  000764  B4D8               	btfsc	status,2,c
  3259  000766  D004               	goto	l6794
  3260                           
  3261                           ; BSR set to: 0
  3262                           ;doprnt.c: 1439: (putch('-') );
  3263  000768  0E2D               	movlw	45
  3264  00076A  EC0B  F01E         	call	_putch
  3265  00076E  D000               	goto	l6794
  3266  000770                     l6794:
  3267                           
  3268                           ;doprnt.c: 1469: }
  3269                           ;doprnt.c: 1472: prec = c;
  3270  000770  0100               	movlb	0	; () banked
  3271  000772  51ED               	movf	printf@c& (0+255),w,b
  3272  000774  0100               	movlb	0	; () banked
  3273  000776  6FDE               	movwf	printf@prec& (0+255),b
  3274  000778  6BDF               	clrf	(printf@prec+1)& (0+255),b
  3275  00077A  BFDE               	btfsc	printf@prec& (0+255),7,b
  3276  00077C  07DF               	decf	(printf@prec+1)& (0+255),f,b
  3277                           
  3278                           ;doprnt.c: 1474: while(prec--) {
  3279  00077E  D041               	goto	l6800
  3280  000780                     l6796:
  3281                           
  3282                           ; BSR set to: 0
  3283                           ;doprnt.c: 1478: {
  3284                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3285  000780  C0DE  F053         	movff	printf@prec,??_printf
  3286  000784  C0DF  F054         	movff	printf@prec+1,??_printf+1
  3287  000788  90D8               	bcf	status,0,c
  3288  00078A  3653               	rlcf	??_printf,f,c
  3289  00078C  3654               	rlcf	??_printf+1,f,c
  3290  00078E  90D8               	bcf	status,0,c
  3291  000790  3653               	rlcf	??_printf,f,c
  3292  000792  3654               	rlcf	??_printf+1,f,c
  3293  000794  0E0E               	movlw	low _dpowers
  3294  000796  2453               	addwf	??_printf,w,c
  3295  000798  6EF6               	movwf	tblptrl,c
  3296  00079A  0EFF               	movlw	high _dpowers
  3297  00079C  2054               	addwfc	??_printf+1,w,c
  3298  00079E  6EF7               	movwf	tblptrh,c
  3299  0007A0                     	if	0	;There are less than 3 active tblptr bytes
  3300  0007A0                     	endif
  3301  0007A0  0009               	tblrd		*+
  3302  0007A2  CFF5 F013          	movff	tablat,___lldiv@divisor
  3303  0007A6  0009               	tblrd		*+
  3304  0007A8  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  3305  0007AC  0009               	tblrd		*+
  3306  0007AE  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  3307  0007B2  000A               	tblrd		*-
  3308  0007B4  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  3309  0007B8  C0E0  F00F         	movff	printf@val,___lldiv@dividend
  3310  0007BC  C0E1  F010         	movff	printf@val+1,___lldiv@dividend+1
  3311  0007C0  C0E2  F011         	movff	printf@val+2,___lldiv@dividend+2
  3312  0007C4  C0E3  F012         	movff	printf@val+3,___lldiv@dividend+3
  3313  0007C8  EC31  F018         	call	___lldiv	;wreg free
  3314  0007CC  C00F  F01C         	movff	?___lldiv,___llmod@dividend
  3315  0007D0  C010  F01D         	movff	?___lldiv+1,___llmod@dividend+1
  3316  0007D4  C011  F01E         	movff	?___lldiv+2,___llmod@dividend+2
  3317  0007D8  C012  F01F         	movff	?___lldiv+3,___llmod@dividend+3
  3318  0007DC  0E0A               	movlw	10
  3319  0007DE  6E20               	movwf	___llmod@divisor,c
  3320  0007E0  0E00               	movlw	0
  3321  0007E2  6E21               	movwf	___llmod@divisor+1,c
  3322  0007E4  0E00               	movlw	0
  3323  0007E6  6E22               	movwf	___llmod@divisor+2,c
  3324  0007E8  0E00               	movlw	0
  3325  0007EA  6E23               	movwf	___llmod@divisor+3,c
  3326  0007EC  ECC4  F019         	call	___llmod	;wreg free
  3327  0007F0  501C               	movf	?___llmod,w,c
  3328  0007F2  0F30               	addlw	48
  3329  0007F4  0100               	movlb	0	; () banked
  3330  0007F6  6FED               	movwf	printf@c& (0+255),b
  3331                           
  3332                           ; BSR set to: 0
  3333                           ;doprnt.c: 1523: }
  3334                           ;doprnt.c: 1524: (putch(c) );
  3335  0007F8  0100               	movlb	0	; () banked
  3336  0007FA  51ED               	movf	printf@c& (0+255),w,b
  3337  0007FC  EC0B  F01E         	call	_putch
  3338  000800  D000               	goto	l6800
  3339  000802                     l6800:
  3340  000802  0100               	movlb	0	; () banked
  3341  000804  07DE               	decf	printf@prec& (0+255),f,b
  3342  000806  A0D8               	btfss	status,0,c
  3343  000808  07DF               	decf	(printf@prec+1)& (0+255),f,b
  3344  00080A  0100               	movlb	0	; () banked
  3345  00080C  29DE               	incf	printf@prec& (0+255),w,b
  3346  00080E  E1B8               	bnz	l6796
  3347  000810  0100               	movlb	0	; () banked
  3348  000812  29DF               	incf	(printf@prec+1)& (0+255),w,b
  3349  000814  B4D8               	btfsc	status,2,c
  3350  000816  D002               	goto	l6802
  3351  000818  D7B3               	goto	l6796
  3352                           
  3353                           ; BSR set to: 0
  3354  00081A  D000               	goto	l6802
  3355  00081C                     l6802:
  3356  00081C  C04E  FFF6         	movff	printf@f,tblptrl
  3357  000820  C04F  FFF7         	movff	printf@f+1,tblptrh
  3358  000824  4A4E               	infsnz	printf@f,f,c
  3359  000826  2A4F               	incf	printf@f+1,f,c
  3360  000828                     	if	0	;tblptru may be non-zero
  3361  000828                     	endif
  3362  000828                     	if	0	;tblptru may be non-zero
  3363  000828                     	endif
  3364  000828  0008               	tblrd		*
  3365  00082A  CFF5 F0ED          	movff	tablat,printf@c
  3366  00082E  0100               	movlb	0	; () banked
  3367  000830  51ED               	movf	printf@c& (0+255),w,b
  3368  000832  B4D8               	btfsc	status,2,c
  3369  000834  D003               	goto	l647
  3370  000836  EF15  F000         	goto	l6622
  3371                           
  3372                           ; BSR set to: 0
  3373  00083A  D000               	goto	l647
  3374  00083C                     l647:
  3375                           
  3376                           ; BSR set to: 0
  3377  00083C  0012               	return		;funcret
  3378  00083E                     __end_of_printf:
  3379                           	opt stack 0
  3380                           tblptru	equ	0xFF8
  3381                           tblptrh	equ	0xFF7
  3382                           tblptrl	equ	0xFF6
  3383                           tablat	equ	0xFF5
  3384                           prodh	equ	0xFF4
  3385                           prodl	equ	0xFF3
  3386                           intcon2	equ	0xFF1
  3387                           postinc0	equ	0xFEE
  3388                           wreg	equ	0xFE8
  3389                           postdec1	equ	0xFE5
  3390                           fsr1l	equ	0xFE1
  3391                           postinc2	equ	0xFDE
  3392                           postdec2	equ	0xFDD
  3393                           fsr2h	equ	0xFDA
  3394                           fsr2l	equ	0xFD9
  3395                           status	equ	0xFD8
  3396                           
  3397 ;; *************** function _scale *****************
  3398 ;; Defined at:
  3399 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  3400 ;; Parameters:    Size  Location     Type
  3401 ;;  scl             1    wreg     char 
  3402 ;; Auto vars:     Size  Location     Type
  3403 ;;  scl             1   55[COMRAM] char 
  3404 ;; Return value:  Size  Location     Type
  3405 ;;                  3   49[COMRAM] char 
  3406 ;; Registers used:
  3407 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3408 ;; Tracked objects:
  3409 ;;		On entry : 0/0
  3410 ;;		On exit  : 0/0
  3411 ;;		Unchanged: 0/0
  3412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3413 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3414 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3416 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3417 ;;Total ram usage:        7 bytes
  3418 ;; Hardware stack levels used:    1
  3419 ;; Hardware stack levels required when called:    4
  3420 ;; This function calls:
  3421 ;;		___awdiv
  3422 ;;		___awmod
  3423 ;;		___ftmul
  3424 ;;		___wmul
  3425 ;; This function is called by:
  3426 ;;		_printf
  3427 ;; This function uses a non-reentrant model
  3428 ;;
  3429                           
  3430                           	psect	text2
  3431  000F5C                     __ptext2:
  3432                           	opt stack 0
  3433  000F5C                     _scale:
  3434                           	opt stack 25
  3435                           
  3436                           ; BSR set to: 0
  3437                           ;incstack = 0
  3438                           ;scale@scl stored from wreg
  3439  000F5C  6E38               	movwf	scale@scl,c
  3440                           
  3441                           ;doprnt.c: 428: if(scl < 0) {
  3442  000F5E  AE38               	btfss	scale@scl,7,c
  3443  000F60  D0EF               	goto	l6266
  3444                           
  3445                           ;doprnt.c: 429: scl = -scl;
  3446  000F62  6C38               	negf	scale@scl,c
  3447                           
  3448                           ;doprnt.c: 430: if(scl>=110)
  3449  000F64  5038               	movf	scale@scl,w,c
  3450  000F66  0A80               	xorlw	128
  3451  000F68  0F12               	addlw	-238
  3452  000F6A  A0D8               	btfss	status,0,c
  3453  000F6C  D08D               	goto	l6256
  3454                           
  3455                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3456  000F6E  0E00               	movlw	0
  3457  000F70  6E20               	movwf	___wmul@multiplicand+1,c
  3458  000F72  0E03               	movlw	3
  3459  000F74  6E1F               	movwf	___wmul@multiplicand,c
  3460  000F76  0E00               	movlw	0
  3461  000F78  6E18               	movwf	___awdiv@divisor+1,c
  3462  000F7A  0E0A               	movlw	10
  3463  000F7C  6E17               	movwf	___awdiv@divisor,c
  3464  000F7E  0E00               	movlw	0
  3465  000F80  6E12               	movwf	___awmod@divisor+1,c
  3466  000F82  0E64               	movlw	100
  3467  000F84  6E11               	movwf	___awmod@divisor,c
  3468  000F86  5038               	movf	scale@scl,w,c
  3469  000F88  6E0F               	movwf	___awmod@dividend,c
  3470  000F8A  6A10               	clrf	___awmod@dividend+1,c
  3471  000F8C  BE0F               	btfsc	___awmod@dividend,7,c
  3472  000F8E  0610               	decf	___awmod@dividend+1,f,c
  3473  000F90  EC83  F019         	call	___awmod	;wreg free
  3474  000F94  C00F  F015         	movff	?___awmod,___awdiv@dividend
  3475  000F98  C010  F016         	movff	?___awmod+1,___awdiv@dividend+1
  3476  000F9C  ECE6  F017         	call	___awdiv	;wreg free
  3477  000FA0  0E09               	movlw	9
  3478  000FA2  2415               	addwf	?___awdiv,w,c
  3479  000FA4  6E1D               	movwf	___wmul@multiplier,c
  3480  000FA6  0E00               	movlw	0
  3481  000FA8  2016               	addwfc	?___awdiv+1,w,c
  3482  000FAA  6E1E               	movwf	___wmul@multiplier+1,c
  3483  000FAC  EC40  F01D         	call	___wmul	;wreg free
  3484  000FB0  0E36               	movlw	low __npowers_
  3485  000FB2  241D               	addwf	?___wmul,w,c
  3486  000FB4  6EF6               	movwf	tblptrl,c
  3487  000FB6  0EFF               	movlw	high __npowers_
  3488  000FB8  201E               	addwfc	?___wmul+1,w,c
  3489  000FBA  6EF7               	movwf	tblptrh,c
  3490  000FBC                     	if	0	;There are less than 3 active tblptr bytes
  3491  000FBC                     	endif
  3492  000FBC  0009               	tblrd		*+
  3493  000FBE  CFF5 F026          	movff	tablat,___ftmul@f2
  3494  000FC2  0009               	tblrd		*+
  3495  000FC4  CFF5 F027          	movff	tablat,___ftmul@f2+1
  3496  000FC8  000A               	tblrd		*-
  3497  000FCA  CFF5 F028          	movff	tablat,___ftmul@f2+2
  3498  000FCE  0E00               	movlw	0
  3499  000FD0  6E18               	movwf	___awdiv@divisor+1,c
  3500  000FD2  0E64               	movlw	100
  3501  000FD4  6E17               	movwf	___awdiv@divisor,c
  3502  000FD6  5038               	movf	scale@scl,w,c
  3503  000FD8  6E15               	movwf	___awdiv@dividend,c
  3504  000FDA  6A16               	clrf	___awdiv@dividend+1,c
  3505  000FDC  BE15               	btfsc	___awdiv@dividend,7,c
  3506  000FDE  0616               	decf	___awdiv@dividend+1,f,c
  3507  000FE0  ECE6  F017         	call	___awdiv	;wreg free
  3508  000FE4  0E12               	movlw	18
  3509  000FE6  2415               	addwf	?___awdiv,w,c
  3510  000FE8  6E1D               	movwf	___wmul@multiplier,c
  3511  000FEA  0E00               	movlw	0
  3512  000FEC  2016               	addwfc	?___awdiv+1,w,c
  3513  000FEE  6E1E               	movwf	___wmul@multiplier+1,c
  3514  000FF0  0E00               	movlw	0
  3515  000FF2  6E20               	movwf	___wmul@multiplicand+1,c
  3516  000FF4  0E03               	movlw	3
  3517  000FF6  6E1F               	movwf	___wmul@multiplicand,c
  3518  000FF8  EC40  F01D         	call	___wmul	;wreg free
  3519  000FFC  0E36               	movlw	low __npowers_
  3520  000FFE  241D               	addwf	?___wmul,w,c
  3521  001000  6EF6               	movwf	tblptrl,c
  3522  001002  0EFF               	movlw	high __npowers_
  3523  001004  201E               	addwfc	?___wmul+1,w,c
  3524  001006  6EF7               	movwf	tblptrh,c
  3525  001008                     	if	0	;There are less than 3 active tblptr bytes
  3526  001008                     	endif
  3527  001008  0009               	tblrd		*+
  3528  00100A  CFF5 F023          	movff	tablat,___ftmul@f1
  3529  00100E  0009               	tblrd		*+
  3530  001010  CFF5 F024          	movff	tablat,___ftmul@f1+1
  3531  001014  000A               	tblrd		*-
  3532  001016  CFF5 F025          	movff	tablat,___ftmul@f1+2
  3533  00101A  ECE6  F012         	call	___ftmul	;wreg free
  3534  00101E  C023  F035         	movff	?___ftmul,_scale$2494
  3535  001022  C024  F036         	movff	?___ftmul+1,_scale$2494+1
  3536  001026  C025  F037         	movff	?___ftmul+2,_scale$2494+2
  3537                           
  3538                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3539  00102A  C035  F023         	movff	_scale$2494,___ftmul@f1
  3540  00102E  C036  F024         	movff	_scale$2494+1,___ftmul@f1+1
  3541  001032  C037  F025         	movff	_scale$2494+2,___ftmul@f1+2
  3542  001036  0E00               	movlw	0
  3543  001038  6E20               	movwf	___wmul@multiplicand+1,c
  3544  00103A  0E03               	movlw	3
  3545  00103C  6E1F               	movwf	___wmul@multiplicand,c
  3546  00103E  0E00               	movlw	0
  3547  001040  6E12               	movwf	___awmod@divisor+1,c
  3548  001042  0E0A               	movlw	10
  3549  001044  6E11               	movwf	___awmod@divisor,c
  3550  001046  5038               	movf	scale@scl,w,c
  3551  001048  6E0F               	movwf	___awmod@dividend,c
  3552  00104A  6A10               	clrf	___awmod@dividend+1,c
  3553  00104C  BE0F               	btfsc	___awmod@dividend,7,c
  3554  00104E  0610               	decf	___awmod@dividend+1,f,c
  3555  001050  EC83  F019         	call	___awmod	;wreg free
  3556  001054  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  3557  001058  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  3558  00105C  EC40  F01D         	call	___wmul	;wreg free
  3559  001060  0E36               	movlw	low __npowers_
  3560  001062  241D               	addwf	?___wmul,w,c
  3561  001064  6EF6               	movwf	tblptrl,c
  3562  001066  0EFF               	movlw	high __npowers_
  3563  001068  201E               	addwfc	?___wmul+1,w,c
  3564  00106A  6EF7               	movwf	tblptrh,c
  3565  00106C                     	if	0	;There are less than 3 active tblptr bytes
  3566  00106C                     	endif
  3567  00106C  0009               	tblrd		*+
  3568  00106E  CFF5 F026          	movff	tablat,___ftmul@f2
  3569  001072  0009               	tblrd		*+
  3570  001074  CFF5 F027          	movff	tablat,___ftmul@f2+1
  3571  001078  000A               	tblrd		*-
  3572  00107A  CFF5 F028          	movff	tablat,___ftmul@f2+2
  3573  00107E  ECE6  F012         	call	___ftmul	;wreg free
  3574  001082  D141               	goto	L5
  3575  001084  D15A               	goto	l582
  3576  001086  D054               	goto	l6262
  3577  001088                     l6256:
  3578                           
  3579                           ;doprnt.c: 432: else if(scl > 10)
  3580  001088  5038               	movf	scale@scl,w,c
  3581  00108A  0A80               	xorlw	128
  3582  00108C  0F75               	addlw	-139
  3583  00108E  A0D8               	btfss	status,0,c
  3584  001090  D04F               	goto	l6262
  3585                           
  3586                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3587  001092  0E00               	movlw	0
  3588  001094  6E18               	movwf	___awdiv@divisor+1,c
  3589  001096  0E0A               	movlw	10
  3590  001098  6E17               	movwf	___awdiv@divisor,c
  3591  00109A  5038               	movf	scale@scl,w,c
  3592  00109C  6E15               	movwf	___awdiv@dividend,c
  3593  00109E  6A16               	clrf	___awdiv@dividend+1,c
  3594  0010A0  BE15               	btfsc	___awdiv@dividend,7,c
  3595  0010A2  0616               	decf	___awdiv@dividend+1,f,c
  3596  0010A4  ECE6  F017         	call	___awdiv	;wreg free
  3597  0010A8  0E09               	movlw	9
  3598  0010AA  2415               	addwf	?___awdiv,w,c
  3599  0010AC  6E1D               	movwf	___wmul@multiplier,c
  3600  0010AE  0E00               	movlw	0
  3601  0010B0  2016               	addwfc	?___awdiv+1,w,c
  3602  0010B2  6E1E               	movwf	___wmul@multiplier+1,c
  3603  0010B4  0E00               	movlw	0
  3604  0010B6  6E20               	movwf	___wmul@multiplicand+1,c
  3605  0010B8  0E03               	movlw	3
  3606  0010BA  6E1F               	movwf	___wmul@multiplicand,c
  3607  0010BC  EC40  F01D         	call	___wmul	;wreg free
  3608  0010C0  0E36               	movlw	low __npowers_
  3609  0010C2  241D               	addwf	?___wmul,w,c
  3610  0010C4  6EF6               	movwf	tblptrl,c
  3611  0010C6  0EFF               	movlw	high __npowers_
  3612  0010C8  201E               	addwfc	?___wmul+1,w,c
  3613  0010CA  6EF7               	movwf	tblptrh,c
  3614  0010CC                     	if	0	;There are less than 3 active tblptr bytes
  3615  0010CC                     	endif
  3616  0010CC  0009               	tblrd		*+
  3617  0010CE  CFF5 F023          	movff	tablat,___ftmul@f1
  3618  0010D2  0009               	tblrd		*+
  3619  0010D4  CFF5 F024          	movff	tablat,___ftmul@f1+1
  3620  0010D8  000A               	tblrd		*-
  3621  0010DA  CFF5 F025          	movff	tablat,___ftmul@f1+2
  3622  0010DE  0E00               	movlw	0
  3623  0010E0  6E20               	movwf	___wmul@multiplicand+1,c
  3624  0010E2  0E03               	movlw	3
  3625  0010E4  6E1F               	movwf	___wmul@multiplicand,c
  3626  0010E6  0E00               	movlw	0
  3627  0010E8  6E12               	movwf	___awmod@divisor+1,c
  3628  0010EA  0E0A               	movlw	10
  3629  0010EC  6E11               	movwf	___awmod@divisor,c
  3630  0010EE  5038               	movf	scale@scl,w,c
  3631  0010F0  6E0F               	movwf	___awmod@dividend,c
  3632  0010F2  6A10               	clrf	___awmod@dividend+1,c
  3633  0010F4  BE0F               	btfsc	___awmod@dividend,7,c
  3634  0010F6  0610               	decf	___awmod@dividend+1,f,c
  3635  0010F8  EC83  F019         	call	___awmod	;wreg free
  3636  0010FC  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  3637  001100  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  3638  001104  EC40  F01D         	call	___wmul	;wreg free
  3639  001108  0E36               	movlw	low __npowers_
  3640  00110A  241D               	addwf	?___wmul,w,c
  3641  00110C  6EF6               	movwf	tblptrl,c
  3642  00110E  0EFF               	movlw	high __npowers_
  3643  001110  201E               	addwfc	?___wmul+1,w,c
  3644  001112  6EF7               	movwf	tblptrh,c
  3645  001114                     	if	0	;There are less than 3 active tblptr bytes
  3646  001114                     	endif
  3647  001114  0009               	tblrd		*+
  3648  001116  CFF5 F026          	movff	tablat,___ftmul@f2
  3649  00111A  0009               	tblrd		*+
  3650  00111C  CFF5 F027          	movff	tablat,___ftmul@f2+1
  3651  001120  000A               	tblrd		*-
  3652  001122  CFF5 F028          	movff	tablat,___ftmul@f2+2
  3653  001126  ECE6  F012         	call	___ftmul	;wreg free
  3654  00112A  D0ED               	goto	L5
  3655  00112C  D106               	goto	l582
  3656  00112E  D000               	goto	l6262
  3657  001130                     l6262:
  3658                           
  3659                           ;doprnt.c: 434: return _npowers_[scl];
  3660  001130  5038               	movf	scale@scl,w,c
  3661  001132  0D03               	mullw	3
  3662  001134  0E36               	movlw	low __npowers_
  3663  001136  24F3               	addwf	prodl,w,c
  3664  001138  6EF6               	movwf	tblptrl,c
  3665  00113A  0EFF               	movlw	high __npowers_
  3666  00113C  D0F2               	goto	L4
  3667  00113E  D0FD               	goto	l582
  3668  001140                     l6266:
  3669                           
  3670                           ;doprnt.c: 435: }
  3671                           ;doprnt.c: 436: if(scl>=110)
  3672  001140  5038               	movf	scale@scl,w,c
  3673  001142  0A80               	xorlw	128
  3674  001144  0F12               	addlw	-238
  3675  001146  A0D8               	btfss	status,0,c
  3676  001148  D08D               	goto	l6274
  3677                           
  3678                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3679  00114A  0E00               	movlw	0
  3680  00114C  6E20               	movwf	___wmul@multiplicand+1,c
  3681  00114E  0E03               	movlw	3
  3682  001150  6E1F               	movwf	___wmul@multiplicand,c
  3683  001152  0E00               	movlw	0
  3684  001154  6E18               	movwf	___awdiv@divisor+1,c
  3685  001156  0E0A               	movlw	10
  3686  001158  6E17               	movwf	___awdiv@divisor,c
  3687  00115A  0E00               	movlw	0
  3688  00115C  6E12               	movwf	___awmod@divisor+1,c
  3689  00115E  0E64               	movlw	100
  3690  001160  6E11               	movwf	___awmod@divisor,c
  3691  001162  5038               	movf	scale@scl,w,c
  3692  001164  6E0F               	movwf	___awmod@dividend,c
  3693  001166  6A10               	clrf	___awmod@dividend+1,c
  3694  001168  BE0F               	btfsc	___awmod@dividend,7,c
  3695  00116A  0610               	decf	___awmod@dividend+1,f,c
  3696  00116C  EC83  F019         	call	___awmod	;wreg free
  3697  001170  C00F  F015         	movff	?___awmod,___awdiv@dividend
  3698  001174  C010  F016         	movff	?___awmod+1,___awdiv@dividend+1
  3699  001178  ECE6  F017         	call	___awdiv	;wreg free
  3700  00117C  0E09               	movlw	9
  3701  00117E  2415               	addwf	?___awdiv,w,c
  3702  001180  6E1D               	movwf	___wmul@multiplier,c
  3703  001182  0E00               	movlw	0
  3704  001184  2016               	addwfc	?___awdiv+1,w,c
  3705  001186  6E1E               	movwf	___wmul@multiplier+1,c
  3706  001188  EC40  F01D         	call	___wmul	;wreg free
  3707  00118C  0E5D               	movlw	low __powers_
  3708  00118E  241D               	addwf	?___wmul,w,c
  3709  001190  6EF6               	movwf	tblptrl,c
  3710  001192  0EFF               	movlw	high __powers_
  3711  001194  201E               	addwfc	?___wmul+1,w,c
  3712  001196  6EF7               	movwf	tblptrh,c
  3713  001198                     	if	0	;There are less than 3 active tblptr bytes
  3714  001198                     	endif
  3715  001198  0009               	tblrd		*+
  3716  00119A  CFF5 F026          	movff	tablat,___ftmul@f2
  3717  00119E  0009               	tblrd		*+
  3718  0011A0  CFF5 F027          	movff	tablat,___ftmul@f2+1
  3719  0011A4  000A               	tblrd		*-
  3720  0011A6  CFF5 F028          	movff	tablat,___ftmul@f2+2
  3721  0011AA  0E00               	movlw	0
  3722  0011AC  6E18               	movwf	___awdiv@divisor+1,c
  3723  0011AE  0E64               	movlw	100
  3724  0011B0  6E17               	movwf	___awdiv@divisor,c
  3725  0011B2  5038               	movf	scale@scl,w,c
  3726  0011B4  6E15               	movwf	___awdiv@dividend,c
  3727  0011B6  6A16               	clrf	___awdiv@dividend+1,c
  3728  0011B8  BE15               	btfsc	___awdiv@dividend,7,c
  3729  0011BA  0616               	decf	___awdiv@dividend+1,f,c
  3730  0011BC  ECE6  F017         	call	___awdiv	;wreg free
  3731  0011C0  0E12               	movlw	18
  3732  0011C2  2415               	addwf	?___awdiv,w,c
  3733  0011C4  6E1D               	movwf	___wmul@multiplier,c
  3734  0011C6  0E00               	movlw	0
  3735  0011C8  2016               	addwfc	?___awdiv+1,w,c
  3736  0011CA  6E1E               	movwf	___wmul@multiplier+1,c
  3737  0011CC  0E00               	movlw	0
  3738  0011CE  6E20               	movwf	___wmul@multiplicand+1,c
  3739  0011D0  0E03               	movlw	3
  3740  0011D2  6E1F               	movwf	___wmul@multiplicand,c
  3741  0011D4  EC40  F01D         	call	___wmul	;wreg free
  3742  0011D8  0E5D               	movlw	low __powers_
  3743  0011DA  241D               	addwf	?___wmul,w,c
  3744  0011DC  6EF6               	movwf	tblptrl,c
  3745  0011DE  0EFF               	movlw	high __powers_
  3746  0011E0  201E               	addwfc	?___wmul+1,w,c
  3747  0011E2  6EF7               	movwf	tblptrh,c
  3748  0011E4                     	if	0	;There are less than 3 active tblptr bytes
  3749  0011E4                     	endif
  3750  0011E4  0009               	tblrd		*+
  3751  0011E6  CFF5 F023          	movff	tablat,___ftmul@f1
  3752  0011EA  0009               	tblrd		*+
  3753  0011EC  CFF5 F024          	movff	tablat,___ftmul@f1+1
  3754  0011F0  000A               	tblrd		*-
  3755  0011F2  CFF5 F025          	movff	tablat,___ftmul@f1+2
  3756  0011F6  ECE6  F012         	call	___ftmul	;wreg free
  3757  0011FA  C023  F035         	movff	?___ftmul,_scale$2494
  3758  0011FE  C024  F036         	movff	?___ftmul+1,_scale$2494+1
  3759  001202  C025  F037         	movff	?___ftmul+2,_scale$2494+2
  3760                           
  3761                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3762  001206  C035  F023         	movff	_scale$2494,___ftmul@f1
  3763  00120A  C036  F024         	movff	_scale$2494+1,___ftmul@f1+1
  3764  00120E  C037  F025         	movff	_scale$2494+2,___ftmul@f1+2
  3765  001212  0E00               	movlw	0
  3766  001214  6E20               	movwf	___wmul@multiplicand+1,c
  3767  001216  0E03               	movlw	3
  3768  001218  6E1F               	movwf	___wmul@multiplicand,c
  3769  00121A  0E00               	movlw	0
  3770  00121C  6E12               	movwf	___awmod@divisor+1,c
  3771  00121E  0E0A               	movlw	10
  3772  001220  6E11               	movwf	___awmod@divisor,c
  3773  001222  5038               	movf	scale@scl,w,c
  3774  001224  6E0F               	movwf	___awmod@dividend,c
  3775  001226  6A10               	clrf	___awmod@dividend+1,c
  3776  001228  BE0F               	btfsc	___awmod@dividend,7,c
  3777  00122A  0610               	decf	___awmod@dividend+1,f,c
  3778  00122C  EC83  F019         	call	___awmod	;wreg free
  3779  001230  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  3780  001234  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  3781  001238  EC40  F01D         	call	___wmul	;wreg free
  3782  00123C  0E5D               	movlw	low __powers_
  3783  00123E  241D               	addwf	?___wmul,w,c
  3784  001240  6EF6               	movwf	tblptrl,c
  3785  001242  0EFF               	movlw	high __powers_
  3786  001244  201E               	addwfc	?___wmul+1,w,c
  3787  001246  6EF7               	movwf	tblptrh,c
  3788  001248                     	if	0	;There are less than 3 active tblptr bytes
  3789  001248                     	endif
  3790  001248  0009               	tblrd		*+
  3791  00124A  CFF5 F026          	movff	tablat,___ftmul@f2
  3792  00124E  0009               	tblrd		*+
  3793  001250  CFF5 F027          	movff	tablat,___ftmul@f2+1
  3794  001254  000A               	tblrd		*-
  3795  001256  CFF5 F028          	movff	tablat,___ftmul@f2+2
  3796  00125A  ECE6  F012         	call	___ftmul	;wreg free
  3797  00125E  D053               	goto	L5
  3798  001260  D06C               	goto	l582
  3799  001262  D059               	goto	l6280
  3800  001264                     l6274:
  3801                           
  3802                           ;doprnt.c: 438: else if(scl > 10)
  3803  001264  5038               	movf	scale@scl,w,c
  3804  001266  0A80               	xorlw	128
  3805  001268  0F75               	addlw	-139
  3806  00126A  A0D8               	btfss	status,0,c
  3807  00126C  D054               	goto	l6280
  3808                           
  3809                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3810  00126E  0E00               	movlw	0
  3811  001270  6E18               	movwf	___awdiv@divisor+1,c
  3812  001272  0E0A               	movlw	10
  3813  001274  6E17               	movwf	___awdiv@divisor,c
  3814  001276  5038               	movf	scale@scl,w,c
  3815  001278  6E15               	movwf	___awdiv@dividend,c
  3816  00127A  6A16               	clrf	___awdiv@dividend+1,c
  3817  00127C  BE15               	btfsc	___awdiv@dividend,7,c
  3818  00127E  0616               	decf	___awdiv@dividend+1,f,c
  3819  001280  ECE6  F017         	call	___awdiv	;wreg free
  3820  001284  0E09               	movlw	9
  3821  001286  2415               	addwf	?___awdiv,w,c
  3822  001288  6E1D               	movwf	___wmul@multiplier,c
  3823  00128A  0E00               	movlw	0
  3824  00128C  2016               	addwfc	?___awdiv+1,w,c
  3825  00128E  6E1E               	movwf	___wmul@multiplier+1,c
  3826  001290  0E00               	movlw	0
  3827  001292  6E20               	movwf	___wmul@multiplicand+1,c
  3828  001294  0E03               	movlw	3
  3829  001296  6E1F               	movwf	___wmul@multiplicand,c
  3830  001298  EC40  F01D         	call	___wmul	;wreg free
  3831  00129C  0E5D               	movlw	low __powers_
  3832  00129E  241D               	addwf	?___wmul,w,c
  3833  0012A0  6EF6               	movwf	tblptrl,c
  3834  0012A2  0EFF               	movlw	high __powers_
  3835  0012A4  201E               	addwfc	?___wmul+1,w,c
  3836  0012A6  6EF7               	movwf	tblptrh,c
  3837  0012A8                     	if	0	;There are less than 3 active tblptr bytes
  3838  0012A8                     	endif
  3839  0012A8  0009               	tblrd		*+
  3840  0012AA  CFF5 F023          	movff	tablat,___ftmul@f1
  3841  0012AE  0009               	tblrd		*+
  3842  0012B0  CFF5 F024          	movff	tablat,___ftmul@f1+1
  3843  0012B4  000A               	tblrd		*-
  3844  0012B6  CFF5 F025          	movff	tablat,___ftmul@f1+2
  3845  0012BA  0E00               	movlw	0
  3846  0012BC  6E20               	movwf	___wmul@multiplicand+1,c
  3847  0012BE  0E03               	movlw	3
  3848  0012C0  6E1F               	movwf	___wmul@multiplicand,c
  3849  0012C2  0E00               	movlw	0
  3850  0012C4  6E12               	movwf	___awmod@divisor+1,c
  3851  0012C6  0E0A               	movlw	10
  3852  0012C8  6E11               	movwf	___awmod@divisor,c
  3853  0012CA  5038               	movf	scale@scl,w,c
  3854  0012CC  6E0F               	movwf	___awmod@dividend,c
  3855  0012CE  6A10               	clrf	___awmod@dividend+1,c
  3856  0012D0  BE0F               	btfsc	___awmod@dividend,7,c
  3857  0012D2  0610               	decf	___awmod@dividend+1,f,c
  3858  0012D4  EC83  F019         	call	___awmod	;wreg free
  3859  0012D8  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  3860  0012DC  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  3861  0012E0  EC40  F01D         	call	___wmul	;wreg free
  3862  0012E4  0E5D               	movlw	low __powers_
  3863  0012E6  241D               	addwf	?___wmul,w,c
  3864  0012E8  6EF6               	movwf	tblptrl,c
  3865  0012EA  0EFF               	movlw	high __powers_
  3866  0012EC  201E               	addwfc	?___wmul+1,w,c
  3867  0012EE  6EF7               	movwf	tblptrh,c
  3868  0012F0                     	if	0	;There are less than 3 active tblptr bytes
  3869  0012F0                     	endif
  3870  0012F0  0009               	tblrd		*+
  3871  0012F2  CFF5 F026          	movff	tablat,___ftmul@f2
  3872  0012F6  0009               	tblrd		*+
  3873  0012F8  CFF5 F027          	movff	tablat,___ftmul@f2+1
  3874  0012FC  000A               	tblrd		*-
  3875  0012FE  CFF5 F028          	movff	tablat,___ftmul@f2+2
  3876  001302  ECE6  F012         	call	___ftmul	;wreg free
  3877  001306                     L5:
  3878  001306  C023  F032         	movff	?___ftmul,?_scale
  3879  00130A  C024  F033         	movff	?___ftmul+1,?_scale+1
  3880  00130E  C025  F034         	movff	?___ftmul+2,?_scale+2
  3881  001312  D013               	goto	l582
  3882  001314  D000               	goto	l6280
  3883  001316                     l6280:
  3884                           
  3885                           ;doprnt.c: 440: return _powers_[scl];
  3886  001316  5038               	movf	scale@scl,w,c
  3887  001318  0D03               	mullw	3
  3888  00131A  0E5D               	movlw	low __powers_
  3889  00131C  24F3               	addwf	prodl,w,c
  3890  00131E  6EF6               	movwf	tblptrl,c
  3891  001320  0EFF               	movlw	high __powers_
  3892  001322                     L4:
  3893  001322  20F4               	addwfc	prodh,w,c
  3894  001324  6EF7               	movwf	tblptrh,c
  3895  001326                     	if	0	;There are less than 3 active tblptr bytes
  3896  001326                     	endif
  3897  001326  0009               	tblrd		*+
  3898  001328  CFF5 F032          	movff	tablat,?_scale
  3899  00132C  0009               	tblrd		*+
  3900  00132E  CFF5 F033          	movff	tablat,?_scale+1
  3901  001332  000A               	tblrd		*-
  3902  001334  CFF5 F034          	movff	tablat,?_scale+2
  3903  001338  D000               	goto	l582
  3904  00133A                     l582:
  3905  00133A  0012               	return		;funcret
  3906  00133C                     __end_of_scale:
  3907                           	opt stack 0
  3908                           tblptru	equ	0xFF8
  3909                           tblptrh	equ	0xFF7
  3910                           tblptrl	equ	0xFF6
  3911                           tablat	equ	0xFF5
  3912                           prodh	equ	0xFF4
  3913                           prodl	equ	0xFF3
  3914                           intcon2	equ	0xFF1
  3915                           postinc0	equ	0xFEE
  3916                           wreg	equ	0xFE8
  3917                           postdec1	equ	0xFE5
  3918                           fsr1l	equ	0xFE1
  3919                           postinc2	equ	0xFDE
  3920                           postdec2	equ	0xFDD
  3921                           fsr2h	equ	0xFDA
  3922                           fsr2l	equ	0xFD9
  3923                           status	equ	0xFD8
  3924                           
  3925 ;; *************** function _putch *****************
  3926 ;; Defined at:
  3927 ;;		line 180 in file "Lab9pC.c"
  3928 ;; Parameters:    Size  Location     Type
  3929 ;;  c               1    wreg     unsigned char 
  3930 ;; Auto vars:     Size  Location     Type
  3931 ;;  c               1   14[COMRAM] unsigned char 
  3932 ;; Return value:  Size  Location     Type
  3933 ;;		None               void
  3934 ;; Registers used:
  3935 ;;		wreg
  3936 ;; Tracked objects:
  3937 ;;		On entry : 0/0
  3938 ;;		On exit  : 0/0
  3939 ;;		Unchanged: 0/0
  3940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3942 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3944 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3945 ;;Total ram usage:        1 bytes
  3946 ;; Hardware stack levels used:    1
  3947 ;; Hardware stack levels required when called:    2
  3948 ;; This function calls:
  3949 ;;		Nothing
  3950 ;; This function is called by:
  3951 ;;		_printf
  3952 ;; This function uses a non-reentrant model
  3953 ;;
  3954                           
  3955                           	psect	text3
  3956  003C16                     __ptext3:
  3957                           	opt stack 0
  3958  003C16                     _putch:
  3959                           	opt stack 27
  3960                           
  3961                           ;incstack = 0
  3962                           ;putch@c stored from wreg
  3963  003C16  6E0F               	movwf	putch@c,c
  3964                           
  3965                           ;Lab9pC.c: 182: while (!TRMT);
  3966  003C18  D000               	goto	l377
  3967  003C1A                     l377:
  3968  003C1A  A2AC               	btfss	4012,1,c	;volatile
  3969  003C1C  D7FE               	goto	l377
  3970                           
  3971                           ;Lab9pC.c: 183: TXREG = c;
  3972  003C1E  C00F  FFAD         	movff	putch@c,4013	;volatile
  3973  003C22  0012               	return		;funcret
  3974  003C24                     __end_of_putch:
  3975                           	opt stack 0
  3976                           tblptru	equ	0xFF8
  3977                           tblptrh	equ	0xFF7
  3978                           tblptrl	equ	0xFF6
  3979                           tablat	equ	0xFF5
  3980                           prodh	equ	0xFF4
  3981                           prodl	equ	0xFF3
  3982                           intcon2	equ	0xFF1
  3983                           postinc0	equ	0xFEE
  3984                           wreg	equ	0xFE8
  3985                           postdec1	equ	0xFE5
  3986                           fsr1l	equ	0xFE1
  3987                           postinc2	equ	0xFDE
  3988                           postdec2	equ	0xFDD
  3989                           fsr2h	equ	0xFDA
  3990                           fsr2l	equ	0xFD9
  3991                           status	equ	0xFD8
  3992                           
  3993 ;; *************** function _fround *****************
  3994 ;; Defined at:
  3995 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  3996 ;; Parameters:    Size  Location     Type
  3997 ;;  prec            1    wreg     unsigned char 
  3998 ;; Auto vars:     Size  Location     Type
  3999 ;;  prec            1   58[COMRAM] unsigned char 
  4000 ;; Return value:  Size  Location     Type
  4001 ;;                  3   49[COMRAM] unsigned char 
  4002 ;; Registers used:
  4003 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4004 ;; Tracked objects:
  4005 ;;		On entry : 0/0
  4006 ;;		On exit  : 0/0
  4007 ;;		Unchanged: 0/0
  4008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4009 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4010 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4012 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4013 ;;Total ram usage:       10 bytes
  4014 ;; Hardware stack levels used:    1
  4015 ;; Hardware stack levels required when called:    4
  4016 ;; This function calls:
  4017 ;;		___awdiv
  4018 ;;		___awmod
  4019 ;;		___ftmul
  4020 ;;		___wmul
  4021 ;; This function is called by:
  4022 ;;		_printf
  4023 ;; This function uses a non-reentrant model
  4024 ;;
  4025                           
  4026                           	psect	text4
  4027  00169E                     __ptext4:
  4028                           	opt stack 0
  4029  00169E                     _fround:
  4030                           	opt stack 25
  4031                           
  4032                           ;incstack = 0
  4033                           ;fround@prec stored from wreg
  4034  00169E  6E3B               	movwf	fround@prec,c
  4035                           
  4036                           ;doprnt.c: 413: if(prec>=110)
  4037  0016A0  0E6D               	movlw	109
  4038  0016A2  643B               	cpfsgt	fround@prec,c
  4039  0016A4  D09B               	goto	l6234
  4040                           
  4041                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4042  0016A6  0E00               	movlw	0
  4043  0016A8  6E20               	movwf	___wmul@multiplicand+1,c
  4044  0016AA  0E03               	movlw	3
  4045  0016AC  6E1F               	movwf	___wmul@multiplicand,c
  4046  0016AE  0E00               	movlw	0
  4047  0016B0  6E18               	movwf	___awdiv@divisor+1,c
  4048  0016B2  0E0A               	movlw	10
  4049  0016B4  6E17               	movwf	___awdiv@divisor,c
  4050  0016B6  0E00               	movlw	0
  4051  0016B8  6E12               	movwf	___awmod@divisor+1,c
  4052  0016BA  0E64               	movlw	100
  4053  0016BC  6E11               	movwf	___awmod@divisor,c
  4054  0016BE  C03B  F00F         	movff	fround@prec,___awmod@dividend
  4055  0016C2  6A10               	clrf	___awmod@dividend+1,c
  4056  0016C4  EC83  F019         	call	___awmod	;wreg free
  4057  0016C8  C00F  F015         	movff	?___awmod,___awdiv@dividend
  4058  0016CC  C010  F016         	movff	?___awmod+1,___awdiv@dividend+1
  4059  0016D0  ECE6  F017         	call	___awdiv	;wreg free
  4060  0016D4  0E09               	movlw	9
  4061  0016D6  2415               	addwf	?___awdiv,w,c
  4062  0016D8  6E1D               	movwf	___wmul@multiplier,c
  4063  0016DA  0E00               	movlw	0
  4064  0016DC  2016               	addwfc	?___awdiv+1,w,c
  4065  0016DE  6E1E               	movwf	___wmul@multiplier+1,c
  4066  0016E0  EC40  F01D         	call	___wmul	;wreg free
  4067  0016E4  0E36               	movlw	low __npowers_
  4068  0016E6  241D               	addwf	?___wmul,w,c
  4069  0016E8  6EF6               	movwf	tblptrl,c
  4070  0016EA  0EFF               	movlw	high __npowers_
  4071  0016EC  201E               	addwfc	?___wmul+1,w,c
  4072  0016EE  6EF7               	movwf	tblptrh,c
  4073  0016F0                     	if	0	;There are less than 3 active tblptr bytes
  4074  0016F0                     	endif
  4075  0016F0  0009               	tblrd		*+
  4076  0016F2  CFF5 F026          	movff	tablat,___ftmul@f2
  4077  0016F6  0009               	tblrd		*+
  4078  0016F8  CFF5 F027          	movff	tablat,___ftmul@f2+1
  4079  0016FC  000A               	tblrd		*-
  4080  0016FE  CFF5 F028          	movff	tablat,___ftmul@f2+2
  4081  001702  0E00               	movlw	0
  4082  001704  6E18               	movwf	___awdiv@divisor+1,c
  4083  001706  0E64               	movlw	100
  4084  001708  6E17               	movwf	___awdiv@divisor,c
  4085  00170A  C03B  F015         	movff	fround@prec,___awdiv@dividend
  4086  00170E  6A16               	clrf	___awdiv@dividend+1,c
  4087  001710  ECE6  F017         	call	___awdiv	;wreg free
  4088  001714  0E12               	movlw	18
  4089  001716  2415               	addwf	?___awdiv,w,c
  4090  001718  6E1D               	movwf	___wmul@multiplier,c
  4091  00171A  0E00               	movlw	0
  4092  00171C  2016               	addwfc	?___awdiv+1,w,c
  4093  00171E  6E1E               	movwf	___wmul@multiplier+1,c
  4094  001720  0E00               	movlw	0
  4095  001722  6E20               	movwf	___wmul@multiplicand+1,c
  4096  001724  0E03               	movlw	3
  4097  001726  6E1F               	movwf	___wmul@multiplicand,c
  4098  001728  EC40  F01D         	call	___wmul	;wreg free
  4099  00172C  0E36               	movlw	low __npowers_
  4100  00172E  241D               	addwf	?___wmul,w,c
  4101  001730  6EF6               	movwf	tblptrl,c
  4102  001732  0EFF               	movlw	high __npowers_
  4103  001734  201E               	addwfc	?___wmul+1,w,c
  4104  001736  6EF7               	movwf	tblptrh,c
  4105  001738                     	if	0	;There are less than 3 active tblptr bytes
  4106  001738                     	endif
  4107  001738  0009               	tblrd		*+
  4108  00173A  CFF5 F023          	movff	tablat,___ftmul@f1
  4109  00173E  0009               	tblrd		*+
  4110  001740  CFF5 F024          	movff	tablat,___ftmul@f1+1
  4111  001744  000A               	tblrd		*-
  4112  001746  CFF5 F025          	movff	tablat,___ftmul@f1+2
  4113  00174A  ECE6  F012         	call	___ftmul	;wreg free
  4114  00174E  C023  F038         	movff	?___ftmul,_fround$2492
  4115  001752  C024  F039         	movff	?___ftmul+1,_fround$2492+1
  4116  001756  C025  F03A         	movff	?___ftmul+2,_fround$2492+2
  4117                           
  4118                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4119  00175A  0E00               	movlw	0
  4120  00175C  6E20               	movwf	___wmul@multiplicand+1,c
  4121  00175E  0E03               	movlw	3
  4122  001760  6E1F               	movwf	___wmul@multiplicand,c
  4123  001762  0E00               	movlw	0
  4124  001764  6E12               	movwf	___awmod@divisor+1,c
  4125  001766  0E0A               	movlw	10
  4126  001768  6E11               	movwf	___awmod@divisor,c
  4127  00176A  C03B  F00F         	movff	fround@prec,___awmod@dividend
  4128  00176E  6A10               	clrf	___awmod@dividend+1,c
  4129  001770  EC83  F019         	call	___awmod	;wreg free
  4130  001774  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  4131  001778  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  4132  00177C  EC40  F01D         	call	___wmul	;wreg free
  4133  001780  0E36               	movlw	low __npowers_
  4134  001782  241D               	addwf	?___wmul,w,c
  4135  001784  6EF6               	movwf	tblptrl,c
  4136  001786  0EFF               	movlw	high __npowers_
  4137  001788  201E               	addwfc	?___wmul+1,w,c
  4138  00178A  6EF7               	movwf	tblptrh,c
  4139  00178C                     	if	0	;There are less than 3 active tblptr bytes
  4140  00178C                     	endif
  4141  00178C  0009               	tblrd		*+
  4142  00178E  CFF5 F026          	movff	tablat,___ftmul@f2
  4143  001792  0009               	tblrd		*+
  4144  001794  CFF5 F027          	movff	tablat,___ftmul@f2+1
  4145  001798  000A               	tblrd		*-
  4146  00179A  CFF5 F028          	movff	tablat,___ftmul@f2+2
  4147  00179E  C038  F023         	movff	_fround$2492,___ftmul@f1
  4148  0017A2  C039  F024         	movff	_fround$2492+1,___ftmul@f1+1
  4149  0017A6  C03A  F025         	movff	_fround$2492+2,___ftmul@f1+2
  4150  0017AA  ECE6  F012         	call	___ftmul	;wreg free
  4151  0017AE  C023  F035         	movff	?___ftmul,_fround$2493
  4152  0017B2  C024  F036         	movff	?___ftmul+1,_fround$2493+1
  4153  0017B6  C025  F037         	movff	?___ftmul+2,_fround$2493+2
  4154                           
  4155                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4156  0017BA  C035  F023         	movff	_fround$2493,___ftmul@f1
  4157  0017BE  C036  F024         	movff	_fround$2493+1,___ftmul@f1+1
  4158  0017C2  C037  F025         	movff	_fround$2493+2,___ftmul@f1+2
  4159  0017C6  0E00               	movlw	0
  4160  0017C8  6E26               	movwf	___ftmul@f2,c
  4161  0017CA  0E00               	movlw	0
  4162  0017CC  6E27               	movwf	___ftmul@f2+1,c
  4163  0017CE  0E3F               	movlw	63
  4164  0017D0  6E28               	movwf	___ftmul@f2+2,c
  4165  0017D2  ECE6  F012         	call	___ftmul	;wreg free
  4166  0017D6  D07D               	goto	L7
  4167  0017D8  D083               	goto	l575
  4168  0017DA  D062               	goto	l6242
  4169  0017DC                     l6234:
  4170                           
  4171                           ;doprnt.c: 415: else if(prec > 10)
  4172  0017DC  0E0A               	movlw	10
  4173  0017DE  643B               	cpfsgt	fround@prec,c
  4174  0017E0  D05F               	goto	l6242
  4175                           
  4176                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4177  0017E2  0E00               	movlw	0
  4178  0017E4  6E20               	movwf	___wmul@multiplicand+1,c
  4179  0017E6  0E03               	movlw	3
  4180  0017E8  6E1F               	movwf	___wmul@multiplicand,c
  4181  0017EA  0E00               	movlw	0
  4182  0017EC  6E12               	movwf	___awmod@divisor+1,c
  4183  0017EE  0E0A               	movlw	10
  4184  0017F0  6E11               	movwf	___awmod@divisor,c
  4185  0017F2  C03B  F00F         	movff	fround@prec,___awmod@dividend
  4186  0017F6  6A10               	clrf	___awmod@dividend+1,c
  4187  0017F8  EC83  F019         	call	___awmod	;wreg free
  4188  0017FC  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  4189  001800  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  4190  001804  EC40  F01D         	call	___wmul	;wreg free
  4191  001808  0E36               	movlw	low __npowers_
  4192  00180A  241D               	addwf	?___wmul,w,c
  4193  00180C  6EF6               	movwf	tblptrl,c
  4194  00180E  0EFF               	movlw	high __npowers_
  4195  001810  201E               	addwfc	?___wmul+1,w,c
  4196  001812  6EF7               	movwf	tblptrh,c
  4197  001814                     	if	0	;There are less than 3 active tblptr bytes
  4198  001814                     	endif
  4199  001814  0009               	tblrd		*+
  4200  001816  CFF5 F026          	movff	tablat,___ftmul@f2
  4201  00181A  0009               	tblrd		*+
  4202  00181C  CFF5 F027          	movff	tablat,___ftmul@f2+1
  4203  001820  000A               	tblrd		*-
  4204  001822  CFF5 F028          	movff	tablat,___ftmul@f2+2
  4205  001826  0E00               	movlw	0
  4206  001828  6E18               	movwf	___awdiv@divisor+1,c
  4207  00182A  0E0A               	movlw	10
  4208  00182C  6E17               	movwf	___awdiv@divisor,c
  4209  00182E  C03B  F015         	movff	fround@prec,___awdiv@dividend
  4210  001832  6A16               	clrf	___awdiv@dividend+1,c
  4211  001834  ECE6  F017         	call	___awdiv	;wreg free
  4212  001838  0E09               	movlw	9
  4213  00183A  2415               	addwf	?___awdiv,w,c
  4214  00183C  6E1D               	movwf	___wmul@multiplier,c
  4215  00183E  0E00               	movlw	0
  4216  001840  2016               	addwfc	?___awdiv+1,w,c
  4217  001842  6E1E               	movwf	___wmul@multiplier+1,c
  4218  001844  0E00               	movlw	0
  4219  001846  6E20               	movwf	___wmul@multiplicand+1,c
  4220  001848  0E03               	movlw	3
  4221  00184A  6E1F               	movwf	___wmul@multiplicand,c
  4222  00184C  EC40  F01D         	call	___wmul	;wreg free
  4223  001850  0E36               	movlw	low __npowers_
  4224  001852  241D               	addwf	?___wmul,w,c
  4225  001854  6EF6               	movwf	tblptrl,c
  4226  001856  0EFF               	movlw	high __npowers_
  4227  001858  201E               	addwfc	?___wmul+1,w,c
  4228  00185A  6EF7               	movwf	tblptrh,c
  4229  00185C                     	if	0	;There are less than 3 active tblptr bytes
  4230  00185C                     	endif
  4231  00185C  0009               	tblrd		*+
  4232  00185E  CFF5 F023          	movff	tablat,___ftmul@f1
  4233  001862  0009               	tblrd		*+
  4234  001864  CFF5 F024          	movff	tablat,___ftmul@f1+1
  4235  001868  000A               	tblrd		*-
  4236  00186A  CFF5 F025          	movff	tablat,___ftmul@f1+2
  4237  00186E  ECE6  F012         	call	___ftmul	;wreg free
  4238  001872  C023  F038         	movff	?___ftmul,_fround$2492
  4239  001876  C024  F039         	movff	?___ftmul+1,_fround$2492+1
  4240  00187A  C025  F03A         	movff	?___ftmul+2,_fround$2492+2
  4241                           
  4242                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4243  00187E  C038  F023         	movff	_fround$2492,___ftmul@f1
  4244  001882  C039  F024         	movff	_fround$2492+1,___ftmul@f1+1
  4245  001886  C03A  F025         	movff	_fround$2492+2,___ftmul@f1+2
  4246  00188A  0E00               	movlw	0
  4247  00188C  6E26               	movwf	___ftmul@f2,c
  4248  00188E  0E00               	movlw	0
  4249  001890  6E27               	movwf	___ftmul@f2+1,c
  4250  001892  0E3F               	movlw	63
  4251  001894  6E28               	movwf	___ftmul@f2+2,c
  4252  001896  ECE6  F012         	call	___ftmul	;wreg free
  4253  00189A  D01B               	goto	L7
  4254  00189C  D021               	goto	l575
  4255  00189E  D000               	goto	l6242
  4256  0018A0                     l6242:
  4257                           
  4258                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4259  0018A0  503B               	movf	fround@prec,w,c
  4260  0018A2  0D03               	mullw	3
  4261  0018A4  0E36               	movlw	low __npowers_
  4262  0018A6  24F3               	addwf	prodl,w,c
  4263  0018A8  6EF6               	movwf	tblptrl,c
  4264  0018AA  0EFF               	movlw	high __npowers_
  4265  0018AC  20F4               	addwfc	prodh,w,c
  4266  0018AE  6EF7               	movwf	tblptrh,c
  4267  0018B0                     	if	0	;There are less than 3 active tblptr bytes
  4268  0018B0                     	endif
  4269  0018B0  0009               	tblrd		*+
  4270  0018B2  CFF5 F023          	movff	tablat,___ftmul@f1
  4271  0018B6  0009               	tblrd		*+
  4272  0018B8  CFF5 F024          	movff	tablat,___ftmul@f1+1
  4273  0018BC  000A               	tblrd		*-
  4274  0018BE  CFF5 F025          	movff	tablat,___ftmul@f1+2
  4275  0018C2  0E00               	movlw	0
  4276  0018C4  6E26               	movwf	___ftmul@f2,c
  4277  0018C6  0E00               	movlw	0
  4278  0018C8  6E27               	movwf	___ftmul@f2+1,c
  4279  0018CA  0E3F               	movlw	63
  4280  0018CC  6E28               	movwf	___ftmul@f2+2,c
  4281  0018CE  ECE6  F012         	call	___ftmul	;wreg free
  4282  0018D2                     L7:
  4283  0018D2  C023  F032         	movff	?___ftmul,?_fround
  4284  0018D6  C024  F033         	movff	?___ftmul+1,?_fround+1
  4285  0018DA  C025  F034         	movff	?___ftmul+2,?_fround+2
  4286  0018DE  D000               	goto	l575
  4287  0018E0                     l575:
  4288  0018E0  0012               	return		;funcret
  4289  0018E2                     __end_of_fround:
  4290                           	opt stack 0
  4291                           tblptru	equ	0xFF8
  4292                           tblptrh	equ	0xFF7
  4293                           tblptrl	equ	0xFF6
  4294                           tablat	equ	0xFF5
  4295                           prodh	equ	0xFF4
  4296                           prodl	equ	0xFF3
  4297                           intcon2	equ	0xFF1
  4298                           postinc0	equ	0xFEE
  4299                           wreg	equ	0xFE8
  4300                           postdec1	equ	0xFE5
  4301                           fsr1l	equ	0xFE1
  4302                           postinc2	equ	0xFDE
  4303                           postdec2	equ	0xFDD
  4304                           fsr2h	equ	0xFDA
  4305                           fsr2l	equ	0xFD9
  4306                           status	equ	0xFD8
  4307                           
  4308 ;; *************** function ___ftmul *****************
  4309 ;; Defined at:
  4310 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  4311 ;; Parameters:    Size  Location     Type
  4312 ;;  f1              3   34[COMRAM] float 
  4313 ;;  f2              3   37[COMRAM] float 
  4314 ;; Auto vars:     Size  Location     Type
  4315 ;;  f3_as_produc    3   44[COMRAM] unsigned um
  4316 ;;  sign            1   48[COMRAM] unsigned char 
  4317 ;;  cntr            1   47[COMRAM] unsigned char 
  4318 ;;  exp             1   43[COMRAM] unsigned char 
  4319 ;; Return value:  Size  Location     Type
  4320 ;;                  3   34[COMRAM] float 
  4321 ;; Registers used:
  4322 ;;		wreg, status,2, status,0, cstack
  4323 ;; Tracked objects:
  4324 ;;		On entry : 0/0
  4325 ;;		On exit  : 0/0
  4326 ;;		Unchanged: 0/0
  4327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4328 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4329 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4330 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4331 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4332 ;;Total ram usage:       15 bytes
  4333 ;; Hardware stack levels used:    1
  4334 ;; Hardware stack levels required when called:    3
  4335 ;; This function calls:
  4336 ;;		___ftpack
  4337 ;; This function is called by:
  4338 ;;		_fround
  4339 ;;		_scale
  4340 ;;		_printf
  4341 ;; This function uses a non-reentrant model
  4342 ;;
  4343                           
  4344                           	psect	text5
  4345  0025CC                     __ptext5:
  4346                           	opt stack 0
  4347  0025CC                     ___ftmul:
  4348                           	opt stack 25
  4349                           
  4350                           ;incstack = 0
  4351  0025CC  C025  F029         	movff	___ftmul@f1+2,??___ftmul
  4352  0025D0  6A2A               	clrf	(??___ftmul+1)& (0+255),c
  4353  0025D2  6A2B               	clrf	(??___ftmul+2)& (0+255),c
  4354  0025D4  3424               	rlcf	___ftmul@f1+1,w,c
  4355  0025D6  3629               	rlcf	??___ftmul& (0+255),f,c
  4356  0025D8  E301               	bnc	u5571
  4357  0025DA  802A               	bsf	(??___ftmul+1)& (0+255),0,c
  4358  0025DC                     u5571:
  4359  0025DC  5029               	movf	??___ftmul,w,c
  4360  0025DE  6E2C               	movwf	___ftmul@exp,c
  4361  0025E0  502C               	movf	___ftmul@exp,w,c
  4362  0025E2  A4D8               	btfss	status,2,c
  4363  0025E4  D002               	goto	l6112
  4364  0025E6  D00E               	goto	l6114
  4365  0025E8  D06C               	goto	l1112
  4366  0025EA                     l6112:
  4367  0025EA  C028  F029         	movff	___ftmul@f2+2,??___ftmul
  4368  0025EE  6A2A               	clrf	(??___ftmul+1)& (0+255),c
  4369  0025F0  6A2B               	clrf	(??___ftmul+2)& (0+255),c
  4370  0025F2  3427               	rlcf	___ftmul@f2+1,w,c
  4371  0025F4  3629               	rlcf	??___ftmul& (0+255),f,c
  4372  0025F6  E301               	bnc	u5591
  4373  0025F8  802A               	bsf	(??___ftmul+1)& (0+255),0,c
  4374  0025FA                     u5591:
  4375  0025FA  5029               	movf	??___ftmul,w,c
  4376  0025FC  6E31               	movwf	___ftmul@sign,c
  4377  0025FE  5031               	movf	___ftmul@sign,w,c
  4378  002600  A4D8               	btfss	status,2,c
  4379  002602  D007               	goto	l6118
  4380  002604                     l6114:
  4381  002604  0E00               	movlw	0
  4382  002606  6E23               	movwf	?___ftmul,c
  4383  002608  0E00               	movlw	0
  4384  00260A  6E24               	movwf	?___ftmul+1,c
  4385  00260C  0E00               	movlw	0
  4386  00260E  6E25               	movwf	?___ftmul+2,c
  4387  002610  D058               	goto	l1112
  4388  002612                     l6118:
  4389  002612  5031               	movf	___ftmul@sign,w,c
  4390  002614  0F7B               	addlw	123
  4391  002616  262C               	addwf	___ftmul@exp,f,c
  4392  002618  C025  F031         	movff	___ftmul@f1+2,___ftmul@sign
  4393  00261C  5028               	movf	___ftmul@f2+2,w,c
  4394  00261E  1A31               	xorwf	___ftmul@sign,f,c
  4395  002620  0E80               	movlw	128
  4396  002622  1631               	andwf	___ftmul@sign,f,c
  4397  002624  8E24               	bsf	___ftmul@f1+1,7,c
  4398  002626  8E27               	bsf	___ftmul@f2+1,7,c
  4399  002628  0EFF               	movlw	255
  4400  00262A  1626               	andwf	___ftmul@f2,f,c
  4401  00262C  0EFF               	movlw	255
  4402  00262E  1627               	andwf	___ftmul@f2+1,f,c
  4403  002630  0E00               	movlw	0
  4404  002632  1628               	andwf	___ftmul@f2+2,f,c
  4405  002634  0E00               	movlw	0
  4406  002636  6E2D               	movwf	___ftmul@f3_as_product,c
  4407  002638  0E00               	movlw	0
  4408  00263A  6E2E               	movwf	___ftmul@f3_as_product+1,c
  4409  00263C  0E00               	movlw	0
  4410  00263E  6E2F               	movwf	___ftmul@f3_as_product+2,c
  4411  002640  0E07               	movlw	7
  4412  002642  6E30               	movwf	___ftmul@cntr,c
  4413  002644  D000               	goto	l6132
  4414  002646                     l6132:
  4415  002646  A023               	btfss	___ftmul@f1,0,c
  4416  002648  D007               	goto	l6136
  4417  00264A  5026               	movf	___ftmul@f2,w,c
  4418  00264C  262D               	addwf	___ftmul@f3_as_product,f,c
  4419  00264E  5027               	movf	___ftmul@f2+1,w,c
  4420  002650  222E               	addwfc	___ftmul@f3_as_product+1,f,c
  4421  002652  5028               	movf	___ftmul@f2+2,w,c
  4422  002654  222F               	addwfc	___ftmul@f3_as_product+2,f,c
  4423  002656  D000               	goto	l6136
  4424  002658                     l6136:
  4425  002658  90D8               	bcf	status,0,c
  4426  00265A  3225               	rrcf	___ftmul@f1+2,f,c
  4427  00265C  3224               	rrcf	___ftmul@f1+1,f,c
  4428  00265E  3223               	rrcf	___ftmul@f1,f,c
  4429  002660  90D8               	bcf	status,0,c
  4430  002662  3626               	rlcf	___ftmul@f2,f,c
  4431  002664  3627               	rlcf	___ftmul@f2+1,f,c
  4432  002666  3628               	rlcf	___ftmul@f2+2,f,c
  4433  002668  2E30               	decfsz	___ftmul@cntr,f,c
  4434  00266A  D7ED               	goto	l6132
  4435  00266C  D000               	goto	l6140
  4436  00266E                     l6140:
  4437  00266E  0E09               	movlw	9
  4438  002670  6E30               	movwf	___ftmul@cntr,c
  4439  002672  D000               	goto	l6142
  4440  002674                     l6142:
  4441  002674  A023               	btfss	___ftmul@f1,0,c
  4442  002676  D007               	goto	l6146
  4443  002678  5026               	movf	___ftmul@f2,w,c
  4444  00267A  262D               	addwf	___ftmul@f3_as_product,f,c
  4445  00267C  5027               	movf	___ftmul@f2+1,w,c
  4446  00267E  222E               	addwfc	___ftmul@f3_as_product+1,f,c
  4447  002680  5028               	movf	___ftmul@f2+2,w,c
  4448  002682  222F               	addwfc	___ftmul@f3_as_product+2,f,c
  4449  002684  D000               	goto	l6146
  4450  002686                     l6146:
  4451  002686  90D8               	bcf	status,0,c
  4452  002688  3225               	rrcf	___ftmul@f1+2,f,c
  4453  00268A  3224               	rrcf	___ftmul@f1+1,f,c
  4454  00268C  3223               	rrcf	___ftmul@f1,f,c
  4455  00268E  90D8               	bcf	status,0,c
  4456  002690  322F               	rrcf	___ftmul@f3_as_product+2,f,c
  4457  002692  322E               	rrcf	___ftmul@f3_as_product+1,f,c
  4458  002694  322D               	rrcf	___ftmul@f3_as_product,f,c
  4459  002696  2E30               	decfsz	___ftmul@cntr,f,c
  4460  002698  D7ED               	goto	l6142
  4461  00269A  D000               	goto	l6150
  4462  00269C                     l6150:
  4463  00269C  C02D  F00F         	movff	___ftmul@f3_as_product,___ftpack@arg
  4464  0026A0  C02E  F010         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4465  0026A4  C02F  F011         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4466  0026A8  C02C  F012         	movff	___ftmul@exp,___ftpack@exp
  4467  0026AC  C031  F013         	movff	___ftmul@sign,___ftpack@sign
  4468  0026B0  ECE3  F016         	call	___ftpack	;wreg free
  4469  0026B4  C00F  F023         	movff	?___ftpack,?___ftmul
  4470  0026B8  C010  F024         	movff	?___ftpack+1,?___ftmul+1
  4471  0026BC  C011  F025         	movff	?___ftpack+2,?___ftmul+2
  4472  0026C0  D000               	goto	l1112
  4473  0026C2                     l1112:
  4474  0026C2  0012               	return		;funcret
  4475  0026C4                     __end_of___ftmul:
  4476                           	opt stack 0
  4477                           tblptru	equ	0xFF8
  4478                           tblptrh	equ	0xFF7
  4479                           tblptrl	equ	0xFF6
  4480                           tablat	equ	0xFF5
  4481                           prodh	equ	0xFF4
  4482                           prodl	equ	0xFF3
  4483                           intcon2	equ	0xFF1
  4484                           postinc0	equ	0xFEE
  4485                           wreg	equ	0xFE8
  4486                           postdec1	equ	0xFE5
  4487                           fsr1l	equ	0xFE1
  4488                           postinc2	equ	0xFDE
  4489                           postdec2	equ	0xFDD
  4490                           fsr2h	equ	0xFDA
  4491                           fsr2l	equ	0xFD9
  4492                           status	equ	0xFD8
  4493                           
  4494 ;; *************** function __tdiv_to_l_ *****************
  4495 ;; Defined at:
  4496 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdivl.c"
  4497 ;; Parameters:    Size  Location     Type
  4498 ;;  f1              3   14[COMRAM] float 
  4499 ;;  f2              3   17[COMRAM] float 
  4500 ;; Auto vars:     Size  Location     Type
  4501 ;;  quot            4   23[COMRAM] unsigned long 
  4502 ;;  exp1            1   28[COMRAM] unsigned char 
  4503 ;;  cntr            1   27[COMRAM] unsigned char 
  4504 ;; Return value:  Size  Location     Type
  4505 ;;                  4   14[COMRAM] unsigned long 
  4506 ;; Registers used:
  4507 ;;		wreg, status,2, status,0
  4508 ;; Tracked objects:
  4509 ;;		On entry : 0/0
  4510 ;;		On exit  : 0/0
  4511 ;;		Unchanged: 0/0
  4512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4513 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4514 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4515 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4516 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4517 ;;Total ram usage:       15 bytes
  4518 ;; Hardware stack levels used:    1
  4519 ;; Hardware stack levels required when called:    2
  4520 ;; This function calls:
  4521 ;;		Nothing
  4522 ;; This function is called by:
  4523 ;;		_printf
  4524 ;; This function uses a non-reentrant model
  4525 ;;
  4526                           
  4527                           	psect	text6
  4528  0022A2                     __ptext6:
  4529                           	opt stack 0
  4530  0022A2                     __tdiv_to_l_:
  4531                           	opt stack 27
  4532                           
  4533                           ;incstack = 0
  4534  0022A2  C011  F015         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4535  0022A6  6A16               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4536  0022A8  6A17               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4537  0022AA  3410               	rlcf	__tdiv_to_l_@f1+1,w,c
  4538  0022AC  3615               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4539  0022AE  E301               	bnc	u5771
  4540  0022B0  8016               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4541  0022B2                     u5771:
  4542  0022B2  5015               	movf	??__tdiv_to_l_,w,c
  4543  0022B4  6E1D               	movwf	__tdiv_to_l_@exp1,c
  4544  0022B6  501D               	movf	__tdiv_to_l_@exp1,w,c
  4545  0022B8  A4D8               	btfss	status,2,c
  4546  0022BA  D002               	goto	l6290
  4547  0022BC  D05D               	goto	l6332
  4548  0022BE  D078               	goto	l1088
  4549  0022C0                     l6290:
  4550  0022C0  C014  F015         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4551  0022C4  6A16               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4552  0022C6  6A17               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4553  0022C8  3413               	rlcf	__tdiv_to_l_@f2+1,w,c
  4554  0022CA  3615               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4555  0022CC  E301               	bnc	u5791
  4556  0022CE  8016               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4557  0022D0                     u5791:
  4558  0022D0  5015               	movf	??__tdiv_to_l_,w,c
  4559  0022D2  6E1C               	movwf	__tdiv_to_l_@cntr,c
  4560  0022D4  501C               	movf	__tdiv_to_l_@cntr,w,c
  4561  0022D6  A4D8               	btfss	status,2,c
  4562  0022D8  D002               	goto	l6296
  4563  0022DA  D04E               	goto	l6332
  4564  0022DC  D069               	goto	l1088
  4565  0022DE                     l6296:
  4566  0022DE  8E10               	bsf	__tdiv_to_l_@f1+1,7,c
  4567  0022E0  0EFF               	movlw	255
  4568  0022E2  160F               	andwf	__tdiv_to_l_@f1,f,c
  4569  0022E4  0EFF               	movlw	255
  4570  0022E6  1610               	andwf	__tdiv_to_l_@f1+1,f,c
  4571  0022E8  0E00               	movlw	0
  4572  0022EA  1611               	andwf	__tdiv_to_l_@f1+2,f,c
  4573  0022EC  8E13               	bsf	__tdiv_to_l_@f2+1,7,c
  4574  0022EE  0EFF               	movlw	255
  4575  0022F0  1612               	andwf	__tdiv_to_l_@f2,f,c
  4576  0022F2  0EFF               	movlw	255
  4577  0022F4  1613               	andwf	__tdiv_to_l_@f2+1,f,c
  4578  0022F6  0E00               	movlw	0
  4579  0022F8  1614               	andwf	__tdiv_to_l_@f2+2,f,c
  4580  0022FA  0E00               	movlw	0
  4581  0022FC  6E18               	movwf	__tdiv_to_l_@quot,c
  4582  0022FE  0E00               	movlw	0
  4583  002300  6E19               	movwf	__tdiv_to_l_@quot+1,c
  4584  002302  0E00               	movlw	0
  4585  002304  6E1A               	movwf	__tdiv_to_l_@quot+2,c
  4586  002306  0E00               	movlw	0
  4587  002308  6E1B               	movwf	__tdiv_to_l_@quot+3,c
  4588  00230A  0E7F               	movlw	127
  4589  00230C  5E1D               	subwf	__tdiv_to_l_@exp1,f,c
  4590  00230E  501C               	movf	__tdiv_to_l_@cntr,w,c
  4591  002310  0F98               	addlw	152
  4592  002312  5E1D               	subwf	__tdiv_to_l_@exp1,f,c
  4593  002314  0E18               	movlw	24
  4594  002316  6E1C               	movwf	__tdiv_to_l_@cntr,c
  4595  002318                     l1090:
  4596  002318  90D8               	bcf	status,0,c
  4597  00231A  3618               	rlcf	__tdiv_to_l_@quot,f,c
  4598  00231C  3619               	rlcf	__tdiv_to_l_@quot+1,f,c
  4599  00231E  361A               	rlcf	__tdiv_to_l_@quot+2,f,c
  4600  002320  361B               	rlcf	__tdiv_to_l_@quot+3,f,c
  4601  002322  5012               	movf	__tdiv_to_l_@f2,w,c
  4602  002324  5C0F               	subwf	__tdiv_to_l_@f1,w,c
  4603  002326  5013               	movf	__tdiv_to_l_@f2+1,w,c
  4604  002328  5810               	subwfb	__tdiv_to_l_@f1+1,w,c
  4605  00232A  5014               	movf	__tdiv_to_l_@f2+2,w,c
  4606  00232C  5811               	subwfb	__tdiv_to_l_@f1+2,w,c
  4607  00232E  A0D8               	btfss	status,0,c
  4608  002330  D007               	goto	l1091
  4609  002332  5012               	movf	__tdiv_to_l_@f2,w,c
  4610  002334  5E0F               	subwf	__tdiv_to_l_@f1,f,c
  4611  002336  5013               	movf	__tdiv_to_l_@f2+1,w,c
  4612  002338  5A10               	subwfb	__tdiv_to_l_@f1+1,f,c
  4613  00233A  5014               	movf	__tdiv_to_l_@f2+2,w,c
  4614  00233C  5A11               	subwfb	__tdiv_to_l_@f1+2,f,c
  4615  00233E  8018               	bsf	__tdiv_to_l_@quot,0,c
  4616  002340                     l1091:
  4617  002340  90D8               	bcf	status,0,c
  4618  002342  360F               	rlcf	__tdiv_to_l_@f1,f,c
  4619  002344  3610               	rlcf	__tdiv_to_l_@f1+1,f,c
  4620  002346  3611               	rlcf	__tdiv_to_l_@f1+2,f,c
  4621  002348  2E1C               	decfsz	__tdiv_to_l_@cntr,f,c
  4622  00234A  D7E6               	goto	l1090
  4623  00234C  D000               	goto	l6318
  4624  00234E                     l6318:
  4625  00234E  AE1D               	btfss	__tdiv_to_l_@exp1,7,c
  4626  002350  D010               	goto	l6330
  4627  002352  501D               	movf	__tdiv_to_l_@exp1,w,c
  4628  002354  0A80               	xorlw	128
  4629  002356  0F97               	addlw	151
  4630  002358  B0D8               	btfsc	status,0,c
  4631  00235A  D003               	goto	l6326
  4632  00235C  D00D               	goto	l6332
  4633  00235E  D028               	goto	l1088
  4634  002360  D000               	goto	l6326
  4635  002362                     l6326:
  4636  002362  90D8               	bcf	status,0,c
  4637  002364  321B               	rrcf	__tdiv_to_l_@quot+3,f,c
  4638  002366  321A               	rrcf	__tdiv_to_l_@quot+2,f,c
  4639  002368  3219               	rrcf	__tdiv_to_l_@quot+1,f,c
  4640  00236A  3218               	rrcf	__tdiv_to_l_@quot,f,c
  4641  00236C  3E1D               	incfsz	__tdiv_to_l_@exp1,f,c
  4642  00236E  D7F9               	goto	l6326
  4643  002370  D017               	goto	l1097
  4644  002372                     l6330:
  4645  002372  0E17               	movlw	23
  4646  002374  641D               	cpfsgt	__tdiv_to_l_@exp1,c
  4647  002376  D011               	goto	l6338
  4648  002378                     l6332:
  4649  002378  0E00               	movlw	0
  4650  00237A  6E0F               	movwf	?__tdiv_to_l_,c
  4651  00237C  0E00               	movlw	0
  4652  00237E  6E10               	movwf	?__tdiv_to_l_+1,c
  4653  002380  0E00               	movlw	0
  4654  002382  6E11               	movwf	?__tdiv_to_l_+2,c
  4655  002384  0E00               	movlw	0
  4656  002386  6E12               	movwf	?__tdiv_to_l_+3,c
  4657  002388  D013               	goto	l1088
  4658  00238A  D007               	goto	l6338
  4659  00238C                     l6336:
  4660  00238C  90D8               	bcf	status,0,c
  4661  00238E  3618               	rlcf	__tdiv_to_l_@quot,f,c
  4662  002390  3619               	rlcf	__tdiv_to_l_@quot+1,f,c
  4663  002392  361A               	rlcf	__tdiv_to_l_@quot+2,f,c
  4664  002394  361B               	rlcf	__tdiv_to_l_@quot+3,f,c
  4665  002396  061D               	decf	__tdiv_to_l_@exp1,f,c
  4666  002398  D000               	goto	l6338
  4667  00239A                     l6338:
  4668  00239A  501D               	movf	__tdiv_to_l_@exp1,w,c
  4669  00239C  A4D8               	btfss	status,2,c
  4670  00239E  D7F6               	goto	l6336
  4671  0023A0                     l1097:
  4672  0023A0  C018  F00F         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4673  0023A4  C019  F010         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4674  0023A8  C01A  F011         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4675  0023AC  C01B  F012         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4676  0023B0                     l1088:
  4677  0023B0  0012               	return		;funcret
  4678  0023B2                     __end_of__tdiv_to_l_:
  4679                           	opt stack 0
  4680                           tblptru	equ	0xFF8
  4681                           tblptrh	equ	0xFF7
  4682                           tblptrl	equ	0xFF6
  4683                           tablat	equ	0xFF5
  4684                           prodh	equ	0xFF4
  4685                           prodl	equ	0xFF3
  4686                           intcon2	equ	0xFF1
  4687                           postinc0	equ	0xFEE
  4688                           wreg	equ	0xFE8
  4689                           postdec1	equ	0xFE5
  4690                           fsr1l	equ	0xFE1
  4691                           postinc2	equ	0xFDE
  4692                           postdec2	equ	0xFDD
  4693                           fsr2h	equ	0xFDA
  4694                           fsr2l	equ	0xFD9
  4695                           status	equ	0xFD8
  4696                           
  4697 ;; *************** function __div_to_l_ *****************
  4698 ;; Defined at:
  4699 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldivl.c"
  4700 ;; Parameters:    Size  Location     Type
  4701 ;;  f1              3   14[COMRAM] unsigned long 
  4702 ;;  f2              3   17[COMRAM] unsigned long 
  4703 ;; Auto vars:     Size  Location     Type
  4704 ;;  quot            4   20[COMRAM] unsigned long 
  4705 ;;  exp1            1   25[COMRAM] unsigned char 
  4706 ;;  cntr            1   24[COMRAM] unsigned char 
  4707 ;; Return value:  Size  Location     Type
  4708 ;;                  4   14[COMRAM] unsigned long 
  4709 ;; Registers used:
  4710 ;;		wreg, status,2, status,0
  4711 ;; Tracked objects:
  4712 ;;		On entry : 0/0
  4713 ;;		On exit  : 0/0
  4714 ;;		Unchanged: 0/0
  4715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4716 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4717 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4719 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4720 ;;Total ram usage:       12 bytes
  4721 ;; Hardware stack levels used:    1
  4722 ;; Hardware stack levels required when called:    2
  4723 ;; This function calls:
  4724 ;;		Nothing
  4725 ;; This function is called by:
  4726 ;;		_printf
  4727 ;; This function uses a non-reentrant model
  4728 ;;
  4729                           
  4730                           	psect	text7
  4731  0024C2                     __ptext7:
  4732                           	opt stack 0
  4733  0024C2                     __div_to_l_:
  4734                           	opt stack 27
  4735                           
  4736                           ;incstack = 0
  4737  0024C2  3411               	rlcf	__div_to_l_@f1+2,w,c
  4738  0024C4  3412               	rlcf	__div_to_l_@f1+3,w,c
  4739  0024C6  6E1A               	movwf	__div_to_l_@exp1,c
  4740  0024C8  501A               	movf	__div_to_l_@exp1,w,c
  4741  0024CA  A4D8               	btfss	status,2,c
  4742  0024CC  D002               	goto	l6346
  4743  0024CE  D061               	goto	l6392
  4744  0024D0  D07C               	goto	l967
  4745  0024D2                     l6346:
  4746  0024D2  3414               	rlcf	__div_to_l_@f2+2,w,c
  4747  0024D4  3415               	rlcf	__div_to_l_@f2+3,w,c
  4748  0024D6  6E19               	movwf	__div_to_l_@cntr,c
  4749  0024D8  5019               	movf	__div_to_l_@cntr,w,c
  4750  0024DA  A4D8               	btfss	status,2,c
  4751  0024DC  D002               	goto	l6352
  4752  0024DE  D059               	goto	l6392
  4753  0024E0  D074               	goto	l967
  4754  0024E2                     l6352:
  4755  0024E2  8E11               	bsf	__div_to_l_@f1+2,7,c
  4756  0024E4  0EFF               	movlw	255
  4757  0024E6  160F               	andwf	__div_to_l_@f1,f,c
  4758  0024E8  0EFF               	movlw	255
  4759  0024EA  1610               	andwf	__div_to_l_@f1+1,f,c
  4760  0024EC  0EFF               	movlw	255
  4761  0024EE  1611               	andwf	__div_to_l_@f1+2,f,c
  4762  0024F0  0E00               	movlw	0
  4763  0024F2  1612               	andwf	__div_to_l_@f1+3,f,c
  4764  0024F4  8E14               	bsf	__div_to_l_@f2+2,7,c
  4765  0024F6  0EFF               	movlw	255
  4766  0024F8  1612               	andwf	__div_to_l_@f2,f,c
  4767  0024FA  0EFF               	movlw	255
  4768  0024FC  1613               	andwf	__div_to_l_@f2+1,f,c
  4769  0024FE  0EFF               	movlw	255
  4770  002500  1614               	andwf	__div_to_l_@f2+2,f,c
  4771  002502  0E00               	movlw	0
  4772  002504  1615               	andwf	__div_to_l_@f2+3,f,c
  4773  002506  0E00               	movlw	0
  4774  002508  6E15               	movwf	__div_to_l_@quot,c
  4775  00250A  0E00               	movlw	0
  4776  00250C  6E16               	movwf	__div_to_l_@quot+1,c
  4777  00250E  0E00               	movlw	0
  4778  002510  6E17               	movwf	__div_to_l_@quot+2,c
  4779  002512  0E00               	movlw	0
  4780  002514  6E18               	movwf	__div_to_l_@quot+3,c
  4781  002516  0E7F               	movlw	127
  4782  002518  5E1A               	subwf	__div_to_l_@exp1,f,c
  4783  00251A  5019               	movf	__div_to_l_@cntr,w,c
  4784  00251C  0FA0               	addlw	160
  4785  00251E  5E1A               	subwf	__div_to_l_@exp1,f,c
  4786  002520  0E20               	movlw	32
  4787  002522  6E19               	movwf	__div_to_l_@cntr,c
  4788  002524  D000               	goto	l6366
  4789  002526                     l6366:
  4790  002526  90D8               	bcf	status,0,c
  4791  002528  3615               	rlcf	__div_to_l_@quot,f,c
  4792  00252A  3616               	rlcf	__div_to_l_@quot+1,f,c
  4793  00252C  3617               	rlcf	__div_to_l_@quot+2,f,c
  4794  00252E  3618               	rlcf	__div_to_l_@quot+3,f,c
  4795  002530  5012               	movf	__div_to_l_@f2,w,c
  4796  002532  5C0F               	subwf	__div_to_l_@f1,w,c
  4797  002534  5013               	movf	__div_to_l_@f2+1,w,c
  4798  002536  5810               	subwfb	__div_to_l_@f1+1,w,c
  4799  002538  5014               	movf	__div_to_l_@f2+2,w,c
  4800  00253A  5811               	subwfb	__div_to_l_@f1+2,w,c
  4801  00253C  5015               	movf	__div_to_l_@f2+3,w,c
  4802  00253E  5812               	subwfb	__div_to_l_@f1+3,w,c
  4803  002540  A0D8               	btfss	status,0,c
  4804  002542  D00A               	goto	l6374
  4805  002544  5012               	movf	__div_to_l_@f2,w,c
  4806  002546  5E0F               	subwf	__div_to_l_@f1,f,c
  4807  002548  5013               	movf	__div_to_l_@f2+1,w,c
  4808  00254A  5A10               	subwfb	__div_to_l_@f1+1,f,c
  4809  00254C  5014               	movf	__div_to_l_@f2+2,w,c
  4810  00254E  5A11               	subwfb	__div_to_l_@f1+2,f,c
  4811  002550  5015               	movf	__div_to_l_@f2+3,w,c
  4812  002552  5A12               	subwfb	__div_to_l_@f1+3,f,c
  4813  002554  8015               	bsf	__div_to_l_@quot,0,c
  4814  002556  D000               	goto	l6374
  4815  002558                     l6374:
  4816  002558  90D8               	bcf	status,0,c
  4817  00255A  360F               	rlcf	__div_to_l_@f1,f,c
  4818  00255C  3610               	rlcf	__div_to_l_@f1+1,f,c
  4819  00255E  3611               	rlcf	__div_to_l_@f1+2,f,c
  4820  002560  3612               	rlcf	__div_to_l_@f1+3,f,c
  4821  002562  2E19               	decfsz	__div_to_l_@cntr,f,c
  4822  002564  D7E0               	goto	l6366
  4823  002566  D000               	goto	l6378
  4824  002568                     l6378:
  4825  002568  AE1A               	btfss	__div_to_l_@exp1,7,c
  4826  00256A  D010               	goto	l6390
  4827  00256C  501A               	movf	__div_to_l_@exp1,w,c
  4828  00256E  0A80               	xorlw	128
  4829  002570  0F9F               	addlw	159
  4830  002572  B0D8               	btfsc	status,0,c
  4831  002574  D003               	goto	l6386
  4832  002576  D00D               	goto	l6392
  4833  002578  D028               	goto	l967
  4834  00257A  D000               	goto	l6386
  4835  00257C                     l6386:
  4836  00257C  90D8               	bcf	status,0,c
  4837  00257E  3218               	rrcf	__div_to_l_@quot+3,f,c
  4838  002580  3217               	rrcf	__div_to_l_@quot+2,f,c
  4839  002582  3216               	rrcf	__div_to_l_@quot+1,f,c
  4840  002584  3215               	rrcf	__div_to_l_@quot,f,c
  4841  002586  3E1A               	incfsz	__div_to_l_@exp1,f,c
  4842  002588  D7F9               	goto	l6386
  4843  00258A  D017               	goto	l976
  4844  00258C                     l6390:
  4845  00258C  0E1F               	movlw	31
  4846  00258E  641A               	cpfsgt	__div_to_l_@exp1,c
  4847  002590  D011               	goto	l6398
  4848  002592                     l6392:
  4849  002592  0E00               	movlw	0
  4850  002594  6E0F               	movwf	?__div_to_l_,c
  4851  002596  0E00               	movlw	0
  4852  002598  6E10               	movwf	?__div_to_l_+1,c
  4853  00259A  0E00               	movlw	0
  4854  00259C  6E11               	movwf	?__div_to_l_+2,c
  4855  00259E  0E00               	movlw	0
  4856  0025A0  6E12               	movwf	?__div_to_l_+3,c
  4857  0025A2  D013               	goto	l967
  4858  0025A4  D007               	goto	l6398
  4859  0025A6                     l6396:
  4860  0025A6  90D8               	bcf	status,0,c
  4861  0025A8  3615               	rlcf	__div_to_l_@quot,f,c
  4862  0025AA  3616               	rlcf	__div_to_l_@quot+1,f,c
  4863  0025AC  3617               	rlcf	__div_to_l_@quot+2,f,c
  4864  0025AE  3618               	rlcf	__div_to_l_@quot+3,f,c
  4865  0025B0  061A               	decf	__div_to_l_@exp1,f,c
  4866  0025B2  D000               	goto	l6398
  4867  0025B4                     l6398:
  4868  0025B4  501A               	movf	__div_to_l_@exp1,w,c
  4869  0025B6  A4D8               	btfss	status,2,c
  4870  0025B8  D7F6               	goto	l6396
  4871  0025BA                     l976:
  4872  0025BA  C015  F00F         	movff	__div_to_l_@quot,?__div_to_l_
  4873  0025BE  C016  F010         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4874  0025C2  C017  F011         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4875  0025C6  C018  F012         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4876  0025CA                     l967:
  4877  0025CA  0012               	return		;funcret
  4878  0025CC                     __end_of__div_to_l_:
  4879                           	opt stack 0
  4880                           tblptru	equ	0xFF8
  4881                           tblptrh	equ	0xFF7
  4882                           tblptrl	equ	0xFF6
  4883                           tablat	equ	0xFF5
  4884                           prodh	equ	0xFF4
  4885                           prodl	equ	0xFF3
  4886                           intcon2	equ	0xFF1
  4887                           postinc0	equ	0xFEE
  4888                           wreg	equ	0xFE8
  4889                           postdec1	equ	0xFE5
  4890                           fsr1l	equ	0xFE1
  4891                           postinc2	equ	0xFDE
  4892                           postdec2	equ	0xFDD
  4893                           fsr2h	equ	0xFDA
  4894                           fsr2l	equ	0xFD9
  4895                           status	equ	0xFD8
  4896                           
  4897 ;; *************** function ___lltoft *****************
  4898 ;; Defined at:
  4899 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  4900 ;; Parameters:    Size  Location     Type
  4901 ;;  c               4   22[COMRAM] unsigned long 
  4902 ;; Auto vars:     Size  Location     Type
  4903 ;;  exp             1   30[COMRAM] unsigned char 
  4904 ;; Return value:  Size  Location     Type
  4905 ;;                  3   22[COMRAM] float 
  4906 ;; Registers used:
  4907 ;;		wreg, status,2, status,0, cstack
  4908 ;; Tracked objects:
  4909 ;;		On entry : 0/0
  4910 ;;		On exit  : 0/0
  4911 ;;		Unchanged: 0/0
  4912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4913 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4914 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4915 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4916 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4917 ;;Total ram usage:        9 bytes
  4918 ;; Hardware stack levels used:    1
  4919 ;; Hardware stack levels required when called:    3
  4920 ;; This function calls:
  4921 ;;		___ftpack
  4922 ;; This function is called by:
  4923 ;;		_printf
  4924 ;; This function uses a non-reentrant model
  4925 ;;
  4926                           
  4927                           	psect	text8
  4928  003536                     __ptext8:
  4929                           	opt stack 0
  4930  003536                     ___lltoft:
  4931                           	opt stack 26
  4932                           
  4933                           ;incstack = 0
  4934  003536  0E8E               	movlw	142
  4935  003538  6E1F               	movwf	___lltoft@exp,c
  4936  00353A  D007               	goto	l6500
  4937  00353C                     l6498:
  4938  00353C  90D8               	bcf	status,0,c
  4939  00353E  321A               	rrcf	___lltoft@c+3,f,c
  4940  003540  3219               	rrcf	___lltoft@c+2,f,c
  4941  003542  3218               	rrcf	___lltoft@c+1,f,c
  4942  003544  3217               	rrcf	___lltoft@c,f,c
  4943  003546  2A1F               	incf	___lltoft@exp,f,c
  4944  003548  D000               	goto	l6500
  4945  00354A                     l6500:
  4946  00354A  0E00               	movlw	0
  4947  00354C  1417               	andwf	___lltoft@c,w,c
  4948  00354E  6E1B               	movwf	??___lltoft& (0+255),c
  4949  003550  0E00               	movlw	0
  4950  003552  1418               	andwf	___lltoft@c+1,w,c
  4951  003554  6E1C               	movwf	(??___lltoft+1)& (0+255),c
  4952  003556  0E00               	movlw	0
  4953  003558  1419               	andwf	___lltoft@c+2,w,c
  4954  00355A  6E1D               	movwf	(??___lltoft+2)& (0+255),c
  4955  00355C  0EFF               	movlw	255
  4956  00355E  141A               	andwf	___lltoft@c+3,w,c
  4957  003560  6E1E               	movwf	(??___lltoft+3)& (0+255),c
  4958  003562  501B               	movf	??___lltoft,w,c
  4959  003564  101C               	iorwf	??___lltoft+1,w,c
  4960  003566  101D               	iorwf	??___lltoft+2,w,c
  4961  003568  101E               	iorwf	??___lltoft+3,w,c
  4962  00356A  A4D8               	btfss	status,2,c
  4963  00356C  D7E7               	goto	l6498
  4964  00356E  C017  F00F         	movff	___lltoft@c,___ftpack@arg
  4965  003572  C018  F010         	movff	___lltoft@c+1,___ftpack@arg+1
  4966  003576  C019  F011         	movff	___lltoft@c+2,___ftpack@arg+2
  4967  00357A  C01F  F012         	movff	___lltoft@exp,___ftpack@exp
  4968  00357E  0E00               	movlw	0
  4969  003580  6E13               	movwf	___ftpack@sign,c
  4970  003582  ECE3  F016         	call	___ftpack	;wreg free
  4971  003586  C00F  F017         	movff	?___ftpack,?___lltoft
  4972  00358A  C010  F018         	movff	?___ftpack+1,?___lltoft+1
  4973  00358E  C011  F019         	movff	?___ftpack+2,?___lltoft+2
  4974  003592  D000               	goto	l1202
  4975  003594                     l1202:
  4976  003594  0012               	return		;funcret
  4977  003596                     __end_of___lltoft:
  4978                           	opt stack 0
  4979                           tblptru	equ	0xFF8
  4980                           tblptrh	equ	0xFF7
  4981                           tblptrl	equ	0xFF6
  4982                           tablat	equ	0xFF5
  4983                           prodh	equ	0xFF4
  4984                           prodl	equ	0xFF3
  4985                           intcon2	equ	0xFF1
  4986                           postinc0	equ	0xFEE
  4987                           wreg	equ	0xFE8
  4988                           postdec1	equ	0xFE5
  4989                           fsr1l	equ	0xFE1
  4990                           postinc2	equ	0xFDE
  4991                           postdec2	equ	0xFDD
  4992                           fsr2h	equ	0xFDA
  4993                           fsr2l	equ	0xFD9
  4994                           status	equ	0xFD8
  4995                           
  4996 ;; *************** function ___llmod *****************
  4997 ;; Defined at:
  4998 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  4999 ;; Parameters:    Size  Location     Type
  5000 ;;  dividend        4   27[COMRAM] unsigned long 
  5001 ;;  divisor         4   31[COMRAM] unsigned long 
  5002 ;; Auto vars:     Size  Location     Type
  5003 ;;  counter         1   35[COMRAM] unsigned char 
  5004 ;; Return value:  Size  Location     Type
  5005 ;;                  4   27[COMRAM] unsigned long 
  5006 ;; Registers used:
  5007 ;;		wreg, status,2, status,0
  5008 ;; Tracked objects:
  5009 ;;		On entry : 0/0
  5010 ;;		On exit  : 0/0
  5011 ;;		Unchanged: 0/0
  5012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5013 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5014 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5016 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5017 ;;Total ram usage:        9 bytes
  5018 ;; Hardware stack levels used:    1
  5019 ;; Hardware stack levels required when called:    2
  5020 ;; This function calls:
  5021 ;;		Nothing
  5022 ;; This function is called by:
  5023 ;;		_printf
  5024 ;; This function uses a non-reentrant model
  5025 ;;
  5026                           
  5027                           	psect	text9
  5028  003388                     __ptext9:
  5029                           	opt stack 0
  5030  003388                     ___llmod:
  5031                           	opt stack 27
  5032                           
  5033                           ;incstack = 0
  5034  003388  5020               	movf	___llmod@divisor,w,c
  5035  00338A  1021               	iorwf	___llmod@divisor+1,w,c
  5036  00338C  1022               	iorwf	___llmod@divisor+2,w,c
  5037  00338E  1023               	iorwf	___llmod@divisor+3,w,c
  5038  003390  B4D8               	btfsc	status,2,c
  5039  003392  D029               	goto	l1182
  5040  003394  0E01               	movlw	1
  5041  003396  6E24               	movwf	___llmod@counter,c
  5042  003398  D007               	goto	l6486
  5043  00339A                     l6484:
  5044  00339A  90D8               	bcf	status,0,c
  5045  00339C  3620               	rlcf	___llmod@divisor,f,c
  5046  00339E  3621               	rlcf	___llmod@divisor+1,f,c
  5047  0033A0  3622               	rlcf	___llmod@divisor+2,f,c
  5048  0033A2  3623               	rlcf	___llmod@divisor+3,f,c
  5049  0033A4  2A24               	incf	___llmod@counter,f,c
  5050  0033A6  D000               	goto	l6486
  5051  0033A8                     l6486:
  5052  0033A8  BE23               	btfsc	___llmod@divisor+3,7,c
  5053  0033AA  D002               	goto	l6488
  5054  0033AC  D7F6               	goto	l6484
  5055  0033AE  D000               	goto	l6488
  5056  0033B0                     l6488:
  5057  0033B0  5020               	movf	___llmod@divisor,w,c
  5058  0033B2  5C1C               	subwf	___llmod@dividend,w,c
  5059  0033B4  5021               	movf	___llmod@divisor+1,w,c
  5060  0033B6  581D               	subwfb	___llmod@dividend+1,w,c
  5061  0033B8  5022               	movf	___llmod@divisor+2,w,c
  5062  0033BA  581E               	subwfb	___llmod@dividend+2,w,c
  5063  0033BC  5023               	movf	___llmod@divisor+3,w,c
  5064  0033BE  581F               	subwfb	___llmod@dividend+3,w,c
  5065  0033C0  A0D8               	btfss	status,0,c
  5066  0033C2  D009               	goto	l6492
  5067  0033C4  5020               	movf	___llmod@divisor,w,c
  5068  0033C6  5E1C               	subwf	___llmod@dividend,f,c
  5069  0033C8  5021               	movf	___llmod@divisor+1,w,c
  5070  0033CA  5A1D               	subwfb	___llmod@dividend+1,f,c
  5071  0033CC  5022               	movf	___llmod@divisor+2,w,c
  5072  0033CE  5A1E               	subwfb	___llmod@dividend+2,f,c
  5073  0033D0  5023               	movf	___llmod@divisor+3,w,c
  5074  0033D2  5A1F               	subwfb	___llmod@dividend+3,f,c
  5075  0033D4  D000               	goto	l6492
  5076  0033D6                     l6492:
  5077  0033D6  90D8               	bcf	status,0,c
  5078  0033D8  3223               	rrcf	___llmod@divisor+3,f,c
  5079  0033DA  3222               	rrcf	___llmod@divisor+2,f,c
  5080  0033DC  3221               	rrcf	___llmod@divisor+1,f,c
  5081  0033DE  3220               	rrcf	___llmod@divisor,f,c
  5082  0033E0  2E24               	decfsz	___llmod@counter,f,c
  5083  0033E2  D7E6               	goto	l6488
  5084  0033E4  D000               	goto	l1182
  5085  0033E6                     l1182:
  5086  0033E6  C01C  F01C         	movff	___llmod@dividend,?___llmod
  5087  0033EA  C01D  F01D         	movff	___llmod@dividend+1,?___llmod+1
  5088  0033EE  C01E  F01E         	movff	___llmod@dividend+2,?___llmod+2
  5089  0033F2  C01F  F01F         	movff	___llmod@dividend+3,?___llmod+3
  5090  0033F6  0012               	return		;funcret
  5091  0033F8                     __end_of___llmod:
  5092                           	opt stack 0
  5093                           tblptru	equ	0xFF8
  5094                           tblptrh	equ	0xFF7
  5095                           tblptrl	equ	0xFF6
  5096                           tablat	equ	0xFF5
  5097                           prodh	equ	0xFF4
  5098                           prodl	equ	0xFF3
  5099                           intcon2	equ	0xFF1
  5100                           postinc0	equ	0xFEE
  5101                           wreg	equ	0xFE8
  5102                           postdec1	equ	0xFE5
  5103                           fsr1l	equ	0xFE1
  5104                           postinc2	equ	0xFDE
  5105                           postdec2	equ	0xFDD
  5106                           fsr2h	equ	0xFDA
  5107                           fsr2l	equ	0xFD9
  5108                           status	equ	0xFD8
  5109                           
  5110 ;; *************** function ___lldiv *****************
  5111 ;; Defined at:
  5112 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  5113 ;; Parameters:    Size  Location     Type
  5114 ;;  dividend        4   14[COMRAM] unsigned long 
  5115 ;;  divisor         4   18[COMRAM] unsigned long 
  5116 ;; Auto vars:     Size  Location     Type
  5117 ;;  quotient        4   22[COMRAM] unsigned long 
  5118 ;;  counter         1   26[COMRAM] unsigned char 
  5119 ;; Return value:  Size  Location     Type
  5120 ;;                  4   14[COMRAM] unsigned long 
  5121 ;; Registers used:
  5122 ;;		wreg, status,2, status,0
  5123 ;; Tracked objects:
  5124 ;;		On entry : 0/0
  5125 ;;		On exit  : 0/0
  5126 ;;		Unchanged: 0/0
  5127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5128 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5129 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5131 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5132 ;;Total ram usage:       13 bytes
  5133 ;; Hardware stack levels used:    1
  5134 ;; Hardware stack levels required when called:    2
  5135 ;; This function calls:
  5136 ;;		Nothing
  5137 ;; This function is called by:
  5138 ;;		_printf
  5139 ;; This function uses a non-reentrant model
  5140 ;;
  5141                           
  5142                           	psect	text10
  5143  003062                     __ptext10:
  5144                           	opt stack 0
  5145  003062                     ___lldiv:
  5146                           	opt stack 27
  5147                           
  5148                           ;incstack = 0
  5149  003062  0E00               	movlw	0
  5150  003064  6E17               	movwf	___lldiv@quotient,c
  5151  003066  0E00               	movlw	0
  5152  003068  6E18               	movwf	___lldiv@quotient+1,c
  5153  00306A  0E00               	movlw	0
  5154  00306C  6E19               	movwf	___lldiv@quotient+2,c
  5155  00306E  0E00               	movlw	0
  5156  003070  6E1A               	movwf	___lldiv@quotient+3,c
  5157  003072  5013               	movf	___lldiv@divisor,w,c
  5158  003074  1014               	iorwf	___lldiv@divisor+1,w,c
  5159  003076  1015               	iorwf	___lldiv@divisor+2,w,c
  5160  003078  1016               	iorwf	___lldiv@divisor+3,w,c
  5161  00307A  B4D8               	btfsc	status,2,c
  5162  00307C  D02F               	goto	l1172
  5163  00307E  0E01               	movlw	1
  5164  003080  6E1B               	movwf	___lldiv@counter,c
  5165  003082  D007               	goto	l6466
  5166  003084                     l6464:
  5167  003084  90D8               	bcf	status,0,c
  5168  003086  3613               	rlcf	___lldiv@divisor,f,c
  5169  003088  3614               	rlcf	___lldiv@divisor+1,f,c
  5170  00308A  3615               	rlcf	___lldiv@divisor+2,f,c
  5171  00308C  3616               	rlcf	___lldiv@divisor+3,f,c
  5172  00308E  2A1B               	incf	___lldiv@counter,f,c
  5173  003090  D000               	goto	l6466
  5174  003092                     l6466:
  5175  003092  BE16               	btfsc	___lldiv@divisor+3,7,c
  5176  003094  D002               	goto	l6468
  5177  003096  D7F6               	goto	l6464
  5178  003098  D000               	goto	l6468
  5179  00309A                     l6468:
  5180  00309A  90D8               	bcf	status,0,c
  5181  00309C  3617               	rlcf	___lldiv@quotient,f,c
  5182  00309E  3618               	rlcf	___lldiv@quotient+1,f,c
  5183  0030A0  3619               	rlcf	___lldiv@quotient+2,f,c
  5184  0030A2  361A               	rlcf	___lldiv@quotient+3,f,c
  5185  0030A4  5013               	movf	___lldiv@divisor,w,c
  5186  0030A6  5C0F               	subwf	___lldiv@dividend,w,c
  5187  0030A8  5014               	movf	___lldiv@divisor+1,w,c
  5188  0030AA  5810               	subwfb	___lldiv@dividend+1,w,c
  5189  0030AC  5015               	movf	___lldiv@divisor+2,w,c
  5190  0030AE  5811               	subwfb	___lldiv@dividend+2,w,c
  5191  0030B0  5016               	movf	___lldiv@divisor+3,w,c
  5192  0030B2  5812               	subwfb	___lldiv@dividend+3,w,c
  5193  0030B4  A0D8               	btfss	status,0,c
  5194  0030B6  D00A               	goto	l6476
  5195  0030B8  5013               	movf	___lldiv@divisor,w,c
  5196  0030BA  5E0F               	subwf	___lldiv@dividend,f,c
  5197  0030BC  5014               	movf	___lldiv@divisor+1,w,c
  5198  0030BE  5A10               	subwfb	___lldiv@dividend+1,f,c
  5199  0030C0  5015               	movf	___lldiv@divisor+2,w,c
  5200  0030C2  5A11               	subwfb	___lldiv@dividend+2,f,c
  5201  0030C4  5016               	movf	___lldiv@divisor+3,w,c
  5202  0030C6  5A12               	subwfb	___lldiv@dividend+3,f,c
  5203  0030C8  8017               	bsf	___lldiv@quotient,0,c
  5204  0030CA  D000               	goto	l6476
  5205  0030CC                     l6476:
  5206  0030CC  90D8               	bcf	status,0,c
  5207  0030CE  3216               	rrcf	___lldiv@divisor+3,f,c
  5208  0030D0  3215               	rrcf	___lldiv@divisor+2,f,c
  5209  0030D2  3214               	rrcf	___lldiv@divisor+1,f,c
  5210  0030D4  3213               	rrcf	___lldiv@divisor,f,c
  5211  0030D6  2E1B               	decfsz	___lldiv@counter,f,c
  5212  0030D8  D7E0               	goto	l6468
  5213  0030DA  D000               	goto	l1172
  5214  0030DC                     l1172:
  5215  0030DC  C017  F00F         	movff	___lldiv@quotient,?___lldiv
  5216  0030E0  C018  F010         	movff	___lldiv@quotient+1,?___lldiv+1
  5217  0030E4  C019  F011         	movff	___lldiv@quotient+2,?___lldiv+2
  5218  0030E8  C01A  F012         	movff	___lldiv@quotient+3,?___lldiv+3
  5219  0030EC  0012               	return		;funcret
  5220  0030EE                     __end_of___lldiv:
  5221                           	opt stack 0
  5222                           tblptru	equ	0xFF8
  5223                           tblptrh	equ	0xFF7
  5224                           tblptrl	equ	0xFF6
  5225                           tablat	equ	0xFF5
  5226                           prodh	equ	0xFF4
  5227                           prodl	equ	0xFF3
  5228                           intcon2	equ	0xFF1
  5229                           postinc0	equ	0xFEE
  5230                           wreg	equ	0xFE8
  5231                           postdec1	equ	0xFE5
  5232                           fsr1l	equ	0xFE1
  5233                           postinc2	equ	0xFDE
  5234                           postdec2	equ	0xFDD
  5235                           fsr2h	equ	0xFDA
  5236                           fsr2l	equ	0xFD9
  5237                           status	equ	0xFD8
  5238                           
  5239 ;; *************** function ___fttol *****************
  5240 ;; Defined at:
  5241 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  5242 ;; Parameters:    Size  Location     Type
  5243 ;;  f1              3   56[COMRAM] float 
  5244 ;; Auto vars:     Size  Location     Type
  5245 ;;  lval            4   66[COMRAM] unsigned long 
  5246 ;;  exp1            1   70[COMRAM] unsigned char 
  5247 ;;  sign1           1   65[COMRAM] unsigned char 
  5248 ;; Return value:  Size  Location     Type
  5249 ;;                  4   56[COMRAM] long 
  5250 ;; Registers used:
  5251 ;;		wreg, status,2, status,0
  5252 ;; Tracked objects:
  5253 ;;		On entry : 0/0
  5254 ;;		On exit  : 0/0
  5255 ;;		Unchanged: 0/0
  5256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5257 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5258 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5259 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5260 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5261 ;;Total ram usage:       15 bytes
  5262 ;; Hardware stack levels used:    1
  5263 ;; Hardware stack levels required when called:    2
  5264 ;; This function calls:
  5265 ;;		Nothing
  5266 ;; This function is called by:
  5267 ;;		_printf
  5268 ;; This function uses a non-reentrant model
  5269 ;;
  5270                           
  5271                           	psect	text11
  5272  0028A4                     __ptext11:
  5273                           	opt stack 0
  5274  0028A4                     ___fttol:
  5275                           	opt stack 27
  5276                           
  5277                           ;incstack = 0
  5278  0028A4  C03B  F03D         	movff	___fttol@f1+2,??___fttol
  5279  0028A8  6A3E               	clrf	(??___fttol+1)& (0+255),c
  5280  0028AA  6A3F               	clrf	(??___fttol+2)& (0+255),c
  5281  0028AC  343A               	rlcf	___fttol@f1+1,w,c
  5282  0028AE  363D               	rlcf	??___fttol& (0+255),f,c
  5283  0028B0  E301               	bnc	u5951
  5284  0028B2  803E               	bsf	(??___fttol+1)& (0+255),0,c
  5285  0028B4                     u5951:
  5286  0028B4  503D               	movf	??___fttol,w,c
  5287  0028B6  6E47               	movwf	___fttol@exp1,c
  5288  0028B8  5047               	movf	___fttol@exp1,w,c
  5289  0028BA  A4D8               	btfss	status,2,c
  5290  0028BC  D002               	goto	l6418
  5291  0028BE  D039               	goto	l6442
  5292  0028C0  D063               	goto	l1133
  5293  0028C2                     l6418:
  5294  0028C2  0E17               	movlw	23
  5295  0028C4  6E3D               	movwf	??___fttol& (0+255),c
  5296  0028C6  C039  F03E         	movff	___fttol@f1,??___fttol+1
  5297  0028CA  C03A  F03F         	movff	___fttol@f1+1,??___fttol+2
  5298  0028CE  C03B  F040         	movff	___fttol@f1+2,??___fttol+3
  5299  0028D2  283D               	incf	??___fttol,w,c
  5300  0028D4  6E41               	movwf	(??___fttol+4)& (0+255),c
  5301  0028D6  D004               	goto	u5970
  5302  0028D8                     u5975:
  5303  0028D8  90D8               	bcf	status,0,c
  5304  0028DA  3240               	rrcf	??___fttol+3,f,c
  5305  0028DC  323F               	rrcf	??___fttol+2,f,c
  5306  0028DE  323E               	rrcf	??___fttol+1,f,c
  5307  0028E0                     u5970:
  5308  0028E0  2E41               	decfsz	(??___fttol+4)& (0+255),f,c
  5309  0028E2  D7FA               	goto	u5975
  5310  0028E4  503E               	movf	??___fttol+1,w,c
  5311  0028E6  6E42               	movwf	___fttol@sign1,c
  5312  0028E8  8E3A               	bsf	___fttol@f1+1,7,c
  5313  0028EA  0EFF               	movlw	255
  5314  0028EC  1639               	andwf	___fttol@f1,f,c
  5315  0028EE  0EFF               	movlw	255
  5316  0028F0  163A               	andwf	___fttol@f1+1,f,c
  5317  0028F2  0E00               	movlw	0
  5318  0028F4  163B               	andwf	___fttol@f1+2,f,c
  5319  0028F6  5039               	movf	___fttol@f1,w,c
  5320  0028F8  6E43               	movwf	___fttol@lval,c
  5321  0028FA  503A               	movf	___fttol@f1+1,w,c
  5322  0028FC  6E44               	movwf	___fttol@lval+1,c
  5323  0028FE  503B               	movf	___fttol@f1+2,w,c
  5324  002900  6E45               	movwf	___fttol@lval+2,c
  5325  002902  6A46               	clrf	___fttol@lval+3,c
  5326  002904  0E8E               	movlw	142
  5327  002906  5E47               	subwf	___fttol@exp1,f,c
  5328  002908  AE47               	btfss	___fttol@exp1,7,c
  5329  00290A  D010               	goto	l6440
  5330  00290C  5047               	movf	___fttol@exp1,w,c
  5331  00290E  0A80               	xorlw	128
  5332  002910  0F8F               	addlw	143
  5333  002912  B0D8               	btfsc	status,0,c
  5334  002914  D003               	goto	l6436
  5335  002916  D00D               	goto	l6442
  5336  002918  D037               	goto	l1133
  5337  00291A  D000               	goto	l6436
  5338  00291C                     l6436:
  5339  00291C  90D8               	bcf	status,0,c
  5340  00291E  3246               	rrcf	___fttol@lval+3,f,c
  5341  002920  3245               	rrcf	___fttol@lval+2,f,c
  5342  002922  3244               	rrcf	___fttol@lval+1,f,c
  5343  002924  3243               	rrcf	___fttol@lval,f,c
  5344  002926  3E47               	incfsz	___fttol@exp1,f,c
  5345  002928  D7F9               	goto	l6436
  5346  00292A  D019               	goto	l6450
  5347  00292C                     l6440:
  5348  00292C  0E17               	movlw	23
  5349  00292E  6447               	cpfsgt	___fttol@exp1,c
  5350  002930  D011               	goto	l6448
  5351  002932                     l6442:
  5352  002932  0E00               	movlw	0
  5353  002934  6E39               	movwf	?___fttol,c
  5354  002936  0E00               	movlw	0
  5355  002938  6E3A               	movwf	?___fttol+1,c
  5356  00293A  0E00               	movlw	0
  5357  00293C  6E3B               	movwf	?___fttol+2,c
  5358  00293E  0E00               	movlw	0
  5359  002940  6E3C               	movwf	?___fttol+3,c
  5360  002942  D022               	goto	l1133
  5361  002944  D007               	goto	l6448
  5362  002946                     l6446:
  5363  002946  90D8               	bcf	status,0,c
  5364  002948  3643               	rlcf	___fttol@lval,f,c
  5365  00294A  3644               	rlcf	___fttol@lval+1,f,c
  5366  00294C  3645               	rlcf	___fttol@lval+2,f,c
  5367  00294E  3646               	rlcf	___fttol@lval+3,f,c
  5368  002950  0647               	decf	___fttol@exp1,f,c
  5369  002952  D000               	goto	l6448
  5370  002954                     l6448:
  5371  002954  5047               	movf	___fttol@exp1,w,c
  5372  002956  B4D8               	btfsc	status,2,c
  5373  002958  D002               	goto	l6450
  5374  00295A  D7F5               	goto	l6446
  5375  00295C  D000               	goto	l6450
  5376  00295E                     l6450:
  5377  00295E  5042               	movf	___fttol@sign1,w,c
  5378  002960  B4D8               	btfsc	status,2,c
  5379  002962  D009               	goto	l6454
  5380  002964  1E46               	comf	___fttol@lval+3,f,c
  5381  002966  1E45               	comf	___fttol@lval+2,f,c
  5382  002968  1E44               	comf	___fttol@lval+1,f,c
  5383  00296A  6C43               	negf	___fttol@lval,c
  5384  00296C  0E00               	movlw	0
  5385  00296E  2244               	addwfc	___fttol@lval+1,f,c
  5386  002970  2245               	addwfc	___fttol@lval+2,f,c
  5387  002972  2246               	addwfc	___fttol@lval+3,f,c
  5388  002974  D000               	goto	l6454
  5389  002976                     l6454:
  5390  002976  C043  F039         	movff	___fttol@lval,?___fttol
  5391  00297A  C044  F03A         	movff	___fttol@lval+1,?___fttol+1
  5392  00297E  C045  F03B         	movff	___fttol@lval+2,?___fttol+2
  5393  002982  C046  F03C         	movff	___fttol@lval+3,?___fttol+3
  5394  002986  D000               	goto	l1133
  5395  002988                     l1133:
  5396  002988  0012               	return		;funcret
  5397  00298A                     __end_of___fttol:
  5398                           	opt stack 0
  5399                           tblptru	equ	0xFF8
  5400                           tblptrh	equ	0xFF7
  5401                           tblptrl	equ	0xFF6
  5402                           tablat	equ	0xFF5
  5403                           prodh	equ	0xFF4
  5404                           prodl	equ	0xFF3
  5405                           intcon2	equ	0xFF1
  5406                           postinc0	equ	0xFEE
  5407                           wreg	equ	0xFE8
  5408                           postdec1	equ	0xFE5
  5409                           fsr1l	equ	0xFE1
  5410                           postinc2	equ	0xFDE
  5411                           postdec2	equ	0xFDD
  5412                           fsr2h	equ	0xFDA
  5413                           fsr2l	equ	0xFD9
  5414                           status	equ	0xFD8
  5415                           
  5416 ;; *************** function ___ftsub *****************
  5417 ;; Defined at:
  5418 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  5419 ;; Parameters:    Size  Location     Type
  5420 ;;  f1              3   71[COMRAM] float 
  5421 ;;  f2              3   74[COMRAM] float 
  5422 ;; Auto vars:     Size  Location     Type
  5423 ;;		None
  5424 ;; Return value:  Size  Location     Type
  5425 ;;                  3   71[COMRAM] float 
  5426 ;; Registers used:
  5427 ;;		wreg, status,2, status,0, cstack
  5428 ;; Tracked objects:
  5429 ;;		On entry : 0/0
  5430 ;;		On exit  : 0/0
  5431 ;;		Unchanged: 0/0
  5432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5433 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5436 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5437 ;;Total ram usage:        6 bytes
  5438 ;; Hardware stack levels used:    1
  5439 ;; Hardware stack levels required when called:    4
  5440 ;; This function calls:
  5441 ;;		___ftadd
  5442 ;; This function is called by:
  5443 ;;		_printf
  5444 ;; This function uses a non-reentrant model
  5445 ;;
  5446                           
  5447                           	psect	text12
  5448  00377A                     __ptext12:
  5449                           	opt stack 0
  5450  00377A                     ___ftsub:
  5451                           	opt stack 25
  5452                           
  5453                           ;incstack = 0
  5454  00377A  504B               	movf	___ftsub@f2,w,c
  5455  00377C  104C               	iorwf	___ftsub@f2+1,w,c
  5456  00377E  104D               	iorwf	___ftsub@f2+2,w,c
  5457  003780  B4D8               	btfsc	status,2,c
  5458  003782  D007               	goto	l6404
  5459  003784  0E00               	movlw	0
  5460  003786  1A4B               	xorwf	___ftsub@f2,f,c
  5461  003788  0E00               	movlw	0
  5462  00378A  1A4C               	xorwf	___ftsub@f2+1,f,c
  5463  00378C  0E80               	movlw	128
  5464  00378E  1A4D               	xorwf	___ftsub@f2+2,f,c
  5465  003790  D000               	goto	l6404
  5466  003792                     l6404:
  5467  003792  C048  F03C         	movff	___ftsub@f1,___ftadd@f1
  5468  003796  C049  F03D         	movff	___ftsub@f1+1,___ftadd@f1+1
  5469  00379A  C04A  F03E         	movff	___ftsub@f1+2,___ftadd@f1+2
  5470  00379E  C04B  F03F         	movff	___ftsub@f2,___ftadd@f2
  5471  0037A2  C04C  F040         	movff	___ftsub@f2+1,___ftadd@f2+1
  5472  0037A6  C04D  F041         	movff	___ftsub@f2+2,___ftadd@f2+2
  5473  0037AA  EC8A  F00D         	call	___ftadd	;wreg free
  5474  0037AE  C03C  F048         	movff	?___ftadd,?___ftsub
  5475  0037B2  C03D  F049         	movff	?___ftadd+1,?___ftsub+1
  5476  0037B6  C03E  F04A         	movff	?___ftadd+2,?___ftsub+2
  5477  0037BA  D000               	goto	l1129
  5478  0037BC                     l1129:
  5479  0037BC  0012               	return		;funcret
  5480  0037BE                     __end_of___ftsub:
  5481                           	opt stack 0
  5482                           tblptru	equ	0xFF8
  5483                           tblptrh	equ	0xFF7
  5484                           tblptrl	equ	0xFF6
  5485                           tablat	equ	0xFF5
  5486                           prodh	equ	0xFF4
  5487                           prodl	equ	0xFF3
  5488                           intcon2	equ	0xFF1
  5489                           postinc0	equ	0xFEE
  5490                           wreg	equ	0xFE8
  5491                           postdec1	equ	0xFE5
  5492                           fsr1l	equ	0xFE1
  5493                           postinc2	equ	0xFDE
  5494                           postdec2	equ	0xFDD
  5495                           fsr2h	equ	0xFDA
  5496                           fsr2l	equ	0xFD9
  5497                           status	equ	0xFD8
  5498                           
  5499 ;; *************** function ___ftadd *****************
  5500 ;; Defined at:
  5501 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  5502 ;; Parameters:    Size  Location     Type
  5503 ;;  f1              3   59[COMRAM] float 
  5504 ;;  f2              3   62[COMRAM] float 
  5505 ;; Auto vars:     Size  Location     Type
  5506 ;;  exp1            1   70[COMRAM] unsigned char 
  5507 ;;  exp2            1   69[COMRAM] unsigned char 
  5508 ;;  sign            1   68[COMRAM] unsigned char 
  5509 ;; Return value:  Size  Location     Type
  5510 ;;                  3   59[COMRAM] float 
  5511 ;; Registers used:
  5512 ;;		wreg, status,2, status,0, cstack
  5513 ;; Tracked objects:
  5514 ;;		On entry : 0/0
  5515 ;;		On exit  : 0/0
  5516 ;;		Unchanged: 0/0
  5517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5518 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5519 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5520 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5521 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5522 ;;Total ram usage:       12 bytes
  5523 ;; Hardware stack levels used:    1
  5524 ;; Hardware stack levels required when called:    3
  5525 ;; This function calls:
  5526 ;;		___ftpack
  5527 ;; This function is called by:
  5528 ;;		_printf
  5529 ;;		___ftsub
  5530 ;; This function uses a non-reentrant model
  5531 ;;
  5532                           
  5533                           	psect	text13
  5534  001B14                     __ptext13:
  5535                           	opt stack 0
  5536  001B14                     ___ftadd:
  5537                           	opt stack 25
  5538                           
  5539                           ;incstack = 0
  5540  001B14  C03E  F042         	movff	___ftadd@f1+2,??___ftadd
  5541  001B18  6A43               	clrf	(??___ftadd+1)& (0+255),c
  5542  001B1A  6A44               	clrf	(??___ftadd+2)& (0+255),c
  5543  001B1C  343D               	rlcf	___ftadd@f1+1,w,c
  5544  001B1E  3642               	rlcf	??___ftadd& (0+255),f,c
  5545  001B20  E301               	bnc	u5361
  5546  001B22  8043               	bsf	(??___ftadd+1)& (0+255),0,c
  5547  001B24                     u5361:
  5548  001B24  5042               	movf	??___ftadd,w,c
  5549  001B26  6E47               	movwf	___ftadd@exp1,c
  5550  001B28  C041  F042         	movff	___ftadd@f2+2,??___ftadd
  5551  001B2C  6A43               	clrf	(??___ftadd+1)& (0+255),c
  5552  001B2E  6A44               	clrf	(??___ftadd+2)& (0+255),c
  5553  001B30  3440               	rlcf	___ftadd@f2+1,w,c
  5554  001B32  3642               	rlcf	??___ftadd& (0+255),f,c
  5555  001B34  E301               	bnc	u5371
  5556  001B36  8043               	bsf	(??___ftadd+1)& (0+255),0,c
  5557  001B38                     u5371:
  5558  001B38  5042               	movf	??___ftadd,w,c
  5559  001B3A  6E46               	movwf	___ftadd@exp2,c
  5560  001B3C  5047               	movf	___ftadd@exp1,w,c
  5561  001B3E  B4D8               	btfsc	status,2,c
  5562  001B40  D00B               	goto	l1048
  5563  001B42  5046               	movf	___ftadd@exp2,w,c
  5564  001B44  5C47               	subwf	___ftadd@exp1,w,c
  5565  001B46  B0D8               	btfsc	status,0,c
  5566  001B48  D00E               	goto	l6044
  5567  001B4A  5047               	movf	___ftadd@exp1,w,c
  5568  001B4C  0800               	sublw	0
  5569  001B4E  2446               	addwf	___ftadd@exp2,w,c
  5570  001B50  6E42               	movwf	??___ftadd& (0+255),c
  5571  001B52  0E18               	movlw	24
  5572  001B54  6442               	cpfsgt	??___ftadd,c
  5573  001B56  D007               	goto	l6044
  5574  001B58                     l1048:
  5575  001B58  C03F  F03C         	movff	___ftadd@f2,?___ftadd
  5576  001B5C  C040  F03D         	movff	___ftadd@f2+1,?___ftadd+1
  5577  001B60  C041  F03E         	movff	___ftadd@f2+2,?___ftadd+2
  5578  001B64  D0B8               	goto	l1049
  5579  001B66                     l6044:
  5580  001B66  5046               	movf	___ftadd@exp2,w,c
  5581  001B68  B4D8               	btfsc	status,2,c
  5582  001B6A  D00B               	goto	l1052
  5583  001B6C  5047               	movf	___ftadd@exp1,w,c
  5584  001B6E  5C46               	subwf	___ftadd@exp2,w,c
  5585  001B70  B0D8               	btfsc	status,0,c
  5586  001B72  D00E               	goto	l6050
  5587  001B74  5046               	movf	___ftadd@exp2,w,c
  5588  001B76  0800               	sublw	0
  5589  001B78  2447               	addwf	___ftadd@exp1,w,c
  5590  001B7A  6E42               	movwf	??___ftadd& (0+255),c
  5591  001B7C  0E18               	movlw	24
  5592  001B7E  6442               	cpfsgt	??___ftadd,c
  5593  001B80  D007               	goto	l6050
  5594  001B82                     l1052:
  5595  001B82  C03C  F03C         	movff	___ftadd@f1,?___ftadd
  5596  001B86  C03D  F03D         	movff	___ftadd@f1+1,?___ftadd+1
  5597  001B8A  C03E  F03E         	movff	___ftadd@f1+2,?___ftadd+2
  5598  001B8E  D0A3               	goto	l1049
  5599  001B90                     l6050:
  5600  001B90  0E06               	movlw	6
  5601  001B92  6E45               	movwf	___ftadd@sign,c
  5602  001B94  AE3E               	btfss	___ftadd@f1+2,7,c
  5603  001B96  D002               	goto	l6056
  5604  001B98  8E45               	bsf	___ftadd@sign,7,c
  5605  001B9A  D000               	goto	l6056
  5606  001B9C                     l6056:
  5607  001B9C  BE41               	btfsc	___ftadd@f2+2,7,c
  5608  001B9E  8C45               	bsf	___ftadd@sign,6,c
  5609  001BA0  8E3D               	bsf	___ftadd@f1+1,7,c
  5610  001BA2  0EFF               	movlw	255
  5611  001BA4  163C               	andwf	___ftadd@f1,f,c
  5612  001BA6  0EFF               	movlw	255
  5613  001BA8  163D               	andwf	___ftadd@f1+1,f,c
  5614  001BAA  0E00               	movlw	0
  5615  001BAC  163E               	andwf	___ftadd@f1+2,f,c
  5616  001BAE  8E40               	bsf	___ftadd@f2+1,7,c
  5617  001BB0  0EFF               	movlw	255
  5618  001BB2  163F               	andwf	___ftadd@f2,f,c
  5619  001BB4  0EFF               	movlw	255
  5620  001BB6  1640               	andwf	___ftadd@f2+1,f,c
  5621  001BB8  0E00               	movlw	0
  5622  001BBA  1641               	andwf	___ftadd@f2+2,f,c
  5623  001BBC  5046               	movf	___ftadd@exp2,w,c
  5624  001BBE  5C47               	subwf	___ftadd@exp1,w,c
  5625  001BC0  B0D8               	btfsc	status,0,c
  5626  001BC2  D01E               	goto	l6076
  5627  001BC4                     l6066:
  5628  001BC4  90D8               	bcf	status,0,c
  5629  001BC6  363F               	rlcf	___ftadd@f2,f,c
  5630  001BC8  3640               	rlcf	___ftadd@f2+1,f,c
  5631  001BCA  3641               	rlcf	___ftadd@f2+2,f,c
  5632  001BCC  0646               	decf	___ftadd@exp2,f,c
  5633  001BCE  5047               	movf	___ftadd@exp1,w,c
  5634  001BD0  1846               	xorwf	___ftadd@exp2,w,c
  5635  001BD2  B4D8               	btfsc	status,2,c
  5636  001BD4  D00F               	goto	l6074
  5637  001BD6  0645               	decf	___ftadd@sign,f,c
  5638  001BD8  C045  F042         	movff	___ftadd@sign,??___ftadd
  5639  001BDC  0E07               	movlw	7
  5640  001BDE  1642               	andwf	??___ftadd,f,c
  5641  001BE0  B4D8               	btfsc	status,2,c
  5642  001BE2  D008               	goto	l6074
  5643  001BE4  D7EF               	goto	l6066
  5644  001BE6  D006               	goto	l6074
  5645  001BE8                     l6072:
  5646  001BE8  90D8               	bcf	status,0,c
  5647  001BEA  323E               	rrcf	___ftadd@f1+2,f,c
  5648  001BEC  323D               	rrcf	___ftadd@f1+1,f,c
  5649  001BEE  323C               	rrcf	___ftadd@f1,f,c
  5650  001BF0  2A47               	incf	___ftadd@exp1,f,c
  5651  001BF2  D000               	goto	l6074
  5652  001BF4                     l6074:
  5653  001BF4  5046               	movf	___ftadd@exp2,w,c
  5654  001BF6  1847               	xorwf	___ftadd@exp1,w,c
  5655  001BF8  B4D8               	btfsc	status,2,c
  5656  001BFA  D024               	goto	l1063
  5657  001BFC  D7F5               	goto	l6072
  5658  001BFE  D022               	goto	l1063
  5659  001C00                     l6076:
  5660  001C00  5047               	movf	___ftadd@exp1,w,c
  5661  001C02  5C46               	subwf	___ftadd@exp2,w,c
  5662  001C04  B0D8               	btfsc	status,0,c
  5663  001C06  D01E               	goto	l1063
  5664  001C08                     l6078:
  5665  001C08  90D8               	bcf	status,0,c
  5666  001C0A  363C               	rlcf	___ftadd@f1,f,c
  5667  001C0C  363D               	rlcf	___ftadd@f1+1,f,c
  5668  001C0E  363E               	rlcf	___ftadd@f1+2,f,c
  5669  001C10  0647               	decf	___ftadd@exp1,f,c
  5670  001C12  5047               	movf	___ftadd@exp1,w,c
  5671  001C14  1846               	xorwf	___ftadd@exp2,w,c
  5672  001C16  B4D8               	btfsc	status,2,c
  5673  001C18  D00F               	goto	l6086
  5674  001C1A  0645               	decf	___ftadd@sign,f,c
  5675  001C1C  C045  F042         	movff	___ftadd@sign,??___ftadd
  5676  001C20  0E07               	movlw	7
  5677  001C22  1642               	andwf	??___ftadd,f,c
  5678  001C24  B4D8               	btfsc	status,2,c
  5679  001C26  D008               	goto	l6086
  5680  001C28  D7EF               	goto	l6078
  5681  001C2A  D006               	goto	l6086
  5682  001C2C                     l6084:
  5683  001C2C  90D8               	bcf	status,0,c
  5684  001C2E  3241               	rrcf	___ftadd@f2+2,f,c
  5685  001C30  3240               	rrcf	___ftadd@f2+1,f,c
  5686  001C32  323F               	rrcf	___ftadd@f2,f,c
  5687  001C34  2A46               	incf	___ftadd@exp2,f,c
  5688  001C36  D000               	goto	l6086
  5689  001C38                     l6086:
  5690  001C38  5046               	movf	___ftadd@exp2,w,c
  5691  001C3A  1847               	xorwf	___ftadd@exp1,w,c
  5692  001C3C  B4D8               	btfsc	status,2,c
  5693  001C3E  D002               	goto	l1063
  5694  001C40  D7F5               	goto	l6084
  5695  001C42  D000               	goto	l1063
  5696  001C44                     l1063:
  5697  001C44  AE45               	btfss	___ftadd@sign,7,c
  5698  001C46  D00C               	goto	l1072
  5699  001C48  0EFF               	movlw	255
  5700  001C4A  1A3C               	xorwf	___ftadd@f1,f,c
  5701  001C4C  0EFF               	movlw	255
  5702  001C4E  1A3D               	xorwf	___ftadd@f1+1,f,c
  5703  001C50  0EFF               	movlw	255
  5704  001C52  1A3E               	xorwf	___ftadd@f1+2,f,c
  5705  001C54  0E01               	movlw	1
  5706  001C56  263C               	addwf	___ftadd@f1,f,c
  5707  001C58  0E00               	movlw	0
  5708  001C5A  223D               	addwfc	___ftadd@f1+1,f,c
  5709  001C5C  0E00               	movlw	0
  5710  001C5E  223E               	addwfc	___ftadd@f1+2,f,c
  5711  001C60                     l1072:
  5712  001C60  AC45               	btfss	___ftadd@sign,6,c
  5713  001C62  D00D               	goto	l6092
  5714  001C64  0EFF               	movlw	255
  5715  001C66  1A3F               	xorwf	___ftadd@f2,f,c
  5716  001C68  0EFF               	movlw	255
  5717  001C6A  1A40               	xorwf	___ftadd@f2+1,f,c
  5718  001C6C  0EFF               	movlw	255
  5719  001C6E  1A41               	xorwf	___ftadd@f2+2,f,c
  5720  001C70  0E01               	movlw	1
  5721  001C72  263F               	addwf	___ftadd@f2,f,c
  5722  001C74  0E00               	movlw	0
  5723  001C76  2240               	addwfc	___ftadd@f2+1,f,c
  5724  001C78  0E00               	movlw	0
  5725  001C7A  2241               	addwfc	___ftadd@f2+2,f,c
  5726  001C7C  D000               	goto	l6092
  5727  001C7E                     l6092:
  5728  001C7E  0E00               	movlw	0
  5729  001C80  6E45               	movwf	___ftadd@sign,c
  5730  001C82  503C               	movf	___ftadd@f1,w,c
  5731  001C84  263F               	addwf	___ftadd@f2,f,c
  5732  001C86  503D               	movf	___ftadd@f1+1,w,c
  5733  001C88  2240               	addwfc	___ftadd@f2+1,f,c
  5734  001C8A  503E               	movf	___ftadd@f1+2,w,c
  5735  001C8C  2241               	addwfc	___ftadd@f2+2,f,c
  5736  001C8E  AE41               	btfss	___ftadd@f2+2,7,c
  5737  001C90  D00F               	goto	l6102
  5738  001C92  0EFF               	movlw	255
  5739  001C94  1A3F               	xorwf	___ftadd@f2,f,c
  5740  001C96  0EFF               	movlw	255
  5741  001C98  1A40               	xorwf	___ftadd@f2+1,f,c
  5742  001C9A  0EFF               	movlw	255
  5743  001C9C  1A41               	xorwf	___ftadd@f2+2,f,c
  5744  001C9E  0E01               	movlw	1
  5745  001CA0  263F               	addwf	___ftadd@f2,f,c
  5746  001CA2  0E00               	movlw	0
  5747  001CA4  2240               	addwfc	___ftadd@f2+1,f,c
  5748  001CA6  0E00               	movlw	0
  5749  001CA8  2241               	addwfc	___ftadd@f2+2,f,c
  5750  001CAA  0E01               	movlw	1
  5751  001CAC  6E45               	movwf	___ftadd@sign,c
  5752  001CAE  D000               	goto	l6102
  5753  001CB0                     l6102:
  5754  001CB0  C03F  F00F         	movff	___ftadd@f2,___ftpack@arg
  5755  001CB4  C040  F010         	movff	___ftadd@f2+1,___ftpack@arg+1
  5756  001CB8  C041  F011         	movff	___ftadd@f2+2,___ftpack@arg+2
  5757  001CBC  C047  F012         	movff	___ftadd@exp1,___ftpack@exp
  5758  001CC0  C045  F013         	movff	___ftadd@sign,___ftpack@sign
  5759  001CC4  ECE3  F016         	call	___ftpack	;wreg free
  5760  001CC8  C00F  F03C         	movff	?___ftpack,?___ftadd
  5761  001CCC  C010  F03D         	movff	?___ftpack+1,?___ftadd+1
  5762  001CD0  C011  F03E         	movff	?___ftpack+2,?___ftadd+2
  5763  001CD4  D000               	goto	l1049
  5764  001CD6                     l1049:
  5765  001CD6  0012               	return		;funcret
  5766  001CD8                     __end_of___ftadd:
  5767                           	opt stack 0
  5768                           tblptru	equ	0xFF8
  5769                           tblptrh	equ	0xFF7
  5770                           tblptrl	equ	0xFF6
  5771                           tablat	equ	0xFF5
  5772                           prodh	equ	0xFF4
  5773                           prodl	equ	0xFF3
  5774                           intcon2	equ	0xFF1
  5775                           postinc0	equ	0xFEE
  5776                           wreg	equ	0xFE8
  5777                           postdec1	equ	0xFE5
  5778                           fsr1l	equ	0xFE1
  5779                           postinc2	equ	0xFDE
  5780                           postdec2	equ	0xFDD
  5781                           fsr2h	equ	0xFDA
  5782                           fsr2l	equ	0xFD9
  5783                           status	equ	0xFD8
  5784                           
  5785 ;; *************** function ___ftneg *****************
  5786 ;; Defined at:
  5787 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
  5788 ;; Parameters:    Size  Location     Type
  5789 ;;  f1              3   14[COMRAM] float 
  5790 ;; Auto vars:     Size  Location     Type
  5791 ;;		None
  5792 ;; Return value:  Size  Location     Type
  5793 ;;                  3   14[COMRAM] float 
  5794 ;; Registers used:
  5795 ;;		wreg, status,2, status,0
  5796 ;; Tracked objects:
  5797 ;;		On entry : 0/0
  5798 ;;		On exit  : 0/0
  5799 ;;		Unchanged: 0/0
  5800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5801 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5804 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5805 ;;Total ram usage:        3 bytes
  5806 ;; Hardware stack levels used:    1
  5807 ;; Hardware stack levels required when called:    2
  5808 ;; This function calls:
  5809 ;;		Nothing
  5810 ;; This function is called by:
  5811 ;;		_printf
  5812 ;; This function uses a non-reentrant model
  5813 ;;
  5814                           
  5815                           	psect	text14
  5816  003ACE                     __ptext14:
  5817                           	opt stack 0
  5818  003ACE                     ___ftneg:
  5819                           	opt stack 27
  5820                           
  5821                           ;incstack = 0
  5822  003ACE  500F               	movf	___ftneg@f1,w,c
  5823  003AD0  1010               	iorwf	___ftneg@f1+1,w,c
  5824  003AD2  1011               	iorwf	___ftneg@f1+2,w,c
  5825  003AD4  B4D8               	btfsc	status,2,c
  5826  003AD6  D006               	goto	l1122
  5827  003AD8  0E00               	movlw	0
  5828  003ADA  1A0F               	xorwf	___ftneg@f1,f,c
  5829  003ADC  0E00               	movlw	0
  5830  003ADE  1A10               	xorwf	___ftneg@f1+1,f,c
  5831  003AE0  0E80               	movlw	128
  5832  003AE2  1A11               	xorwf	___ftneg@f1+2,f,c
  5833  003AE4                     l1122:
  5834  003AE4  C00F  F00F         	movff	___ftneg@f1,?___ftneg
  5835  003AE8  C010  F010         	movff	___ftneg@f1+1,?___ftneg+1
  5836  003AEC  C011  F011         	movff	___ftneg@f1+2,?___ftneg+2
  5837  003AF0  0012               	return		;funcret
  5838  003AF2                     __end_of___ftneg:
  5839                           	opt stack 0
  5840                           tblptru	equ	0xFF8
  5841                           tblptrh	equ	0xFF7
  5842                           tblptrl	equ	0xFF6
  5843                           tablat	equ	0xFF5
  5844                           prodh	equ	0xFF4
  5845                           prodl	equ	0xFF3
  5846                           intcon2	equ	0xFF1
  5847                           postinc0	equ	0xFEE
  5848                           wreg	equ	0xFE8
  5849                           postdec1	equ	0xFE5
  5850                           fsr1l	equ	0xFE1
  5851                           postinc2	equ	0xFDE
  5852                           postdec2	equ	0xFDD
  5853                           fsr2h	equ	0xFDA
  5854                           fsr2l	equ	0xFD9
  5855                           status	equ	0xFD8
  5856                           
  5857 ;; *************** function _init_IO *****************
  5858 ;; Defined at:
  5859 ;;		line 377 in file "Lab9pC.c"
  5860 ;; Parameters:    Size  Location     Type
  5861 ;;		None
  5862 ;; Auto vars:     Size  Location     Type
  5863 ;;		None
  5864 ;; Return value:  Size  Location     Type
  5865 ;;		None               void
  5866 ;; Registers used:
  5867 ;;		wreg, status,2
  5868 ;; Tracked objects:
  5869 ;;		On entry : 0/0
  5870 ;;		On exit  : 0/0
  5871 ;;		Unchanged: 0/0
  5872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5876 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5877 ;;Total ram usage:        0 bytes
  5878 ;; Hardware stack levels used:    1
  5879 ;; Hardware stack levels required when called:    2
  5880 ;; This function calls:
  5881 ;;		Nothing
  5882 ;; This function is called by:
  5883 ;;		_main
  5884 ;; This function uses a non-reentrant model
  5885 ;;
  5886                           
  5887                           	psect	text15
  5888  003B7E                     __ptext15:
  5889                           	opt stack 0
  5890  003B7E                     _init_IO:
  5891                           	opt stack 28
  5892                           
  5893                           ;Lab9pC.c: 379: TRISA = 0x01;
  5894                           
  5895                           ;incstack = 0
  5896  003B7E  0E01               	movlw	1
  5897  003B80  6E92               	movwf	3986,c	;volatile
  5898                           
  5899                           ;Lab9pC.c: 380: TRISB = 0x37;
  5900  003B82  0E37               	movlw	55
  5901  003B84  6E93               	movwf	3987,c	;volatile
  5902                           
  5903                           ;Lab9pC.c: 381: TRISC = 0x00;
  5904  003B86  0E00               	movlw	0
  5905  003B88  6E94               	movwf	3988,c	;volatile
  5906                           
  5907                           ;Lab9pC.c: 382: TRISD = 0x00;
  5908  003B8A  0E00               	movlw	0
  5909  003B8C  6E95               	movwf	3989,c	;volatile
  5910                           
  5911                           ;Lab9pC.c: 383: TRISE = 0x00;
  5912  003B8E  0E00               	movlw	0
  5913  003B90  6E96               	movwf	3990,c	;volatile
  5914  003B92  0012               	return		;funcret
  5915  003B94                     __end_of_init_IO:
  5916                           	opt stack 0
  5917                           tblptru	equ	0xFF8
  5918                           tblptrh	equ	0xFF7
  5919                           tblptrl	equ	0xFF6
  5920                           tablat	equ	0xFF5
  5921                           prodh	equ	0xFF4
  5922                           prodl	equ	0xFF3
  5923                           intcon2	equ	0xFF1
  5924                           postinc0	equ	0xFEE
  5925                           wreg	equ	0xFE8
  5926                           postdec1	equ	0xFE5
  5927                           fsr1l	equ	0xFE1
  5928                           postinc2	equ	0xFDE
  5929                           postdec2	equ	0xFDD
  5930                           fsr2h	equ	0xFDA
  5931                           fsr2l	equ	0xFD9
  5932                           status	equ	0xFD8
  5933                           
  5934 ;; *************** function _Night_Mode *****************
  5935 ;; Defined at:
  5936 ;;		line 560 in file "Lab9pC.c"
  5937 ;; Parameters:    Size  Location     Type
  5938 ;;		None
  5939 ;; Auto vars:     Size  Location     Type
  5940 ;;		None
  5941 ;; Return value:  Size  Location     Type
  5942 ;;		None               void
  5943 ;; Registers used:
  5944 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5945 ;; Tracked objects:
  5946 ;;		On entry : 0/0
  5947 ;;		On exit  : 0/0
  5948 ;;		Unchanged: 0/0
  5949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5954 ;;Total ram usage:        0 bytes
  5955 ;; Hardware stack levels used:    1
  5956 ;; Hardware stack levels required when called:   12
  5957 ;; This function calls:
  5958 ;;		_Set_EW
  5959 ;;		_Set_EW_LT
  5960 ;;		_Set_NS
  5961 ;;		_Set_NS_LT
  5962 ;;		_Wait_N_Seconds
  5963 ;; This function is called by:
  5964 ;;		_main
  5965 ;; This function uses a non-reentrant model
  5966 ;;
  5967                           
  5968                           	psect	text16
  5969  002E8C                     __ptext16:
  5970                           	opt stack 0
  5971  002E8C                     _Night_Mode:
  5972                           	opt stack 18
  5973                           
  5974                           ;Lab9pC.c: 562: MODE = 0;
  5975                           
  5976                           ;incstack = 0
  5977  002E8C  0E00               	movlw	0
  5978  002E8E  0100               	movlb	0	; () banked
  5979  002E90  6FB0               	movwf	(_MODE+1)& (0+255),b
  5980  002E92  0E00               	movlw	0
  5981  002E94  6FAF               	movwf	_MODE& (0+255),b
  5982                           
  5983                           ; BSR set to: 0
  5984                           ;Lab9pC.c: 563: PORTBbits.RB7 = 0;
  5985  002E96  9E81               	bcf	3969,7,c	;volatile
  5986                           
  5987                           ;Lab9pC.c: 564: Act_Mode_Txt[0] = 'N';
  5988  002E98  0E4E               	movlw	78
  5989  002E9A  0100               	movlb	0	; () banked
  5990  002E9C  6F9C               	movwf	_Act_Mode_Txt& (0+255),b
  5991                           
  5992                           ; BSR set to: 0
  5993                           ;Lab9pC.c: 566: Set_EW(1);
  5994  002E9E  0E01               	movlw	1
  5995  002EA0  EC45  F01C         	call	_Set_EW
  5996                           
  5997                           ;Lab9pC.c: 567: Set_EW_LT(1);
  5998  002EA4  0E01               	movlw	1
  5999  002EA6  EC23  F01C         	call	_Set_EW_LT
  6000                           
  6001                           ;Lab9pC.c: 568: Set_NS_LT(1);
  6002  002EAA  0E01               	movlw	1
  6003  002EAC  ECDF  F01B         	call	_Set_NS_LT
  6004                           
  6005                           ;Lab9pC.c: 569: Set_NS(2);
  6006  002EB0  0E02               	movlw	2
  6007  002EB2  EC01  F01C         	call	_Set_NS
  6008                           
  6009                           ;Lab9pC.c: 570: Wait_N_Seconds(5);
  6010  002EB6  0E05               	movlw	5
  6011  002EB8  EC67  F01C         	call	_Wait_N_Seconds
  6012                           
  6013                           ;Lab9pC.c: 572: Set_NS(3);
  6014  002EBC  0E03               	movlw	3
  6015  002EBE  EC01  F01C         	call	_Set_NS
  6016                           
  6017                           ;Lab9pC.c: 573: Wait_N_Seconds(3);
  6018  002EC2  0E03               	movlw	3
  6019  002EC4  EC67  F01C         	call	_Wait_N_Seconds
  6020                           
  6021                           ;Lab9pC.c: 574: Set_NS(1);
  6022  002EC8  0E01               	movlw	1
  6023  002ECA  EC01  F01C         	call	_Set_NS
  6024                           
  6025                           ;Lab9pC.c: 576: if (PORTBbits.RB5 == 1)
  6026  002ECE  AA81               	btfss	3969,5,c	;volatile
  6027  002ED0  D010               	goto	l6914
  6028                           
  6029                           ;Lab9pC.c: 577: {
  6030                           ;Lab9pC.c: 578: Set_EW_LT(2);
  6031  002ED2  0E02               	movlw	2
  6032  002ED4  EC23  F01C         	call	_Set_EW_LT
  6033                           
  6034                           ;Lab9pC.c: 579: Wait_N_Seconds(6);
  6035  002ED8  0E06               	movlw	6
  6036  002EDA  EC67  F01C         	call	_Wait_N_Seconds
  6037                           
  6038                           ;Lab9pC.c: 581: Set_EW_LT(3);
  6039  002EDE  0E03               	movlw	3
  6040  002EE0  EC23  F01C         	call	_Set_EW_LT
  6041                           
  6042                           ;Lab9pC.c: 582: Wait_N_Seconds(3);
  6043  002EE4  0E03               	movlw	3
  6044  002EE6  EC67  F01C         	call	_Wait_N_Seconds
  6045                           
  6046                           ;Lab9pC.c: 584: Set_EW_LT(1);
  6047  002EEA  0E01               	movlw	1
  6048  002EEC  EC23  F01C         	call	_Set_EW_LT
  6049  002EF0  D000               	goto	l6914
  6050  002EF2                     l6914:
  6051                           
  6052                           ;Lab9pC.c: 585: }
  6053                           ;Lab9pC.c: 587: Set_EW(2);
  6054  002EF2  0E02               	movlw	2
  6055  002EF4  EC45  F01C         	call	_Set_EW
  6056                           
  6057                           ;Lab9pC.c: 588: Wait_N_Seconds(7);
  6058  002EF8  0E07               	movlw	7
  6059  002EFA  EC67  F01C         	call	_Wait_N_Seconds
  6060                           
  6061                           ;Lab9pC.c: 590: Set_EW(3);
  6062  002EFE  0E03               	movlw	3
  6063  002F00  EC45  F01C         	call	_Set_EW
  6064                           
  6065                           ;Lab9pC.c: 591: Wait_N_Seconds(3);
  6066  002F04  0E03               	movlw	3
  6067  002F06  EC67  F01C         	call	_Wait_N_Seconds
  6068                           
  6069                           ;Lab9pC.c: 593: Set_EW(1);
  6070  002F0A  0E01               	movlw	1
  6071  002F0C  EC45  F01C         	call	_Set_EW
  6072                           
  6073                           ;Lab9pC.c: 595: if (PORTBbits.RB4 == 1)
  6074  002F10  A881               	btfss	3969,4,c	;volatile
  6075  002F12  D010               	goto	l487
  6076                           
  6077                           ;Lab9pC.c: 596: {
  6078                           ;Lab9pC.c: 597: Set_NS_LT(2);
  6079  002F14  0E02               	movlw	2
  6080  002F16  ECDF  F01B         	call	_Set_NS_LT
  6081                           
  6082                           ;Lab9pC.c: 598: Wait_N_Seconds(7);
  6083  002F1A  0E07               	movlw	7
  6084  002F1C  EC67  F01C         	call	_Wait_N_Seconds
  6085                           
  6086                           ;Lab9pC.c: 600: Set_NS_LT(3);
  6087  002F20  0E03               	movlw	3
  6088  002F22  ECDF  F01B         	call	_Set_NS_LT
  6089                           
  6090                           ;Lab9pC.c: 601: Wait_N_Seconds(3);
  6091  002F26  0E03               	movlw	3
  6092  002F28  EC67  F01C         	call	_Wait_N_Seconds
  6093                           
  6094                           ;Lab9pC.c: 603: Set_NS_LT(1);
  6095  002F2C  0E01               	movlw	1
  6096  002F2E  ECDF  F01B         	call	_Set_NS_LT
  6097  002F32  D000               	goto	l487
  6098  002F34                     l487:
  6099  002F34  0012               	return		;funcret
  6100  002F36                     __end_of_Night_Mode:
  6101                           	opt stack 0
  6102                           tblptru	equ	0xFF8
  6103                           tblptrh	equ	0xFF7
  6104                           tblptrl	equ	0xFF6
  6105                           tablat	equ	0xFF5
  6106                           prodh	equ	0xFF4
  6107                           prodl	equ	0xFF3
  6108                           intcon2	equ	0xFF1
  6109                           postinc0	equ	0xFEE
  6110                           wreg	equ	0xFE8
  6111                           postdec1	equ	0xFE5
  6112                           fsr1l	equ	0xFE1
  6113                           postinc2	equ	0xFDE
  6114                           postdec2	equ	0xFDD
  6115                           fsr2h	equ	0xFDA
  6116                           fsr2l	equ	0xFD9
  6117                           status	equ	0xFD8
  6118                           
  6119 ;; *************** function _Initialize_Screen *****************
  6120 ;; Defined at:
  6121 ;;		line 189 in file "Lab9pC.c"
  6122 ;; Parameters:    Size  Location     Type
  6123 ;;		None
  6124 ;; Auto vars:     Size  Location     Type
  6125 ;;		None
  6126 ;; Return value:  Size  Location     Type
  6127 ;;		None               void
  6128 ;; Registers used:
  6129 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6130 ;; Tracked objects:
  6131 ;;		On entry : 0/0
  6132 ;;		On exit  : 0/0
  6133 ;;		Unchanged: 0/0
  6134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6139 ;;Total ram usage:        0 bytes
  6140 ;; Hardware stack levels used:    1
  6141 ;; Hardware stack levels required when called:    9
  6142 ;; This function calls:
  6143 ;;		_LCD_Reset
  6144 ;;		_TFT_GreenTab_Initialize
  6145 ;;		_drawCircle
  6146 ;;		_drawRect
  6147 ;;		_drawtext
  6148 ;;		_fillCircle
  6149 ;;		_fillScreen
  6150 ;;		_strcpy
  6151 ;; This function is called by:
  6152 ;;		_main
  6153 ;; This function uses a non-reentrant model
  6154 ;;
  6155                           
  6156                           	psect	text17
  6157  00083E                     __ptext17:
  6158                           	opt stack 0
  6159  00083E                     _Initialize_Screen:
  6160                           	opt stack 21
  6161                           
  6162                           ;Lab9pC.c: 191: LCD_Reset();
  6163                           
  6164                           ;incstack = 0
  6165  00083E  ECE9  F01D         	call	_LCD_Reset	;wreg free
  6166                           
  6167                           ;Lab9pC.c: 192: TFT_GreenTab_Initialize();
  6168  000842  EC2B  F01D         	call	_TFT_GreenTab_Initialize	;wreg free
  6169                           
  6170                           ;Lab9pC.c: 193: fillScreen(0x0000);
  6171  000846  0E00               	movlw	0
  6172  000848  6E23               	movwf	fillScreen@color+1,c
  6173  00084A  0E00               	movlw	0
  6174  00084C  6E22               	movwf	fillScreen@color,c
  6175  00084E  EC8A  F01D         	call	_fillScreen	;wreg free
  6176                           
  6177                           ;Lab9pC.c: 196: txt = buffer;
  6178  000852  0EB8               	movlw	low _buffer
  6179  000854  6E5B               	movwf	_txt,c
  6180  000856  0E00               	movlw	high _buffer
  6181  000858  6E5C               	movwf	_txt+1,c
  6182                           
  6183                           ;Lab9pC.c: 197: strcpy(txt, "ECE3301L Fall 22-S3");
  6184  00085A  C05B  F00F         	movff	_txt,strcpy@to
  6185  00085E  C05C  F010         	movff	_txt+1,strcpy@to+1
  6186  000862  0E99               	movlw	low STR_1
  6187  000864  6E11               	movwf	strcpy@from,c
  6188  000866  0EFF               	movlw	high STR_1
  6189  000868  6E12               	movwf	strcpy@from+1,c
  6190  00086A  ECE4  F01C         	call	_strcpy	;wreg free
  6191                           
  6192                           ;Lab9pC.c: 198: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  6193  00086E  0E02               	movlw	2
  6194  000870  6E37               	movwf	drawtext@y,c
  6195  000872  C05B  F038         	movff	_txt,drawtext@_text
  6196  000876  C05C  F039         	movff	_txt+1,drawtext@_text+1
  6197  00087A  0EFF               	movlw	255
  6198  00087C  6E3B               	movwf	drawtext@color+1,c
  6199  00087E  683A               	setf	drawtext@color,c
  6200  000880  0E00               	movlw	0
  6201  000882  6E3D               	movwf	drawtext@bg+1,c
  6202  000884  0E00               	movlw	0
  6203  000886  6E3C               	movwf	drawtext@bg,c
  6204  000888  0E01               	movlw	1
  6205  00088A  6E3E               	movwf	drawtext@size,c
  6206  00088C  0E02               	movlw	2
  6207  00088E  EC36  F015         	call	_drawtext
  6208                           
  6209                           ;Lab9pC.c: 201: strcpy(txt, "Mode:");
  6210  000892  C05B  F00F         	movff	_txt,strcpy@to
  6211  000896  C05C  F010         	movff	_txt+1,strcpy@to+1
  6212  00089A  0EE1               	movlw	low STR_2
  6213  00089C  6E11               	movwf	strcpy@from,c
  6214  00089E  0EFF               	movlw	high STR_2
  6215  0008A0  6E12               	movwf	strcpy@from+1,c
  6216  0008A2  ECE4  F01C         	call	_strcpy	;wreg free
  6217                           
  6218                           ;Lab9pC.c: 202: drawtext(2, 10, txt, 0xFFFF, 0x0000, 1);
  6219  0008A6  0E0A               	movlw	10
  6220  0008A8  6E37               	movwf	drawtext@y,c
  6221  0008AA  C05B  F038         	movff	_txt,drawtext@_text
  6222  0008AE  C05C  F039         	movff	_txt+1,drawtext@_text+1
  6223  0008B2  0EFF               	movlw	255
  6224  0008B4  6E3B               	movwf	drawtext@color+1,c
  6225  0008B6  683A               	setf	drawtext@color,c
  6226  0008B8  0E00               	movlw	0
  6227  0008BA  6E3D               	movwf	drawtext@bg+1,c
  6228  0008BC  0E00               	movlw	0
  6229  0008BE  6E3C               	movwf	drawtext@bg,c
  6230  0008C0  0E01               	movlw	1
  6231  0008C2  6E3E               	movwf	drawtext@size,c
  6232  0008C4  0E02               	movlw	2
  6233  0008C6  EC36  F015         	call	_drawtext
  6234                           
  6235                           ;Lab9pC.c: 203: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  6236  0008CA  0E0A               	movlw	10
  6237  0008CC  6E37               	movwf	drawtext@y,c
  6238  0008CE  0E9C               	movlw	low _Act_Mode_Txt
  6239  0008D0  6E38               	movwf	drawtext@_text,c
  6240  0008D2  0E00               	movlw	high _Act_Mode_Txt
  6241  0008D4  6E39               	movwf	drawtext@_text+1,c
  6242  0008D6  0EFF               	movlw	255
  6243  0008D8  6E3B               	movwf	drawtext@color+1,c
  6244  0008DA  683A               	setf	drawtext@color,c
  6245  0008DC  0E00               	movlw	0
  6246  0008DE  6E3D               	movwf	drawtext@bg+1,c
  6247  0008E0  0E00               	movlw	0
  6248  0008E2  6E3C               	movwf	drawtext@bg,c
  6249  0008E4  0E01               	movlw	1
  6250  0008E6  6E3E               	movwf	drawtext@size,c
  6251  0008E8  0E23               	movlw	35
  6252  0008EA  EC36  F015         	call	_drawtext
  6253                           
  6254                           ;Lab9pC.c: 206: strcpy(txt, "FR:");
  6255  0008EE  C05B  F00F         	movff	_txt,strcpy@to
  6256  0008F2  C05C  F010         	movff	_txt+1,strcpy@to+1
  6257  0008F6  0EE7               	movlw	low STR_3
  6258  0008F8  6E11               	movwf	strcpy@from,c
  6259  0008FA  0EFF               	movlw	high STR_3
  6260  0008FC  6E12               	movwf	strcpy@from+1,c
  6261  0008FE  ECE4  F01C         	call	_strcpy	;wreg free
  6262                           
  6263                           ;Lab9pC.c: 207: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  6264  000902  0E0A               	movlw	10
  6265  000904  6E37               	movwf	drawtext@y,c
  6266  000906  C05B  F038         	movff	_txt,drawtext@_text
  6267  00090A  C05C  F039         	movff	_txt+1,drawtext@_text+1
  6268  00090E  0EFF               	movlw	255
  6269  000910  6E3B               	movwf	drawtext@color+1,c
  6270  000912  683A               	setf	drawtext@color,c
  6271  000914  0E00               	movlw	0
  6272  000916  6E3D               	movwf	drawtext@bg+1,c
  6273  000918  0E00               	movlw	0
  6274  00091A  6E3C               	movwf	drawtext@bg,c
  6275  00091C  0E01               	movlw	1
  6276  00091E  6E3E               	movwf	drawtext@size,c
  6277  000920  0E32               	movlw	50
  6278  000922  EC36  F015         	call	_drawtext
  6279                           
  6280                           ;Lab9pC.c: 208: drawtext(70, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  6281  000926  0E0A               	movlw	10
  6282  000928  6E37               	movwf	drawtext@y,c
  6283  00092A  0E9E               	movlw	low _FlashingR_Txt
  6284  00092C  6E38               	movwf	drawtext@_text,c
  6285  00092E  0E00               	movlw	high _FlashingR_Txt
  6286  000930  6E39               	movwf	drawtext@_text+1,c
  6287  000932  0EFF               	movlw	255
  6288  000934  6E3B               	movwf	drawtext@color+1,c
  6289  000936  683A               	setf	drawtext@color,c
  6290  000938  0E00               	movlw	0
  6291  00093A  6E3D               	movwf	drawtext@bg+1,c
  6292  00093C  0E00               	movlw	0
  6293  00093E  6E3C               	movwf	drawtext@bg,c
  6294  000940  0E01               	movlw	1
  6295  000942  6E3E               	movwf	drawtext@size,c
  6296  000944  0E46               	movlw	70
  6297  000946  EC36  F015         	call	_drawtext
  6298                           
  6299                           ;Lab9pC.c: 211: strcpy(txt, "FS:");
  6300  00094A  C05B  F00F         	movff	_txt,strcpy@to
  6301  00094E  C05C  F010         	movff	_txt+1,strcpy@to+1
  6302  000952  0EEB               	movlw	low STR_4
  6303  000954  6E11               	movwf	strcpy@from,c
  6304  000956  0EFF               	movlw	high STR_4
  6305  000958  6E12               	movwf	strcpy@from+1,c
  6306  00095A  ECE4  F01C         	call	_strcpy	;wreg free
  6307                           
  6308                           ;Lab9pC.c: 212: drawtext(80, 10, txt, 0xFFFF, 0x0000, 1);
  6309  00095E  0E0A               	movlw	10
  6310  000960  6E37               	movwf	drawtext@y,c
  6311  000962  C05B  F038         	movff	_txt,drawtext@_text
  6312  000966  C05C  F039         	movff	_txt+1,drawtext@_text+1
  6313  00096A  0EFF               	movlw	255
  6314  00096C  6E3B               	movwf	drawtext@color+1,c
  6315  00096E  683A               	setf	drawtext@color,c
  6316  000970  0E00               	movlw	0
  6317  000972  6E3D               	movwf	drawtext@bg+1,c
  6318  000974  0E00               	movlw	0
  6319  000976  6E3C               	movwf	drawtext@bg,c
  6320  000978  0E01               	movlw	1
  6321  00097A  6E3E               	movwf	drawtext@size,c
  6322  00097C  0E50               	movlw	80
  6323  00097E  EC36  F015         	call	_drawtext
  6324                           
  6325                           ;Lab9pC.c: 213: drawtext(100, 10, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  6326  000982  0E0A               	movlw	10
  6327  000984  6E37               	movwf	drawtext@y,c
  6328  000986  0EA0               	movlw	low _FlashingS_Txt
  6329  000988  6E38               	movwf	drawtext@_text,c
  6330  00098A  0E00               	movlw	high _FlashingS_Txt
  6331  00098C  6E39               	movwf	drawtext@_text+1,c
  6332  00098E  0EFF               	movlw	255
  6333  000990  6E3B               	movwf	drawtext@color+1,c
  6334  000992  683A               	setf	drawtext@color,c
  6335  000994  0E00               	movlw	0
  6336  000996  6E3D               	movwf	drawtext@bg+1,c
  6337  000998  0E00               	movlw	0
  6338  00099A  6E3C               	movwf	drawtext@bg,c
  6339  00099C  0E01               	movlw	1
  6340  00099E  6E3E               	movwf	drawtext@size,c
  6341  0009A0  0E64               	movlw	100
  6342  0009A2  EC36  F015         	call	_drawtext
  6343                           
  6344                           ;Lab9pC.c: 216: strcpy(txt, "*");
  6345  0009A6  C05B  F00F         	movff	_txt,strcpy@to
  6346  0009AA  C05C  F010         	movff	_txt+1,strcpy@to+1
  6347  0009AE  0EFC               	movlw	low STR_5
  6348  0009B0  6E11               	movwf	strcpy@from,c
  6349  0009B2  0EFF               	movlw	high STR_5
  6350  0009B4  6E12               	movwf	strcpy@from+1,c
  6351  0009B6  ECE4  F01C         	call	_strcpy	;wreg free
  6352                           
  6353                           ;Lab9pC.c: 217: drawtext(120, 10, txt, 0xFFFF, 0x0000, 1);
  6354  0009BA  0E0A               	movlw	10
  6355  0009BC  6E37               	movwf	drawtext@y,c
  6356  0009BE  C05B  F038         	movff	_txt,drawtext@_text
  6357  0009C2  C05C  F039         	movff	_txt+1,drawtext@_text+1
  6358  0009C6  0EFF               	movlw	255
  6359  0009C8  6E3B               	movwf	drawtext@color+1,c
  6360  0009CA  683A               	setf	drawtext@color,c
  6361  0009CC  0E00               	movlw	0
  6362  0009CE  6E3D               	movwf	drawtext@bg+1,c
  6363  0009D0  0E00               	movlw	0
  6364  0009D2  6E3C               	movwf	drawtext@bg,c
  6365  0009D4  0E01               	movlw	1
  6366  0009D6  6E3E               	movwf	drawtext@size,c
  6367  0009D8  0E78               	movlw	120
  6368  0009DA  EC36  F015         	call	_drawtext
  6369                           
  6370                           ;Lab9pC.c: 220: strcpy(txt, "EAST/WEST");
  6371  0009DE  C05B  F00F         	movff	_txt,strcpy@to
  6372  0009E2  C05C  F010         	movff	_txt+1,strcpy@to+1
  6373  0009E6  0EC9               	movlw	low STR_6
  6374  0009E8  6E11               	movwf	strcpy@from,c
  6375  0009EA  0EFF               	movlw	high STR_6
  6376  0009EC  6E12               	movwf	strcpy@from+1,c
  6377  0009EE  ECE4  F01C         	call	_strcpy	;wreg free
  6378                           
  6379                           ;Lab9pC.c: 221: drawtext (30, 20, txt, 0x07FF, 0x0000, 1);
  6380  0009F2  0E14               	movlw	20
  6381  0009F4  6E37               	movwf	drawtext@y,c
  6382  0009F6  C05B  F038         	movff	_txt,drawtext@_text
  6383  0009FA  C05C  F039         	movff	_txt+1,drawtext@_text+1
  6384  0009FE  0E07               	movlw	7
  6385  000A00  6E3B               	movwf	drawtext@color+1,c
  6386  000A02  683A               	setf	drawtext@color,c
  6387  000A04  0E00               	movlw	0
  6388  000A06  6E3D               	movwf	drawtext@bg+1,c
  6389  000A08  0E00               	movlw	0
  6390  000A0A  6E3C               	movwf	drawtext@bg,c
  6391  000A0C  0E01               	movlw	1
  6392  000A0E  6E3E               	movwf	drawtext@size,c
  6393  000A10  0E1E               	movlw	30
  6394  000A12  EC36  F015         	call	_drawtext
  6395                           
  6396                           ;Lab9pC.c: 222: drawRect (30, 20 + 15-8, 60, 18, 0x07FF);
  6397  000A16  0E00               	movlw	0
  6398  000A18  6E22               	movwf	drawRect@x+1,c
  6399  000A1A  0E1E               	movlw	30
  6400  000A1C  6E21               	movwf	drawRect@x,c
  6401  000A1E  0E00               	movlw	0
  6402  000A20  6E24               	movwf	drawRect@y+1,c
  6403  000A22  0E1B               	movlw	27
  6404  000A24  6E23               	movwf	drawRect@y,c
  6405  000A26  0E00               	movlw	0
  6406  000A28  6E26               	movwf	drawRect@w+1,c
  6407  000A2A  0E3C               	movlw	60
  6408  000A2C  6E25               	movwf	drawRect@w,c
  6409  000A2E  0E00               	movlw	0
  6410  000A30  6E28               	movwf	drawRect@h+1,c
  6411  000A32  0E12               	movlw	18
  6412  000A34  6E27               	movwf	drawRect@h,c
  6413  000A36  0E07               	movlw	7
  6414  000A38  6E2A               	movwf	drawRect@color+1,c
  6415  000A3A  6829               	setf	drawRect@color,c
  6416  000A3C  EC68  F01A         	call	_drawRect	;wreg free
  6417                           
  6418                           ;Lab9pC.c: 223: fillCircle(40, 20 + 15, 7, 0xF800);
  6419  000A40  0E00               	movlw	0
  6420  000A42  6E3A               	movwf	fillCircle@x0+1,c
  6421  000A44  0E28               	movlw	40
  6422  000A46  6E39               	movwf	fillCircle@x0,c
  6423  000A48  0E00               	movlw	0
  6424  000A4A  6E3C               	movwf	fillCircle@y0+1,c
  6425  000A4C  0E23               	movlw	35
  6426  000A4E  6E3B               	movwf	fillCircle@y0,c
  6427  000A50  0E00               	movlw	0
  6428  000A52  6E3E               	movwf	fillCircle@r+1,c
  6429  000A54  0E07               	movlw	7
  6430  000A56  6E3D               	movwf	fillCircle@r,c
  6431  000A58  0EF8               	movlw	248
  6432  000A5A  6E40               	movwf	fillCircle@color+1,c
  6433  000A5C  0E00               	movlw	0
  6434  000A5E  6E3F               	movwf	fillCircle@color,c
  6435  000A60  EC48  F01B         	call	_fillCircle	;wreg free
  6436                           
  6437                           ;Lab9pC.c: 224: drawCircle(60, 20 + 15, 7, 0xFFE0);
  6438  000A64  0E00               	movlw	0
  6439  000A66  6E1B               	movwf	drawCircle@x0+1,c
  6440  000A68  0E3C               	movlw	60
  6441  000A6A  6E1A               	movwf	drawCircle@x0,c
  6442  000A6C  0E00               	movlw	0
  6443  000A6E  6E1D               	movwf	drawCircle@y0+1,c
  6444  000A70  0E23               	movlw	35
  6445  000A72  6E1C               	movwf	drawCircle@y0,c
  6446  000A74  0E00               	movlw	0
  6447  000A76  6E1F               	movwf	drawCircle@r+1,c
  6448  000A78  0E07               	movlw	7
  6449  000A7A  6E1E               	movwf	drawCircle@r,c
  6450  000A7C  0EFF               	movlw	255
  6451  000A7E  6E21               	movwf	drawCircle@color+1,c
  6452  000A80  0EE0               	movlw	224
  6453  000A82  6E20               	movwf	drawCircle@color,c
  6454  000A84  EC6C  F00E         	call	_drawCircle	;wreg free
  6455                           
  6456                           ;Lab9pC.c: 225: drawCircle(80, 20 + 15, 7, 0x07E0);
  6457  000A88  0E00               	movlw	0
  6458  000A8A  6E1B               	movwf	drawCircle@x0+1,c
  6459  000A8C  0E50               	movlw	80
  6460  000A8E  6E1A               	movwf	drawCircle@x0,c
  6461  000A90  0E00               	movlw	0
  6462  000A92  6E1D               	movwf	drawCircle@y0+1,c
  6463  000A94  0E23               	movlw	35
  6464  000A96  6E1C               	movwf	drawCircle@y0,c
  6465  000A98  0E00               	movlw	0
  6466  000A9A  6E1F               	movwf	drawCircle@r+1,c
  6467  000A9C  0E07               	movlw	7
  6468  000A9E  6E1E               	movwf	drawCircle@r,c
  6469  000AA0  0E07               	movlw	7
  6470  000AA2  6E21               	movwf	drawCircle@color+1,c
  6471  000AA4  0EE0               	movlw	224
  6472  000AA6  6E20               	movwf	drawCircle@color,c
  6473  000AA8  EC6C  F00E         	call	_drawCircle	;wreg free
  6474                           
  6475                           ;Lab9pC.c: 226: drawtext (100, 20 + 10, EW_Count, 0x07FF, 0x0000, 2);
  6476  000AAC  0E1E               	movlw	30
  6477  000AAE  6E37               	movwf	drawtext@y,c
  6478  000AB0  0E8D               	movlw	low _EW_Count
  6479  000AB2  6E38               	movwf	drawtext@_text,c
  6480  000AB4  0E00               	movlw	high _EW_Count
  6481  000AB6  6E39               	movwf	drawtext@_text+1,c
  6482  000AB8  0E07               	movlw	7
  6483  000ABA  6E3B               	movwf	drawtext@color+1,c
  6484  000ABC  683A               	setf	drawtext@color,c
  6485  000ABE  0E00               	movlw	0
  6486  000AC0  6E3D               	movwf	drawtext@bg+1,c
  6487  000AC2  0E00               	movlw	0
  6488  000AC4  6E3C               	movwf	drawtext@bg,c
  6489  000AC6  0E02               	movlw	2
  6490  000AC8  6E3E               	movwf	drawtext@size,c
  6491  000ACA  0E64               	movlw	100
  6492  000ACC  EC36  F015         	call	_drawtext
  6493                           
  6494                           ;Lab9pC.c: 229: strcpy(txt, "E/W LT");
  6495  000AD0  C05B  F00F         	movff	_txt,strcpy@to
  6496  000AD4  C05C  F010         	movff	_txt+1,strcpy@to+1
  6497  000AD8  0EDA               	movlw	low STR_7
  6498  000ADA  6E11               	movwf	strcpy@from,c
  6499  000ADC  0EFF               	movlw	high STR_7
  6500  000ADE  6E12               	movwf	strcpy@from+1,c
  6501  000AE0  ECE4  F01C         	call	_strcpy	;wreg free
  6502                           
  6503                           ;Lab9pC.c: 230: drawtext (30, 50, txt, 0xFFFF, 0x0000, 1);
  6504  000AE4  0E32               	movlw	50
  6505  000AE6  6E37               	movwf	drawtext@y,c
  6506  000AE8  C05B  F038         	movff	_txt,drawtext@_text
  6507  000AEC  C05C  F039         	movff	_txt+1,drawtext@_text+1
  6508  000AF0  0EFF               	movlw	255
  6509  000AF2  6E3B               	movwf	drawtext@color+1,c
  6510  000AF4  683A               	setf	drawtext@color,c
  6511  000AF6  0E00               	movlw	0
  6512  000AF8  6E3D               	movwf	drawtext@bg+1,c
  6513  000AFA  0E00               	movlw	0
  6514  000AFC  6E3C               	movwf	drawtext@bg,c
  6515  000AFE  0E01               	movlw	1
  6516  000B00  6E3E               	movwf	drawtext@size,c
  6517  000B02  0E1E               	movlw	30
  6518  000B04  EC36  F015         	call	_drawtext
  6519                           
  6520                           ;Lab9pC.c: 231: drawRect (30, 50 + 15-8, 60, 18, 0xFFFF);
  6521  000B08  0E00               	movlw	0
  6522  000B0A  6E22               	movwf	drawRect@x+1,c
  6523  000B0C  0E1E               	movlw	30
  6524  000B0E  6E21               	movwf	drawRect@x,c
  6525  000B10  0E00               	movlw	0
  6526  000B12  6E24               	movwf	drawRect@y+1,c
  6527  000B14  0E39               	movlw	57
  6528  000B16  6E23               	movwf	drawRect@y,c
  6529  000B18  0E00               	movlw	0
  6530  000B1A  6E26               	movwf	drawRect@w+1,c
  6531  000B1C  0E3C               	movlw	60
  6532  000B1E  6E25               	movwf	drawRect@w,c
  6533  000B20  0E00               	movlw	0
  6534  000B22  6E28               	movwf	drawRect@h+1,c
  6535  000B24  0E12               	movlw	18
  6536  000B26  6E27               	movwf	drawRect@h,c
  6537  000B28  0EFF               	movlw	255
  6538  000B2A  6E2A               	movwf	drawRect@color+1,c
  6539  000B2C  6829               	setf	drawRect@color,c
  6540  000B2E  EC68  F01A         	call	_drawRect	;wreg free
  6541                           
  6542                           ;Lab9pC.c: 232: fillCircle(40, 50 + 15, 7, 0xF800);
  6543  000B32  0E00               	movlw	0
  6544  000B34  6E3A               	movwf	fillCircle@x0+1,c
  6545  000B36  0E28               	movlw	40
  6546  000B38  6E39               	movwf	fillCircle@x0,c
  6547  000B3A  0E00               	movlw	0
  6548  000B3C  6E3C               	movwf	fillCircle@y0+1,c
  6549  000B3E  0E41               	movlw	65
  6550  000B40  6E3B               	movwf	fillCircle@y0,c
  6551  000B42  0E00               	movlw	0
  6552  000B44  6E3E               	movwf	fillCircle@r+1,c
  6553  000B46  0E07               	movlw	7
  6554  000B48  6E3D               	movwf	fillCircle@r,c
  6555  000B4A  0EF8               	movlw	248
  6556  000B4C  6E40               	movwf	fillCircle@color+1,c
  6557  000B4E  0E00               	movlw	0
  6558  000B50  6E3F               	movwf	fillCircle@color,c
  6559  000B52  EC48  F01B         	call	_fillCircle	;wreg free
  6560                           
  6561                           ;Lab9pC.c: 233: drawCircle(60, 50 + 15, 7, 0xFFE0);
  6562  000B56  0E00               	movlw	0
  6563  000B58  6E1B               	movwf	drawCircle@x0+1,c
  6564  000B5A  0E3C               	movlw	60
  6565  000B5C  6E1A               	movwf	drawCircle@x0,c
  6566  000B5E  0E00               	movlw	0
  6567  000B60  6E1D               	movwf	drawCircle@y0+1,c
  6568  000B62  0E41               	movlw	65
  6569  000B64  6E1C               	movwf	drawCircle@y0,c
  6570  000B66  0E00               	movlw	0
  6571  000B68  6E1F               	movwf	drawCircle@r+1,c
  6572  000B6A  0E07               	movlw	7
  6573  000B6C  6E1E               	movwf	drawCircle@r,c
  6574  000B6E  0EFF               	movlw	255
  6575  000B70  6E21               	movwf	drawCircle@color+1,c
  6576  000B72  0EE0               	movlw	224
  6577  000B74  6E20               	movwf	drawCircle@color,c
  6578  000B76  EC6C  F00E         	call	_drawCircle	;wreg free
  6579                           
  6580                           ;Lab9pC.c: 234: drawCircle(80, 50 + 15, 7, 0x07E0);
  6581  000B7A  0E00               	movlw	0
  6582  000B7C  6E1B               	movwf	drawCircle@x0+1,c
  6583  000B7E  0E50               	movlw	80
  6584  000B80  6E1A               	movwf	drawCircle@x0,c
  6585  000B82  0E00               	movlw	0
  6586  000B84  6E1D               	movwf	drawCircle@y0+1,c
  6587  000B86  0E41               	movlw	65
  6588  000B88  6E1C               	movwf	drawCircle@y0,c
  6589  000B8A  0E00               	movlw	0
  6590  000B8C  6E1F               	movwf	drawCircle@r+1,c
  6591  000B8E  0E07               	movlw	7
  6592  000B90  6E1E               	movwf	drawCircle@r,c
  6593  000B92  0E07               	movlw	7
  6594  000B94  6E21               	movwf	drawCircle@color+1,c
  6595  000B96  0EE0               	movlw	224
  6596  000B98  6E20               	movwf	drawCircle@color,c
  6597  000B9A  EC6C  F00E         	call	_drawCircle	;wreg free
  6598                           
  6599                           ;Lab9pC.c: 235: drawtext (100, 50 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  6600  000B9E  0E3C               	movlw	60
  6601  000BA0  6E37               	movwf	drawtext@y,c
  6602  000BA2  0E8A               	movlw	low _EWLT_Count
  6603  000BA4  6E38               	movwf	drawtext@_text,c
  6604  000BA6  0E00               	movlw	high _EWLT_Count
  6605  000BA8  6E39               	movwf	drawtext@_text+1,c
  6606  000BAA  0EFF               	movlw	255
  6607  000BAC  6E3B               	movwf	drawtext@color+1,c
  6608  000BAE  683A               	setf	drawtext@color,c
  6609  000BB0  0E00               	movlw	0
  6610  000BB2  6E3D               	movwf	drawtext@bg+1,c
  6611  000BB4  0E00               	movlw	0
  6612  000BB6  6E3C               	movwf	drawtext@bg,c
  6613  000BB8  0E02               	movlw	2
  6614  000BBA  6E3E               	movwf	drawtext@size,c
  6615  000BBC  0E64               	movlw	100
  6616  000BBE  EC36  F015         	call	_drawtext
  6617                           
  6618                           ;Lab9pC.c: 238: strcpy(txt, "NORTH/SOUTH");
  6619  000BC2  C05B  F00F         	movff	_txt,strcpy@to
  6620  000BC6  C05C  F010         	movff	_txt+1,strcpy@to+1
  6621  000BCA  0EBD               	movlw	low STR_8
  6622  000BCC  6E11               	movwf	strcpy@from,c
  6623  000BCE  0EFF               	movlw	high STR_8
  6624  000BD0  6E12               	movwf	strcpy@from+1,c
  6625  000BD2  ECE4  F01C         	call	_strcpy	;wreg free
  6626                           
  6627                           ;Lab9pC.c: 239: drawtext (30, 80 , txt, 0x001F, 0x0000, 1);
  6628  000BD6  0E50               	movlw	80
  6629  000BD8  6E37               	movwf	drawtext@y,c
  6630  000BDA  C05B  F038         	movff	_txt,drawtext@_text
  6631  000BDE  C05C  F039         	movff	_txt+1,drawtext@_text+1
  6632  000BE2  0E00               	movlw	0
  6633  000BE4  6E3B               	movwf	drawtext@color+1,c
  6634  000BE6  0E1F               	movlw	31
  6635  000BE8  6E3A               	movwf	drawtext@color,c
  6636  000BEA  0E00               	movlw	0
  6637  000BEC  6E3D               	movwf	drawtext@bg+1,c
  6638  000BEE  0E00               	movlw	0
  6639  000BF0  6E3C               	movwf	drawtext@bg,c
  6640  000BF2  0E01               	movlw	1
  6641  000BF4  6E3E               	movwf	drawtext@size,c
  6642  000BF6  0E1E               	movlw	30
  6643  000BF8  EC36  F015         	call	_drawtext
  6644                           
  6645                           ;Lab9pC.c: 240: drawRect (30, 80 + 15-8, 60, 18, 0x001F);
  6646  000BFC  0E00               	movlw	0
  6647  000BFE  6E22               	movwf	drawRect@x+1,c
  6648  000C00  0E1E               	movlw	30
  6649  000C02  6E21               	movwf	drawRect@x,c
  6650  000C04  0E00               	movlw	0
  6651  000C06  6E24               	movwf	drawRect@y+1,c
  6652  000C08  0E57               	movlw	87
  6653  000C0A  6E23               	movwf	drawRect@y,c
  6654  000C0C  0E00               	movlw	0
  6655  000C0E  6E26               	movwf	drawRect@w+1,c
  6656  000C10  0E3C               	movlw	60
  6657  000C12  6E25               	movwf	drawRect@w,c
  6658  000C14  0E00               	movlw	0
  6659  000C16  6E28               	movwf	drawRect@h+1,c
  6660  000C18  0E12               	movlw	18
  6661  000C1A  6E27               	movwf	drawRect@h,c
  6662  000C1C  0E00               	movlw	0
  6663  000C1E  6E2A               	movwf	drawRect@color+1,c
  6664  000C20  0E1F               	movlw	31
  6665  000C22  6E29               	movwf	drawRect@color,c
  6666  000C24  EC68  F01A         	call	_drawRect	;wreg free
  6667                           
  6668                           ;Lab9pC.c: 241: drawCircle(40, 80 + 15 , 7, 0xF800);
  6669  000C28  0E00               	movlw	0
  6670  000C2A  6E1B               	movwf	drawCircle@x0+1,c
  6671  000C2C  0E28               	movlw	40
  6672  000C2E  6E1A               	movwf	drawCircle@x0,c
  6673  000C30  0E00               	movlw	0
  6674  000C32  6E1D               	movwf	drawCircle@y0+1,c
  6675  000C34  0E5F               	movlw	95
  6676  000C36  6E1C               	movwf	drawCircle@y0,c
  6677  000C38  0E00               	movlw	0
  6678  000C3A  6E1F               	movwf	drawCircle@r+1,c
  6679  000C3C  0E07               	movlw	7
  6680  000C3E  6E1E               	movwf	drawCircle@r,c
  6681  000C40  0EF8               	movlw	248
  6682  000C42  6E21               	movwf	drawCircle@color+1,c
  6683  000C44  0E00               	movlw	0
  6684  000C46  6E20               	movwf	drawCircle@color,c
  6685  000C48  EC6C  F00E         	call	_drawCircle	;wreg free
  6686                           
  6687                           ;Lab9pC.c: 242: drawCircle(60, 80 + 15 , 7, 0xFFE0);
  6688  000C4C  0E00               	movlw	0
  6689  000C4E  6E1B               	movwf	drawCircle@x0+1,c
  6690  000C50  0E3C               	movlw	60
  6691  000C52  6E1A               	movwf	drawCircle@x0,c
  6692  000C54  0E00               	movlw	0
  6693  000C56  6E1D               	movwf	drawCircle@y0+1,c
  6694  000C58  0E5F               	movlw	95
  6695  000C5A  6E1C               	movwf	drawCircle@y0,c
  6696  000C5C  0E00               	movlw	0
  6697  000C5E  6E1F               	movwf	drawCircle@r+1,c
  6698  000C60  0E07               	movlw	7
  6699  000C62  6E1E               	movwf	drawCircle@r,c
  6700  000C64  0EFF               	movlw	255
  6701  000C66  6E21               	movwf	drawCircle@color+1,c
  6702  000C68  0EE0               	movlw	224
  6703  000C6A  6E20               	movwf	drawCircle@color,c
  6704  000C6C  EC6C  F00E         	call	_drawCircle	;wreg free
  6705                           
  6706                           ;Lab9pC.c: 243: fillCircle(80, 80 + 15 , 7, 0x07E0);
  6707  000C70  0E00               	movlw	0
  6708  000C72  6E3A               	movwf	fillCircle@x0+1,c
  6709  000C74  0E50               	movlw	80
  6710  000C76  6E39               	movwf	fillCircle@x0,c
  6711  000C78  0E00               	movlw	0
  6712  000C7A  6E3C               	movwf	fillCircle@y0+1,c
  6713  000C7C  0E5F               	movlw	95
  6714  000C7E  6E3B               	movwf	fillCircle@y0,c
  6715  000C80  0E00               	movlw	0
  6716  000C82  6E3E               	movwf	fillCircle@r+1,c
  6717  000C84  0E07               	movlw	7
  6718  000C86  6E3D               	movwf	fillCircle@r,c
  6719  000C88  0E07               	movlw	7
  6720  000C8A  6E40               	movwf	fillCircle@color+1,c
  6721  000C8C  0EE0               	movlw	224
  6722  000C8E  6E3F               	movwf	fillCircle@color,c
  6723  000C90  EC48  F01B         	call	_fillCircle	;wreg free
  6724                           
  6725                           ;Lab9pC.c: 244: drawtext (100, 80 + 10, NS_Count, 0x001F, 0x0000, 2);
  6726  000C94  0E5A               	movlw	90
  6727  000C96  6E37               	movwf	drawtext@y,c
  6728  000C98  0E93               	movlw	low _NS_Count
  6729  000C9A  6E38               	movwf	drawtext@_text,c
  6730  000C9C  0E00               	movlw	high _NS_Count
  6731  000C9E  6E39               	movwf	drawtext@_text+1,c
  6732  000CA0  0E00               	movlw	0
  6733  000CA2  6E3B               	movwf	drawtext@color+1,c
  6734  000CA4  0E1F               	movlw	31
  6735  000CA6  6E3A               	movwf	drawtext@color,c
  6736  000CA8  0E00               	movlw	0
  6737  000CAA  6E3D               	movwf	drawtext@bg+1,c
  6738  000CAC  0E00               	movlw	0
  6739  000CAE  6E3C               	movwf	drawtext@bg,c
  6740  000CB0  0E02               	movlw	2
  6741  000CB2  6E3E               	movwf	drawtext@size,c
  6742  000CB4  0E64               	movlw	100
  6743  000CB6  EC36  F015         	call	_drawtext
  6744                           
  6745                           ;Lab9pC.c: 247: strcpy(txt, "N/S LT");
  6746  000CBA  C05B  F00F         	movff	_txt,strcpy@to
  6747  000CBE  C05C  F010         	movff	_txt+1,strcpy@to+1
  6748  000CC2  0ED3               	movlw	low STR_9
  6749  000CC4  6E11               	movwf	strcpy@from,c
  6750  000CC6  0EFF               	movlw	high STR_9
  6751  000CC8  6E12               	movwf	strcpy@from+1,c
  6752  000CCA  ECE4  F01C         	call	_strcpy	;wreg free
  6753                           
  6754                           ;Lab9pC.c: 248: drawtext (30, 110, txt, 0xF81F, 0x0000, 1);
  6755  000CCE  0E6E               	movlw	110
  6756  000CD0  6E37               	movwf	drawtext@y,c
  6757  000CD2  C05B  F038         	movff	_txt,drawtext@_text
  6758  000CD6  C05C  F039         	movff	_txt+1,drawtext@_text+1
  6759  000CDA  0EF8               	movlw	248
  6760  000CDC  6E3B               	movwf	drawtext@color+1,c
  6761  000CDE  0E1F               	movlw	31
  6762  000CE0  6E3A               	movwf	drawtext@color,c
  6763  000CE2  0E00               	movlw	0
  6764  000CE4  6E3D               	movwf	drawtext@bg+1,c
  6765  000CE6  0E00               	movlw	0
  6766  000CE8  6E3C               	movwf	drawtext@bg,c
  6767  000CEA  0E01               	movlw	1
  6768  000CEC  6E3E               	movwf	drawtext@size,c
  6769  000CEE  0E1E               	movlw	30
  6770  000CF0  EC36  F015         	call	_drawtext
  6771                           
  6772                           ;Lab9pC.c: 249: drawRect (30, 110 + 15-8, 60, 18, 0xF81F);
  6773  000CF4  0E00               	movlw	0
  6774  000CF6  6E22               	movwf	drawRect@x+1,c
  6775  000CF8  0E1E               	movlw	30
  6776  000CFA  6E21               	movwf	drawRect@x,c
  6777  000CFC  0E00               	movlw	0
  6778  000CFE  6E24               	movwf	drawRect@y+1,c
  6779  000D00  0E75               	movlw	117
  6780  000D02  6E23               	movwf	drawRect@y,c
  6781  000D04  0E00               	movlw	0
  6782  000D06  6E26               	movwf	drawRect@w+1,c
  6783  000D08  0E3C               	movlw	60
  6784  000D0A  6E25               	movwf	drawRect@w,c
  6785  000D0C  0E00               	movlw	0
  6786  000D0E  6E28               	movwf	drawRect@h+1,c
  6787  000D10  0E12               	movlw	18
  6788  000D12  6E27               	movwf	drawRect@h,c
  6789  000D14  0EF8               	movlw	248
  6790  000D16  6E2A               	movwf	drawRect@color+1,c
  6791  000D18  0E1F               	movlw	31
  6792  000D1A  6E29               	movwf	drawRect@color,c
  6793  000D1C  EC68  F01A         	call	_drawRect	;wreg free
  6794                           
  6795                           ;Lab9pC.c: 250: fillCircle(40, 110 + 15, 7, 0xF800);
  6796  000D20  0E00               	movlw	0
  6797  000D22  6E3A               	movwf	fillCircle@x0+1,c
  6798  000D24  0E28               	movlw	40
  6799  000D26  6E39               	movwf	fillCircle@x0,c
  6800  000D28  0E00               	movlw	0
  6801  000D2A  6E3C               	movwf	fillCircle@y0+1,c
  6802  000D2C  0E7D               	movlw	125
  6803  000D2E  6E3B               	movwf	fillCircle@y0,c
  6804  000D30  0E00               	movlw	0
  6805  000D32  6E3E               	movwf	fillCircle@r+1,c
  6806  000D34  0E07               	movlw	7
  6807  000D36  6E3D               	movwf	fillCircle@r,c
  6808  000D38  0EF8               	movlw	248
  6809  000D3A  6E40               	movwf	fillCircle@color+1,c
  6810  000D3C  0E00               	movlw	0
  6811  000D3E  6E3F               	movwf	fillCircle@color,c
  6812  000D40  EC48  F01B         	call	_fillCircle	;wreg free
  6813                           
  6814                           ;Lab9pC.c: 251: drawCircle(60, 110 + 15, 7, 0xFFE0);
  6815  000D44  0E00               	movlw	0
  6816  000D46  6E1B               	movwf	drawCircle@x0+1,c
  6817  000D48  0E3C               	movlw	60
  6818  000D4A  6E1A               	movwf	drawCircle@x0,c
  6819  000D4C  0E00               	movlw	0
  6820  000D4E  6E1D               	movwf	drawCircle@y0+1,c
  6821  000D50  0E7D               	movlw	125
  6822  000D52  6E1C               	movwf	drawCircle@y0,c
  6823  000D54  0E00               	movlw	0
  6824  000D56  6E1F               	movwf	drawCircle@r+1,c
  6825  000D58  0E07               	movlw	7
  6826  000D5A  6E1E               	movwf	drawCircle@r,c
  6827  000D5C  0EFF               	movlw	255
  6828  000D5E  6E21               	movwf	drawCircle@color+1,c
  6829  000D60  0EE0               	movlw	224
  6830  000D62  6E20               	movwf	drawCircle@color,c
  6831  000D64  EC6C  F00E         	call	_drawCircle	;wreg free
  6832                           
  6833                           ;Lab9pC.c: 252: drawCircle(80, 110 + 15, 7, 0x07E0);
  6834  000D68  0E00               	movlw	0
  6835  000D6A  6E1B               	movwf	drawCircle@x0+1,c
  6836  000D6C  0E50               	movlw	80
  6837  000D6E  6E1A               	movwf	drawCircle@x0,c
  6838  000D70  0E00               	movlw	0
  6839  000D72  6E1D               	movwf	drawCircle@y0+1,c
  6840  000D74  0E7D               	movlw	125
  6841  000D76  6E1C               	movwf	drawCircle@y0,c
  6842  000D78  0E00               	movlw	0
  6843  000D7A  6E1F               	movwf	drawCircle@r+1,c
  6844  000D7C  0E07               	movlw	7
  6845  000D7E  6E1E               	movwf	drawCircle@r,c
  6846  000D80  0E07               	movlw	7
  6847  000D82  6E21               	movwf	drawCircle@color+1,c
  6848  000D84  0EE0               	movlw	224
  6849  000D86  6E20               	movwf	drawCircle@color,c
  6850  000D88  EC6C  F00E         	call	_drawCircle	;wreg free
  6851                           
  6852                           ;Lab9pC.c: 253: drawtext (100, 110 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  6853  000D8C  0E78               	movlw	120
  6854  000D8E  6E37               	movwf	drawtext@y,c
  6855  000D90  0E90               	movlw	low _NSLT_Count
  6856  000D92  6E38               	movwf	drawtext@_text,c
  6857  000D94  0E00               	movlw	high _NSLT_Count
  6858  000D96  6E39               	movwf	drawtext@_text+1,c
  6859  000D98  0EF8               	movlw	248
  6860  000D9A  6E3B               	movwf	drawtext@color+1,c
  6861  000D9C  0E1F               	movlw	31
  6862  000D9E  6E3A               	movwf	drawtext@color,c
  6863  000DA0  0E00               	movlw	0
  6864  000DA2  6E3D               	movwf	drawtext@bg+1,c
  6865  000DA4  0E00               	movlw	0
  6866  000DA6  6E3C               	movwf	drawtext@bg,c
  6867  000DA8  0E02               	movlw	2
  6868  000DAA  6E3E               	movwf	drawtext@size,c
  6869  000DAC  0E64               	movlw	100
  6870  000DAE  EC36  F015         	call	_drawtext
  6871                           
  6872                           ;Lab9pC.c: 257: drawtext(2, 30, PED_EW_Count, 0x07FF, 0x0000, 2);
  6873  000DB2  0E1E               	movlw	30
  6874  000DB4  6E37               	movwf	drawtext@y,c
  6875  000DB6  0E96               	movlw	low _PED_EW_Count
  6876  000DB8  6E38               	movwf	drawtext@_text,c
  6877  000DBA  0E00               	movlw	high _PED_EW_Count
  6878  000DBC  6E39               	movwf	drawtext@_text+1,c
  6879  000DBE  0E07               	movlw	7
  6880  000DC0  6E3B               	movwf	drawtext@color+1,c
  6881  000DC2  683A               	setf	drawtext@color,c
  6882  000DC4  0E00               	movlw	0
  6883  000DC6  6E3D               	movwf	drawtext@bg+1,c
  6884  000DC8  0E00               	movlw	0
  6885  000DCA  6E3C               	movwf	drawtext@bg,c
  6886  000DCC  0E02               	movlw	2
  6887  000DCE  6E3E               	movwf	drawtext@size,c
  6888  000DD0  0E02               	movlw	2
  6889  000DD2  EC36  F015         	call	_drawtext
  6890                           
  6891                           ;Lab9pC.c: 258: strcpy(txt, "PEW");
  6892  000DD6  C05B  F00F         	movff	_txt,strcpy@to
  6893  000DDA  C05C  F010         	movff	_txt+1,strcpy@to+1
  6894  000DDE  0EF3               	movlw	low STR_10
  6895  000DE0  6E11               	movwf	strcpy@from,c
  6896  000DE2  0EFF               	movlw	high STR_10
  6897  000DE4  6E12               	movwf	strcpy@from+1,c
  6898  000DE6  ECE4  F01C         	call	_strcpy	;wreg free
  6899                           
  6900                           ;Lab9pC.c: 259: drawtext(3, 20, txt, 0x07FF, 0x0000, 1);
  6901  000DEA  0E14               	movlw	20
  6902  000DEC  6E37               	movwf	drawtext@y,c
  6903  000DEE  C05B  F038         	movff	_txt,drawtext@_text
  6904  000DF2  C05C  F039         	movff	_txt+1,drawtext@_text+1
  6905  000DF6  0E07               	movlw	7
  6906  000DF8  6E3B               	movwf	drawtext@color+1,c
  6907  000DFA  683A               	setf	drawtext@color,c
  6908  000DFC  0E00               	movlw	0
  6909  000DFE  6E3D               	movwf	drawtext@bg+1,c
  6910  000E00  0E00               	movlw	0
  6911  000E02  6E3C               	movwf	drawtext@bg,c
  6912  000E04  0E01               	movlw	1
  6913  000E06  6E3E               	movwf	drawtext@size,c
  6914  000E08  0E03               	movlw	3
  6915  000E0A  EC36  F015         	call	_drawtext
  6916                           
  6917                           ;Lab9pC.c: 262: strcpy(txt, "PNS");
  6918  000E0E  C05B  F00F         	movff	_txt,strcpy@to
  6919  000E12  C05C  F010         	movff	_txt+1,strcpy@to+1
  6920  000E16  0EEF               	movlw	low STR_11
  6921  000E18  6E11               	movwf	strcpy@from,c
  6922  000E1A  0EFF               	movlw	high STR_11
  6923  000E1C  6E12               	movwf	strcpy@from+1,c
  6924  000E1E  ECE4  F01C         	call	_strcpy	;wreg free
  6925                           
  6926                           ;Lab9pC.c: 263: drawtext(3, 80, txt, 0x001F, 0x0000, 1);
  6927  000E22  0E50               	movlw	80
  6928  000E24  6E37               	movwf	drawtext@y,c
  6929  000E26  C05B  F038         	movff	_txt,drawtext@_text
  6930  000E2A  C05C  F039         	movff	_txt+1,drawtext@_text+1
  6931  000E2E  0E00               	movlw	0
  6932  000E30  6E3B               	movwf	drawtext@color+1,c
  6933  000E32  0E1F               	movlw	31
  6934  000E34  6E3A               	movwf	drawtext@color,c
  6935  000E36  0E00               	movlw	0
  6936  000E38  6E3D               	movwf	drawtext@bg+1,c
  6937  000E3A  0E00               	movlw	0
  6938  000E3C  6E3C               	movwf	drawtext@bg,c
  6939  000E3E  0E01               	movlw	1
  6940  000E40  6E3E               	movwf	drawtext@size,c
  6941  000E42  0E03               	movlw	3
  6942  000E44  EC36  F015         	call	_drawtext
  6943                           
  6944                           ;Lab9pC.c: 264: drawtext(2, 90, PED_NS_Count, 0x001F, 0x0000, 2);
  6945  000E48  0E5A               	movlw	90
  6946  000E4A  6E37               	movwf	drawtext@y,c
  6947  000E4C  0E99               	movlw	low _PED_NS_Count
  6948  000E4E  6E38               	movwf	drawtext@_text,c
  6949  000E50  0E00               	movlw	high _PED_NS_Count
  6950  000E52  6E39               	movwf	drawtext@_text+1,c
  6951  000E54  0E00               	movlw	0
  6952  000E56  6E3B               	movwf	drawtext@color+1,c
  6953  000E58  0E1F               	movlw	31
  6954  000E5A  6E3A               	movwf	drawtext@color,c
  6955  000E5C  0E00               	movlw	0
  6956  000E5E  6E3D               	movwf	drawtext@bg+1,c
  6957  000E60  0E00               	movlw	0
  6958  000E62  6E3C               	movwf	drawtext@bg,c
  6959  000E64  0E02               	movlw	2
  6960  000E66  6E3E               	movwf	drawtext@size,c
  6961  000E68  0E02               	movlw	2
  6962  000E6A  EC36  F015         	call	_drawtext
  6963                           
  6964                           ;Lab9pC.c: 267: strcpy(txt, "EWP EWLT NSP NSLT MD");
  6965  000E6E  C05B  F00F         	movff	_txt,strcpy@to
  6966  000E72  C05C  F010         	movff	_txt+1,strcpy@to+1
  6967  000E76  0E84               	movlw	low STR_12
  6968  000E78  6E11               	movwf	strcpy@from,c
  6969  000E7A  0EFF               	movlw	high STR_12
  6970  000E7C  6E12               	movwf	strcpy@from+1,c
  6971  000E7E  ECE4  F01C         	call	_strcpy	;wreg free
  6972                           
  6973                           ;Lab9pC.c: 268: drawtext(1, 140, txt, 0xFFFF, 0x0000, 1);
  6974  000E82  0E8C               	movlw	140
  6975  000E84  6E37               	movwf	drawtext@y,c
  6976  000E86  C05B  F038         	movff	_txt,drawtext@_text
  6977  000E8A  C05C  F039         	movff	_txt+1,drawtext@_text+1
  6978  000E8E  0EFF               	movlw	255
  6979  000E90  6E3B               	movwf	drawtext@color+1,c
  6980  000E92  683A               	setf	drawtext@color,c
  6981  000E94  0E00               	movlw	0
  6982  000E96  6E3D               	movwf	drawtext@bg+1,c
  6983  000E98  0E00               	movlw	0
  6984  000E9A  6E3C               	movwf	drawtext@bg,c
  6985  000E9C  0E01               	movlw	1
  6986  000E9E  6E3E               	movwf	drawtext@size,c
  6987  000EA0  0E01               	movlw	1
  6988  000EA2  EC36  F015         	call	_drawtext
  6989                           
  6990                           ;Lab9pC.c: 269: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  6991  000EA6  0E95               	movlw	149
  6992  000EA8  6E37               	movwf	drawtext@y,c
  6993  000EAA  0EA4               	movlw	low _SW_EWPED_Txt
  6994  000EAC  6E38               	movwf	drawtext@_text,c
  6995  000EAE  0E00               	movlw	high _SW_EWPED_Txt
  6996  000EB0  6E39               	movwf	drawtext@_text+1,c
  6997  000EB2  0EFF               	movlw	255
  6998  000EB4  6E3B               	movwf	drawtext@color+1,c
  6999  000EB6  683A               	setf	drawtext@color,c
  7000  000EB8  0E00               	movlw	0
  7001  000EBA  6E3D               	movwf	drawtext@bg+1,c
  7002  000EBC  0E00               	movlw	0
  7003  000EBE  6E3C               	movwf	drawtext@bg,c
  7004  000EC0  0E01               	movlw	1
  7005  000EC2  6E3E               	movwf	drawtext@size,c
  7006  000EC4  0E06               	movlw	6
  7007  000EC6  EC36  F015         	call	_drawtext
  7008                           
  7009                           ;Lab9pC.c: 270: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  7010  000ECA  0E95               	movlw	149
  7011  000ECC  6E37               	movwf	drawtext@y,c
  7012  000ECE  0EA2               	movlw	low _SW_EWLT_Txt
  7013  000ED0  6E38               	movwf	drawtext@_text,c
  7014  000ED2  0E00               	movlw	high _SW_EWLT_Txt
  7015  000ED4  6E39               	movwf	drawtext@_text+1,c
  7016  000ED6  0EFF               	movlw	255
  7017  000ED8  6E3B               	movwf	drawtext@color+1,c
  7018  000EDA  683A               	setf	drawtext@color,c
  7019  000EDC  0E00               	movlw	0
  7020  000EDE  6E3D               	movwf	drawtext@bg+1,c
  7021  000EE0  0E00               	movlw	0
  7022  000EE2  6E3C               	movwf	drawtext@bg,c
  7023  000EE4  0E01               	movlw	1
  7024  000EE6  6E3E               	movwf	drawtext@size,c
  7025  000EE8  0E20               	movlw	32
  7026  000EEA  EC36  F015         	call	_drawtext
  7027                           
  7028                           ;Lab9pC.c: 271: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  7029  000EEE  0E95               	movlw	149
  7030  000EF0  6E37               	movwf	drawtext@y,c
  7031  000EF2  0EAA               	movlw	low _SW_NSPED_Txt
  7032  000EF4  6E38               	movwf	drawtext@_text,c
  7033  000EF6  0E00               	movlw	high _SW_NSPED_Txt
  7034  000EF8  6E39               	movwf	drawtext@_text+1,c
  7035  000EFA  0EFF               	movlw	255
  7036  000EFC  6E3B               	movwf	drawtext@color+1,c
  7037  000EFE  683A               	setf	drawtext@color,c
  7038  000F00  0E00               	movlw	0
  7039  000F02  6E3D               	movwf	drawtext@bg+1,c
  7040  000F04  0E00               	movlw	0
  7041  000F06  6E3C               	movwf	drawtext@bg,c
  7042  000F08  0E01               	movlw	1
  7043  000F0A  6E3E               	movwf	drawtext@size,c
  7044  000F0C  0E3A               	movlw	58
  7045  000F0E  EC36  F015         	call	_drawtext
  7046                           
  7047                           ;Lab9pC.c: 272: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  7048  000F12  0E95               	movlw	149
  7049  000F14  6E37               	movwf	drawtext@y,c
  7050  000F16  0EA8               	movlw	low _SW_NSLT_Txt
  7051  000F18  6E38               	movwf	drawtext@_text,c
  7052  000F1A  0E00               	movlw	high _SW_NSLT_Txt
  7053  000F1C  6E39               	movwf	drawtext@_text+1,c
  7054  000F1E  0EFF               	movlw	255
  7055  000F20  6E3B               	movwf	drawtext@color+1,c
  7056  000F22  683A               	setf	drawtext@color,c
  7057  000F24  0E00               	movlw	0
  7058  000F26  6E3D               	movwf	drawtext@bg+1,c
  7059  000F28  0E00               	movlw	0
  7060  000F2A  6E3C               	movwf	drawtext@bg,c
  7061  000F2C  0E01               	movlw	1
  7062  000F2E  6E3E               	movwf	drawtext@size,c
  7063  000F30  0E57               	movlw	87
  7064  000F32  EC36  F015         	call	_drawtext
  7065                           
  7066                           ;Lab9pC.c: 274: drawtext(112,140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  7067  000F36  0E95               	movlw	149
  7068  000F38  6E37               	movwf	drawtext@y,c
  7069  000F3A  0EA6               	movlw	low _SW_MODE_Txt
  7070  000F3C  6E38               	movwf	drawtext@_text,c
  7071  000F3E  0E00               	movlw	high _SW_MODE_Txt
  7072  000F40  6E39               	movwf	drawtext@_text+1,c
  7073  000F42  0EFF               	movlw	255
  7074  000F44  6E3B               	movwf	drawtext@color+1,c
  7075  000F46  683A               	setf	drawtext@color,c
  7076  000F48  0E00               	movlw	0
  7077  000F4A  6E3D               	movwf	drawtext@bg+1,c
  7078  000F4C  0E00               	movlw	0
  7079  000F4E  6E3C               	movwf	drawtext@bg,c
  7080  000F50  0E01               	movlw	1
  7081  000F52  6E3E               	movwf	drawtext@size,c
  7082  000F54  0E70               	movlw	112
  7083  000F56  EC36  F015         	call	_drawtext
  7084  000F5A  0012               	return		;funcret
  7085  000F5C                     __end_of_Initialize_Screen:
  7086                           	opt stack 0
  7087                           tblptru	equ	0xFF8
  7088                           tblptrh	equ	0xFF7
  7089                           tblptrl	equ	0xFF6
  7090                           tablat	equ	0xFF5
  7091                           prodh	equ	0xFF4
  7092                           prodl	equ	0xFF3
  7093                           intcon2	equ	0xFF1
  7094                           postinc0	equ	0xFEE
  7095                           wreg	equ	0xFE8
  7096                           postdec1	equ	0xFE5
  7097                           fsr1l	equ	0xFE1
  7098                           postinc2	equ	0xFDE
  7099                           postdec2	equ	0xFDD
  7100                           fsr2h	equ	0xFDA
  7101                           fsr2l	equ	0xFD9
  7102                           status	equ	0xFD8
  7103                           
  7104 ;; *************** function _fillScreen *****************
  7105 ;; Defined at:
  7106 ;;		line 652 in file "ST7735_TFT.c"
  7107 ;; Parameters:    Size  Location     Type
  7108 ;;  color           2   33[COMRAM] unsigned int 
  7109 ;; Auto vars:     Size  Location     Type
  7110 ;;		None
  7111 ;; Return value:  Size  Location     Type
  7112 ;;		None               void
  7113 ;; Registers used:
  7114 ;;		wreg, status,2, status,0, cstack
  7115 ;; Tracked objects:
  7116 ;;		On entry : 0/0
  7117 ;;		On exit  : 0/0
  7118 ;;		Unchanged: 0/0
  7119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7120 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7123 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7124 ;;Total ram usage:        2 bytes
  7125 ;; Hardware stack levels used:    1
  7126 ;; Hardware stack levels required when called:    6
  7127 ;; This function calls:
  7128 ;;		_fillRectangle
  7129 ;; This function is called by:
  7130 ;;		_Initialize_Screen
  7131 ;; This function uses a non-reentrant model
  7132 ;;
  7133                           
  7134                           	psect	text18
  7135  003B14                     __ptext18:
  7136                           	opt stack 0
  7137  003B14                     _fillScreen:
  7138                           	opt stack 23
  7139                           
  7140                           ;ST7735_TFT.c: 654: fillRectangle(0, 0, 128, 160, color);
  7141                           
  7142                           ;incstack = 0
  7143  003B14  0E00               	movlw	0
  7144  003B16  6E16               	movwf	fillRectangle@y,c
  7145  003B18  0E80               	movlw	128
  7146  003B1A  6E17               	movwf	fillRectangle@w,c
  7147  003B1C  0EA0               	movlw	160
  7148  003B1E  6E18               	movwf	fillRectangle@h,c
  7149  003B20  C022  F019         	movff	fillScreen@color,fillRectangle@color
  7150  003B24  C023  F01A         	movff	fillScreen@color+1,fillRectangle@color+1
  7151  003B28  0E00               	movlw	0
  7152  003B2A  ECA5  F015         	call	_fillRectangle
  7153  003B2E  0012               	return		;funcret
  7154  003B30                     __end_of_fillScreen:
  7155                           	opt stack 0
  7156                           tblptru	equ	0xFF8
  7157                           tblptrh	equ	0xFF7
  7158                           tblptrl	equ	0xFF6
  7159                           tablat	equ	0xFF5
  7160                           prodh	equ	0xFF4
  7161                           prodl	equ	0xFF3
  7162                           intcon2	equ	0xFF1
  7163                           postinc0	equ	0xFEE
  7164                           wreg	equ	0xFE8
  7165                           postdec1	equ	0xFE5
  7166                           fsr1l	equ	0xFE1
  7167                           postinc2	equ	0xFDE
  7168                           postdec2	equ	0xFDD
  7169                           fsr2h	equ	0xFDA
  7170                           fsr2l	equ	0xFD9
  7171                           status	equ	0xFD8
  7172                           
  7173 ;; *************** function _fillRectangle *****************
  7174 ;; Defined at:
  7175 ;;		line 536 in file "ST7735_TFT.c"
  7176 ;; Parameters:    Size  Location     Type
  7177 ;;  x               1    wreg     unsigned char 
  7178 ;;  y               1   21[COMRAM] unsigned char 
  7179 ;;  w               1   22[COMRAM] unsigned char 
  7180 ;;  h               1   23[COMRAM] unsigned char 
  7181 ;;  color           2   24[COMRAM] unsigned int 
  7182 ;; Auto vars:     Size  Location     Type
  7183 ;;  x               1   32[COMRAM] unsigned char 
  7184 ;;  lo              1   31[COMRAM] unsigned char 
  7185 ;;  hi              1   30[COMRAM] unsigned char 
  7186 ;; Return value:  Size  Location     Type
  7187 ;;		None               void
  7188 ;; Registers used:
  7189 ;;		wreg, status,2, status,0, cstack
  7190 ;; Tracked objects:
  7191 ;;		On entry : 0/0
  7192 ;;		On exit  : 0/0
  7193 ;;		Unchanged: 0/0
  7194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7195 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7196 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7197 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7198 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7199 ;;Total ram usage:       12 bytes
  7200 ;; Hardware stack levels used:    1
  7201 ;; Hardware stack levels required when called:    5
  7202 ;; This function calls:
  7203 ;;		_setAddrWindow
  7204 ;;		_spiwrite
  7205 ;; This function is called by:
  7206 ;;		_fillScreen
  7207 ;; This function uses a non-reentrant model
  7208 ;;
  7209                           
  7210                           	psect	text19
  7211  002B4A                     __ptext19:
  7212                           	opt stack 0
  7213  002B4A                     _fillRectangle:
  7214                           	opt stack 23
  7215                           
  7216                           ;incstack = 0
  7217                           ;fillRectangle@x stored from wreg
  7218  002B4A  6E21               	movwf	fillRectangle@x,c
  7219                           
  7220                           ;ST7735_TFT.c: 538: unsigned char hi, lo;
  7221                           ;ST7735_TFT.c: 539: if((x >= 128) || (y >= 160))
  7222  002B4C  0E80               	movlw	128
  7223  002B4E  6021               	cpfslt	fillRectangle@x,c
  7224  002B50  D069               	goto	l244
  7225  002B52  0E9F               	movlw	159
  7226  002B54  6416               	cpfsgt	fillRectangle@y,c
  7227  002B56  D001               	goto	l4080
  7228                           
  7229                           ;ST7735_TFT.c: 540: return;
  7230  002B58  D065               	goto	l244
  7231  002B5A                     l4080:
  7232                           
  7233                           ;ST7735_TFT.c: 541: if((x + w - 1) >= 128)
  7234  002B5A  0EFF               	movlw	255
  7235  002B5C  6E1B               	movwf	??_fillRectangle& (0+255),c
  7236  002B5E  0EFF               	movlw	255
  7237  002B60  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  7238  002B62  5017               	movf	fillRectangle@w,w,c
  7239  002B64  C021  F01D         	movff	fillRectangle@x,??_fillRectangle+2
  7240  002B68  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  7241  002B6A  261D               	addwf	??_fillRectangle+2,f,c
  7242  002B6C  0E00               	movlw	0
  7243  002B6E  221E               	addwfc	??_fillRectangle+3,f,c
  7244  002B70  501B               	movf	??_fillRectangle,w,c
  7245  002B72  261D               	addwf	??_fillRectangle+2,f,c
  7246  002B74  501C               	movf	??_fillRectangle+1,w,c
  7247  002B76  221E               	addwfc	??_fillRectangle+3,f,c
  7248  002B78  BE1E               	btfsc	??_fillRectangle+3,7,c
  7249  002B7A  D00A               	goto	l245
  7250  002B7C  501E               	movf	??_fillRectangle+3,w,c
  7251  002B7E  E104               	bnz	u3180
  7252  002B80  0E80               	movlw	128
  7253  002B82  5C1D               	subwf	??_fillRectangle+2,w,c
  7254  002B84  A0D8               	btfss	status,0,c
  7255  002B86  D004               	goto	l245
  7256  002B88                     u3180:
  7257                           
  7258                           ;ST7735_TFT.c: 542: w = 128 - x;
  7259  002B88  5021               	movf	fillRectangle@x,w,c
  7260  002B8A  0800               	sublw	0
  7261  002B8C  0F80               	addlw	128
  7262  002B8E  6E17               	movwf	fillRectangle@w,c
  7263  002B90                     l245:
  7264                           
  7265                           ;ST7735_TFT.c: 543: if((y + h - 1) >= 160)
  7266  002B90  0EFF               	movlw	255
  7267  002B92  6E1B               	movwf	??_fillRectangle& (0+255),c
  7268  002B94  0EFF               	movlw	255
  7269  002B96  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  7270  002B98  5018               	movf	fillRectangle@h,w,c
  7271  002B9A  C016  F01D         	movff	fillRectangle@y,??_fillRectangle+2
  7272  002B9E  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  7273  002BA0  261D               	addwf	??_fillRectangle+2,f,c
  7274  002BA2  0E00               	movlw	0
  7275  002BA4  221E               	addwfc	??_fillRectangle+3,f,c
  7276  002BA6  501B               	movf	??_fillRectangle,w,c
  7277  002BA8  261D               	addwf	??_fillRectangle+2,f,c
  7278  002BAA  501C               	movf	??_fillRectangle+1,w,c
  7279  002BAC  221E               	addwfc	??_fillRectangle+3,f,c
  7280  002BAE  BE1E               	btfsc	??_fillRectangle+3,7,c
  7281  002BB0  D00B               	goto	l4086
  7282  002BB2  501E               	movf	??_fillRectangle+3,w,c
  7283  002BB4  E104               	bnz	u3190
  7284  002BB6  0EA0               	movlw	160
  7285  002BB8  5C1D               	subwf	??_fillRectangle+2,w,c
  7286  002BBA  A0D8               	btfss	status,0,c
  7287  002BBC  D005               	goto	l4086
  7288  002BBE                     u3190:
  7289                           
  7290                           ;ST7735_TFT.c: 544: h = 160 - y;
  7291  002BBE  5016               	movf	fillRectangle@y,w,c
  7292  002BC0  0800               	sublw	0
  7293  002BC2  0FA0               	addlw	160
  7294  002BC4  6E18               	movwf	fillRectangle@h,c
  7295  002BC6  D000               	goto	l4086
  7296  002BC8                     l4086:
  7297                           
  7298                           ;ST7735_TFT.c: 545: setAddrWindow(x, y, x+w-1, y+h-1);
  7299  002BC8  C016  F012         	movff	fillRectangle@y,setAddrWindow@y0
  7300  002BCC  5021               	movf	fillRectangle@x,w,c
  7301  002BCE  2417               	addwf	fillRectangle@w,w,c
  7302  002BD0  6E1B               	movwf	??_fillRectangle& (0+255),c
  7303  002BD2  041B               	decf	??_fillRectangle,w,c
  7304  002BD4  6E13               	movwf	setAddrWindow@x1,c
  7305  002BD6  5016               	movf	fillRectangle@y,w,c
  7306  002BD8  2418               	addwf	fillRectangle@h,w,c
  7307  002BDA  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  7308  002BDC  041C               	decf	??_fillRectangle+1,w,c
  7309  002BDE  6E14               	movwf	setAddrWindow@y1,c
  7310  002BE0  5021               	movf	fillRectangle@x,w,c
  7311  002BE2  EC71  F01B         	call	_setAddrWindow
  7312                           
  7313                           ;ST7735_TFT.c: 546: hi = color >> 8; lo = color;
  7314  002BE6  501A               	movf	fillRectangle@color+1,w,c
  7315  002BE8  6E1F               	movwf	fillRectangle@hi,c
  7316  002BEA  C019  F020         	movff	fillRectangle@color,fillRectangle@lo
  7317                           
  7318                           ;ST7735_TFT.c: 547: PORTCbits.RC0 = 1;
  7319  002BEE  8082               	bsf	3970,0,c	;volatile
  7320                           
  7321                           ;ST7735_TFT.c: 548: PORTCbits.RC1 = 0;
  7322  002BF0  9282               	bcf	3970,1,c	;volatile
  7323                           
  7324                           ;ST7735_TFT.c: 550: for(y=h; y>0; y--) {
  7325  002BF2  C018  F016         	movff	fillRectangle@h,fillRectangle@y
  7326  002BF6                     l4098:
  7327  002BF6  5016               	movf	fillRectangle@y,w,c
  7328  002BF8  B4D8               	btfsc	status,2,c
  7329  002BFA  D013               	goto	l248
  7330  002BFC  D001               	goto	l247
  7331  002BFE  D011               	goto	l248
  7332  002C00                     l247:
  7333                           
  7334                           ;ST7735_TFT.c: 551: for(x = w; x > 0; x--) {
  7335  002C00  C017  F021         	movff	fillRectangle@w,fillRectangle@x
  7336  002C04                     l4102:
  7337  002C04  5021               	movf	fillRectangle@x,w,c
  7338  002C06  B4D8               	btfsc	status,2,c
  7339  002C08  D00A               	goto	l4112
  7340  002C0A  D001               	goto	l4106
  7341  002C0C  D008               	goto	l4112
  7342  002C0E                     l4106:
  7343                           
  7344                           ;ST7735_TFT.c: 552: spiwrite(hi);
  7345  002C0E  501F               	movf	fillRectangle@hi,w,c
  7346  002C10  ECDF  F01D         	call	_spiwrite
  7347                           
  7348                           ;ST7735_TFT.c: 553: spiwrite(lo);
  7349  002C14  5020               	movf	fillRectangle@lo,w,c
  7350  002C16  ECDF  F01D         	call	_spiwrite
  7351  002C1A  0621               	decf	fillRectangle@x,f,c
  7352  002C1C  D7F3               	goto	l4102
  7353  002C1E                     l4112:
  7354  002C1E  0616               	decf	fillRectangle@y,f,c
  7355  002C20  D7EA               	goto	l4098
  7356  002C22                     l248:
  7357                           
  7358                           ;ST7735_TFT.c: 554: }
  7359                           ;ST7735_TFT.c: 555: }
  7360                           ;ST7735_TFT.c: 556: PORTCbits.RC1 = 1;
  7361  002C22  8282               	bsf	3970,1,c	;volatile
  7362  002C24                     l244:
  7363  002C24  0012               	return		;funcret
  7364  002C26                     __end_of_fillRectangle:
  7365                           	opt stack 0
  7366                           tblptru	equ	0xFF8
  7367                           tblptrh	equ	0xFF7
  7368                           tblptrl	equ	0xFF6
  7369                           tablat	equ	0xFF5
  7370                           prodh	equ	0xFF4
  7371                           prodl	equ	0xFF3
  7372                           intcon2	equ	0xFF1
  7373                           postinc0	equ	0xFEE
  7374                           wreg	equ	0xFE8
  7375                           postdec1	equ	0xFE5
  7376                           fsr1l	equ	0xFE1
  7377                           postinc2	equ	0xFDE
  7378                           postdec2	equ	0xFDD
  7379                           fsr2h	equ	0xFDA
  7380                           fsr2l	equ	0xFD9
  7381                           status	equ	0xFD8
  7382                           
  7383 ;; *************** function _drawRect *****************
  7384 ;; Defined at:
  7385 ;;		line 718 in file "ST7735_TFT.c"
  7386 ;; Parameters:    Size  Location     Type
  7387 ;;  x               2   32[COMRAM] unsigned int 
  7388 ;;  y               2   34[COMRAM] unsigned int 
  7389 ;;  w               2   36[COMRAM] unsigned int 
  7390 ;;  h               2   38[COMRAM] unsigned int 
  7391 ;;  color           2   40[COMRAM] unsigned int 
  7392 ;; Auto vars:     Size  Location     Type
  7393 ;;		None
  7394 ;; Return value:  Size  Location     Type
  7395 ;;		None               void
  7396 ;; Registers used:
  7397 ;;		wreg, status,2, status,0, cstack
  7398 ;; Tracked objects:
  7399 ;;		On entry : 0/0
  7400 ;;		On exit  : 0/0
  7401 ;;		Unchanged: 0/0
  7402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7403 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7405 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7406 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7407 ;;Total ram usage:       11 bytes
  7408 ;; Hardware stack levels used:    1
  7409 ;; Hardware stack levels required when called:    6
  7410 ;; This function calls:
  7411 ;;		_drawFastHLine
  7412 ;;		_drawFastVLine
  7413 ;; This function is called by:
  7414 ;;		_Initialize_Screen
  7415 ;; This function uses a non-reentrant model
  7416 ;;
  7417                           
  7418                           	psect	text20
  7419  0034D0                     __ptext20:
  7420                           	opt stack 0
  7421  0034D0                     _drawRect:
  7422                           	opt stack 23
  7423                           
  7424                           ;ST7735_TFT.c: 720: drawFastHLine(x, y, w, color);
  7425                           
  7426                           ;incstack = 0
  7427  0034D0  C023  F016         	movff	drawRect@y,drawFastHLine@y
  7428  0034D4  C025  F017         	movff	drawRect@w,drawFastHLine@w
  7429  0034D8  C029  F018         	movff	drawRect@color,drawFastHLine@color
  7430  0034DC  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  7431  0034E0  5021               	movf	drawRect@x,w,c
  7432  0034E2  EC77  F018         	call	_drawFastHLine
  7433                           
  7434                           ;ST7735_TFT.c: 721: drawFastHLine(x, y + h - 1, w, color);
  7435  0034E6  5023               	movf	drawRect@y,w,c
  7436  0034E8  2427               	addwf	drawRect@h,w,c
  7437  0034EA  6E2B               	movwf	??_drawRect& (0+255),c
  7438  0034EC  042B               	decf	??_drawRect,w,c
  7439  0034EE  6E16               	movwf	drawFastHLine@y,c
  7440  0034F0  C025  F017         	movff	drawRect@w,drawFastHLine@w
  7441  0034F4  C029  F018         	movff	drawRect@color,drawFastHLine@color
  7442  0034F8  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  7443  0034FC  5021               	movf	drawRect@x,w,c
  7444  0034FE  EC77  F018         	call	_drawFastHLine
  7445                           
  7446                           ;ST7735_TFT.c: 722: drawFastVLine(x, y, h, color);
  7447  003502  C023  F016         	movff	drawRect@y,drawFastVLine@y
  7448  003506  C027  F017         	movff	drawRect@h,drawFastVLine@h
  7449  00350A  C029  F018         	movff	drawRect@color,drawFastVLine@color
  7450  00350E  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  7451  003512  5021               	movf	drawRect@x,w,c
  7452  003514  ECBB  F018         	call	_drawFastVLine
  7453                           
  7454                           ;ST7735_TFT.c: 723: drawFastVLine(x + w - 1, y, h, color);
  7455  003518  C023  F016         	movff	drawRect@y,drawFastVLine@y
  7456  00351C  C027  F017         	movff	drawRect@h,drawFastVLine@h
  7457  003520  C029  F018         	movff	drawRect@color,drawFastVLine@color
  7458  003524  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  7459  003528  5021               	movf	drawRect@x,w,c
  7460  00352A  2425               	addwf	drawRect@w,w,c
  7461  00352C  6E2B               	movwf	??_drawRect& (0+255),c
  7462  00352E  042B               	decf	??_drawRect,w,c
  7463  003530  ECBB  F018         	call	_drawFastVLine
  7464  003534  0012               	return		;funcret
  7465  003536                     __end_of_drawRect:
  7466                           	opt stack 0
  7467                           tblptru	equ	0xFF8
  7468                           tblptrh	equ	0xFF7
  7469                           tblptrl	equ	0xFF6
  7470                           tablat	equ	0xFF5
  7471                           prodh	equ	0xFF4
  7472                           prodl	equ	0xFF3
  7473                           intcon2	equ	0xFF1
  7474                           postinc0	equ	0xFEE
  7475                           wreg	equ	0xFE8
  7476                           postdec1	equ	0xFE5
  7477                           fsr1l	equ	0xFE1
  7478                           postinc2	equ	0xFDE
  7479                           postdec2	equ	0xFDD
  7480                           fsr2h	equ	0xFDA
  7481                           fsr2l	equ	0xFD9
  7482                           status	equ	0xFD8
  7483                           
  7484 ;; *************** function _drawFastHLine *****************
  7485 ;; Defined at:
  7486 ;;		line 657 in file "ST7735_TFT.c"
  7487 ;; Parameters:    Size  Location     Type
  7488 ;;  x               1    wreg     unsigned char 
  7489 ;;  y               1   21[COMRAM] unsigned char 
  7490 ;;  w               1   22[COMRAM] unsigned char 
  7491 ;;  color           2   23[COMRAM] unsigned int 
  7492 ;; Auto vars:     Size  Location     Type
  7493 ;;  x               1   31[COMRAM] unsigned char 
  7494 ;;  lo              1   30[COMRAM] unsigned char 
  7495 ;;  hi              1   29[COMRAM] unsigned char 
  7496 ;; Return value:  Size  Location     Type
  7497 ;;		None               void
  7498 ;; Registers used:
  7499 ;;		wreg, status,2, status,0, cstack
  7500 ;; Tracked objects:
  7501 ;;		On entry : 0/0
  7502 ;;		On exit  : 0/0
  7503 ;;		Unchanged: 0/0
  7504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7505 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7506 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7507 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7508 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7509 ;;Total ram usage:       11 bytes
  7510 ;; Hardware stack levels used:    1
  7511 ;; Hardware stack levels required when called:    5
  7512 ;; This function calls:
  7513 ;;		_setAddrWindow
  7514 ;;		_spiwrite
  7515 ;; This function is called by:
  7516 ;;		_drawRect
  7517 ;; This function uses a non-reentrant model
  7518 ;;
  7519                           
  7520                           	psect	text21
  7521  0030EE                     __ptext21:
  7522                           	opt stack 0
  7523  0030EE                     _drawFastHLine:
  7524                           	opt stack 23
  7525                           
  7526                           ;incstack = 0
  7527                           ;drawFastHLine@x stored from wreg
  7528  0030EE  6E20               	movwf	drawFastHLine@x,c
  7529                           
  7530                           ;ST7735_TFT.c: 659: unsigned char hi, lo;
  7531                           ;ST7735_TFT.c: 660: if((x >= 128) || (y >= 160))
  7532  0030F0  0E80               	movlw	128
  7533  0030F2  6020               	cpfslt	drawFastHLine@x,c
  7534  0030F4  D03F               	goto	l289
  7535  0030F6  0E9F               	movlw	159
  7536  0030F8  6416               	cpfsgt	drawFastHLine@y,c
  7537  0030FA  D001               	goto	l4120
  7538                           
  7539                           ;ST7735_TFT.c: 661: return;
  7540  0030FC  D03B               	goto	l289
  7541  0030FE                     l4120:
  7542                           
  7543                           ;ST7735_TFT.c: 662: if((x + w - 1) >= 128)
  7544  0030FE  0EFF               	movlw	255
  7545  003100  6E1A               	movwf	??_drawFastHLine& (0+255),c
  7546  003102  0EFF               	movlw	255
  7547  003104  6E1B               	movwf	(??_drawFastHLine+1)& (0+255),c
  7548  003106  5017               	movf	drawFastHLine@w,w,c
  7549  003108  C020  F01C         	movff	drawFastHLine@x,??_drawFastHLine+2
  7550  00310C  6A1D               	clrf	(??_drawFastHLine+3)& (0+255),c
  7551  00310E  261C               	addwf	??_drawFastHLine+2,f,c
  7552  003110  0E00               	movlw	0
  7553  003112  221D               	addwfc	??_drawFastHLine+3,f,c
  7554  003114  501A               	movf	??_drawFastHLine,w,c
  7555  003116  261C               	addwf	??_drawFastHLine+2,f,c
  7556  003118  501B               	movf	??_drawFastHLine+1,w,c
  7557  00311A  221D               	addwfc	??_drawFastHLine+3,f,c
  7558  00311C  BE1D               	btfsc	??_drawFastHLine+3,7,c
  7559  00311E  D00B               	goto	l4124
  7560  003120  501D               	movf	??_drawFastHLine+3,w,c
  7561  003122  E104               	bnz	u3260
  7562  003124  0E80               	movlw	128
  7563  003126  5C1C               	subwf	??_drawFastHLine+2,w,c
  7564  003128  A0D8               	btfss	status,0,c
  7565  00312A  D005               	goto	l4124
  7566  00312C                     u3260:
  7567                           
  7568                           ;ST7735_TFT.c: 663: w = 128 - x;
  7569  00312C  5020               	movf	drawFastHLine@x,w,c
  7570  00312E  0800               	sublw	0
  7571  003130  0F80               	addlw	128
  7572  003132  6E17               	movwf	drawFastHLine@w,c
  7573  003134  D000               	goto	l4124
  7574  003136                     l4124:
  7575                           
  7576                           ;ST7735_TFT.c: 664: hi = color >> 8; lo = color;
  7577  003136  5019               	movf	drawFastHLine@color+1,w,c
  7578  003138  6E1E               	movwf	drawFastHLine@hi,c
  7579  00313A  C018  F01F         	movff	drawFastHLine@color,drawFastHLine@lo
  7580                           
  7581                           ;ST7735_TFT.c: 665: setAddrWindow(x, y, x + w - 1, y);
  7582  00313E  C016  F012         	movff	drawFastHLine@y,setAddrWindow@y0
  7583  003142  5020               	movf	drawFastHLine@x,w,c
  7584  003144  2417               	addwf	drawFastHLine@w,w,c
  7585  003146  6E1A               	movwf	??_drawFastHLine& (0+255),c
  7586  003148  041A               	decf	??_drawFastHLine,w,c
  7587  00314A  6E13               	movwf	setAddrWindow@x1,c
  7588  00314C  C016  F014         	movff	drawFastHLine@y,setAddrWindow@y1
  7589  003150  5020               	movf	drawFastHLine@x,w,c
  7590  003152  EC71  F01B         	call	_setAddrWindow
  7591                           
  7592                           ;ST7735_TFT.c: 666: PORTCbits.RC0 = 1;
  7593  003156  8082               	bsf	3970,0,c	;volatile
  7594                           
  7595                           ;ST7735_TFT.c: 667: PORTCbits.RC1 = 0;
  7596  003158  9282               	bcf	3970,1,c	;volatile
  7597                           
  7598                           ;ST7735_TFT.c: 669: while (w--) {
  7599  00315A  D007               	goto	l4136
  7600  00315C                     l4134:
  7601                           
  7602                           ;ST7735_TFT.c: 670: spiwrite(hi);
  7603  00315C  501E               	movf	drawFastHLine@hi,w,c
  7604  00315E  ECDF  F01D         	call	_spiwrite
  7605                           
  7606                           ;ST7735_TFT.c: 671: spiwrite(lo);
  7607  003162  501F               	movf	drawFastHLine@lo,w,c
  7608  003164  ECDF  F01D         	call	_spiwrite
  7609  003168  D000               	goto	l4136
  7610  00316A                     l4136:
  7611  00316A  0617               	decf	drawFastHLine@w,f,c
  7612  00316C  2817               	incf	drawFastHLine@w,w,c
  7613  00316E  A4D8               	btfss	status,2,c
  7614  003170  D7F5               	goto	l4134
  7615                           
  7616                           ;ST7735_TFT.c: 672: }
  7617                           ;ST7735_TFT.c: 673: PORTCbits.RC1 = 1;
  7618  003172  8282               	bsf	3970,1,c	;volatile
  7619  003174                     l289:
  7620  003174  0012               	return		;funcret
  7621  003176                     __end_of_drawFastHLine:
  7622                           	opt stack 0
  7623                           tblptru	equ	0xFF8
  7624                           tblptrh	equ	0xFF7
  7625                           tblptrl	equ	0xFF6
  7626                           tablat	equ	0xFF5
  7627                           prodh	equ	0xFF4
  7628                           prodl	equ	0xFF3
  7629                           intcon2	equ	0xFF1
  7630                           postinc0	equ	0xFEE
  7631                           wreg	equ	0xFE8
  7632                           postdec1	equ	0xFE5
  7633                           fsr1l	equ	0xFE1
  7634                           postinc2	equ	0xFDE
  7635                           postdec2	equ	0xFDD
  7636                           fsr2h	equ	0xFDA
  7637                           fsr2l	equ	0xFD9
  7638                           status	equ	0xFD8
  7639                           
  7640 ;; *************** function _TFT_GreenTab_Initialize *****************
  7641 ;; Defined at:
  7642 ;;		line 677 in file "ST7735_TFT.c"
  7643 ;; Parameters:    Size  Location     Type
  7644 ;;		None
  7645 ;; Auto vars:     Size  Location     Type
  7646 ;;		None
  7647 ;; Return value:  Size  Location     Type
  7648 ;;		None               void
  7649 ;; Registers used:
  7650 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7651 ;; Tracked objects:
  7652 ;;		On entry : 0/0
  7653 ;;		On exit  : 0/0
  7654 ;;		Unchanged: 0/0
  7655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7660 ;;Total ram usage:        0 bytes
  7661 ;; Hardware stack levels used:    1
  7662 ;; Hardware stack levels required when called:    5
  7663 ;; This function calls:
  7664 ;;		_Rcmd1
  7665 ;;		_Rcmd2red
  7666 ;;		_Rcmd3
  7667 ;;		_write_command
  7668 ;;		_write_data
  7669 ;; This function is called by:
  7670 ;;		_Initialize_Screen
  7671 ;; This function uses a non-reentrant model
  7672 ;;
  7673                           
  7674                           	psect	text22
  7675  003A56                     __ptext22:
  7676                           	opt stack 0
  7677  003A56                     _TFT_GreenTab_Initialize:
  7678                           	opt stack 24
  7679                           
  7680                           ;ST7735_TFT.c: 679: PORTCbits.RC1 = 1;
  7681                           
  7682                           ;incstack = 0
  7683  003A56  8282               	bsf	3970,1,c	;volatile
  7684                           
  7685                           ;ST7735_TFT.c: 680: PORTCbits.RC0 = 0;
  7686  003A58  9082               	bcf	3970,0,c	;volatile
  7687                           
  7688                           ;ST7735_TFT.c: 682: SSPSTAT=0x80;
  7689  003A5A  0E80               	movlw	128
  7690  003A5C  6EC7               	movwf	4039,c	;volatile
  7691                           
  7692                           ;ST7735_TFT.c: 683: SSPCON1=0x30;
  7693  003A5E  0E30               	movlw	48
  7694  003A60  6EC6               	movwf	4038,c	;volatile
  7695                           
  7696                           ;ST7735_TFT.c: 686: Rcmd1();
  7697  003A62  ECD9  F011         	call	_Rcmd1	;wreg free
  7698                           
  7699                           ;ST7735_TFT.c: 687: Rcmd2red();
  7700  003A66  EC88  F01C         	call	_Rcmd2red	;wreg free
  7701                           
  7702                           ;ST7735_TFT.c: 688: Rcmd3();
  7703  003A6A  EC62  F013         	call	_Rcmd3	;wreg free
  7704                           
  7705                           ;ST7735_TFT.c: 689: write_command(0x36);
  7706  003A6E  0E36               	movlw	54
  7707  003A70  EC03  F01E         	call	_write_command
  7708                           
  7709                           ;ST7735_TFT.c: 690: write_data(0xC0);
  7710  003A74  0EC0               	movlw	192
  7711  003A76  ECFB  F01D         	call	_write_data
  7712                           
  7713                           ;ST7735_TFT.c: 691: _tft_type = 1;
  7714  003A7A  0E01               	movlw	1
  7715  003A7C  6E64               	movwf	__tft_type,c
  7716  003A7E  0012               	return		;funcret
  7717  003A80                     __end_of_TFT_GreenTab_Initialize:
  7718                           	opt stack 0
  7719                           tblptru	equ	0xFF8
  7720                           tblptrh	equ	0xFF7
  7721                           tblptrl	equ	0xFF6
  7722                           tablat	equ	0xFF5
  7723                           prodh	equ	0xFF4
  7724                           prodl	equ	0xFF3
  7725                           intcon2	equ	0xFF1
  7726                           postinc0	equ	0xFEE
  7727                           wreg	equ	0xFE8
  7728                           postdec1	equ	0xFE5
  7729                           fsr1l	equ	0xFE1
  7730                           postinc2	equ	0xFDE
  7731                           postdec2	equ	0xFDD
  7732                           fsr2h	equ	0xFDA
  7733                           fsr2l	equ	0xFD9
  7734                           status	equ	0xFD8
  7735                           
  7736 ;; *************** function _Rcmd3 *****************
  7737 ;; Defined at:
  7738 ;;		line 371 in file "ST7735_TFT.c"
  7739 ;; Parameters:    Size  Location     Type
  7740 ;;		None
  7741 ;; Auto vars:     Size  Location     Type
  7742 ;;		None
  7743 ;; Return value:  Size  Location     Type
  7744 ;;		None               void
  7745 ;; Registers used:
  7746 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7747 ;; Tracked objects:
  7748 ;;		On entry : 0/0
  7749 ;;		On exit  : 0/0
  7750 ;;		Unchanged: 0/0
  7751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7755 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7756 ;;Total ram usage:        0 bytes
  7757 ;; Hardware stack levels used:    1
  7758 ;; Hardware stack levels required when called:    4
  7759 ;; This function calls:
  7760 ;;		_delay_ms
  7761 ;;		_write_command
  7762 ;;		_write_data
  7763 ;; This function is called by:
  7764 ;;		_TFT_GreenTab_Initialize
  7765 ;;		_TFT_BlackTab_Initialize
  7766 ;; This function uses a non-reentrant model
  7767 ;;
  7768                           
  7769                           	psect	text23
  7770  0026C4                     __ptext23:
  7771                           	opt stack 0
  7772  0026C4                     _Rcmd3:
  7773                           	opt stack 24
  7774                           
  7775                           ;ST7735_TFT.c: 373: write_command(0xE0);
  7776                           
  7777                           ;incstack = 0
  7778  0026C4  0EE0               	movlw	224
  7779  0026C6  EC03  F01E         	call	_write_command
  7780                           
  7781                           ;ST7735_TFT.c: 374: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  7782  0026CA  0E02               	movlw	2
  7783  0026CC  ECFB  F01D         	call	_write_data
  7784  0026D0  0E1C               	movlw	28
  7785  0026D2  ECFB  F01D         	call	_write_data
  7786  0026D6  0E07               	movlw	7
  7787  0026D8  ECFB  F01D         	call	_write_data
  7788  0026DC  0E12               	movlw	18
  7789  0026DE  ECFB  F01D         	call	_write_data
  7790                           
  7791                           ;ST7735_TFT.c: 375: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  7792  0026E2  0E37               	movlw	55
  7793  0026E4  ECFB  F01D         	call	_write_data
  7794  0026E8  0E32               	movlw	50
  7795  0026EA  ECFB  F01D         	call	_write_data
  7796  0026EE  0E29               	movlw	41
  7797  0026F0  ECFB  F01D         	call	_write_data
  7798  0026F4  0E2D               	movlw	45
  7799  0026F6  ECFB  F01D         	call	_write_data
  7800                           
  7801                           ;ST7735_TFT.c: 376: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  7802  0026FA  0E29               	movlw	41
  7803  0026FC  ECFB  F01D         	call	_write_data
  7804  002700  0E25               	movlw	37
  7805  002702  ECFB  F01D         	call	_write_data
  7806  002706  0E2B               	movlw	43
  7807  002708  ECFB  F01D         	call	_write_data
  7808  00270C  0E39               	movlw	57
  7809  00270E  ECFB  F01D         	call	_write_data
  7810                           
  7811                           ;ST7735_TFT.c: 377: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  7812  002712  0E00               	movlw	0
  7813  002714  ECFB  F01D         	call	_write_data
  7814  002718  0E01               	movlw	1
  7815  00271A  ECFB  F01D         	call	_write_data
  7816  00271E  0E03               	movlw	3
  7817  002720  ECFB  F01D         	call	_write_data
  7818  002724  0E10               	movlw	16
  7819  002726  ECFB  F01D         	call	_write_data
  7820                           
  7821                           ;ST7735_TFT.c: 378: write_command(0xE1);
  7822  00272A  0EE1               	movlw	225
  7823  00272C  EC03  F01E         	call	_write_command
  7824                           
  7825                           ;ST7735_TFT.c: 379: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  7826  002730  0E03               	movlw	3
  7827  002732  ECFB  F01D         	call	_write_data
  7828  002736  0E1D               	movlw	29
  7829  002738  ECFB  F01D         	call	_write_data
  7830  00273C  0E07               	movlw	7
  7831  00273E  ECFB  F01D         	call	_write_data
  7832  002742  0E06               	movlw	6
  7833  002744  ECFB  F01D         	call	_write_data
  7834                           
  7835                           ;ST7735_TFT.c: 380: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  7836  002748  0E2E               	movlw	46
  7837  00274A  ECFB  F01D         	call	_write_data
  7838  00274E  0E2C               	movlw	44
  7839  002750  ECFB  F01D         	call	_write_data
  7840  002754  0E29               	movlw	41
  7841  002756  ECFB  F01D         	call	_write_data
  7842  00275A  0E2D               	movlw	45
  7843  00275C  ECFB  F01D         	call	_write_data
  7844                           
  7845                           ;ST7735_TFT.c: 381: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  7846  002760  0E2E               	movlw	46
  7847  002762  ECFB  F01D         	call	_write_data
  7848  002766  0E2E               	movlw	46
  7849  002768  ECFB  F01D         	call	_write_data
  7850  00276C  0E37               	movlw	55
  7851  00276E  ECFB  F01D         	call	_write_data
  7852  002772  0E3F               	movlw	63
  7853  002774  ECFB  F01D         	call	_write_data
  7854                           
  7855                           ;ST7735_TFT.c: 382: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  7856  002778  0E00               	movlw	0
  7857  00277A  ECFB  F01D         	call	_write_data
  7858  00277E  0E00               	movlw	0
  7859  002780  ECFB  F01D         	call	_write_data
  7860  002784  0E02               	movlw	2
  7861  002786  ECFB  F01D         	call	_write_data
  7862  00278A  0E10               	movlw	16
  7863  00278C  ECFB  F01D         	call	_write_data
  7864                           
  7865                           ;ST7735_TFT.c: 383: write_command(0x13);
  7866  002790  0E13               	movlw	19
  7867  002792  EC03  F01E         	call	_write_command
  7868                           
  7869                           ;ST7735_TFT.c: 384: delay_ms(10);
  7870  002796  0E00               	movlw	0
  7871  002798  6E24               	movwf	delay_ms@ms+1,c
  7872  00279A  0E0A               	movlw	10
  7873  00279C  6E23               	movwf	delay_ms@ms,c
  7874  00279E  EC1F  F01B         	call	_delay_ms	;wreg free
  7875                           
  7876                           ;ST7735_TFT.c: 385: write_command(0x29);
  7877  0027A2  0E29               	movlw	41
  7878  0027A4  EC03  F01E         	call	_write_command
  7879                           
  7880                           ;ST7735_TFT.c: 386: delay_ms(100);
  7881  0027A8  0E00               	movlw	0
  7882  0027AA  6E24               	movwf	delay_ms@ms+1,c
  7883  0027AC  0E64               	movlw	100
  7884  0027AE  6E23               	movwf	delay_ms@ms,c
  7885  0027B0  EC1F  F01B         	call	_delay_ms	;wreg free
  7886  0027B4  0012               	return		;funcret
  7887  0027B6                     __end_of_Rcmd3:
  7888                           	opt stack 0
  7889                           tblptru	equ	0xFF8
  7890                           tblptrh	equ	0xFF7
  7891                           tblptrl	equ	0xFF6
  7892                           tablat	equ	0xFF5
  7893                           prodh	equ	0xFF4
  7894                           prodl	equ	0xFF3
  7895                           intcon2	equ	0xFF1
  7896                           postinc0	equ	0xFEE
  7897                           wreg	equ	0xFE8
  7898                           postdec1	equ	0xFE5
  7899                           fsr1l	equ	0xFE1
  7900                           postinc2	equ	0xFDE
  7901                           postdec2	equ	0xFDD
  7902                           fsr2h	equ	0xFDA
  7903                           fsr2l	equ	0xFD9
  7904                           status	equ	0xFD8
  7905                           
  7906 ;; *************** function _Rcmd2red *****************
  7907 ;; Defined at:
  7908 ;;		line 361 in file "ST7735_TFT.c"
  7909 ;; Parameters:    Size  Location     Type
  7910 ;;		None
  7911 ;; Auto vars:     Size  Location     Type
  7912 ;;		None
  7913 ;; Return value:  Size  Location     Type
  7914 ;;		None               void
  7915 ;; Registers used:
  7916 ;;		wreg, status,2, cstack
  7917 ;; Tracked objects:
  7918 ;;		On entry : 0/0
  7919 ;;		On exit  : 0/0
  7920 ;;		Unchanged: 0/0
  7921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7926 ;;Total ram usage:        0 bytes
  7927 ;; Hardware stack levels used:    1
  7928 ;; Hardware stack levels required when called:    4
  7929 ;; This function calls:
  7930 ;;		_write_command
  7931 ;;		_write_data
  7932 ;; This function is called by:
  7933 ;;		_TFT_GreenTab_Initialize
  7934 ;; This function uses a non-reentrant model
  7935 ;;
  7936                           
  7937                           	psect	text24
  7938  003910                     __ptext24:
  7939                           	opt stack 0
  7940  003910                     _Rcmd2red:
  7941                           	opt stack 24
  7942                           
  7943                           ;ST7735_TFT.c: 363: write_command(0x2A);
  7944                           
  7945                           ;incstack = 0
  7946  003910  0E2A               	movlw	42
  7947  003912  EC03  F01E         	call	_write_command
  7948                           
  7949                           ;ST7735_TFT.c: 364: write_data(0x00); write_data(0x00);
  7950  003916  0E00               	movlw	0
  7951  003918  ECFB  F01D         	call	_write_data
  7952  00391C  0E00               	movlw	0
  7953  00391E  ECFB  F01D         	call	_write_data
  7954                           
  7955                           ;ST7735_TFT.c: 365: write_data(0x00); write_data(0x7F);
  7956  003922  0E00               	movlw	0
  7957  003924  ECFB  F01D         	call	_write_data
  7958  003928  0E7F               	movlw	127
  7959  00392A  ECFB  F01D         	call	_write_data
  7960                           
  7961                           ;ST7735_TFT.c: 366: write_command(0x2B);
  7962  00392E  0E2B               	movlw	43
  7963  003930  EC03  F01E         	call	_write_command
  7964                           
  7965                           ;ST7735_TFT.c: 367: write_data(0x00); write_data(0x00);
  7966  003934  0E00               	movlw	0
  7967  003936  ECFB  F01D         	call	_write_data
  7968  00393A  0E00               	movlw	0
  7969  00393C  ECFB  F01D         	call	_write_data
  7970                           
  7971                           ;ST7735_TFT.c: 368: write_data(0x00); write_data(0x9F);
  7972  003940  0E00               	movlw	0
  7973  003942  ECFB  F01D         	call	_write_data
  7974  003946  0E9F               	movlw	159
  7975  003948  ECFB  F01D         	call	_write_data
  7976  00394C  0012               	return		;funcret
  7977  00394E                     __end_of_Rcmd2red:
  7978                           	opt stack 0
  7979                           tblptru	equ	0xFF8
  7980                           tblptrh	equ	0xFF7
  7981                           tblptrl	equ	0xFF6
  7982                           tablat	equ	0xFF5
  7983                           prodh	equ	0xFF4
  7984                           prodl	equ	0xFF3
  7985                           intcon2	equ	0xFF1
  7986                           postinc0	equ	0xFEE
  7987                           wreg	equ	0xFE8
  7988                           postdec1	equ	0xFE5
  7989                           fsr1l	equ	0xFE1
  7990                           postinc2	equ	0xFDE
  7991                           postdec2	equ	0xFDD
  7992                           fsr2h	equ	0xFDA
  7993                           fsr2l	equ	0xFD9
  7994                           status	equ	0xFD8
  7995                           
  7996 ;; *************** function _Rcmd1 *****************
  7997 ;; Defined at:
  7998 ;;		line 314 in file "ST7735_TFT.c"
  7999 ;; Parameters:    Size  Location     Type
  8000 ;;		None
  8001 ;; Auto vars:     Size  Location     Type
  8002 ;;		None
  8003 ;; Return value:  Size  Location     Type
  8004 ;;		None               void
  8005 ;; Registers used:
  8006 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8007 ;; Tracked objects:
  8008 ;;		On entry : 0/0
  8009 ;;		On exit  : 0/0
  8010 ;;		Unchanged: 0/0
  8011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8016 ;;Total ram usage:        0 bytes
  8017 ;; Hardware stack levels used:    1
  8018 ;; Hardware stack levels required when called:    4
  8019 ;; This function calls:
  8020 ;;		_delay_ms
  8021 ;;		_write_command
  8022 ;;		_write_data
  8023 ;; This function is called by:
  8024 ;;		_TFT_GreenTab_Initialize
  8025 ;;		_TFT_BlackTab_Initialize
  8026 ;; This function uses a non-reentrant model
  8027 ;;
  8028                           
  8029                           	psect	text25
  8030  0023B2                     __ptext25:
  8031                           	opt stack 0
  8032  0023B2                     _Rcmd1:
  8033                           	opt stack 24
  8034                           
  8035                           ;ST7735_TFT.c: 316: write_command(0x01);
  8036                           
  8037                           ;incstack = 0
  8038  0023B2  0E01               	movlw	1
  8039  0023B4  EC03  F01E         	call	_write_command
  8040                           
  8041                           ;ST7735_TFT.c: 317: delay_ms(150);
  8042  0023B8  0E00               	movlw	0
  8043  0023BA  6E24               	movwf	delay_ms@ms+1,c
  8044  0023BC  0E96               	movlw	150
  8045  0023BE  6E23               	movwf	delay_ms@ms,c
  8046  0023C0  EC1F  F01B         	call	_delay_ms	;wreg free
  8047                           
  8048                           ;ST7735_TFT.c: 318: write_command(0x11);
  8049  0023C4  0E11               	movlw	17
  8050  0023C6  EC03  F01E         	call	_write_command
  8051                           
  8052                           ;ST7735_TFT.c: 319: delay_ms(500);
  8053  0023CA  0E01               	movlw	1
  8054  0023CC  6E24               	movwf	delay_ms@ms+1,c
  8055  0023CE  0EF4               	movlw	244
  8056  0023D0  6E23               	movwf	delay_ms@ms,c
  8057  0023D2  EC1F  F01B         	call	_delay_ms	;wreg free
  8058                           
  8059                           ;ST7735_TFT.c: 320: write_command(0xB1);
  8060  0023D6  0EB1               	movlw	177
  8061  0023D8  EC03  F01E         	call	_write_command
  8062                           
  8063                           ;ST7735_TFT.c: 321: write_data(0x01);
  8064  0023DC  0E01               	movlw	1
  8065  0023DE  ECFB  F01D         	call	_write_data
  8066                           
  8067                           ;ST7735_TFT.c: 322: write_data(0x2C);
  8068  0023E2  0E2C               	movlw	44
  8069  0023E4  ECFB  F01D         	call	_write_data
  8070                           
  8071                           ;ST7735_TFT.c: 323: write_data(0x2D);
  8072  0023E8  0E2D               	movlw	45
  8073  0023EA  ECFB  F01D         	call	_write_data
  8074                           
  8075                           ;ST7735_TFT.c: 324: write_command(0xB2);
  8076  0023EE  0EB2               	movlw	178
  8077  0023F0  EC03  F01E         	call	_write_command
  8078                           
  8079                           ;ST7735_TFT.c: 325: write_data(0x01);
  8080  0023F4  0E01               	movlw	1
  8081  0023F6  ECFB  F01D         	call	_write_data
  8082                           
  8083                           ;ST7735_TFT.c: 326: write_data(0x2C);
  8084  0023FA  0E2C               	movlw	44
  8085  0023FC  ECFB  F01D         	call	_write_data
  8086                           
  8087                           ;ST7735_TFT.c: 327: write_data(0x2D);
  8088  002400  0E2D               	movlw	45
  8089  002402  ECFB  F01D         	call	_write_data
  8090                           
  8091                           ;ST7735_TFT.c: 328: write_command(0xB3);
  8092  002406  0EB3               	movlw	179
  8093  002408  EC03  F01E         	call	_write_command
  8094                           
  8095                           ;ST7735_TFT.c: 329: write_data(0x01);
  8096  00240C  0E01               	movlw	1
  8097  00240E  ECFB  F01D         	call	_write_data
  8098                           
  8099                           ;ST7735_TFT.c: 330: write_data(0x2C);
  8100  002412  0E2C               	movlw	44
  8101  002414  ECFB  F01D         	call	_write_data
  8102                           
  8103                           ;ST7735_TFT.c: 331: write_data(0x2D);
  8104  002418  0E2D               	movlw	45
  8105  00241A  ECFB  F01D         	call	_write_data
  8106                           
  8107                           ;ST7735_TFT.c: 332: write_data(0x01);
  8108  00241E  0E01               	movlw	1
  8109  002420  ECFB  F01D         	call	_write_data
  8110                           
  8111                           ;ST7735_TFT.c: 333: write_data(0x2C);
  8112  002424  0E2C               	movlw	44
  8113  002426  ECFB  F01D         	call	_write_data
  8114                           
  8115                           ;ST7735_TFT.c: 334: write_data(0x2D);
  8116  00242A  0E2D               	movlw	45
  8117  00242C  ECFB  F01D         	call	_write_data
  8118                           
  8119                           ;ST7735_TFT.c: 335: write_command(0xB4);
  8120  002430  0EB4               	movlw	180
  8121  002432  EC03  F01E         	call	_write_command
  8122                           
  8123                           ;ST7735_TFT.c: 336: write_data(0x07);
  8124  002436  0E07               	movlw	7
  8125  002438  ECFB  F01D         	call	_write_data
  8126                           
  8127                           ;ST7735_TFT.c: 337: write_command(0xC0);
  8128  00243C  0EC0               	movlw	192
  8129  00243E  EC03  F01E         	call	_write_command
  8130                           
  8131                           ;ST7735_TFT.c: 338: write_data(0xA2);
  8132  002442  0EA2               	movlw	162
  8133  002444  ECFB  F01D         	call	_write_data
  8134                           
  8135                           ;ST7735_TFT.c: 339: write_data(0x02);
  8136  002448  0E02               	movlw	2
  8137  00244A  ECFB  F01D         	call	_write_data
  8138                           
  8139                           ;ST7735_TFT.c: 340: write_data(0x84);
  8140  00244E  0E84               	movlw	132
  8141  002450  ECFB  F01D         	call	_write_data
  8142                           
  8143                           ;ST7735_TFT.c: 341: write_command(0xC1);
  8144  002454  0EC1               	movlw	193
  8145  002456  EC03  F01E         	call	_write_command
  8146                           
  8147                           ;ST7735_TFT.c: 342: write_data(0xC5);
  8148  00245A  0EC5               	movlw	197
  8149  00245C  ECFB  F01D         	call	_write_data
  8150                           
  8151                           ;ST7735_TFT.c: 343: write_command(0xC2);
  8152  002460  0EC2               	movlw	194
  8153  002462  EC03  F01E         	call	_write_command
  8154                           
  8155                           ;ST7735_TFT.c: 344: write_data(0x0A);
  8156  002466  0E0A               	movlw	10
  8157  002468  ECFB  F01D         	call	_write_data
  8158                           
  8159                           ;ST7735_TFT.c: 345: write_data(0x00);
  8160  00246C  0E00               	movlw	0
  8161  00246E  ECFB  F01D         	call	_write_data
  8162                           
  8163                           ;ST7735_TFT.c: 346: write_command(0xC3);
  8164  002472  0EC3               	movlw	195
  8165  002474  EC03  F01E         	call	_write_command
  8166                           
  8167                           ;ST7735_TFT.c: 347: write_data(0x8A);
  8168  002478  0E8A               	movlw	138
  8169  00247A  ECFB  F01D         	call	_write_data
  8170                           
  8171                           ;ST7735_TFT.c: 348: write_data(0x2A);
  8172  00247E  0E2A               	movlw	42
  8173  002480  ECFB  F01D         	call	_write_data
  8174                           
  8175                           ;ST7735_TFT.c: 349: write_command(0xC4);
  8176  002484  0EC4               	movlw	196
  8177  002486  EC03  F01E         	call	_write_command
  8178                           
  8179                           ;ST7735_TFT.c: 350: write_data(0x8A);
  8180  00248A  0E8A               	movlw	138
  8181  00248C  ECFB  F01D         	call	_write_data
  8182                           
  8183                           ;ST7735_TFT.c: 351: write_data(0xEE);
  8184  002490  0EEE               	movlw	238
  8185  002492  ECFB  F01D         	call	_write_data
  8186                           
  8187                           ;ST7735_TFT.c: 352: write_command(0xC5);
  8188  002496  0EC5               	movlw	197
  8189  002498  EC03  F01E         	call	_write_command
  8190                           
  8191                           ;ST7735_TFT.c: 353: write_data(0x0E);
  8192  00249C  0E0E               	movlw	14
  8193  00249E  ECFB  F01D         	call	_write_data
  8194                           
  8195                           ;ST7735_TFT.c: 354: write_command(0x20);
  8196  0024A2  0E20               	movlw	32
  8197  0024A4  EC03  F01E         	call	_write_command
  8198                           
  8199                           ;ST7735_TFT.c: 355: write_command(0x36);
  8200  0024A8  0E36               	movlw	54
  8201  0024AA  EC03  F01E         	call	_write_command
  8202                           
  8203                           ;ST7735_TFT.c: 356: write_data(0xC8);
  8204  0024AE  0EC8               	movlw	200
  8205  0024B0  ECFB  F01D         	call	_write_data
  8206                           
  8207                           ;ST7735_TFT.c: 357: write_command(0x3A);
  8208  0024B4  0E3A               	movlw	58
  8209  0024B6  EC03  F01E         	call	_write_command
  8210                           
  8211                           ;ST7735_TFT.c: 358: write_data(0x05);
  8212  0024BA  0E05               	movlw	5
  8213  0024BC  ECFB  F01D         	call	_write_data
  8214  0024C0  0012               	return		;funcret
  8215  0024C2                     __end_of_Rcmd1:
  8216                           	opt stack 0
  8217                           tblptru	equ	0xFF8
  8218                           tblptrh	equ	0xFF7
  8219                           tblptrl	equ	0xFF6
  8220                           tablat	equ	0xFF5
  8221                           prodh	equ	0xFF4
  8222                           prodl	equ	0xFF3
  8223                           intcon2	equ	0xFF1
  8224                           postinc0	equ	0xFEE
  8225                           wreg	equ	0xFE8
  8226                           postdec1	equ	0xFE5
  8227                           fsr1l	equ	0xFE1
  8228                           postinc2	equ	0xFDE
  8229                           postdec2	equ	0xFDD
  8230                           fsr2h	equ	0xFDA
  8231                           fsr2l	equ	0xFD9
  8232                           status	equ	0xFD8
  8233                           
  8234 ;; *************** function _LCD_Reset *****************
  8235 ;; Defined at:
  8236 ;;		line 250 in file "ST7735_TFT.c"
  8237 ;; Parameters:    Size  Location     Type
  8238 ;;		None
  8239 ;; Auto vars:     Size  Location     Type
  8240 ;;		None
  8241 ;; Return value:  Size  Location     Type
  8242 ;;		None               void
  8243 ;; Registers used:
  8244 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8245 ;; Tracked objects:
  8246 ;;		On entry : 0/0
  8247 ;;		On exit  : 0/0
  8248 ;;		Unchanged: 0/0
  8249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8253 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8254 ;;Total ram usage:        0 bytes
  8255 ;; Hardware stack levels used:    1
  8256 ;; Hardware stack levels required when called:    4
  8257 ;; This function calls:
  8258 ;;		_delay_ms
  8259 ;; This function is called by:
  8260 ;;		_Initialize_Screen
  8261 ;; This function uses a non-reentrant model
  8262 ;;
  8263                           
  8264                           	psect	text26
  8265  003BD2                     __ptext26:
  8266                           	opt stack 0
  8267  003BD2                     _LCD_Reset:
  8268                           	opt stack 25
  8269                           
  8270                           ;ST7735_TFT.c: 252: PORTCbits.RC4 = 0;
  8271                           
  8272                           ;incstack = 0
  8273  003BD2  9882               	bcf	3970,4,c	;volatile
  8274                           
  8275                           ;ST7735_TFT.c: 253: delay_ms(100);
  8276  003BD4  0E00               	movlw	0
  8277  003BD6  6E24               	movwf	delay_ms@ms+1,c
  8278  003BD8  0E64               	movlw	100
  8279  003BDA  6E23               	movwf	delay_ms@ms,c
  8280  003BDC  EC1F  F01B         	call	_delay_ms	;wreg free
  8281                           
  8282                           ;ST7735_TFT.c: 254: PORTCbits.RC4 = 1;
  8283  003BE0  8882               	bsf	3970,4,c	;volatile
  8284  003BE2  0012               	return		;funcret
  8285  003BE4                     __end_of_LCD_Reset:
  8286                           	opt stack 0
  8287                           tblptru	equ	0xFF8
  8288                           tblptrh	equ	0xFF7
  8289                           tblptrl	equ	0xFF6
  8290                           tablat	equ	0xFF5
  8291                           prodh	equ	0xFF4
  8292                           prodl	equ	0xFF3
  8293                           intcon2	equ	0xFF1
  8294                           postinc0	equ	0xFEE
  8295                           wreg	equ	0xFE8
  8296                           postdec1	equ	0xFE5
  8297                           fsr1l	equ	0xFE1
  8298                           postinc2	equ	0xFDE
  8299                           postdec2	equ	0xFDD
  8300                           fsr2h	equ	0xFDA
  8301                           fsr2l	equ	0xFD9
  8302                           status	equ	0xFD8
  8303                           
  8304 ;; *************** function _delay_ms *****************
  8305 ;; Defined at:
  8306 ;;		line 97 in file "ST7735_TFT.c"
  8307 ;; Parameters:    Size  Location     Type
  8308 ;;  ms              2   34[COMRAM] int 
  8309 ;; Auto vars:     Size  Location     Type
  8310 ;;  count           2   38[COMRAM] int 
  8311 ;; Return value:  Size  Location     Type
  8312 ;;		None               void
  8313 ;; Registers used:
  8314 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8315 ;; Tracked objects:
  8316 ;;		On entry : 0/0
  8317 ;;		On exit  : 0/0
  8318 ;;		Unchanged: 0/0
  8319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8320 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8321 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8322 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8323 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8324 ;;Total ram usage:        6 bytes
  8325 ;; Hardware stack levels used:    1
  8326 ;; Hardware stack levels required when called:    3
  8327 ;; This function calls:
  8328 ;;		___wmul
  8329 ;; This function is called by:
  8330 ;;		_LCD_Reset
  8331 ;;		_Rcmd1
  8332 ;;		_Rcmd3
  8333 ;;		_Bcmd
  8334 ;; This function uses a non-reentrant model
  8335 ;;
  8336                           
  8337                           	psect	text27
  8338  00363E                     __ptext27:
  8339                           	opt stack 0
  8340  00363E                     _delay_ms:
  8341                           	opt stack 24
  8342                           
  8343                           ;ST7735_TFT.c: 103: int count;
  8344                           ;ST7735_TFT.c: 104: count = 8000000/4000/8 * ms;
  8345                           
  8346                           ;incstack = 0
  8347  00363E  C023  F01D         	movff	delay_ms@ms,___wmul@multiplier
  8348  003642  C024  F01E         	movff	delay_ms@ms+1,___wmul@multiplier+1
  8349  003646  0E00               	movlw	0
  8350  003648  6E20               	movwf	___wmul@multiplicand+1,c
  8351  00364A  0EFA               	movlw	250
  8352  00364C  6E1F               	movwf	___wmul@multiplicand,c
  8353  00364E  EC40  F01D         	call	___wmul	;wreg free
  8354  003652  C01D  F027         	movff	?___wmul,delay_ms@count
  8355  003656  C01E  F028         	movff	?___wmul+1,delay_ms@count+1
  8356                           
  8357                           ;ST7735_TFT.c: 105: count = (0xffff - count);
  8358  00365A  C027  F025         	movff	delay_ms@count,??_delay_ms
  8359  00365E  C028  F026         	movff	delay_ms@count+1,??_delay_ms+1
  8360  003662  1E25               	comf	??_delay_ms,f,c
  8361  003664  1E26               	comf	??_delay_ms+1,f,c
  8362  003666  4A25               	infsnz	??_delay_ms,f,c
  8363  003668  2A26               	incf	??_delay_ms+1,f,c
  8364  00366A  0EFF               	movlw	255
  8365  00366C  2425               	addwf	??_delay_ms,w,c
  8366  00366E  6E27               	movwf	delay_ms@count,c
  8367  003670  0EFF               	movlw	255
  8368  003672  2026               	addwfc	??_delay_ms+1,w,c
  8369  003674  6E28               	movwf	delay_ms@count+1,c
  8370                           
  8371                           ;ST7735_TFT.c: 107: T3CON = 0xb8;
  8372  003676  0EB8               	movlw	184
  8373  003678  6EB1               	movwf	4017,c	;volatile
  8374                           
  8375                           ;ST7735_TFT.c: 109: TMR0L = count & 0x00ff;
  8376  00367A  C027  FFD6         	movff	delay_ms@count,4054	;volatile
  8377                           
  8378                           ;ST7735_TFT.c: 110: TMR0H = count >> 8;
  8379  00367E  5028               	movf	delay_ms@count+1,w,c
  8380  003680  6ED7               	movwf	4055,c	;volatile
  8381                           
  8382                           ;ST7735_TFT.c: 112: PIR2bits.TMR3IF = 0;
  8383  003682  92A1               	bcf	4001,1,c	;volatile
  8384                           
  8385                           ;ST7735_TFT.c: 113: T3CONbits.TMR3ON = 1;
  8386  003684  80B1               	bsf	4017,0,c	;volatile
  8387                           
  8388                           ;ST7735_TFT.c: 115: while (PIR2bits.TMR3IF == 0);
  8389  003686  D000               	goto	l131
  8390  003688                     l131:
  8391  003688  A2A1               	btfss	4001,1,c	;volatile
  8392  00368A  D7FE               	goto	l131
  8393                           
  8394                           ;ST7735_TFT.c: 116: T3CONbits.TMR3ON = 0;
  8395  00368C  90B1               	bcf	4017,0,c	;volatile
  8396  00368E  0012               	return		;funcret
  8397  003690                     __end_of_delay_ms:
  8398                           	opt stack 0
  8399                           tblptru	equ	0xFF8
  8400                           tblptrh	equ	0xFF7
  8401                           tblptrl	equ	0xFF6
  8402                           tablat	equ	0xFF5
  8403                           prodh	equ	0xFF4
  8404                           prodl	equ	0xFF3
  8405                           intcon2	equ	0xFF1
  8406                           postinc0	equ	0xFEE
  8407                           wreg	equ	0xFE8
  8408                           postdec1	equ	0xFE5
  8409                           fsr1l	equ	0xFE1
  8410                           postinc2	equ	0xFDE
  8411                           postdec2	equ	0xFDD
  8412                           fsr2h	equ	0xFDA
  8413                           fsr2l	equ	0xFD9
  8414                           status	equ	0xFD8
  8415                           
  8416 ;; *************** function _Do_Init *****************
  8417 ;; Defined at:
  8418 ;;		line 277 in file "Lab9pC.c"
  8419 ;; Parameters:    Size  Location     Type
  8420 ;;		None
  8421 ;; Auto vars:     Size  Location     Type
  8422 ;;		None
  8423 ;; Return value:  Size  Location     Type
  8424 ;;		None               void
  8425 ;; Registers used:
  8426 ;;		wreg, status,2, cstack
  8427 ;; Tracked objects:
  8428 ;;		On entry : 0/0
  8429 ;;		On exit  : 0/0
  8430 ;;		Unchanged: 0/0
  8431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8435 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8436 ;;Total ram usage:        0 bytes
  8437 ;; Hardware stack levels used:    1
  8438 ;; Hardware stack levels required when called:    4
  8439 ;; This function calls:
  8440 ;;		_Init_ADC
  8441 ;;		_init_UART
  8442 ;; This function is called by:
  8443 ;;		_main
  8444 ;; This function uses a non-reentrant model
  8445 ;;
  8446                           
  8447                           	psect	text28
  8448  003AF2                     __ptext28:
  8449                           	opt stack 0
  8450  003AF2                     _Do_Init:
  8451                           	opt stack 26
  8452                           
  8453                           ;Lab9pC.c: 279: init_UART();
  8454                           
  8455                           ;incstack = 0
  8456  003AF2  ECD5  F01D         	call	_init_UART	;wreg free
  8457                           
  8458                           ;Lab9pC.c: 280: Init_ADC();
  8459  003AF6  EC12  F01E         	call	_Init_ADC	;wreg free
  8460                           
  8461                           ;Lab9pC.c: 282: OSCCON=0x60;
  8462  003AFA  0E60               	movlw	96
  8463  003AFC  6ED3               	movwf	4051,c	;volatile
  8464                           
  8465                           ;Lab9pC.c: 286: INTCONbits.INT0IF = 0 ;
  8466  003AFE  92F2               	bcf	intcon,1,c	;volatile
  8467                           
  8468                           ;Lab9pC.c: 287: INTCON3bits.INT1IF = 0;
  8469  003B00  90F0               	bcf	intcon3,0,c	;volatile
  8470                           
  8471                           ;Lab9pC.c: 288: INTCON3bits.INT2IF =0;
  8472  003B02  92F0               	bcf	intcon3,1,c	;volatile
  8473                           
  8474                           ;Lab9pC.c: 289: INTCON2bits.INTEDG0=0 ;
  8475  003B04  9CF1               	bcf	intcon2,6,c	;volatile
  8476                           
  8477                           ;Lab9pC.c: 290: INTCON2bits.INTEDG1=0;
  8478  003B06  9AF1               	bcf	intcon2,5,c	;volatile
  8479                           
  8480                           ;Lab9pC.c: 291: INTCON2bits.INTEDG2=1;
  8481  003B08  88F1               	bsf	intcon2,4,c	;volatile
  8482                           
  8483                           ;Lab9pC.c: 292: INTCONbits.INT0IE =1;
  8484  003B0A  88F2               	bsf	intcon,4,c	;volatile
  8485                           
  8486                           ;Lab9pC.c: 293: INTCON3bits.INT1IE=1;
  8487  003B0C  86F0               	bsf	intcon3,3,c	;volatile
  8488                           
  8489                           ;Lab9pC.c: 294: INTCON3bits.INT2IE=1;
  8490  003B0E  88F0               	bsf	intcon3,4,c	;volatile
  8491                           
  8492                           ;Lab9pC.c: 295: INTCONbits.GIE=1;
  8493  003B10  8EF2               	bsf	intcon,7,c	;volatile
  8494  003B12  0012               	return		;funcret
  8495  003B14                     __end_of_Do_Init:
  8496                           	opt stack 0
  8497                           tblptru	equ	0xFF8
  8498                           tblptrh	equ	0xFF7
  8499                           tblptrl	equ	0xFF6
  8500                           tablat	equ	0xFF5
  8501                           prodh	equ	0xFF4
  8502                           prodl	equ	0xFF3
  8503                           intcon	equ	0xFF2
  8504                           intcon2	equ	0xFF1
  8505                           intcon3	equ	0xFF0
  8506                           postinc0	equ	0xFEE
  8507                           wreg	equ	0xFE8
  8508                           postdec1	equ	0xFE5
  8509                           fsr1l	equ	0xFE1
  8510                           postinc2	equ	0xFDE
  8511                           postdec2	equ	0xFDD
  8512                           fsr2h	equ	0xFDA
  8513                           fsr2l	equ	0xFD9
  8514                           status	equ	0xFD8
  8515                           
  8516 ;; *************** function _init_UART *****************
  8517 ;; Defined at:
  8518 ;;		line 172 in file "Lab9pC.c"
  8519 ;; Parameters:    Size  Location     Type
  8520 ;;		None
  8521 ;; Auto vars:     Size  Location     Type
  8522 ;;		None
  8523 ;; Return value:  Size  Location     Type
  8524 ;;		None               void
  8525 ;; Registers used:
  8526 ;;		wreg, status,2, cstack
  8527 ;; Tracked objects:
  8528 ;;		On entry : 0/0
  8529 ;;		On exit  : 0/0
  8530 ;;		Unchanged: 0/0
  8531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8535 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8536 ;;Total ram usage:        0 bytes
  8537 ;; Hardware stack levels used:    1
  8538 ;; Hardware stack levels required when called:    3
  8539 ;; This function calls:
  8540 ;;		_OpenUSART
  8541 ;; This function is called by:
  8542 ;;		_Do_Init
  8543 ;; This function uses a non-reentrant model
  8544 ;;
  8545                           
  8546                           	psect	text29
  8547  003BAA                     __ptext29:
  8548                           	opt stack 0
  8549  003BAA                     _init_UART:
  8550                           	opt stack 26
  8551                           
  8552                           ;Lab9pC.c: 174: OpenUSART (0b01111111 & 0b10111111 &
  8553                           ;Lab9pC.c: 175: 0b11111110 & 0b11111101 & 0b11111111 &
  8554                           ;Lab9pC.c: 176: 0b11111111, 25);
  8555                           
  8556                           ;incstack = 0
  8557  003BAA  0E00               	movlw	0
  8558  003BAC  6E10               	movwf	OpenUSART@spbrg+1,c
  8559  003BAE  0E19               	movlw	25
  8560  003BB0  6E0F               	movwf	OpenUSART@spbrg,c
  8561  003BB2  0E3C               	movlw	60
  8562  003BB4  ECFC  F019         	call	_OpenUSART
  8563                           
  8564                           ;Lab9pC.c: 177: OSCCON = 0x60;
  8565  003BB8  0E60               	movlw	96
  8566  003BBA  6ED3               	movwf	4051,c	;volatile
  8567  003BBC  0012               	return		;funcret
  8568  003BBE                     __end_of_init_UART:
  8569                           	opt stack 0
  8570                           tblptru	equ	0xFF8
  8571                           tblptrh	equ	0xFF7
  8572                           tblptrl	equ	0xFF6
  8573                           tablat	equ	0xFF5
  8574                           prodh	equ	0xFF4
  8575                           prodl	equ	0xFF3
  8576                           intcon	equ	0xFF2
  8577                           intcon2	equ	0xFF1
  8578                           intcon3	equ	0xFF0
  8579                           postinc0	equ	0xFEE
  8580                           wreg	equ	0xFE8
  8581                           postdec1	equ	0xFE5
  8582                           fsr1l	equ	0xFE1
  8583                           postinc2	equ	0xFDE
  8584                           postdec2	equ	0xFDD
  8585                           fsr2h	equ	0xFDA
  8586                           fsr2l	equ	0xFD9
  8587                           status	equ	0xFD8
  8588                           
  8589 ;; *************** function _OpenUSART *****************
  8590 ;; Defined at:
  8591 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  8592 ;; Parameters:    Size  Location     Type
  8593 ;;  config          1    wreg     unsigned char 
  8594 ;;  spbrg           2   14[COMRAM] unsigned int 
  8595 ;; Auto vars:     Size  Location     Type
  8596 ;;  config          1   16[COMRAM] unsigned char 
  8597 ;; Return value:  Size  Location     Type
  8598 ;;		None               void
  8599 ;; Registers used:
  8600 ;;		wreg, status,2
  8601 ;; Tracked objects:
  8602 ;;		On entry : 0/0
  8603 ;;		On exit  : 0/0
  8604 ;;		Unchanged: 0/0
  8605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8606 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8607 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8609 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8610 ;;Total ram usage:        3 bytes
  8611 ;; Hardware stack levels used:    1
  8612 ;; Hardware stack levels required when called:    2
  8613 ;; This function calls:
  8614 ;;		Nothing
  8615 ;; This function is called by:
  8616 ;;		_init_UART
  8617 ;; This function uses a non-reentrant model
  8618 ;;
  8619                           
  8620                           	psect	text30
  8621  0033F8                     __ptext30:
  8622                           	opt stack 0
  8623  0033F8                     _OpenUSART:
  8624                           	opt stack 26
  8625                           
  8626                           ;incstack = 0
  8627                           ;OpenUSART@config stored from wreg
  8628  0033F8  6E11               	movwf	OpenUSART@config,c
  8629  0033FA  0E00               	movlw	0
  8630  0033FC  6EAC               	movwf	4012,c	;volatile
  8631  0033FE  0E00               	movlw	0
  8632  003400  6EAB               	movwf	4011,c	;volatile
  8633  003402  A011               	btfss	OpenUSART@config,0,c
  8634  003404  D002               	goto	l4144
  8635  003406  88AC               	bsf	4012,4,c	;volatile
  8636  003408  D000               	goto	l4144
  8637  00340A                     l4144:
  8638  00340A  A211               	btfss	OpenUSART@config,1,c
  8639  00340C  D003               	goto	l4148
  8640  00340E  8CAC               	bsf	4012,6,c	;volatile
  8641  003410  8CAB               	bsf	4011,6,c	;volatile
  8642  003412  D000               	goto	l4148
  8643  003414                     l4148:
  8644  003414  A411               	btfss	OpenUSART@config,2,c
  8645  003416  D002               	goto	l4152
  8646  003418  8EAC               	bsf	4012,7,c	;volatile
  8647  00341A  D000               	goto	l4152
  8648  00341C                     l4152:
  8649  00341C  A611               	btfss	OpenUSART@config,3,c
  8650  00341E  D002               	goto	l671
  8651  003420  88AB               	bsf	4011,4,c	;volatile
  8652  003422  D002               	goto	l4156
  8653  003424                     l671:
  8654  003424  8AAB               	bsf	4011,5,c	;volatile
  8655  003426  D000               	goto	l4156
  8656  003428                     l4156:
  8657  003428  B811               	btfsc	OpenUSART@config,4,c
  8658  00342A  84AC               	bsf	4012,2,c	;volatile
  8659  00342C  989E               	bcf	3998,4,c	;volatile
  8660  00342E  AA11               	btfss	OpenUSART@config,5,c
  8661  003430  D002               	goto	l4164
  8662  003432  86AB               	bsf	4011,3,c	;volatile
  8663  003434  D000               	goto	l4164
  8664  003436                     l4164:
  8665  003436  AC11               	btfss	OpenUSART@config,6,c
  8666  003438  D002               	goto	l675
  8667  00343A  8A9D               	bsf	3997,5,c	;volatile
  8668  00343C  D001               	goto	l676
  8669  00343E                     l675:
  8670  00343E  9A9D               	bcf	3997,5,c	;volatile
  8671  003440                     l676:
  8672  003440  9A9E               	bcf	3998,5,c	;volatile
  8673  003442  AE11               	btfss	OpenUSART@config,7,c
  8674  003444  D002               	goto	l677
  8675  003446  889D               	bsf	3997,4,c	;volatile
  8676  003448  D001               	goto	l678
  8677  00344A                     l677:
  8678  00344A  989D               	bcf	3997,4,c	;volatile
  8679  00344C                     l678:
  8680  00344C  C00F  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  8681  003450  5010               	movf	OpenUSART@spbrg+1,w,c
  8682  003452  6EB0               	movwf	4016,c	;volatile
  8683  003454  8AAC               	bsf	4012,5,c	;volatile
  8684  003456  8EAB               	bsf	4011,7,c	;volatile
  8685  003458  9C94               	bcf	3988,6,c	;volatile
  8686  00345A  8E94               	bsf	3988,7,c	;volatile
  8687  00345C  B8AC               	btfsc	4012,4,c	;volatile
  8688  00345E  BEAC               	btfsc	4012,7,c	;volatile
  8689  003460  D002               	goto	l680
  8690  003462  8C94               	bsf	3988,6,c	;volatile
  8691  003464  D000               	goto	l680
  8692  003466                     l680:
  8693  003466  0012               	return		;funcret
  8694  003468                     __end_of_OpenUSART:
  8695                           	opt stack 0
  8696                           tblptru	equ	0xFF8
  8697                           tblptrh	equ	0xFF7
  8698                           tblptrl	equ	0xFF6
  8699                           tablat	equ	0xFF5
  8700                           prodh	equ	0xFF4
  8701                           prodl	equ	0xFF3
  8702                           intcon	equ	0xFF2
  8703                           intcon2	equ	0xFF1
  8704                           intcon3	equ	0xFF0
  8705                           postinc0	equ	0xFEE
  8706                           wreg	equ	0xFE8
  8707                           postdec1	equ	0xFE5
  8708                           fsr1l	equ	0xFE1
  8709                           postinc2	equ	0xFDE
  8710                           postdec2	equ	0xFDD
  8711                           fsr2h	equ	0xFDA
  8712                           fsr2l	equ	0xFD9
  8713                           status	equ	0xFD8
  8714                           
  8715 ;; *************** function _Init_ADC *****************
  8716 ;; Defined at:
  8717 ;;		line 386 in file "Lab9pC.c"
  8718 ;; Parameters:    Size  Location     Type
  8719 ;;		None
  8720 ;; Auto vars:     Size  Location     Type
  8721 ;;		None
  8722 ;; Return value:  Size  Location     Type
  8723 ;;		None               void
  8724 ;; Registers used:
  8725 ;;		wreg, status,2
  8726 ;; Tracked objects:
  8727 ;;		On entry : 0/0
  8728 ;;		On exit  : 0/0
  8729 ;;		Unchanged: 0/0
  8730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8734 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8735 ;;Total ram usage:        0 bytes
  8736 ;; Hardware stack levels used:    1
  8737 ;; Hardware stack levels required when called:    2
  8738 ;; This function calls:
  8739 ;;		Nothing
  8740 ;; This function is called by:
  8741 ;;		_Do_Init
  8742 ;; This function uses a non-reentrant model
  8743 ;;
  8744                           
  8745                           	psect	text31
  8746  003C24                     __ptext31:
  8747                           	opt stack 0
  8748  003C24                     _Init_ADC:
  8749                           	opt stack 27
  8750                           
  8751                           ;Lab9pC.c: 388: ADCON0 = 0x01;
  8752                           
  8753                           ;incstack = 0
  8754  003C24  0E01               	movlw	1
  8755  003C26  6EC2               	movwf	4034,c	;volatile
  8756                           
  8757                           ;Lab9pC.c: 389: ADCON1 = 0x0E;
  8758  003C28  0E0E               	movlw	14
  8759  003C2A  6EC1               	movwf	4033,c	;volatile
  8760                           
  8761                           ;Lab9pC.c: 390: ADCON2= 0XA9;
  8762  003C2C  0EA9               	movlw	169
  8763  003C2E  6EC0               	movwf	4032,c	;volatile
  8764  003C30  0012               	return		;funcret
  8765  003C32                     __end_of_Init_ADC:
  8766                           	opt stack 0
  8767                           tblptru	equ	0xFF8
  8768                           tblptrh	equ	0xFF7
  8769                           tblptrl	equ	0xFF6
  8770                           tablat	equ	0xFF5
  8771                           prodh	equ	0xFF4
  8772                           prodl	equ	0xFF3
  8773                           intcon	equ	0xFF2
  8774                           intcon2	equ	0xFF1
  8775                           intcon3	equ	0xFF0
  8776                           postinc0	equ	0xFEE
  8777                           wreg	equ	0xFE8
  8778                           postdec1	equ	0xFE5
  8779                           fsr1l	equ	0xFE1
  8780                           postinc2	equ	0xFDE
  8781                           postdec2	equ	0xFDD
  8782                           fsr2h	equ	0xFDA
  8783                           fsr2l	equ	0xFD9
  8784                           status	equ	0xFD8
  8785                           
  8786 ;; *************** function _Do_Flashing *****************
  8787 ;; Defined at:
  8788 ;;		line 795 in file "Lab9pC.c"
  8789 ;; Parameters:    Size  Location     Type
  8790 ;;		None
  8791 ;; Auto vars:     Size  Location     Type
  8792 ;;		None
  8793 ;; Return value:  Size  Location     Type
  8794 ;;		None               void
  8795 ;; Registers used:
  8796 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8797 ;; Tracked objects:
  8798 ;;		On entry : 0/0
  8799 ;;		On exit  : 0/0
  8800 ;;		Unchanged: 0/0
  8801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8802 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8805 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8806 ;;Total ram usage:        2 bytes
  8807 ;; Hardware stack levels used:    1
  8808 ;; Hardware stack levels required when called:   11
  8809 ;; This function calls:
  8810 ;;		_Set_EW
  8811 ;;		_Set_EW_LT
  8812 ;;		_Set_NS
  8813 ;;		_Set_NS_LT
  8814 ;;		_Wait_One_Second
  8815 ;; This function is called by:
  8816 ;;		_main
  8817 ;; This function uses a non-reentrant model
  8818 ;;
  8819                           
  8820                           	psect	text32
  8821  0035EA                     __ptext32:
  8822                           	opt stack 0
  8823  0035EA                     _Do_Flashing:
  8824                           	opt stack 19
  8825                           
  8826                           ;Lab9pC.c: 798: while(FLASHING)
  8827                           
  8828                           ;incstack = 0
  8829  0035EA  D025               	goto	l6824
  8830  0035EC                     l6806:
  8831                           
  8832                           ;Lab9pC.c: 799: {
  8833                           ;Lab9pC.c: 800: if(FLASHING_REQUEST)
  8834  0035EC  505F               	movf	_FLASHING_REQUEST,w,c
  8835  0035EE  B4D8               	btfsc	status,2,c
  8836  0035F0  D005               	goto	l6810
  8837                           
  8838                           ;Lab9pC.c: 801: {
  8839                           ;Lab9pC.c: 802: FLASHING_REQUEST = 0;
  8840  0035F2  0E00               	movlw	0
  8841  0035F4  6E5F               	movwf	_FLASHING_REQUEST,c
  8842                           
  8843                           ;Lab9pC.c: 803: FLASHING = 0;
  8844  0035F6  0E00               	movlw	0
  8845  0035F8  6E5E               	movwf	_FLASHING,c
  8846                           
  8847                           ;Lab9pC.c: 805: }
  8848  0035FA  D01D               	goto	l6824
  8849  0035FC                     l6810:
  8850                           
  8851                           ;Lab9pC.c: 806: else
  8852                           ;Lab9pC.c: 807: {
  8853                           ;Lab9pC.c: 808: Set_EW(1);
  8854  0035FC  0E01               	movlw	1
  8855  0035FE  EC45  F01C         	call	_Set_EW
  8856                           
  8857                           ;Lab9pC.c: 809: Set_EW_LT(1);
  8858  003602  0E01               	movlw	1
  8859  003604  EC23  F01C         	call	_Set_EW_LT
  8860                           
  8861                           ;Lab9pC.c: 810: Set_NS_LT(1);
  8862  003608  0E01               	movlw	1
  8863  00360A  ECDF  F01B         	call	_Set_NS_LT
  8864                           
  8865                           ;Lab9pC.c: 811: Set_NS(1);
  8866  00360E  0E01               	movlw	1
  8867  003610  EC01  F01C         	call	_Set_NS
  8868                           
  8869                           ;Lab9pC.c: 812: Wait_One_Second();
  8870  003614  EC42  F019         	call	_Wait_One_Second	;wreg free
  8871                           
  8872                           ;Lab9pC.c: 813: Set_EW(0);
  8873  003618  0E00               	movlw	0
  8874  00361A  EC45  F01C         	call	_Set_EW
  8875                           
  8876                           ;Lab9pC.c: 814: Set_EW_LT(0);
  8877  00361E  0E00               	movlw	0
  8878  003620  EC23  F01C         	call	_Set_EW_LT
  8879                           
  8880                           ;Lab9pC.c: 815: Set_NS_LT(0);
  8881  003624  0E00               	movlw	0
  8882  003626  ECDF  F01B         	call	_Set_NS_LT
  8883                           
  8884                           ;Lab9pC.c: 816: Set_NS(0);
  8885  00362A  0E00               	movlw	0
  8886  00362C  EC01  F01C         	call	_Set_NS
  8887                           
  8888                           ;Lab9pC.c: 817: Wait_One_Second();
  8889  003630  EC42  F019         	call	_Wait_One_Second	;wreg free
  8890  003634  D000               	goto	l6824
  8891  003636                     l6824:
  8892  003636  505E               	movf	_FLASHING,w,c
  8893  003638  A4D8               	btfss	status,2,c
  8894  00363A  D7D8               	goto	l6806
  8895  00363C  0012               	return		;funcret
  8896  00363E                     __end_of_Do_Flashing:
  8897                           	opt stack 0
  8898                           tblptru	equ	0xFF8
  8899                           tblptrh	equ	0xFF7
  8900                           tblptrl	equ	0xFF6
  8901                           tablat	equ	0xFF5
  8902                           prodh	equ	0xFF4
  8903                           prodl	equ	0xFF3
  8904                           intcon	equ	0xFF2
  8905                           intcon2	equ	0xFF1
  8906                           intcon3	equ	0xFF0
  8907                           postinc0	equ	0xFEE
  8908                           wreg	equ	0xFE8
  8909                           postdec1	equ	0xFE5
  8910                           fsr1l	equ	0xFE1
  8911                           postinc2	equ	0xFDE
  8912                           postdec2	equ	0xFDD
  8913                           fsr2h	equ	0xFDA
  8914                           fsr2l	equ	0xFD9
  8915                           status	equ	0xFD8
  8916                           
  8917 ;; *************** function _Day_Mode *****************
  8918 ;; Defined at:
  8919 ;;		line 498 in file "Lab9pC.c"
  8920 ;; Parameters:    Size  Location     Type
  8921 ;;		None
  8922 ;; Auto vars:     Size  Location     Type
  8923 ;;		None
  8924 ;; Return value:  Size  Location     Type
  8925 ;;		None               void
  8926 ;; Registers used:
  8927 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8928 ;; Tracked objects:
  8929 ;;		On entry : 0/0
  8930 ;;		On exit  : 0/0
  8931 ;;		Unchanged: 0/0
  8932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8936 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8937 ;;Total ram usage:        0 bytes
  8938 ;; Hardware stack levels used:    1
  8939 ;; Hardware stack levels required when called:   12
  8940 ;; This function calls:
  8941 ;;		_PED_Control
  8942 ;;		_Set_EW
  8943 ;;		_Set_EW_LT
  8944 ;;		_Set_NS
  8945 ;;		_Set_NS_LT
  8946 ;;		_Wait_N_Seconds
  8947 ;;		_update_LCD_misc
  8948 ;; This function is called by:
  8949 ;;		_main
  8950 ;; This function uses a non-reentrant model
  8951 ;;
  8952                           
  8953                           	psect	text33
  8954  002C26                     __ptext33:
  8955                           	opt stack 0
  8956  002C26                     _Day_Mode:
  8957                           	opt stack 18
  8958                           
  8959                           ;Lab9pC.c: 500: update_LCD_misc();
  8960                           
  8961                           ;incstack = 0
  8962  002C26  EC71  F00C         	call	_update_LCD_misc	;wreg free
  8963                           
  8964                           ;Lab9pC.c: 501: MODE = 1;
  8965  002C2A  0E00               	movlw	0
  8966  002C2C  0100               	movlb	0	; () banked
  8967  002C2E  6FB0               	movwf	(_MODE+1)& (0+255),b
  8968  002C30  0E01               	movlw	1
  8969  002C32  6FAF               	movwf	_MODE& (0+255),b
  8970                           
  8971                           ; BSR set to: 0
  8972                           ;Lab9pC.c: 502: PORTBbits.RB7 = 1;
  8973  002C34  8E81               	bsf	3969,7,c	;volatile
  8974                           
  8975                           ; BSR set to: 0
  8976                           ;Lab9pC.c: 503: Act_Mode_Txt[0] = 'D';
  8977  002C36  0E44               	movlw	68
  8978  002C38  0100               	movlb	0	; () banked
  8979  002C3A  6F9C               	movwf	_Act_Mode_Txt& (0+255),b
  8980                           
  8981                           ; BSR set to: 0
  8982                           ;Lab9pC.c: 505: Set_EW(1);
  8983  002C3C  0E01               	movlw	1
  8984  002C3E  EC45  F01C         	call	_Set_EW
  8985                           
  8986                           ;Lab9pC.c: 506: Set_EW_LT(1);
  8987  002C42  0E01               	movlw	1
  8988  002C44  EC23  F01C         	call	_Set_EW_LT
  8989                           
  8990                           ;Lab9pC.c: 507: Set_NS_LT(1);
  8991  002C48  0E01               	movlw	1
  8992  002C4A  ECDF  F01B         	call	_Set_NS_LT
  8993                           
  8994                           ;Lab9pC.c: 508: Set_NS(2);
  8995  002C4E  0E02               	movlw	2
  8996  002C50  EC01  F01C         	call	_Set_NS
  8997                           
  8998                           ;Lab9pC.c: 510: if(NS_PED_SW ==1)
  8999  002C54  0460               	decf	_NS_PED_SW,w,c
  9000  002C56  A4D8               	btfss	status,2,c
  9001  002C58  D005               	goto	l478
  9002                           
  9003                           ;Lab9pC.c: 511: {
  9004                           ;Lab9pC.c: 512: PED_Control(2,7);
  9005  002C5A  0E07               	movlw	7
  9006  002C5C  6E4A               	movwf	PED_Control@Num_Sec,c
  9007  002C5E  0E02               	movlw	2
  9008  002C60  EC34  F01A         	call	_PED_Control
  9009  002C64                     l478:
  9010                           
  9011                           ;Lab9pC.c: 513: }
  9012                           ;Lab9pC.c: 515: Wait_N_Seconds(8);
  9013  002C64  0E08               	movlw	8
  9014  002C66  EC67  F01C         	call	_Wait_N_Seconds
  9015                           
  9016                           ;Lab9pC.c: 517: Set_NS(3);
  9017  002C6A  0E03               	movlw	3
  9018  002C6C  EC01  F01C         	call	_Set_NS
  9019                           
  9020                           ;Lab9pC.c: 518: Wait_N_Seconds(2);
  9021  002C70  0E02               	movlw	2
  9022  002C72  EC67  F01C         	call	_Wait_N_Seconds
  9023                           
  9024                           ;Lab9pC.c: 520: Set_NS(1);
  9025  002C76  0E01               	movlw	1
  9026  002C78  EC01  F01C         	call	_Set_NS
  9027                           
  9028                           ;Lab9pC.c: 522: if (PORTBbits.RB5 == 1)
  9029  002C7C  AA81               	btfss	3969,5,c	;volatile
  9030  002C7E  D010               	goto	l6860
  9031                           
  9032                           ;Lab9pC.c: 523: {
  9033                           ;Lab9pC.c: 524: Set_EW_LT(2);
  9034  002C80  0E02               	movlw	2
  9035  002C82  EC23  F01C         	call	_Set_EW_LT
  9036                           
  9037                           ;Lab9pC.c: 525: Wait_N_Seconds(7);
  9038  002C86  0E07               	movlw	7
  9039  002C88  EC67  F01C         	call	_Wait_N_Seconds
  9040                           
  9041                           ;Lab9pC.c: 527: Set_EW_LT(3);
  9042  002C8C  0E03               	movlw	3
  9043  002C8E  EC23  F01C         	call	_Set_EW_LT
  9044                           
  9045                           ;Lab9pC.c: 528: Wait_N_Seconds(2);
  9046  002C92  0E02               	movlw	2
  9047  002C94  EC67  F01C         	call	_Wait_N_Seconds
  9048                           
  9049                           ;Lab9pC.c: 530: Set_EW_LT(1);
  9050  002C98  0E01               	movlw	1
  9051  002C9A  EC23  F01C         	call	_Set_EW_LT
  9052  002C9E  D000               	goto	l6860
  9053  002CA0                     l6860:
  9054                           
  9055                           ;Lab9pC.c: 531: }
  9056                           ;Lab9pC.c: 533: Set_EW(2);
  9057  002CA0  0E02               	movlw	2
  9058  002CA2  EC45  F01C         	call	_Set_EW
  9059                           
  9060                           ;Lab9pC.c: 534: if(EW_PED_SW == 1)
  9061  002CA6  045D               	decf	_EW_PED_SW,w,c
  9062  002CA8  A4D8               	btfss	status,2,c
  9063  002CAA  D006               	goto	l6866
  9064                           
  9065                           ;Lab9pC.c: 535: {
  9066                           ;Lab9pC.c: 536: PED_Control(0,6);
  9067  002CAC  0E06               	movlw	6
  9068  002CAE  6E4A               	movwf	PED_Control@Num_Sec,c
  9069  002CB0  0E00               	movlw	0
  9070  002CB2  EC34  F01A         	call	_PED_Control
  9071  002CB6  D000               	goto	l6866
  9072  002CB8                     l6866:
  9073                           
  9074                           ;Lab9pC.c: 537: }
  9075                           ;Lab9pC.c: 539: Set_EW(2);
  9076  002CB8  0E02               	movlw	2
  9077  002CBA  EC45  F01C         	call	_Set_EW
  9078                           
  9079                           ;Lab9pC.c: 540: Wait_N_Seconds(6);
  9080  002CBE  0E06               	movlw	6
  9081  002CC0  EC67  F01C         	call	_Wait_N_Seconds
  9082                           
  9083                           ;Lab9pC.c: 542: Set_EW(3);
  9084  002CC4  0E03               	movlw	3
  9085  002CC6  EC45  F01C         	call	_Set_EW
  9086                           
  9087                           ;Lab9pC.c: 543: Wait_N_Seconds(2);
  9088  002CCA  0E02               	movlw	2
  9089  002CCC  EC67  F01C         	call	_Wait_N_Seconds
  9090                           
  9091                           ;Lab9pC.c: 545: Set_EW(1);
  9092  002CD0  0E01               	movlw	1
  9093  002CD2  EC45  F01C         	call	_Set_EW
  9094                           
  9095                           ;Lab9pC.c: 548: if (PORTBbits.RB4 == 1)
  9096  002CD6  A881               	btfss	3969,4,c	;volatile
  9097  002CD8  D010               	goto	l482
  9098                           
  9099                           ;Lab9pC.c: 549: {
  9100                           ;Lab9pC.c: 550: Set_NS_LT(2);
  9101  002CDA  0E02               	movlw	2
  9102  002CDC  ECDF  F01B         	call	_Set_NS_LT
  9103                           
  9104                           ;Lab9pC.c: 551: Wait_N_Seconds(6);
  9105  002CE0  0E06               	movlw	6
  9106  002CE2  EC67  F01C         	call	_Wait_N_Seconds
  9107                           
  9108                           ;Lab9pC.c: 553: Set_NS_LT(3);
  9109  002CE6  0E03               	movlw	3
  9110  002CE8  ECDF  F01B         	call	_Set_NS_LT
  9111                           
  9112                           ;Lab9pC.c: 554: Wait_N_Seconds(2);
  9113  002CEC  0E02               	movlw	2
  9114  002CEE  EC67  F01C         	call	_Wait_N_Seconds
  9115                           
  9116                           ;Lab9pC.c: 556: Set_NS_LT(1);
  9117  002CF2  0E01               	movlw	1
  9118  002CF4  ECDF  F01B         	call	_Set_NS_LT
  9119  002CF8  D000               	goto	l482
  9120  002CFA                     l482:
  9121  002CFA  0012               	return		;funcret
  9122  002CFC                     __end_of_Day_Mode:
  9123                           	opt stack 0
  9124                           tblptru	equ	0xFF8
  9125                           tblptrh	equ	0xFF7
  9126                           tblptrl	equ	0xFF6
  9127                           tablat	equ	0xFF5
  9128                           prodh	equ	0xFF4
  9129                           prodl	equ	0xFF3
  9130                           intcon	equ	0xFF2
  9131                           intcon2	equ	0xFF1
  9132                           intcon3	equ	0xFF0
  9133                           postinc0	equ	0xFEE
  9134                           wreg	equ	0xFE8
  9135                           postdec1	equ	0xFE5
  9136                           fsr1l	equ	0xFE1
  9137                           postinc2	equ	0xFDE
  9138                           postdec2	equ	0xFDD
  9139                           fsr2h	equ	0xFDA
  9140                           fsr2l	equ	0xFD9
  9141                           status	equ	0xFD8
  9142                           
  9143 ;; *************** function _Wait_N_Seconds *****************
  9144 ;; Defined at:
  9145 ;;		line 653 in file "Lab9pC.c"
  9146 ;; Parameters:    Size  Location     Type
  9147 ;;  seconds         1    wreg     unsigned char 
  9148 ;; Auto vars:     Size  Location     Type
  9149 ;;  seconds         1   73[COMRAM] unsigned char 
  9150 ;;  I               1   74[COMRAM] unsigned char 
  9151 ;; Return value:  Size  Location     Type
  9152 ;;		None               void
  9153 ;; Registers used:
  9154 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9155 ;; Tracked objects:
  9156 ;;		On entry : 0/0
  9157 ;;		On exit  : 0/0
  9158 ;;		Unchanged: 0/0
  9159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9161 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9163 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9164 ;;Total ram usage:        2 bytes
  9165 ;; Hardware stack levels used:    1
  9166 ;; Hardware stack levels required when called:   11
  9167 ;; This function calls:
  9168 ;;		_Wait_One_Second
  9169 ;;		_update_LCD_count
  9170 ;; This function is called by:
  9171 ;;		_Day_Mode
  9172 ;;		_Night_Mode
  9173 ;; This function uses a non-reentrant model
  9174 ;;
  9175                           
  9176                           	psect	text34
  9177  0038CE                     __ptext34:
  9178                           	opt stack 0
  9179  0038CE                     _Wait_N_Seconds:
  9180                           	opt stack 18
  9181                           
  9182                           ;incstack = 0
  9183                           ;Wait_N_Seconds@seconds stored from wreg
  9184  0038CE  6E4A               	movwf	Wait_N_Seconds@seconds,c
  9185                           
  9186                           ;Lab9pC.c: 655: char I;
  9187                           ;Lab9pC.c: 656: for (I = seconds; I> 0; I--)
  9188  0038D0  C04A  F04B         	movff	Wait_N_Seconds@seconds,Wait_N_Seconds@I
  9189  0038D4                     l6208:
  9190  0038D4  504B               	movf	Wait_N_Seconds@I,w,c
  9191  0038D6  B4D8               	btfsc	status,2,c
  9192  0038D8  D015               	goto	l6222
  9193  0038DA  D001               	goto	l6212
  9194  0038DC  D013               	goto	l6222
  9195  0038DE                     l6212:
  9196                           
  9197                           ;Lab9pC.c: 657: {
  9198                           ;Lab9pC.c: 658: PORTD = LED_7seg[I] & 0xFF;
  9199  0038DE  504B               	movf	Wait_N_Seconds@I,w,c
  9200  0038E0  0D01               	mullw	1
  9201  0038E2  0E80               	movlw	low _LED_7seg
  9202  0038E4  24F3               	addwf	prodl,w,c
  9203  0038E6  6ED9               	movwf	fsr2l,c
  9204  0038E8  0E00               	movlw	high _LED_7seg
  9205  0038EA  20F4               	addwfc	prodh,w,c
  9206  0038EC  6EDA               	movwf	fsr2h,c
  9207  0038EE  50DF               	movf	indf2,w,c
  9208  0038F0  6E83               	movwf	3971,c	;volatile
  9209                           
  9210                           ;Lab9pC.c: 659: update_LCD_count(direction, I);
  9211  0038F2  C04B  F048         	movff	Wait_N_Seconds@I,update_LCD_count@count
  9212  0038F6  5066               	movf	_direction,w,c
  9213  0038F8  EC43  F00F         	call	_update_LCD_count
  9214                           
  9215                           ;Lab9pC.c: 660: Wait_One_Second();
  9216  0038FC  EC42  F019         	call	_Wait_One_Second	;wreg free
  9217  003900  064B               	decf	Wait_N_Seconds@I,f,c
  9218  003902  D7E8               	goto	l6208
  9219  003904                     l6222:
  9220                           
  9221                           ;Lab9pC.c: 661: }
  9222                           ;Lab9pC.c: 662: update_LCD_count(direction, 0);
  9223  003904  0E00               	movlw	0
  9224  003906  6E48               	movwf	update_LCD_count@count,c
  9225  003908  5066               	movf	_direction,w,c
  9226  00390A  EC43  F00F         	call	_update_LCD_count
  9227  00390E  0012               	return		;funcret
  9228  003910                     __end_of_Wait_N_Seconds:
  9229                           	opt stack 0
  9230                           tblptru	equ	0xFF8
  9231                           tblptrh	equ	0xFF7
  9232                           tblptrl	equ	0xFF6
  9233                           tablat	equ	0xFF5
  9234                           prodh	equ	0xFF4
  9235                           prodl	equ	0xFF3
  9236                           intcon	equ	0xFF2
  9237                           intcon2	equ	0xFF1
  9238                           intcon3	equ	0xFF0
  9239                           postinc0	equ	0xFEE
  9240                           wreg	equ	0xFE8
  9241                           postdec1	equ	0xFE5
  9242                           fsr1l	equ	0xFE1
  9243                           indf2	equ	0xFDF
  9244                           postinc2	equ	0xFDE
  9245                           postdec2	equ	0xFDD
  9246                           fsr2h	equ	0xFDA
  9247                           fsr2l	equ	0xFD9
  9248                           status	equ	0xFD8
  9249                           
  9250 ;; *************** function _update_LCD_count *****************
  9251 ;; Defined at:
  9252 ;;		line 711 in file "Lab9pC.c"
  9253 ;; Parameters:    Size  Location     Type
  9254 ;;  direction       1    wreg     unsigned char 
  9255 ;;  count           1   71[COMRAM] unsigned char 
  9256 ;; Auto vars:     Size  Location     Type
  9257 ;;  direction       1   72[COMRAM] unsigned char 
  9258 ;; Return value:  Size  Location     Type
  9259 ;;		None               void
  9260 ;; Registers used:
  9261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9262 ;; Tracked objects:
  9263 ;;		On entry : 0/0
  9264 ;;		On exit  : 0/0
  9265 ;;		Unchanged: 0/0
  9266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9267 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9268 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9270 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9271 ;;Total ram usage:        2 bytes
  9272 ;; Hardware stack levels used:    1
  9273 ;; Hardware stack levels required when called:    9
  9274 ;; This function calls:
  9275 ;;		___awdiv
  9276 ;;		___awmod
  9277 ;;		_drawtext
  9278 ;; This function is called by:
  9279 ;;		_Wait_N_Seconds
  9280 ;; This function uses a non-reentrant model
  9281 ;;
  9282                           
  9283                           	psect	text35
  9284  001E86                     __ptext35:
  9285                           	opt stack 0
  9286  001E86                     _update_LCD_count:
  9287                           	opt stack 19
  9288                           
  9289                           ;incstack = 0
  9290                           ;update_LCD_count@direction stored from wreg
  9291  001E86  6E49               	movwf	update_LCD_count@direction,c
  9292                           
  9293                           ;Lab9pC.c: 713: switch (direction)
  9294  001E88  D0B6               	goto	l6034
  9295  001E8A                     l6016:
  9296                           
  9297                           ;Lab9pC.c: 716: EW_Count[0] = count/10 + '0';
  9298  001E8A  C048  F015         	movff	update_LCD_count@count,___awdiv@dividend
  9299  001E8E  6A16               	clrf	___awdiv@dividend+1,c
  9300  001E90  0E00               	movlw	0
  9301  001E92  6E18               	movwf	___awdiv@divisor+1,c
  9302  001E94  0E0A               	movlw	10
  9303  001E96  6E17               	movwf	___awdiv@divisor,c
  9304  001E98  ECE6  F017         	call	___awdiv	;wreg free
  9305  001E9C  5015               	movf	?___awdiv,w,c
  9306  001E9E  0F30               	addlw	48
  9307  001EA0  0100               	movlb	0	; () banked
  9308  001EA2  6F8D               	movwf	_EW_Count& (0+255),b
  9309                           
  9310                           ;Lab9pC.c: 717: EW_Count[1] = count%10 + '0';
  9311  001EA4  C048  F00F         	movff	update_LCD_count@count,___awmod@dividend
  9312  001EA8  6A10               	clrf	___awmod@dividend+1,c
  9313  001EAA  0E00               	movlw	0
  9314  001EAC  6E12               	movwf	___awmod@divisor+1,c
  9315  001EAE  0E0A               	movlw	10
  9316  001EB0  6E11               	movwf	___awmod@divisor,c
  9317  001EB2  EC83  F019         	call	___awmod	;wreg free
  9318  001EB6  500F               	movf	?___awmod,w,c
  9319  001EB8  0F30               	addlw	48
  9320  001EBA  0100               	movlb	0	; () banked
  9321  001EBC  6F8E               	movwf	(_EW_Count+1)& (0+255),b
  9322                           
  9323                           ; BSR set to: 0
  9324                           ;Lab9pC.c: 718: drawtext(100, 20 + 10, EW_Count, 0x07FF, 0x0000, 2);
  9325  001EBE  0E1E               	movlw	30
  9326  001EC0  6E37               	movwf	drawtext@y,c
  9327  001EC2  0E8D               	movlw	low _EW_Count
  9328  001EC4  6E38               	movwf	drawtext@_text,c
  9329  001EC6  0E00               	movlw	high _EW_Count
  9330  001EC8  6E39               	movwf	drawtext@_text+1,c
  9331  001ECA  0E07               	movlw	7
  9332  001ECC  6E3B               	movwf	drawtext@color+1,c
  9333  001ECE  683A               	setf	drawtext@color,c
  9334  001ED0  0E00               	movlw	0
  9335  001ED2  6E3D               	movwf	drawtext@bg+1,c
  9336  001ED4  0E00               	movlw	0
  9337  001ED6  6E3C               	movwf	drawtext@bg,c
  9338  001ED8  0E02               	movlw	2
  9339  001EDA  6E3E               	movwf	drawtext@size,c
  9340  001EDC  0E64               	movlw	100
  9341  001EDE  EC36  F015         	call	_drawtext
  9342                           
  9343                           ;Lab9pC.c: 719: break;
  9344  001EE2  D097               	goto	l523
  9345  001EE4                     l6020:
  9346                           
  9347                           ;Lab9pC.c: 722: EWLT_Count[0] = count/10 + '0';
  9348  001EE4  C048  F015         	movff	update_LCD_count@count,___awdiv@dividend
  9349  001EE8  6A16               	clrf	___awdiv@dividend+1,c
  9350  001EEA  0E00               	movlw	0
  9351  001EEC  6E18               	movwf	___awdiv@divisor+1,c
  9352  001EEE  0E0A               	movlw	10
  9353  001EF0  6E17               	movwf	___awdiv@divisor,c
  9354  001EF2  ECE6  F017         	call	___awdiv	;wreg free
  9355  001EF6  5015               	movf	?___awdiv,w,c
  9356  001EF8  0F30               	addlw	48
  9357  001EFA  0100               	movlb	0	; () banked
  9358  001EFC  6F8A               	movwf	_EWLT_Count& (0+255),b
  9359                           
  9360                           ;Lab9pC.c: 723: EWLT_Count[1] = count%10 + '0';
  9361  001EFE  C048  F00F         	movff	update_LCD_count@count,___awmod@dividend
  9362  001F02  6A10               	clrf	___awmod@dividend+1,c
  9363  001F04  0E00               	movlw	0
  9364  001F06  6E12               	movwf	___awmod@divisor+1,c
  9365  001F08  0E0A               	movlw	10
  9366  001F0A  6E11               	movwf	___awmod@divisor,c
  9367  001F0C  EC83  F019         	call	___awmod	;wreg free
  9368  001F10  500F               	movf	?___awmod,w,c
  9369  001F12  0F30               	addlw	48
  9370  001F14  0100               	movlb	0	; () banked
  9371  001F16  6F8B               	movwf	(_EWLT_Count+1)& (0+255),b
  9372                           
  9373                           ; BSR set to: 0
  9374                           ;Lab9pC.c: 724: drawtext(100, 50 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  9375  001F18  0E3C               	movlw	60
  9376  001F1A  6E37               	movwf	drawtext@y,c
  9377  001F1C  0E8A               	movlw	low _EWLT_Count
  9378  001F1E  6E38               	movwf	drawtext@_text,c
  9379  001F20  0E00               	movlw	high _EWLT_Count
  9380  001F22  6E39               	movwf	drawtext@_text+1,c
  9381  001F24  0EFF               	movlw	255
  9382  001F26  6E3B               	movwf	drawtext@color+1,c
  9383  001F28  683A               	setf	drawtext@color,c
  9384  001F2A  0E00               	movlw	0
  9385  001F2C  6E3D               	movwf	drawtext@bg+1,c
  9386  001F2E  0E00               	movlw	0
  9387  001F30  6E3C               	movwf	drawtext@bg,c
  9388  001F32  0E02               	movlw	2
  9389  001F34  6E3E               	movwf	drawtext@size,c
  9390  001F36  0E64               	movlw	100
  9391  001F38  EC36  F015         	call	_drawtext
  9392                           
  9393                           ;Lab9pC.c: 725: break;
  9394  001F3C  D06A               	goto	l523
  9395  001F3E                     l6024:
  9396                           
  9397                           ;Lab9pC.c: 728: NS_Count[0] = count/10 + '0';
  9398  001F3E  C048  F015         	movff	update_LCD_count@count,___awdiv@dividend
  9399  001F42  6A16               	clrf	___awdiv@dividend+1,c
  9400  001F44  0E00               	movlw	0
  9401  001F46  6E18               	movwf	___awdiv@divisor+1,c
  9402  001F48  0E0A               	movlw	10
  9403  001F4A  6E17               	movwf	___awdiv@divisor,c
  9404  001F4C  ECE6  F017         	call	___awdiv	;wreg free
  9405  001F50  5015               	movf	?___awdiv,w,c
  9406  001F52  0F30               	addlw	48
  9407  001F54  0100               	movlb	0	; () banked
  9408  001F56  6F93               	movwf	_NS_Count& (0+255),b
  9409                           
  9410                           ;Lab9pC.c: 729: NS_Count[1] = count%10 + '0';
  9411  001F58  C048  F00F         	movff	update_LCD_count@count,___awmod@dividend
  9412  001F5C  6A10               	clrf	___awmod@dividend+1,c
  9413  001F5E  0E00               	movlw	0
  9414  001F60  6E12               	movwf	___awmod@divisor+1,c
  9415  001F62  0E0A               	movlw	10
  9416  001F64  6E11               	movwf	___awmod@divisor,c
  9417  001F66  EC83  F019         	call	___awmod	;wreg free
  9418  001F6A  500F               	movf	?___awmod,w,c
  9419  001F6C  0F30               	addlw	48
  9420  001F6E  0100               	movlb	0	; () banked
  9421  001F70  6F94               	movwf	(_NS_Count+1)& (0+255),b
  9422                           
  9423                           ; BSR set to: 0
  9424                           ;Lab9pC.c: 730: drawtext(100, 80 + 10, NS_Count, 0x001F, 0x0000, 2);
  9425  001F72  0E5A               	movlw	90
  9426  001F74  6E37               	movwf	drawtext@y,c
  9427  001F76  0E93               	movlw	low _NS_Count
  9428  001F78  6E38               	movwf	drawtext@_text,c
  9429  001F7A  0E00               	movlw	high _NS_Count
  9430  001F7C  6E39               	movwf	drawtext@_text+1,c
  9431  001F7E  0E00               	movlw	0
  9432  001F80  6E3B               	movwf	drawtext@color+1,c
  9433  001F82  0E1F               	movlw	31
  9434  001F84  6E3A               	movwf	drawtext@color,c
  9435  001F86  0E00               	movlw	0
  9436  001F88  6E3D               	movwf	drawtext@bg+1,c
  9437  001F8A  0E00               	movlw	0
  9438  001F8C  6E3C               	movwf	drawtext@bg,c
  9439  001F8E  0E02               	movlw	2
  9440  001F90  6E3E               	movwf	drawtext@size,c
  9441  001F92  0E64               	movlw	100
  9442  001F94  EC36  F015         	call	_drawtext
  9443                           
  9444                           ;Lab9pC.c: 731: break;
  9445  001F98  D03C               	goto	l523
  9446  001F9A                     l6028:
  9447                           
  9448                           ;Lab9pC.c: 734: NSLT_Count[0] = count/10 + '0';
  9449  001F9A  C048  F015         	movff	update_LCD_count@count,___awdiv@dividend
  9450  001F9E  6A16               	clrf	___awdiv@dividend+1,c
  9451  001FA0  0E00               	movlw	0
  9452  001FA2  6E18               	movwf	___awdiv@divisor+1,c
  9453  001FA4  0E0A               	movlw	10
  9454  001FA6  6E17               	movwf	___awdiv@divisor,c
  9455  001FA8  ECE6  F017         	call	___awdiv	;wreg free
  9456  001FAC  5015               	movf	?___awdiv,w,c
  9457  001FAE  0F30               	addlw	48
  9458  001FB0  0100               	movlb	0	; () banked
  9459  001FB2  6F90               	movwf	_NSLT_Count& (0+255),b
  9460                           
  9461                           ;Lab9pC.c: 735: NSLT_Count[1] = count%10 + '0';
  9462  001FB4  C048  F00F         	movff	update_LCD_count@count,___awmod@dividend
  9463  001FB8  6A10               	clrf	___awmod@dividend+1,c
  9464  001FBA  0E00               	movlw	0
  9465  001FBC  6E12               	movwf	___awmod@divisor+1,c
  9466  001FBE  0E0A               	movlw	10
  9467  001FC0  6E11               	movwf	___awmod@divisor,c
  9468  001FC2  EC83  F019         	call	___awmod	;wreg free
  9469  001FC6  500F               	movf	?___awmod,w,c
  9470  001FC8  0F30               	addlw	48
  9471  001FCA  0100               	movlb	0	; () banked
  9472  001FCC  6F91               	movwf	(_NSLT_Count+1)& (0+255),b
  9473                           
  9474                           ; BSR set to: 0
  9475                           ;Lab9pC.c: 736: drawtext(100, 110 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  9476  001FCE  0E78               	movlw	120
  9477  001FD0  6E37               	movwf	drawtext@y,c
  9478  001FD2  0E90               	movlw	low _NSLT_Count
  9479  001FD4  6E38               	movwf	drawtext@_text,c
  9480  001FD6  0E00               	movlw	high _NSLT_Count
  9481  001FD8  6E39               	movwf	drawtext@_text+1,c
  9482  001FDA  0EF8               	movlw	248
  9483  001FDC  6E3B               	movwf	drawtext@color+1,c
  9484  001FDE  0E1F               	movlw	31
  9485  001FE0  6E3A               	movwf	drawtext@color,c
  9486  001FE2  0E00               	movlw	0
  9487  001FE4  6E3D               	movwf	drawtext@bg+1,c
  9488  001FE6  0E00               	movlw	0
  9489  001FE8  6E3C               	movwf	drawtext@bg,c
  9490  001FEA  0E02               	movlw	2
  9491  001FEC  6E3E               	movwf	drawtext@size,c
  9492  001FEE  0E64               	movlw	100
  9493  001FF0  EC36  F015         	call	_drawtext
  9494                           
  9495                           ;Lab9pC.c: 738: }
  9496                           
  9497                           ;Lab9pC.c: 737: break;
  9498  001FF4  D00E               	goto	l523
  9499  001FF6                     l6034:
  9500  001FF6  5049               	movf	update_LCD_count@direction,w,c
  9501                           
  9502                           ; Switch size 1, requested type "space"
  9503                           ; Number of cases is 4, Range of values is 0 to 3
  9504                           ; switch strategies available:
  9505                           ; Name         Instructions Cycles
  9506                           ; simple_byte           13     7 (average)
  9507                           ;	Chosen strategy is simple_byte
  9508  001FF8  0A00               	xorlw	0	; case 0
  9509  001FFA  B4D8               	btfsc	status,2,c
  9510  001FFC  D746               	goto	l6016
  9511  001FFE  0A01               	xorlw	1	; case 1
  9512  002000  B4D8               	btfsc	status,2,c
  9513  002002  D770               	goto	l6020
  9514  002004  0A03               	xorlw	3	; case 2
  9515  002006  B4D8               	btfsc	status,2,c
  9516  002008  D79A               	goto	l6024
  9517  00200A  0A01               	xorlw	1	; case 3
  9518  00200C  B4D8               	btfsc	status,2,c
  9519  00200E  D7C5               	goto	l6028
  9520  002010  D000               	goto	l523
  9521  002012                     l523:
  9522  002012  0012               	return		;funcret
  9523  002014                     __end_of_update_LCD_count:
  9524                           	opt stack 0
  9525                           tblptru	equ	0xFF8
  9526                           tblptrh	equ	0xFF7
  9527                           tblptrl	equ	0xFF6
  9528                           tablat	equ	0xFF5
  9529                           prodh	equ	0xFF4
  9530                           prodl	equ	0xFF3
  9531                           intcon	equ	0xFF2
  9532                           intcon2	equ	0xFF1
  9533                           intcon3	equ	0xFF0
  9534                           postinc0	equ	0xFEE
  9535                           wreg	equ	0xFE8
  9536                           postdec1	equ	0xFE5
  9537                           fsr1l	equ	0xFE1
  9538                           indf2	equ	0xFDF
  9539                           postinc2	equ	0xFDE
  9540                           postdec2	equ	0xFDD
  9541                           fsr2h	equ	0xFDA
  9542                           fsr2l	equ	0xFD9
  9543                           status	equ	0xFD8
  9544                           
  9545 ;; *************** function _Wait_One_Second *****************
  9546 ;; Defined at:
  9547 ;;		line 618 in file "Lab9pC.c"
  9548 ;; Parameters:    Size  Location     Type
  9549 ;;		None
  9550 ;; Auto vars:     Size  Location     Type
  9551 ;;		None
  9552 ;; Return value:  Size  Location     Type
  9553 ;;		None               void
  9554 ;; Registers used:
  9555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9556 ;; Tracked objects:
  9557 ;;		On entry : 0/0
  9558 ;;		On exit  : 0/0
  9559 ;;		Unchanged: 0/0
  9560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9565 ;;Total ram usage:        0 bytes
  9566 ;; Hardware stack levels used:    1
  9567 ;; Hardware stack levels required when called:   10
  9568 ;; This function calls:
  9569 ;;		_Wait_Half_Second
  9570 ;;		_drawtext
  9571 ;;		_strcpy
  9572 ;;		_update_LCD_misc
  9573 ;; This function is called by:
  9574 ;;		_Wait_N_Seconds
  9575 ;;		_Do_Flashing
  9576 ;; This function uses a non-reentrant model
  9577 ;;
  9578                           
  9579                           	psect	text36
  9580  003284                     __ptext36:
  9581                           	opt stack 0
  9582  003284                     _Wait_One_Second:
  9583                           	opt stack 18
  9584                           
  9585                           ;Lab9pC.c: 620: PORTDbits.RD7 = 1;
  9586                           
  9587                           ;incstack = 0
  9588  003284  8E83               	bsf	3971,7,c	;volatile
  9589                           
  9590                           ;Lab9pC.c: 621: strcpy(txt,"*");
  9591  003286  C05B  F00F         	movff	_txt,strcpy@to
  9592  00328A  C05C  F010         	movff	_txt+1,strcpy@to+1
  9593  00328E  0EFC               	movlw	low STR_5
  9594  003290  6E11               	movwf	strcpy@from,c
  9595  003292  0EFF               	movlw	high STR_5
  9596  003294  6E12               	movwf	strcpy@from+1,c
  9597  003296  ECE4  F01C         	call	_strcpy	;wreg free
  9598                           
  9599                           ;Lab9pC.c: 622: drawtext(120,10,txt,0xFFFF,0x0000,1);
  9600  00329A  0E0A               	movlw	10
  9601  00329C  6E37               	movwf	drawtext@y,c
  9602  00329E  C05B  F038         	movff	_txt,drawtext@_text
  9603  0032A2  C05C  F039         	movff	_txt+1,drawtext@_text+1
  9604  0032A6  0EFF               	movlw	255
  9605  0032A8  6E3B               	movwf	drawtext@color+1,c
  9606  0032AA  683A               	setf	drawtext@color,c
  9607  0032AC  0E00               	movlw	0
  9608  0032AE  6E3D               	movwf	drawtext@bg+1,c
  9609  0032B0  0E00               	movlw	0
  9610  0032B2  6E3C               	movwf	drawtext@bg,c
  9611  0032B4  0E01               	movlw	1
  9612  0032B6  6E3E               	movwf	drawtext@size,c
  9613  0032B8  0E78               	movlw	120
  9614  0032BA  EC36  F015         	call	_drawtext
  9615                           
  9616                           ;Lab9pC.c: 623: Wait_Half_Second();
  9617  0032BE  EC98  F01D         	call	_Wait_Half_Second	;wreg free
  9618                           
  9619                           ;Lab9pC.c: 625: PORTDbits.RD7 = 0;
  9620  0032C2  9E83               	bcf	3971,7,c	;volatile
  9621                           
  9622                           ;Lab9pC.c: 626: strcpy(txt," ");
  9623  0032C4  C05B  F00F         	movff	_txt,strcpy@to
  9624  0032C8  C05C  F010         	movff	_txt+1,strcpy@to+1
  9625  0032CC  0EFA               	movlw	low STR_16
  9626  0032CE  6E11               	movwf	strcpy@from,c
  9627  0032D0  0EFF               	movlw	high STR_16
  9628  0032D2  6E12               	movwf	strcpy@from+1,c
  9629  0032D4  ECE4  F01C         	call	_strcpy	;wreg free
  9630                           
  9631                           ;Lab9pC.c: 627: drawtext(120,10,txt,0xFFFF,0x0000,1);
  9632  0032D8  0E0A               	movlw	10
  9633  0032DA  6E37               	movwf	drawtext@y,c
  9634  0032DC  C05B  F038         	movff	_txt,drawtext@_text
  9635  0032E0  C05C  F039         	movff	_txt+1,drawtext@_text+1
  9636  0032E4  0EFF               	movlw	255
  9637  0032E6  6E3B               	movwf	drawtext@color+1,c
  9638  0032E8  683A               	setf	drawtext@color,c
  9639  0032EA  0E00               	movlw	0
  9640  0032EC  6E3D               	movwf	drawtext@bg+1,c
  9641  0032EE  0E00               	movlw	0
  9642  0032F0  6E3C               	movwf	drawtext@bg,c
  9643  0032F2  0E01               	movlw	1
  9644  0032F4  6E3E               	movwf	drawtext@size,c
  9645  0032F6  0E78               	movlw	120
  9646  0032F8  EC36  F015         	call	_drawtext
  9647                           
  9648                           ;Lab9pC.c: 628: Wait_Half_Second();
  9649  0032FC  EC98  F01D         	call	_Wait_Half_Second	;wreg free
  9650                           
  9651                           ;Lab9pC.c: 629: update_LCD_misc();
  9652  003300  EC71  F00C         	call	_update_LCD_misc	;wreg free
  9653  003304  0012               	return		;funcret
  9654  003306                     __end_of_Wait_One_Second:
  9655                           	opt stack 0
  9656                           tblptru	equ	0xFF8
  9657                           tblptrh	equ	0xFF7
  9658                           tblptrl	equ	0xFF6
  9659                           tablat	equ	0xFF5
  9660                           prodh	equ	0xFF4
  9661                           prodl	equ	0xFF3
  9662                           intcon	equ	0xFF2
  9663                           intcon2	equ	0xFF1
  9664                           intcon3	equ	0xFF0
  9665                           postinc0	equ	0xFEE
  9666                           wreg	equ	0xFE8
  9667                           postdec1	equ	0xFE5
  9668                           fsr1l	equ	0xFE1
  9669                           indf2	equ	0xFDF
  9670                           postinc2	equ	0xFDE
  9671                           postdec2	equ	0xFDD
  9672                           fsr2h	equ	0xFDA
  9673                           fsr2l	equ	0xFD9
  9674                           status	equ	0xFD8
  9675                           
  9676 ;; *************** function _update_LCD_misc *****************
  9677 ;; Defined at:
  9678 ;;		line 761 in file "Lab9pC.c"
  9679 ;; Parameters:    Size  Location     Type
  9680 ;;		None
  9681 ;; Auto vars:     Size  Location     Type
  9682 ;;  nStep           2   71[COMRAM] int 
  9683 ;; Return value:  Size  Location     Type
  9684 ;;		None               void
  9685 ;; Registers used:
  9686 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9687 ;; Tracked objects:
  9688 ;;		On entry : 0/0
  9689 ;;		On exit  : 0/0
  9690 ;;		Unchanged: 0/0
  9691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9693 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9695 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9696 ;;Total ram usage:        2 bytes
  9697 ;; Hardware stack levels used:    1
  9698 ;; Hardware stack levels required when called:    9
  9699 ;; This function calls:
  9700 ;;		___awtoft
  9701 ;;		___ftdiv
  9702 ;;		___ftge
  9703 ;;		___wmul
  9704 ;;		_drawtext
  9705 ;;		_get_full_ADC
  9706 ;; This function is called by:
  9707 ;;		_Day_Mode
  9708 ;;		_Wait_One_Second
  9709 ;; This function uses a non-reentrant model
  9710 ;;
  9711                           
  9712                           	psect	text37
  9713  0018E2                     __ptext37:
  9714                           	opt stack 0
  9715  0018E2                     _update_LCD_misc:
  9716                           	opt stack 18
  9717                           
  9718                           ;Lab9pC.c: 763: int nStep = get_full_ADC();
  9719                           
  9720                           ;incstack = 0
  9721  0018E2  EC54  F01D         	call	_get_full_ADC	;wreg free
  9722  0018E6  C00F  F048         	movff	?_get_full_ADC,update_LCD_misc@nStep
  9723  0018EA  C010  F049         	movff	?_get_full_ADC+1,update_LCD_misc@nStep+1
  9724                           
  9725                           ;Lab9pC.c: 764: volt = nStep * 5 /1024.0;
  9726  0018EE  C048  F01D         	movff	update_LCD_misc@nStep,___wmul@multiplier
  9727  0018F2  C049  F01E         	movff	update_LCD_misc@nStep+1,___wmul@multiplier+1
  9728  0018F6  0E00               	movlw	0
  9729  0018F8  6E20               	movwf	___wmul@multiplicand+1,c
  9730  0018FA  0E05               	movlw	5
  9731  0018FC  6E1F               	movwf	___wmul@multiplicand,c
  9732  0018FE  EC40  F01D         	call	___wmul	;wreg free
  9733  001902  C01D  F023         	movff	?___wmul,___awtoft@c
  9734  001906  C01E  F024         	movff	?___wmul+1,___awtoft@c+1
  9735  00190A  ECC6  F01C         	call	___awtoft	;wreg free
  9736  00190E  C023  F027         	movff	?___awtoft,___ftdiv@f1
  9737  001912  C024  F028         	movff	?___awtoft+1,___ftdiv@f1+1
  9738  001916  C025  F029         	movff	?___awtoft+2,___ftdiv@f1+2
  9739  00191A  0E00               	movlw	0
  9740  00191C  6E2A               	movwf	___ftdiv@f2,c
  9741  00191E  0E80               	movlw	128
  9742  001920  6E2B               	movwf	___ftdiv@f2+1,c
  9743  001922  0E44               	movlw	68
  9744  001924  6E2C               	movwf	___ftdiv@f2+2,c
  9745  001926  ECC5  F014         	call	___ftdiv	;wreg free
  9746  00192A  C027  F0AC         	movff	?___ftdiv,_volt
  9747  00192E  C028  F0AD         	movff	?___ftdiv+1,_volt+1
  9748  001932  C029  F0AE         	movff	?___ftdiv+2,_volt+2
  9749                           
  9750                           ;Lab9pC.c: 765: SW_MODE = volt < 3.5 ? 1:0;
  9751  001936  C0AC  F00F         	movff	_volt,___ftge@ff1
  9752  00193A  C0AD  F010         	movff	_volt+1,___ftge@ff1+1
  9753  00193E  C0AE  F011         	movff	_volt+2,___ftge@ff1+2
  9754  001942  0E00               	movlw	0
  9755  001944  6E12               	movwf	___ftge@ff2,c
  9756  001946  0E60               	movlw	96
  9757  001948  6E13               	movwf	___ftge@ff2+1,c
  9758  00194A  0E40               	movlw	64
  9759  00194C  6E14               	movwf	___ftge@ff2+2,c
  9760  00194E  EC9B  F017         	call	___ftge	;wreg free
  9761  001952  B0D8               	btfsc	status,0,c
  9762  001954  D002               	goto	u5150
  9763  001956  0E01               	movlw	1
  9764  001958  D001               	goto	u5160
  9765  00195A                     u5150:
  9766  00195A  0E00               	movlw	0
  9767  00195C                     u5160:
  9768  00195C  6E63               	movwf	_SW_MODE,c
  9769                           
  9770                           ;Lab9pC.c: 767: SW_EWPED = EW_PED_SW;
  9771  00195E  C05D  F062         	movff	_EW_PED_SW,_SW_EWPED
  9772                           
  9773                           ;Lab9pC.c: 768: SW_EWLT = PORTBbits.RB5;
  9774  001962  0E00               	movlw	0
  9775  001964  BA81               	btfsc	3969,5,c	;volatile
  9776  001966  0E01               	movlw	1
  9777  001968  6E61               	movwf	_SW_EWLT,c
  9778                           
  9779                           ;Lab9pC.c: 769: SW_NSPED = NS_PED_SW;
  9780  00196A  C060  F0B6         	movff	_NS_PED_SW,_SW_NSPED
  9781                           
  9782                           ;Lab9pC.c: 770: SW_NSLT = PORTBbits.RB4;
  9783  00196E  0E00               	movlw	0
  9784  001970  B881               	btfsc	3969,4,c	;volatile
  9785  001972  0E01               	movlw	1
  9786  001974  0100               	movlb	0	; () banked
  9787  001976  6FB5               	movwf	_SW_NSLT& (0+255),b
  9788                           
  9789                           ; BSR set to: 0
  9790                           ;Lab9pC.c: 772: if (SW_EWPED == 0) SW_EWPED_Txt[0] = '0'; else SW_EWPED_Txt[0] = '1';
  9791  001978  5062               	movf	_SW_EWPED,w,c
  9792  00197A  A4D8               	btfss	status,2,c
  9793  00197C  D002               	goto	l5772
  9794                           
  9795                           ; BSR set to: 0
  9796  00197E  0E30               	movlw	48
  9797  001980  D001               	goto	L8
  9798  001982                     l5772:
  9799                           
  9800                           ; BSR set to: 0
  9801  001982  0E31               	movlw	49
  9802  001984                     L8:
  9803  001984  0100               	movlb	0	; () banked
  9804  001986  6FA4               	movwf	_SW_EWPED_Txt& (0+255),b
  9805                           
  9806                           ; BSR set to: 0
  9807                           ;Lab9pC.c: 773: if (SW_EWLT == 0) SW_EWLT_Txt[0] = '0'; else SW_EWLT_Txt[0] = '1';
  9808  001988  5061               	movf	_SW_EWLT,w,c
  9809  00198A  A4D8               	btfss	status,2,c
  9810  00198C  D002               	goto	l5776
  9811                           
  9812                           ; BSR set to: 0
  9813  00198E  0E30               	movlw	48
  9814  001990  D001               	goto	L9
  9815  001992                     l5776:
  9816                           
  9817                           ; BSR set to: 0
  9818  001992  0E31               	movlw	49
  9819  001994                     L9:
  9820  001994  0100               	movlb	0	; () banked
  9821  001996  6FA2               	movwf	_SW_EWLT_Txt& (0+255),b
  9822                           
  9823                           ; BSR set to: 0
  9824                           ;Lab9pC.c: 774: if (SW_NSPED == 0) SW_NSPED_Txt[0] = '0'; else SW_NSPED_Txt[0] = '1';
  9825  001998  0100               	movlb	0	; () banked
  9826  00199A  51B6               	movf	_SW_NSPED& (0+255),w,b
  9827  00199C  0100               	movlb	0	; () banked
  9828  00199E  A4D8               	btfss	status,2,c
  9829  0019A0  D002               	goto	l5780
  9830                           
  9831                           ; BSR set to: 0
  9832  0019A2  0E30               	movlw	48
  9833  0019A4  D001               	goto	L10
  9834  0019A6                     l5780:
  9835                           
  9836                           ; BSR set to: 0
  9837  0019A6  0E31               	movlw	49
  9838  0019A8                     L10:
  9839  0019A8  0100               	movlb	0	; () banked
  9840  0019AA  6FAA               	movwf	_SW_NSPED_Txt& (0+255),b
  9841                           
  9842                           ; BSR set to: 0
  9843                           ;Lab9pC.c: 775: if (SW_NSLT == 0) SW_NSLT_Txt[0] = '0'; else SW_NSLT_Txt[0] = '1';
  9844  0019AC  0100               	movlb	0	; () banked
  9845  0019AE  51B5               	movf	_SW_NSLT& (0+255),w,b
  9846  0019B0  0100               	movlb	0	; () banked
  9847  0019B2  A4D8               	btfss	status,2,c
  9848  0019B4  D002               	goto	l5784
  9849                           
  9850                           ; BSR set to: 0
  9851  0019B6  0E30               	movlw	48
  9852  0019B8  D001               	goto	L11
  9853  0019BA                     l5784:
  9854                           
  9855                           ; BSR set to: 0
  9856  0019BA  0E31               	movlw	49
  9857  0019BC                     L11:
  9858  0019BC  0100               	movlb	0	; () banked
  9859  0019BE  6FA8               	movwf	_SW_NSLT_Txt& (0+255),b
  9860                           
  9861                           ; BSR set to: 0
  9862                           ;Lab9pC.c: 776: if (FLASHING_REQUEST == 0) FlashingR_Txt[0] = '0'; else FlashingR_Txt[0]
      +                           = '1';
  9863  0019C0  505F               	movf	_FLASHING_REQUEST,w,c
  9864  0019C2  A4D8               	btfss	status,2,c
  9865  0019C4  D002               	goto	l5788
  9866                           
  9867                           ; BSR set to: 0
  9868  0019C6  0E30               	movlw	48
  9869  0019C8  D001               	goto	L12
  9870  0019CA                     l5788:
  9871                           
  9872                           ; BSR set to: 0
  9873  0019CA  0E31               	movlw	49
  9874  0019CC                     L12:
  9875  0019CC  0100               	movlb	0	; () banked
  9876  0019CE  6F9E               	movwf	_FlashingR_Txt& (0+255),b
  9877                           
  9878                           ; BSR set to: 0
  9879                           ;Lab9pC.c: 777: if (FLASHING == 0) FlashingS_Txt[0] = '0'; else FlashingS_Txt[0] = '1';
  9880  0019D0  505E               	movf	_FLASHING,w,c
  9881  0019D2  A4D8               	btfss	status,2,c
  9882  0019D4  D002               	goto	l5792
  9883                           
  9884                           ; BSR set to: 0
  9885  0019D6  0E30               	movlw	48
  9886  0019D8  D001               	goto	L13
  9887  0019DA                     l5792:
  9888                           
  9889                           ; BSR set to: 0
  9890  0019DA  0E31               	movlw	49
  9891  0019DC                     L13:
  9892  0019DC  0100               	movlb	0	; () banked
  9893  0019DE  6FA0               	movwf	_FlashingS_Txt& (0+255),b
  9894                           
  9895                           ; BSR set to: 0
  9896                           ;Lab9pC.c: 779: if (SW_MODE == 0) SW_MODE_Txt[0]= 'N'; else SW_MODE_Txt[0] = 'D';
  9897  0019E0  5063               	movf	_SW_MODE,w,c
  9898  0019E2  A4D8               	btfss	status,2,c
  9899  0019E4  D002               	goto	l5796
  9900                           
  9901                           ; BSR set to: 0
  9902  0019E6  0E4E               	movlw	78
  9903  0019E8  D001               	goto	L14
  9904  0019EA                     l5796:
  9905                           
  9906                           ; BSR set to: 0
  9907  0019EA  0E44               	movlw	68
  9908  0019EC                     L14:
  9909  0019EC  0100               	movlb	0	; () banked
  9910  0019EE  6FA6               	movwf	_SW_MODE_Txt& (0+255),b
  9911  0019F0  D000               	goto	l5798
  9912  0019F2                     l5798:
  9913                           
  9914                           ; BSR set to: 0
  9915                           ;Lab9pC.c: 781: drawtext(35, 10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  9916  0019F2  0E0A               	movlw	10
  9917  0019F4  6E37               	movwf	drawtext@y,c
  9918  0019F6  0E9C               	movlw	low _Act_Mode_Txt
  9919  0019F8  6E38               	movwf	drawtext@_text,c
  9920  0019FA  0E00               	movlw	high _Act_Mode_Txt
  9921  0019FC  6E39               	movwf	drawtext@_text+1,c
  9922  0019FE  0EFF               	movlw	255
  9923  001A00  6E3B               	movwf	drawtext@color+1,c
  9924  001A02  683A               	setf	drawtext@color,c
  9925  001A04  0E00               	movlw	0
  9926  001A06  6E3D               	movwf	drawtext@bg+1,c
  9927  001A08  0E00               	movlw	0
  9928  001A0A  6E3C               	movwf	drawtext@bg,c
  9929  001A0C  0E01               	movlw	1
  9930  001A0E  6E3E               	movwf	drawtext@size,c
  9931  001A10  0E23               	movlw	35
  9932  001A12  EC36  F015         	call	_drawtext
  9933                           
  9934                           ;Lab9pC.c: 782: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  9935  001A16  0E95               	movlw	149
  9936  001A18  6E37               	movwf	drawtext@y,c
  9937  001A1A  0EA4               	movlw	low _SW_EWPED_Txt
  9938  001A1C  6E38               	movwf	drawtext@_text,c
  9939  001A1E  0E00               	movlw	high _SW_EWPED_Txt
  9940  001A20  6E39               	movwf	drawtext@_text+1,c
  9941  001A22  0EFF               	movlw	255
  9942  001A24  6E3B               	movwf	drawtext@color+1,c
  9943  001A26  683A               	setf	drawtext@color,c
  9944  001A28  0E00               	movlw	0
  9945  001A2A  6E3D               	movwf	drawtext@bg+1,c
  9946  001A2C  0E00               	movlw	0
  9947  001A2E  6E3C               	movwf	drawtext@bg,c
  9948  001A30  0E01               	movlw	1
  9949  001A32  6E3E               	movwf	drawtext@size,c
  9950  001A34  0E06               	movlw	6
  9951  001A36  EC36  F015         	call	_drawtext
  9952                           
  9953                           ;Lab9pC.c: 783: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  9954  001A3A  0E95               	movlw	149
  9955  001A3C  6E37               	movwf	drawtext@y,c
  9956  001A3E  0EA2               	movlw	low _SW_EWLT_Txt
  9957  001A40  6E38               	movwf	drawtext@_text,c
  9958  001A42  0E00               	movlw	high _SW_EWLT_Txt
  9959  001A44  6E39               	movwf	drawtext@_text+1,c
  9960  001A46  0EFF               	movlw	255
  9961  001A48  6E3B               	movwf	drawtext@color+1,c
  9962  001A4A  683A               	setf	drawtext@color,c
  9963  001A4C  0E00               	movlw	0
  9964  001A4E  6E3D               	movwf	drawtext@bg+1,c
  9965  001A50  0E00               	movlw	0
  9966  001A52  6E3C               	movwf	drawtext@bg,c
  9967  001A54  0E01               	movlw	1
  9968  001A56  6E3E               	movwf	drawtext@size,c
  9969  001A58  0E20               	movlw	32
  9970  001A5A  EC36  F015         	call	_drawtext
  9971                           
  9972                           ;Lab9pC.c: 784: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  9973  001A5E  0E95               	movlw	149
  9974  001A60  6E37               	movwf	drawtext@y,c
  9975  001A62  0EAA               	movlw	low _SW_NSPED_Txt
  9976  001A64  6E38               	movwf	drawtext@_text,c
  9977  001A66  0E00               	movlw	high _SW_NSPED_Txt
  9978  001A68  6E39               	movwf	drawtext@_text+1,c
  9979  001A6A  0EFF               	movlw	255
  9980  001A6C  6E3B               	movwf	drawtext@color+1,c
  9981  001A6E  683A               	setf	drawtext@color,c
  9982  001A70  0E00               	movlw	0
  9983  001A72  6E3D               	movwf	drawtext@bg+1,c
  9984  001A74  0E00               	movlw	0
  9985  001A76  6E3C               	movwf	drawtext@bg,c
  9986  001A78  0E01               	movlw	1
  9987  001A7A  6E3E               	movwf	drawtext@size,c
  9988  001A7C  0E3A               	movlw	58
  9989  001A7E  EC36  F015         	call	_drawtext
  9990                           
  9991                           ;Lab9pC.c: 785: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  9992  001A82  0E95               	movlw	149
  9993  001A84  6E37               	movwf	drawtext@y,c
  9994  001A86  0EA8               	movlw	low _SW_NSLT_Txt
  9995  001A88  6E38               	movwf	drawtext@_text,c
  9996  001A8A  0E00               	movlw	high _SW_NSLT_Txt
  9997  001A8C  6E39               	movwf	drawtext@_text+1,c
  9998  001A8E  0EFF               	movlw	255
  9999  001A90  6E3B               	movwf	drawtext@color+1,c
 10000  001A92  683A               	setf	drawtext@color,c
 10001  001A94  0E00               	movlw	0
 10002  001A96  6E3D               	movwf	drawtext@bg+1,c
 10003  001A98  0E00               	movlw	0
 10004  001A9A  6E3C               	movwf	drawtext@bg,c
 10005  001A9C  0E01               	movlw	1
 10006  001A9E  6E3E               	movwf	drawtext@size,c
 10007  001AA0  0E57               	movlw	87
 10008  001AA2  EC36  F015         	call	_drawtext
 10009                           
 10010                           ;Lab9pC.c: 787: drawtext(70, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
 10011  001AA6  0E0A               	movlw	10
 10012  001AA8  6E37               	movwf	drawtext@y,c
 10013  001AAA  0E9E               	movlw	low _FlashingR_Txt
 10014  001AAC  6E38               	movwf	drawtext@_text,c
 10015  001AAE  0E00               	movlw	high _FlashingR_Txt
 10016  001AB0  6E39               	movwf	drawtext@_text+1,c
 10017  001AB2  0EFF               	movlw	255
 10018  001AB4  6E3B               	movwf	drawtext@color+1,c
 10019  001AB6  683A               	setf	drawtext@color,c
 10020  001AB8  0E00               	movlw	0
 10021  001ABA  6E3D               	movwf	drawtext@bg+1,c
 10022  001ABC  0E00               	movlw	0
 10023  001ABE  6E3C               	movwf	drawtext@bg,c
 10024  001AC0  0E01               	movlw	1
 10025  001AC2  6E3E               	movwf	drawtext@size,c
 10026  001AC4  0E46               	movlw	70
 10027  001AC6  EC36  F015         	call	_drawtext
 10028                           
 10029                           ;Lab9pC.c: 788: drawtext(100, 10, FlashingS_Txt, 0xFFFF, 0x0000, 1);
 10030  001ACA  0E0A               	movlw	10
 10031  001ACC  6E37               	movwf	drawtext@y,c
 10032  001ACE  0EA0               	movlw	low _FlashingS_Txt
 10033  001AD0  6E38               	movwf	drawtext@_text,c
 10034  001AD2  0E00               	movlw	high _FlashingS_Txt
 10035  001AD4  6E39               	movwf	drawtext@_text+1,c
 10036  001AD6  0EFF               	movlw	255
 10037  001AD8  6E3B               	movwf	drawtext@color+1,c
 10038  001ADA  683A               	setf	drawtext@color,c
 10039  001ADC  0E00               	movlw	0
 10040  001ADE  6E3D               	movwf	drawtext@bg+1,c
 10041  001AE0  0E00               	movlw	0
 10042  001AE2  6E3C               	movwf	drawtext@bg,c
 10043  001AE4  0E01               	movlw	1
 10044  001AE6  6E3E               	movwf	drawtext@size,c
 10045  001AE8  0E64               	movlw	100
 10046  001AEA  EC36  F015         	call	_drawtext
 10047                           
 10048                           ;Lab9pC.c: 790: drawtext(112, 140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
 10049  001AEE  0E95               	movlw	149
 10050  001AF0  6E37               	movwf	drawtext@y,c
 10051  001AF2  0EA6               	movlw	low _SW_MODE_Txt
 10052  001AF4  6E38               	movwf	drawtext@_text,c
 10053  001AF6  0E00               	movlw	high _SW_MODE_Txt
 10054  001AF8  6E39               	movwf	drawtext@_text+1,c
 10055  001AFA  0EFF               	movlw	255
 10056  001AFC  6E3B               	movwf	drawtext@color+1,c
 10057  001AFE  683A               	setf	drawtext@color,c
 10058  001B00  0E00               	movlw	0
 10059  001B02  6E3D               	movwf	drawtext@bg+1,c
 10060  001B04  0E00               	movlw	0
 10061  001B06  6E3C               	movwf	drawtext@bg,c
 10062  001B08  0E01               	movlw	1
 10063  001B0A  6E3E               	movwf	drawtext@size,c
 10064  001B0C  0E70               	movlw	112
 10065  001B0E  EC36  F015         	call	_drawtext
 10066  001B12  0012               	return		;funcret
 10067  001B14                     __end_of_update_LCD_misc:
 10068                           	opt stack 0
 10069                           tblptru	equ	0xFF8
 10070                           tblptrh	equ	0xFF7
 10071                           tblptrl	equ	0xFF6
 10072                           tablat	equ	0xFF5
 10073                           prodh	equ	0xFF4
 10074                           prodl	equ	0xFF3
 10075                           intcon	equ	0xFF2
 10076                           intcon2	equ	0xFF1
 10077                           intcon3	equ	0xFF0
 10078                           postinc0	equ	0xFEE
 10079                           wreg	equ	0xFE8
 10080                           postdec1	equ	0xFE5
 10081                           fsr1l	equ	0xFE1
 10082                           indf2	equ	0xFDF
 10083                           postinc2	equ	0xFDE
 10084                           postdec2	equ	0xFDD
 10085                           fsr2h	equ	0xFDA
 10086                           fsr2l	equ	0xFD9
 10087                           status	equ	0xFD8
 10088                           
 10089 ;; *************** function _get_full_ADC *****************
 10090 ;; Defined at:
 10091 ;;		line 393 in file "Lab9pC.c"
 10092 ;; Parameters:    Size  Location     Type
 10093 ;;		None
 10094 ;; Auto vars:     Size  Location     Type
 10095 ;;  result          2   18[COMRAM] unsigned int 
 10096 ;; Return value:  Size  Location     Type
 10097 ;;                  2   14[COMRAM] unsigned int 
 10098 ;; Registers used:
 10099 ;;		wreg, status,2, status,0
 10100 ;; Tracked objects:
 10101 ;;		On entry : 0/0
 10102 ;;		On exit  : 0/0
 10103 ;;		Unchanged: 0/0
 10104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10105 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10106 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10107 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10108 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10109 ;;Total ram usage:        6 bytes
 10110 ;; Hardware stack levels used:    1
 10111 ;; Hardware stack levels required when called:    2
 10112 ;; This function calls:
 10113 ;;		Nothing
 10114 ;; This function is called by:
 10115 ;;		_main
 10116 ;;		_update_LCD_misc
 10117 ;; This function uses a non-reentrant model
 10118 ;;
 10119                           
 10120                           	psect	text38
 10121  003AA8                     __ptext38:
 10122                           	opt stack 0
 10123  003AA8                     _get_full_ADC:
 10124                           	opt stack 28
 10125                           
 10126                           ;Lab9pC.c: 395: unsigned int result;
 10127                           ;Lab9pC.c: 396: ADCON0bits.GO=1;
 10128                           
 10129                           ;incstack = 0
 10130  003AA8  82C2               	bsf	4034,1,c	;volatile
 10131                           
 10132                           ;Lab9pC.c: 397: while(ADCON0bits.DONE==1);
 10133  003AAA  D000               	goto	l423
 10134  003AAC                     l423:
 10135  003AAC  B2C2               	btfsc	4034,1,c	;volatile
 10136  003AAE  D7FE               	goto	l423
 10137                           
 10138                           ;Lab9pC.c: 398: result = (ADRESH * 0x100) + ADRESL;
 10139  003AB0  50C4               	movf	4036,w,c	;volatile
 10140  003AB2  6E12               	movwf	(??_get_full_ADC+1)& (0+255),c
 10141  003AB4  6A11               	clrf	??_get_full_ADC& (0+255),c
 10142  003AB6  50C3               	movf	4035,w,c	;volatile
 10143  003AB8  2411               	addwf	??_get_full_ADC,w,c
 10144  003ABA  6E13               	movwf	get_full_ADC@result,c
 10145  003ABC  0E00               	movlw	0
 10146  003ABE  2012               	addwfc	??_get_full_ADC+1,w,c
 10147  003AC0  6E14               	movwf	get_full_ADC@result+1,c
 10148                           
 10149                           ;Lab9pC.c: 400: return result;
 10150  003AC2  C013  F00F         	movff	get_full_ADC@result,?_get_full_ADC
 10151  003AC6  C014  F010         	movff	get_full_ADC@result+1,?_get_full_ADC+1
 10152  003ACA  D000               	goto	l426
 10153  003ACC                     l426:
 10154  003ACC  0012               	return		;funcret
 10155  003ACE                     __end_of_get_full_ADC:
 10156                           	opt stack 0
 10157                           tblptru	equ	0xFF8
 10158                           tblptrh	equ	0xFF7
 10159                           tblptrl	equ	0xFF6
 10160                           tablat	equ	0xFF5
 10161                           prodh	equ	0xFF4
 10162                           prodl	equ	0xFF3
 10163                           intcon	equ	0xFF2
 10164                           intcon2	equ	0xFF1
 10165                           intcon3	equ	0xFF0
 10166                           postinc0	equ	0xFEE
 10167                           wreg	equ	0xFE8
 10168                           postdec1	equ	0xFE5
 10169                           fsr1l	equ	0xFE1
 10170                           indf2	equ	0xFDF
 10171                           postinc2	equ	0xFDE
 10172                           postdec2	equ	0xFDD
 10173                           fsr2h	equ	0xFDA
 10174                           fsr2l	equ	0xFD9
 10175                           status	equ	0xFD8
 10176                           
 10177 ;; *************** function ___ftge *****************
 10178 ;; Defined at:
 10179 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
 10180 ;; Parameters:    Size  Location     Type
 10181 ;;  ff1             3   14[COMRAM] float 
 10182 ;;  ff2             3   17[COMRAM] float 
 10183 ;; Auto vars:     Size  Location     Type
 10184 ;;		None
 10185 ;; Return value:  Size  Location     Type
 10186 ;;		None               void
 10187 ;; Registers used:
 10188 ;;		wreg, status,2, status,0
 10189 ;; Tracked objects:
 10190 ;;		On entry : 0/0
 10191 ;;		On exit  : 0/0
 10192 ;;		Unchanged: 0/0
 10193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10194 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10196 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10197 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10198 ;;Total ram usage:        9 bytes
 10199 ;; Hardware stack levels used:    1
 10200 ;; Hardware stack levels required when called:    2
 10201 ;; This function calls:
 10202 ;;		Nothing
 10203 ;; This function is called by:
 10204 ;;		_main
 10205 ;;		_update_LCD_misc
 10206 ;;		_printf
 10207 ;; This function uses a non-reentrant model
 10208 ;;
 10209                           
 10210                           	psect	text39
 10211  002F36                     __ptext39:
 10212                           	opt stack 0
 10213  002F36                     ___ftge:
 10214                           	opt stack 27
 10215                           
 10216                           ;incstack = 0
 10217  002F36  AE11               	btfss	___ftge@ff1+2,7,c
 10218  002F38  D017               	goto	l5726
 10219  002F3A  C00F  F015         	movff	___ftge@ff1,??___ftge
 10220  002F3E  C010  F016         	movff	___ftge@ff1+1,??___ftge+1
 10221  002F42  C011  F017         	movff	___ftge@ff1+2,??___ftge+2
 10222  002F46  1E15               	comf	??___ftge,f,c
 10223  002F48  1E16               	comf	??___ftge+1,f,c
 10224  002F4A  1E17               	comf	??___ftge+2,f,c
 10225  002F4C  2A15               	incf	??___ftge,f,c
 10226  002F4E  0E00               	movlw	0
 10227  002F50  2216               	addwfc	??___ftge+1,f,c
 10228  002F52  2217               	addwfc	??___ftge+2,f,c
 10229  002F54  0E00               	movlw	0
 10230  002F56  2415               	addwf	??___ftge,w,c
 10231  002F58  6E0F               	movwf	___ftge@ff1,c
 10232  002F5A  0E00               	movlw	0
 10233  002F5C  2016               	addwfc	??___ftge+1,w,c
 10234  002F5E  6E10               	movwf	___ftge@ff1+1,c
 10235  002F60  0E80               	movlw	128
 10236  002F62  2017               	addwfc	??___ftge+2,w,c
 10237  002F64  6E11               	movwf	___ftge@ff1+2,c
 10238  002F66  D000               	goto	l5726
 10239  002F68                     l5726:
 10240  002F68  AE14               	btfss	___ftge@ff2+2,7,c
 10241  002F6A  D017               	goto	l5730
 10242  002F6C  C012  F015         	movff	___ftge@ff2,??___ftge
 10243  002F70  C013  F016         	movff	___ftge@ff2+1,??___ftge+1
 10244  002F74  C014  F017         	movff	___ftge@ff2+2,??___ftge+2
 10245  002F78  1E15               	comf	??___ftge,f,c
 10246  002F7A  1E16               	comf	??___ftge+1,f,c
 10247  002F7C  1E17               	comf	??___ftge+2,f,c
 10248  002F7E  2A15               	incf	??___ftge,f,c
 10249  002F80  0E00               	movlw	0
 10250  002F82  2216               	addwfc	??___ftge+1,f,c
 10251  002F84  2217               	addwfc	??___ftge+2,f,c
 10252  002F86  0E00               	movlw	0
 10253  002F88  2415               	addwf	??___ftge,w,c
 10254  002F8A  6E12               	movwf	___ftge@ff2,c
 10255  002F8C  0E00               	movlw	0
 10256  002F8E  2016               	addwfc	??___ftge+1,w,c
 10257  002F90  6E13               	movwf	___ftge@ff2+1,c
 10258  002F92  0E80               	movlw	128
 10259  002F94  2017               	addwfc	??___ftge+2,w,c
 10260  002F96  6E14               	movwf	___ftge@ff2+2,c
 10261  002F98  D000               	goto	l5730
 10262  002F9A                     l5730:
 10263  002F9A  0E00               	movlw	0
 10264  002F9C  1A0F               	xorwf	___ftge@ff1,f,c
 10265  002F9E  0E00               	movlw	0
 10266  002FA0  1A10               	xorwf	___ftge@ff1+1,f,c
 10267  002FA2  0E80               	movlw	128
 10268  002FA4  1A11               	xorwf	___ftge@ff1+2,f,c
 10269  002FA6  0E00               	movlw	0
 10270  002FA8  1A12               	xorwf	___ftge@ff2,f,c
 10271  002FAA  0E00               	movlw	0
 10272  002FAC  1A13               	xorwf	___ftge@ff2+1,f,c
 10273  002FAE  0E80               	movlw	128
 10274  002FB0  1A14               	xorwf	___ftge@ff2+2,f,c
 10275  002FB2  5012               	movf	___ftge@ff2,w,c
 10276  002FB4  5C0F               	subwf	___ftge@ff1,w,c
 10277  002FB6  5013               	movf	___ftge@ff2+1,w,c
 10278  002FB8  5810               	subwfb	___ftge@ff1+1,w,c
 10279  002FBA  5014               	movf	___ftge@ff2+2,w,c
 10280  002FBC  5811               	subwfb	___ftge@ff1+2,w,c
 10281  002FBE  B0D8               	btfsc	status,0,c
 10282  002FC0  D002               	goto	l5736
 10283  002FC2  90D8               	bcf	status,0,c
 10284  002FC4  D002               	goto	l1106
 10285  002FC6                     l5736:
 10286  002FC6  80D8               	bsf	status,0,c
 10287  002FC8  D000               	goto	l1106
 10288  002FCA                     l1106:
 10289  002FCA  0012               	return		;funcret
 10290  002FCC                     __end_of___ftge:
 10291                           	opt stack 0
 10292                           tblptru	equ	0xFF8
 10293                           tblptrh	equ	0xFF7
 10294                           tblptrl	equ	0xFF6
 10295                           tablat	equ	0xFF5
 10296                           prodh	equ	0xFF4
 10297                           prodl	equ	0xFF3
 10298                           intcon	equ	0xFF2
 10299                           intcon2	equ	0xFF1
 10300                           intcon3	equ	0xFF0
 10301                           postinc0	equ	0xFEE
 10302                           wreg	equ	0xFE8
 10303                           postdec1	equ	0xFE5
 10304                           fsr1l	equ	0xFE1
 10305                           indf2	equ	0xFDF
 10306                           postinc2	equ	0xFDE
 10307                           postdec2	equ	0xFDD
 10308                           fsr2h	equ	0xFDA
 10309                           fsr2l	equ	0xFD9
 10310                           status	equ	0xFD8
 10311                           
 10312 ;; *************** function ___ftdiv *****************
 10313 ;; Defined at:
 10314 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
 10315 ;; Parameters:    Size  Location     Type
 10316 ;;  f1              3   38[COMRAM] float 
 10317 ;;  f2              3   41[COMRAM] float 
 10318 ;; Auto vars:     Size  Location     Type
 10319 ;;  f3              3   48[COMRAM] float 
 10320 ;;  sign            1   52[COMRAM] unsigned char 
 10321 ;;  exp             1   51[COMRAM] unsigned char 
 10322 ;;  cntr            1   47[COMRAM] unsigned char 
 10323 ;; Return value:  Size  Location     Type
 10324 ;;                  3   38[COMRAM] float 
 10325 ;; Registers used:
 10326 ;;		wreg, status,2, status,0, cstack
 10327 ;; Tracked objects:
 10328 ;;		On entry : 0/0
 10329 ;;		On exit  : 0/0
 10330 ;;		Unchanged: 0/0
 10331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10332 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10333 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10334 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10335 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10336 ;;Total ram usage:       15 bytes
 10337 ;; Hardware stack levels used:    1
 10338 ;; Hardware stack levels required when called:    3
 10339 ;; This function calls:
 10340 ;;		___ftpack
 10341 ;; This function is called by:
 10342 ;;		_main
 10343 ;;		_update_LCD_misc
 10344 ;; This function uses a non-reentrant model
 10345 ;;
 10346                           
 10347                           	psect	text40
 10348  00298A                     __ptext40:
 10349                           	opt stack 0
 10350  00298A                     ___ftdiv:
 10351                           	opt stack 27
 10352                           
 10353                           ;incstack = 0
 10354  00298A  C029  F02D         	movff	___ftdiv@f1+2,??___ftdiv
 10355  00298E  6A2E               	clrf	(??___ftdiv+1)& (0+255),c
 10356  002990  6A2F               	clrf	(??___ftdiv+2)& (0+255),c
 10357  002992  3428               	rlcf	___ftdiv@f1+1,w,c
 10358  002994  362D               	rlcf	??___ftdiv& (0+255),f,c
 10359  002996  E301               	bnc	u5051
 10360  002998  802E               	bsf	(??___ftdiv+1)& (0+255),0,c
 10361  00299A                     u5051:
 10362  00299A  502D               	movf	??___ftdiv,w,c
 10363  00299C  6E34               	movwf	___ftdiv@exp,c
 10364  00299E  5034               	movf	___ftdiv@exp,w,c
 10365  0029A0  A4D8               	btfss	status,2,c
 10366  0029A2  D002               	goto	l5670
 10367  0029A4  D00E               	goto	l5672
 10368  0029A6  D061               	goto	l1080
 10369  0029A8                     l5670:
 10370  0029A8  C02C  F02D         	movff	___ftdiv@f2+2,??___ftdiv
 10371  0029AC  6A2E               	clrf	(??___ftdiv+1)& (0+255),c
 10372  0029AE  6A2F               	clrf	(??___ftdiv+2)& (0+255),c
 10373  0029B0  342B               	rlcf	___ftdiv@f2+1,w,c
 10374  0029B2  362D               	rlcf	??___ftdiv& (0+255),f,c
 10375  0029B4  E301               	bnc	u5071
 10376  0029B6  802E               	bsf	(??___ftdiv+1)& (0+255),0,c
 10377  0029B8                     u5071:
 10378  0029B8  502D               	movf	??___ftdiv,w,c
 10379  0029BA  6E35               	movwf	___ftdiv@sign,c
 10380  0029BC  5035               	movf	___ftdiv@sign,w,c
 10381  0029BE  A4D8               	btfss	status,2,c
 10382  0029C0  D007               	goto	l5676
 10383  0029C2                     l5672:
 10384  0029C2  0E00               	movlw	0
 10385  0029C4  6E27               	movwf	?___ftdiv,c
 10386  0029C6  0E00               	movlw	0
 10387  0029C8  6E28               	movwf	?___ftdiv+1,c
 10388  0029CA  0E00               	movlw	0
 10389  0029CC  6E29               	movwf	?___ftdiv+2,c
 10390  0029CE  D04D               	goto	l1080
 10391  0029D0                     l5676:
 10392  0029D0  0E00               	movlw	0
 10393  0029D2  6E31               	movwf	___ftdiv@f3,c
 10394  0029D4  0E00               	movlw	0
 10395  0029D6  6E32               	movwf	___ftdiv@f3+1,c
 10396  0029D8  0E00               	movlw	0
 10397  0029DA  6E33               	movwf	___ftdiv@f3+2,c
 10398  0029DC  5035               	movf	___ftdiv@sign,w,c
 10399  0029DE  0F89               	addlw	137
 10400  0029E0  5E34               	subwf	___ftdiv@exp,f,c
 10401  0029E2  C029  F035         	movff	___ftdiv@f1+2,___ftdiv@sign
 10402  0029E6  502C               	movf	___ftdiv@f2+2,w,c
 10403  0029E8  1A35               	xorwf	___ftdiv@sign,f,c
 10404  0029EA  0E80               	movlw	128
 10405  0029EC  1635               	andwf	___ftdiv@sign,f,c
 10406  0029EE  8E28               	bsf	___ftdiv@f1+1,7,c
 10407  0029F0  0EFF               	movlw	255
 10408  0029F2  1627               	andwf	___ftdiv@f1,f,c
 10409  0029F4  0EFF               	movlw	255
 10410  0029F6  1628               	andwf	___ftdiv@f1+1,f,c
 10411  0029F8  0E00               	movlw	0
 10412  0029FA  1629               	andwf	___ftdiv@f1+2,f,c
 10413  0029FC  8E2B               	bsf	___ftdiv@f2+1,7,c
 10414  0029FE  0EFF               	movlw	255
 10415  002A00  162A               	andwf	___ftdiv@f2,f,c
 10416  002A02  0EFF               	movlw	255
 10417  002A04  162B               	andwf	___ftdiv@f2+1,f,c
 10418  002A06  0E00               	movlw	0
 10419  002A08  162C               	andwf	___ftdiv@f2+2,f,c
 10420  002A0A  0E18               	movlw	24
 10421  002A0C  6E30               	movwf	___ftdiv@cntr,c
 10422  002A0E  D000               	goto	l5696
 10423  002A10                     l5696:
 10424  002A10  90D8               	bcf	status,0,c
 10425  002A12  3631               	rlcf	___ftdiv@f3,f,c
 10426  002A14  3632               	rlcf	___ftdiv@f3+1,f,c
 10427  002A16  3633               	rlcf	___ftdiv@f3+2,f,c
 10428  002A18  502A               	movf	___ftdiv@f2,w,c
 10429  002A1A  5C27               	subwf	___ftdiv@f1,w,c
 10430  002A1C  502B               	movf	___ftdiv@f2+1,w,c
 10431  002A1E  5828               	subwfb	___ftdiv@f1+1,w,c
 10432  002A20  502C               	movf	___ftdiv@f2+2,w,c
 10433  002A22  5829               	subwfb	___ftdiv@f1+2,w,c
 10434  002A24  A0D8               	btfss	status,0,c
 10435  002A26  D007               	goto	l1083
 10436  002A28  502A               	movf	___ftdiv@f2,w,c
 10437  002A2A  5E27               	subwf	___ftdiv@f1,f,c
 10438  002A2C  502B               	movf	___ftdiv@f2+1,w,c
 10439  002A2E  5A28               	subwfb	___ftdiv@f1+1,f,c
 10440  002A30  502C               	movf	___ftdiv@f2+2,w,c
 10441  002A32  5A29               	subwfb	___ftdiv@f1+2,f,c
 10442  002A34  8031               	bsf	___ftdiv@f3,0,c
 10443  002A36                     l1083:
 10444  002A36  90D8               	bcf	status,0,c
 10445  002A38  3627               	rlcf	___ftdiv@f1,f,c
 10446  002A3A  3628               	rlcf	___ftdiv@f1+1,f,c
 10447  002A3C  3629               	rlcf	___ftdiv@f1+2,f,c
 10448  002A3E  2E30               	decfsz	___ftdiv@cntr,f,c
 10449  002A40  D7E7               	goto	l5696
 10450  002A42  D000               	goto	l5706
 10451  002A44                     l5706:
 10452  002A44  C031  F00F         	movff	___ftdiv@f3,___ftpack@arg
 10453  002A48  C032  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10454  002A4C  C033  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10455  002A50  C034  F012         	movff	___ftdiv@exp,___ftpack@exp
 10456  002A54  C035  F013         	movff	___ftdiv@sign,___ftpack@sign
 10457  002A58  ECE3  F016         	call	___ftpack	;wreg free
 10458  002A5C  C00F  F027         	movff	?___ftpack,?___ftdiv
 10459  002A60  C010  F028         	movff	?___ftpack+1,?___ftdiv+1
 10460  002A64  C011  F029         	movff	?___ftpack+2,?___ftdiv+2
 10461  002A68  D000               	goto	l1080
 10462  002A6A                     l1080:
 10463  002A6A  0012               	return		;funcret
 10464  002A6C                     __end_of___ftdiv:
 10465                           	opt stack 0
 10466                           tblptru	equ	0xFF8
 10467                           tblptrh	equ	0xFF7
 10468                           tblptrl	equ	0xFF6
 10469                           tablat	equ	0xFF5
 10470                           prodh	equ	0xFF4
 10471                           prodl	equ	0xFF3
 10472                           intcon	equ	0xFF2
 10473                           intcon2	equ	0xFF1
 10474                           intcon3	equ	0xFF0
 10475                           postinc0	equ	0xFEE
 10476                           wreg	equ	0xFE8
 10477                           postdec1	equ	0xFE5
 10478                           fsr1l	equ	0xFE1
 10479                           indf2	equ	0xFDF
 10480                           postinc2	equ	0xFDE
 10481                           postdec2	equ	0xFDD
 10482                           fsr2h	equ	0xFDA
 10483                           fsr2l	equ	0xFD9
 10484                           status	equ	0xFD8
 10485                           
 10486 ;; *************** function ___awtoft *****************
 10487 ;; Defined at:
 10488 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
 10489 ;; Parameters:    Size  Location     Type
 10490 ;;  c               2   34[COMRAM] int 
 10491 ;; Auto vars:     Size  Location     Type
 10492 ;;  sign            1   37[COMRAM] unsigned char 
 10493 ;; Return value:  Size  Location     Type
 10494 ;;                  3   34[COMRAM] float 
 10495 ;; Registers used:
 10496 ;;		wreg, status,2, status,0, cstack
 10497 ;; Tracked objects:
 10498 ;;		On entry : 0/0
 10499 ;;		On exit  : 0/0
 10500 ;;		Unchanged: 0/0
 10501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10502 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10503 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10505 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10506 ;;Total ram usage:        4 bytes
 10507 ;; Hardware stack levels used:    1
 10508 ;; Hardware stack levels required when called:    3
 10509 ;; This function calls:
 10510 ;;		___ftpack
 10511 ;; This function is called by:
 10512 ;;		_main
 10513 ;;		_update_LCD_misc
 10514 ;; This function uses a non-reentrant model
 10515 ;;
 10516                           
 10517                           	psect	text41
 10518  00398C                     __ptext41:
 10519                           	opt stack 0
 10520  00398C                     ___awtoft:
 10521                           	opt stack 27
 10522                           
 10523                           ;incstack = 0
 10524  00398C  0E00               	movlw	0
 10525  00398E  6E26               	movwf	___awtoft@sign,c
 10526  003990  AE24               	btfss	___awtoft@c+1,7,c
 10527  003992  D007               	goto	l5718
 10528  003994  6C23               	negf	___awtoft@c,c
 10529  003996  1E24               	comf	___awtoft@c+1,f,c
 10530  003998  B0D8               	btfsc	status,0,c
 10531  00399A  2A24               	incf	___awtoft@c+1,f,c
 10532  00399C  0E01               	movlw	1
 10533  00399E  6E26               	movwf	___awtoft@sign,c
 10534  0039A0  D000               	goto	l5718
 10535  0039A2                     l5718:
 10536  0039A2  C023  F00F         	movff	___awtoft@c,___ftpack@arg
 10537  0039A6  C024  F010         	movff	___awtoft@c+1,___ftpack@arg+1
 10538  0039AA  6A11               	clrf	___ftpack@arg+2,c
 10539  0039AC  0E8E               	movlw	142
 10540  0039AE  6E12               	movwf	___ftpack@exp,c
 10541  0039B0  C026  F013         	movff	___awtoft@sign,___ftpack@sign
 10542  0039B4  ECE3  F016         	call	___ftpack	;wreg free
 10543  0039B8  C00F  F023         	movff	?___ftpack,?___awtoft
 10544  0039BC  C010  F024         	movff	?___ftpack+1,?___awtoft+1
 10545  0039C0  C011  F025         	movff	?___ftpack+2,?___awtoft+2
 10546  0039C4  D000               	goto	l901
 10547  0039C6                     l901:
 10548  0039C6  0012               	return		;funcret
 10549  0039C8                     __end_of___awtoft:
 10550                           	opt stack 0
 10551                           tblptru	equ	0xFF8
 10552                           tblptrh	equ	0xFF7
 10553                           tblptrl	equ	0xFF6
 10554                           tablat	equ	0xFF5
 10555                           prodh	equ	0xFF4
 10556                           prodl	equ	0xFF3
 10557                           intcon	equ	0xFF2
 10558                           intcon2	equ	0xFF1
 10559                           intcon3	equ	0xFF0
 10560                           postinc0	equ	0xFEE
 10561                           wreg	equ	0xFE8
 10562                           postdec1	equ	0xFE5
 10563                           fsr1l	equ	0xFE1
 10564                           indf2	equ	0xFDF
 10565                           postinc2	equ	0xFDE
 10566                           postdec2	equ	0xFDD
 10567                           fsr2h	equ	0xFDA
 10568                           fsr2l	equ	0xFD9
 10569                           status	equ	0xFD8
 10570                           
 10571 ;; *************** function ___ftpack *****************
 10572 ;; Defined at:
 10573 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 10574 ;; Parameters:    Size  Location     Type
 10575 ;;  arg             3   14[COMRAM] unsigned um
 10576 ;;  exp             1   17[COMRAM] unsigned char 
 10577 ;;  sign            1   18[COMRAM] unsigned char 
 10578 ;; Auto vars:     Size  Location     Type
 10579 ;;		None
 10580 ;; Return value:  Size  Location     Type
 10581 ;;                  3   14[COMRAM] float 
 10582 ;; Registers used:
 10583 ;;		wreg, status,2, status,0
 10584 ;; Tracked objects:
 10585 ;;		On entry : 0/0
 10586 ;;		On exit  : 0/0
 10587 ;;		Unchanged: 0/0
 10588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10589 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10591 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10592 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10593 ;;Total ram usage:        8 bytes
 10594 ;; Hardware stack levels used:    1
 10595 ;; Hardware stack levels required when called:    2
 10596 ;; This function calls:
 10597 ;;		Nothing
 10598 ;; This function is called by:
 10599 ;;		___awtoft
 10600 ;;		___ftadd
 10601 ;;		___ftdiv
 10602 ;;		___ftmul
 10603 ;;		___lltoft
 10604 ;; This function uses a non-reentrant model
 10605 ;;
 10606                           
 10607                           	psect	text42
 10608  002DC6                     __ptext42:
 10609                           	opt stack 0
 10610  002DC6                     ___ftpack:
 10611                           	opt stack 25
 10612                           
 10613                           ;incstack = 0
 10614  002DC6  5012               	movf	___ftpack@exp,w,c
 10615  002DC8  B4D8               	btfsc	status,2,c
 10616  002DCA  D005               	goto	l5596
 10617  002DCC  500F               	movf	___ftpack@arg,w,c
 10618  002DCE  1010               	iorwf	___ftpack@arg+1,w,c
 10619  002DD0  1011               	iorwf	___ftpack@arg+2,w,c
 10620  002DD2  A4D8               	btfss	status,2,c
 10621  002DD4  D00E               	goto	l5602
 10622  002DD6                     l5596:
 10623  002DD6  0E00               	movlw	0
 10624  002DD8  6E0F               	movwf	?___ftpack,c
 10625  002DDA  0E00               	movlw	0
 10626  002DDC  6E10               	movwf	?___ftpack+1,c
 10627  002DDE  0E00               	movlw	0
 10628  002DE0  6E11               	movwf	?___ftpack+2,c
 10629  002DE2  D053               	goto	l1008
 10630  002DE4  D006               	goto	l5602
 10631  002DE6                     l5600:
 10632  002DE6  2A12               	incf	___ftpack@exp,f,c
 10633  002DE8  90D8               	bcf	status,0,c
 10634  002DEA  3211               	rrcf	___ftpack@arg+2,f,c
 10635  002DEC  3210               	rrcf	___ftpack@arg+1,f,c
 10636  002DEE  320F               	rrcf	___ftpack@arg,f,c
 10637  002DF0  D000               	goto	l5602
 10638  002DF2                     l5602:
 10639  002DF2  0E00               	movlw	0
 10640  002DF4  140F               	andwf	___ftpack@arg,w,c
 10641  002DF6  6E14               	movwf	??___ftpack& (0+255),c
 10642  002DF8  0E00               	movlw	0
 10643  002DFA  1410               	andwf	___ftpack@arg+1,w,c
 10644  002DFC  6E15               	movwf	(??___ftpack+1)& (0+255),c
 10645  002DFE  0EFE               	movlw	254
 10646  002E00  1411               	andwf	___ftpack@arg+2,w,c
 10647  002E02  6E16               	movwf	(??___ftpack+2)& (0+255),c
 10648  002E04  5014               	movf	??___ftpack,w,c
 10649  002E06  1015               	iorwf	??___ftpack+1,w,c
 10650  002E08  1016               	iorwf	??___ftpack+2,w,c
 10651  002E0A  B4D8               	btfsc	status,2,c
 10652  002E0C  D00E               	goto	l5608
 10653  002E0E  D7EB               	goto	l5600
 10654  002E10  D00C               	goto	l5608
 10655  002E12                     l5604:
 10656  002E12  2A12               	incf	___ftpack@exp,f,c
 10657  002E14  0E01               	movlw	1
 10658  002E16  260F               	addwf	___ftpack@arg,f,c
 10659  002E18  0E00               	movlw	0
 10660  002E1A  2210               	addwfc	___ftpack@arg+1,f,c
 10661  002E1C  0E00               	movlw	0
 10662  002E1E  2211               	addwfc	___ftpack@arg+2,f,c
 10663  002E20  90D8               	bcf	status,0,c
 10664  002E22  3211               	rrcf	___ftpack@arg+2,f,c
 10665  002E24  3210               	rrcf	___ftpack@arg+1,f,c
 10666  002E26  320F               	rrcf	___ftpack@arg,f,c
 10667  002E28  D000               	goto	l5608
 10668  002E2A                     l5608:
 10669  002E2A  0E00               	movlw	0
 10670  002E2C  140F               	andwf	___ftpack@arg,w,c
 10671  002E2E  6E14               	movwf	??___ftpack& (0+255),c
 10672  002E30  0E00               	movlw	0
 10673  002E32  1410               	andwf	___ftpack@arg+1,w,c
 10674  002E34  6E15               	movwf	(??___ftpack+1)& (0+255),c
 10675  002E36  0EFF               	movlw	255
 10676  002E38  1411               	andwf	___ftpack@arg+2,w,c
 10677  002E3A  6E16               	movwf	(??___ftpack+2)& (0+255),c
 10678  002E3C  5014               	movf	??___ftpack,w,c
 10679  002E3E  1015               	iorwf	??___ftpack+1,w,c
 10680  002E40  1016               	iorwf	??___ftpack+2,w,c
 10681  002E42  B4D8               	btfsc	status,2,c
 10682  002E44  D008               	goto	l5612
 10683  002E46  D7E5               	goto	l5604
 10684  002E48  D006               	goto	l5612
 10685  002E4A                     l5610:
 10686  002E4A  0612               	decf	___ftpack@exp,f,c
 10687  002E4C  90D8               	bcf	status,0,c
 10688  002E4E  360F               	rlcf	___ftpack@arg,f,c
 10689  002E50  3610               	rlcf	___ftpack@arg+1,f,c
 10690  002E52  3611               	rlcf	___ftpack@arg+2,f,c
 10691  002E54  D000               	goto	l5612
 10692  002E56                     l5612:
 10693  002E56  BE10               	btfsc	___ftpack@arg+1,7,c
 10694  002E58  D004               	goto	l1019
 10695  002E5A  0E02               	movlw	2
 10696  002E5C  6012               	cpfslt	___ftpack@exp,c
 10697  002E5E  D7F5               	goto	l5610
 10698  002E60  D000               	goto	l1019
 10699  002E62                     l1019:
 10700  002E62  B012               	btfsc	___ftpack@exp,0,c
 10701  002E64  D002               	goto	l5618
 10702  002E66  9E10               	bcf	___ftpack@arg+1,7,c
 10703  002E68  D000               	goto	l5618
 10704  002E6A                     l5618:
 10705  002E6A  90D8               	bcf	status,0,c
 10706  002E6C  3212               	rrcf	___ftpack@exp,f,c
 10707  002E6E  5012               	movf	___ftpack@exp,w,c
 10708  002E70  1211               	iorwf	___ftpack@arg+2,f,c
 10709  002E72  5013               	movf	___ftpack@sign,w,c
 10710  002E74  B4D8               	btfsc	status,2,c
 10711  002E76  D002               	goto	l5624
 10712  002E78  8E11               	bsf	___ftpack@arg+2,7,c
 10713  002E7A  D000               	goto	l5624
 10714  002E7C                     l5624:
 10715  002E7C  C00F  F00F         	movff	___ftpack@arg,?___ftpack
 10716  002E80  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
 10717  002E84  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
 10718  002E88  D000               	goto	l1008
 10719  002E8A                     l1008:
 10720  002E8A  0012               	return		;funcret
 10721  002E8C                     __end_of___ftpack:
 10722                           	opt stack 0
 10723                           tblptru	equ	0xFF8
 10724                           tblptrh	equ	0xFF7
 10725                           tblptrl	equ	0xFF6
 10726                           tablat	equ	0xFF5
 10727                           prodh	equ	0xFF4
 10728                           prodl	equ	0xFF3
 10729                           intcon	equ	0xFF2
 10730                           intcon2	equ	0xFF1
 10731                           intcon3	equ	0xFF0
 10732                           postinc0	equ	0xFEE
 10733                           wreg	equ	0xFE8
 10734                           postdec1	equ	0xFE5
 10735                           fsr1l	equ	0xFE1
 10736                           indf2	equ	0xFDF
 10737                           postinc2	equ	0xFDE
 10738                           postdec2	equ	0xFDD
 10739                           fsr2h	equ	0xFDA
 10740                           fsr2l	equ	0xFD9
 10741                           status	equ	0xFD8
 10742                           
 10743 ;; *************** function _strcpy *****************
 10744 ;; Defined at:
 10745 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
 10746 ;; Parameters:    Size  Location     Type
 10747 ;;  to              2   14[COMRAM] PTR unsigned char 
 10748 ;;		 -> NULL(0), buffer(31), 
 10749 ;;  from            2   16[COMRAM] PTR const unsigned char 
 10750 ;;		 -> STR_16(2), STR_15(2), STR_12(21), STR_11(4), 
 10751 ;;		 -> STR_10(4), STR_9(7), STR_8(12), STR_7(7), 
 10752 ;;		 -> STR_6(10), STR_5(2), STR_4(4), STR_3(4), 
 10753 ;;		 -> STR_2(6), STR_1(20), 
 10754 ;; Auto vars:     Size  Location     Type
 10755 ;;  cp              2   18[COMRAM] PTR unsigned char 
 10756 ;;		 -> NULL(0), buffer(31), 
 10757 ;; Return value:  Size  Location     Type
 10758 ;;                  2   14[COMRAM] PTR unsigned char 
 10759 ;; Registers used:
 10760 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10761 ;; Tracked objects:
 10762 ;;		On entry : 0/0
 10763 ;;		On exit  : 0/0
 10764 ;;		Unchanged: 0/0
 10765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10766 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10767 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10769 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10770 ;;Total ram usage:        6 bytes
 10771 ;; Hardware stack levels used:    1
 10772 ;; Hardware stack levels required when called:    2
 10773 ;; This function calls:
 10774 ;;		Nothing
 10775 ;; This function is called by:
 10776 ;;		_Initialize_Screen
 10777 ;;		_Wait_One_Second
 10778 ;; This function uses a non-reentrant model
 10779 ;;
 10780                           
 10781                           	psect	text43
 10782  0039C8                     __ptext43:
 10783                           	opt stack 0
 10784  0039C8                     _strcpy:
 10785                           	opt stack 25
 10786                           
 10787                           ;incstack = 0
 10788  0039C8  C00F  F013         	movff	strcpy@to,strcpy@cp
 10789  0039CC  C010  F014         	movff	strcpy@to+1,strcpy@cp+1
 10790  0039D0  D005               	goto	l3830
 10791  0039D2                     l3828:
 10792  0039D2  4A13               	infsnz	strcpy@cp,f,c
 10793  0039D4  2A14               	incf	strcpy@cp+1,f,c
 10794  0039D6  4A11               	infsnz	strcpy@from,f,c
 10795  0039D8  2A12               	incf	strcpy@from+1,f,c
 10796  0039DA  D000               	goto	l3830
 10797  0039DC                     l3830:
 10798  0039DC  C011  FFF6         	movff	strcpy@from,tblptrl
 10799  0039E0  C012  FFF7         	movff	strcpy@from+1,tblptrh
 10800  0039E4                     	if	0	;tblptru may be non-zero
 10801  0039E4                     	endif
 10802  0039E4                     	if	0	;tblptru may be non-zero
 10803  0039E4                     	endif
 10804  0039E4  C013  FFD9         	movff	strcpy@cp,fsr2l
 10805  0039E8  C014  FFDA         	movff	strcpy@cp+1,fsr2h
 10806  0039EC  0008               	tblrd		*
 10807  0039EE  CFF5 FFDF          	movff	tablat,indf2
 10808  0039F2  50DF               	movf	indf2,w,c
 10809  0039F4  A4D8               	btfss	status,2,c
 10810  0039F6  D7ED               	goto	l3828
 10811                           
 10812                           ;	Return value of _strcpy is never used
 10813  0039F8  0012               	return		;funcret
 10814  0039FA                     __end_of_strcpy:
 10815                           	opt stack 0
 10816                           tblptru	equ	0xFF8
 10817                           tblptrh	equ	0xFF7
 10818                           tblptrl	equ	0xFF6
 10819                           tablat	equ	0xFF5
 10820                           prodh	equ	0xFF4
 10821                           prodl	equ	0xFF3
 10822                           intcon	equ	0xFF2
 10823                           intcon2	equ	0xFF1
 10824                           intcon3	equ	0xFF0
 10825                           postinc0	equ	0xFEE
 10826                           wreg	equ	0xFE8
 10827                           postdec1	equ	0xFE5
 10828                           fsr1l	equ	0xFE1
 10829                           indf2	equ	0xFDF
 10830                           postinc2	equ	0xFDE
 10831                           postdec2	equ	0xFDD
 10832                           fsr2h	equ	0xFDA
 10833                           fsr2l	equ	0xFD9
 10834                           status	equ	0xFD8
 10835                           
 10836 ;; *************** function _Set_NS_LT *****************
 10837 ;; Defined at:
 10838 ;;		line 417 in file "Lab9pC.c"
 10839 ;; Parameters:    Size  Location     Type
 10840 ;;  color           1    wreg     unsigned char 
 10841 ;; Auto vars:     Size  Location     Type
 10842 ;;  color           1   67[COMRAM] unsigned char 
 10843 ;; Return value:  Size  Location     Type
 10844 ;;		None               void
 10845 ;; Registers used:
 10846 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10847 ;; Tracked objects:
 10848 ;;		On entry : 0/0
 10849 ;;		On exit  : 0/0
 10850 ;;		Unchanged: 0/0
 10851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10853 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10855 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10856 ;;Total ram usage:        1 bytes
 10857 ;; Hardware stack levels used:    1
 10858 ;; Hardware stack levels required when called:    9
 10859 ;; This function calls:
 10860 ;;		_update_LCD_color
 10861 ;; This function is called by:
 10862 ;;		_Day_Mode
 10863 ;;		_Night_Mode
 10864 ;;		_Do_Flashing
 10865 ;; This function uses a non-reentrant model
 10866 ;;
 10867                           
 10868                           	psect	text44
 10869  0037BE                     __ptext44:
 10870                           	opt stack 0
 10871  0037BE                     _Set_NS_LT:
 10872                           	opt stack 20
 10873                           
 10874                           ;incstack = 0
 10875                           ;Set_NS_LT@color stored from wreg
 10876  0037BE  6E44               	movwf	Set_NS_LT@color,c
 10877                           
 10878                           ;Lab9pC.c: 419: direction = 3;
 10879  0037C0  0E03               	movlw	3
 10880  0037C2  6E66               	movwf	_direction,c
 10881                           
 10882                           ;Lab9pC.c: 420: update_LCD_color(direction, color);
 10883  0037C4  C044  F041         	movff	Set_NS_LT@color,update_LCD_color@color
 10884  0037C8  5066               	movf	_direction,w,c
 10885  0037CA  EC9E  F009         	call	_update_LCD_color
 10886                           
 10887                           ;Lab9pC.c: 422: switch (color)
 10888  0037CE  D00A               	goto	l4432
 10889  0037D0                     l439:
 10890  0037D0  9284               	bcf	3972,1,c	;volatile
 10891  0037D2  D001               	goto	L15
 10892  0037D4                     l441:
 10893  0037D4  8284               	bsf	3972,1,c	;volatile
 10894  0037D6                     L15:
 10895  0037D6  9484               	bcf	3972,2,c	;volatile
 10896  0037D8  D013               	goto	l444
 10897  0037DA                     l442:
 10898  0037DA  9284               	bcf	3972,1,c	;volatile
 10899  0037DC  D001               	goto	L16
 10900  0037DE                     l443:
 10901  0037DE  8284               	bsf	3972,1,c	;volatile
 10902  0037E0                     L16:
 10903  0037E0  8484               	bsf	3972,2,c	;volatile
 10904                           
 10905                           ;Lab9pC.c: 428: }
 10906  0037E2  D00E               	goto	l444
 10907  0037E4                     l4432:
 10908  0037E4  5044               	movf	Set_NS_LT@color,w,c
 10909                           
 10910                           ; Switch size 1, requested type "space"
 10911                           ; Number of cases is 4, Range of values is 0 to 3
 10912                           ; switch strategies available:
 10913                           ; Name         Instructions Cycles
 10914                           ; simple_byte           13     7 (average)
 10915                           ;	Chosen strategy is simple_byte
 10916  0037E6  0A00               	xorlw	0	; case 0
 10917  0037E8  B4D8               	btfsc	status,2,c
 10918  0037EA  D7F2               	goto	l439
 10919  0037EC  0A01               	xorlw	1	; case 1
 10920  0037EE  B4D8               	btfsc	status,2,c
 10921  0037F0  D7F1               	goto	l441
 10922  0037F2  0A03               	xorlw	3	; case 2
 10923  0037F4  B4D8               	btfsc	status,2,c
 10924  0037F6  D7F1               	goto	l442
 10925  0037F8  0A01               	xorlw	1	; case 3
 10926  0037FA  B4D8               	btfsc	status,2,c
 10927  0037FC  D7F0               	goto	l443
 10928  0037FE  D000               	goto	l444
 10929  003800                     l444:
 10930  003800  0012               	return		;funcret
 10931  003802                     __end_of_Set_NS_LT:
 10932                           	opt stack 0
 10933                           tblptru	equ	0xFF8
 10934                           tblptrh	equ	0xFF7
 10935                           tblptrl	equ	0xFF6
 10936                           tablat	equ	0xFF5
 10937                           prodh	equ	0xFF4
 10938                           prodl	equ	0xFF3
 10939                           intcon	equ	0xFF2
 10940                           intcon2	equ	0xFF1
 10941                           intcon3	equ	0xFF0
 10942                           postinc0	equ	0xFEE
 10943                           wreg	equ	0xFE8
 10944                           postdec1	equ	0xFE5
 10945                           fsr1l	equ	0xFE1
 10946                           indf2	equ	0xFDF
 10947                           postinc2	equ	0xFDE
 10948                           postdec2	equ	0xFDD
 10949                           fsr2h	equ	0xFDA
 10950                           fsr2l	equ	0xFD9
 10951                           status	equ	0xFD8
 10952                           
 10953 ;; *************** function _Set_NS *****************
 10954 ;; Defined at:
 10955 ;;		line 403 in file "Lab9pC.c"
 10956 ;; Parameters:    Size  Location     Type
 10957 ;;  color           1    wreg     unsigned char 
 10958 ;; Auto vars:     Size  Location     Type
 10959 ;;  color           1   67[COMRAM] unsigned char 
 10960 ;; Return value:  Size  Location     Type
 10961 ;;		None               void
 10962 ;; Registers used:
 10963 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10964 ;; Tracked objects:
 10965 ;;		On entry : 0/0
 10966 ;;		On exit  : 0/0
 10967 ;;		Unchanged: 0/0
 10968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10970 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10972 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10973 ;;Total ram usage:        1 bytes
 10974 ;; Hardware stack levels used:    1
 10975 ;; Hardware stack levels required when called:    9
 10976 ;; This function calls:
 10977 ;;		_update_LCD_color
 10978 ;; This function is called by:
 10979 ;;		_Day_Mode
 10980 ;;		_Night_Mode
 10981 ;;		_Do_Flashing
 10982 ;; This function uses a non-reentrant model
 10983 ;;
 10984                           
 10985                           	psect	text45
 10986  003802                     __ptext45:
 10987                           	opt stack 0
 10988  003802                     _Set_NS:
 10989                           	opt stack 20
 10990                           
 10991                           ;incstack = 0
 10992                           ;Set_NS@color stored from wreg
 10993  003802  6E44               	movwf	Set_NS@color,c
 10994                           
 10995                           ;Lab9pC.c: 405: direction = 2;
 10996  003804  0E02               	movlw	2
 10997  003806  6E66               	movwf	_direction,c
 10998                           
 10999                           ;Lab9pC.c: 406: update_LCD_color(direction, color);
 11000  003808  C044  F041         	movff	Set_NS@color,update_LCD_color@color
 11001  00380C  5066               	movf	_direction,w,c
 11002  00380E  EC9E  F009         	call	_update_LCD_color
 11003                           
 11004                           ;Lab9pC.c: 408: switch (color)
 11005  003812  D00A               	goto	l4424
 11006  003814                     l430:
 11007  003814  9A80               	bcf	3968,5,c	;volatile
 11008  003816  D001               	goto	L17
 11009  003818                     l432:
 11010  003818  8A80               	bsf	3968,5,c	;volatile
 11011  00381A                     L17:
 11012  00381A  9C81               	bcf	3969,6,c	;volatile
 11013  00381C  D013               	goto	l435
 11014  00381E                     l433:
 11015  00381E  9A80               	bcf	3968,5,c	;volatile
 11016  003820  D001               	goto	L18
 11017  003822                     l434:
 11018  003822  8A80               	bsf	3968,5,c	;volatile
 11019  003824                     L18:
 11020  003824  8C81               	bsf	3969,6,c	;volatile
 11021                           
 11022                           ;Lab9pC.c: 414: }
 11023  003826  D00E               	goto	l435
 11024  003828                     l4424:
 11025  003828  5044               	movf	Set_NS@color,w,c
 11026                           
 11027                           ; Switch size 1, requested type "space"
 11028                           ; Number of cases is 4, Range of values is 0 to 3
 11029                           ; switch strategies available:
 11030                           ; Name         Instructions Cycles
 11031                           ; simple_byte           13     7 (average)
 11032                           ;	Chosen strategy is simple_byte
 11033  00382A  0A00               	xorlw	0	; case 0
 11034  00382C  B4D8               	btfsc	status,2,c
 11035  00382E  D7F2               	goto	l430
 11036  003830  0A01               	xorlw	1	; case 1
 11037  003832  B4D8               	btfsc	status,2,c
 11038  003834  D7F1               	goto	l432
 11039  003836  0A03               	xorlw	3	; case 2
 11040  003838  B4D8               	btfsc	status,2,c
 11041  00383A  D7F1               	goto	l433
 11042  00383C  0A01               	xorlw	1	; case 3
 11043  00383E  B4D8               	btfsc	status,2,c
 11044  003840  D7F0               	goto	l434
 11045  003842  D000               	goto	l435
 11046  003844                     l435:
 11047  003844  0012               	return		;funcret
 11048  003846                     __end_of_Set_NS:
 11049                           	opt stack 0
 11050                           tblptru	equ	0xFF8
 11051                           tblptrh	equ	0xFF7
 11052                           tblptrl	equ	0xFF6
 11053                           tablat	equ	0xFF5
 11054                           prodh	equ	0xFF4
 11055                           prodl	equ	0xFF3
 11056                           intcon	equ	0xFF2
 11057                           intcon2	equ	0xFF1
 11058                           intcon3	equ	0xFF0
 11059                           postinc0	equ	0xFEE
 11060                           wreg	equ	0xFE8
 11061                           postdec1	equ	0xFE5
 11062                           fsr1l	equ	0xFE1
 11063                           indf2	equ	0xFDF
 11064                           postinc2	equ	0xFDE
 11065                           postdec2	equ	0xFDD
 11066                           fsr2h	equ	0xFDA
 11067                           fsr2l	equ	0xFD9
 11068                           status	equ	0xFD8
 11069                           
 11070 ;; *************** function _Set_EW_LT *****************
 11071 ;; Defined at:
 11072 ;;		line 445 in file "Lab9pC.c"
 11073 ;; Parameters:    Size  Location     Type
 11074 ;;  color           1    wreg     unsigned char 
 11075 ;; Auto vars:     Size  Location     Type
 11076 ;;  color           1   67[COMRAM] unsigned char 
 11077 ;; Return value:  Size  Location     Type
 11078 ;;		None               void
 11079 ;; Registers used:
 11080 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11081 ;; Tracked objects:
 11082 ;;		On entry : 0/0
 11083 ;;		On exit  : 0/0
 11084 ;;		Unchanged: 0/0
 11085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11087 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11089 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11090 ;;Total ram usage:        1 bytes
 11091 ;; Hardware stack levels used:    1
 11092 ;; Hardware stack levels required when called:    9
 11093 ;; This function calls:
 11094 ;;		_update_LCD_color
 11095 ;; This function is called by:
 11096 ;;		_Day_Mode
 11097 ;;		_Night_Mode
 11098 ;;		_Do_Flashing
 11099 ;; This function uses a non-reentrant model
 11100 ;;
 11101                           
 11102                           	psect	text46
 11103  003846                     __ptext46:
 11104                           	opt stack 0
 11105  003846                     _Set_EW_LT:
 11106                           	opt stack 20
 11107                           
 11108                           ;incstack = 0
 11109                           ;Set_EW_LT@color stored from wreg
 11110  003846  6E44               	movwf	Set_EW_LT@color,c
 11111                           
 11112                           ;Lab9pC.c: 447: direction = 1;
 11113  003848  0E01               	movlw	1
 11114  00384A  6E66               	movwf	_direction,c
 11115                           
 11116                           ;Lab9pC.c: 448: update_LCD_color(direction, color);
 11117  00384C  C044  F041         	movff	Set_EW_LT@color,update_LCD_color@color
 11118  003850  5066               	movf	_direction,w,c
 11119  003852  EC9E  F009         	call	_update_LCD_color
 11120                           
 11121                           ;Lab9pC.c: 450: switch (color)
 11122  003856  D00A               	goto	l4448
 11123  003858                     l457:
 11124  003858  9280               	bcf	3968,1,c	;volatile
 11125  00385A  D001               	goto	L19
 11126  00385C                     l459:
 11127  00385C  8280               	bsf	3968,1,c	;volatile
 11128  00385E                     L19:
 11129  00385E  9480               	bcf	3968,2,c	;volatile
 11130  003860  D013               	goto	l462
 11131  003862                     l460:
 11132  003862  9280               	bcf	3968,1,c	;volatile
 11133  003864  D001               	goto	L20
 11134  003866                     l461:
 11135  003866  8280               	bsf	3968,1,c	;volatile
 11136  003868                     L20:
 11137  003868  8480               	bsf	3968,2,c	;volatile
 11138                           
 11139                           ;Lab9pC.c: 456: }
 11140  00386A  D00E               	goto	l462
 11141  00386C                     l4448:
 11142  00386C  5044               	movf	Set_EW_LT@color,w,c
 11143                           
 11144                           ; Switch size 1, requested type "space"
 11145                           ; Number of cases is 4, Range of values is 0 to 3
 11146                           ; switch strategies available:
 11147                           ; Name         Instructions Cycles
 11148                           ; simple_byte           13     7 (average)
 11149                           ;	Chosen strategy is simple_byte
 11150  00386E  0A00               	xorlw	0	; case 0
 11151  003870  B4D8               	btfsc	status,2,c
 11152  003872  D7F2               	goto	l457
 11153  003874  0A01               	xorlw	1	; case 1
 11154  003876  B4D8               	btfsc	status,2,c
 11155  003878  D7F1               	goto	l459
 11156  00387A  0A03               	xorlw	3	; case 2
 11157  00387C  B4D8               	btfsc	status,2,c
 11158  00387E  D7F1               	goto	l460
 11159  003880  0A01               	xorlw	1	; case 3
 11160  003882  B4D8               	btfsc	status,2,c
 11161  003884  D7F0               	goto	l461
 11162  003886  D000               	goto	l462
 11163  003888                     l462:
 11164  003888  0012               	return		;funcret
 11165  00388A                     __end_of_Set_EW_LT:
 11166                           	opt stack 0
 11167                           tblptru	equ	0xFF8
 11168                           tblptrh	equ	0xFF7
 11169                           tblptrl	equ	0xFF6
 11170                           tablat	equ	0xFF5
 11171                           prodh	equ	0xFF4
 11172                           prodl	equ	0xFF3
 11173                           intcon	equ	0xFF2
 11174                           intcon2	equ	0xFF1
 11175                           intcon3	equ	0xFF0
 11176                           postinc0	equ	0xFEE
 11177                           wreg	equ	0xFE8
 11178                           postdec1	equ	0xFE5
 11179                           fsr1l	equ	0xFE1
 11180                           indf2	equ	0xFDF
 11181                           postinc2	equ	0xFDE
 11182                           postdec2	equ	0xFDD
 11183                           fsr2h	equ	0xFDA
 11184                           fsr2l	equ	0xFD9
 11185                           status	equ	0xFD8
 11186                           
 11187 ;; *************** function _Set_EW *****************
 11188 ;; Defined at:
 11189 ;;		line 431 in file "Lab9pC.c"
 11190 ;; Parameters:    Size  Location     Type
 11191 ;;  color           1    wreg     unsigned char 
 11192 ;; Auto vars:     Size  Location     Type
 11193 ;;  color           1   67[COMRAM] unsigned char 
 11194 ;; Return value:  Size  Location     Type
 11195 ;;		None               void
 11196 ;; Registers used:
 11197 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11198 ;; Tracked objects:
 11199 ;;		On entry : 0/0
 11200 ;;		On exit  : 0/0
 11201 ;;		Unchanged: 0/0
 11202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11204 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11206 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11207 ;;Total ram usage:        1 bytes
 11208 ;; Hardware stack levels used:    1
 11209 ;; Hardware stack levels required when called:    9
 11210 ;; This function calls:
 11211 ;;		_update_LCD_color
 11212 ;; This function is called by:
 11213 ;;		_Day_Mode
 11214 ;;		_Night_Mode
 11215 ;;		_Do_Flashing
 11216 ;; This function uses a non-reentrant model
 11217 ;;
 11218                           
 11219                           	psect	text47
 11220  00388A                     __ptext47:
 11221                           	opt stack 0
 11222  00388A                     _Set_EW:
 11223                           	opt stack 20
 11224                           
 11225                           ;incstack = 0
 11226                           ;Set_EW@color stored from wreg
 11227  00388A  6E44               	movwf	Set_EW@color,c
 11228                           
 11229                           ;Lab9pC.c: 433: direction = 0;
 11230  00388C  0E00               	movlw	0
 11231  00388E  6E66               	movwf	_direction,c
 11232                           
 11233                           ;Lab9pC.c: 434: update_LCD_color(direction, color);
 11234  003890  C044  F041         	movff	Set_EW@color,update_LCD_color@color
 11235  003894  5066               	movf	_direction,w,c
 11236  003896  EC9E  F009         	call	_update_LCD_color
 11237                           
 11238                           ;Lab9pC.c: 436: switch (color)
 11239  00389A  D00A               	goto	l4440
 11240  00389C                     l448:
 11241  00389C  9680               	bcf	3968,3,c	;volatile
 11242  00389E  D001               	goto	L21
 11243  0038A0                     l450:
 11244  0038A0  8680               	bsf	3968,3,c	;volatile
 11245  0038A2                     L21:
 11246  0038A2  9880               	bcf	3968,4,c	;volatile
 11247  0038A4  D013               	goto	l453
 11248  0038A6                     l451:
 11249  0038A6  9680               	bcf	3968,3,c	;volatile
 11250  0038A8  D001               	goto	L22
 11251  0038AA                     l452:
 11252  0038AA  8680               	bsf	3968,3,c	;volatile
 11253  0038AC                     L22:
 11254  0038AC  8880               	bsf	3968,4,c	;volatile
 11255                           
 11256                           ;Lab9pC.c: 442: }
 11257  0038AE  D00E               	goto	l453
 11258  0038B0                     l4440:
 11259  0038B0  5044               	movf	Set_EW@color,w,c
 11260                           
 11261                           ; Switch size 1, requested type "space"
 11262                           ; Number of cases is 4, Range of values is 0 to 3
 11263                           ; switch strategies available:
 11264                           ; Name         Instructions Cycles
 11265                           ; simple_byte           13     7 (average)
 11266                           ;	Chosen strategy is simple_byte
 11267  0038B2  0A00               	xorlw	0	; case 0
 11268  0038B4  B4D8               	btfsc	status,2,c
 11269  0038B6  D7F2               	goto	l448
 11270  0038B8  0A01               	xorlw	1	; case 1
 11271  0038BA  B4D8               	btfsc	status,2,c
 11272  0038BC  D7F1               	goto	l450
 11273  0038BE  0A03               	xorlw	3	; case 2
 11274  0038C0  B4D8               	btfsc	status,2,c
 11275  0038C2  D7F1               	goto	l451
 11276  0038C4  0A01               	xorlw	1	; case 3
 11277  0038C6  B4D8               	btfsc	status,2,c
 11278  0038C8  D7F0               	goto	l452
 11279  0038CA  D000               	goto	l453
 11280  0038CC                     l453:
 11281  0038CC  0012               	return		;funcret
 11282  0038CE                     __end_of_Set_EW:
 11283                           	opt stack 0
 11284                           tblptru	equ	0xFF8
 11285                           tblptrh	equ	0xFF7
 11286                           tblptrl	equ	0xFF6
 11287                           tablat	equ	0xFF5
 11288                           prodh	equ	0xFF4
 11289                           prodl	equ	0xFF3
 11290                           intcon	equ	0xFF2
 11291                           intcon2	equ	0xFF1
 11292                           intcon3	equ	0xFF0
 11293                           postinc0	equ	0xFEE
 11294                           wreg	equ	0xFE8
 11295                           postdec1	equ	0xFE5
 11296                           fsr1l	equ	0xFE1
 11297                           indf2	equ	0xFDF
 11298                           postinc2	equ	0xFDE
 11299                           postdec2	equ	0xFDD
 11300                           fsr2h	equ	0xFDA
 11301                           fsr2l	equ	0xFD9
 11302                           status	equ	0xFD8
 11303                           
 11304 ;; *************** function _update_LCD_color *****************
 11305 ;; Defined at:
 11306 ;;		line 665 in file "Lab9pC.c"
 11307 ;; Parameters:    Size  Location     Type
 11308 ;;  direction       1    wreg     unsigned char 
 11309 ;;  color           1   64[COMRAM] unsigned char 
 11310 ;; Auto vars:     Size  Location     Type
 11311 ;;  direction       1   65[COMRAM] unsigned char 
 11312 ;;  Circle_Y        1   66[COMRAM] unsigned char 
 11313 ;; Return value:  Size  Location     Type
 11314 ;;		None               void
 11315 ;; Registers used:
 11316 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11317 ;; Tracked objects:
 11318 ;;		On entry : 0/0
 11319 ;;		On exit  : 0/0
 11320 ;;		Unchanged: 0/0
 11321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11322 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11323 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11325 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11326 ;;Total ram usage:        3 bytes
 11327 ;; Hardware stack levels used:    1
 11328 ;; Hardware stack levels required when called:    8
 11329 ;; This function calls:
 11330 ;;		_drawCircle
 11331 ;;		_fillCircle
 11332 ;; This function is called by:
 11333 ;;		_Set_NS
 11334 ;;		_Set_NS_LT
 11335 ;;		_Set_EW
 11336 ;;		_Set_EW_LT
 11337 ;; This function uses a non-reentrant model
 11338 ;;
 11339                           
 11340                           	psect	text48
 11341  00133C                     __ptext48:
 11342                           	opt stack 0
 11343  00133C                     _update_LCD_color:
 11344                           	opt stack 20
 11345                           
 11346                           ;incstack = 0
 11347                           ;update_LCD_color@direction stored from wreg
 11348  00133C  6E42               	movwf	update_LCD_color@direction,c
 11349                           
 11350                           ;Lab9pC.c: 667: char Circle_Y;
 11351                           ;Lab9pC.c: 668: Circle_Y = 20 + 15 + direction * 30;
 11352  00133E  5042               	movf	update_LCD_color@direction,w,c
 11353  001340  0D1E               	mullw	30
 11354  001342  50F3               	movf	prodl,w,c
 11355  001344  0F23               	addlw	35
 11356  001346  6E43               	movwf	update_LCD_color@Circle_Y,c
 11357                           
 11358                           ;Lab9pC.c: 670: if (color == 0)
 11359  001348  5041               	movf	update_LCD_color@color,w,c
 11360  00134A  A4D8               	btfss	status,2,c
 11361  00134C  D067               	goto	l4194
 11362                           
 11363                           ;Lab9pC.c: 671: {
 11364                           ;Lab9pC.c: 672: fillCircle(40, Circle_Y, 7, 0x0000);
 11365  00134E  0E00               	movlw	0
 11366  001350  6E3A               	movwf	fillCircle@x0+1,c
 11367  001352  0E28               	movlw	40
 11368  001354  6E39               	movwf	fillCircle@x0,c
 11369  001356  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11370  00135A  6A3C               	clrf	fillCircle@y0+1,c
 11371  00135C  0E00               	movlw	0
 11372  00135E  6E3E               	movwf	fillCircle@r+1,c
 11373  001360  0E07               	movlw	7
 11374  001362  6E3D               	movwf	fillCircle@r,c
 11375  001364  0E00               	movlw	0
 11376  001366  6E40               	movwf	fillCircle@color+1,c
 11377  001368  0E00               	movlw	0
 11378  00136A  6E3F               	movwf	fillCircle@color,c
 11379  00136C  EC48  F01B         	call	_fillCircle	;wreg free
 11380                           
 11381                           ;Lab9pC.c: 673: fillCircle(60, Circle_Y, 7, 0x0000);
 11382  001370  0E00               	movlw	0
 11383  001372  6E3A               	movwf	fillCircle@x0+1,c
 11384  001374  0E3C               	movlw	60
 11385  001376  6E39               	movwf	fillCircle@x0,c
 11386  001378  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11387  00137C  6A3C               	clrf	fillCircle@y0+1,c
 11388  00137E  0E00               	movlw	0
 11389  001380  6E3E               	movwf	fillCircle@r+1,c
 11390  001382  0E07               	movlw	7
 11391  001384  6E3D               	movwf	fillCircle@r,c
 11392  001386  0E00               	movlw	0
 11393  001388  6E40               	movwf	fillCircle@color+1,c
 11394  00138A  0E00               	movlw	0
 11395  00138C  6E3F               	movwf	fillCircle@color,c
 11396  00138E  EC48  F01B         	call	_fillCircle	;wreg free
 11397                           
 11398                           ;Lab9pC.c: 674: fillCircle(80, Circle_Y, 7, 0x0000);
 11399  001392  0E00               	movlw	0
 11400  001394  6E3A               	movwf	fillCircle@x0+1,c
 11401  001396  0E50               	movlw	80
 11402  001398  6E39               	movwf	fillCircle@x0,c
 11403  00139A  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11404  00139E  6A3C               	clrf	fillCircle@y0+1,c
 11405  0013A0  0E00               	movlw	0
 11406  0013A2  6E3E               	movwf	fillCircle@r+1,c
 11407  0013A4  0E07               	movlw	7
 11408  0013A6  6E3D               	movwf	fillCircle@r,c
 11409  0013A8  0E00               	movlw	0
 11410  0013AA  6E40               	movwf	fillCircle@color+1,c
 11411  0013AC  0E00               	movlw	0
 11412  0013AE  6E3F               	movwf	fillCircle@color,c
 11413  0013B0  EC48  F01B         	call	_fillCircle	;wreg free
 11414                           
 11415                           ;Lab9pC.c: 675: drawCircle(40, Circle_Y, 7, 0xF800);
 11416  0013B4  0E00               	movlw	0
 11417  0013B6  6E1B               	movwf	drawCircle@x0+1,c
 11418  0013B8  0E28               	movlw	40
 11419  0013BA  6E1A               	movwf	drawCircle@x0,c
 11420  0013BC  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11421  0013C0  6A1D               	clrf	drawCircle@y0+1,c
 11422  0013C2  0E00               	movlw	0
 11423  0013C4  6E1F               	movwf	drawCircle@r+1,c
 11424  0013C6  0E07               	movlw	7
 11425  0013C8  6E1E               	movwf	drawCircle@r,c
 11426  0013CA  0EF8               	movlw	248
 11427  0013CC  6E21               	movwf	drawCircle@color+1,c
 11428  0013CE  0E00               	movlw	0
 11429  0013D0  6E20               	movwf	drawCircle@color,c
 11430  0013D2  EC6C  F00E         	call	_drawCircle	;wreg free
 11431                           
 11432                           ;Lab9pC.c: 676: drawCircle(60, Circle_Y, 7, 0xFFE0);
 11433  0013D6  0E00               	movlw	0
 11434  0013D8  6E1B               	movwf	drawCircle@x0+1,c
 11435  0013DA  0E3C               	movlw	60
 11436  0013DC  6E1A               	movwf	drawCircle@x0,c
 11437  0013DE  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11438  0013E2  6A1D               	clrf	drawCircle@y0+1,c
 11439  0013E4  0E00               	movlw	0
 11440  0013E6  6E1F               	movwf	drawCircle@r+1,c
 11441  0013E8  0E07               	movlw	7
 11442  0013EA  6E1E               	movwf	drawCircle@r,c
 11443  0013EC  0EFF               	movlw	255
 11444  0013EE  6E21               	movwf	drawCircle@color+1,c
 11445  0013F0  0EE0               	movlw	224
 11446  0013F2  6E20               	movwf	drawCircle@color,c
 11447  0013F4  EC6C  F00E         	call	_drawCircle	;wreg free
 11448                           
 11449                           ;Lab9pC.c: 677: drawCircle(80, Circle_Y, 7, 0x07E0);
 11450  0013F8  0E00               	movlw	0
 11451  0013FA  6E1B               	movwf	drawCircle@x0+1,c
 11452  0013FC  0E50               	movlw	80
 11453  0013FE  6E1A               	movwf	drawCircle@x0,c
 11454  001400  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11455  001404  6A1D               	clrf	drawCircle@y0+1,c
 11456  001406  0E00               	movlw	0
 11457  001408  6E1F               	movwf	drawCircle@r+1,c
 11458  00140A  0E07               	movlw	7
 11459  00140C  6E1E               	movwf	drawCircle@r,c
 11460  00140E  0E07               	movlw	7
 11461  001410  6E21               	movwf	drawCircle@color+1,c
 11462  001412  0EE0               	movlw	224
 11463  001414  6E20               	movwf	drawCircle@color,c
 11464  001416  EC6C  F00E         	call	_drawCircle	;wreg free
 11465  00141A  D000               	goto	l4194
 11466  00141C                     l4194:
 11467                           
 11468                           ;Lab9pC.c: 678: }
 11469                           ;Lab9pC.c: 680: if (color == 1)
 11470  00141C  0441               	decf	update_LCD_color@color,w,c
 11471  00141E  A4D8               	btfss	status,2,c
 11472  001420  D067               	goto	l4198
 11473                           
 11474                           ;Lab9pC.c: 681: {
 11475                           ;Lab9pC.c: 682: fillCircle(40, Circle_Y, 7, 0xF800);
 11476  001422  0E00               	movlw	0
 11477  001424  6E3A               	movwf	fillCircle@x0+1,c
 11478  001426  0E28               	movlw	40
 11479  001428  6E39               	movwf	fillCircle@x0,c
 11480  00142A  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11481  00142E  6A3C               	clrf	fillCircle@y0+1,c
 11482  001430  0E00               	movlw	0
 11483  001432  6E3E               	movwf	fillCircle@r+1,c
 11484  001434  0E07               	movlw	7
 11485  001436  6E3D               	movwf	fillCircle@r,c
 11486  001438  0EF8               	movlw	248
 11487  00143A  6E40               	movwf	fillCircle@color+1,c
 11488  00143C  0E00               	movlw	0
 11489  00143E  6E3F               	movwf	fillCircle@color,c
 11490  001440  EC48  F01B         	call	_fillCircle	;wreg free
 11491                           
 11492                           ;Lab9pC.c: 683: fillCircle(60, Circle_Y, 7, 0x0000);
 11493  001444  0E00               	movlw	0
 11494  001446  6E3A               	movwf	fillCircle@x0+1,c
 11495  001448  0E3C               	movlw	60
 11496  00144A  6E39               	movwf	fillCircle@x0,c
 11497  00144C  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11498  001450  6A3C               	clrf	fillCircle@y0+1,c
 11499  001452  0E00               	movlw	0
 11500  001454  6E3E               	movwf	fillCircle@r+1,c
 11501  001456  0E07               	movlw	7
 11502  001458  6E3D               	movwf	fillCircle@r,c
 11503  00145A  0E00               	movlw	0
 11504  00145C  6E40               	movwf	fillCircle@color+1,c
 11505  00145E  0E00               	movlw	0
 11506  001460  6E3F               	movwf	fillCircle@color,c
 11507  001462  EC48  F01B         	call	_fillCircle	;wreg free
 11508                           
 11509                           ;Lab9pC.c: 684: fillCircle(80, Circle_Y, 7, 0x0000);
 11510  001466  0E00               	movlw	0
 11511  001468  6E3A               	movwf	fillCircle@x0+1,c
 11512  00146A  0E50               	movlw	80
 11513  00146C  6E39               	movwf	fillCircle@x0,c
 11514  00146E  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11515  001472  6A3C               	clrf	fillCircle@y0+1,c
 11516  001474  0E00               	movlw	0
 11517  001476  6E3E               	movwf	fillCircle@r+1,c
 11518  001478  0E07               	movlw	7
 11519  00147A  6E3D               	movwf	fillCircle@r,c
 11520  00147C  0E00               	movlw	0
 11521  00147E  6E40               	movwf	fillCircle@color+1,c
 11522  001480  0E00               	movlw	0
 11523  001482  6E3F               	movwf	fillCircle@color,c
 11524  001484  EC48  F01B         	call	_fillCircle	;wreg free
 11525                           
 11526                           ;Lab9pC.c: 685: drawCircle(40, Circle_Y, 7, 0xF800);
 11527  001488  0E00               	movlw	0
 11528  00148A  6E1B               	movwf	drawCircle@x0+1,c
 11529  00148C  0E28               	movlw	40
 11530  00148E  6E1A               	movwf	drawCircle@x0,c
 11531  001490  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11532  001494  6A1D               	clrf	drawCircle@y0+1,c
 11533  001496  0E00               	movlw	0
 11534  001498  6E1F               	movwf	drawCircle@r+1,c
 11535  00149A  0E07               	movlw	7
 11536  00149C  6E1E               	movwf	drawCircle@r,c
 11537  00149E  0EF8               	movlw	248
 11538  0014A0  6E21               	movwf	drawCircle@color+1,c
 11539  0014A2  0E00               	movlw	0
 11540  0014A4  6E20               	movwf	drawCircle@color,c
 11541  0014A6  EC6C  F00E         	call	_drawCircle	;wreg free
 11542                           
 11543                           ;Lab9pC.c: 686: drawCircle(60, Circle_Y, 7, 0xFFE0);
 11544  0014AA  0E00               	movlw	0
 11545  0014AC  6E1B               	movwf	drawCircle@x0+1,c
 11546  0014AE  0E3C               	movlw	60
 11547  0014B0  6E1A               	movwf	drawCircle@x0,c
 11548  0014B2  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11549  0014B6  6A1D               	clrf	drawCircle@y0+1,c
 11550  0014B8  0E00               	movlw	0
 11551  0014BA  6E1F               	movwf	drawCircle@r+1,c
 11552  0014BC  0E07               	movlw	7
 11553  0014BE  6E1E               	movwf	drawCircle@r,c
 11554  0014C0  0EFF               	movlw	255
 11555  0014C2  6E21               	movwf	drawCircle@color+1,c
 11556  0014C4  0EE0               	movlw	224
 11557  0014C6  6E20               	movwf	drawCircle@color,c
 11558  0014C8  EC6C  F00E         	call	_drawCircle	;wreg free
 11559                           
 11560                           ;Lab9pC.c: 687: drawCircle(80, Circle_Y, 7, 0x07E0);
 11561  0014CC  0E00               	movlw	0
 11562  0014CE  6E1B               	movwf	drawCircle@x0+1,c
 11563  0014D0  0E50               	movlw	80
 11564  0014D2  6E1A               	movwf	drawCircle@x0,c
 11565  0014D4  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11566  0014D8  6A1D               	clrf	drawCircle@y0+1,c
 11567  0014DA  0E00               	movlw	0
 11568  0014DC  6E1F               	movwf	drawCircle@r+1,c
 11569  0014DE  0E07               	movlw	7
 11570  0014E0  6E1E               	movwf	drawCircle@r,c
 11571  0014E2  0E07               	movlw	7
 11572  0014E4  6E21               	movwf	drawCircle@color+1,c
 11573  0014E6  0EE0               	movlw	224
 11574  0014E8  6E20               	movwf	drawCircle@color,c
 11575  0014EA  EC6C  F00E         	call	_drawCircle	;wreg free
 11576  0014EE  D000               	goto	l4198
 11577  0014F0                     l4198:
 11578                           
 11579                           ;Lab9pC.c: 688: }
 11580                           ;Lab9pC.c: 690: if (color == 3)
 11581  0014F0  0E03               	movlw	3
 11582  0014F2  1841               	xorwf	update_LCD_color@color,w,c
 11583  0014F4  A4D8               	btfss	status,2,c
 11584  0014F6  D067               	goto	l4202
 11585                           
 11586                           ;Lab9pC.c: 691: {
 11587                           ;Lab9pC.c: 692: fillCircle(40, Circle_Y, 7, 0x0000);
 11588  0014F8  0E00               	movlw	0
 11589  0014FA  6E3A               	movwf	fillCircle@x0+1,c
 11590  0014FC  0E28               	movlw	40
 11591  0014FE  6E39               	movwf	fillCircle@x0,c
 11592  001500  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11593  001504  6A3C               	clrf	fillCircle@y0+1,c
 11594  001506  0E00               	movlw	0
 11595  001508  6E3E               	movwf	fillCircle@r+1,c
 11596  00150A  0E07               	movlw	7
 11597  00150C  6E3D               	movwf	fillCircle@r,c
 11598  00150E  0E00               	movlw	0
 11599  001510  6E40               	movwf	fillCircle@color+1,c
 11600  001512  0E00               	movlw	0
 11601  001514  6E3F               	movwf	fillCircle@color,c
 11602  001516  EC48  F01B         	call	_fillCircle	;wreg free
 11603                           
 11604                           ;Lab9pC.c: 693: fillCircle(60, Circle_Y, 7, 0xFFE0);
 11605  00151A  0E00               	movlw	0
 11606  00151C  6E3A               	movwf	fillCircle@x0+1,c
 11607  00151E  0E3C               	movlw	60
 11608  001520  6E39               	movwf	fillCircle@x0,c
 11609  001522  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11610  001526  6A3C               	clrf	fillCircle@y0+1,c
 11611  001528  0E00               	movlw	0
 11612  00152A  6E3E               	movwf	fillCircle@r+1,c
 11613  00152C  0E07               	movlw	7
 11614  00152E  6E3D               	movwf	fillCircle@r,c
 11615  001530  0EFF               	movlw	255
 11616  001532  6E40               	movwf	fillCircle@color+1,c
 11617  001534  0EE0               	movlw	224
 11618  001536  6E3F               	movwf	fillCircle@color,c
 11619  001538  EC48  F01B         	call	_fillCircle	;wreg free
 11620                           
 11621                           ;Lab9pC.c: 694: fillCircle(80, Circle_Y, 7, 0x0000);
 11622  00153C  0E00               	movlw	0
 11623  00153E  6E3A               	movwf	fillCircle@x0+1,c
 11624  001540  0E50               	movlw	80
 11625  001542  6E39               	movwf	fillCircle@x0,c
 11626  001544  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11627  001548  6A3C               	clrf	fillCircle@y0+1,c
 11628  00154A  0E00               	movlw	0
 11629  00154C  6E3E               	movwf	fillCircle@r+1,c
 11630  00154E  0E07               	movlw	7
 11631  001550  6E3D               	movwf	fillCircle@r,c
 11632  001552  0E00               	movlw	0
 11633  001554  6E40               	movwf	fillCircle@color+1,c
 11634  001556  0E00               	movlw	0
 11635  001558  6E3F               	movwf	fillCircle@color,c
 11636  00155A  EC48  F01B         	call	_fillCircle	;wreg free
 11637                           
 11638                           ;Lab9pC.c: 695: drawCircle(40, Circle_Y, 7, 0xF800);
 11639  00155E  0E00               	movlw	0
 11640  001560  6E1B               	movwf	drawCircle@x0+1,c
 11641  001562  0E28               	movlw	40
 11642  001564  6E1A               	movwf	drawCircle@x0,c
 11643  001566  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11644  00156A  6A1D               	clrf	drawCircle@y0+1,c
 11645  00156C  0E00               	movlw	0
 11646  00156E  6E1F               	movwf	drawCircle@r+1,c
 11647  001570  0E07               	movlw	7
 11648  001572  6E1E               	movwf	drawCircle@r,c
 11649  001574  0EF8               	movlw	248
 11650  001576  6E21               	movwf	drawCircle@color+1,c
 11651  001578  0E00               	movlw	0
 11652  00157A  6E20               	movwf	drawCircle@color,c
 11653  00157C  EC6C  F00E         	call	_drawCircle	;wreg free
 11654                           
 11655                           ;Lab9pC.c: 696: drawCircle(60, Circle_Y, 7, 0xFFE0);
 11656  001580  0E00               	movlw	0
 11657  001582  6E1B               	movwf	drawCircle@x0+1,c
 11658  001584  0E3C               	movlw	60
 11659  001586  6E1A               	movwf	drawCircle@x0,c
 11660  001588  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11661  00158C  6A1D               	clrf	drawCircle@y0+1,c
 11662  00158E  0E00               	movlw	0
 11663  001590  6E1F               	movwf	drawCircle@r+1,c
 11664  001592  0E07               	movlw	7
 11665  001594  6E1E               	movwf	drawCircle@r,c
 11666  001596  0EFF               	movlw	255
 11667  001598  6E21               	movwf	drawCircle@color+1,c
 11668  00159A  0EE0               	movlw	224
 11669  00159C  6E20               	movwf	drawCircle@color,c
 11670  00159E  EC6C  F00E         	call	_drawCircle	;wreg free
 11671                           
 11672                           ;Lab9pC.c: 697: drawCircle(80, Circle_Y, 7, 0x07E0);
 11673  0015A2  0E00               	movlw	0
 11674  0015A4  6E1B               	movwf	drawCircle@x0+1,c
 11675  0015A6  0E50               	movlw	80
 11676  0015A8  6E1A               	movwf	drawCircle@x0,c
 11677  0015AA  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11678  0015AE  6A1D               	clrf	drawCircle@y0+1,c
 11679  0015B0  0E00               	movlw	0
 11680  0015B2  6E1F               	movwf	drawCircle@r+1,c
 11681  0015B4  0E07               	movlw	7
 11682  0015B6  6E1E               	movwf	drawCircle@r,c
 11683  0015B8  0E07               	movlw	7
 11684  0015BA  6E21               	movwf	drawCircle@color+1,c
 11685  0015BC  0EE0               	movlw	224
 11686  0015BE  6E20               	movwf	drawCircle@color,c
 11687  0015C0  EC6C  F00E         	call	_drawCircle	;wreg free
 11688  0015C4  D000               	goto	l4202
 11689  0015C6                     l4202:
 11690                           
 11691                           ;Lab9pC.c: 698: }
 11692                           ;Lab9pC.c: 700: if (color == 2)
 11693  0015C6  0E02               	movlw	2
 11694  0015C8  1841               	xorwf	update_LCD_color@color,w,c
 11695  0015CA  A4D8               	btfss	status,2,c
 11696  0015CC  D067               	goto	l514
 11697                           
 11698                           ;Lab9pC.c: 701: {
 11699                           ;Lab9pC.c: 702: fillCircle(40, Circle_Y, 7, 0x0000);
 11700  0015CE  0E00               	movlw	0
 11701  0015D0  6E3A               	movwf	fillCircle@x0+1,c
 11702  0015D2  0E28               	movlw	40
 11703  0015D4  6E39               	movwf	fillCircle@x0,c
 11704  0015D6  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11705  0015DA  6A3C               	clrf	fillCircle@y0+1,c
 11706  0015DC  0E00               	movlw	0
 11707  0015DE  6E3E               	movwf	fillCircle@r+1,c
 11708  0015E0  0E07               	movlw	7
 11709  0015E2  6E3D               	movwf	fillCircle@r,c
 11710  0015E4  0E00               	movlw	0
 11711  0015E6  6E40               	movwf	fillCircle@color+1,c
 11712  0015E8  0E00               	movlw	0
 11713  0015EA  6E3F               	movwf	fillCircle@color,c
 11714  0015EC  EC48  F01B         	call	_fillCircle	;wreg free
 11715                           
 11716                           ;Lab9pC.c: 703: fillCircle(60, Circle_Y, 7, 0x0000);
 11717  0015F0  0E00               	movlw	0
 11718  0015F2  6E3A               	movwf	fillCircle@x0+1,c
 11719  0015F4  0E3C               	movlw	60
 11720  0015F6  6E39               	movwf	fillCircle@x0,c
 11721  0015F8  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11722  0015FC  6A3C               	clrf	fillCircle@y0+1,c
 11723  0015FE  0E00               	movlw	0
 11724  001600  6E3E               	movwf	fillCircle@r+1,c
 11725  001602  0E07               	movlw	7
 11726  001604  6E3D               	movwf	fillCircle@r,c
 11727  001606  0E00               	movlw	0
 11728  001608  6E40               	movwf	fillCircle@color+1,c
 11729  00160A  0E00               	movlw	0
 11730  00160C  6E3F               	movwf	fillCircle@color,c
 11731  00160E  EC48  F01B         	call	_fillCircle	;wreg free
 11732                           
 11733                           ;Lab9pC.c: 704: fillCircle(80, Circle_Y, 7, 0x07E0);
 11734  001612  0E00               	movlw	0
 11735  001614  6E3A               	movwf	fillCircle@x0+1,c
 11736  001616  0E50               	movlw	80
 11737  001618  6E39               	movwf	fillCircle@x0,c
 11738  00161A  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
 11739  00161E  6A3C               	clrf	fillCircle@y0+1,c
 11740  001620  0E00               	movlw	0
 11741  001622  6E3E               	movwf	fillCircle@r+1,c
 11742  001624  0E07               	movlw	7
 11743  001626  6E3D               	movwf	fillCircle@r,c
 11744  001628  0E07               	movlw	7
 11745  00162A  6E40               	movwf	fillCircle@color+1,c
 11746  00162C  0EE0               	movlw	224
 11747  00162E  6E3F               	movwf	fillCircle@color,c
 11748  001630  EC48  F01B         	call	_fillCircle	;wreg free
 11749                           
 11750                           ;Lab9pC.c: 705: drawCircle(40, Circle_Y, 7, 0xF800);
 11751  001634  0E00               	movlw	0
 11752  001636  6E1B               	movwf	drawCircle@x0+1,c
 11753  001638  0E28               	movlw	40
 11754  00163A  6E1A               	movwf	drawCircle@x0,c
 11755  00163C  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11756  001640  6A1D               	clrf	drawCircle@y0+1,c
 11757  001642  0E00               	movlw	0
 11758  001644  6E1F               	movwf	drawCircle@r+1,c
 11759  001646  0E07               	movlw	7
 11760  001648  6E1E               	movwf	drawCircle@r,c
 11761  00164A  0EF8               	movlw	248
 11762  00164C  6E21               	movwf	drawCircle@color+1,c
 11763  00164E  0E00               	movlw	0
 11764  001650  6E20               	movwf	drawCircle@color,c
 11765  001652  EC6C  F00E         	call	_drawCircle	;wreg free
 11766                           
 11767                           ;Lab9pC.c: 706: drawCircle(60, Circle_Y, 7, 0xFFE0);
 11768  001656  0E00               	movlw	0
 11769  001658  6E1B               	movwf	drawCircle@x0+1,c
 11770  00165A  0E3C               	movlw	60
 11771  00165C  6E1A               	movwf	drawCircle@x0,c
 11772  00165E  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11773  001662  6A1D               	clrf	drawCircle@y0+1,c
 11774  001664  0E00               	movlw	0
 11775  001666  6E1F               	movwf	drawCircle@r+1,c
 11776  001668  0E07               	movlw	7
 11777  00166A  6E1E               	movwf	drawCircle@r,c
 11778  00166C  0EFF               	movlw	255
 11779  00166E  6E21               	movwf	drawCircle@color+1,c
 11780  001670  0EE0               	movlw	224
 11781  001672  6E20               	movwf	drawCircle@color,c
 11782  001674  EC6C  F00E         	call	_drawCircle	;wreg free
 11783                           
 11784                           ;Lab9pC.c: 707: drawCircle(80, Circle_Y, 7, 0x07E0);
 11785  001678  0E00               	movlw	0
 11786  00167A  6E1B               	movwf	drawCircle@x0+1,c
 11787  00167C  0E50               	movlw	80
 11788  00167E  6E1A               	movwf	drawCircle@x0,c
 11789  001680  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
 11790  001684  6A1D               	clrf	drawCircle@y0+1,c
 11791  001686  0E00               	movlw	0
 11792  001688  6E1F               	movwf	drawCircle@r+1,c
 11793  00168A  0E07               	movlw	7
 11794  00168C  6E1E               	movwf	drawCircle@r,c
 11795  00168E  0E07               	movlw	7
 11796  001690  6E21               	movwf	drawCircle@color+1,c
 11797  001692  0EE0               	movlw	224
 11798  001694  6E20               	movwf	drawCircle@color,c
 11799  001696  EC6C  F00E         	call	_drawCircle	;wreg free
 11800  00169A  D000               	goto	l514
 11801  00169C                     l514:
 11802  00169C  0012               	return		;funcret
 11803  00169E                     __end_of_update_LCD_color:
 11804                           	opt stack 0
 11805                           tblptru	equ	0xFF8
 11806                           tblptrh	equ	0xFF7
 11807                           tblptrl	equ	0xFF6
 11808                           tablat	equ	0xFF5
 11809                           prodh	equ	0xFF4
 11810                           prodl	equ	0xFF3
 11811                           intcon	equ	0xFF2
 11812                           intcon2	equ	0xFF1
 11813                           intcon3	equ	0xFF0
 11814                           postinc0	equ	0xFEE
 11815                           wreg	equ	0xFE8
 11816                           postdec1	equ	0xFE5
 11817                           fsr1l	equ	0xFE1
 11818                           indf2	equ	0xFDF
 11819                           postinc2	equ	0xFDE
 11820                           postdec2	equ	0xFDD
 11821                           fsr2h	equ	0xFDA
 11822                           fsr2l	equ	0xFD9
 11823                           status	equ	0xFD8
 11824                           
 11825 ;; *************** function _fillCircle *****************
 11826 ;; Defined at:
 11827 ;;		line 647 in file "ST7735_TFT.c"
 11828 ;; Parameters:    Size  Location     Type
 11829 ;;  x0              2   56[COMRAM] int 
 11830 ;;  y0              2   58[COMRAM] int 
 11831 ;;  r               2   60[COMRAM] int 
 11832 ;;  color           2   62[COMRAM] unsigned int 
 11833 ;; Auto vars:     Size  Location     Type
 11834 ;;		None
 11835 ;; Return value:  Size  Location     Type
 11836 ;;		None               void
 11837 ;; Registers used:
 11838 ;;		wreg, status,2, status,0, cstack
 11839 ;; Tracked objects:
 11840 ;;		On entry : 0/0
 11841 ;;		On exit  : 0/0
 11842 ;;		Unchanged: 0/0
 11843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11844 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11847 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11848 ;;Total ram usage:        8 bytes
 11849 ;; Hardware stack levels used:    1
 11850 ;; Hardware stack levels required when called:    7
 11851 ;; This function calls:
 11852 ;;		_drawFastVLine
 11853 ;;		_fillCircleHelper
 11854 ;; This function is called by:
 11855 ;;		_Initialize_Screen
 11856 ;;		_update_LCD_color
 11857 ;; This function uses a non-reentrant model
 11858 ;;
 11859                           
 11860                           	psect	text49
 11861  003690                     __ptext49:
 11862                           	opt stack 0
 11863  003690                     _fillCircle:
 11864                           	opt stack 20
 11865                           
 11866                           ;ST7735_TFT.c: 649: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
 11867                           
 11868                           ;incstack = 0
 11869  003690  503D               	movf	fillCircle@r,w,c
 11870  003692  0800               	sublw	0
 11871  003694  243B               	addwf	fillCircle@y0,w,c
 11872  003696  6E16               	movwf	drawFastVLine@y,c
 11873  003698  80D8               	bsf	status,0,c
 11874  00369A  343D               	rlcf	fillCircle@r,w,c
 11875  00369C  6E17               	movwf	drawFastVLine@h,c
 11876  00369E  C03F  F018         	movff	fillCircle@color,drawFastVLine@color
 11877  0036A2  C040  F019         	movff	fillCircle@color+1,drawFastVLine@color+1
 11878  0036A6  5039               	movf	fillCircle@x0,w,c
 11879  0036A8  ECBB  F018         	call	_drawFastVLine
 11880                           
 11881                           ;ST7735_TFT.c: 650: fillCircleHelper(x0, y0, r, 3, 0, color);
 11882  0036AC  C039  F021         	movff	fillCircle@x0,fillCircleHelper@x0
 11883  0036B0  C03A  F022         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
 11884  0036B4  C03B  F023         	movff	fillCircle@y0,fillCircleHelper@y0
 11885  0036B8  C03C  F024         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
 11886  0036BC  C03D  F025         	movff	fillCircle@r,fillCircleHelper@r
 11887  0036C0  C03E  F026         	movff	fillCircle@r+1,fillCircleHelper@r+1
 11888  0036C4  0E00               	movlw	0
 11889  0036C6  6E28               	movwf	fillCircleHelper@cornername+1,c
 11890  0036C8  0E03               	movlw	3
 11891  0036CA  6E27               	movwf	fillCircleHelper@cornername,c
 11892  0036CC  0E00               	movlw	0
 11893  0036CE  6E2A               	movwf	fillCircleHelper@delta+1,c
 11894  0036D0  0E00               	movlw	0
 11895  0036D2  6E29               	movwf	fillCircleHelper@delta,c
 11896  0036D4  C03F  F02B         	movff	fillCircle@color,fillCircleHelper@color
 11897  0036D8  C040  F02C         	movff	fillCircle@color+1,fillCircleHelper@color+1
 11898  0036DC  ECB5  F010         	call	_fillCircleHelper	;wreg free
 11899  0036E0  0012               	return		;funcret
 11900  0036E2                     __end_of_fillCircle:
 11901                           	opt stack 0
 11902                           tblptru	equ	0xFF8
 11903                           tblptrh	equ	0xFF7
 11904                           tblptrl	equ	0xFF6
 11905                           tablat	equ	0xFF5
 11906                           prodh	equ	0xFF4
 11907                           prodl	equ	0xFF3
 11908                           intcon	equ	0xFF2
 11909                           intcon2	equ	0xFF1
 11910                           intcon3	equ	0xFF0
 11911                           postinc0	equ	0xFEE
 11912                           wreg	equ	0xFE8
 11913                           postdec1	equ	0xFE5
 11914                           fsr1l	equ	0xFE1
 11915                           indf2	equ	0xFDF
 11916                           postinc2	equ	0xFDE
 11917                           postdec2	equ	0xFDD
 11918                           fsr2h	equ	0xFDA
 11919                           fsr2l	equ	0xFD9
 11920                           status	equ	0xFD8
 11921                           
 11922 ;; *************** function _fillCircleHelper *****************
 11923 ;; Defined at:
 11924 ;;		line 622 in file "ST7735_TFT.c"
 11925 ;; Parameters:    Size  Location     Type
 11926 ;;  x0              2   32[COMRAM] int 
 11927 ;;  y0              2   34[COMRAM] int 
 11928 ;;  r               2   36[COMRAM] int 
 11929 ;;  cornername      2   38[COMRAM] unsigned int 
 11930 ;;  delta           2   40[COMRAM] int 
 11931 ;;  color           2   42[COMRAM] unsigned int 
 11932 ;; Auto vars:     Size  Location     Type
 11933 ;;  y               2   54[COMRAM] int 
 11934 ;;  x               2   52[COMRAM] int 
 11935 ;;  f               2   50[COMRAM] int 
 11936 ;;  ddF_y           2   48[COMRAM] int 
 11937 ;;  ddF_x           2   46[COMRAM] int 
 11938 ;; Return value:  Size  Location     Type
 11939 ;;		None               void
 11940 ;; Registers used:
 11941 ;;		wreg, status,2, status,0, cstack
 11942 ;; Tracked objects:
 11943 ;;		On entry : 0/0
 11944 ;;		On exit  : 0/0
 11945 ;;		Unchanged: 0/0
 11946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11947 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11948 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11949 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11950 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11951 ;;Total ram usage:       24 bytes
 11952 ;; Hardware stack levels used:    1
 11953 ;; Hardware stack levels required when called:    6
 11954 ;; This function calls:
 11955 ;;		_drawFastVLine
 11956 ;; This function is called by:
 11957 ;;		_fillCircle
 11958 ;; This function uses a non-reentrant model
 11959 ;;
 11960                           
 11961                           	psect	text50
 11962  00216A                     __ptext50:
 11963                           	opt stack 0
 11964  00216A                     _fillCircleHelper:
 11965                           	opt stack 20
 11966                           
 11967                           ;ST7735_TFT.c: 624: signed int f, ddF_x, ddF_y, x, y;
 11968                           ;ST7735_TFT.c: 625: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
 11969                           
 11970                           ;incstack = 0
 11971  00216A  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
 11972  00216E  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
 11973  002172  1E2D               	comf	??_fillCircleHelper,f,c
 11974  002174  1E2E               	comf	??_fillCircleHelper+1,f,c
 11975  002176  4A2D               	infsnz	??_fillCircleHelper,f,c
 11976  002178  2A2E               	incf	??_fillCircleHelper+1,f,c
 11977  00217A  0E01               	movlw	1
 11978  00217C  242D               	addwf	??_fillCircleHelper,w,c
 11979  00217E  6E33               	movwf	fillCircleHelper@f,c
 11980  002180  0E00               	movlw	0
 11981  002182  202E               	addwfc	??_fillCircleHelper+1,w,c
 11982  002184  6E34               	movwf	fillCircleHelper@f+1,c
 11983  002186  0E00               	movlw	0
 11984  002188  6E30               	movwf	fillCircleHelper@ddF_x+1,c
 11985  00218A  0E01               	movlw	1
 11986  00218C  6E2F               	movwf	fillCircleHelper@ddF_x,c
 11987  00218E  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
 11988  002192  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
 11989  002196  90D8               	bcf	status,0,c
 11990  002198  362D               	rlcf	??_fillCircleHelper,f,c
 11991  00219A  362E               	rlcf	??_fillCircleHelper+1,f,c
 11992  00219C  1E2D               	comf	??_fillCircleHelper,f,c
 11993  00219E  1E2E               	comf	??_fillCircleHelper+1,f,c
 11994  0021A0  4A2D               	infsnz	??_fillCircleHelper,f,c
 11995  0021A2  2A2E               	incf	??_fillCircleHelper+1,f,c
 11996  0021A4  C02D  F031         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
 11997  0021A8  C02E  F032         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
 11998  0021AC  0E00               	movlw	0
 11999  0021AE  6E36               	movwf	fillCircleHelper@x+1,c
 12000  0021B0  0E00               	movlw	0
 12001  0021B2  6E35               	movwf	fillCircleHelper@x,c
 12002  0021B4  C025  F037         	movff	fillCircleHelper@r,fillCircleHelper@y
 12003  0021B8  C026  F038         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
 12004                           
 12005                           ;ST7735_TFT.c: 626: while (x<y) {
 12006  0021BC  D067               	goto	l3676
 12007  0021BE                     l3656:
 12008                           
 12009                           ;ST7735_TFT.c: 627: if (f >= 0) {
 12010  0021BE  BE34               	btfsc	fillCircleHelper@f+1,7,c
 12011  0021C0  D00B               	goto	l273
 12012                           
 12013                           ;ST7735_TFT.c: 628: y--;
 12014  0021C2  0637               	decf	fillCircleHelper@y,f,c
 12015  0021C4  A0D8               	btfss	status,0,c
 12016  0021C6  0638               	decf	fillCircleHelper@y+1,f,c
 12017                           
 12018                           ;ST7735_TFT.c: 629: ddF_y += 2;
 12019  0021C8  0E02               	movlw	2
 12020  0021CA  2631               	addwf	fillCircleHelper@ddF_y,f,c
 12021  0021CC  0E00               	movlw	0
 12022  0021CE  2232               	addwfc	fillCircleHelper@ddF_y+1,f,c
 12023                           
 12024                           ;ST7735_TFT.c: 630: f += ddF_y;
 12025  0021D0  5031               	movf	fillCircleHelper@ddF_y,w,c
 12026  0021D2  2633               	addwf	fillCircleHelper@f,f,c
 12027  0021D4  5032               	movf	fillCircleHelper@ddF_y+1,w,c
 12028  0021D6  2234               	addwfc	fillCircleHelper@f+1,f,c
 12029  0021D8                     l273:
 12030                           
 12031                           ;ST7735_TFT.c: 631: }
 12032                           ;ST7735_TFT.c: 632: x++;
 12033  0021D8  4A35               	infsnz	fillCircleHelper@x,f,c
 12034  0021DA  2A36               	incf	fillCircleHelper@x+1,f,c
 12035                           
 12036                           ;ST7735_TFT.c: 633: ddF_x += 2;
 12037  0021DC  0E02               	movlw	2
 12038  0021DE  262F               	addwf	fillCircleHelper@ddF_x,f,c
 12039  0021E0  0E00               	movlw	0
 12040  0021E2  2230               	addwfc	fillCircleHelper@ddF_x+1,f,c
 12041                           
 12042                           ;ST7735_TFT.c: 634: f += ddF_x;
 12043  0021E4  502F               	movf	fillCircleHelper@ddF_x,w,c
 12044  0021E6  2633               	addwf	fillCircleHelper@f,f,c
 12045  0021E8  5030               	movf	fillCircleHelper@ddF_x+1,w,c
 12046  0021EA  2234               	addwfc	fillCircleHelper@f+1,f,c
 12047                           
 12048                           ;ST7735_TFT.c: 636: if (cornername & 0x1) {
 12049  0021EC  A027               	btfss	fillCircleHelper@cornername,0,c
 12050  0021EE  D025               	goto	l3672
 12051                           
 12052                           ;ST7735_TFT.c: 637: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 12053  0021F0  5037               	movf	fillCircleHelper@y,w,c
 12054  0021F2  0800               	sublw	0
 12055  0021F4  2423               	addwf	fillCircleHelper@y0,w,c
 12056  0021F6  6E16               	movwf	drawFastVLine@y,c
 12057  0021F8  5037               	movf	fillCircleHelper@y,w,c
 12058  0021FA  2437               	addwf	fillCircleHelper@y,w,c
 12059  0021FC  2429               	addwf	fillCircleHelper@delta,w,c
 12060  0021FE  6E2D               	movwf	??_fillCircleHelper& (0+255),c
 12061  002200  282D               	incf	??_fillCircleHelper,w,c
 12062  002202  6E17               	movwf	drawFastVLine@h,c
 12063  002204  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
 12064  002208  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
 12065  00220C  5021               	movf	fillCircleHelper@x0,w,c
 12066  00220E  2435               	addwf	fillCircleHelper@x,w,c
 12067  002210  ECBB  F018         	call	_drawFastVLine
 12068                           
 12069                           ;ST7735_TFT.c: 638: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 12070  002214  5035               	movf	fillCircleHelper@x,w,c
 12071  002216  0800               	sublw	0
 12072  002218  2423               	addwf	fillCircleHelper@y0,w,c
 12073  00221A  6E16               	movwf	drawFastVLine@y,c
 12074  00221C  5035               	movf	fillCircleHelper@x,w,c
 12075  00221E  2435               	addwf	fillCircleHelper@x,w,c
 12076  002220  2429               	addwf	fillCircleHelper@delta,w,c
 12077  002222  6E2D               	movwf	??_fillCircleHelper& (0+255),c
 12078  002224  282D               	incf	??_fillCircleHelper,w,c
 12079  002226  6E17               	movwf	drawFastVLine@h,c
 12080  002228  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
 12081  00222C  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
 12082  002230  5021               	movf	fillCircleHelper@x0,w,c
 12083  002232  2437               	addwf	fillCircleHelper@y,w,c
 12084  002234  ECBB  F018         	call	_drawFastVLine
 12085  002238  D000               	goto	l3672
 12086  00223A                     l3672:
 12087                           
 12088                           ;ST7735_TFT.c: 639: }
 12089                           ;ST7735_TFT.c: 640: if (cornername & 0x2) {
 12090  00223A  A227               	btfss	fillCircleHelper@cornername,1,c
 12091  00223C  D027               	goto	l3676
 12092                           
 12093                           ;ST7735_TFT.c: 641: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 12094  00223E  5037               	movf	fillCircleHelper@y,w,c
 12095  002240  0800               	sublw	0
 12096  002242  2423               	addwf	fillCircleHelper@y0,w,c
 12097  002244  6E16               	movwf	drawFastVLine@y,c
 12098  002246  5037               	movf	fillCircleHelper@y,w,c
 12099  002248  2437               	addwf	fillCircleHelper@y,w,c
 12100  00224A  2429               	addwf	fillCircleHelper@delta,w,c
 12101  00224C  6E2D               	movwf	??_fillCircleHelper& (0+255),c
 12102  00224E  282D               	incf	??_fillCircleHelper,w,c
 12103  002250  6E17               	movwf	drawFastVLine@h,c
 12104  002252  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
 12105  002256  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
 12106  00225A  5035               	movf	fillCircleHelper@x,w,c
 12107  00225C  0800               	sublw	0
 12108  00225E  2421               	addwf	fillCircleHelper@x0,w,c
 12109  002260  ECBB  F018         	call	_drawFastVLine
 12110                           
 12111                           ;ST7735_TFT.c: 642: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 12112  002264  5035               	movf	fillCircleHelper@x,w,c
 12113  002266  0800               	sublw	0
 12114  002268  2423               	addwf	fillCircleHelper@y0,w,c
 12115  00226A  6E16               	movwf	drawFastVLine@y,c
 12116  00226C  5035               	movf	fillCircleHelper@x,w,c
 12117  00226E  2435               	addwf	fillCircleHelper@x,w,c
 12118  002270  2429               	addwf	fillCircleHelper@delta,w,c
 12119  002272  6E2D               	movwf	??_fillCircleHelper& (0+255),c
 12120  002274  282D               	incf	??_fillCircleHelper,w,c
 12121  002276  6E17               	movwf	drawFastVLine@h,c
 12122  002278  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
 12123  00227C  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
 12124  002280  5037               	movf	fillCircleHelper@y,w,c
 12125  002282  0800               	sublw	0
 12126  002284  2421               	addwf	fillCircleHelper@x0,w,c
 12127  002286  ECBB  F018         	call	_drawFastVLine
 12128  00228A  D000               	goto	l3676
 12129  00228C                     l3676:
 12130  00228C  5037               	movf	fillCircleHelper@y,w,c
 12131  00228E  5C35               	subwf	fillCircleHelper@x,w,c
 12132  002290  5036               	movf	fillCircleHelper@x+1,w,c
 12133  002292  0A80               	xorlw	128
 12134  002294  6E2D               	movwf	??_fillCircleHelper& (0+255),c
 12135  002296  5038               	movf	fillCircleHelper@y+1,w,c
 12136  002298  0A80               	xorlw	128
 12137  00229A  582D               	subwfb	??_fillCircleHelper& (0+255),w,c
 12138  00229C  A0D8               	btfss	status,0,c
 12139  00229E  D78F               	goto	l3656
 12140  0022A0  0012               	return		;funcret
 12141  0022A2                     __end_of_fillCircleHelper:
 12142                           	opt stack 0
 12143                           tblptru	equ	0xFF8
 12144                           tblptrh	equ	0xFF7
 12145                           tblptrl	equ	0xFF6
 12146                           tablat	equ	0xFF5
 12147                           prodh	equ	0xFF4
 12148                           prodl	equ	0xFF3
 12149                           intcon	equ	0xFF2
 12150                           intcon2	equ	0xFF1
 12151                           intcon3	equ	0xFF0
 12152                           postinc0	equ	0xFEE
 12153                           wreg	equ	0xFE8
 12154                           postdec1	equ	0xFE5
 12155                           fsr1l	equ	0xFE1
 12156                           indf2	equ	0xFDF
 12157                           postinc2	equ	0xFDE
 12158                           postdec2	equ	0xFDD
 12159                           fsr2h	equ	0xFDA
 12160                           fsr2l	equ	0xFD9
 12161                           status	equ	0xFD8
 12162                           
 12163 ;; *************** function _drawCircle *****************
 12164 ;; Defined at:
 12165 ;;		line 561 in file "ST7735_TFT.c"
 12166 ;; Parameters:    Size  Location     Type
 12167 ;;  x0              2   25[COMRAM] int 
 12168 ;;  y0              2   27[COMRAM] int 
 12169 ;;  r               2   29[COMRAM] int 
 12170 ;;  color           2   31[COMRAM] unsigned int 
 12171 ;; Auto vars:     Size  Location     Type
 12172 ;;  y               2   43[COMRAM] int 
 12173 ;;  x               2   41[COMRAM] int 
 12174 ;;  f               2   39[COMRAM] int 
 12175 ;;  ddF_y           2   37[COMRAM] int 
 12176 ;;  ddF_x           2   35[COMRAM] int 
 12177 ;; Return value:  Size  Location     Type
 12178 ;;		None               void
 12179 ;; Registers used:
 12180 ;;		wreg, status,2, status,0, cstack
 12181 ;; Tracked objects:
 12182 ;;		On entry : 0/0
 12183 ;;		On exit  : 0/0
 12184 ;;		Unchanged: 0/0
 12185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12186 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12187 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12188 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12189 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12190 ;;Total ram usage:       20 bytes
 12191 ;; Hardware stack levels used:    1
 12192 ;; Hardware stack levels required when called:    6
 12193 ;; This function calls:
 12194 ;;		_drawPixel
 12195 ;; This function is called by:
 12196 ;;		_Initialize_Screen
 12197 ;;		_update_LCD_color
 12198 ;; This function uses a non-reentrant model
 12199 ;;
 12200                           
 12201                           	psect	text51
 12202  001CD8                     __ptext51:
 12203                           	opt stack 0
 12204  001CD8                     _drawCircle:
 12205                           	opt stack 21
 12206                           
 12207                           ;ST7735_TFT.c: 563: signed int f, ddF_x, ddF_y, x, y;
 12208                           ;ST7735_TFT.c: 564: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
 12209                           
 12210                           ;incstack = 0
 12211  001CD8  C01E  F022         	movff	drawCircle@r,??_drawCircle
 12212  001CDC  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
 12213  001CE0  1E22               	comf	??_drawCircle,f,c
 12214  001CE2  1E23               	comf	??_drawCircle+1,f,c
 12215  001CE4  4A22               	infsnz	??_drawCircle,f,c
 12216  001CE6  2A23               	incf	??_drawCircle+1,f,c
 12217  001CE8  0E01               	movlw	1
 12218  001CEA  2422               	addwf	??_drawCircle,w,c
 12219  001CEC  6E28               	movwf	drawCircle@f,c
 12220  001CEE  0E00               	movlw	0
 12221  001CF0  2023               	addwfc	??_drawCircle+1,w,c
 12222  001CF2  6E29               	movwf	drawCircle@f+1,c
 12223  001CF4  0E00               	movlw	0
 12224  001CF6  6E25               	movwf	drawCircle@ddF_x+1,c
 12225  001CF8  0E01               	movlw	1
 12226  001CFA  6E24               	movwf	drawCircle@ddF_x,c
 12227  001CFC  C01E  F022         	movff	drawCircle@r,??_drawCircle
 12228  001D00  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
 12229  001D04  90D8               	bcf	status,0,c
 12230  001D06  3622               	rlcf	??_drawCircle,f,c
 12231  001D08  3623               	rlcf	??_drawCircle+1,f,c
 12232  001D0A  1E22               	comf	??_drawCircle,f,c
 12233  001D0C  1E23               	comf	??_drawCircle+1,f,c
 12234  001D0E  4A22               	infsnz	??_drawCircle,f,c
 12235  001D10  2A23               	incf	??_drawCircle+1,f,c
 12236  001D12  C022  F026         	movff	??_drawCircle,drawCircle@ddF_y
 12237  001D16  C023  F027         	movff	??_drawCircle+1,drawCircle@ddF_y+1
 12238  001D1A  0E00               	movlw	0
 12239  001D1C  6E2B               	movwf	drawCircle@x+1,c
 12240  001D1E  0E00               	movlw	0
 12241  001D20  6E2A               	movwf	drawCircle@x,c
 12242  001D22  C01E  F02C         	movff	drawCircle@r,drawCircle@y
 12243  001D26  C01F  F02D         	movff	drawCircle@r+1,drawCircle@y+1
 12244                           
 12245                           ;ST7735_TFT.c: 565: drawPixel(x0 , y0 + r, color);
 12246  001D2A  501C               	movf	drawCircle@y0,w,c
 12247  001D2C  241E               	addwf	drawCircle@r,w,c
 12248  001D2E  6E16               	movwf	drawPixel@y,c
 12249  001D30  C020  F017         	movff	drawCircle@color,drawPixel@color
 12250  001D34  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12251  001D38  501A               	movf	drawCircle@x0,w,c
 12252  001D3A  ECFD  F01C         	call	_drawPixel
 12253                           
 12254                           ;ST7735_TFT.c: 566: drawPixel(x0 , y0 - r, color);
 12255  001D3E  501E               	movf	drawCircle@r,w,c
 12256  001D40  0800               	sublw	0
 12257  001D42  241C               	addwf	drawCircle@y0,w,c
 12258  001D44  6E16               	movwf	drawPixel@y,c
 12259  001D46  C020  F017         	movff	drawCircle@color,drawPixel@color
 12260  001D4A  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12261  001D4E  501A               	movf	drawCircle@x0,w,c
 12262  001D50  ECFD  F01C         	call	_drawPixel
 12263                           
 12264                           ;ST7735_TFT.c: 567: drawPixel(x0+r, y0 , color);
 12265  001D54  C01C  F016         	movff	drawCircle@y0,drawPixel@y
 12266  001D58  C020  F017         	movff	drawCircle@color,drawPixel@color
 12267  001D5C  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12268  001D60  501A               	movf	drawCircle@x0,w,c
 12269  001D62  241E               	addwf	drawCircle@r,w,c
 12270  001D64  ECFD  F01C         	call	_drawPixel
 12271                           
 12272                           ;ST7735_TFT.c: 568: drawPixel(x0-r, y0 , color);
 12273  001D68  C01C  F016         	movff	drawCircle@y0,drawPixel@y
 12274  001D6C  C020  F017         	movff	drawCircle@color,drawPixel@color
 12275  001D70  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12276  001D74  501E               	movf	drawCircle@r,w,c
 12277  001D76  0800               	sublw	0
 12278  001D78  241A               	addwf	drawCircle@x0,w,c
 12279  001D7A  ECFD  F01C         	call	_drawPixel
 12280                           
 12281                           ;ST7735_TFT.c: 569: while (x < y) {
 12282  001D7E  D078               	goto	l3822
 12283  001D80                     l3794:
 12284                           
 12285                           ;ST7735_TFT.c: 570: if (f >= 0) {
 12286  001D80  BE29               	btfsc	drawCircle@f+1,7,c
 12287  001D82  D00B               	goto	l255
 12288                           
 12289                           ;ST7735_TFT.c: 571: y--;
 12290  001D84  062C               	decf	drawCircle@y,f,c
 12291  001D86  A0D8               	btfss	status,0,c
 12292  001D88  062D               	decf	drawCircle@y+1,f,c
 12293                           
 12294                           ;ST7735_TFT.c: 572: ddF_y += 2;
 12295  001D8A  0E02               	movlw	2
 12296  001D8C  2626               	addwf	drawCircle@ddF_y,f,c
 12297  001D8E  0E00               	movlw	0
 12298  001D90  2227               	addwfc	drawCircle@ddF_y+1,f,c
 12299                           
 12300                           ;ST7735_TFT.c: 573: f += ddF_y;
 12301  001D92  5026               	movf	drawCircle@ddF_y,w,c
 12302  001D94  2628               	addwf	drawCircle@f,f,c
 12303  001D96  5027               	movf	drawCircle@ddF_y+1,w,c
 12304  001D98  2229               	addwfc	drawCircle@f+1,f,c
 12305  001D9A                     l255:
 12306                           
 12307                           ;ST7735_TFT.c: 574: }
 12308                           ;ST7735_TFT.c: 575: x++;
 12309  001D9A  4A2A               	infsnz	drawCircle@x,f,c
 12310  001D9C  2A2B               	incf	drawCircle@x+1,f,c
 12311                           
 12312                           ;ST7735_TFT.c: 576: ddF_x += 2;
 12313  001D9E  0E02               	movlw	2
 12314  001DA0  2624               	addwf	drawCircle@ddF_x,f,c
 12315  001DA2  0E00               	movlw	0
 12316  001DA4  2225               	addwfc	drawCircle@ddF_x+1,f,c
 12317                           
 12318                           ;ST7735_TFT.c: 577: f += ddF_x;
 12319  001DA6  5024               	movf	drawCircle@ddF_x,w,c
 12320  001DA8  2628               	addwf	drawCircle@f,f,c
 12321  001DAA  5025               	movf	drawCircle@ddF_x+1,w,c
 12322  001DAC  2229               	addwfc	drawCircle@f+1,f,c
 12323                           
 12324                           ;ST7735_TFT.c: 578: drawPixel(x0 + x, y0 + y, color);
 12325  001DAE  501C               	movf	drawCircle@y0,w,c
 12326  001DB0  242C               	addwf	drawCircle@y,w,c
 12327  001DB2  6E16               	movwf	drawPixel@y,c
 12328  001DB4  C020  F017         	movff	drawCircle@color,drawPixel@color
 12329  001DB8  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12330  001DBC  501A               	movf	drawCircle@x0,w,c
 12331  001DBE  242A               	addwf	drawCircle@x,w,c
 12332  001DC0  ECFD  F01C         	call	_drawPixel
 12333                           
 12334                           ;ST7735_TFT.c: 579: drawPixel(x0 - x, y0 + y, color);
 12335  001DC4  501C               	movf	drawCircle@y0,w,c
 12336  001DC6  242C               	addwf	drawCircle@y,w,c
 12337  001DC8  6E16               	movwf	drawPixel@y,c
 12338  001DCA  C020  F017         	movff	drawCircle@color,drawPixel@color
 12339  001DCE  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12340  001DD2  502A               	movf	drawCircle@x,w,c
 12341  001DD4  0800               	sublw	0
 12342  001DD6  241A               	addwf	drawCircle@x0,w,c
 12343  001DD8  ECFD  F01C         	call	_drawPixel
 12344                           
 12345                           ;ST7735_TFT.c: 580: drawPixel(x0 + x, y0 - y, color);
 12346  001DDC  502C               	movf	drawCircle@y,w,c
 12347  001DDE  0800               	sublw	0
 12348  001DE0  241C               	addwf	drawCircle@y0,w,c
 12349  001DE2  6E16               	movwf	drawPixel@y,c
 12350  001DE4  C020  F017         	movff	drawCircle@color,drawPixel@color
 12351  001DE8  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12352  001DEC  501A               	movf	drawCircle@x0,w,c
 12353  001DEE  242A               	addwf	drawCircle@x,w,c
 12354  001DF0  ECFD  F01C         	call	_drawPixel
 12355                           
 12356                           ;ST7735_TFT.c: 581: drawPixel(x0 - x, y0 - y, color);
 12357  001DF4  502C               	movf	drawCircle@y,w,c
 12358  001DF6  0800               	sublw	0
 12359  001DF8  241C               	addwf	drawCircle@y0,w,c
 12360  001DFA  6E16               	movwf	drawPixel@y,c
 12361  001DFC  C020  F017         	movff	drawCircle@color,drawPixel@color
 12362  001E00  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12363  001E04  502A               	movf	drawCircle@x,w,c
 12364  001E06  0800               	sublw	0
 12365  001E08  241A               	addwf	drawCircle@x0,w,c
 12366  001E0A  ECFD  F01C         	call	_drawPixel
 12367                           
 12368                           ;ST7735_TFT.c: 582: drawPixel(x0 + y, y0 + x, color);
 12369  001E0E  501C               	movf	drawCircle@y0,w,c
 12370  001E10  242A               	addwf	drawCircle@x,w,c
 12371  001E12  6E16               	movwf	drawPixel@y,c
 12372  001E14  C020  F017         	movff	drawCircle@color,drawPixel@color
 12373  001E18  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12374  001E1C  501A               	movf	drawCircle@x0,w,c
 12375  001E1E  242C               	addwf	drawCircle@y,w,c
 12376  001E20  ECFD  F01C         	call	_drawPixel
 12377                           
 12378                           ;ST7735_TFT.c: 583: drawPixel(x0 - y, y0 + x, color);
 12379  001E24  501C               	movf	drawCircle@y0,w,c
 12380  001E26  242A               	addwf	drawCircle@x,w,c
 12381  001E28  6E16               	movwf	drawPixel@y,c
 12382  001E2A  C020  F017         	movff	drawCircle@color,drawPixel@color
 12383  001E2E  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12384  001E32  502C               	movf	drawCircle@y,w,c
 12385  001E34  0800               	sublw	0
 12386  001E36  241A               	addwf	drawCircle@x0,w,c
 12387  001E38  ECFD  F01C         	call	_drawPixel
 12388                           
 12389                           ;ST7735_TFT.c: 584: drawPixel(x0 + y, y0 - x, color);
 12390  001E3C  502A               	movf	drawCircle@x,w,c
 12391  001E3E  0800               	sublw	0
 12392  001E40  241C               	addwf	drawCircle@y0,w,c
 12393  001E42  6E16               	movwf	drawPixel@y,c
 12394  001E44  C020  F017         	movff	drawCircle@color,drawPixel@color
 12395  001E48  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12396  001E4C  501A               	movf	drawCircle@x0,w,c
 12397  001E4E  242C               	addwf	drawCircle@y,w,c
 12398  001E50  ECFD  F01C         	call	_drawPixel
 12399                           
 12400                           ;ST7735_TFT.c: 585: drawPixel(x0 - y, y0 - x, color);
 12401  001E54  502A               	movf	drawCircle@x,w,c
 12402  001E56  0800               	sublw	0
 12403  001E58  241C               	addwf	drawCircle@y0,w,c
 12404  001E5A  6E16               	movwf	drawPixel@y,c
 12405  001E5C  C020  F017         	movff	drawCircle@color,drawPixel@color
 12406  001E60  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
 12407  001E64  502C               	movf	drawCircle@y,w,c
 12408  001E66  0800               	sublw	0
 12409  001E68  241A               	addwf	drawCircle@x0,w,c
 12410  001E6A  ECFD  F01C         	call	_drawPixel
 12411  001E6E  D000               	goto	l3822
 12412  001E70                     l3822:
 12413  001E70  502C               	movf	drawCircle@y,w,c
 12414  001E72  5C2A               	subwf	drawCircle@x,w,c
 12415  001E74  502B               	movf	drawCircle@x+1,w,c
 12416  001E76  0A80               	xorlw	128
 12417  001E78  6E22               	movwf	??_drawCircle& (0+255),c
 12418  001E7A  502D               	movf	drawCircle@y+1,w,c
 12419  001E7C  0A80               	xorlw	128
 12420  001E7E  5822               	subwfb	??_drawCircle& (0+255),w,c
 12421  001E80  A0D8               	btfss	status,0,c
 12422  001E82  D77E               	goto	l3794
 12423  001E84  0012               	return		;funcret
 12424  001E86                     __end_of_drawCircle:
 12425                           	opt stack 0
 12426                           tblptru	equ	0xFF8
 12427                           tblptrh	equ	0xFF7
 12428                           tblptrl	equ	0xFF6
 12429                           tablat	equ	0xFF5
 12430                           prodh	equ	0xFF4
 12431                           prodl	equ	0xFF3
 12432                           intcon	equ	0xFF2
 12433                           intcon2	equ	0xFF1
 12434                           intcon3	equ	0xFF0
 12435                           postinc0	equ	0xFEE
 12436                           wreg	equ	0xFE8
 12437                           postdec1	equ	0xFE5
 12438                           fsr1l	equ	0xFE1
 12439                           indf2	equ	0xFDF
 12440                           postinc2	equ	0xFDE
 12441                           postdec2	equ	0xFDD
 12442                           fsr2h	equ	0xFDA
 12443                           fsr2l	equ	0xFD9
 12444                           status	equ	0xFD8
 12445                           
 12446 ;; *************** function _PED_Control *****************
 12447 ;; Defined at:
 12448 ;;		line 473 in file "Lab9pC.c"
 12449 ;; Parameters:    Size  Location     Type
 12450 ;;  direction       1    wreg     unsigned char 
 12451 ;;  Num_Sec         1   73[COMRAM] unsigned char 
 12452 ;; Auto vars:     Size  Location     Type
 12453 ;;  direction       1   74[COMRAM] unsigned char 
 12454 ;;  i               1   75[COMRAM] unsigned char 
 12455 ;; Return value:  Size  Location     Type
 12456 ;;		None               void
 12457 ;; Registers used:
 12458 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12459 ;; Tracked objects:
 12460 ;;		On entry : 0/0
 12461 ;;		On exit  : 0/0
 12462 ;;		Unchanged: 0/0
 12463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12464 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12465 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12467 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12468 ;;Total ram usage:        3 bytes
 12469 ;; Hardware stack levels used:    1
 12470 ;; Hardware stack levels required when called:   10
 12471 ;; This function calls:
 12472 ;;		_Wait_One_Second_With_Beep
 12473 ;;		_update_LCD_PED_Count
 12474 ;; This function is called by:
 12475 ;;		_Day_Mode
 12476 ;; This function uses a non-reentrant model
 12477 ;;
 12478                           
 12479                           	psect	text52
 12480  003468                     __ptext52:
 12481                           	opt stack 0
 12482  003468                     _PED_Control:
 12483                           	opt stack 19
 12484                           
 12485                           ;incstack = 0
 12486                           ;PED_Control@direction stored from wreg
 12487  003468  6E4B               	movwf	PED_Control@direction,c
 12488                           
 12489                           ;Lab9pC.c: 476: PORTD = PORTD | 0x7f;
 12490  00346A  5083               	movf	3971,w,c	;volatile
 12491  00346C  097F               	iorlw	127
 12492  00346E  6E83               	movwf	3971,c	;volatile
 12493                           
 12494                           ;Lab9pC.c: 477: for(char i = Num_Sec-1;i>0; i--)
 12495  003470  044A               	decf	PED_Control@Num_Sec,w,c
 12496  003472  6E4C               	movwf	PED_Control@i,c
 12497  003474                     l6182:
 12498  003474  504C               	movf	PED_Control@i,w,c
 12499  003476  B4D8               	btfsc	status,2,c
 12500  003478  D015               	goto	l472
 12501  00347A  D001               	goto	l6186
 12502  00347C  D013               	goto	l472
 12503  00347E                     l6186:
 12504                           
 12505                           ;Lab9pC.c: 478: {
 12506                           ;Lab9pC.c: 479: PORTD = LED_7seg[i] & 0xFF;
 12507  00347E  504C               	movf	PED_Control@i,w,c
 12508  003480  0D01               	mullw	1
 12509  003482  0E80               	movlw	low _LED_7seg
 12510  003484  24F3               	addwf	prodl,w,c
 12511  003486  6ED9               	movwf	fsr2l,c
 12512  003488  0E00               	movlw	high _LED_7seg
 12513  00348A  20F4               	addwfc	prodh,w,c
 12514  00348C  6EDA               	movwf	fsr2h,c
 12515  00348E  50DF               	movf	indf2,w,c
 12516  003490  6E83               	movwf	3971,c	;volatile
 12517                           
 12518                           ;Lab9pC.c: 480: update_LCD_PED_Count(direction, i);
 12519  003492  C04C  F048         	movff	PED_Control@i,update_LCD_PED_Count@count
 12520  003496  504B               	movf	PED_Control@direction,w,c
 12521  003498  EC7E  F016         	call	_update_LCD_PED_Count
 12522                           
 12523                           ;Lab9pC.c: 481: Wait_One_Second_With_Beep();
 12524  00349C  ECCA  F01D         	call	_Wait_One_Second_With_Beep	;wreg free
 12525  0034A0  064C               	decf	PED_Control@i,f,c
 12526  0034A2  D7E8               	goto	l6182
 12527  0034A4                     l472:
 12528                           
 12529                           ;Lab9pC.c: 482: }
 12530                           ;Lab9pC.c: 483: PORTD = LED_7seg[0] & 0xFF;
 12531  0034A4  C080  FF83         	movff	_LED_7seg,3971	;volatile
 12532                           
 12533                           ;Lab9pC.c: 485: update_LCD_PED_Count(direction, 0);
 12534  0034A8  0E00               	movlw	0
 12535  0034AA  6E48               	movwf	update_LCD_PED_Count@count,c
 12536  0034AC  504B               	movf	PED_Control@direction,w,c
 12537  0034AE  EC7E  F016         	call	_update_LCD_PED_Count
 12538                           
 12539                           ;Lab9pC.c: 486: Wait_One_Second_With_Beep();
 12540  0034B2  ECCA  F01D         	call	_Wait_One_Second_With_Beep	;wreg free
 12541                           
 12542                           ;Lab9pC.c: 488: if (direction == 2)
 12543  0034B6  0E02               	movlw	2
 12544  0034B8  184B               	xorwf	PED_Control@direction,w,c
 12545  0034BA  A4D8               	btfss	status,2,c
 12546  0034BC  D002               	goto	l473
 12547                           
 12548                           ;Lab9pC.c: 489: {
 12549                           ;Lab9pC.c: 490: NS_PED_SW = 0;
 12550  0034BE  0E00               	movlw	0
 12551  0034C0  6E60               	movwf	_NS_PED_SW,c
 12552  0034C2                     l473:
 12553                           
 12554                           ;Lab9pC.c: 491: }
 12555                           ;Lab9pC.c: 492: if (direction == 0)
 12556  0034C2  504B               	movf	PED_Control@direction,w,c
 12557  0034C4  A4D8               	btfss	status,2,c
 12558  0034C6  D003               	goto	l475
 12559                           
 12560                           ;Lab9pC.c: 493: {
 12561                           ;Lab9pC.c: 494: EW_PED_SW = 0;
 12562  0034C8  0E00               	movlw	0
 12563  0034CA  6E5D               	movwf	_EW_PED_SW,c
 12564  0034CC  D000               	goto	l475
 12565  0034CE                     l475:
 12566  0034CE  0012               	return		;funcret
 12567  0034D0                     __end_of_PED_Control:
 12568                           	opt stack 0
 12569                           tblptru	equ	0xFF8
 12570                           tblptrh	equ	0xFF7
 12571                           tblptrl	equ	0xFF6
 12572                           tablat	equ	0xFF5
 12573                           prodh	equ	0xFF4
 12574                           prodl	equ	0xFF3
 12575                           intcon	equ	0xFF2
 12576                           intcon2	equ	0xFF1
 12577                           intcon3	equ	0xFF0
 12578                           postinc0	equ	0xFEE
 12579                           wreg	equ	0xFE8
 12580                           postdec1	equ	0xFE5
 12581                           fsr1l	equ	0xFE1
 12582                           indf2	equ	0xFDF
 12583                           postinc2	equ	0xFDE
 12584                           postdec2	equ	0xFDD
 12585                           fsr2h	equ	0xFDA
 12586                           fsr2l	equ	0xFD9
 12587                           status	equ	0xFD8
 12588                           
 12589 ;; *************** function _update_LCD_PED_Count *****************
 12590 ;; Defined at:
 12591 ;;		line 741 in file "Lab9pC.c"
 12592 ;; Parameters:    Size  Location     Type
 12593 ;;  direction       1    wreg     unsigned char 
 12594 ;;  count           1   71[COMRAM] unsigned char 
 12595 ;; Auto vars:     Size  Location     Type
 12596 ;;  direction       1   72[COMRAM] unsigned char 
 12597 ;; Return value:  Size  Location     Type
 12598 ;;		None               void
 12599 ;; Registers used:
 12600 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12601 ;; Tracked objects:
 12602 ;;		On entry : 0/0
 12603 ;;		On exit  : 0/0
 12604 ;;		Unchanged: 0/0
 12605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12606 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12607 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12609 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12610 ;;Total ram usage:        2 bytes
 12611 ;; Hardware stack levels used:    1
 12612 ;; Hardware stack levels required when called:    9
 12613 ;; This function calls:
 12614 ;;		___awdiv
 12615 ;;		___awmod
 12616 ;;		_drawtext
 12617 ;; This function is called by:
 12618 ;;		_PED_Control
 12619 ;; This function uses a non-reentrant model
 12620 ;;
 12621                           
 12622                           	psect	text53
 12623  002CFC                     __ptext53:
 12624                           	opt stack 0
 12625  002CFC                     _update_LCD_PED_Count:
 12626                           	opt stack 19
 12627                           
 12628                           ;incstack = 0
 12629                           ;update_LCD_PED_Count@direction stored from wreg
 12630  002CFC  6E49               	movwf	update_LCD_PED_Count@direction,c
 12631                           
 12632                           ;Lab9pC.c: 743: switch (direction)
 12633  002CFE  D05A               	goto	l5996
 12634  002D00                     l5986:
 12635                           
 12636                           ;Lab9pC.c: 746: PED_EW_Count[0] = count/10 + '0';
 12637  002D00  C048  F015         	movff	update_LCD_PED_Count@count,___awdiv@dividend
 12638  002D04  6A16               	clrf	___awdiv@dividend+1,c
 12639  002D06  0E00               	movlw	0
 12640  002D08  6E18               	movwf	___awdiv@divisor+1,c
 12641  002D0A  0E0A               	movlw	10
 12642  002D0C  6E17               	movwf	___awdiv@divisor,c
 12643  002D0E  ECE6  F017         	call	___awdiv	;wreg free
 12644  002D12  5015               	movf	?___awdiv,w,c
 12645  002D14  0F30               	addlw	48
 12646  002D16  0100               	movlb	0	; () banked
 12647  002D18  6F96               	movwf	_PED_EW_Count& (0+255),b
 12648                           
 12649                           ;Lab9pC.c: 747: PED_EW_Count[1] = count%10 + '0';
 12650  002D1A  C048  F00F         	movff	update_LCD_PED_Count@count,___awmod@dividend
 12651  002D1E  6A10               	clrf	___awmod@dividend+1,c
 12652  002D20  0E00               	movlw	0
 12653  002D22  6E12               	movwf	___awmod@divisor+1,c
 12654  002D24  0E0A               	movlw	10
 12655  002D26  6E11               	movwf	___awmod@divisor,c
 12656  002D28  EC83  F019         	call	___awmod	;wreg free
 12657  002D2C  500F               	movf	?___awmod,w,c
 12658  002D2E  0F30               	addlw	48
 12659  002D30  0100               	movlb	0	; () banked
 12660  002D32  6F97               	movwf	(_PED_EW_Count+1)& (0+255),b
 12661                           
 12662                           ; BSR set to: 0
 12663                           ;Lab9pC.c: 748: drawtext(2, 30, PED_EW_Count, 0x07FF, 0x0000, 2);
 12664  002D34  0E1E               	movlw	30
 12665  002D36  6E37               	movwf	drawtext@y,c
 12666  002D38  0E96               	movlw	low _PED_EW_Count
 12667  002D3A  6E38               	movwf	drawtext@_text,c
 12668  002D3C  0E00               	movlw	high _PED_EW_Count
 12669  002D3E  6E39               	movwf	drawtext@_text+1,c
 12670  002D40  0E07               	movlw	7
 12671  002D42  6E3B               	movwf	drawtext@color+1,c
 12672  002D44  683A               	setf	drawtext@color,c
 12673  002D46  0E00               	movlw	0
 12674  002D48  6E3D               	movwf	drawtext@bg+1,c
 12675  002D4A  0E00               	movlw	0
 12676  002D4C  6E3C               	movwf	drawtext@bg,c
 12677  002D4E  0E02               	movlw	2
 12678  002D50  6E3E               	movwf	drawtext@size,c
 12679  002D52  0E02               	movlw	2
 12680  002D54  EC36  F015         	call	_drawtext
 12681                           
 12682                           ;Lab9pC.c: 749: break;
 12683  002D58  D035               	goto	l530
 12684  002D5A                     l5990:
 12685                           
 12686                           ;Lab9pC.c: 752: PED_NS_Count[0] = count/10 + '0';
 12687  002D5A  C048  F015         	movff	update_LCD_PED_Count@count,___awdiv@dividend
 12688  002D5E  6A16               	clrf	___awdiv@dividend+1,c
 12689  002D60  0E00               	movlw	0
 12690  002D62  6E18               	movwf	___awdiv@divisor+1,c
 12691  002D64  0E0A               	movlw	10
 12692  002D66  6E17               	movwf	___awdiv@divisor,c
 12693  002D68  ECE6  F017         	call	___awdiv	;wreg free
 12694  002D6C  5015               	movf	?___awdiv,w,c
 12695  002D6E  0F30               	addlw	48
 12696  002D70  0100               	movlb	0	; () banked
 12697  002D72  6F99               	movwf	_PED_NS_Count& (0+255),b
 12698                           
 12699                           ;Lab9pC.c: 753: PED_NS_Count[1] = count%10 + '0';
 12700  002D74  C048  F00F         	movff	update_LCD_PED_Count@count,___awmod@dividend
 12701  002D78  6A10               	clrf	___awmod@dividend+1,c
 12702  002D7A  0E00               	movlw	0
 12703  002D7C  6E12               	movwf	___awmod@divisor+1,c
 12704  002D7E  0E0A               	movlw	10
 12705  002D80  6E11               	movwf	___awmod@divisor,c
 12706  002D82  EC83  F019         	call	___awmod	;wreg free
 12707  002D86  500F               	movf	?___awmod,w,c
 12708  002D88  0F30               	addlw	48
 12709  002D8A  0100               	movlb	0	; () banked
 12710  002D8C  6F9A               	movwf	(_PED_NS_Count+1)& (0+255),b
 12711                           
 12712                           ; BSR set to: 0
 12713                           ;Lab9pC.c: 754: drawtext(2, 90, PED_NS_Count, 0x07FF, 0x0000, 2);
 12714  002D8E  0E5A               	movlw	90
 12715  002D90  6E37               	movwf	drawtext@y,c
 12716  002D92  0E99               	movlw	low _PED_NS_Count
 12717  002D94  6E38               	movwf	drawtext@_text,c
 12718  002D96  0E00               	movlw	high _PED_NS_Count
 12719  002D98  6E39               	movwf	drawtext@_text+1,c
 12720  002D9A  0E07               	movlw	7
 12721  002D9C  6E3B               	movwf	drawtext@color+1,c
 12722  002D9E  683A               	setf	drawtext@color,c
 12723  002DA0  0E00               	movlw	0
 12724  002DA2  6E3D               	movwf	drawtext@bg+1,c
 12725  002DA4  0E00               	movlw	0
 12726  002DA6  6E3C               	movwf	drawtext@bg,c
 12727  002DA8  0E02               	movlw	2
 12728  002DAA  6E3E               	movwf	drawtext@size,c
 12729  002DAC  0E02               	movlw	2
 12730  002DAE  EC36  F015         	call	_drawtext
 12731                           
 12732                           ;Lab9pC.c: 757: }
 12733                           
 12734                           ;Lab9pC.c: 755: break;
 12735  002DB2  D008               	goto	l530
 12736  002DB4                     l5996:
 12737  002DB4  5049               	movf	update_LCD_PED_Count@direction,w,c
 12738                           
 12739                           ; Switch size 1, requested type "space"
 12740                           ; Number of cases is 2, Range of values is 0 to 2
 12741                           ; switch strategies available:
 12742                           ; Name         Instructions Cycles
 12743                           ; simple_byte            7     4 (average)
 12744                           ;	Chosen strategy is simple_byte
 12745  002DB6  0A00               	xorlw	0	; case 0
 12746  002DB8  B4D8               	btfsc	status,2,c
 12747  002DBA  D7A2               	goto	l5986
 12748  002DBC  0A02               	xorlw	2	; case 2
 12749  002DBE  B4D8               	btfsc	status,2,c
 12750  002DC0  D7CC               	goto	l5990
 12751  002DC2  D000               	goto	l530
 12752  002DC4                     l530:
 12753  002DC4  0012               	return		;funcret
 12754  002DC6                     __end_of_update_LCD_PED_Count:
 12755                           	opt stack 0
 12756                           tblptru	equ	0xFF8
 12757                           tblptrh	equ	0xFF7
 12758                           tblptrl	equ	0xFF6
 12759                           tablat	equ	0xFF5
 12760                           prodh	equ	0xFF4
 12761                           prodl	equ	0xFF3
 12762                           intcon	equ	0xFF2
 12763                           intcon2	equ	0xFF1
 12764                           intcon3	equ	0xFF0
 12765                           postinc0	equ	0xFEE
 12766                           wreg	equ	0xFE8
 12767                           postdec1	equ	0xFE5
 12768                           fsr1l	equ	0xFE1
 12769                           indf2	equ	0xFDF
 12770                           postinc2	equ	0xFDE
 12771                           postdec2	equ	0xFDD
 12772                           fsr2h	equ	0xFDA
 12773                           fsr2l	equ	0xFD9
 12774                           status	equ	0xFD8
 12775                           
 12776 ;; *************** function _drawtext *****************
 12777 ;; Defined at:
 12778 ;;		line 507 in file "ST7735_TFT.c"
 12779 ;; Parameters:    Size  Location     Type
 12780 ;;  x               1    wreg     unsigned char 
 12781 ;;  y               1   54[COMRAM] unsigned char 
 12782 ;;  _text           2   55[COMRAM] PTR unsigned char 
 12783 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
 12784 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
 12785 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
 12786 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
 12787 ;;  color           2   57[COMRAM] unsigned int 
 12788 ;;  bg              2   59[COMRAM] unsigned int 
 12789 ;;  size            1   61[COMRAM] unsigned char 
 12790 ;; Auto vars:     Size  Location     Type
 12791 ;;  x               1   64[COMRAM] unsigned char 
 12792 ;;  i               2   67[COMRAM] unsigned int 
 12793 ;;  textsize        2   65[COMRAM] unsigned int 
 12794 ;;  cursor_x        1   70[COMRAM] unsigned char 
 12795 ;;  cursor_y        1   69[COMRAM] unsigned char 
 12796 ;; Return value:  Size  Location     Type
 12797 ;;		None               void
 12798 ;; Registers used:
 12799 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12800 ;; Tracked objects:
 12801 ;;		On entry : 0/0
 12802 ;;		On exit  : 0/0
 12803 ;;		Unchanged: 0/0
 12804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12805 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12806 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12807 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12808 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12809 ;;Total ram usage:       17 bytes
 12810 ;; Hardware stack levels used:    1
 12811 ;; Hardware stack levels required when called:    8
 12812 ;; This function calls:
 12813 ;;		_drawChar
 12814 ;;		_strlen
 12815 ;; This function is called by:
 12816 ;;		_Initialize_Screen
 12817 ;;		_Wait_One_Second
 12818 ;;		_update_LCD_count
 12819 ;;		_update_LCD_PED_Count
 12820 ;;		_update_LCD_misc
 12821 ;; This function uses a non-reentrant model
 12822 ;;
 12823                           
 12824                           	psect	text54
 12825  002A6C                     __ptext54:
 12826                           	opt stack 0
 12827  002A6C                     _drawtext:
 12828                           	opt stack 19
 12829                           
 12830                           ;incstack = 0
 12831                           ;drawtext@x stored from wreg
 12832  002A6C  6E41               	movwf	drawtext@x,c
 12833                           
 12834                           ;ST7735_TFT.c: 509: unsigned char cursor_x, cursor_y;
 12835                           ;ST7735_TFT.c: 510: unsigned int textsize, i;
 12836                           ;ST7735_TFT.c: 511: cursor_x = x, cursor_y = y;
 12837  002A6E  C041  F047         	movff	drawtext@x,drawtext@cursor_x
 12838  002A72  C037  F046         	movff	drawtext@y,drawtext@cursor_y
 12839                           
 12840                           ;ST7735_TFT.c: 512: textsize = strlen(_text);
 12841  002A76  C038  F00F         	movff	drawtext@_text,strlen@s
 12842  002A7A  C039  F010         	movff	drawtext@_text+1,strlen@s+1
 12843  002A7E  ECA7  F01C         	call	_strlen	;wreg free
 12844  002A82  C00F  F042         	movff	?_strlen,drawtext@textsize
 12845  002A86  C010  F043         	movff	?_strlen+1,drawtext@textsize+1
 12846                           
 12847                           ;ST7735_TFT.c: 513: for(i = 0; i < textsize; i++){
 12848  002A8A  0E00               	movlw	0
 12849  002A8C  6E45               	movwf	drawtext@i+1,c
 12850  002A8E  0E00               	movlw	0
 12851  002A90  6E44               	movwf	drawtext@i,c
 12852  002A92  D054               	goto	l5662
 12853  002A94                     l5636:
 12854                           
 12855                           ;ST7735_TFT.c: 514: if(wrap && ((cursor_x + size * 5) > 128)){
 12856  002A94  5068               	movf	_wrap,w,c
 12857  002A96  B4D8               	btfsc	status,2,c
 12858  002A98  D02C               	goto	l5652
 12859  002A9A  503E               	movf	drawtext@size,w,c
 12860  002A9C  0D05               	mullw	5
 12861  002A9E  5047               	movf	drawtext@cursor_x,w,c
 12862  002AA0  6E3F               	movwf	??_drawtext& (0+255),c
 12863  002AA2  6A40               	clrf	(??_drawtext+1)& (0+255),c
 12864  002AA4  50F3               	movf	prodl,w,c
 12865  002AA6  263F               	addwf	??_drawtext,f,c
 12866  002AA8  50F4               	movf	prodh,w,c
 12867  002AAA  2240               	addwfc	??_drawtext+1,f,c
 12868  002AAC  BE40               	btfsc	??_drawtext+1,7,c
 12869  002AAE  D021               	goto	l5652
 12870  002AB0  5040               	movf	??_drawtext+1,w,c
 12871  002AB2  E104               	bnz	u5000
 12872  002AB4  0E81               	movlw	129
 12873  002AB6  5C3F               	subwf	??_drawtext,w,c
 12874  002AB8  A0D8               	btfss	status,0,c
 12875  002ABA  D01B               	goto	l5652
 12876  002ABC                     u5000:
 12877                           
 12878                           ;ST7735_TFT.c: 515: cursor_x = 0;
 12879  002ABC  0E00               	movlw	0
 12880  002ABE  6E47               	movwf	drawtext@cursor_x,c
 12881                           
 12882                           ;ST7735_TFT.c: 516: cursor_y = cursor_y + size * 7 + 3 ;
 12883  002AC0  503E               	movf	drawtext@size,w,c
 12884  002AC2  0D07               	mullw	7
 12885  002AC4  50F3               	movf	prodl,w,c
 12886  002AC6  2446               	addwf	drawtext@cursor_y,w,c
 12887  002AC8  0F03               	addlw	3
 12888  002ACA  6E46               	movwf	drawtext@cursor_y,c
 12889                           
 12890                           ;ST7735_TFT.c: 517: if(cursor_y > 160) cursor_y = 160;
 12891  002ACC  0EA0               	movlw	160
 12892  002ACE  6446               	cpfsgt	drawtext@cursor_y,c
 12893  002AD0  D003               	goto	l5648
 12894  002AD2  0EA0               	movlw	160
 12895  002AD4  6E46               	movwf	drawtext@cursor_y,c
 12896  002AD6  D000               	goto	l5648
 12897  002AD8                     l5648:
 12898                           
 12899                           ;ST7735_TFT.c: 518: if(_text[i] == 0x20) goto _skip; }
 12900  002AD8  5044               	movf	drawtext@i,w,c
 12901  002ADA  2438               	addwf	drawtext@_text,w,c
 12902  002ADC  6ED9               	movwf	fsr2l,c
 12903  002ADE  5045               	movf	drawtext@i+1,w,c
 12904  002AE0  2039               	addwfc	drawtext@_text+1,w,c
 12905  002AE2  6EDA               	movwf	fsr2h,c
 12906  002AE4  0E20               	movlw	32
 12907  002AE6  18DE               	xorwf	postinc2,w,c
 12908  002AE8  B4D8               	btfsc	status,2,c
 12909  002AEA  D025               	goto	l5660
 12910  002AEC  D002               	goto	l5652
 12911  002AEE  D023               	goto	l5660
 12912  002AF0  D000               	goto	l5652
 12913  002AF2                     l5652:
 12914                           
 12915                           ;ST7735_TFT.c: 519: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
 12916  002AF2  C046  F02C         	movff	drawtext@cursor_y,drawChar@y
 12917  002AF6  5044               	movf	drawtext@i,w,c
 12918  002AF8  2438               	addwf	drawtext@_text,w,c
 12919  002AFA  6ED9               	movwf	fsr2l,c
 12920  002AFC  5045               	movf	drawtext@i+1,w,c
 12921  002AFE  2039               	addwfc	drawtext@_text+1,w,c
 12922  002B00  6EDA               	movwf	fsr2h,c
 12923  002B02  50DF               	movf	indf2,w,c
 12924  002B04  6E2D               	movwf	drawChar@c,c
 12925  002B06  C03A  F02E         	movff	drawtext@color,drawChar@color
 12926  002B0A  C03B  F02F         	movff	drawtext@color+1,drawChar@color+1
 12927  002B0E  C03C  F030         	movff	drawtext@bg,drawChar@bg
 12928  002B12  C03D  F031         	movff	drawtext@bg+1,drawChar@bg+1
 12929  002B16  C03E  F032         	movff	drawtext@size,drawChar@size
 12930  002B1A  5047               	movf	drawtext@cursor_x,w,c
 12931  002B1C  EC0A  F010         	call	_drawChar
 12932                           
 12933                           ;ST7735_TFT.c: 520: cursor_x = cursor_x + size * 6;
 12934  002B20  503E               	movf	drawtext@size,w,c
 12935  002B22  0D06               	mullw	6
 12936  002B24  50F3               	movf	prodl,w,c
 12937  002B26  2447               	addwf	drawtext@cursor_x,w,c
 12938  002B28  6E47               	movwf	drawtext@cursor_x,c
 12939                           
 12940                           ;ST7735_TFT.c: 521: if(cursor_x > 128) cursor_x = 128;
 12941  002B2A  0E80               	movlw	128
 12942  002B2C  6447               	cpfsgt	drawtext@cursor_x,c
 12943  002B2E  D003               	goto	l5660
 12944  002B30  0E80               	movlw	128
 12945  002B32  6E47               	movwf	drawtext@cursor_x,c
 12946  002B34  D000               	goto	l5660
 12947  002B36                     l5660:
 12948  002B36  4A44               	infsnz	drawtext@i,f,c
 12949  002B38  2A45               	incf	drawtext@i+1,f,c
 12950  002B3A  D000               	goto	l5662
 12951  002B3C                     l5662:
 12952  002B3C  5042               	movf	drawtext@textsize,w,c
 12953  002B3E  5C44               	subwf	drawtext@i,w,c
 12954  002B40  5043               	movf	drawtext@textsize+1,w,c
 12955  002B42  5845               	subwfb	drawtext@i+1,w,c
 12956  002B44  A0D8               	btfss	status,0,c
 12957  002B46  D7A6               	goto	l5636
 12958  002B48  0012               	return		;funcret
 12959  002B4A                     __end_of_drawtext:
 12960                           	opt stack 0
 12961                           tblptru	equ	0xFF8
 12962                           tblptrh	equ	0xFF7
 12963                           tblptrl	equ	0xFF6
 12964                           tablat	equ	0xFF5
 12965                           prodh	equ	0xFF4
 12966                           prodl	equ	0xFF3
 12967                           intcon	equ	0xFF2
 12968                           intcon2	equ	0xFF1
 12969                           intcon3	equ	0xFF0
 12970                           postinc0	equ	0xFEE
 12971                           wreg	equ	0xFE8
 12972                           postdec1	equ	0xFE5
 12973                           fsr1l	equ	0xFE1
 12974                           indf2	equ	0xFDF
 12975                           postinc2	equ	0xFDE
 12976                           postdec2	equ	0xFDD
 12977                           fsr2h	equ	0xFDA
 12978                           fsr2l	equ	0xFD9
 12979                           status	equ	0xFD8
 12980                           
 12981 ;; *************** function _strlen *****************
 12982 ;; Defined at:
 12983 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
 12984 ;; Parameters:    Size  Location     Type
 12985 ;;  s               2   14[COMRAM] PTR const unsigned char 
 12986 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
 12987 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
 12988 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
 12989 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
 12990 ;; Auto vars:     Size  Location     Type
 12991 ;;  cp              2   18[COMRAM] PTR const unsigned char 
 12992 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), 
 12993 ;;		 -> SW_EWLT_Txt(2), SW_EWPED_Txt(2), PED_NS_Count(3), PED_EW_Count(3), 
 12994 ;;		 -> NSLT_Count(3), NS_Count(3), EWLT_Count(3), EW_Count(3), 
 12995 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), Act_Mode_Txt(2), buffer(31), 
 12996 ;; Return value:  Size  Location     Type
 12997 ;;                  2   14[COMRAM] unsigned int 
 12998 ;; Registers used:
 12999 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13000 ;; Tracked objects:
 13001 ;;		On entry : 0/0
 13002 ;;		On exit  : 0/0
 13003 ;;		Unchanged: 0/0
 13004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13005 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13006 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13007 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13008 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13009 ;;Total ram usage:        6 bytes
 13010 ;; Hardware stack levels used:    1
 13011 ;; Hardware stack levels required when called:    2
 13012 ;; This function calls:
 13013 ;;		Nothing
 13014 ;; This function is called by:
 13015 ;;		_drawtext
 13016 ;; This function uses a non-reentrant model
 13017 ;;
 13018                           
 13019                           	psect	text55
 13020  00394E                     __ptext55:
 13021                           	opt stack 0
 13022  00394E                     _strlen:
 13023                           	opt stack 24
 13024                           
 13025                           ;incstack = 0
 13026  00394E  C00F  F013         	movff	strlen@s,strlen@cp
 13027  003952  C010  F014         	movff	strlen@s+1,strlen@cp+1
 13028  003956  D003               	goto	l3568
 13029  003958                     l3566:
 13030  003958  4A13               	infsnz	strlen@cp,f,c
 13031  00395A  2A14               	incf	strlen@cp+1,f,c
 13032  00395C  D000               	goto	l3568
 13033  00395E                     l3568:
 13034  00395E  C013  FFD9         	movff	strlen@cp,fsr2l
 13035  003962  C014  FFDA         	movff	strlen@cp+1,fsr2h
 13036  003966  50DF               	movf	indf2,w,c
 13037  003968  A4D8               	btfss	status,2,c
 13038  00396A  D7F6               	goto	l3566
 13039  00396C  C00F  F011         	movff	strlen@s,??_strlen
 13040  003970  C010  F012         	movff	strlen@s+1,??_strlen+1
 13041  003974  1E11               	comf	??_strlen,f,c
 13042  003976  1E12               	comf	??_strlen+1,f,c
 13043  003978  4A11               	infsnz	??_strlen,f,c
 13044  00397A  2A12               	incf	??_strlen+1,f,c
 13045  00397C  5013               	movf	strlen@cp,w,c
 13046  00397E  2411               	addwf	??_strlen,w,c
 13047  003980  6E0F               	movwf	?_strlen,c
 13048  003982  5014               	movf	strlen@cp+1,w,c
 13049  003984  2012               	addwfc	??_strlen+1,w,c
 13050  003986  6E10               	movwf	?_strlen+1,c
 13051  003988  D000               	goto	l1278
 13052  00398A                     l1278:
 13053  00398A  0012               	return		;funcret
 13054  00398C                     __end_of_strlen:
 13055                           	opt stack 0
 13056                           tblptru	equ	0xFF8
 13057                           tblptrh	equ	0xFF7
 13058                           tblptrl	equ	0xFF6
 13059                           tablat	equ	0xFF5
 13060                           prodh	equ	0xFF4
 13061                           prodl	equ	0xFF3
 13062                           intcon	equ	0xFF2
 13063                           intcon2	equ	0xFF1
 13064                           intcon3	equ	0xFF0
 13065                           postinc0	equ	0xFEE
 13066                           wreg	equ	0xFE8
 13067                           postdec1	equ	0xFE5
 13068                           fsr1l	equ	0xFE1
 13069                           indf2	equ	0xFDF
 13070                           postinc2	equ	0xFDE
 13071                           postdec2	equ	0xFDD
 13072                           fsr2h	equ	0xFDA
 13073                           fsr2l	equ	0xFD9
 13074                           status	equ	0xFD8
 13075                           
 13076 ;; *************** function _drawChar *****************
 13077 ;; Defined at:
 13078 ;;		line 480 in file "ST7735_TFT.c"
 13079 ;; Parameters:    Size  Location     Type
 13080 ;;  x               1    wreg     unsigned char 
 13081 ;;  y               1   43[COMRAM] unsigned char 
 13082 ;;  c               1   44[COMRAM] unsigned char 
 13083 ;;  color           2   45[COMRAM] unsigned int 
 13084 ;;  bg              2   47[COMRAM] unsigned int 
 13085 ;;  size            1   49[COMRAM] unsigned char 
 13086 ;; Auto vars:     Size  Location     Type
 13087 ;;  x               1   51[COMRAM] unsigned char 
 13088 ;;  line            1   50[COMRAM] unsigned char 
 13089 ;;  i               1   53[COMRAM] unsigned char 
 13090 ;;  j               1   52[COMRAM] unsigned char 
 13091 ;; Return value:  Size  Location     Type
 13092 ;;		None               void
 13093 ;; Registers used:
 13094 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13095 ;; Tracked objects:
 13096 ;;		On entry : 0/0
 13097 ;;		On exit  : 0/0
 13098 ;;		Unchanged: 0/0
 13099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13100 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13101 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13103 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13104 ;;Total ram usage:       11 bytes
 13105 ;; Hardware stack levels used:    1
 13106 ;; Hardware stack levels required when called:    7
 13107 ;; This function calls:
 13108 ;;		___wmul
 13109 ;;		_drawPixel
 13110 ;;		_fillRect
 13111 ;; This function is called by:
 13112 ;;		_drawtext
 13113 ;; This function uses a non-reentrant model
 13114 ;;
 13115                           
 13116                           	psect	text56
 13117  002014                     __ptext56:
 13118                           	opt stack 0
 13119  002014                     _drawChar:
 13120                           	opt stack 19
 13121                           
 13122                           ;incstack = 0
 13123                           ;drawChar@x stored from wreg
 13124  002014  6E34               	movwf	drawChar@x,c
 13125                           
 13126                           ;ST7735_TFT.c: 482: char i, j;
 13127                           ;ST7735_TFT.c: 483: if((x >= 128) || (y >= 160))
 13128  002016  0E80               	movlw	128
 13129  002018  6034               	cpfslt	drawChar@x,c
 13130  00201A  D0A6               	goto	l207
 13131  00201C  0E9F               	movlw	159
 13132  00201E  642C               	cpfsgt	drawChar@y,c
 13133  002020  D001               	goto	l5542
 13134                           
 13135                           ;ST7735_TFT.c: 484: return;
 13136  002022  D0A2               	goto	l207
 13137  002024                     l5542:
 13138                           
 13139                           ;ST7735_TFT.c: 485: if(size < 1) size = 1;
 13140  002024  5032               	movf	drawChar@size,w,c
 13141  002026  A4D8               	btfss	status,2,c
 13142  002028  D003               	goto	l5546
 13143  00202A  0E01               	movlw	1
 13144  00202C  6E32               	movwf	drawChar@size,c
 13145  00202E  D000               	goto	l5546
 13146  002030                     l5546:
 13147                           
 13148                           ;ST7735_TFT.c: 486: if((c < ' ') || (c > '~'))
 13149  002030  0E1F               	movlw	31
 13150  002032  642D               	cpfsgt	drawChar@c,c
 13151  002034  D004               	goto	l5550
 13152  002036  0E7E               	movlw	126
 13153  002038  642D               	cpfsgt	drawChar@c,c
 13154  00203A  D003               	goto	l209
 13155  00203C  D000               	goto	l5550
 13156  00203E                     l5550:
 13157                           
 13158                           ;ST7735_TFT.c: 487: c = '?';
 13159  00203E  0E3F               	movlw	63
 13160  002040  6E2D               	movwf	drawChar@c,c
 13161  002042                     l209:
 13162                           
 13163                           ;ST7735_TFT.c: 488: for(i=0; i<5; i++ ) {
 13164  002042  0E00               	movlw	0
 13165  002044  6E36               	movwf	drawChar@i,c
 13166  002046                     l5552:
 13167  002046  0E04               	movlw	4
 13168  002048  6436               	cpfsgt	drawChar@i,c
 13169  00204A  D001               	goto	l5556
 13170  00204C  D08D               	goto	l207
 13171  00204E                     l5556:
 13172                           
 13173                           ;ST7735_TFT.c: 489: unsigned char line;
 13174                           ;ST7735_TFT.c: 490: if(c < 'S')
 13175  00204E  0E53               	movlw	83
 13176  002050  602D               	cpfslt	drawChar@c,c
 13177  002052  D015               	goto	l5560
 13178                           
 13179                           ;ST7735_TFT.c: 491: line = font[(c - 32)*5 + i];
 13180  002054  0EE0               	movlw	224
 13181  002056  242D               	addwf	drawChar@c,w,c
 13182  002058  6E1D               	movwf	___wmul@multiplier,c
 13183  00205A  6A1E               	clrf	___wmul@multiplier+1,c
 13184  00205C  0EFF               	movlw	255
 13185  00205E  221E               	addwfc	___wmul@multiplier+1,f,c
 13186  002060  0E00               	movlw	0
 13187  002062  6E20               	movwf	___wmul@multiplicand+1,c
 13188  002064  0E05               	movlw	5
 13189  002066  6E1F               	movwf	___wmul@multiplicand,c
 13190  002068  EC40  F01D         	call	___wmul	;wreg free
 13191  00206C  5036               	movf	drawChar@i,w,c
 13192  00206E  261D               	addwf	?___wmul,f,c
 13193  002070  0E00               	movlw	0
 13194  002072  221E               	addwfc	?___wmul+1,f,c
 13195  002074  0E33               	movlw	low _font
 13196  002076  241D               	addwf	?___wmul,w,c
 13197  002078  6EF6               	movwf	tblptrl,c
 13198  00207A  0EFD               	movlw	high _font
 13199  00207C  D014               	goto	L23
 13200  00207E                     l5560:
 13201                           
 13202                           ;ST7735_TFT.c: 492: else
 13203                           ;ST7735_TFT.c: 493: line = font2[(c - 'S')*5 + i];
 13204  00207E  0EAD               	movlw	173
 13205  002080  242D               	addwf	drawChar@c,w,c
 13206  002082  6E1D               	movwf	___wmul@multiplier,c
 13207  002084  6A1E               	clrf	___wmul@multiplier+1,c
 13208  002086  0EFF               	movlw	255
 13209  002088  221E               	addwfc	___wmul@multiplier+1,f,c
 13210  00208A  0E00               	movlw	0
 13211  00208C  6E20               	movwf	___wmul@multiplicand+1,c
 13212  00208E  0E05               	movlw	5
 13213  002090  6E1F               	movwf	___wmul@multiplicand,c
 13214  002092  EC40  F01D         	call	___wmul	;wreg free
 13215  002096  5036               	movf	drawChar@i,w,c
 13216  002098  261D               	addwf	?___wmul,f,c
 13217  00209A  0E00               	movlw	0
 13218  00209C  221E               	addwfc	?___wmul+1,f,c
 13219  00209E  0E32               	movlw	low _font2
 13220  0020A0  241D               	addwf	?___wmul,w,c
 13221  0020A2  6EF6               	movwf	tblptrl,c
 13222  0020A4  0EFE               	movlw	high _font2
 13223  0020A6                     L23:
 13224  0020A6  201E               	addwfc	?___wmul+1,w,c
 13225  0020A8  6EF7               	movwf	tblptrh,c
 13226  0020AA                     	if	0	;There are less than 3 active tblptr bytes
 13227  0020AA                     	endif
 13228  0020AA  0008               	tblrd		*
 13229  0020AC  CFF5 F033          	movff	tablat,drawChar@line
 13230  0020B0  D000               	goto	l5562
 13231  0020B2                     l5562:
 13232                           
 13233                           ;ST7735_TFT.c: 494: for(j=0; j<7; j++, line >>= 1) {
 13234  0020B2  0E00               	movlw	0
 13235  0020B4  6E35               	movwf	drawChar@j,c
 13236  0020B6                     l5564:
 13237  0020B6  0E06               	movlw	6
 13238  0020B8  6435               	cpfsgt	drawChar@j,c
 13239  0020BA  D001               	goto	l216
 13240  0020BC  D053               	goto	l5588
 13241  0020BE                     l216:
 13242                           
 13243                           ;ST7735_TFT.c: 495: if(line & 0x01) {
 13244  0020BE  A033               	btfss	drawChar@line,0,c
 13245  0020C0  D023               	goto	l5574
 13246                           
 13247                           ;ST7735_TFT.c: 496: if(size == 1) drawPixel(x+i, y+j, color);
 13248  0020C2  0432               	decf	drawChar@size,w,c
 13249  0020C4  A4D8               	btfss	status,2,c
 13250  0020C6  D00C               	goto	l5572
 13251  0020C8  502C               	movf	drawChar@y,w,c
 13252  0020CA  2435               	addwf	drawChar@j,w,c
 13253  0020CC  6E16               	movwf	drawPixel@y,c
 13254  0020CE  C02E  F017         	movff	drawChar@color,drawPixel@color
 13255  0020D2  C02F  F018         	movff	drawChar@color+1,drawPixel@color+1
 13256  0020D6  5034               	movf	drawChar@x,w,c
 13257  0020D8  2436               	addwf	drawChar@i,w,c
 13258  0020DA  ECFD  F01C         	call	_drawPixel
 13259  0020DE  D03E               	goto	l5582
 13260  0020E0                     l5572:
 13261                           
 13262                           ;ST7735_TFT.c: 497: else fillRect(x+(i*size), y+(j*size), size, size, color);
 13263  0020E0  5035               	movf	drawChar@j,w,c
 13264  0020E2  0232               	mulwf	drawChar@size,c
 13265  0020E4  50F3               	movf	prodl,w,c
 13266  0020E6  242C               	addwf	drawChar@y,w,c
 13267  0020E8  6E21               	movwf	fillRect@y,c
 13268  0020EA  C032  F022         	movff	drawChar@size,fillRect@w
 13269  0020EE  C032  F023         	movff	drawChar@size,fillRect@h
 13270  0020F2  C02E  F024         	movff	drawChar@color,fillRect@color
 13271  0020F6  C02F  F025         	movff	drawChar@color+1,fillRect@color+1
 13272  0020FA  5036               	movf	drawChar@i,w,c
 13273  0020FC  0232               	mulwf	drawChar@size,c
 13274  0020FE  50F3               	movf	prodl,w,c
 13275  002100  2434               	addwf	drawChar@x,w,c
 13276  002102  EC98  F01B         	call	_fillRect
 13277                           
 13278                           ;ST7735_TFT.c: 498: }
 13279  002106  D02A               	goto	l5582
 13280  002108                     l5574:
 13281                           
 13282                           ;ST7735_TFT.c: 499: else if(bg != color) {
 13283  002108  502E               	movf	drawChar@color,w,c
 13284  00210A  1830               	xorwf	drawChar@bg,w,c
 13285  00210C  E104               	bnz	u4870
 13286  00210E  502F               	movf	drawChar@color+1,w,c
 13287  002110  1831               	xorwf	drawChar@bg+1,w,c
 13288  002112  B4D8               	btfsc	status,2,c
 13289  002114  D023               	goto	l5582
 13290  002116                     u4870:
 13291                           
 13292                           ;ST7735_TFT.c: 500: if(size == 1) drawPixel(x+i, y+j, bg);
 13293  002116  0432               	decf	drawChar@size,w,c
 13294  002118  A4D8               	btfss	status,2,c
 13295  00211A  D00C               	goto	l5580
 13296  00211C  502C               	movf	drawChar@y,w,c
 13297  00211E  2435               	addwf	drawChar@j,w,c
 13298  002120  6E16               	movwf	drawPixel@y,c
 13299  002122  C030  F017         	movff	drawChar@bg,drawPixel@color
 13300  002126  C031  F018         	movff	drawChar@bg+1,drawPixel@color+1
 13301  00212A  5034               	movf	drawChar@x,w,c
 13302  00212C  2436               	addwf	drawChar@i,w,c
 13303  00212E  ECFD  F01C         	call	_drawPixel
 13304  002132  D014               	goto	l5582
 13305  002134                     l5580:
 13306                           
 13307                           ;ST7735_TFT.c: 501: else fillRect(x+i*size, y+j*size, size, size, bg);
 13308  002134  5035               	movf	drawChar@j,w,c
 13309  002136  0232               	mulwf	drawChar@size,c
 13310  002138  50F3               	movf	prodl,w,c
 13311  00213A  242C               	addwf	drawChar@y,w,c
 13312  00213C  6E21               	movwf	fillRect@y,c
 13313  00213E  C032  F022         	movff	drawChar@size,fillRect@w
 13314  002142  C032  F023         	movff	drawChar@size,fillRect@h
 13315  002146  C030  F024         	movff	drawChar@bg,fillRect@color
 13316  00214A  C031  F025         	movff	drawChar@bg+1,fillRect@color+1
 13317  00214E  5036               	movf	drawChar@i,w,c
 13318  002150  0232               	mulwf	drawChar@size,c
 13319  002152  50F3               	movf	prodl,w,c
 13320  002154  2434               	addwf	drawChar@x,w,c
 13321  002156  EC98  F01B         	call	_fillRect
 13322  00215A  D000               	goto	l5582
 13323  00215C                     l5582:
 13324  00215C  2A35               	incf	drawChar@j,f,c
 13325  00215E  90D8               	bcf	status,0,c
 13326  002160  3233               	rrcf	drawChar@line,f,c
 13327  002162  D7A9               	goto	l5564
 13328  002164                     l5588:
 13329  002164  2A36               	incf	drawChar@i,f,c
 13330  002166  D76F               	goto	l5552
 13331  002168                     l207:
 13332  002168  0012               	return		;funcret
 13333  00216A                     __end_of_drawChar:
 13334                           	opt stack 0
 13335                           tblptru	equ	0xFF8
 13336                           tblptrh	equ	0xFF7
 13337                           tblptrl	equ	0xFF6
 13338                           tablat	equ	0xFF5
 13339                           prodh	equ	0xFF4
 13340                           prodl	equ	0xFF3
 13341                           intcon	equ	0xFF2
 13342                           intcon2	equ	0xFF1
 13343                           intcon3	equ	0xFF0
 13344                           postinc0	equ	0xFEE
 13345                           wreg	equ	0xFE8
 13346                           postdec1	equ	0xFE5
 13347                           fsr1l	equ	0xFE1
 13348                           indf2	equ	0xFDF
 13349                           postinc2	equ	0xFDE
 13350                           postdec2	equ	0xFDD
 13351                           fsr2h	equ	0xFDA
 13352                           fsr2l	equ	0xFD9
 13353                           status	equ	0xFD8
 13354                           
 13355 ;; *************** function _fillRect *****************
 13356 ;; Defined at:
 13357 ;;		line 470 in file "ST7735_TFT.c"
 13358 ;; Parameters:    Size  Location     Type
 13359 ;;  x               1    wreg     unsigned char 
 13360 ;;  y               1   32[COMRAM] unsigned char 
 13361 ;;  w               1   33[COMRAM] unsigned char 
 13362 ;;  h               1   34[COMRAM] unsigned char 
 13363 ;;  color           2   35[COMRAM] unsigned int 
 13364 ;; Auto vars:     Size  Location     Type
 13365 ;;  x               1   40[COMRAM] unsigned char 
 13366 ;;  i               2   41[COMRAM] int 
 13367 ;; Return value:  Size  Location     Type
 13368 ;;		None               void
 13369 ;; Registers used:
 13370 ;;		wreg, status,2, status,0, cstack
 13371 ;; Tracked objects:
 13372 ;;		On entry : 0/0
 13373 ;;		On exit  : 0/0
 13374 ;;		Unchanged: 0/0
 13375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13376 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13377 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13378 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13379 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13380 ;;Total ram usage:       11 bytes
 13381 ;; Hardware stack levels used:    1
 13382 ;; Hardware stack levels required when called:    6
 13383 ;; This function calls:
 13384 ;;		_drawFastVLine
 13385 ;; This function is called by:
 13386 ;;		_drawChar
 13387 ;; This function uses a non-reentrant model
 13388 ;;
 13389                           
 13390                           	psect	text57
 13391  003730                     __ptext57:
 13392                           	opt stack 0
 13393  003730                     _fillRect:
 13394                           	opt stack 19
 13395                           
 13396                           ;incstack = 0
 13397                           ;fillRect@x stored from wreg
 13398  003730  6E29               	movwf	fillRect@x,c
 13399                           
 13400                           ;ST7735_TFT.c: 472: signed int i;
 13401                           ;ST7735_TFT.c: 474: for (i = x; i < x + w; i++)
 13402  003732  C029  F02A         	movff	fillRect@x,fillRect@i
 13403  003736  6A2B               	clrf	fillRect@i+1,c
 13404  003738  D00E               	goto	l3502
 13405  00373A                     l3498:
 13406                           
 13407                           ;ST7735_TFT.c: 475: {
 13408                           ;ST7735_TFT.c: 476: drawFastVLine(i, y, h, color);
 13409  00373A  C021  F016         	movff	fillRect@y,drawFastVLine@y
 13410  00373E  C023  F017         	movff	fillRect@h,drawFastVLine@h
 13411  003742  C024  F018         	movff	fillRect@color,drawFastVLine@color
 13412  003746  C025  F019         	movff	fillRect@color+1,drawFastVLine@color+1
 13413  00374A  502A               	movf	fillRect@i,w,c
 13414  00374C  ECBB  F018         	call	_drawFastVLine
 13415  003750  4A2A               	infsnz	fillRect@i,f,c
 13416  003752  2A2B               	incf	fillRect@i+1,f,c
 13417  003754  D000               	goto	l3502
 13418  003756                     l3502:
 13419  003756  5022               	movf	fillRect@w,w,c
 13420  003758  C029  F026         	movff	fillRect@x,??_fillRect
 13421  00375C  6A27               	clrf	(??_fillRect+1)& (0+255),c
 13422  00375E  2626               	addwf	??_fillRect,f,c
 13423  003760  0E00               	movlw	0
 13424  003762  2227               	addwfc	??_fillRect+1,f,c
 13425  003764  5026               	movf	??_fillRect,w,c
 13426  003766  5C2A               	subwf	fillRect@i,w,c
 13427  003768  502B               	movf	fillRect@i+1,w,c
 13428  00376A  0A80               	xorlw	128
 13429  00376C  6E28               	movwf	(??_fillRect+2)& (0+255),c
 13430  00376E  5027               	movf	??_fillRect+1,w,c
 13431  003770  0A80               	xorlw	128
 13432  003772  5828               	subwfb	(??_fillRect+2)& (0+255),w,c
 13433  003774  A0D8               	btfss	status,0,c
 13434  003776  D7E1               	goto	l3498
 13435  003778  0012               	return		;funcret
 13436  00377A                     __end_of_fillRect:
 13437                           	opt stack 0
 13438                           tblptru	equ	0xFF8
 13439                           tblptrh	equ	0xFF7
 13440                           tblptrl	equ	0xFF6
 13441                           tablat	equ	0xFF5
 13442                           prodh	equ	0xFF4
 13443                           prodl	equ	0xFF3
 13444                           intcon	equ	0xFF2
 13445                           intcon2	equ	0xFF1
 13446                           intcon3	equ	0xFF0
 13447                           postinc0	equ	0xFEE
 13448                           wreg	equ	0xFE8
 13449                           postdec1	equ	0xFE5
 13450                           fsr1l	equ	0xFE1
 13451                           indf2	equ	0xFDF
 13452                           postinc2	equ	0xFDE
 13453                           postdec2	equ	0xFDD
 13454                           fsr2h	equ	0xFDA
 13455                           fsr2l	equ	0xFD9
 13456                           status	equ	0xFD8
 13457                           
 13458 ;; *************** function _drawFastVLine *****************
 13459 ;; Defined at:
 13460 ;;		line 449 in file "ST7735_TFT.c"
 13461 ;; Parameters:    Size  Location     Type
 13462 ;;  x               1    wreg     unsigned char 
 13463 ;;  y               1   21[COMRAM] unsigned char 
 13464 ;;  h               1   22[COMRAM] unsigned char 
 13465 ;;  color           2   23[COMRAM] unsigned int 
 13466 ;; Auto vars:     Size  Location     Type
 13467 ;;  x               1   31[COMRAM] unsigned char 
 13468 ;;  lo              1   30[COMRAM] unsigned char 
 13469 ;;  hi              1   29[COMRAM] unsigned char 
 13470 ;; Return value:  Size  Location     Type
 13471 ;;		None               void
 13472 ;; Registers used:
 13473 ;;		wreg, status,2, status,0, cstack
 13474 ;; Tracked objects:
 13475 ;;		On entry : 0/0
 13476 ;;		On exit  : 0/0
 13477 ;;		Unchanged: 0/0
 13478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13479 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13480 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13481 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13482 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13483 ;;Total ram usage:       11 bytes
 13484 ;; Hardware stack levels used:    1
 13485 ;; Hardware stack levels required when called:    5
 13486 ;; This function calls:
 13487 ;;		_setAddrWindow
 13488 ;;		_spiwrite
 13489 ;; This function is called by:
 13490 ;;		_fillRect
 13491 ;;		_fillCircleHelper
 13492 ;;		_fillCircle
 13493 ;;		_drawRect
 13494 ;; This function uses a non-reentrant model
 13495 ;;
 13496                           
 13497                           	psect	text58
 13498  003176                     __ptext58:
 13499                           	opt stack 0
 13500  003176                     _drawFastVLine:
 13501                           	opt stack 19
 13502                           
 13503                           ;incstack = 0
 13504                           ;drawFastVLine@x stored from wreg
 13505  003176  6E20               	movwf	drawFastVLine@x,c
 13506                           
 13507                           ;ST7735_TFT.c: 451: unsigned char hi, lo;
 13508                           ;ST7735_TFT.c: 452: if((x >= 128) || (y >= 160))
 13509  003178  0E80               	movlw	128
 13510  00317A  6020               	cpfslt	drawFastVLine@x,c
 13511  00317C  D03F               	goto	l191
 13512  00317E  0E9F               	movlw	159
 13513  003180  6416               	cpfsgt	drawFastVLine@y,c
 13514  003182  D001               	goto	l3468
 13515                           
 13516                           ;ST7735_TFT.c: 453: return;
 13517  003184  D03B               	goto	l191
 13518  003186                     l3468:
 13519                           
 13520                           ;ST7735_TFT.c: 454: if((y + h - 1) >= 160)
 13521  003186  0EFF               	movlw	255
 13522  003188  6E1A               	movwf	??_drawFastVLine& (0+255),c
 13523  00318A  0EFF               	movlw	255
 13524  00318C  6E1B               	movwf	(??_drawFastVLine+1)& (0+255),c
 13525  00318E  5017               	movf	drawFastVLine@h,w,c
 13526  003190  C016  F01C         	movff	drawFastVLine@y,??_drawFastVLine+2
 13527  003194  6A1D               	clrf	(??_drawFastVLine+3)& (0+255),c
 13528  003196  261C               	addwf	??_drawFastVLine+2,f,c
 13529  003198  0E00               	movlw	0
 13530  00319A  221D               	addwfc	??_drawFastVLine+3,f,c
 13531  00319C  501A               	movf	??_drawFastVLine,w,c
 13532  00319E  261C               	addwf	??_drawFastVLine+2,f,c
 13533  0031A0  501B               	movf	??_drawFastVLine+1,w,c
 13534  0031A2  221D               	addwfc	??_drawFastVLine+3,f,c
 13535  0031A4  BE1D               	btfsc	??_drawFastVLine+3,7,c
 13536  0031A6  D00B               	goto	l3472
 13537  0031A8  501D               	movf	??_drawFastVLine+3,w,c
 13538  0031AA  E104               	bnz	u2420
 13539  0031AC  0EA0               	movlw	160
 13540  0031AE  5C1C               	subwf	??_drawFastVLine+2,w,c
 13541  0031B0  A0D8               	btfss	status,0,c
 13542  0031B2  D005               	goto	l3472
 13543  0031B4                     u2420:
 13544                           
 13545                           ;ST7735_TFT.c: 455: h = 160 - y;
 13546  0031B4  5016               	movf	drawFastVLine@y,w,c
 13547  0031B6  0800               	sublw	0
 13548  0031B8  0FA0               	addlw	160
 13549  0031BA  6E17               	movwf	drawFastVLine@h,c
 13550  0031BC  D000               	goto	l3472
 13551  0031BE                     l3472:
 13552                           
 13553                           ;ST7735_TFT.c: 456: hi = color >> 8; lo = color;
 13554  0031BE  5019               	movf	drawFastVLine@color+1,w,c
 13555  0031C0  6E1E               	movwf	drawFastVLine@hi,c
 13556  0031C2  C018  F01F         	movff	drawFastVLine@color,drawFastVLine@lo
 13557                           
 13558                           ;ST7735_TFT.c: 457: setAddrWindow(x, y, x, y + h - 1);
 13559  0031C6  C016  F012         	movff	drawFastVLine@y,setAddrWindow@y0
 13560  0031CA  C020  F013         	movff	drawFastVLine@x,setAddrWindow@x1
 13561  0031CE  5016               	movf	drawFastVLine@y,w,c
 13562  0031D0  2417               	addwf	drawFastVLine@h,w,c
 13563  0031D2  6E1A               	movwf	??_drawFastVLine& (0+255),c
 13564  0031D4  041A               	decf	??_drawFastVLine,w,c
 13565  0031D6  6E14               	movwf	setAddrWindow@y1,c
 13566  0031D8  5020               	movf	drawFastVLine@x,w,c
 13567  0031DA  EC71  F01B         	call	_setAddrWindow
 13568                           
 13569                           ;ST7735_TFT.c: 458: PORTCbits.RC0 = 1;
 13570  0031DE  8082               	bsf	3970,0,c	;volatile
 13571                           
 13572                           ;ST7735_TFT.c: 459: PORTCbits.RC1 = 0;
 13573  0031E0  9282               	bcf	3970,1,c	;volatile
 13574                           
 13575                           ;ST7735_TFT.c: 461: while (h--) {
 13576  0031E2  D007               	goto	l3484
 13577  0031E4                     l3482:
 13578                           
 13579                           ;ST7735_TFT.c: 462: spiwrite(hi);
 13580  0031E4  501E               	movf	drawFastVLine@hi,w,c
 13581  0031E6  ECDF  F01D         	call	_spiwrite
 13582                           
 13583                           ;ST7735_TFT.c: 463: spiwrite(lo);
 13584  0031EA  501F               	movf	drawFastVLine@lo,w,c
 13585  0031EC  ECDF  F01D         	call	_spiwrite
 13586  0031F0  D000               	goto	l3484
 13587  0031F2                     l3484:
 13588  0031F2  0617               	decf	drawFastVLine@h,f,c
 13589  0031F4  2817               	incf	drawFastVLine@h,w,c
 13590  0031F6  A4D8               	btfss	status,2,c
 13591  0031F8  D7F5               	goto	l3482
 13592                           
 13593                           ;ST7735_TFT.c: 464: }
 13594                           ;ST7735_TFT.c: 465: PORTCbits.RC1 = 1;
 13595  0031FA  8282               	bsf	3970,1,c	;volatile
 13596  0031FC                     l191:
 13597  0031FC  0012               	return		;funcret
 13598  0031FE                     __end_of_drawFastVLine:
 13599                           	opt stack 0
 13600                           tblptru	equ	0xFF8
 13601                           tblptrh	equ	0xFF7
 13602                           tblptrl	equ	0xFF6
 13603                           tablat	equ	0xFF5
 13604                           prodh	equ	0xFF4
 13605                           prodl	equ	0xFF3
 13606                           intcon	equ	0xFF2
 13607                           intcon2	equ	0xFF1
 13608                           intcon3	equ	0xFF0
 13609                           postinc0	equ	0xFEE
 13610                           wreg	equ	0xFE8
 13611                           postdec1	equ	0xFE5
 13612                           fsr1l	equ	0xFE1
 13613                           indf2	equ	0xFDF
 13614                           postinc2	equ	0xFDE
 13615                           postdec2	equ	0xFDD
 13616                           fsr2h	equ	0xFDA
 13617                           fsr2l	equ	0xFD9
 13618                           status	equ	0xFD8
 13619                           
 13620 ;; *************** function _drawPixel *****************
 13621 ;; Defined at:
 13622 ;;		line 440 in file "ST7735_TFT.c"
 13623 ;; Parameters:    Size  Location     Type
 13624 ;;  x               1    wreg     unsigned char 
 13625 ;;  y               1   21[COMRAM] unsigned char 
 13626 ;;  color           2   22[COMRAM] unsigned int 
 13627 ;; Auto vars:     Size  Location     Type
 13628 ;;  x               1   24[COMRAM] unsigned char 
 13629 ;; Return value:  Size  Location     Type
 13630 ;;		None               void
 13631 ;; Registers used:
 13632 ;;		wreg, status,2, status,0, cstack
 13633 ;; Tracked objects:
 13634 ;;		On entry : 0/0
 13635 ;;		On exit  : 0/0
 13636 ;;		Unchanged: 0/0
 13637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13638 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13639 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13641 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13642 ;;Total ram usage:        4 bytes
 13643 ;; Hardware stack levels used:    1
 13644 ;; Hardware stack levels required when called:    5
 13645 ;; This function calls:
 13646 ;;		_setAddrWindow
 13647 ;;		_write_data
 13648 ;; This function is called by:
 13649 ;;		_drawChar
 13650 ;;		_drawCircle
 13651 ;;		_drawCircleHelper
 13652 ;; This function uses a non-reentrant model
 13653 ;;
 13654                           
 13655                           	psect	text59
 13656  0039FA                     __ptext59:
 13657                           	opt stack 0
 13658  0039FA                     _drawPixel:
 13659                           	opt stack 20
 13660                           
 13661                           ;incstack = 0
 13662                           ;drawPixel@x stored from wreg
 13663  0039FA  6E19               	movwf	drawPixel@x,c
 13664                           
 13665                           ;ST7735_TFT.c: 442: if((x >= 128) || (y >= 160))
 13666  0039FC  0E80               	movlw	128
 13667  0039FE  6019               	cpfslt	drawPixel@x,c
 13668  003A00  D013               	goto	l185
 13669  003A02  0E9F               	movlw	159
 13670  003A04  6416               	cpfsgt	drawPixel@y,c
 13671  003A06  D001               	goto	l3490
 13672                           
 13673                           ;ST7735_TFT.c: 443: return;
 13674  003A08  D00F               	goto	l185
 13675  003A0A                     l3490:
 13676                           
 13677                           ;ST7735_TFT.c: 444: setAddrWindow(x,y,x+1,y+1);
 13678  003A0A  C016  F012         	movff	drawPixel@y,setAddrWindow@y0
 13679  003A0E  2819               	incf	drawPixel@x,w,c
 13680  003A10  6E13               	movwf	setAddrWindow@x1,c
 13681  003A12  2816               	incf	drawPixel@y,w,c
 13682  003A14  6E14               	movwf	setAddrWindow@y1,c
 13683  003A16  5019               	movf	drawPixel@x,w,c
 13684  003A18  EC71  F01B         	call	_setAddrWindow
 13685                           
 13686                           ;ST7735_TFT.c: 445: write_data(color >> 8);
 13687  003A1C  5018               	movf	drawPixel@color+1,w,c
 13688  003A1E  ECFB  F01D         	call	_write_data
 13689                           
 13690                           ;ST7735_TFT.c: 446: write_data(color & 0xFF);
 13691  003A22  5017               	movf	drawPixel@color,w,c
 13692  003A24  ECFB  F01D         	call	_write_data
 13693  003A28                     l185:
 13694  003A28  0012               	return		;funcret
 13695  003A2A                     __end_of_drawPixel:
 13696                           	opt stack 0
 13697                           tblptru	equ	0xFF8
 13698                           tblptrh	equ	0xFF7
 13699                           tblptrl	equ	0xFF6
 13700                           tablat	equ	0xFF5
 13701                           prodh	equ	0xFF4
 13702                           prodl	equ	0xFF3
 13703                           intcon	equ	0xFF2
 13704                           intcon2	equ	0xFF1
 13705                           intcon3	equ	0xFF0
 13706                           postinc0	equ	0xFEE
 13707                           wreg	equ	0xFE8
 13708                           postdec1	equ	0xFE5
 13709                           fsr1l	equ	0xFE1
 13710                           indf2	equ	0xFDF
 13711                           postinc2	equ	0xFDE
 13712                           postdec2	equ	0xFDD
 13713                           fsr2h	equ	0xFDA
 13714                           fsr2l	equ	0xFD9
 13715                           status	equ	0xFD8
 13716                           
 13717 ;; *************** function _setAddrWindow *****************
 13718 ;; Defined at:
 13719 ;;		line 425 in file "ST7735_TFT.c"
 13720 ;; Parameters:    Size  Location     Type
 13721 ;;  x0              1    wreg     unsigned char 
 13722 ;;  y0              1   17[COMRAM] unsigned char 
 13723 ;;  x1              1   18[COMRAM] unsigned char 
 13724 ;;  y1              1   19[COMRAM] unsigned char 
 13725 ;; Auto vars:     Size  Location     Type
 13726 ;;  x0              1   20[COMRAM] unsigned char 
 13727 ;; Return value:  Size  Location     Type
 13728 ;;		None               void
 13729 ;; Registers used:
 13730 ;;		wreg, status,2, status,0, cstack
 13731 ;; Tracked objects:
 13732 ;;		On entry : 0/0
 13733 ;;		On exit  : 0/0
 13734 ;;		Unchanged: 0/0
 13735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13736 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13737 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13739 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13740 ;;Total ram usage:        4 bytes
 13741 ;; Hardware stack levels used:    1
 13742 ;; Hardware stack levels required when called:    4
 13743 ;; This function calls:
 13744 ;;		_write_command
 13745 ;;		_write_data
 13746 ;; This function is called by:
 13747 ;;		_drawPixel
 13748 ;;		_drawFastVLine
 13749 ;;		_fillRectangle
 13750 ;;		_drawFastHLine
 13751 ;; This function uses a non-reentrant model
 13752 ;;
 13753                           
 13754                           	psect	text60
 13755  0036E2                     __ptext60:
 13756                           	opt stack 0
 13757  0036E2                     _setAddrWindow:
 13758                           	opt stack 19
 13759                           
 13760                           ;incstack = 0
 13761                           ;setAddrWindow@x0 stored from wreg
 13762  0036E2  6E15               	movwf	setAddrWindow@x0,c
 13763                           
 13764                           ;ST7735_TFT.c: 427: write_command(0x2A);
 13765  0036E4  0E2A               	movlw	42
 13766  0036E6  EC03  F01E         	call	_write_command
 13767                           
 13768                           ;ST7735_TFT.c: 428: write_data(0);
 13769  0036EA  0E00               	movlw	0
 13770  0036EC  ECFB  F01D         	call	_write_data
 13771                           
 13772                           ;ST7735_TFT.c: 429: write_data(x0 + colstart);
 13773  0036F0  5015               	movf	setAddrWindow@x0,w,c
 13774  0036F2  2465               	addwf	_colstart,w,c
 13775  0036F4  ECFB  F01D         	call	_write_data
 13776                           
 13777                           ;ST7735_TFT.c: 430: write_data(0);
 13778  0036F8  0E00               	movlw	0
 13779  0036FA  ECFB  F01D         	call	_write_data
 13780                           
 13781                           ;ST7735_TFT.c: 431: write_data(x1 + colstart);
 13782  0036FE  5013               	movf	setAddrWindow@x1,w,c
 13783  003700  2465               	addwf	_colstart,w,c
 13784  003702  ECFB  F01D         	call	_write_data
 13785                           
 13786                           ;ST7735_TFT.c: 432: write_command(0x2B);
 13787  003706  0E2B               	movlw	43
 13788  003708  EC03  F01E         	call	_write_command
 13789                           
 13790                           ;ST7735_TFT.c: 433: write_data(0);
 13791  00370C  0E00               	movlw	0
 13792  00370E  ECFB  F01D         	call	_write_data
 13793                           
 13794                           ;ST7735_TFT.c: 434: write_data(y0 + rowstart);
 13795  003712  5012               	movf	setAddrWindow@y0,w,c
 13796  003714  2467               	addwf	_rowstart,w,c
 13797  003716  ECFB  F01D         	call	_write_data
 13798                           
 13799                           ;ST7735_TFT.c: 435: write_data(0);
 13800  00371A  0E00               	movlw	0
 13801  00371C  ECFB  F01D         	call	_write_data
 13802                           
 13803                           ;ST7735_TFT.c: 436: write_data(y1 + rowstart);
 13804  003720  5014               	movf	setAddrWindow@y1,w,c
 13805  003722  2467               	addwf	_rowstart,w,c
 13806  003724  ECFB  F01D         	call	_write_data
 13807                           
 13808                           ;ST7735_TFT.c: 437: write_command(0x2C);
 13809  003728  0E2C               	movlw	44
 13810  00372A  EC03  F01E         	call	_write_command
 13811  00372E  0012               	return		;funcret
 13812  003730                     __end_of_setAddrWindow:
 13813                           	opt stack 0
 13814                           tblptru	equ	0xFF8
 13815                           tblptrh	equ	0xFF7
 13816                           tblptrl	equ	0xFF6
 13817                           tablat	equ	0xFF5
 13818                           prodh	equ	0xFF4
 13819                           prodl	equ	0xFF3
 13820                           intcon	equ	0xFF2
 13821                           intcon2	equ	0xFF1
 13822                           intcon3	equ	0xFF0
 13823                           postinc0	equ	0xFEE
 13824                           wreg	equ	0xFE8
 13825                           postdec1	equ	0xFE5
 13826                           fsr1l	equ	0xFE1
 13827                           indf2	equ	0xFDF
 13828                           postinc2	equ	0xFDE
 13829                           postdec2	equ	0xFDD
 13830                           fsr2h	equ	0xFDA
 13831                           fsr2l	equ	0xFD9
 13832                           status	equ	0xFD8
 13833                           
 13834 ;; *************** function _write_data *****************
 13835 ;; Defined at:
 13836 ;;		line 242 in file "ST7735_TFT.c"
 13837 ;; Parameters:    Size  Location     Type
 13838 ;;  data_           1    wreg     unsigned char 
 13839 ;; Auto vars:     Size  Location     Type
 13840 ;;  data_           1   16[COMRAM] unsigned char 
 13841 ;; Return value:  Size  Location     Type
 13842 ;;		None               void
 13843 ;; Registers used:
 13844 ;;		wreg, status,2, cstack
 13845 ;; Tracked objects:
 13846 ;;		On entry : 0/0
 13847 ;;		On exit  : 0/0
 13848 ;;		Unchanged: 0/0
 13849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13851 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13853 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13854 ;;Total ram usage:        1 bytes
 13855 ;; Hardware stack levels used:    1
 13856 ;; Hardware stack levels required when called:    3
 13857 ;; This function calls:
 13858 ;;		_spiwrite
 13859 ;; This function is called by:
 13860 ;;		_Rcmd1
 13861 ;;		_Rcmd2red
 13862 ;;		_Rcmd3
 13863 ;;		_setAddrWindow
 13864 ;;		_drawPixel
 13865 ;;		_TFT_GreenTab_Initialize
 13866 ;;		_Bcmd
 13867 ;;		_setScrollDefinition
 13868 ;;		_Rcmd2green
 13869 ;;		_VerticalScroll
 13870 ;; This function uses a non-reentrant model
 13871 ;;
 13872                           
 13873                           	psect	text61
 13874  003BF6                     __ptext61:
 13875                           	opt stack 0
 13876  003BF6                     _write_data:
 13877                           	opt stack 19
 13878                           
 13879                           ;incstack = 0
 13880                           ;write_data@data_ stored from wreg
 13881  003BF6  6E11               	movwf	write_data@data_,c
 13882                           
 13883                           ;ST7735_TFT.c: 244: PORTCbits.RC1 = 0;
 13884  003BF8  9282               	bcf	3970,1,c	;volatile
 13885                           
 13886                           ;ST7735_TFT.c: 245: PORTCbits.RC0 = 1;
 13887  003BFA  8082               	bsf	3970,0,c	;volatile
 13888                           
 13889                           ;ST7735_TFT.c: 246: spiwrite(data_);
 13890  003BFC  5011               	movf	write_data@data_,w,c
 13891  003BFE  ECDF  F01D         	call	_spiwrite
 13892                           
 13893                           ;ST7735_TFT.c: 247: PORTCbits.RC1 = 1;
 13894  003C02  8282               	bsf	3970,1,c	;volatile
 13895  003C04  0012               	return		;funcret
 13896  003C06                     __end_of_write_data:
 13897                           	opt stack 0
 13898                           tblptru	equ	0xFF8
 13899                           tblptrh	equ	0xFF7
 13900                           tblptrl	equ	0xFF6
 13901                           tablat	equ	0xFF5
 13902                           prodh	equ	0xFF4
 13903                           prodl	equ	0xFF3
 13904                           intcon	equ	0xFF2
 13905                           intcon2	equ	0xFF1
 13906                           intcon3	equ	0xFF0
 13907                           postinc0	equ	0xFEE
 13908                           wreg	equ	0xFE8
 13909                           postdec1	equ	0xFE5
 13910                           fsr1l	equ	0xFE1
 13911                           indf2	equ	0xFDF
 13912                           postinc2	equ	0xFDE
 13913                           postdec2	equ	0xFDD
 13914                           fsr2h	equ	0xFDA
 13915                           fsr2l	equ	0xFD9
 13916                           status	equ	0xFD8
 13917                           
 13918 ;; *************** function _write_command *****************
 13919 ;; Defined at:
 13920 ;;		line 231 in file "ST7735_TFT.c"
 13921 ;; Parameters:    Size  Location     Type
 13922 ;;  cmd_            1    wreg     unsigned char 
 13923 ;; Auto vars:     Size  Location     Type
 13924 ;;  cmd_            1   16[COMRAM] unsigned char 
 13925 ;; Return value:  Size  Location     Type
 13926 ;;		None               void
 13927 ;; Registers used:
 13928 ;;		wreg, status,2, cstack
 13929 ;; Tracked objects:
 13930 ;;		On entry : 0/0
 13931 ;;		On exit  : 0/0
 13932 ;;		Unchanged: 0/0
 13933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13935 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13937 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13938 ;;Total ram usage:        1 bytes
 13939 ;; Hardware stack levels used:    1
 13940 ;; Hardware stack levels required when called:    3
 13941 ;; This function calls:
 13942 ;;		_spiwrite
 13943 ;; This function is called by:
 13944 ;;		_Rcmd1
 13945 ;;		_Rcmd2red
 13946 ;;		_Rcmd3
 13947 ;;		_setAddrWindow
 13948 ;;		_TFT_GreenTab_Initialize
 13949 ;;		_Bcmd
 13950 ;;		_setScrollDefinition
 13951 ;;		_Rcmd2green
 13952 ;;		_VerticalScroll
 13953 ;; This function uses a non-reentrant model
 13954 ;;
 13955                           
 13956                           	psect	text62
 13957  003C06                     __ptext62:
 13958                           	opt stack 0
 13959  003C06                     _write_command:
 13960                           	opt stack 19
 13961                           
 13962                           ;incstack = 0
 13963                           ;write_command@cmd_ stored from wreg
 13964  003C06  6E11               	movwf	write_command@cmd_,c
 13965                           
 13966                           ;ST7735_TFT.c: 233: PORTCbits.RC1 = 0;
 13967  003C08  9282               	bcf	3970,1,c	;volatile
 13968                           
 13969                           ;ST7735_TFT.c: 235: PORTCbits.RC0 = 0;
 13970  003C0A  9082               	bcf	3970,0,c	;volatile
 13971                           
 13972                           ;ST7735_TFT.c: 236: spiwrite(cmd_);
 13973  003C0C  5011               	movf	write_command@cmd_,w,c
 13974  003C0E  ECDF  F01D         	call	_spiwrite
 13975                           
 13976                           ;ST7735_TFT.c: 238: PORTCbits.RC1 = 1;
 13977  003C12  8282               	bsf	3970,1,c	;volatile
 13978  003C14  0012               	return		;funcret
 13979  003C16                     __end_of_write_command:
 13980                           	opt stack 0
 13981                           tblptru	equ	0xFF8
 13982                           tblptrh	equ	0xFF7
 13983                           tblptrl	equ	0xFF6
 13984                           tablat	equ	0xFF5
 13985                           prodh	equ	0xFF4
 13986                           prodl	equ	0xFF3
 13987                           intcon	equ	0xFF2
 13988                           intcon2	equ	0xFF1
 13989                           intcon3	equ	0xFF0
 13990                           postinc0	equ	0xFEE
 13991                           wreg	equ	0xFE8
 13992                           postdec1	equ	0xFE5
 13993                           fsr1l	equ	0xFE1
 13994                           indf2	equ	0xFDF
 13995                           postinc2	equ	0xFDE
 13996                           postdec2	equ	0xFDD
 13997                           fsr2h	equ	0xFDA
 13998                           fsr2l	equ	0xFD9
 13999                           status	equ	0xFD8
 14000                           
 14001 ;; *************** function _spiwrite *****************
 14002 ;; Defined at:
 14003 ;;		line 222 in file "ST7735_TFT.c"
 14004 ;; Parameters:    Size  Location     Type
 14005 ;;  spidata         1    wreg     unsigned char 
 14006 ;; Auto vars:     Size  Location     Type
 14007 ;;  spidata         1   15[COMRAM] unsigned char 
 14008 ;;  x               1   14[COMRAM] unsigned char 
 14009 ;; Return value:  Size  Location     Type
 14010 ;;		None               void
 14011 ;; Registers used:
 14012 ;;		wreg
 14013 ;; Tracked objects:
 14014 ;;		On entry : 0/0
 14015 ;;		On exit  : 0/0
 14016 ;;		Unchanged: 0/0
 14017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14019 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14021 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14022 ;;Total ram usage:        2 bytes
 14023 ;; Hardware stack levels used:    1
 14024 ;; Hardware stack levels required when called:    2
 14025 ;; This function calls:
 14026 ;;		Nothing
 14027 ;; This function is called by:
 14028 ;;		_write_command
 14029 ;;		_write_data
 14030 ;;		_drawFastVLine
 14031 ;;		_fillRectangle
 14032 ;;		_drawFastHLine
 14033 ;; This function uses a non-reentrant model
 14034 ;;
 14035                           
 14036                           	psect	text63
 14037  003BBE                     __ptext63:
 14038                           	opt stack 0
 14039  003BBE                     _spiwrite:
 14040                           	opt stack 21
 14041                           
 14042                           ;incstack = 0
 14043                           ;spiwrite@spidata stored from wreg
 14044  003BBE  6E10               	movwf	spiwrite@spidata,c
 14045                           
 14046                           ;ST7735_TFT.c: 224: char x;
 14047                           ;ST7735_TFT.c: 225: PIR1bits.SSPIF = 0;
 14048  003BC0  969E               	bcf	3998,3,c	;volatile
 14049                           
 14050                           ;ST7735_TFT.c: 226: x = SSPBUF;
 14051  003BC2  CFC9 F00F          	movff	4041,spiwrite@x	;volatile
 14052                           
 14053                           ;ST7735_TFT.c: 227: SSPBUF = spidata;
 14054  003BC6  C010  FFC9         	movff	spiwrite@spidata,4041	;volatile
 14055                           
 14056                           ;ST7735_TFT.c: 228: while (!SSPSTATbits.BF);
 14057  003BCA  D000               	goto	l141
 14058  003BCC                     l141:
 14059  003BCC  A0C7               	btfss	4039,0,c	;volatile
 14060  003BCE  D7FE               	goto	l141
 14061  003BD0  0012               	return		;funcret
 14062  003BD2                     __end_of_spiwrite:
 14063                           	opt stack 0
 14064                           tblptru	equ	0xFF8
 14065                           tblptrh	equ	0xFF7
 14066                           tblptrl	equ	0xFF6
 14067                           tablat	equ	0xFF5
 14068                           prodh	equ	0xFF4
 14069                           prodl	equ	0xFF3
 14070                           intcon	equ	0xFF2
 14071                           intcon2	equ	0xFF1
 14072                           intcon3	equ	0xFF0
 14073                           postinc0	equ	0xFEE
 14074                           wreg	equ	0xFE8
 14075                           postdec1	equ	0xFE5
 14076                           fsr1l	equ	0xFE1
 14077                           indf2	equ	0xFDF
 14078                           postinc2	equ	0xFDE
 14079                           postdec2	equ	0xFDD
 14080                           fsr2h	equ	0xFDA
 14081                           fsr2l	equ	0xFD9
 14082                           status	equ	0xFD8
 14083                           
 14084 ;; *************** function ___wmul *****************
 14085 ;; Defined at:
 14086 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 14087 ;; Parameters:    Size  Location     Type
 14088 ;;  multiplier      2   28[COMRAM] unsigned int 
 14089 ;;  multiplicand    2   30[COMRAM] unsigned int 
 14090 ;; Auto vars:     Size  Location     Type
 14091 ;;  product         2   32[COMRAM] unsigned int 
 14092 ;; Return value:  Size  Location     Type
 14093 ;;                  2   28[COMRAM] unsigned int 
 14094 ;; Registers used:
 14095 ;;		wreg, status,2, status,0, prodl, prodh
 14096 ;; Tracked objects:
 14097 ;;		On entry : 0/0
 14098 ;;		On exit  : 0/0
 14099 ;;		Unchanged: 0/0
 14100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14101 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14102 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14104 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14105 ;;Total ram usage:        6 bytes
 14106 ;; Hardware stack levels used:    1
 14107 ;; Hardware stack levels required when called:    2
 14108 ;; This function calls:
 14109 ;;		Nothing
 14110 ;; This function is called by:
 14111 ;;		_delay_ms
 14112 ;;		_drawChar
 14113 ;;		_main
 14114 ;;		_update_LCD_misc
 14115 ;;		_fround
 14116 ;;		_scale
 14117 ;;		_printf
 14118 ;; This function uses a non-reentrant model
 14119 ;;
 14120                           
 14121                           	psect	text64
 14122  003A80                     __ptext64:
 14123                           	opt stack 0
 14124  003A80                     ___wmul:
 14125                           	opt stack 26
 14126                           
 14127                           ;incstack = 0
 14128  003A80  501D               	movf	___wmul@multiplier,w,c
 14129  003A82  021F               	mulwf	___wmul@multiplicand,c
 14130  003A84  CFF3 F021          	movff	prodl,___wmul@product
 14131  003A88  CFF4 F022          	movff	prodh,___wmul@product+1
 14132  003A8C  501D               	movf	___wmul@multiplier,w,c
 14133  003A8E  0220               	mulwf	___wmul@multiplicand+1,c
 14134  003A90  50F3               	movf	prodl,w,c
 14135  003A92  2622               	addwf	___wmul@product+1,f,c
 14136  003A94  501E               	movf	___wmul@multiplier+1,w,c
 14137  003A96  021F               	mulwf	___wmul@multiplicand,c
 14138  003A98  50F3               	movf	prodl,w,c
 14139  003A9A  2622               	addwf	___wmul@product+1,f,c
 14140  003A9C  C021  F01D         	movff	___wmul@product,?___wmul
 14141  003AA0  C022  F01E         	movff	___wmul@product+1,?___wmul+1
 14142  003AA4  D000               	goto	l683
 14143  003AA6                     l683:
 14144  003AA6  0012               	return		;funcret
 14145  003AA8                     __end_of___wmul:
 14146                           	opt stack 0
 14147                           tblptru	equ	0xFF8
 14148                           tblptrh	equ	0xFF7
 14149                           tblptrl	equ	0xFF6
 14150                           tablat	equ	0xFF5
 14151                           prodh	equ	0xFF4
 14152                           prodl	equ	0xFF3
 14153                           intcon	equ	0xFF2
 14154                           intcon2	equ	0xFF1
 14155                           intcon3	equ	0xFF0
 14156                           postinc0	equ	0xFEE
 14157                           wreg	equ	0xFE8
 14158                           postdec1	equ	0xFE5
 14159                           fsr1l	equ	0xFE1
 14160                           indf2	equ	0xFDF
 14161                           postinc2	equ	0xFDE
 14162                           postdec2	equ	0xFDD
 14163                           fsr2h	equ	0xFDA
 14164                           fsr2l	equ	0xFD9
 14165                           status	equ	0xFD8
 14166                           
 14167 ;; *************** function ___awmod *****************
 14168 ;; Defined at:
 14169 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
 14170 ;; Parameters:    Size  Location     Type
 14171 ;;  dividend        2   14[COMRAM] int 
 14172 ;;  divisor         2   16[COMRAM] int 
 14173 ;; Auto vars:     Size  Location     Type
 14174 ;;  sign            1   19[COMRAM] unsigned char 
 14175 ;;  counter         1   18[COMRAM] unsigned char 
 14176 ;; Return value:  Size  Location     Type
 14177 ;;                  2   14[COMRAM] int 
 14178 ;; Registers used:
 14179 ;;		wreg, status,2, status,0
 14180 ;; Tracked objects:
 14181 ;;		On entry : 0/0
 14182 ;;		On exit  : 0/0
 14183 ;;		Unchanged: 0/0
 14184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14185 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14186 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14188 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14189 ;;Total ram usage:        6 bytes
 14190 ;; Hardware stack levels used:    1
 14191 ;; Hardware stack levels required when called:    2
 14192 ;; This function calls:
 14193 ;;		Nothing
 14194 ;; This function is called by:
 14195 ;;		_update_LCD_count
 14196 ;;		_update_LCD_PED_Count
 14197 ;;		_fround
 14198 ;;		_scale
 14199 ;; This function uses a non-reentrant model
 14200 ;;
 14201                           
 14202                           	psect	text65
 14203  003306                     __ptext65:
 14204                           	opt stack 0
 14205  003306                     ___awmod:
 14206                           	opt stack 26
 14207                           
 14208                           ;incstack = 0
 14209  003306  0E00               	movlw	0
 14210  003308  6E14               	movwf	___awmod@sign,c
 14211  00330A  AE10               	btfss	___awmod@dividend+1,7,c
 14212  00330C  D007               	goto	l5866
 14213  00330E  6C0F               	negf	___awmod@dividend,c
 14214  003310  1E10               	comf	___awmod@dividend+1,f,c
 14215  003312  B0D8               	btfsc	status,0,c
 14216  003314  2A10               	incf	___awmod@dividend+1,f,c
 14217  003316  0E01               	movlw	1
 14218  003318  6E14               	movwf	___awmod@sign,c
 14219  00331A  D000               	goto	l5866
 14220  00331C                     l5866:
 14221  00331C  AE12               	btfss	___awmod@divisor+1,7,c
 14222  00331E  D005               	goto	l5870
 14223  003320  6C11               	negf	___awmod@divisor,c
 14224  003322  1E12               	comf	___awmod@divisor+1,f,c
 14225  003324  B0D8               	btfsc	status,0,c
 14226  003326  2A12               	incf	___awmod@divisor+1,f,c
 14227  003328  D000               	goto	l5870
 14228  00332A                     l5870:
 14229  00332A  5011               	movf	___awmod@divisor,w,c
 14230  00332C  1012               	iorwf	___awmod@divisor+1,w,c
 14231  00332E  B4D8               	btfsc	status,2,c
 14232  003330  D01D               	goto	l5886
 14233  003332  0E01               	movlw	1
 14234  003334  6E13               	movwf	___awmod@counter,c
 14235  003336  D005               	goto	l5876
 14236  003338                     l5874:
 14237  003338  90D8               	bcf	status,0,c
 14238  00333A  3611               	rlcf	___awmod@divisor,f,c
 14239  00333C  3612               	rlcf	___awmod@divisor+1,f,c
 14240  00333E  2A13               	incf	___awmod@counter,f,c
 14241  003340  D000               	goto	l5876
 14242  003342                     l5876:
 14243  003342  BE12               	btfsc	___awmod@divisor+1,7,c
 14244  003344  D002               	goto	l5878
 14245  003346  D7F8               	goto	l5874
 14246  003348  D000               	goto	l5878
 14247  00334A                     l5878:
 14248  00334A  5011               	movf	___awmod@divisor,w,c
 14249  00334C  5C0F               	subwf	___awmod@dividend,w,c
 14250  00334E  5012               	movf	___awmod@divisor+1,w,c
 14251  003350  5810               	subwfb	___awmod@dividend+1,w,c
 14252  003352  A0D8               	btfss	status,0,c
 14253  003354  D005               	goto	l5882
 14254  003356  5011               	movf	___awmod@divisor,w,c
 14255  003358  5E0F               	subwf	___awmod@dividend,f,c
 14256  00335A  5012               	movf	___awmod@divisor+1,w,c
 14257  00335C  5A10               	subwfb	___awmod@dividend+1,f,c
 14258  00335E  D000               	goto	l5882
 14259  003360                     l5882:
 14260  003360  90D8               	bcf	status,0,c
 14261  003362  3212               	rrcf	___awmod@divisor+1,f,c
 14262  003364  3211               	rrcf	___awmod@divisor,f,c
 14263  003366  2E13               	decfsz	___awmod@counter,f,c
 14264  003368  D7F0               	goto	l5878
 14265  00336A  D000               	goto	l5886
 14266  00336C                     l5886:
 14267  00336C  5014               	movf	___awmod@sign,w,c
 14268  00336E  B4D8               	btfsc	status,2,c
 14269  003370  D005               	goto	l5890
 14270  003372  6C0F               	negf	___awmod@dividend,c
 14271  003374  1E10               	comf	___awmod@dividend+1,f,c
 14272  003376  B0D8               	btfsc	status,0,c
 14273  003378  2A10               	incf	___awmod@dividend+1,f,c
 14274  00337A  D000               	goto	l5890
 14275  00337C                     l5890:
 14276  00337C  C00F  F00F         	movff	___awmod@dividend,?___awmod
 14277  003380  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
 14278  003384  D000               	goto	l889
 14279  003386                     l889:
 14280  003386  0012               	return		;funcret
 14281  003388                     __end_of___awmod:
 14282                           	opt stack 0
 14283                           tblptru	equ	0xFF8
 14284                           tblptrh	equ	0xFF7
 14285                           tblptrl	equ	0xFF6
 14286                           tablat	equ	0xFF5
 14287                           prodh	equ	0xFF4
 14288                           prodl	equ	0xFF3
 14289                           intcon	equ	0xFF2
 14290                           intcon2	equ	0xFF1
 14291                           intcon3	equ	0xFF0
 14292                           postinc0	equ	0xFEE
 14293                           wreg	equ	0xFE8
 14294                           postdec1	equ	0xFE5
 14295                           fsr1l	equ	0xFE1
 14296                           indf2	equ	0xFDF
 14297                           postinc2	equ	0xFDE
 14298                           postdec2	equ	0xFDD
 14299                           fsr2h	equ	0xFDA
 14300                           fsr2l	equ	0xFD9
 14301                           status	equ	0xFD8
 14302                           
 14303 ;; *************** function ___awdiv *****************
 14304 ;; Defined at:
 14305 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
 14306 ;; Parameters:    Size  Location     Type
 14307 ;;  dividend        2   20[COMRAM] int 
 14308 ;;  divisor         2   22[COMRAM] int 
 14309 ;; Auto vars:     Size  Location     Type
 14310 ;;  quotient        2   26[COMRAM] int 
 14311 ;;  sign            1   25[COMRAM] unsigned char 
 14312 ;;  counter         1   24[COMRAM] unsigned char 
 14313 ;; Return value:  Size  Location     Type
 14314 ;;                  2   20[COMRAM] int 
 14315 ;; Registers used:
 14316 ;;		wreg, status,2, status,0
 14317 ;; Tracked objects:
 14318 ;;		On entry : 0/0
 14319 ;;		On exit  : 0/0
 14320 ;;		Unchanged: 0/0
 14321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14322 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14323 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14325 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14326 ;;Total ram usage:        8 bytes
 14327 ;; Hardware stack levels used:    1
 14328 ;; Hardware stack levels required when called:    2
 14329 ;; This function calls:
 14330 ;;		Nothing
 14331 ;; This function is called by:
 14332 ;;		_update_LCD_count
 14333 ;;		_update_LCD_PED_Count
 14334 ;;		_fround
 14335 ;;		_scale
 14336 ;;		_printf
 14337 ;; This function uses a non-reentrant model
 14338 ;;
 14339                           
 14340                           	psect	text66
 14341  002FCC                     __ptext66:
 14342                           	opt stack 0
 14343  002FCC                     ___awdiv:
 14344                           	opt stack 26
 14345                           
 14346                           ;incstack = 0
 14347  002FCC  0E00               	movlw	0
 14348  002FCE  6E1A               	movwf	___awdiv@sign,c
 14349  002FD0  AE18               	btfss	___awdiv@divisor+1,7,c
 14350  002FD2  D007               	goto	l5822
 14351  002FD4  6C17               	negf	___awdiv@divisor,c
 14352  002FD6  1E18               	comf	___awdiv@divisor+1,f,c
 14353  002FD8  B0D8               	btfsc	status,0,c
 14354  002FDA  2A18               	incf	___awdiv@divisor+1,f,c
 14355  002FDC  0E01               	movlw	1
 14356  002FDE  6E1A               	movwf	___awdiv@sign,c
 14357  002FE0  D000               	goto	l5822
 14358  002FE2                     l5822:
 14359  002FE2  AE16               	btfss	___awdiv@dividend+1,7,c
 14360  002FE4  D007               	goto	l5828
 14361  002FE6  6C15               	negf	___awdiv@dividend,c
 14362  002FE8  1E16               	comf	___awdiv@dividend+1,f,c
 14363  002FEA  B0D8               	btfsc	status,0,c
 14364  002FEC  2A16               	incf	___awdiv@dividend+1,f,c
 14365  002FEE  0E01               	movlw	1
 14366  002FF0  1A1A               	xorwf	___awdiv@sign,f,c
 14367  002FF2  D000               	goto	l5828
 14368  002FF4                     l5828:
 14369  002FF4  0E00               	movlw	0
 14370  002FF6  6E1C               	movwf	___awdiv@quotient+1,c
 14371  002FF8  0E00               	movlw	0
 14372  002FFA  6E1B               	movwf	___awdiv@quotient,c
 14373  002FFC  5017               	movf	___awdiv@divisor,w,c
 14374  002FFE  1018               	iorwf	___awdiv@divisor+1,w,c
 14375  003000  B4D8               	btfsc	status,2,c
 14376  003002  D021               	goto	l5850
 14377  003004  0E01               	movlw	1
 14378  003006  6E19               	movwf	___awdiv@counter,c
 14379  003008  D005               	goto	l5836
 14380  00300A                     l5834:
 14381  00300A  90D8               	bcf	status,0,c
 14382  00300C  3617               	rlcf	___awdiv@divisor,f,c
 14383  00300E  3618               	rlcf	___awdiv@divisor+1,f,c
 14384  003010  2A19               	incf	___awdiv@counter,f,c
 14385  003012  D000               	goto	l5836
 14386  003014                     l5836:
 14387  003014  BE18               	btfsc	___awdiv@divisor+1,7,c
 14388  003016  D002               	goto	l5838
 14389  003018  D7F8               	goto	l5834
 14390  00301A  D000               	goto	l5838
 14391  00301C                     l5838:
 14392  00301C  90D8               	bcf	status,0,c
 14393  00301E  361B               	rlcf	___awdiv@quotient,f,c
 14394  003020  361C               	rlcf	___awdiv@quotient+1,f,c
 14395  003022  5017               	movf	___awdiv@divisor,w,c
 14396  003024  5C15               	subwf	___awdiv@dividend,w,c
 14397  003026  5018               	movf	___awdiv@divisor+1,w,c
 14398  003028  5816               	subwfb	___awdiv@dividend+1,w,c
 14399  00302A  A0D8               	btfss	status,0,c
 14400  00302C  D006               	goto	l5846
 14401  00302E  5017               	movf	___awdiv@divisor,w,c
 14402  003030  5E15               	subwf	___awdiv@dividend,f,c
 14403  003032  5018               	movf	___awdiv@divisor+1,w,c
 14404  003034  5A16               	subwfb	___awdiv@dividend+1,f,c
 14405  003036  801B               	bsf	___awdiv@quotient,0,c
 14406  003038  D000               	goto	l5846
 14407  00303A                     l5846:
 14408  00303A  90D8               	bcf	status,0,c
 14409  00303C  3218               	rrcf	___awdiv@divisor+1,f,c
 14410  00303E  3217               	rrcf	___awdiv@divisor,f,c
 14411  003040  2E19               	decfsz	___awdiv@counter,f,c
 14412  003042  D7EC               	goto	l5838
 14413  003044  D000               	goto	l5850
 14414  003046                     l5850:
 14415  003046  501A               	movf	___awdiv@sign,w,c
 14416  003048  B4D8               	btfsc	status,2,c
 14417  00304A  D005               	goto	l5854
 14418  00304C  6C1B               	negf	___awdiv@quotient,c
 14419  00304E  1E1C               	comf	___awdiv@quotient+1,f,c
 14420  003050  B0D8               	btfsc	status,0,c
 14421  003052  2A1C               	incf	___awdiv@quotient+1,f,c
 14422  003054  D000               	goto	l5854
 14423  003056                     l5854:
 14424  003056  C01B  F015         	movff	___awdiv@quotient,?___awdiv
 14425  00305A  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
 14426  00305E  D000               	goto	l876
 14427  003060                     l876:
 14428  003060  0012               	return		;funcret
 14429  003062                     __end_of___awdiv:
 14430                           	opt stack 0
 14431                           tblptru	equ	0xFF8
 14432                           tblptrh	equ	0xFF7
 14433                           tblptrl	equ	0xFF6
 14434                           tablat	equ	0xFF5
 14435                           prodh	equ	0xFF4
 14436                           prodl	equ	0xFF3
 14437                           intcon	equ	0xFF2
 14438                           intcon2	equ	0xFF1
 14439                           intcon3	equ	0xFF0
 14440                           postinc0	equ	0xFEE
 14441                           wreg	equ	0xFE8
 14442                           postdec1	equ	0xFE5
 14443                           fsr1l	equ	0xFE1
 14444                           indf2	equ	0xFDF
 14445                           postinc2	equ	0xFDE
 14446                           postdec2	equ	0xFDD
 14447                           fsr2h	equ	0xFDA
 14448                           fsr2l	equ	0xFD9
 14449                           status	equ	0xFD8
 14450                           
 14451 ;; *************** function _Wait_One_Second_With_Beep *****************
 14452 ;; Defined at:
 14453 ;;		line 632 in file "Lab9pC.c"
 14454 ;; Parameters:    Size  Location     Type
 14455 ;;		None
 14456 ;; Auto vars:     Size  Location     Type
 14457 ;;		None
 14458 ;; Return value:  Size  Location     Type
 14459 ;;		None               void
 14460 ;; Registers used:
 14461 ;;		wreg, status,2, cstack
 14462 ;; Tracked objects:
 14463 ;;		On entry : 0/0
 14464 ;;		On exit  : 0/0
 14465 ;;		Unchanged: 0/0
 14466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14470 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14471 ;;Total ram usage:        0 bytes
 14472 ;; Hardware stack levels used:    1
 14473 ;; Hardware stack levels required when called:    3
 14474 ;; This function calls:
 14475 ;;		_Activate_Buzzer
 14476 ;;		_Deactivate_Buzzer
 14477 ;;		_Wait_Half_Second
 14478 ;; This function is called by:
 14479 ;;		_PED_Control
 14480 ;; This function uses a non-reentrant model
 14481 ;;
 14482                           
 14483                           	psect	text67
 14484  003B94                     __ptext67:
 14485                           	opt stack 0
 14486  003B94                     _Wait_One_Second_With_Beep:
 14487                           	opt stack 25
 14488                           
 14489                           ;Lab9pC.c: 634: PORTDbits.RD7 = 1;
 14490                           
 14491                           ;incstack = 0
 14492  003B94  8E83               	bsf	3971,7,c	;volatile
 14493                           
 14494                           ;Lab9pC.c: 635: Activate_Buzzer();
 14495  003B96  ECF2  F01D         	call	_Activate_Buzzer	;wreg free
 14496                           
 14497                           ;Lab9pC.c: 636: Wait_Half_Second();
 14498  003B9A  EC98  F01D         	call	_Wait_Half_Second	;wreg free
 14499                           
 14500                           ;Lab9pC.c: 637: PORTDbits.RD7 = 0;
 14501  003B9E  9E83               	bcf	3971,7,c	;volatile
 14502                           
 14503                           ;Lab9pC.c: 638: Deactivate_Buzzer ();
 14504  003BA0  EC19  F01E         	call	_Deactivate_Buzzer	;wreg free
 14505                           
 14506                           ;Lab9pC.c: 639: Wait_Half_Second();
 14507  003BA4  EC98  F01D         	call	_Wait_Half_Second	;wreg free
 14508  003BA8  0012               	return		;funcret
 14509  003BAA                     __end_of_Wait_One_Second_With_Beep:
 14510                           	opt stack 0
 14511                           tblptru	equ	0xFF8
 14512                           tblptrh	equ	0xFF7
 14513                           tblptrl	equ	0xFF6
 14514                           tablat	equ	0xFF5
 14515                           prodh	equ	0xFF4
 14516                           prodl	equ	0xFF3
 14517                           intcon	equ	0xFF2
 14518                           intcon2	equ	0xFF1
 14519                           intcon3	equ	0xFF0
 14520                           postinc0	equ	0xFEE
 14521                           wreg	equ	0xFE8
 14522                           postdec1	equ	0xFE5
 14523                           fsr1l	equ	0xFE1
 14524                           indf2	equ	0xFDF
 14525                           postinc2	equ	0xFDE
 14526                           postdec2	equ	0xFDD
 14527                           fsr2h	equ	0xFDA
 14528                           fsr2l	equ	0xFD9
 14529                           status	equ	0xFD8
 14530                           
 14531 ;; *************** function _Wait_Half_Second *****************
 14532 ;; Defined at:
 14533 ;;		line 642 in file "Lab9pC.c"
 14534 ;; Parameters:    Size  Location     Type
 14535 ;;		None
 14536 ;; Auto vars:     Size  Location     Type
 14537 ;;		None
 14538 ;; Return value:  Size  Location     Type
 14539 ;;		None               void
 14540 ;; Registers used:
 14541 ;;		wreg, status,2
 14542 ;; Tracked objects:
 14543 ;;		On entry : 0/0
 14544 ;;		On exit  : 0/0
 14545 ;;		Unchanged: 0/0
 14546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14551 ;;Total ram usage:        0 bytes
 14552 ;; Hardware stack levels used:    1
 14553 ;; Hardware stack levels required when called:    2
 14554 ;; This function calls:
 14555 ;;		Nothing
 14556 ;; This function is called by:
 14557 ;;		_Wait_One_Second
 14558 ;;		_Wait_One_Second_With_Beep
 14559 ;;		_Old_Wait_One_Second
 14560 ;; This function uses a non-reentrant model
 14561 ;;
 14562                           
 14563                           	psect	text68
 14564  003B30                     __ptext68:
 14565                           	opt stack 0
 14566  003B30                     _Wait_Half_Second:
 14567                           	opt stack 25
 14568                           
 14569                           ;Lab9pC.c: 644: T0CON = 0x02;
 14570                           
 14571                           ;incstack = 0
 14572  003B30  0E02               	movlw	2
 14573  003B32  6ED5               	movwf	4053,c	;volatile
 14574                           
 14575                           ;Lab9pC.c: 645: TMR0H = 0x0B;
 14576  003B34  0E0B               	movlw	11
 14577  003B36  6ED7               	movwf	4055,c	;volatile
 14578                           
 14579                           ;Lab9pC.c: 646: TMR0L = 0xDB;
 14580  003B38  0EDB               	movlw	219
 14581  003B3A  6ED6               	movwf	4054,c	;volatile
 14582                           
 14583                           ;Lab9pC.c: 647: INTCONbits.TMR0IF = 0;
 14584  003B3C  94F2               	bcf	intcon,2,c	;volatile
 14585                           
 14586                           ;Lab9pC.c: 648: T0CONbits.TMR0ON = 1;
 14587  003B3E  8ED5               	bsf	4053,7,c	;volatile
 14588                           
 14589                           ;Lab9pC.c: 649: while (INTCONbits.TMR0IF == 0);
 14590  003B40  D000               	goto	l499
 14591  003B42                     l499:
 14592  003B42  A4F2               	btfss	intcon,2,c	;volatile
 14593  003B44  D7FE               	goto	l499
 14594                           
 14595                           ;Lab9pC.c: 650: T0CONbits.TMR0ON = 0;
 14596  003B46  9ED5               	bcf	4053,7,c	;volatile
 14597  003B48  0012               	return		;funcret
 14598  003B4A                     __end_of_Wait_Half_Second:
 14599                           	opt stack 0
 14600                           tblptru	equ	0xFF8
 14601                           tblptrh	equ	0xFF7
 14602                           tblptrl	equ	0xFF6
 14603                           tablat	equ	0xFF5
 14604                           prodh	equ	0xFF4
 14605                           prodl	equ	0xFF3
 14606                           intcon	equ	0xFF2
 14607                           intcon2	equ	0xFF1
 14608                           intcon3	equ	0xFF0
 14609                           postinc0	equ	0xFEE
 14610                           wreg	equ	0xFE8
 14611                           postdec1	equ	0xFE5
 14612                           fsr1l	equ	0xFE1
 14613                           indf2	equ	0xFDF
 14614                           postinc2	equ	0xFDE
 14615                           postdec2	equ	0xFDD
 14616                           fsr2h	equ	0xFDA
 14617                           fsr2l	equ	0xFD9
 14618                           status	equ	0xFD8
 14619                           
 14620 ;; *************** function _Deactivate_Buzzer *****************
 14621 ;; Defined at:
 14622 ;;		line 467 in file "Lab9pC.c"
 14623 ;; Parameters:    Size  Location     Type
 14624 ;;		None
 14625 ;; Auto vars:     Size  Location     Type
 14626 ;;		None
 14627 ;; Return value:  Size  Location     Type
 14628 ;;		None               void
 14629 ;; Registers used:
 14630 ;;		wreg, status,2
 14631 ;; Tracked objects:
 14632 ;;		On entry : 0/0
 14633 ;;		On exit  : 0/0
 14634 ;;		Unchanged: 0/0
 14635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14639 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14640 ;;Total ram usage:        0 bytes
 14641 ;; Hardware stack levels used:    1
 14642 ;; Hardware stack levels required when called:    2
 14643 ;; This function calls:
 14644 ;;		Nothing
 14645 ;; This function is called by:
 14646 ;;		_Wait_One_Second_With_Beep
 14647 ;; This function uses a non-reentrant model
 14648 ;;
 14649                           
 14650                           	psect	text69
 14651  003C32                     __ptext69:
 14652                           	opt stack 0
 14653  003C32                     _Deactivate_Buzzer:
 14654                           	opt stack 25
 14655                           
 14656                           ;Lab9pC.c: 469: CCP2CON = 0x0;
 14657                           
 14658                           ;incstack = 0
 14659  003C32  0E00               	movlw	0
 14660  003C34  6EBA               	movwf	4026,c	;volatile
 14661                           
 14662                           ;Lab9pC.c: 470: PORTBbits.RB3 = 0;
 14663  003C36  9681               	bcf	3969,3,c	;volatile
 14664  003C38  0012               	return		;funcret
 14665  003C3A                     __end_of_Deactivate_Buzzer:
 14666                           	opt stack 0
 14667                           tblptru	equ	0xFF8
 14668                           tblptrh	equ	0xFF7
 14669                           tblptrl	equ	0xFF6
 14670                           tablat	equ	0xFF5
 14671                           prodh	equ	0xFF4
 14672                           prodl	equ	0xFF3
 14673                           intcon	equ	0xFF2
 14674                           intcon2	equ	0xFF1
 14675                           intcon3	equ	0xFF0
 14676                           postinc0	equ	0xFEE
 14677                           wreg	equ	0xFE8
 14678                           postdec1	equ	0xFE5
 14679                           fsr1l	equ	0xFE1
 14680                           indf2	equ	0xFDF
 14681                           postinc2	equ	0xFDE
 14682                           postdec2	equ	0xFDD
 14683                           fsr2h	equ	0xFDA
 14684                           fsr2l	equ	0xFD9
 14685                           status	equ	0xFD8
 14686                           
 14687 ;; *************** function _Activate_Buzzer *****************
 14688 ;; Defined at:
 14689 ;;		line 459 in file "Lab9pC.c"
 14690 ;; Parameters:    Size  Location     Type
 14691 ;;		None
 14692 ;; Auto vars:     Size  Location     Type
 14693 ;;		None
 14694 ;; Return value:  Size  Location     Type
 14695 ;;		None               void
 14696 ;; Registers used:
 14697 ;;		wreg, status,2
 14698 ;; Tracked objects:
 14699 ;;		On entry : 0/0
 14700 ;;		On exit  : 0/0
 14701 ;;		Unchanged: 0/0
 14702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14706 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14707 ;;Total ram usage:        0 bytes
 14708 ;; Hardware stack levels used:    1
 14709 ;; Hardware stack levels required when called:    2
 14710 ;; This function calls:
 14711 ;;		Nothing
 14712 ;; This function is called by:
 14713 ;;		_Wait_One_Second_With_Beep
 14714 ;; This function uses a non-reentrant model
 14715 ;;
 14716                           
 14717                           	psect	text70
 14718  003BE4                     __ptext70:
 14719                           	opt stack 0
 14720  003BE4                     _Activate_Buzzer:
 14721                           	opt stack 25
 14722                           
 14723                           ;Lab9pC.c: 461: PR2 = 0b11111001 ;
 14724                           
 14725                           ;incstack = 0
 14726  003BE4  0EF9               	movlw	249
 14727  003BE6  6ECB               	movwf	4043,c	;volatile
 14728                           
 14729                           ;Lab9pC.c: 462: T2CON = 0b00000101 ;
 14730  003BE8  0E05               	movlw	5
 14731  003BEA  6ECA               	movwf	4042,c	;volatile
 14732                           
 14733                           ;Lab9pC.c: 463: CCPR2L = 0b01001010 ;
 14734  003BEC  0E4A               	movlw	74
 14735  003BEE  6EBB               	movwf	4027,c	;volatile
 14736                           
 14737                           ;Lab9pC.c: 464: CCP2CON = 0b00111100 ;
 14738  003BF0  0E3C               	movlw	60
 14739  003BF2  6EBA               	movwf	4026,c	;volatile
 14740  003BF4  0012               	return		;funcret
 14741  003BF6                     __end_of_Activate_Buzzer:
 14742                           	opt stack 0
 14743                           tblptru	equ	0xFF8
 14744                           tblptrh	equ	0xFF7
 14745                           tblptrl	equ	0xFF6
 14746                           tablat	equ	0xFF5
 14747                           prodh	equ	0xFF4
 14748                           prodl	equ	0xFF3
 14749                           intcon	equ	0xFF2
 14750                           intcon2	equ	0xFF1
 14751                           intcon3	equ	0xFF0
 14752                           postinc0	equ	0xFEE
 14753                           wreg	equ	0xFE8
 14754                           postdec1	equ	0xFE5
 14755                           fsr1l	equ	0xFE1
 14756                           indf2	equ	0xFDF
 14757                           postinc2	equ	0xFDE
 14758                           postdec2	equ	0xFDD
 14759                           fsr2h	equ	0xFDA
 14760                           fsr2l	equ	0xFD9
 14761                           status	equ	0xFD8
 14762                           
 14763 ;; *************** function _chkisr *****************
 14764 ;; Defined at:
 14765 ;;		line 298 in file "Lab9pC.c"
 14766 ;; Parameters:    Size  Location     Type
 14767 ;;		None
 14768 ;; Auto vars:     Size  Location     Type
 14769 ;;		None
 14770 ;; Return value:  Size  Location     Type
 14771 ;;		None               void
 14772 ;; Registers used:
 14773 ;;		wreg, status,2, status,0, cstack
 14774 ;; Tracked objects:
 14775 ;;		On entry : 0/0
 14776 ;;		On exit  : 0/0
 14777 ;;		Unchanged: 0/0
 14778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14781 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14782 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14783 ;;Total ram usage:       14 bytes
 14784 ;; Hardware stack levels used:    1
 14785 ;; Hardware stack levels required when called:    1
 14786 ;; This function calls:
 14787 ;;		_INT0_ISR
 14788 ;;		_INT1_ISR
 14789 ;;		_INT2_ISR
 14790 ;; This function is called by:
 14791 ;;		Interrupt level 2
 14792 ;; This function uses a non-reentrant model
 14793 ;;
 14794                           
 14795                           	psect	intcode
 14796  000008                     __pintcode:
 14797                           	opt stack 0
 14798  000008                     _chkisr:
 14799                           	opt stack 18
 14800                           
 14801                           ;incstack = 0
 14802  000008  CFFA F001          	movff	pclath,??_chkisr
 14803  00000C  CFFB F002          	movff	pclatu,??_chkisr+1
 14804  000010  CFE9 F003          	movff	fsr0l,??_chkisr+2
 14805  000014  EDFF  F018         	call	int_func,f	;refresh shadow registers
 14806                           pclatu	equ	0xFFB
 14807                           pclath	equ	0xFFA
 14808                           tblptru	equ	0xFF8
 14809                           tblptrh	equ	0xFF7
 14810                           tblptrl	equ	0xFF6
 14811                           tablat	equ	0xFF5
 14812                           prodh	equ	0xFF4
 14813                           prodl	equ	0xFF3
 14814                           intcon	equ	0xFF2
 14815                           intcon2	equ	0xFF1
 14816                           intcon3	equ	0xFF0
 14817                           postinc0	equ	0xFEE
 14818                           fsr0l	equ	0xFE9
 14819                           wreg	equ	0xFE8
 14820                           postdec1	equ	0xFE5
 14821                           fsr1l	equ	0xFE1
 14822                           indf2	equ	0xFDF
 14823                           postinc2	equ	0xFDE
 14824                           postdec2	equ	0xFDD
 14825                           fsr2h	equ	0xFDA
 14826                           fsr2l	equ	0xFD9
 14827                           status	equ	0xFD8
 14828                           
 14829                           	psect	intcode_body
 14830  0031FE                     __pintcode_body:
 14831                           	opt stack 18
 14832  0031FE                     int_func:
 14833                           	opt stack 18
 14834  0031FE  0006               	pop		; remove dummy address from shadow register refresh
 14835  003200  CFEA F004          	movff	fsr0h,??_chkisr+3
 14836  003204  CFE1 F005          	movff	fsr1l,??_chkisr+4
 14837  003208  CFE2 F006          	movff	fsr1h,??_chkisr+5
 14838  00320C  CFD9 F007          	movff	fsr2l,??_chkisr+6
 14839  003210  CFDA F008          	movff	fsr2h,??_chkisr+7
 14840  003214  CFF3 F009          	movff	prodl,??_chkisr+8
 14841  003218  CFF4 F00A          	movff	prodh,??_chkisr+9
 14842  00321C  CFF6 F00B          	movff	tblptrl,??_chkisr+10
 14843  003220  CFF7 F00C          	movff	tblptrh,??_chkisr+11
 14844  003224  CFF8 F00D          	movff	tblptru,??_chkisr+12
 14845  003228  CFF5 F00E          	movff	tablat,??_chkisr+13
 14846                           
 14847                           ;Lab9pC.c: 300: if (INTCONbits.INT0IF == 1) INT0_ISR();
 14848  00322C  A2F2               	btfss	intcon,1,c	;volatile
 14849  00322E  D003               	goto	i2l5484
 14850  003230  ECB2  F01D         	call	_INT0_ISR	;wreg free
 14851  003234  D000               	goto	i2l5484
 14852  003236                     i2l5484:
 14853                           
 14854                           ;Lab9pC.c: 301: if (INTCON3bits.INT1IF == 1) INT1_ISR();
 14855  003236  A0F0               	btfss	intcon3,0,c	;volatile
 14856  003238  D003               	goto	i2l5488
 14857  00323A  ECA5  F01D         	call	_INT1_ISR	;wreg free
 14858  00323E  D000               	goto	i2l5488
 14859  003240                     i2l5488:
 14860                           
 14861                           ;Lab9pC.c: 302: if (INTCON3bits.INT2IF == 1) INT2_ISR();
 14862  003240  A2F0               	btfss	intcon3,1,c	;volatile
 14863  003242  D003               	goto	i2l392
 14864  003244  EC1D  F01E         	call	_INT2_ISR	;wreg free
 14865  003248  D000               	goto	i2l392
 14866  00324A                     i2l392:
 14867  00324A  C00E  FFF5         	movff	??_chkisr+13,tablat
 14868  00324E  C00D  FFF8         	movff	??_chkisr+12,tblptru
 14869  003252  C00C  FFF7         	movff	??_chkisr+11,tblptrh
 14870  003256  C00B  FFF6         	movff	??_chkisr+10,tblptrl
 14871  00325A  C00A  FFF4         	movff	??_chkisr+9,prodh
 14872  00325E  C009  FFF3         	movff	??_chkisr+8,prodl
 14873  003262  C008  FFDA         	movff	??_chkisr+7,fsr2h
 14874  003266  C007  FFD9         	movff	??_chkisr+6,fsr2l
 14875  00326A  C006  FFE2         	movff	??_chkisr+5,fsr1h
 14876  00326E  C005  FFE1         	movff	??_chkisr+4,fsr1l
 14877  003272  C004  FFEA         	movff	??_chkisr+3,fsr0h
 14878  003276  C003  FFE9         	movff	??_chkisr+2,fsr0l
 14879  00327A  C002  FFFB         	movff	??_chkisr+1,pclatu
 14880  00327E  C001  FFFA         	movff	??_chkisr,pclath
 14881  003282  0011               	retfie		f
 14882  003284                     __end_of_chkisr:
 14883                           	opt stack 0
 14884                           pclatu	equ	0xFFB
 14885                           pclath	equ	0xFFA
 14886                           tblptru	equ	0xFF8
 14887                           tblptrh	equ	0xFF7
 14888                           tblptrl	equ	0xFF6
 14889                           tablat	equ	0xFF5
 14890                           prodh	equ	0xFF4
 14891                           prodl	equ	0xFF3
 14892                           intcon	equ	0xFF2
 14893                           intcon2	equ	0xFF1
 14894                           intcon3	equ	0xFF0
 14895                           postinc0	equ	0xFEE
 14896                           fsr0h	equ	0xFEA
 14897                           fsr0l	equ	0xFE9
 14898                           wreg	equ	0xFE8
 14899                           postdec1	equ	0xFE5
 14900                           fsr1h	equ	0xFE2
 14901                           fsr1l	equ	0xFE1
 14902                           indf2	equ	0xFDF
 14903                           postinc2	equ	0xFDE
 14904                           postdec2	equ	0xFDD
 14905                           fsr2h	equ	0xFDA
 14906                           fsr2l	equ	0xFD9
 14907                           status	equ	0xFD8
 14908                           
 14909 ;; *************** function _INT2_ISR *****************
 14910 ;; Defined at:
 14911 ;;		line 332 in file "Lab9pC.c"
 14912 ;; Parameters:    Size  Location     Type
 14913 ;;		None
 14914 ;; Auto vars:     Size  Location     Type
 14915 ;;		None
 14916 ;; Return value:  Size  Location     Type
 14917 ;;		None               void
 14918 ;; Registers used:
 14919 ;;		wreg, status,2
 14920 ;; Tracked objects:
 14921 ;;		On entry : 0/0
 14922 ;;		On exit  : 0/0
 14923 ;;		Unchanged: 0/0
 14924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14929 ;;Total ram usage:        0 bytes
 14930 ;; Hardware stack levels used:    1
 14931 ;; This function calls:
 14932 ;;		Nothing
 14933 ;; This function is called by:
 14934 ;;		_chkisr
 14935 ;; This function uses a non-reentrant model
 14936 ;;
 14937                           
 14938                           	psect	text72
 14939  003C3A                     __ptext72:
 14940                           	opt stack 0
 14941  003C3A                     _INT2_ISR:
 14942                           	opt stack 18
 14943                           
 14944                           ;Lab9pC.c: 334: INTCON3bits.INT2IF=0;
 14945                           
 14946                           ;incstack = 0
 14947  003C3A  92F0               	bcf	intcon3,1,c	;volatile
 14948                           
 14949                           ;Lab9pC.c: 335: FLASHING_REQUEST = 1;
 14950  003C3C  0E01               	movlw	1
 14951  003C3E  6E5F               	movwf	_FLASHING_REQUEST,c
 14952  003C40  0012               	return		;funcret
 14953  003C42                     __end_of_INT2_ISR:
 14954                           	opt stack 0
 14955                           pclatu	equ	0xFFB
 14956                           pclath	equ	0xFFA
 14957                           tblptru	equ	0xFF8
 14958                           tblptrh	equ	0xFF7
 14959                           tblptrl	equ	0xFF6
 14960                           tablat	equ	0xFF5
 14961                           prodh	equ	0xFF4
 14962                           prodl	equ	0xFF3
 14963                           intcon	equ	0xFF2
 14964                           intcon2	equ	0xFF1
 14965                           intcon3	equ	0xFF0
 14966                           postinc0	equ	0xFEE
 14967                           fsr0h	equ	0xFEA
 14968                           fsr0l	equ	0xFE9
 14969                           wreg	equ	0xFE8
 14970                           postdec1	equ	0xFE5
 14971                           fsr1h	equ	0xFE2
 14972                           fsr1l	equ	0xFE1
 14973                           indf2	equ	0xFDF
 14974                           postinc2	equ	0xFDE
 14975                           postdec2	equ	0xFDD
 14976                           fsr2h	equ	0xFDA
 14977                           fsr2l	equ	0xFD9
 14978                           status	equ	0xFD8
 14979                           
 14980 ;; *************** function _INT1_ISR *****************
 14981 ;; Defined at:
 14982 ;;		line 318 in file "Lab9pC.c"
 14983 ;; Parameters:    Size  Location     Type
 14984 ;;		None
 14985 ;; Auto vars:     Size  Location     Type
 14986 ;;		None
 14987 ;; Return value:  Size  Location     Type
 14988 ;;		None               void
 14989 ;; Registers used:
 14990 ;;		wreg, status,2, status,0
 14991 ;; Tracked objects:
 14992 ;;		On entry : 0/0
 14993 ;;		On exit  : 0/0
 14994 ;;		Unchanged: 0/0
 14995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15000 ;;Total ram usage:        0 bytes
 15001 ;; Hardware stack levels used:    1
 15002 ;; This function calls:
 15003 ;;		Nothing
 15004 ;; This function is called by:
 15005 ;;		_chkisr
 15006 ;; This function uses a non-reentrant model
 15007 ;;
 15008                           
 15009                           	psect	text73
 15010  003B4A                     __ptext73:
 15011                           	opt stack 0
 15012  003B4A                     _INT1_ISR:
 15013                           	opt stack 18
 15014                           
 15015                           ;Lab9pC.c: 321: INTCON3bits.INT1IF=0;
 15016                           
 15017                           ;incstack = 0
 15018  003B4A  90F0               	bcf	intcon3,0,c	;volatile
 15019                           
 15020                           ;Lab9pC.c: 322: if (MODE==1){
 15021  003B4C  0100               	movlb	0	; () banked
 15022  003B4E  05AF               	decf	_MODE& (0+255),w,b
 15023  003B50  0100               	movlb	0	; () banked
 15024  003B52  11B0               	iorwf	(_MODE+1)& (0+255),w,b
 15025  003B54  A4D8               	btfss	status,2,c
 15026  003B56  D002               	goto	i2l4930
 15027                           
 15028                           ; BSR set to: 0
 15029                           ;Lab9pC.c: 323: EW_PED_SW = 1;
 15030  003B58  0E01               	movlw	1
 15031  003B5A  D001               	goto	L24
 15032  003B5C                     i2l4930:
 15033                           
 15034                           ; BSR set to: 0
 15035                           ;Lab9pC.c: 326: else
 15036                           ;Lab9pC.c: 327: {
 15037                           ;Lab9pC.c: 328: EW_PED_SW = 0;
 15038  003B5C  0E00               	movlw	0
 15039  003B5E                     L24:
 15040  003B5E  6E5D               	movwf	_EW_PED_SW,c
 15041  003B60  D000               	goto	i2l402
 15042  003B62                     i2l402:
 15043                           
 15044                           ; BSR set to: 0
 15045  003B62  0012               	return		;funcret
 15046  003B64                     __end_of_INT1_ISR:
 15047                           	opt stack 0
 15048                           pclatu	equ	0xFFB
 15049                           pclath	equ	0xFFA
 15050                           tblptru	equ	0xFF8
 15051                           tblptrh	equ	0xFF7
 15052                           tblptrl	equ	0xFF6
 15053                           tablat	equ	0xFF5
 15054                           prodh	equ	0xFF4
 15055                           prodl	equ	0xFF3
 15056                           intcon	equ	0xFF2
 15057                           intcon2	equ	0xFF1
 15058                           intcon3	equ	0xFF0
 15059                           postinc0	equ	0xFEE
 15060                           fsr0h	equ	0xFEA
 15061                           fsr0l	equ	0xFE9
 15062                           wreg	equ	0xFE8
 15063                           postdec1	equ	0xFE5
 15064                           fsr1h	equ	0xFE2
 15065                           fsr1l	equ	0xFE1
 15066                           indf2	equ	0xFDF
 15067                           postinc2	equ	0xFDE
 15068                           postdec2	equ	0xFDD
 15069                           fsr2h	equ	0xFDA
 15070                           fsr2l	equ	0xFD9
 15071                           status	equ	0xFD8
 15072                           
 15073 ;; *************** function _INT0_ISR *****************
 15074 ;; Defined at:
 15075 ;;		line 304 in file "Lab9pC.c"
 15076 ;; Parameters:    Size  Location     Type
 15077 ;;		None
 15078 ;; Auto vars:     Size  Location     Type
 15079 ;;		None
 15080 ;; Return value:  Size  Location     Type
 15081 ;;		None               void
 15082 ;; Registers used:
 15083 ;;		wreg, status,2, status,0
 15084 ;; Tracked objects:
 15085 ;;		On entry : 0/0
 15086 ;;		On exit  : 0/0
 15087 ;;		Unchanged: 0/0
 15088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15092 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15093 ;;Total ram usage:        0 bytes
 15094 ;; Hardware stack levels used:    1
 15095 ;; This function calls:
 15096 ;;		Nothing
 15097 ;; This function is called by:
 15098 ;;		_chkisr
 15099 ;; This function uses a non-reentrant model
 15100 ;;
 15101                           
 15102                           	psect	text74
 15103  003B64                     __ptext74:
 15104                           	opt stack 0
 15105  003B64                     _INT0_ISR:
 15106                           	opt stack 18
 15107                           
 15108                           ;Lab9pC.c: 306: INTCONbits.INT0IF=0;
 15109                           
 15110                           ; BSR set to: 0
 15111                           ;incstack = 0
 15112  003B64  92F2               	bcf	intcon,1,c	;volatile
 15113                           
 15114                           ;Lab9pC.c: 307: if (MODE==1)
 15115  003B66  0100               	movlb	0	; () banked
 15116  003B68  05AF               	decf	_MODE& (0+255),w,b
 15117  003B6A  0100               	movlb	0	; () banked
 15118  003B6C  11B0               	iorwf	(_MODE+1)& (0+255),w,b
 15119  003B6E  A4D8               	btfss	status,2,c
 15120  003B70  D002               	goto	i2l4922
 15121                           
 15122                           ; BSR set to: 0
 15123                           ;Lab9pC.c: 308: {
 15124                           ;Lab9pC.c: 309: NS_PED_SW = 1;
 15125  003B72  0E01               	movlw	1
 15126  003B74  D001               	goto	L25
 15127  003B76                     i2l4922:
 15128                           
 15129                           ; BSR set to: 0
 15130                           ;Lab9pC.c: 312: else
 15131                           ;Lab9pC.c: 313: {
 15132                           ;Lab9pC.c: 314: NS_PED_SW = 0;
 15133  003B76  0E00               	movlw	0
 15134  003B78                     L25:
 15135  003B78  6E60               	movwf	_NS_PED_SW,c
 15136  003B7A  D000               	goto	i2l397
 15137  003B7C                     i2l397:
 15138                           
 15139                           ; BSR set to: 0
 15140  003B7C  0012               	return		;funcret
 15141  003B7E                     __end_of_INT0_ISR:
 15142                           	opt stack 0
 15143                           pclatu	equ	0xFFB
 15144                           pclath	equ	0xFFA
 15145                           tblptru	equ	0xFF8
 15146                           tblptrh	equ	0xFF7
 15147                           tblptrl	equ	0xFF6
 15148                           tablat	equ	0xFF5
 15149                           prodh	equ	0xFF4
 15150                           prodl	equ	0xFF3
 15151                           intcon	equ	0xFF2
 15152                           intcon2	equ	0xFF1
 15153                           intcon3	equ	0xFF0
 15154                           postinc0	equ	0xFEE
 15155                           fsr0h	equ	0xFEA
 15156                           fsr0l	equ	0xFE9
 15157                           wreg	equ	0xFE8
 15158                           postdec1	equ	0xFE5
 15159                           fsr1h	equ	0xFE2
 15160                           fsr1l	equ	0xFE1
 15161                           indf2	equ	0xFDF
 15162                           postinc2	equ	0xFDE
 15163                           postdec2	equ	0xFDD
 15164                           fsr2h	equ	0xFDA
 15165                           fsr2l	equ	0xFD9
 15166                           status	equ	0xFD8
 15167                           pclatu	equ	0xFFB
 15168                           pclath	equ	0xFFA
 15169                           tblptru	equ	0xFF8
 15170                           tblptrh	equ	0xFF7
 15171                           tblptrl	equ	0xFF6
 15172                           tablat	equ	0xFF5
 15173                           prodh	equ	0xFF4
 15174                           prodl	equ	0xFF3
 15175                           intcon	equ	0xFF2
 15176                           intcon2	equ	0xFF1
 15177                           intcon3	equ	0xFF0
 15178                           postinc0	equ	0xFEE
 15179                           fsr0h	equ	0xFEA
 15180                           fsr0l	equ	0xFE9
 15181                           wreg	equ	0xFE8
 15182                           postdec1	equ	0xFE5
 15183                           fsr1h	equ	0xFE2
 15184                           fsr1l	equ	0xFE1
 15185                           indf2	equ	0xFDF
 15186                           postinc2	equ	0xFDE
 15187                           postdec2	equ	0xFDD
 15188                           fsr2h	equ	0xFDA
 15189                           fsr2l	equ	0xFD9
 15190                           status	equ	0xFD8
 15191                           
 15192                           	psect	rparam
 15193  0000                     pclatu	equ	0xFFB
 15194                           pclath	equ	0xFFA
 15195                           tblptru	equ	0xFF8
 15196                           tblptrh	equ	0xFF7
 15197                           tblptrl	equ	0xFF6
 15198                           tablat	equ	0xFF5
 15199                           prodh	equ	0xFF4
 15200                           prodl	equ	0xFF3
 15201                           intcon	equ	0xFF2
 15202                           intcon2	equ	0xFF1
 15203                           intcon3	equ	0xFF0
 15204                           postinc0	equ	0xFEE
 15205                           fsr0h	equ	0xFEA
 15206                           fsr0l	equ	0xFE9
 15207                           wreg	equ	0xFE8
 15208                           postdec1	equ	0xFE5
 15209                           fsr1h	equ	0xFE2
 15210                           fsr1l	equ	0xFE1
 15211                           indf2	equ	0xFDF
 15212                           postinc2	equ	0xFDE
 15213                           postdec2	equ	0xFDD
 15214                           fsr2h	equ	0xFDA
 15215                           fsr2l	equ	0xFD9
 15216                           status	equ	0xFD8


Data Sizes:
    Strings     122
    Constant    593
    Data        45
    BSS         56
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     90     104
    BANK0           128     23     110
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(BANK0[2]), SW_NSLT_Txt(BANK0[2]), SW_NSPED_Txt(BANK0[2]), 
		 -> SW_EWLT_Txt(BANK0[2]), SW_EWPED_Txt(BANK0[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), 
		 -> FlashingS_Txt(BANK0[2]), FlashingR_Txt(BANK0[2]), Act_Mode_Txt(BANK0[2]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(BANK0[2]), SW_NSLT_Txt(BANK0[2]), SW_NSPED_Txt(BANK0[2]), 
		 -> SW_EWLT_Txt(BANK0[2]), SW_EWPED_Txt(BANK0[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), 
		 -> FlashingS_Txt(BANK0[2]), FlashingR_Txt(BANK0[2]), Act_Mode_Txt(BANK0[2]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_16(CODE[2]), STR_15(CODE[2]), STR_12(CODE[21]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_9(CODE[7]), STR_8(CODE[12]), STR_7(CODE[7]), 
		 -> STR_6(CODE[10]), STR_5(CODE[2]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> STR_2(CODE[6]), STR_1(CODE[20]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_14(CODE[3]), STR_13(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(BANK0[2]), SW_NSLT_Txt(BANK0[2]), SW_NSPED_Txt(BANK0[2]), 
		 -> SW_EWLT_Txt(BANK0[2]), SW_EWPED_Txt(BANK0[2]), PED_NS_Count(BANK0[3]), PED_EW_Count(BANK0[3]), 
		 -> NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), 
		 -> FlashingS_Txt(BANK0[2]), FlashingR_Txt(BANK0[2]), Act_Mode_Txt(BANK0[2]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___wmul
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _Night_Mode->_Wait_N_Seconds
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawRect->_drawFastHLine
    _drawRect->_drawFastVLine
    _drawFastHLine->_setAddrWindow
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _init_UART->_OpenUSART
    _Day_Mode->_PED_Control
    _Wait_N_Seconds->_update_LCD_count
    _update_LCD_count->_drawtext
    _Wait_One_Second->_update_LCD_misc
    _update_LCD_misc->_drawtext
    ___ftdiv->___awtoft
    ___awtoft->___wmul
    _Set_NS_LT->_update_LCD_color
    _Set_NS->_update_LCD_color
    _Set_EW_LT->_update_LCD_color
    _Set_EW->_update_LCD_color
    _update_LCD_color->_fillCircle
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _PED_Control->_update_LCD_PED_Count
    _update_LCD_PED_Count->_drawtext
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite
    ___wmul->___awdiv
    ___awdiv->___awmod

Critical Paths under _chkisr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  677041
                                             88 COMRAM     2     2      0
                           _Day_Mode
                        _Do_Flashing
                            _Do_Init
                  _Initialize_Screen
                         _Night_Mode
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                       _get_full_ADC
                            _init_IO
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              42    37      5   52834
                                             77 COMRAM    11     6      5
                                              0 BANK0     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   13093
                                             49 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   12814
                                             49 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4526
                                             34 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     584
                                             14 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     803
                                             14 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2295
                                             22 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     752
                                             27 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     631
                                             14 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     566
                                             56 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4019
                                             71 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3703
                                             59 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     130
                                             14 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _init_IO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Night_Mode                                           0     0      0  171494
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   65323
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawRect
                           _drawtext
                         _fillCircle
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    1660
                                             33 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    1585
                                             21 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawRect                                            11     1     10    5386
                                             32 COMRAM    11     1     10
                      _drawFastHLine
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastHLine                                       11     7      4    1488
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    8364
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    4092
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0      90
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    4092
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    4002
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    4002
                                             34 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0     273
                           _Init_ADC
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     273
                                             14 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Do_Flashing                                          2     0      2  140329
                                             73 COMRAM     2     0      2
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                    _Wait_One_Second
 ---------------------------------------------------------------------------------
 (1) _Day_Mode                                             0     0      0  237632
                        _PED_Control
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                     _Wait_N_Seconds
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (2) _Wait_N_Seconds                                       2     2      0   93254
                                             73 COMRAM     2     2      0
                    _Wait_One_Second
                   _update_LCD_count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_count                                     2     1      1   31004
                                             71 COMRAM     2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second                                      0     0      0   62089
                   _Wait_Half_Second
                           _drawtext
                             _strcpy
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (4) _update_LCD_misc                                      2     2      0   34843
                                             71 COMRAM     2     2      0
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                           _drawtext
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (1) _get_full_ADC                                         6     4      2      23
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     848
                                             14 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2898
                                             38 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2391
                                             34 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2128
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    1559
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Set_NS_LT                                            1     1      0   19560
                                             67 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_NS                                               1     1      0   19560
                                             67 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW_LT                                            1     1      0   19560
                                             67 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW                                               1     1      0   19560
                                             67 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (3) _update_LCD_color                                     3     2      1   19516
                                             64 COMRAM     3     2      1
                         _drawCircle
                         _fillCircle
 ---------------------------------------------------------------------------------
 (4) _fillCircle                                           8     0      8    9639
                                             56 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (5) _fillCircleHelper                                    24    12     12    3607
                                             32 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (4) _drawCircle                                          20    12      8    9026
                                             25 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _PED_Control                                          3     2      1   31295
                                             73 COMRAM     3     2      1
          _Wait_One_Second_With_Beep
               _update_LCD_PED_Count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_PED_Count                                 2     1      1   30880
                                             71 COMRAM     2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (4) _drawtext                                            17     9      8   25687
                                             54 COMRAM    17     9      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     143
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _drawChar                                            11     4      7   11182
                                             43 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (6) _fillRect                                            11     6      5    3044
                                             32 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (7) _drawFastVLine                                       11     7      4    2442
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _drawPixel                                            4     1      3    3367
                                             21 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (8) _setAddrWindow                                        4     1      3     814
                                             17 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (9) _write_data                                           1     1      0      45
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (9) _write_command                                        1     1      0      45
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (8) _spiwrite                                             2     2      0      23
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2962
                                             28 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    2383
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    2525
                                             20 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second_With_Beep                            0     0      0       0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                   _Wait_Half_Second
 ---------------------------------------------------------------------------------
 (4) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _chkisr                                             14    14      0       0
                                              0 COMRAM    14    14      0
                           _INT0_ISR
                           _INT1_ISR
                           _INT2_ISR
 ---------------------------------------------------------------------------------
 (13) _INT2_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT1_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT0_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Day_Mode
     _PED_Control
       _Wait_One_Second_With_Beep
         _Activate_Buzzer
         _Deactivate_Buzzer
         _Wait_Half_Second
       _update_LCD_PED_Count
         ___awdiv
           ___awmod (ARG)
         ___awmod
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _drawtext
             _drawChar
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
           ___awmod (ARG)
         ___awmod
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _update_LCD_misc
       ___awtoft
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftge
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _drawtext
         _drawChar
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _get_full_ADC
   _Do_Flashing
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_One_Second
       _Wait_Half_Second
       _drawtext
         _drawChar
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _strcpy
       _update_LCD_misc
         ___awtoft
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftge
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _get_full_ADC
   _Do_Init
     _Init_ADC
     _init_UART
       _OpenUSART
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawRect
       _drawFastHLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillCircle
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _fillCircleHelper
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Night_Mode
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _drawtext
             _drawChar
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
           ___awmod (ARG)
         ___awmod
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   ___awtoft
     ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftge
   ___wmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
   _get_full_ADC
   _init_IO
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _putch
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 _chkisr (ROOT)
   _INT0_ISR
   _INT1_ISR
   _INT2_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     17      6E       5       85.9%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     5A      68       1       81.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D6      34        0.0%
DATA                 0      0      D6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Nov 02 18:54:37 2022

                       drawCircle@f 0028                         drawCircle@r 001E  
                       drawCircle@x 002A                         drawCircle@y 002C  
         _Wait_One_Second_With_Beep 3B94                         _SSPSTATbits 000FC7  
                      drawCircle@x0 001A                        drawCircle@y0 001C  
                      ___awdiv@sign 001A                 ___wmul@multiplicand 001F  
          update_LCD_color@Circle_Y 0043                        ___ftadd@exp1 0047  
                      ___ftadd@exp2 0046                        ___ftadd@sign 0045  
                               l131 3688                                 l141 3BCC  
                               l207 2168                                 l216 20BE  
                               l209 2042                                 l244 2C24  
                               l245 2B90                                 l430 3814  
                               l191 31FC                                 l255 1D9A  
                               l423 3AAC                                 l247 2C00  
                               l432 3818                                 l248 2C22  
                               l185 3A28                                 l273 21D8  
                               l433 381E                                 l441 37D4  
                               l530 2DC4                                 l514 169C  
                               l450 38A0                                 l434 3822  
                               l442 37DA                                 l426 3ACC  
                               l451 38A6                                 l435 3844  
                               l443 37DE                                 l523 2012  
                               l452 38AA                                 l460 3862  
                               l444 3800                                 l453 38CC  
                               l461 3866                                 l462 3888  
                               l439 37D0                                 l472 34A4  
                               l448 389C                                 l473 34C2  
                               l457 3858                                 l289 3174  
                               l377 3C1A                                 l482 2CFA  
                               l475 34CE                                 l459 385C  
                               l901 39C6                                 l629 052C  
                               l478 2C64                                 l582 133A  
                               l671 3424                                 l487 2F34  
                               l575 18E0                                 l647 083C  
                               l680 3466                                 l499 3B42  
                               l683 3AA6                                 l675 343E  
                               l676 3440                                 l677 344A  
                               l678 344C                                 l876 3060  
                               l967 25CA                                 l976 25BA  
                               l889 3386                   ?_Wait_Half_Second 0001  
     update_LCD_PED_Count@direction 0049                                 _PR2 000FCB  
                 _Deactivate_Buzzer 3C32                                 _dir 00B7  
                               _nbr 00B1                                 _txt 005B  
                    drawFastHLine@w 0017                      drawFastHLine@x 0020  
                    drawFastHLine@y 0016                        ___awmod@sign 0014  
           __end_of_update_LCD_misc 1B14                                 prod 000FF3  
                               wreg 000FE8                  ??_Wait_Half_Second 000F  
                ?_Deactivate_Buzzer 0001                     ??_fillRectangle 001B  
                      __CFG_LVP$OFF 000000             _TFT_GreenTab_Initialize 3A56  
                      ___ftdiv@cntr 0030                        ___ftdiv@sign 0035  
                      __CFG_WDT$OFF 000000                                l1008 2E8A  
                              l1112 26C2                                l1106 2FCA  
                              l1122 3AE4                                l1202 3594  
                              l1019 2E62                                l1052 1B82  
                    drawFastVLine@h 0017                                l1133 2988  
                              l1063 1C44                                l1080 2A6A  
                              l1072 1C60                                l1048 1B58  
                              l1049 1CD6                                l1129 37BC  
                              l1090 2318                                l1083 2A36  
                              l1091 2340                                l1172 30DC  
                              l1182 33E6                                l1088 23B0  
                              l1097 23A0                      drawFastVLine@x 0020  
                    drawFastVLine@y 0016                                l1278 398A  
                              l4102 2C04                                l4120 30FE  
                              l4112 2C1E                                l4202 15C6  
                              l4106 2C0E                                l4124 3136  
                              l3502 3756                                l4134 315C  
                              l4152 341C                                l4144 340A  
                              l4136 316A                                l4080 2B5A  
                              l6020 1EE4                                l4164 3436  
                              l4156 3428                                l4148 3414  
                              l4086 2BC8                                l6102 1CB0  
                              l3472 31BE                                l4440 38B0  
                              l4424 3828                                l4432 37E4  
                              l6024 1F3E                                l6016 1E8A  
                              l6112 25EA                                l3490 3A0A  
                              l3482 31E4                                l4194 141C  
                              l6034 1FF6                                l4098 2BF6  
                              l6050 1B90                                l6114 2604  
                              l3484 31F2                                l3468 3186  
                              l6028 1F9A                                l6212 38DE  
                              l6044 1B66                                l6140 266E  
                              l6132 2646                                l3566 3958  
                              l3822 1E70                                l4198 14F0  
                              l3830 39DC                                l6222 3904  
                              l6150 269C                                l6142 2674  
                              l6118 2612                                l7102 2886  
                              l3568 395E                                l3672 223A  
                              l3656 21BE                                l4448 386C  
                              l5600 2DE6                                l6208 38D4  
                              l6072 1BE8                                l6056 1B9C  
                              l6136 2658                                l3498 373A  
                              l5610 2E4A                                l5602 2DF2  
                              l6074 1BF4                                l6066 1BC4  
                              l6330 2372                                l6146 2686  
                              l6242 18A0                                l6234 17DC  
                              l7106 2892                                l3676 228C  
                              l3828 39D2                                l5612 2E56  
                              l5604 2E12                                l6092 1C7E  
                              l6084 1C2C                                l6076 1C00  
                              l6404 3792                                l6500 354A  
                              l6332 2378                                l5550 203E  
                              l5542 2024                                l6182 3474  
                              l6086 1C38                                l6078 1C08  
                              l6326 2362                                l6318 234E  
                              l6262 1130                                l5560 207E  
                              l5552 2046                                l5624 2E7C  
                              l5608 2E2A                                l6440 292C  
                              l6352 24E2                                l6336 238C  
                              l6280 1316                                l6256 1088  
                              l5562 20B2                                l5546 2030  
                              l6186 347E                                l3794 1D80  
                              l5618 2E6A                                l5706 2A44  
                              l5730 2F9A                                l6442 2932  
                              l6450 295E                                l6418 28C2  
                              l6346 24D2                                l6338 239A  
                              l6290 22C0                                l6274 1264  
                              l6266 1140                                l5580 2134  
                              l5572 20E0                                l5564 20B6  
                              l5556 204E                                l5660 2B36  
                              l5652 2AF2                                l5636 2A94  
                              l6436 291C                                l6700 035C  
                              l5822 2FE2                                l5582 215C  
                              l5574 2108                                l5662 2B3C  
                              l5718 39A2                                l5670 29A8  
                              l5726 2F68                                l6454 2976  
                              l6446 2946                                l6390 258C  
                              l6374 2558                                l6366 2526  
                              l6702 0370                                l6622 002A  
                              l7086 27C6                                l5648 2AD8  
                              l5672 29C2                                l5736 2FC6  
                              l6448 2954                                l6464 3084  
                              l6392 2592                                l6296 22DE  
                              l6800 0802                                l6720 042C  
                              l6712 03EC                                l6632 0056  
                              l5834 300A                                l5850 3046  
                              l6810 35FC                                l6466 3092  
                              l6386 257C                                l6378 2568  
                              l6730 04DA                                l6706 03D8  
                              l6634 0084                                l6626 003E  
                              l6802 081C                                l5836 3014  
                              l5828 2FF4                                l5588 2164  
                              l5596 2DD6                                l5676 29D0  
                              l5780 19A6                                l5772 1982  
                              l6476 30CC                                l6468 309A  
                              l6492 33D6                                l6484 339A  
                              l6396 25A6                                l6732 04EA  
                              l6724 044C                                l6716 0426  
                              l6708 03DE                                l6628 004C  
                              l5854 3056                                l5846 303A  
                              l5838 301C                                l5870 332A  
                              l6806 35EC                                l6486 33A8  
                              l6398 25B4                                l6742 0532  
                              l5696 2A10                                l5792 19DA  
                              l5784 19BA                                l5776 1992  
                              l6824 3636                                l6488 33B0  
                              l6760 0696                                l6752 05AA  
                              l6736 04FA                                l6680 025C  
                              l6672 01EC                                l6664 0184  
                              l6648 00E0                                l5890 337C  
                              l5882 3360                                l5874 3338  
                              l5866 331C                                l6914 2EF2  
                              l6498 353C                                l6738 050E  
                              l6682 0272                                l5876 3342  
                              l5796 19EA                                l5788 19CA  
                              l6860 2CA0                                l6764 06A6  
                              l6748 0558                                l6692 02DE  
                              l6676 0214                                l5878 334A  
                              l5886 336C                                l5990 2D5A  
                              l5798 19F2                                l6790 0750  
                              l6782 0710                                l6758 0686  
                              l6694 02EA                                l6678 022A  
                              l6766 06B6                                l6776 06FC  
                              l6688 02B8                                l5986 2D00  
                              l6866 2CB8                                l6794 0770  
                              l6786 074A                                l6778 0702  
                              l6698 032E                                l5996 2DB4  
                              l6796 0780                                STR_1 FF99  
                              STR_2 FFE1                                STR_3 FFE7  
                              STR_4 FFEB                                STR_5 FFFC  
                              STR_6 FFC9                                STR_7 FFDA  
                              STR_8 FFBD                                STR_9 FFD3  
                              u2420 31B4                                u5000 2ABC  
                              u3260 312C                                u3180 2B88  
                              u3190 2BBE                                u5051 299A  
                      printf@tmpval 00E6                                u5150 195A  
                              u5071 29B8                                u5160 195C  
                              u6300 0524                                u6140 0120  
                              u5361 1B24                                u6145 0116  
                              _MODE 00AF                                u5371 1B38  
                              u6500 2858                                u5571 25DC  
                              u4870 2116                                u5591 25FA  
                              u6490 2856                                u5771 22B2  
                              u5951 28B4                                u5791 22D0  
                              u5970 28E0                                _RBPU 007F8F  
                              u5975 28D8                                _TRMT 007D61  
               ??_Deactivate_Buzzer 000F                                _main 27B6  
                              _font FD33                        ___ftpack@arg 000F  
                      ___ftpack@exp 0012                                fsr0h 000FEA  
                              fsr1h 000FE2                      ??_get_full_ADC 0011  
                              fsr0l 000FE9                                fsr2h 000FDA  
                              fsr1l 000FE1                                indf2 000FDF  
                              fsr2l 000FD9                                _wrap 0068  
                              _volt 00AC                     drawFastHLine@hi 001E  
                   drawFastHLine@lo 001F            __end_of_update_LCD_color 169E  
                              pclat 000FFA            __end_of_update_LCD_count 2014  
                __size_of_LCD_Reset 0012                                prodh 000FF4  
                              prodl 000FF3                                start 0018  
                   __end_of_Do_Init 3B14                     ??_drawFastHLine 001A  
                   ??_drawFastVLine 001A                        ___ftmul@cntr 0030  
                      ___param_bank 000010                        ___ftmul@sign 0031  
                      ___fttol@exp1 0047                        ___fttol@lval 0043  
                      _Act_Mode_Txt 009C                    __end_of_INT0_ISR 3B7E  
                  __end_of_INT1_ISR 3B64                    __end_of_INT2_ISR 3C42  
                       _Do_Flashing 35EA           __end_of_Deactivate_Buzzer 3C3A  
                   drawFastVLine@hi 001E                     drawFastVLine@lo 001F  
                       _SW_EWLT_Txt 00A2                         _SW_MODE_Txt 00A6  
                             ?_main 0001                     __end_of___awdiv 3062  
                   __end_of___ftadd 1CD8                     drawCircle@ddF_x 0024  
                             STR_10 FFF3                     drawCircle@ddF_y 0026  
                             STR_11 FFEF                               STR_12 FF84  
                             STR_13 FFAD                               STR_14 FFF7  
                             STR_15 FFFC                               STR_16 FFFA  
                   __end_of___awmod 3388                     __end_of___ftdiv 2A6C  
                   __end_of___ftneg 3AF2                     __end_of___lldiv 30EE  
                   __end_of___ftmul 26C4                               _T0CON 000FD5  
                   ___awdiv@divisor 0017                     __end_of___llmod 33F8  
                   __end_of___ftsub 37BE                     __end_of___fttol 298A  
                             _T2CON 000FCA                               _T3CON 000FB1  
                             i2l402 3B62                               i2l392 324A  
                             i2l397 3B7C                     ___awdiv@counter 0019  
                   drawCircle@color 0020                               _RCSTA 000FAB  
                             _TMR0H 000FD7                               _TMR0L 000FD6  
                             _SPBRG 000FAF                               _PORTD 000F83  
                             _TRISA 000F92                               _TRISB 000F93  
                             _TRISC 000F94                               _TRISD 000F95  
                             _TRISE 000F96                               _TXREG 000FAD  
                             _TXSTA 000FAC                               _Count 00B3  
                      ?_PED_Control 004A                               _Rcmd1 23B2  
                             _Rcmd3 26C4                        ___lltoft@exp 001F  
                       _SW_NSLT_Txt 00A8                       drawRect@color 0029  
                     ___awtoft@sign 0026                     __end_of_init_IO 3B94  
                   __end_of_dpowers FF36                               _font2 FE32  
             fillCircleHelper@ddF_x 002F               fillCircleHelper@ddF_y 0031  
                 ??_Wait_One_Second 004A                               _scale 0F5C  
                     ___ftpack@sign 0013               fillCircleHelper@delta 0029  
                             _putch 3C16               fillCircleHelper@color 002B  
                    __CFG_BOREN$OFF 000000                               tablat 000FF5  
                             status 000FD8              ??_update_LCD_PED_Count 0049  
                  __end_of_Day_Mode 2CFC                      _Wait_N_Seconds 38CE  
                   write_data@data_ 0011                     __initialization 3596  
                      __end_of_main 28A4                        __end_of_font FE32  
                  __end_of_Init_ADC 3C32                    __end_of_Rcmd2red 394E  
                        _Night_Mode 2E8C                              ??_main 0059  
                     ___fttol@sign1 0042                       __activetblptr 000002  
             Wait_N_Seconds@seconds 004A                   __end_of_LCD_Reset 3BE4  
                      _SW_EWPED_Txt 00A4                __size_of__tdiv_to_l_ 0110  
         ??_TFT_GreenTab_Initialize 0029                    ?_update_LCD_misc 0001  
                            ?_Rcmd1 0001                              ?_Rcmd3 0001  
                            _ADCON0 000FC2                              _ADCON1 000FC1  
                            _ADCON2 000FC0                    ___llmod@dividend 001C  
                            ?_scale 0032                              _ADRESH 000FC4  
                            _ADRESL 000FC3                              _CCPR2L 000FBB  
              PED_Control@direction 004B                    ___awdiv@dividend 0015  
                  __end_of___awtoft 39C8                              ?_putch 0001  
                  __end_of___ftpack 2E8C                    __end_of___lltoft 3596  
                         ??_Do_Init 0012                              i2l4922 3B76  
                            i2l4930 3B5C                              i2l5484 3236  
                            i2l5488 3240                              _OSCCON 000FD3  
                            _SPBRGH 000FB0                              _SSPBUF 000FC9  
            __end_of_Wait_N_Seconds 3910                        _SW_NSPED_Txt 00AA  
                  __end_of_delay_ms 3690                              _Set_EW 388A  
                            _Set_NS 3802                    __end_of_fillRect 377A  
                  __end_of_drawChar 216A                    __end_of__powers_ FF84  
                  __end_of_drawRect 3536                  __size_of_Set_EW_LT 0044  
                __size_of_OpenUSART 0070                              ___ftge 2F36  
                __size_of_Set_NS_LT 0044            __size_of_Activate_Buzzer 0012  
                            ___wmul 3A80                           ??___awdiv 0019  
         __size_of_fillCircleHelper 0138                    __end_of_drawtext 2B4A  
                         ??___ftadd 0042                           ??___awmod 0013  
                         ??___ftdiv 002D                           ??___ftneg 0012  
                         ??___lldiv 0017                           ??___ftmul 0029  
                         ??___llmod 0024                           ??___ftsub 004E  
                         ??___fttol 003D                              _chkisr 0008  
                            _buffer 00B8                              _fround 169E  
                            clear_0 359C                              clear_1 35A8  
                  ___awdiv@quotient 001B                     ___awmod@divisor 0011  
        __size_of_Deactivate_Buzzer 0008                     ___awmod@counter 0013  
                            _printf 001C                        drawtext@size 003E  
                            _strcpy 39C8                              _strlen 394E  
             ___ftmul@f3_as_product 002D                __end_of_get_full_ADC 3ACE  
                         ??_init_IO 000F                        __pdataCOMRAM 0068  
__size_of_Wait_One_Second_With_Beep 0016                         Set_EW@color 0044  
                      __mediumconst FD32                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
                            putch@c 000F                    __end_of_spiwrite 3BD2  
                       Set_NS@color 0044                          __accesstop 0080  
           __end_of__initialization 35E0                           ?_INT0_ISR 0001  
                         ?_INT1_ISR 0001                           ?_INT2_ISR 0001  
                        ___ftadd@f1 003C                          ___ftadd@f2 003F  
                        ___ftge@ff1 000F                          ___ftge@ff2 0012  
                   ?_Wait_N_Seconds 0001                       ___rparam_used 000001  
                        ___ftdiv@f1 0027                          ___ftdiv@f2 002A  
                        ___ftdiv@f3 0031                          ___ftneg@f1 000F  
                        ___awtoft@c 0023                          ___ftmul@f1 0023  
                        ___ftmul@f2 0026                          ___ftsub@f1 0048  
                        ___ftsub@f2 004B                          ___fttol@f1 0039  
                     __end_of_Rcmd1 24C2                       __end_of_Rcmd3 27B6  
                    __pcstackCOMRAM 0001                        __pidataBANK0 3A2A  
                        ___lltoft@c 0017                       __end_of_font2 FF0E  
                     __end_of_scale 133C                       __end_of_putch 3C24  
                       ?_Night_Mode 0001                      drawPixel@color 0017  
            __size_of_write_command 0010                          __div_to_l_ 24C2  
                         ?_Day_Mode 0001          fillCircleHelper@cornername 0027  
                           ??_Rcmd1 0029                             ??_Rcmd3 0029  
                __size_of_drawPixel 0030                   __end_of_Set_EW_LT 388A  
                 __end_of_OpenUSART 3468                     __div_to_l_@exp1 001A  
                 __end_of_Set_NS_LT 3802                     __div_to_l_@cntr 0019  
                           ??_scale 0035                __size_of_PED_Control 0068  
                   __div_to_l_@quot 0015                             ??_putch 000F  
                        __pbssBANK0 00AC                           ?_Init_ADC 0001  
                         ?_Rcmd2red 0001                  __size_of_init_UART 0014  
                        ??_INT0_ISR 0001                          ??_INT1_ISR 0001  
         __size_of_Wait_Half_Second 001A                          ??_INT2_ISR 0001  
                   spiwrite@spidata 0010                       __div_to_l_@f1 000F  
                     __div_to_l_@f2 0012                   ?_update_LCD_color 0041  
                 ?_update_LCD_count 0048                             ?_Set_EW 0001  
                           ?_Set_NS 0001                  __CFG_CCP2MX$PORTBE 000000  
                ??_update_LCD_color 0042                  ??_update_LCD_count 0049  
                           ?___ftge 000F                             ?___wmul 001D  
                           ?_chkisr 0001              __size_of_setAddrWindow 004E  
                           _CCP2CON 000FBA                        ?_Do_Flashing 004A  
         update_LCD_PED_Count@count 0048                             ?_fround 0032  
                         ?___awtoft 0023                           ?___ftpack 000F  
                   _Wait_One_Second 3284                          _fillCircle 3690  
                           ?_printf 004E                           ?___lltoft 0017  
                           ?_strcpy 000F                             ?_strlen 000F  
                 ??_Activate_Buzzer 000F                          _fillScreen 3B14  
                        _drawCircle 1CD8                          ??_Day_Mode 004D  
                         ?_delay_ms 0023                           ?_fillRect 0021  
         update_LCD_count@direction 0049                           ?_drawChar 002C  
                           _SSPCON1 000FC6                           ?_drawRect 0021  
                           _SSPSTAT 000FC7               __end_of_fillRectangle 2C26  
                         ?_drawtext 0037                             _SW_EWLT 0061  
                           _SW_MODE 0063                          ??_Init_ADC 000F  
                           _Do_Init 3AF2                             _SW_NSLT 00B5  
                        ??_Rcmd2red 0012                 __size_of_Night_Mode 00AA  
                     _write_command 3C06                   __end_of__npowers_ FF5D  
                           __Hparam 0000                          _scale$2494 0035  
                           __Lparam 0000                     __size_of_Set_EW 0044  
                   __size_of_Set_NS 0044               __end_of_drawFastHLine 3176  
                 __end_of_drawPixel 3A2A               __end_of_drawFastVLine 31FE  
                  _fillCircleHelper 216A                     __size_of___ftge 0096  
                           ___awdiv 2FCC                             ___ftadd 1B14  
                           ___awmod 3306                             ___ftdiv 298A  
                           ___ftneg 3ACE                             ___lldiv 3062  
                   __size_of___wmul 0028                             ___ftmul 25CC  
                           ___llmod 3388                             ___ftsub 377A  
                           ___fttol 28A4               __size_of_get_full_ADC 0026  
                   __size_of_chkisr 327C                           ?_spiwrite 0001  
                           __pcinit 3596                          ??___awtoft 0026  
                        ??___ftpack 0014                     __size_of_fround 0244  
                           __ramtop 1000                          ??___lltoft 001B  
                           __ptext0 27B6                             __ptext1 001C  
                           __ptext2 0F5C                             __ptext3 3C16  
                           __ptext4 169E                             __ptext5 25CC  
                           __ptext6 22A2                             __ptext7 24C2  
                           __ptext8 3536                             __ptext9 3388  
                   __size_of_printf 0822                   __end_of_init_UART 3BBE  
                         _T0CONbits 000FD5                     __size_of_strcpy 0032  
                   __size_of_strlen 003E                         ?__div_to_l_ 000F  
                           _init_IO 3B7E                             _dpowers FF0E  
                         _T3CONbits 000FB1                    ___awmod@dividend 000F  
                        ??_delay_ms 0025                       drawtext@_text 0038  
                     drawtext@color 003A                          ??_fillRect 0026  
                        ??_drawChar 0033                           _LCD_Reset 3BD2  
                        ??_drawRect 002B                       _setAddrWindow 36E2  
                    __pintcode_body 31FE                  drawFastHLine@color 0018  
                        delay_ms@ms 0023                end_of_initialization 35E0  
                        ??_drawtext 003F                      ?_write_command 0001  
                     __Lmediumconst FD32                             int_func 31FE  
                         _PED_Count 00B4                        _get_full_ADC 3AA8  
                   ___lldiv@divisor 0013                        PED_Control@i 004C  
                         _EW_PED_SW 005D       __size_of_update_LCD_PED_Count 00CA  
                   ___lldiv@counter 001B             __end_of_Wait_One_Second 3306  
                         _RCSTAbits 000FAB                             printf@c 00ED  
                           printf@f 004E                             postdec1 000FE5  
                           postdec2 000FDD                             postinc0 000FEE  
                           postinc2 000FDE                      __tdiv_to_l_@f1 000F  
                    __tdiv_to_l_@f2 0012                          ??_spiwrite 000F  
                           strlen@s 000F                     fillCircle@color 003F  
                     ??__tdiv_to_l_ 0015                         ?_fillCircle 0039  
                         _PORTAbits 000F80                    drawtext@cursor_x 0047  
                  drawtext@cursor_y 0046                           _PORTBbits 000F81  
                         _PORTCbits 000F82                           _PORTDbits 000F83  
                         _PORTEbits 000F84                         ?_fillScreen 0022  
                         _NS_PED_SW 0060                         ?_drawCircle 001A  
                        drawChar@bg 0030                           _TRISCbits 000F94  
                    ?_setAddrWindow 0012                          ?_LCD_Reset 0001  
                  ??_Wait_N_Seconds 004A                    drawtext@textsize 0042  
          __size_of_update_LCD_misc 0232                          drawPixel@x 0019  
                        drawPixel@y 0016                    _Wait_Half_Second 3B30  
                       ___ftdiv@exp 0034                           _TXSTAbits 000FAC  
                PED_Control@Num_Sec 004A                  get_full_ADC@result 0013  
                 __size_of_INT0_ISR 001A                 __size_of__div_to_l_ 010A  
                 __size_of_INT1_ISR 001A                   __size_of_INT2_ISR 0008  
                       ___ftmul@exp 002C                      __end_of_Set_EW 38CE  
                    __end_of_Set_NS 3846                      __end_of___ftge 2FCC  
                    __end_of___wmul 3AA8                       delay_ms@count 0027  
                        _write_data 3BF6                       __pidataCOMRAM 3C42  
                    __end_of_chkisr 3284                        ??_Night_Mode 004C  
          ?_TFT_GreenTab_Initialize 0001                          drawtext@bg 003C  
                    __end_of_fround 18E2                __size_of_Do_Flashing 0054  
                    __end_of_printf 083E                      __end_of_strcpy 39FA  
                    __end_of_strlen 398C                 start_initialization 3596  
               __end_of__tdiv_to_l_ 23B2                   __size_of_Day_Mode 00D6  
                   ??_write_command 0011                           _Set_EW_LT 3846  
                         _OpenUSART 33F8                           _Set_NS_LT 37BE  
               __size_of_fillCircle 0052                     ___llmod@divisor 0020  
                  __CFG_OSC$INTIO67 000000                   __size_of_Init_ADC 000E  
                   ___llmod@counter 0024                  __end_of_Night_Mode 2F36  
                 __size_of_Rcmd2red 003E                 __size_of_fillScreen 001C  
                   Wait_N_Seconds@I 004B                 __size_of_drawCircle 01AE  
                          ??_Set_EW 0044                            ??_Set_NS 0044  
                   _Activate_Buzzer 3BE4                    ?_Wait_One_Second 0001  
                          ??___ftge 0015                            ??___wmul 0021  
                          ??_chkisr 0001                         __pdataBANK0 0080  
                          ??_fround 0035                     setAddrWindow@x0 0015  
                   setAddrWindow@x1 0013                     setAddrWindow@y0 0012  
                   setAddrWindow@y1 0014                            ??_printf 0053  
                          ??_strcpy 0013                            ??_strlen 0011  
                      _PED_EW_Count 0096           __size_of_update_LCD_color 0362  
         __size_of_update_LCD_count 018E                          fround@prec 003B  
                 __size_of___awtoft 003C                   __size_of___ftpack 00C6  
                 __size_of___lltoft 0060                         __pbssCOMRAM 005B  
                     ??_PED_Control 004B                     ??_setAddrWindow 0015  
                     __pcstackBANK0 00D7                        _PED_NS_Count 0099  
                       ??_LCD_Reset 0029            __end_of_fillCircleHelper 22A2  
                 __size_of_delay_ms 0052          ?_Wait_One_Second_With_Beep 0001  
                          ?_Do_Init 0001                   __size_of_fillRect 004A  
                 __size_of_drawChar 0156                          ?_Set_EW_LT 0001  
                        ?_OpenUSART 000F                   __size_of_drawRect 0066  
                        ?_Set_NS_LT 0001                   __size_of_drawtext 00DE  
                 ??_update_LCD_misc 0048                           __pintcode 0008  
   __end_of_TFT_GreenTab_Initialize 3A80                       __pmediumconst FD32  
                          ?___awdiv 0015                            ?___ftadd 003C  
                          ?___awmod 000F                            ?___ftdiv 0027  
                          ?___ftneg 000F                            ?___lldiv 000F  
                          ?___ftmul 0023                            ?___llmod 001C  
                          ?___ftsub 0048                           __npowers_ FF36  
                          ?___fttol 0039                           __tft_type 0064  
                         _direction 0066                  drawFastVLine@color 0018  
                       ?_write_data 0001                           _drawPixel 39FA  
                       __tdiv_to_l_ 22A2                   __size_of_spiwrite 0014  
                      ??__div_to_l_ 0015                            ?_init_IO 0001  
                 _Initialize_Screen 083E                      __size_of_Rcmd1 0110  
                    __size_of_Rcmd3 00F2                           _init_UART 3BAA  
                ?_Initialize_Screen 0001                            _FLASHING 005E  
                    __size_of_scale 03E0                      __size_of_putch 000E  
 __end_of_Wait_One_Second_With_Beep 3BAA                 __end_of_PED_Control 34D0  
           __end_of_Activate_Buzzer 3BF6                            _LED_7seg 0080  
                          _INT0_ISR 3B64                            _INT1_ISR 3B4A  
                          _INT2_ISR 3C3A                      ___wmul@product 0021  
               ??_Initialize_Screen 0048                            _PIE1bits 000F9D  
                          _PIR1bits 000F9E                  __end_of__div_to_l_ 25CC  
                          _PIR2bits 000FA1                            _EW_Count 008D  
                         fillRect@h 0023                           fillRect@i 002A  
                         fillRect@w 0022                           fillRect@x 0029  
                         fillRect@y 0021                           drawChar@c 002D  
                         drawChar@i 0036                           drawChar@j 0035  
                      ??_fillCircle 0041                           drawChar@x 0034  
                         drawChar@y 002C                          ?_drawPixel 0016  
            __size_of_fillRectangle 00DC                            _NS_Count 0093  
                        _ADCON0bits 000FC2            __end_of_Wait_Half_Second 3B4A  
                 ___wmul@multiplier 001D           __end_of_Initialize_Screen 0F5C  
                      ??_fillScreen 0024                           drawRect@h 0027  
                         drawRect@w 0025                           drawRect@x 0021  
                         drawRect@y 0023                       _FlashingR_Txt 009E  
                     _FlashingS_Txt 00A0                        ??_drawCircle 0022  
                        printf@flag 00DC        __end_of_update_LCD_PED_Count 2DC6  
                        printf@fval 00EA                           main@nStep 0059  
                          _SW_EWPED 0062                          printf@prec 00DE  
             update_LCD_color@color 0041                            _Day_Mode 2C26  
                          _SW_NSPED 00B6           update_LCD_color@direction 0042  
                        ?_init_UART 0001              __size_of_drawFastHLine 0088  
                       _INTCON2bits 000FF1                         _INTCON3bits 000FF0  
                         copy_data0 35C2                           drawtext@i 0044  
            __size_of_drawFastVLine 0088                           drawtext@x 0041  
                         drawtext@y 0037                            _Init_ADC 3C24  
                 write_command@cmd_ 0011                         ??_Set_EW_LT 0044  
                       ??_OpenUSART 0011                         ??_Set_NS_LT 0044  
                          _Rcmd2red 3910                    __size_of_Do_Init 0022  
               __size_of_write_data 0010                     OpenUSART@config 0011  
                __end_of_fillCircle 36E2                            __Hrparam 0000  
                __end_of_fillScreen 3B30               update_LCD_count@count 0048  
                          __Lrparam 0000                  __end_of_drawCircle 1E86  
                  __size_of___awdiv 0096                    __size_of___ftadd 01C4  
                  __size_of___awmod 0082                    __size_of___ftdiv 00E2  
                  __size_of___ftneg 0024                    __size_of___lldiv 008C  
                  __size_of___ftmul 00F8                    __size_of___llmod 0070  
                  __size_of___ftsub 0044                    __size_of___fttol 00E6  
                          ___awtoft 398C                            ___ftpack 2DC6  
                       _fround$2492 0038                         _fround$2493 0035  
                          ___lltoft 3536                    _update_LCD_color 133C  
                  _update_LCD_count 1E86                    __size_of_init_IO 0016  
                       _PED_Control 3468                            _delay_ms 363E  
                          __ptext10 3062                            __ptext11 28A4  
                          __ptext20 34D0                            __ptext12 377A  
                          __ptext21 30EE                            __ptext13 1B14  
                          __ptext30 33F8                            __ptext22 3A56  
                          __ptext14 3ACE                            __ptext31 3C24  
                          __ptext23 26C4                            __ptext15 3B7E  
                          __ptext40 298A                            __ptext32 35EA  
                          __ptext24 3910                            __ptext16 2E8C  
                          __ptext41 398C                            __ptext33 2C26  
                          __ptext25 23B2                            __ptext17 083E  
                          __ptext50 216A                            __ptext42 2DC6  
                          __ptext34 38CE                            __ptext26 3BD2  
                          __ptext18 3B14                            __ptext51 1CD8  
                          __ptext43 39C8                            __ptext35 1E86  
                          __ptext27 363E                            __ptext19 2B4A  
                          __ptext60 36E2                            __ptext52 3468  
                          __ptext44 37BE                            __ptext36 3284  
                          __ptext28 3AF2                            __ptext61 3BF6  
                          __ptext53 2CFC                            __ptext45 3802  
                          __ptext37 18E2                            __ptext29 3BAA  
                          __ptext70 3BE4                            __ptext62 3C06  
                          __ptext54 2A6C                            __ptext46 3846  
                          __ptext38 3AA8                            __ptext63 3BBE  
                          __ptext55 394E                            __ptext47 388A  
                          __ptext39 2F36                            __ptext72 3C3A  
                          __ptext64 3A80                            __ptext56 2014  
                          __ptext48 133C                            __ptext73 3B4A  
                          __ptext65 3306                            __ptext57 3730  
                          __ptext49 3690                            __ptext74 3B64  
                          __ptext66 2FCC                            __ptext58 3176  
                          __ptext67 3B94                            __ptext59 39FA  
                          __ptext68 3B30                            __ptext69 3C32  
                          _fillRect 3730                            _drawChar 2014  
                          __powers_ FF5D                            _drawRect 34D0  
  __size_of_TFT_GreenTab_Initialize 002A                    _FLASHING_REQUEST 005F  
                          _colstart 0065                            _drawtext 2A6C  
                        strcpy@from 0011                       _fillRectangle 2B4A  
                  ?_Activate_Buzzer 0001                       __size_of_main 00EE  
                   fillRectangle@hi 001F                     fillRectangle@lo 0020  
                     _drawFastHLine 30EE                      Set_EW_LT@color 0044  
                     _drawFastVLine 3176                       ??_Do_Flashing 004C  
                         printf@exp 00E4                            _spiwrite 3BBE  
                         printf@val 00E0                         ??_drawPixel 0019  
                          _rowstart 0067                  fillCircleHelper@x0 0021  
                fillCircleHelper@y0 0023          __size_of_Initialize_Screen 071E  
                        _INTCONbits 000FF2                      OpenUSART@spbrg 000F  
                       ??_init_UART 0012                            scale@scl 0038  
                        _EWLT_Count 008A                   ?_fillCircleHelper 0021  
                         spiwrite@x 000F         ??_Wait_One_Second_With_Beep 000F  
                          intlevel2 0000                     _update_LCD_misc 18E2  
                    ?_fillRectangle 0016                    __tdiv_to_l_@exp1 001D  
                  __tdiv_to_l_@cntr 001C                    __tdiv_to_l_@quot 0018  
                ??_fillCircleHelper 002D               __end_of_write_command 3C16  
                  ___lldiv@dividend 000F                     fillScreen@color 0022  
              update_LCD_misc@nStep 0048                _update_LCD_PED_Count 2CFC  
           __size_of_Wait_N_Seconds 0042                        fillCircle@x0 0039  
                      fillCircle@y0 003B                      ?_drawFastHLine 0016  
                    fillRectangle@h 0018                      fillRectangle@w 0017  
                    fillRectangle@x 0021                      fillRectangle@y 0016  
                    ?_drawFastVLine 0016                            printf@ap 00DA  
                 fillCircleHelper@f 0033                   fillCircleHelper@r 0025  
                 fillCircleHelper@x 0035                   fillCircleHelper@y 0037  
                      ??_write_data 0011                       fillRect@color 0024  
                      ?__tdiv_to_l_ 000F                         _printf$2495 00D7  
          __size_of_Wait_One_Second 0082                    ___lldiv@quotient 0017  
                          strcpy@cp 0013                            strlen@cp 0013  
                          strcpy@to 000F                 __end_of_Do_Flashing 363E  
                        _NSLT_Count 0090                         fillCircle@r 003D  
             __end_of_setAddrWindow 3730                  fillRectangle@color 0019  
                     drawChar@color 002E                  __end_of_write_data 3C06  
                      drawChar@line 0033                      Set_NS_LT@color 0044  
                     ?_get_full_ADC 000F                        drawChar@size 0032  
             ?_update_LCD_PED_Count 0048  
